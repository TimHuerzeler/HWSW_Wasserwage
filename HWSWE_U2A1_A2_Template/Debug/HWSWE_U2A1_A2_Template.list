
HWSWE_U2A1_A2_Template.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00016334  080002a0  080002a0  000102a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000d74  080165d8  080165d8  000265d8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0801734c  0801734c  0002734c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08017354  08017354  00027354  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  08017358  08017358  00027358  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000330  24000000  0801735c  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          0000139c  24000330  0801768c  00030330  2**2
                  ALLOC
  8 ._user_heap_stack 00005004  240016cc  0801768c  000316cc  2**0
                  ALLOC
  9 .ARM.attributes 00000030  00000000  00000000  00030330  2**0
                  CONTENTS, READONLY
 10 .debug_info   00071d92  00000000  00000000  00030360  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 0000bfce  00000000  00000000  000a20f2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00002fa0  00000000  00000000  000ae0c0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_ranges 00002b40  00000000  00000000  000b1060  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  00049fd2  00000000  00000000  000b3ba0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   00049c1d  00000000  00000000  000fdb72  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    001910f2  00000000  00000000  0014778f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000053  00000000  00000000  002d8881  2**0
                  CONTENTS, READONLY
 18 .debug_frame  0000d338  00000000  00000000  002d88d4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	; (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	; (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	; (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	24000330 	.word	0x24000330
 80002bc:	00000000 	.word	0x00000000
 80002c0:	080165bc 	.word	0x080165bc

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	; (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	; (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	; (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	24000334 	.word	0x24000334
 80002dc:	080165bc 	.word	0x080165bc

080002e0 <strlen>:
 80002e0:	4603      	mov	r3, r0
 80002e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002e6:	2a00      	cmp	r2, #0
 80002e8:	d1fb      	bne.n	80002e2 <strlen+0x2>
 80002ea:	1a18      	subs	r0, r3, r0
 80002ec:	3801      	subs	r0, #1
 80002ee:	4770      	bx	lr

080002f0 <memchr>:
 80002f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002f4:	2a10      	cmp	r2, #16
 80002f6:	db2b      	blt.n	8000350 <memchr+0x60>
 80002f8:	f010 0f07 	tst.w	r0, #7
 80002fc:	d008      	beq.n	8000310 <memchr+0x20>
 80002fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000302:	3a01      	subs	r2, #1
 8000304:	428b      	cmp	r3, r1
 8000306:	d02d      	beq.n	8000364 <memchr+0x74>
 8000308:	f010 0f07 	tst.w	r0, #7
 800030c:	b342      	cbz	r2, 8000360 <memchr+0x70>
 800030e:	d1f6      	bne.n	80002fe <memchr+0xe>
 8000310:	b4f0      	push	{r4, r5, r6, r7}
 8000312:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000316:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800031a:	f022 0407 	bic.w	r4, r2, #7
 800031e:	f07f 0700 	mvns.w	r7, #0
 8000322:	2300      	movs	r3, #0
 8000324:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000328:	3c08      	subs	r4, #8
 800032a:	ea85 0501 	eor.w	r5, r5, r1
 800032e:	ea86 0601 	eor.w	r6, r6, r1
 8000332:	fa85 f547 	uadd8	r5, r5, r7
 8000336:	faa3 f587 	sel	r5, r3, r7
 800033a:	fa86 f647 	uadd8	r6, r6, r7
 800033e:	faa5 f687 	sel	r6, r5, r7
 8000342:	b98e      	cbnz	r6, 8000368 <memchr+0x78>
 8000344:	d1ee      	bne.n	8000324 <memchr+0x34>
 8000346:	bcf0      	pop	{r4, r5, r6, r7}
 8000348:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800034c:	f002 0207 	and.w	r2, r2, #7
 8000350:	b132      	cbz	r2, 8000360 <memchr+0x70>
 8000352:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000356:	3a01      	subs	r2, #1
 8000358:	ea83 0301 	eor.w	r3, r3, r1
 800035c:	b113      	cbz	r3, 8000364 <memchr+0x74>
 800035e:	d1f8      	bne.n	8000352 <memchr+0x62>
 8000360:	2000      	movs	r0, #0
 8000362:	4770      	bx	lr
 8000364:	3801      	subs	r0, #1
 8000366:	4770      	bx	lr
 8000368:	2d00      	cmp	r5, #0
 800036a:	bf06      	itte	eq
 800036c:	4635      	moveq	r5, r6
 800036e:	3803      	subeq	r0, #3
 8000370:	3807      	subne	r0, #7
 8000372:	f015 0f01 	tst.w	r5, #1
 8000376:	d107      	bne.n	8000388 <memchr+0x98>
 8000378:	3001      	adds	r0, #1
 800037a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800037e:	bf02      	ittt	eq
 8000380:	3001      	addeq	r0, #1
 8000382:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000386:	3001      	addeq	r0, #1
 8000388:	bcf0      	pop	{r4, r5, r6, r7}
 800038a:	3801      	subs	r0, #1
 800038c:	4770      	bx	lr
 800038e:	bf00      	nop

08000390 <__aeabi_uldivmod>:
 8000390:	b953      	cbnz	r3, 80003a8 <__aeabi_uldivmod+0x18>
 8000392:	b94a      	cbnz	r2, 80003a8 <__aeabi_uldivmod+0x18>
 8000394:	2900      	cmp	r1, #0
 8000396:	bf08      	it	eq
 8000398:	2800      	cmpeq	r0, #0
 800039a:	bf1c      	itt	ne
 800039c:	f04f 31ff 	movne.w	r1, #4294967295
 80003a0:	f04f 30ff 	movne.w	r0, #4294967295
 80003a4:	f000 b96e 	b.w	8000684 <__aeabi_idiv0>
 80003a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80003ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80003b0:	f000 f806 	bl	80003c0 <__udivmoddi4>
 80003b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80003b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80003bc:	b004      	add	sp, #16
 80003be:	4770      	bx	lr

080003c0 <__udivmoddi4>:
 80003c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80003c4:	9d08      	ldr	r5, [sp, #32]
 80003c6:	4604      	mov	r4, r0
 80003c8:	468c      	mov	ip, r1
 80003ca:	2b00      	cmp	r3, #0
 80003cc:	f040 8083 	bne.w	80004d6 <__udivmoddi4+0x116>
 80003d0:	428a      	cmp	r2, r1
 80003d2:	4617      	mov	r7, r2
 80003d4:	d947      	bls.n	8000466 <__udivmoddi4+0xa6>
 80003d6:	fab2 f282 	clz	r2, r2
 80003da:	b142      	cbz	r2, 80003ee <__udivmoddi4+0x2e>
 80003dc:	f1c2 0020 	rsb	r0, r2, #32
 80003e0:	fa24 f000 	lsr.w	r0, r4, r0
 80003e4:	4091      	lsls	r1, r2
 80003e6:	4097      	lsls	r7, r2
 80003e8:	ea40 0c01 	orr.w	ip, r0, r1
 80003ec:	4094      	lsls	r4, r2
 80003ee:	ea4f 4817 	mov.w	r8, r7, lsr #16
 80003f2:	0c23      	lsrs	r3, r4, #16
 80003f4:	fbbc f6f8 	udiv	r6, ip, r8
 80003f8:	fa1f fe87 	uxth.w	lr, r7
 80003fc:	fb08 c116 	mls	r1, r8, r6, ip
 8000400:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000404:	fb06 f10e 	mul.w	r1, r6, lr
 8000408:	4299      	cmp	r1, r3
 800040a:	d909      	bls.n	8000420 <__udivmoddi4+0x60>
 800040c:	18fb      	adds	r3, r7, r3
 800040e:	f106 30ff 	add.w	r0, r6, #4294967295
 8000412:	f080 8119 	bcs.w	8000648 <__udivmoddi4+0x288>
 8000416:	4299      	cmp	r1, r3
 8000418:	f240 8116 	bls.w	8000648 <__udivmoddi4+0x288>
 800041c:	3e02      	subs	r6, #2
 800041e:	443b      	add	r3, r7
 8000420:	1a5b      	subs	r3, r3, r1
 8000422:	b2a4      	uxth	r4, r4
 8000424:	fbb3 f0f8 	udiv	r0, r3, r8
 8000428:	fb08 3310 	mls	r3, r8, r0, r3
 800042c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000430:	fb00 fe0e 	mul.w	lr, r0, lr
 8000434:	45a6      	cmp	lr, r4
 8000436:	d909      	bls.n	800044c <__udivmoddi4+0x8c>
 8000438:	193c      	adds	r4, r7, r4
 800043a:	f100 33ff 	add.w	r3, r0, #4294967295
 800043e:	f080 8105 	bcs.w	800064c <__udivmoddi4+0x28c>
 8000442:	45a6      	cmp	lr, r4
 8000444:	f240 8102 	bls.w	800064c <__udivmoddi4+0x28c>
 8000448:	3802      	subs	r0, #2
 800044a:	443c      	add	r4, r7
 800044c:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000450:	eba4 040e 	sub.w	r4, r4, lr
 8000454:	2600      	movs	r6, #0
 8000456:	b11d      	cbz	r5, 8000460 <__udivmoddi4+0xa0>
 8000458:	40d4      	lsrs	r4, r2
 800045a:	2300      	movs	r3, #0
 800045c:	e9c5 4300 	strd	r4, r3, [r5]
 8000460:	4631      	mov	r1, r6
 8000462:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000466:	b902      	cbnz	r2, 800046a <__udivmoddi4+0xaa>
 8000468:	deff      	udf	#255	; 0xff
 800046a:	fab2 f282 	clz	r2, r2
 800046e:	2a00      	cmp	r2, #0
 8000470:	d150      	bne.n	8000514 <__udivmoddi4+0x154>
 8000472:	1bcb      	subs	r3, r1, r7
 8000474:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000478:	fa1f f887 	uxth.w	r8, r7
 800047c:	2601      	movs	r6, #1
 800047e:	fbb3 fcfe 	udiv	ip, r3, lr
 8000482:	0c21      	lsrs	r1, r4, #16
 8000484:	fb0e 331c 	mls	r3, lr, ip, r3
 8000488:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800048c:	fb08 f30c 	mul.w	r3, r8, ip
 8000490:	428b      	cmp	r3, r1
 8000492:	d907      	bls.n	80004a4 <__udivmoddi4+0xe4>
 8000494:	1879      	adds	r1, r7, r1
 8000496:	f10c 30ff 	add.w	r0, ip, #4294967295
 800049a:	d202      	bcs.n	80004a2 <__udivmoddi4+0xe2>
 800049c:	428b      	cmp	r3, r1
 800049e:	f200 80e9 	bhi.w	8000674 <__udivmoddi4+0x2b4>
 80004a2:	4684      	mov	ip, r0
 80004a4:	1ac9      	subs	r1, r1, r3
 80004a6:	b2a3      	uxth	r3, r4
 80004a8:	fbb1 f0fe 	udiv	r0, r1, lr
 80004ac:	fb0e 1110 	mls	r1, lr, r0, r1
 80004b0:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80004b4:	fb08 f800 	mul.w	r8, r8, r0
 80004b8:	45a0      	cmp	r8, r4
 80004ba:	d907      	bls.n	80004cc <__udivmoddi4+0x10c>
 80004bc:	193c      	adds	r4, r7, r4
 80004be:	f100 33ff 	add.w	r3, r0, #4294967295
 80004c2:	d202      	bcs.n	80004ca <__udivmoddi4+0x10a>
 80004c4:	45a0      	cmp	r8, r4
 80004c6:	f200 80d9 	bhi.w	800067c <__udivmoddi4+0x2bc>
 80004ca:	4618      	mov	r0, r3
 80004cc:	eba4 0408 	sub.w	r4, r4, r8
 80004d0:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80004d4:	e7bf      	b.n	8000456 <__udivmoddi4+0x96>
 80004d6:	428b      	cmp	r3, r1
 80004d8:	d909      	bls.n	80004ee <__udivmoddi4+0x12e>
 80004da:	2d00      	cmp	r5, #0
 80004dc:	f000 80b1 	beq.w	8000642 <__udivmoddi4+0x282>
 80004e0:	2600      	movs	r6, #0
 80004e2:	e9c5 0100 	strd	r0, r1, [r5]
 80004e6:	4630      	mov	r0, r6
 80004e8:	4631      	mov	r1, r6
 80004ea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004ee:	fab3 f683 	clz	r6, r3
 80004f2:	2e00      	cmp	r6, #0
 80004f4:	d14a      	bne.n	800058c <__udivmoddi4+0x1cc>
 80004f6:	428b      	cmp	r3, r1
 80004f8:	d302      	bcc.n	8000500 <__udivmoddi4+0x140>
 80004fa:	4282      	cmp	r2, r0
 80004fc:	f200 80b8 	bhi.w	8000670 <__udivmoddi4+0x2b0>
 8000500:	1a84      	subs	r4, r0, r2
 8000502:	eb61 0103 	sbc.w	r1, r1, r3
 8000506:	2001      	movs	r0, #1
 8000508:	468c      	mov	ip, r1
 800050a:	2d00      	cmp	r5, #0
 800050c:	d0a8      	beq.n	8000460 <__udivmoddi4+0xa0>
 800050e:	e9c5 4c00 	strd	r4, ip, [r5]
 8000512:	e7a5      	b.n	8000460 <__udivmoddi4+0xa0>
 8000514:	f1c2 0320 	rsb	r3, r2, #32
 8000518:	fa20 f603 	lsr.w	r6, r0, r3
 800051c:	4097      	lsls	r7, r2
 800051e:	fa01 f002 	lsl.w	r0, r1, r2
 8000522:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000526:	40d9      	lsrs	r1, r3
 8000528:	4330      	orrs	r0, r6
 800052a:	0c03      	lsrs	r3, r0, #16
 800052c:	fbb1 f6fe 	udiv	r6, r1, lr
 8000530:	fa1f f887 	uxth.w	r8, r7
 8000534:	fb0e 1116 	mls	r1, lr, r6, r1
 8000538:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800053c:	fb06 f108 	mul.w	r1, r6, r8
 8000540:	4299      	cmp	r1, r3
 8000542:	fa04 f402 	lsl.w	r4, r4, r2
 8000546:	d909      	bls.n	800055c <__udivmoddi4+0x19c>
 8000548:	18fb      	adds	r3, r7, r3
 800054a:	f106 3cff 	add.w	ip, r6, #4294967295
 800054e:	f080 808d 	bcs.w	800066c <__udivmoddi4+0x2ac>
 8000552:	4299      	cmp	r1, r3
 8000554:	f240 808a 	bls.w	800066c <__udivmoddi4+0x2ac>
 8000558:	3e02      	subs	r6, #2
 800055a:	443b      	add	r3, r7
 800055c:	1a5b      	subs	r3, r3, r1
 800055e:	b281      	uxth	r1, r0
 8000560:	fbb3 f0fe 	udiv	r0, r3, lr
 8000564:	fb0e 3310 	mls	r3, lr, r0, r3
 8000568:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800056c:	fb00 f308 	mul.w	r3, r0, r8
 8000570:	428b      	cmp	r3, r1
 8000572:	d907      	bls.n	8000584 <__udivmoddi4+0x1c4>
 8000574:	1879      	adds	r1, r7, r1
 8000576:	f100 3cff 	add.w	ip, r0, #4294967295
 800057a:	d273      	bcs.n	8000664 <__udivmoddi4+0x2a4>
 800057c:	428b      	cmp	r3, r1
 800057e:	d971      	bls.n	8000664 <__udivmoddi4+0x2a4>
 8000580:	3802      	subs	r0, #2
 8000582:	4439      	add	r1, r7
 8000584:	1acb      	subs	r3, r1, r3
 8000586:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 800058a:	e778      	b.n	800047e <__udivmoddi4+0xbe>
 800058c:	f1c6 0c20 	rsb	ip, r6, #32
 8000590:	fa03 f406 	lsl.w	r4, r3, r6
 8000594:	fa22 f30c 	lsr.w	r3, r2, ip
 8000598:	431c      	orrs	r4, r3
 800059a:	fa20 f70c 	lsr.w	r7, r0, ip
 800059e:	fa01 f306 	lsl.w	r3, r1, r6
 80005a2:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 80005a6:	fa21 f10c 	lsr.w	r1, r1, ip
 80005aa:	431f      	orrs	r7, r3
 80005ac:	0c3b      	lsrs	r3, r7, #16
 80005ae:	fbb1 f9fe 	udiv	r9, r1, lr
 80005b2:	fa1f f884 	uxth.w	r8, r4
 80005b6:	fb0e 1119 	mls	r1, lr, r9, r1
 80005ba:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 80005be:	fb09 fa08 	mul.w	sl, r9, r8
 80005c2:	458a      	cmp	sl, r1
 80005c4:	fa02 f206 	lsl.w	r2, r2, r6
 80005c8:	fa00 f306 	lsl.w	r3, r0, r6
 80005cc:	d908      	bls.n	80005e0 <__udivmoddi4+0x220>
 80005ce:	1861      	adds	r1, r4, r1
 80005d0:	f109 30ff 	add.w	r0, r9, #4294967295
 80005d4:	d248      	bcs.n	8000668 <__udivmoddi4+0x2a8>
 80005d6:	458a      	cmp	sl, r1
 80005d8:	d946      	bls.n	8000668 <__udivmoddi4+0x2a8>
 80005da:	f1a9 0902 	sub.w	r9, r9, #2
 80005de:	4421      	add	r1, r4
 80005e0:	eba1 010a 	sub.w	r1, r1, sl
 80005e4:	b2bf      	uxth	r7, r7
 80005e6:	fbb1 f0fe 	udiv	r0, r1, lr
 80005ea:	fb0e 1110 	mls	r1, lr, r0, r1
 80005ee:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 80005f2:	fb00 f808 	mul.w	r8, r0, r8
 80005f6:	45b8      	cmp	r8, r7
 80005f8:	d907      	bls.n	800060a <__udivmoddi4+0x24a>
 80005fa:	19e7      	adds	r7, r4, r7
 80005fc:	f100 31ff 	add.w	r1, r0, #4294967295
 8000600:	d22e      	bcs.n	8000660 <__udivmoddi4+0x2a0>
 8000602:	45b8      	cmp	r8, r7
 8000604:	d92c      	bls.n	8000660 <__udivmoddi4+0x2a0>
 8000606:	3802      	subs	r0, #2
 8000608:	4427      	add	r7, r4
 800060a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800060e:	eba7 0708 	sub.w	r7, r7, r8
 8000612:	fba0 8902 	umull	r8, r9, r0, r2
 8000616:	454f      	cmp	r7, r9
 8000618:	46c6      	mov	lr, r8
 800061a:	4649      	mov	r1, r9
 800061c:	d31a      	bcc.n	8000654 <__udivmoddi4+0x294>
 800061e:	d017      	beq.n	8000650 <__udivmoddi4+0x290>
 8000620:	b15d      	cbz	r5, 800063a <__udivmoddi4+0x27a>
 8000622:	ebb3 020e 	subs.w	r2, r3, lr
 8000626:	eb67 0701 	sbc.w	r7, r7, r1
 800062a:	fa07 fc0c 	lsl.w	ip, r7, ip
 800062e:	40f2      	lsrs	r2, r6
 8000630:	ea4c 0202 	orr.w	r2, ip, r2
 8000634:	40f7      	lsrs	r7, r6
 8000636:	e9c5 2700 	strd	r2, r7, [r5]
 800063a:	2600      	movs	r6, #0
 800063c:	4631      	mov	r1, r6
 800063e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000642:	462e      	mov	r6, r5
 8000644:	4628      	mov	r0, r5
 8000646:	e70b      	b.n	8000460 <__udivmoddi4+0xa0>
 8000648:	4606      	mov	r6, r0
 800064a:	e6e9      	b.n	8000420 <__udivmoddi4+0x60>
 800064c:	4618      	mov	r0, r3
 800064e:	e6fd      	b.n	800044c <__udivmoddi4+0x8c>
 8000650:	4543      	cmp	r3, r8
 8000652:	d2e5      	bcs.n	8000620 <__udivmoddi4+0x260>
 8000654:	ebb8 0e02 	subs.w	lr, r8, r2
 8000658:	eb69 0104 	sbc.w	r1, r9, r4
 800065c:	3801      	subs	r0, #1
 800065e:	e7df      	b.n	8000620 <__udivmoddi4+0x260>
 8000660:	4608      	mov	r0, r1
 8000662:	e7d2      	b.n	800060a <__udivmoddi4+0x24a>
 8000664:	4660      	mov	r0, ip
 8000666:	e78d      	b.n	8000584 <__udivmoddi4+0x1c4>
 8000668:	4681      	mov	r9, r0
 800066a:	e7b9      	b.n	80005e0 <__udivmoddi4+0x220>
 800066c:	4666      	mov	r6, ip
 800066e:	e775      	b.n	800055c <__udivmoddi4+0x19c>
 8000670:	4630      	mov	r0, r6
 8000672:	e74a      	b.n	800050a <__udivmoddi4+0x14a>
 8000674:	f1ac 0c02 	sub.w	ip, ip, #2
 8000678:	4439      	add	r1, r7
 800067a:	e713      	b.n	80004a4 <__udivmoddi4+0xe4>
 800067c:	3802      	subs	r0, #2
 800067e:	443c      	add	r4, r7
 8000680:	e724      	b.n	80004cc <__udivmoddi4+0x10c>
 8000682:	bf00      	nop

08000684 <__aeabi_idiv0>:
 8000684:	4770      	bx	lr
 8000686:	bf00      	nop

08000688 <MX_ADC1_Init>:
ADC_HandleTypeDef hadc2;
ADC_HandleTypeDef hadc3;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8000688:	b580      	push	{r7, lr}
 800068a:	b08a      	sub	sp, #40	; 0x28
 800068c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 800068e:	f107 031c 	add.w	r3, r7, #28
 8000692:	2200      	movs	r2, #0
 8000694:	601a      	str	r2, [r3, #0]
 8000696:	605a      	str	r2, [r3, #4]
 8000698:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 800069a:	463b      	mov	r3, r7
 800069c:	2200      	movs	r2, #0
 800069e:	601a      	str	r2, [r3, #0]
 80006a0:	605a      	str	r2, [r3, #4]
 80006a2:	609a      	str	r2, [r3, #8]
 80006a4:	60da      	str	r2, [r3, #12]
 80006a6:	611a      	str	r2, [r3, #16]
 80006a8:	615a      	str	r2, [r3, #20]
 80006aa:	619a      	str	r2, [r3, #24]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Common config
  */
  hadc1.Instance = ADC1;
 80006ac:	4b2f      	ldr	r3, [pc, #188]	; (800076c <MX_ADC1_Init+0xe4>)
 80006ae:	4a30      	ldr	r2, [pc, #192]	; (8000770 <MX_ADC1_Init+0xe8>)
 80006b0:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 80006b2:	4b2e      	ldr	r3, [pc, #184]	; (800076c <MX_ADC1_Init+0xe4>)
 80006b4:	2200      	movs	r2, #0
 80006b6:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_16B;
 80006b8:	4b2c      	ldr	r3, [pc, #176]	; (800076c <MX_ADC1_Init+0xe4>)
 80006ba:	2200      	movs	r2, #0
 80006bc:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80006be:	4b2b      	ldr	r3, [pc, #172]	; (800076c <MX_ADC1_Init+0xe4>)
 80006c0:	2200      	movs	r2, #0
 80006c2:	60da      	str	r2, [r3, #12]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80006c4:	4b29      	ldr	r3, [pc, #164]	; (800076c <MX_ADC1_Init+0xe4>)
 80006c6:	2204      	movs	r2, #4
 80006c8:	611a      	str	r2, [r3, #16]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 80006ca:	4b28      	ldr	r3, [pc, #160]	; (800076c <MX_ADC1_Init+0xe4>)
 80006cc:	2200      	movs	r2, #0
 80006ce:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80006d0:	4b26      	ldr	r3, [pc, #152]	; (800076c <MX_ADC1_Init+0xe4>)
 80006d2:	2200      	movs	r2, #0
 80006d4:	755a      	strb	r2, [r3, #21]
  hadc1.Init.NbrOfConversion = 1;
 80006d6:	4b25      	ldr	r3, [pc, #148]	; (800076c <MX_ADC1_Init+0xe4>)
 80006d8:	2201      	movs	r2, #1
 80006da:	619a      	str	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80006dc:	4b23      	ldr	r3, [pc, #140]	; (800076c <MX_ADC1_Init+0xe4>)
 80006de:	2200      	movs	r2, #0
 80006e0:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80006e2:	4b22      	ldr	r3, [pc, #136]	; (800076c <MX_ADC1_Init+0xe4>)
 80006e4:	2200      	movs	r2, #0
 80006e6:	625a      	str	r2, [r3, #36]	; 0x24
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80006e8:	4b20      	ldr	r3, [pc, #128]	; (800076c <MX_ADC1_Init+0xe4>)
 80006ea:	2200      	movs	r2, #0
 80006ec:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DR;
 80006ee:	4b1f      	ldr	r3, [pc, #124]	; (800076c <MX_ADC1_Init+0xe4>)
 80006f0:	2200      	movs	r2, #0
 80006f2:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80006f4:	4b1d      	ldr	r3, [pc, #116]	; (800076c <MX_ADC1_Init+0xe4>)
 80006f6:	2200      	movs	r2, #0
 80006f8:	631a      	str	r2, [r3, #48]	; 0x30
  hadc1.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 80006fa:	4b1c      	ldr	r3, [pc, #112]	; (800076c <MX_ADC1_Init+0xe4>)
 80006fc:	2200      	movs	r2, #0
 80006fe:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 8000700:	4b1a      	ldr	r3, [pc, #104]	; (800076c <MX_ADC1_Init+0xe4>)
 8000702:	2200      	movs	r2, #0
 8000704:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000708:	4818      	ldr	r0, [pc, #96]	; (800076c <MX_ADC1_Init+0xe4>)
 800070a:	f002 f827 	bl	800275c <HAL_ADC_Init>
 800070e:	4603      	mov	r3, r0
 8000710:	2b00      	cmp	r3, #0
 8000712:	d001      	beq.n	8000718 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8000714:	f001 f902 	bl	800191c <Error_Handler>
  }
  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8000718:	2300      	movs	r3, #0
 800071a:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 800071c:	f107 031c 	add.w	r3, r7, #28
 8000720:	4619      	mov	r1, r3
 8000722:	4812      	ldr	r0, [pc, #72]	; (800076c <MX_ADC1_Init+0xe4>)
 8000724:	f002 fe3a 	bl	800339c <HAL_ADCEx_MultiModeConfigChannel>
 8000728:	4603      	mov	r3, r0
 800072a:	2b00      	cmp	r3, #0
 800072c:	d001      	beq.n	8000732 <MX_ADC1_Init+0xaa>
  {
    Error_Handler();
 800072e:	f001 f8f5 	bl	800191c <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_16;
 8000732:	4b10      	ldr	r3, [pc, #64]	; (8000774 <MX_ADC1_Init+0xec>)
 8000734:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000736:	2306      	movs	r3, #6
 8000738:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 800073a:	2300      	movs	r3, #0
 800073c:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_DIFFERENTIAL_ENDED;
 800073e:	4b0e      	ldr	r3, [pc, #56]	; (8000778 <MX_ADC1_Init+0xf0>)
 8000740:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000742:	2304      	movs	r3, #4
 8000744:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8000746:	2300      	movs	r3, #0
 8000748:	617b      	str	r3, [r7, #20]
  sConfig.OffsetSignedSaturation = DISABLE;
 800074a:	2300      	movs	r3, #0
 800074c:	767b      	strb	r3, [r7, #25]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800074e:	463b      	mov	r3, r7
 8000750:	4619      	mov	r1, r3
 8000752:	4806      	ldr	r0, [pc, #24]	; (800076c <MX_ADC1_Init+0xe4>)
 8000754:	f002 f9a2 	bl	8002a9c <HAL_ADC_ConfigChannel>
 8000758:	4603      	mov	r3, r0
 800075a:	2b00      	cmp	r3, #0
 800075c:	d001      	beq.n	8000762 <MX_ADC1_Init+0xda>
  {
    Error_Handler();
 800075e:	f001 f8dd 	bl	800191c <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000762:	bf00      	nop
 8000764:	3728      	adds	r7, #40	; 0x28
 8000766:	46bd      	mov	sp, r7
 8000768:	bd80      	pop	{r7, pc}
 800076a:	bf00      	nop
 800076c:	24000408 	.word	0x24000408
 8000770:	40022000 	.word	0x40022000
 8000774:	43210000 	.word	0x43210000
 8000778:	47ff0000 	.word	0x47ff0000

0800077c <MX_ADC2_Init>:
/* ADC2 init function */
void MX_ADC2_Init(void)
{
 800077c:	b580      	push	{r7, lr}
 800077e:	b088      	sub	sp, #32
 8000780:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000782:	1d3b      	adds	r3, r7, #4
 8000784:	2200      	movs	r2, #0
 8000786:	601a      	str	r2, [r3, #0]
 8000788:	605a      	str	r2, [r3, #4]
 800078a:	609a      	str	r2, [r3, #8]
 800078c:	60da      	str	r2, [r3, #12]
 800078e:	611a      	str	r2, [r3, #16]
 8000790:	615a      	str	r2, [r3, #20]
 8000792:	619a      	str	r2, [r3, #24]
  /* USER CODE BEGIN ADC2_Init 1 */

  /* USER CODE END ADC2_Init 1 */
  /** Common config
  */
  hadc2.Instance = ADC2;
 8000794:	4b29      	ldr	r3, [pc, #164]	; (800083c <MX_ADC2_Init+0xc0>)
 8000796:	4a2a      	ldr	r2, [pc, #168]	; (8000840 <MX_ADC2_Init+0xc4>)
 8000798:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 800079a:	4b28      	ldr	r3, [pc, #160]	; (800083c <MX_ADC2_Init+0xc0>)
 800079c:	2200      	movs	r2, #0
 800079e:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_16B;
 80007a0:	4b26      	ldr	r3, [pc, #152]	; (800083c <MX_ADC2_Init+0xc0>)
 80007a2:	2200      	movs	r2, #0
 80007a4:	609a      	str	r2, [r3, #8]
  hadc2.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80007a6:	4b25      	ldr	r3, [pc, #148]	; (800083c <MX_ADC2_Init+0xc0>)
 80007a8:	2200      	movs	r2, #0
 80007aa:	60da      	str	r2, [r3, #12]
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80007ac:	4b23      	ldr	r3, [pc, #140]	; (800083c <MX_ADC2_Init+0xc0>)
 80007ae:	2204      	movs	r2, #4
 80007b0:	611a      	str	r2, [r3, #16]
  hadc2.Init.LowPowerAutoWait = DISABLE;
 80007b2:	4b22      	ldr	r3, [pc, #136]	; (800083c <MX_ADC2_Init+0xc0>)
 80007b4:	2200      	movs	r2, #0
 80007b6:	751a      	strb	r2, [r3, #20]
  hadc2.Init.ContinuousConvMode = DISABLE;
 80007b8:	4b20      	ldr	r3, [pc, #128]	; (800083c <MX_ADC2_Init+0xc0>)
 80007ba:	2200      	movs	r2, #0
 80007bc:	755a      	strb	r2, [r3, #21]
  hadc2.Init.NbrOfConversion = 1;
 80007be:	4b1f      	ldr	r3, [pc, #124]	; (800083c <MX_ADC2_Init+0xc0>)
 80007c0:	2201      	movs	r2, #1
 80007c2:	619a      	str	r2, [r3, #24]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 80007c4:	4b1d      	ldr	r3, [pc, #116]	; (800083c <MX_ADC2_Init+0xc0>)
 80007c6:	2200      	movs	r2, #0
 80007c8:	771a      	strb	r2, [r3, #28]
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80007ca:	4b1c      	ldr	r3, [pc, #112]	; (800083c <MX_ADC2_Init+0xc0>)
 80007cc:	2200      	movs	r2, #0
 80007ce:	625a      	str	r2, [r3, #36]	; 0x24
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80007d0:	4b1a      	ldr	r3, [pc, #104]	; (800083c <MX_ADC2_Init+0xc0>)
 80007d2:	2200      	movs	r2, #0
 80007d4:	629a      	str	r2, [r3, #40]	; 0x28
  hadc2.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DR;
 80007d6:	4b19      	ldr	r3, [pc, #100]	; (800083c <MX_ADC2_Init+0xc0>)
 80007d8:	2200      	movs	r2, #0
 80007da:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc2.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80007dc:	4b17      	ldr	r3, [pc, #92]	; (800083c <MX_ADC2_Init+0xc0>)
 80007de:	2200      	movs	r2, #0
 80007e0:	631a      	str	r2, [r3, #48]	; 0x30
  hadc2.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 80007e2:	4b16      	ldr	r3, [pc, #88]	; (800083c <MX_ADC2_Init+0xc0>)
 80007e4:	2200      	movs	r2, #0
 80007e6:	635a      	str	r2, [r3, #52]	; 0x34
  hadc2.Init.OversamplingMode = DISABLE;
 80007e8:	4b14      	ldr	r3, [pc, #80]	; (800083c <MX_ADC2_Init+0xc0>)
 80007ea:	2200      	movs	r2, #0
 80007ec:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 80007f0:	4812      	ldr	r0, [pc, #72]	; (800083c <MX_ADC2_Init+0xc0>)
 80007f2:	f001 ffb3 	bl	800275c <HAL_ADC_Init>
 80007f6:	4603      	mov	r3, r0
 80007f8:	2b00      	cmp	r3, #0
 80007fa:	d001      	beq.n	8000800 <MX_ADC2_Init+0x84>
  {
    Error_Handler();
 80007fc:	f001 f88e 	bl	800191c <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_3;
 8000800:	4b10      	ldr	r3, [pc, #64]	; (8000844 <MX_ADC2_Init+0xc8>)
 8000802:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000804:	2306      	movs	r3, #6
 8000806:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8000808:	2300      	movs	r3, #0
 800080a:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 800080c:	f240 73ff 	movw	r3, #2047	; 0x7ff
 8000810:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000812:	2304      	movs	r3, #4
 8000814:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8000816:	2300      	movs	r3, #0
 8000818:	61bb      	str	r3, [r7, #24]
  sConfig.OffsetSignedSaturation = DISABLE;
 800081a:	2300      	movs	r3, #0
 800081c:	777b      	strb	r3, [r7, #29]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 800081e:	1d3b      	adds	r3, r7, #4
 8000820:	4619      	mov	r1, r3
 8000822:	4806      	ldr	r0, [pc, #24]	; (800083c <MX_ADC2_Init+0xc0>)
 8000824:	f002 f93a 	bl	8002a9c <HAL_ADC_ConfigChannel>
 8000828:	4603      	mov	r3, r0
 800082a:	2b00      	cmp	r3, #0
 800082c:	d001      	beq.n	8000832 <MX_ADC2_Init+0xb6>
  {
    Error_Handler();
 800082e:	f001 f875 	bl	800191c <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 8000832:	bf00      	nop
 8000834:	3720      	adds	r7, #32
 8000836:	46bd      	mov	sp, r7
 8000838:	bd80      	pop	{r7, pc}
 800083a:	bf00      	nop
 800083c:	240003a4 	.word	0x240003a4
 8000840:	40022100 	.word	0x40022100
 8000844:	0c900008 	.word	0x0c900008

08000848 <MX_ADC3_Init>:
/* ADC3 init function */
void MX_ADC3_Init(void)
{
 8000848:	b580      	push	{r7, lr}
 800084a:	b088      	sub	sp, #32
 800084c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC3_Init 0 */

  /* USER CODE END ADC3_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800084e:	1d3b      	adds	r3, r7, #4
 8000850:	2200      	movs	r2, #0
 8000852:	601a      	str	r2, [r3, #0]
 8000854:	605a      	str	r2, [r3, #4]
 8000856:	609a      	str	r2, [r3, #8]
 8000858:	60da      	str	r2, [r3, #12]
 800085a:	611a      	str	r2, [r3, #16]
 800085c:	615a      	str	r2, [r3, #20]
 800085e:	619a      	str	r2, [r3, #24]
  /* USER CODE BEGIN ADC3_Init 1 */

  /* USER CODE END ADC3_Init 1 */
  /** Common config
  */
  hadc3.Instance = ADC3;
 8000860:	4b29      	ldr	r3, [pc, #164]	; (8000908 <MX_ADC3_Init+0xc0>)
 8000862:	4a2a      	ldr	r2, [pc, #168]	; (800090c <MX_ADC3_Init+0xc4>)
 8000864:	601a      	str	r2, [r3, #0]
  hadc3.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8000866:	4b28      	ldr	r3, [pc, #160]	; (8000908 <MX_ADC3_Init+0xc0>)
 8000868:	2200      	movs	r2, #0
 800086a:	605a      	str	r2, [r3, #4]
  hadc3.Init.Resolution = ADC_RESOLUTION_16B;
 800086c:	4b26      	ldr	r3, [pc, #152]	; (8000908 <MX_ADC3_Init+0xc0>)
 800086e:	2200      	movs	r2, #0
 8000870:	609a      	str	r2, [r3, #8]
  hadc3.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000872:	4b25      	ldr	r3, [pc, #148]	; (8000908 <MX_ADC3_Init+0xc0>)
 8000874:	2200      	movs	r2, #0
 8000876:	60da      	str	r2, [r3, #12]
  hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000878:	4b23      	ldr	r3, [pc, #140]	; (8000908 <MX_ADC3_Init+0xc0>)
 800087a:	2204      	movs	r2, #4
 800087c:	611a      	str	r2, [r3, #16]
  hadc3.Init.LowPowerAutoWait = DISABLE;
 800087e:	4b22      	ldr	r3, [pc, #136]	; (8000908 <MX_ADC3_Init+0xc0>)
 8000880:	2200      	movs	r2, #0
 8000882:	751a      	strb	r2, [r3, #20]
  hadc3.Init.ContinuousConvMode = DISABLE;
 8000884:	4b20      	ldr	r3, [pc, #128]	; (8000908 <MX_ADC3_Init+0xc0>)
 8000886:	2200      	movs	r2, #0
 8000888:	755a      	strb	r2, [r3, #21]
  hadc3.Init.NbrOfConversion = 1;
 800088a:	4b1f      	ldr	r3, [pc, #124]	; (8000908 <MX_ADC3_Init+0xc0>)
 800088c:	2201      	movs	r2, #1
 800088e:	619a      	str	r2, [r3, #24]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 8000890:	4b1d      	ldr	r3, [pc, #116]	; (8000908 <MX_ADC3_Init+0xc0>)
 8000892:	2200      	movs	r2, #0
 8000894:	771a      	strb	r2, [r3, #28]
  hadc3.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000896:	4b1c      	ldr	r3, [pc, #112]	; (8000908 <MX_ADC3_Init+0xc0>)
 8000898:	2200      	movs	r2, #0
 800089a:	625a      	str	r2, [r3, #36]	; 0x24
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800089c:	4b1a      	ldr	r3, [pc, #104]	; (8000908 <MX_ADC3_Init+0xc0>)
 800089e:	2200      	movs	r2, #0
 80008a0:	629a      	str	r2, [r3, #40]	; 0x28
  hadc3.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DR;
 80008a2:	4b19      	ldr	r3, [pc, #100]	; (8000908 <MX_ADC3_Init+0xc0>)
 80008a4:	2200      	movs	r2, #0
 80008a6:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc3.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80008a8:	4b17      	ldr	r3, [pc, #92]	; (8000908 <MX_ADC3_Init+0xc0>)
 80008aa:	2200      	movs	r2, #0
 80008ac:	631a      	str	r2, [r3, #48]	; 0x30
  hadc3.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 80008ae:	4b16      	ldr	r3, [pc, #88]	; (8000908 <MX_ADC3_Init+0xc0>)
 80008b0:	2200      	movs	r2, #0
 80008b2:	635a      	str	r2, [r3, #52]	; 0x34
  hadc3.Init.OversamplingMode = DISABLE;
 80008b4:	4b14      	ldr	r3, [pc, #80]	; (8000908 <MX_ADC3_Init+0xc0>)
 80008b6:	2200      	movs	r2, #0
 80008b8:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 80008bc:	4812      	ldr	r0, [pc, #72]	; (8000908 <MX_ADC3_Init+0xc0>)
 80008be:	f001 ff4d 	bl	800275c <HAL_ADC_Init>
 80008c2:	4603      	mov	r3, r0
 80008c4:	2b00      	cmp	r3, #0
 80008c6:	d001      	beq.n	80008cc <MX_ADC3_Init+0x84>
  {
    Error_Handler();
 80008c8:	f001 f828 	bl	800191c <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_8;
 80008cc:	4b10      	ldr	r3, [pc, #64]	; (8000910 <MX_ADC3_Init+0xc8>)
 80008ce:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80008d0:	2306      	movs	r3, #6
 80008d2:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 80008d4:	2300      	movs	r3, #0
 80008d6:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80008d8:	f240 73ff 	movw	r3, #2047	; 0x7ff
 80008dc:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80008de:	2304      	movs	r3, #4
 80008e0:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 80008e2:	2300      	movs	r3, #0
 80008e4:	61bb      	str	r3, [r7, #24]
  sConfig.OffsetSignedSaturation = DISABLE;
 80008e6:	2300      	movs	r3, #0
 80008e8:	777b      	strb	r3, [r7, #29]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 80008ea:	1d3b      	adds	r3, r7, #4
 80008ec:	4619      	mov	r1, r3
 80008ee:	4806      	ldr	r0, [pc, #24]	; (8000908 <MX_ADC3_Init+0xc0>)
 80008f0:	f002 f8d4 	bl	8002a9c <HAL_ADC_ConfigChannel>
 80008f4:	4603      	mov	r3, r0
 80008f6:	2b00      	cmp	r3, #0
 80008f8:	d001      	beq.n	80008fe <MX_ADC3_Init+0xb6>
  {
    Error_Handler();
 80008fa:	f001 f80f 	bl	800191c <Error_Handler>
  }
  /* USER CODE BEGIN ADC3_Init 2 */

  /* USER CODE END ADC3_Init 2 */

}
 80008fe:	bf00      	nop
 8000900:	3720      	adds	r7, #32
 8000902:	46bd      	mov	sp, r7
 8000904:	bd80      	pop	{r7, pc}
 8000906:	bf00      	nop
 8000908:	2400046c 	.word	0x2400046c
 800090c:	58026000 	.word	0x58026000
 8000910:	21800100 	.word	0x21800100

08000914 <HAL_ADC_MspInit>:

static uint32_t HAL_RCC_ADC12_CLK_ENABLED=0;

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8000914:	b580      	push	{r7, lr}
 8000916:	b0bc      	sub	sp, #240	; 0xf0
 8000918:	af00      	add	r7, sp, #0
 800091a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800091c:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8000920:	2200      	movs	r2, #0
 8000922:	601a      	str	r2, [r3, #0]
 8000924:	605a      	str	r2, [r3, #4]
 8000926:	609a      	str	r2, [r3, #8]
 8000928:	60da      	str	r2, [r3, #12]
 800092a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800092c:	f107 0320 	add.w	r3, r7, #32
 8000930:	22bc      	movs	r2, #188	; 0xbc
 8000932:	2100      	movs	r1, #0
 8000934:	4618      	mov	r0, r3
 8000936:	f013 f829 	bl	801398c <memset>
  if(adcHandle->Instance==ADC1)
 800093a:	687b      	ldr	r3, [r7, #4]
 800093c:	681b      	ldr	r3, [r3, #0]
 800093e:	4a6f      	ldr	r2, [pc, #444]	; (8000afc <HAL_ADC_MspInit+0x1e8>)
 8000940:	4293      	cmp	r3, r2
 8000942:	d147      	bne.n	80009d4 <HAL_ADC_MspInit+0xc0>
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8000944:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8000948:	623b      	str	r3, [r7, #32]
    PeriphClkInitStruct.AdcClockSelection = RCC_ADCCLKSOURCE_CLKP;
 800094a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800094e:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000952:	f107 0320 	add.w	r3, r7, #32
 8000956:	4618      	mov	r0, r3
 8000958:	f007 f992 	bl	8007c80 <HAL_RCCEx_PeriphCLKConfig>
 800095c:	4603      	mov	r3, r0
 800095e:	2b00      	cmp	r3, #0
 8000960:	d001      	beq.n	8000966 <HAL_ADC_MspInit+0x52>
    {
      Error_Handler();
 8000962:	f000 ffdb 	bl	800191c <Error_Handler>
    }

    /* ADC1 clock enable */
    HAL_RCC_ADC12_CLK_ENABLED++;
 8000966:	4b66      	ldr	r3, [pc, #408]	; (8000b00 <HAL_ADC_MspInit+0x1ec>)
 8000968:	681b      	ldr	r3, [r3, #0]
 800096a:	3301      	adds	r3, #1
 800096c:	4a64      	ldr	r2, [pc, #400]	; (8000b00 <HAL_ADC_MspInit+0x1ec>)
 800096e:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 8000970:	4b63      	ldr	r3, [pc, #396]	; (8000b00 <HAL_ADC_MspInit+0x1ec>)
 8000972:	681b      	ldr	r3, [r3, #0]
 8000974:	2b01      	cmp	r3, #1
 8000976:	d10e      	bne.n	8000996 <HAL_ADC_MspInit+0x82>
      __HAL_RCC_ADC12_CLK_ENABLE();
 8000978:	4b62      	ldr	r3, [pc, #392]	; (8000b04 <HAL_ADC_MspInit+0x1f0>)
 800097a:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800097e:	4a61      	ldr	r2, [pc, #388]	; (8000b04 <HAL_ADC_MspInit+0x1f0>)
 8000980:	f043 0320 	orr.w	r3, r3, #32
 8000984:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8000988:	4b5e      	ldr	r3, [pc, #376]	; (8000b04 <HAL_ADC_MspInit+0x1f0>)
 800098a:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800098e:	f003 0320 	and.w	r3, r3, #32
 8000992:	61fb      	str	r3, [r7, #28]
 8000994:	69fb      	ldr	r3, [r7, #28]
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000996:	4b5b      	ldr	r3, [pc, #364]	; (8000b04 <HAL_ADC_MspInit+0x1f0>)
 8000998:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800099c:	4a59      	ldr	r2, [pc, #356]	; (8000b04 <HAL_ADC_MspInit+0x1f0>)
 800099e:	f043 0301 	orr.w	r3, r3, #1
 80009a2:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80009a6:	4b57      	ldr	r3, [pc, #348]	; (8000b04 <HAL_ADC_MspInit+0x1f0>)
 80009a8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80009ac:	f003 0301 	and.w	r3, r3, #1
 80009b0:	61bb      	str	r3, [r7, #24]
 80009b2:	69bb      	ldr	r3, [r7, #24]
    PA0     ------> ADC1_INP16
    PA1     ------> ADC1_INN16
    PA2     ------> ADC1_INP14
    PA3     ------> ADC1_INP15
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3;
 80009b4:	230f      	movs	r3, #15
 80009b6:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80009ba:	2303      	movs	r3, #3
 80009bc:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009c0:	2300      	movs	r3, #0
 80009c2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80009c6:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 80009ca:	4619      	mov	r1, r3
 80009cc:	484e      	ldr	r0, [pc, #312]	; (8000b08 <HAL_ADC_MspInit+0x1f4>)
 80009ce:	f003 ffb9 	bl	8004944 <HAL_GPIO_Init>

  /* USER CODE BEGIN ADC3_MspInit 1 */

  /* USER CODE END ADC3_MspInit 1 */
  }
}
 80009d2:	e08f      	b.n	8000af4 <HAL_ADC_MspInit+0x1e0>
  else if(adcHandle->Instance==ADC2)
 80009d4:	687b      	ldr	r3, [r7, #4]
 80009d6:	681b      	ldr	r3, [r3, #0]
 80009d8:	4a4c      	ldr	r2, [pc, #304]	; (8000b0c <HAL_ADC_MspInit+0x1f8>)
 80009da:	4293      	cmp	r3, r2
 80009dc:	d147      	bne.n	8000a6e <HAL_ADC_MspInit+0x15a>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 80009de:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 80009e2:	623b      	str	r3, [r7, #32]
    PeriphClkInitStruct.AdcClockSelection = RCC_ADCCLKSOURCE_CLKP;
 80009e4:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80009e8:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80009ec:	f107 0320 	add.w	r3, r7, #32
 80009f0:	4618      	mov	r0, r3
 80009f2:	f007 f945 	bl	8007c80 <HAL_RCCEx_PeriphCLKConfig>
 80009f6:	4603      	mov	r3, r0
 80009f8:	2b00      	cmp	r3, #0
 80009fa:	d001      	beq.n	8000a00 <HAL_ADC_MspInit+0xec>
      Error_Handler();
 80009fc:	f000 ff8e 	bl	800191c <Error_Handler>
    HAL_RCC_ADC12_CLK_ENABLED++;
 8000a00:	4b3f      	ldr	r3, [pc, #252]	; (8000b00 <HAL_ADC_MspInit+0x1ec>)
 8000a02:	681b      	ldr	r3, [r3, #0]
 8000a04:	3301      	adds	r3, #1
 8000a06:	4a3e      	ldr	r2, [pc, #248]	; (8000b00 <HAL_ADC_MspInit+0x1ec>)
 8000a08:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 8000a0a:	4b3d      	ldr	r3, [pc, #244]	; (8000b00 <HAL_ADC_MspInit+0x1ec>)
 8000a0c:	681b      	ldr	r3, [r3, #0]
 8000a0e:	2b01      	cmp	r3, #1
 8000a10:	d10e      	bne.n	8000a30 <HAL_ADC_MspInit+0x11c>
      __HAL_RCC_ADC12_CLK_ENABLE();
 8000a12:	4b3c      	ldr	r3, [pc, #240]	; (8000b04 <HAL_ADC_MspInit+0x1f0>)
 8000a14:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000a18:	4a3a      	ldr	r2, [pc, #232]	; (8000b04 <HAL_ADC_MspInit+0x1f0>)
 8000a1a:	f043 0320 	orr.w	r3, r3, #32
 8000a1e:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8000a22:	4b38      	ldr	r3, [pc, #224]	; (8000b04 <HAL_ADC_MspInit+0x1f0>)
 8000a24:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000a28:	f003 0320 	and.w	r3, r3, #32
 8000a2c:	617b      	str	r3, [r7, #20]
 8000a2e:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a30:	4b34      	ldr	r3, [pc, #208]	; (8000b04 <HAL_ADC_MspInit+0x1f0>)
 8000a32:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000a36:	4a33      	ldr	r2, [pc, #204]	; (8000b04 <HAL_ADC_MspInit+0x1f0>)
 8000a38:	f043 0301 	orr.w	r3, r3, #1
 8000a3c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000a40:	4b30      	ldr	r3, [pc, #192]	; (8000b04 <HAL_ADC_MspInit+0x1f0>)
 8000a42:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000a46:	f003 0301 	and.w	r3, r3, #1
 8000a4a:	613b      	str	r3, [r7, #16]
 8000a4c:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8000a4e:	2340      	movs	r3, #64	; 0x40
 8000a50:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000a54:	2303      	movs	r3, #3
 8000a56:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a5a:	2300      	movs	r3, #0
 8000a5c:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a60:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8000a64:	4619      	mov	r1, r3
 8000a66:	4828      	ldr	r0, [pc, #160]	; (8000b08 <HAL_ADC_MspInit+0x1f4>)
 8000a68:	f003 ff6c 	bl	8004944 <HAL_GPIO_Init>
}
 8000a6c:	e042      	b.n	8000af4 <HAL_ADC_MspInit+0x1e0>
  else if(adcHandle->Instance==ADC3)
 8000a6e:	687b      	ldr	r3, [r7, #4]
 8000a70:	681b      	ldr	r3, [r3, #0]
 8000a72:	4a27      	ldr	r2, [pc, #156]	; (8000b10 <HAL_ADC_MspInit+0x1fc>)
 8000a74:	4293      	cmp	r3, r2
 8000a76:	d13d      	bne.n	8000af4 <HAL_ADC_MspInit+0x1e0>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8000a78:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8000a7c:	623b      	str	r3, [r7, #32]
    PeriphClkInitStruct.AdcClockSelection = RCC_ADCCLKSOURCE_CLKP;
 8000a7e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000a82:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000a86:	f107 0320 	add.w	r3, r7, #32
 8000a8a:	4618      	mov	r0, r3
 8000a8c:	f007 f8f8 	bl	8007c80 <HAL_RCCEx_PeriphCLKConfig>
 8000a90:	4603      	mov	r3, r0
 8000a92:	2b00      	cmp	r3, #0
 8000a94:	d001      	beq.n	8000a9a <HAL_ADC_MspInit+0x186>
      Error_Handler();
 8000a96:	f000 ff41 	bl	800191c <Error_Handler>
    __HAL_RCC_ADC3_CLK_ENABLE();
 8000a9a:	4b1a      	ldr	r3, [pc, #104]	; (8000b04 <HAL_ADC_MspInit+0x1f0>)
 8000a9c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000aa0:	4a18      	ldr	r2, [pc, #96]	; (8000b04 <HAL_ADC_MspInit+0x1f0>)
 8000aa2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8000aa6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000aaa:	4b16      	ldr	r3, [pc, #88]	; (8000b04 <HAL_ADC_MspInit+0x1f0>)
 8000aac:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000ab0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8000ab4:	60fb      	str	r3, [r7, #12]
 8000ab6:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8000ab8:	4b12      	ldr	r3, [pc, #72]	; (8000b04 <HAL_ADC_MspInit+0x1f0>)
 8000aba:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000abe:	4a11      	ldr	r2, [pc, #68]	; (8000b04 <HAL_ADC_MspInit+0x1f0>)
 8000ac0:	f043 0320 	orr.w	r3, r3, #32
 8000ac4:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000ac8:	4b0e      	ldr	r3, [pc, #56]	; (8000b04 <HAL_ADC_MspInit+0x1f0>)
 8000aca:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000ace:	f003 0320 	and.w	r3, r3, #32
 8000ad2:	60bb      	str	r3, [r7, #8]
 8000ad4:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8000ad6:	2340      	movs	r3, #64	; 0x40
 8000ad8:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000adc:	2303      	movs	r3, #3
 8000ade:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ae2:	2300      	movs	r3, #0
 8000ae4:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8000ae8:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8000aec:	4619      	mov	r1, r3
 8000aee:	4809      	ldr	r0, [pc, #36]	; (8000b14 <HAL_ADC_MspInit+0x200>)
 8000af0:	f003 ff28 	bl	8004944 <HAL_GPIO_Init>
}
 8000af4:	bf00      	nop
 8000af6:	37f0      	adds	r7, #240	; 0xf0
 8000af8:	46bd      	mov	sp, r7
 8000afa:	bd80      	pop	{r7, pc}
 8000afc:	40022000 	.word	0x40022000
 8000b00:	2400034c 	.word	0x2400034c
 8000b04:	58024400 	.word	0x58024400
 8000b08:	58020000 	.word	0x58020000
 8000b0c:	40022100 	.word	0x40022100
 8000b10:	58026000 	.word	0x58026000
 8000b14:	58021400 	.word	0x58021400

08000b18 <CUBEMX_Init>:
#include <usb_device.h>

extern void SystemClock_Config(void);
extern void PeriphCommonClock_Config(void);

void CUBEMX_Init() {
 8000b18:	b580      	push	{r7, lr}
 8000b1a:	b084      	sub	sp, #16
 8000b1c:	af00      	add	r7, sp, #0
  \details Turns on I-Cache
  */
__STATIC_FORCEINLINE void SCB_EnableICache (void)
{
  #if defined (__ICACHE_PRESENT) && (__ICACHE_PRESENT == 1U)
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 8000b1e:	4b46      	ldr	r3, [pc, #280]	; (8000c38 <CUBEMX_Init+0x120>)
 8000b20:	695b      	ldr	r3, [r3, #20]
 8000b22:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000b26:	2b00      	cmp	r3, #0
 8000b28:	d11b      	bne.n	8000b62 <CUBEMX_Init+0x4a>
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8000b2a:	f3bf 8f4f 	dsb	sy
}
 8000b2e:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000b30:	f3bf 8f6f 	isb	sy
}
 8000b34:	bf00      	nop

    __DSB();
    __ISB();
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 8000b36:	4b40      	ldr	r3, [pc, #256]	; (8000c38 <CUBEMX_Init+0x120>)
 8000b38:	2200      	movs	r2, #0
 8000b3a:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 8000b3e:	f3bf 8f4f 	dsb	sy
}
 8000b42:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000b44:	f3bf 8f6f 	isb	sy
}
 8000b48:	bf00      	nop
    __DSB();
    __ISB();
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 8000b4a:	4b3b      	ldr	r3, [pc, #236]	; (8000c38 <CUBEMX_Init+0x120>)
 8000b4c:	695b      	ldr	r3, [r3, #20]
 8000b4e:	4a3a      	ldr	r2, [pc, #232]	; (8000c38 <CUBEMX_Init+0x120>)
 8000b50:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000b54:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 8000b56:	f3bf 8f4f 	dsb	sy
}
 8000b5a:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000b5c:	f3bf 8f6f 	isb	sy
}
 8000b60:	e000      	b.n	8000b64 <CUBEMX_Init+0x4c>
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 8000b62:	bf00      	nop
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    uint32_t ccsidr;
    uint32_t sets;
    uint32_t ways;

    if (SCB->CCR & SCB_CCR_DC_Msk) return;  /* return if DCache is already enabled */
 8000b64:	4b34      	ldr	r3, [pc, #208]	; (8000c38 <CUBEMX_Init+0x120>)
 8000b66:	695b      	ldr	r3, [r3, #20]
 8000b68:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000b6c:	2b00      	cmp	r3, #0
 8000b6e:	d138      	bne.n	8000be2 <CUBEMX_Init+0xca>

    SCB->CSSELR = 0U;                       /* select Level 1 data cache */
 8000b70:	4b31      	ldr	r3, [pc, #196]	; (8000c38 <CUBEMX_Init+0x120>)
 8000b72:	2200      	movs	r2, #0
 8000b74:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 8000b78:	f3bf 8f4f 	dsb	sy
}
 8000b7c:	bf00      	nop
    __DSB();

    ccsidr = SCB->CCSIDR;
 8000b7e:	4b2e      	ldr	r3, [pc, #184]	; (8000c38 <CUBEMX_Init+0x120>)
 8000b80:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8000b84:	60fb      	str	r3, [r7, #12]

                                            /* invalidate D-Cache */
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 8000b86:	68fb      	ldr	r3, [r7, #12]
 8000b88:	0b5b      	lsrs	r3, r3, #13
 8000b8a:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8000b8e:	60bb      	str	r3, [r7, #8]
    do {
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 8000b90:	68fb      	ldr	r3, [r7, #12]
 8000b92:	08db      	lsrs	r3, r3, #3
 8000b94:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8000b98:	607b      	str	r3, [r7, #4]
      do {
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8000b9a:	68bb      	ldr	r3, [r7, #8]
 8000b9c:	015a      	lsls	r2, r3, #5
 8000b9e:	f643 73e0 	movw	r3, #16352	; 0x3fe0
 8000ba2:	4013      	ands	r3, r2
                      ((ways << SCB_DCISW_WAY_Pos) & SCB_DCISW_WAY_Msk)  );
 8000ba4:	687a      	ldr	r2, [r7, #4]
 8000ba6:	0792      	lsls	r2, r2, #30
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8000ba8:	4923      	ldr	r1, [pc, #140]	; (8000c38 <CUBEMX_Init+0x120>)
 8000baa:	4313      	orrs	r3, r2
 8000bac:	f8c1 3260 	str.w	r3, [r1, #608]	; 0x260
        #if defined ( __CC_ARM )
          __schedule_barrier();
        #endif
      } while (ways-- != 0U);
 8000bb0:	687b      	ldr	r3, [r7, #4]
 8000bb2:	1e5a      	subs	r2, r3, #1
 8000bb4:	607a      	str	r2, [r7, #4]
 8000bb6:	2b00      	cmp	r3, #0
 8000bb8:	d1ef      	bne.n	8000b9a <CUBEMX_Init+0x82>
    } while(sets-- != 0U);
 8000bba:	68bb      	ldr	r3, [r7, #8]
 8000bbc:	1e5a      	subs	r2, r3, #1
 8000bbe:	60ba      	str	r2, [r7, #8]
 8000bc0:	2b00      	cmp	r3, #0
 8000bc2:	d1e5      	bne.n	8000b90 <CUBEMX_Init+0x78>
  __ASM volatile ("dsb 0xF":::"memory");
 8000bc4:	f3bf 8f4f 	dsb	sy
}
 8000bc8:	bf00      	nop
    __DSB();

    SCB->CCR |=  (uint32_t)SCB_CCR_DC_Msk;  /* enable D-Cache */
 8000bca:	4b1b      	ldr	r3, [pc, #108]	; (8000c38 <CUBEMX_Init+0x120>)
 8000bcc:	695b      	ldr	r3, [r3, #20]
 8000bce:	4a1a      	ldr	r2, [pc, #104]	; (8000c38 <CUBEMX_Init+0x120>)
 8000bd0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000bd4:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 8000bd6:	f3bf 8f4f 	dsb	sy
}
 8000bda:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000bdc:	f3bf 8f6f 	isb	sy
}
 8000be0:	e000      	b.n	8000be4 <CUBEMX_Init+0xcc>
    if (SCB->CCR & SCB_CCR_DC_Msk) return;  /* return if DCache is already enabled */
 8000be2:	bf00      	nop
	// Turn on I and D Cache
	SCB_EnableICache();
	SCB_EnableDCache();

	// Init HAL
	HAL_Init();
 8000be4:	f001 fb58 	bl	8002298 <HAL_Init>

	// Init clocks
	SystemClock_Config();
 8000be8:	f000 fdd8 	bl	800179c <SystemClock_Config>
	PeriphCommonClock_Config();
 8000bec:	f000 fe60 	bl	80018b0 <PeriphCommonClock_Config>

	// Init peripherals
	MX_GPIO_Init();
 8000bf0:	f000 fb72 	bl	80012d8 <MX_GPIO_Init>
	MX_FMC_Init();
 8000bf4:	f000 f9b6 	bl	8000f64 <MX_FMC_Init>
	MX_I2C2_Init();
 8000bf8:	f000 fc58 	bl	80014ac <MX_I2C2_Init>
	MX_USART1_UART_Init();
 8000bfc:	f001 fa70 	bl	80020e0 <MX_USART1_UART_Init>
	MX_FDCAN1_Init();
 8000c00:	f000 f8fa 	bl	8000df8 <MX_FDCAN1_Init>
	MX_I2S2_Init();
 8000c04:	f000 fcf8 	bl	80015f8 <MX_I2S2_Init>
	MX_SPI4_Init();
 8000c08:	f000 ff58 	bl	8001abc <MX_SPI4_Init>
	MX_SPI6_Init();
 8000c0c:	f000 ffac 	bl	8001b68 <MX_SPI6_Init>
	MX_SDMMC1_SD_Init();
 8000c10:	f000 fe8a 	bl	8001928 <MX_SDMMC1_SD_Init>
	MX_FATFS_Init();
 8000c14:	f00f f884 	bl	800fd20 <MX_FATFS_Init>
	MX_USB_DEVICE_Init();
 8000c18:	f010 fee4 	bl	80119e4 <MX_USB_DEVICE_Init>
	MX_DMA2D_Init();
 8000c1c:	f000 f890 	bl	8000d40 <MX_DMA2D_Init>
	MX_ADC3_Init();
 8000c20:	f7ff fe12 	bl	8000848 <MX_ADC3_Init>
	MX_DAC1_Init();
 8000c24:	f000 f80a 	bl	8000c3c <MX_DAC1_Init>
	MX_ADC1_Init();
 8000c28:	f7ff fd2e 	bl	8000688 <MX_ADC1_Init>
	MX_ADC2_Init();
 8000c2c:	f7ff fda6 	bl	800077c <MX_ADC2_Init>
}
 8000c30:	bf00      	nop
 8000c32:	3710      	adds	r7, #16
 8000c34:	46bd      	mov	sp, r7
 8000c36:	bd80      	pop	{r7, pc}
 8000c38:	e000ed00 	.word	0xe000ed00

08000c3c <MX_DAC1_Init>:

DAC_HandleTypeDef hdac1;

/* DAC1 init function */
void MX_DAC1_Init(void)
{
 8000c3c:	b580      	push	{r7, lr}
 8000c3e:	b08a      	sub	sp, #40	; 0x28
 8000c40:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC1_Init 0 */

  /* USER CODE END DAC1_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 8000c42:	1d3b      	adds	r3, r7, #4
 8000c44:	2224      	movs	r2, #36	; 0x24
 8000c46:	2100      	movs	r1, #0
 8000c48:	4618      	mov	r0, r3
 8000c4a:	f012 fe9f 	bl	801398c <memset>
  /* USER CODE BEGIN DAC1_Init 1 */

  /* USER CODE END DAC1_Init 1 */
  /** DAC Initialization
  */
  hdac1.Instance = DAC1;
 8000c4e:	4b17      	ldr	r3, [pc, #92]	; (8000cac <MX_DAC1_Init+0x70>)
 8000c50:	4a17      	ldr	r2, [pc, #92]	; (8000cb0 <MX_DAC1_Init+0x74>)
 8000c52:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac1) != HAL_OK)
 8000c54:	4815      	ldr	r0, [pc, #84]	; (8000cac <MX_DAC1_Init+0x70>)
 8000c56:	f002 fd8e 	bl	8003776 <HAL_DAC_Init>
 8000c5a:	4603      	mov	r3, r0
 8000c5c:	2b00      	cmp	r3, #0
 8000c5e:	d001      	beq.n	8000c64 <MX_DAC1_Init+0x28>
  {
    Error_Handler();
 8000c60:	f000 fe5c 	bl	800191c <Error_Handler>
  }
  /** DAC channel OUT1 config
  */
  sConfig.DAC_SampleAndHold = DAC_SAMPLEANDHOLD_DISABLE;
 8000c64:	2300      	movs	r3, #0
 8000c66:	607b      	str	r3, [r7, #4]
  sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
 8000c68:	2300      	movs	r3, #0
 8000c6a:	60bb      	str	r3, [r7, #8]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 8000c6c:	2300      	movs	r3, #0
 8000c6e:	60fb      	str	r3, [r7, #12]
  sConfig.DAC_ConnectOnChipPeripheral = DAC_CHIPCONNECT_DISABLE;
 8000c70:	2301      	movs	r3, #1
 8000c72:	613b      	str	r3, [r7, #16]
  sConfig.DAC_UserTrimming = DAC_TRIMMING_FACTORY;
 8000c74:	2300      	movs	r3, #0
 8000c76:	617b      	str	r3, [r7, #20]
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 8000c78:	1d3b      	adds	r3, r7, #4
 8000c7a:	2200      	movs	r2, #0
 8000c7c:	4619      	mov	r1, r3
 8000c7e:	480b      	ldr	r0, [pc, #44]	; (8000cac <MX_DAC1_Init+0x70>)
 8000c80:	f002 fd9c 	bl	80037bc <HAL_DAC_ConfigChannel>
 8000c84:	4603      	mov	r3, r0
 8000c86:	2b00      	cmp	r3, #0
 8000c88:	d001      	beq.n	8000c8e <MX_DAC1_Init+0x52>
  {
    Error_Handler();
 8000c8a:	f000 fe47 	bl	800191c <Error_Handler>
  }
  /** DAC channel OUT2 config
  */
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_2) != HAL_OK)
 8000c8e:	1d3b      	adds	r3, r7, #4
 8000c90:	2210      	movs	r2, #16
 8000c92:	4619      	mov	r1, r3
 8000c94:	4805      	ldr	r0, [pc, #20]	; (8000cac <MX_DAC1_Init+0x70>)
 8000c96:	f002 fd91 	bl	80037bc <HAL_DAC_ConfigChannel>
 8000c9a:	4603      	mov	r3, r0
 8000c9c:	2b00      	cmp	r3, #0
 8000c9e:	d001      	beq.n	8000ca4 <MX_DAC1_Init+0x68>
  {
    Error_Handler();
 8000ca0:	f000 fe3c 	bl	800191c <Error_Handler>
  }
  /* USER CODE BEGIN DAC1_Init 2 */

  /* USER CODE END DAC1_Init 2 */

}
 8000ca4:	bf00      	nop
 8000ca6:	3728      	adds	r7, #40	; 0x28
 8000ca8:	46bd      	mov	sp, r7
 8000caa:	bd80      	pop	{r7, pc}
 8000cac:	240004d0 	.word	0x240004d0
 8000cb0:	40007400 	.word	0x40007400

08000cb4 <HAL_DAC_MspInit>:

void HAL_DAC_MspInit(DAC_HandleTypeDef* dacHandle)
{
 8000cb4:	b580      	push	{r7, lr}
 8000cb6:	b08a      	sub	sp, #40	; 0x28
 8000cb8:	af00      	add	r7, sp, #0
 8000cba:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000cbc:	f107 0314 	add.w	r3, r7, #20
 8000cc0:	2200      	movs	r2, #0
 8000cc2:	601a      	str	r2, [r3, #0]
 8000cc4:	605a      	str	r2, [r3, #4]
 8000cc6:	609a      	str	r2, [r3, #8]
 8000cc8:	60da      	str	r2, [r3, #12]
 8000cca:	611a      	str	r2, [r3, #16]
  if(dacHandle->Instance==DAC1)
 8000ccc:	687b      	ldr	r3, [r7, #4]
 8000cce:	681b      	ldr	r3, [r3, #0]
 8000cd0:	4a18      	ldr	r2, [pc, #96]	; (8000d34 <HAL_DAC_MspInit+0x80>)
 8000cd2:	4293      	cmp	r3, r2
 8000cd4:	d129      	bne.n	8000d2a <HAL_DAC_MspInit+0x76>
  {
  /* USER CODE BEGIN DAC1_MspInit 0 */

  /* USER CODE END DAC1_MspInit 0 */
    /* DAC1 clock enable */
    __HAL_RCC_DAC12_CLK_ENABLE();
 8000cd6:	4b18      	ldr	r3, [pc, #96]	; (8000d38 <HAL_DAC_MspInit+0x84>)
 8000cd8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8000cdc:	4a16      	ldr	r2, [pc, #88]	; (8000d38 <HAL_DAC_MspInit+0x84>)
 8000cde:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8000ce2:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8000ce6:	4b14      	ldr	r3, [pc, #80]	; (8000d38 <HAL_DAC_MspInit+0x84>)
 8000ce8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8000cec:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8000cf0:	613b      	str	r3, [r7, #16]
 8000cf2:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000cf4:	4b10      	ldr	r3, [pc, #64]	; (8000d38 <HAL_DAC_MspInit+0x84>)
 8000cf6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000cfa:	4a0f      	ldr	r2, [pc, #60]	; (8000d38 <HAL_DAC_MspInit+0x84>)
 8000cfc:	f043 0301 	orr.w	r3, r3, #1
 8000d00:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000d04:	4b0c      	ldr	r3, [pc, #48]	; (8000d38 <HAL_DAC_MspInit+0x84>)
 8000d06:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000d0a:	f003 0301 	and.w	r3, r3, #1
 8000d0e:	60fb      	str	r3, [r7, #12]
 8000d10:	68fb      	ldr	r3, [r7, #12]
    /**DAC1 GPIO Configuration
    PA4     ------> DAC1_OUT1
    PA5     ------> DAC1_OUT2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8000d12:	2330      	movs	r3, #48	; 0x30
 8000d14:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000d16:	2303      	movs	r3, #3
 8000d18:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d1a:	2300      	movs	r3, #0
 8000d1c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d1e:	f107 0314 	add.w	r3, r7, #20
 8000d22:	4619      	mov	r1, r3
 8000d24:	4805      	ldr	r0, [pc, #20]	; (8000d3c <HAL_DAC_MspInit+0x88>)
 8000d26:	f003 fe0d 	bl	8004944 <HAL_GPIO_Init>

  /* USER CODE BEGIN DAC1_MspInit 1 */

  /* USER CODE END DAC1_MspInit 1 */
  }
}
 8000d2a:	bf00      	nop
 8000d2c:	3728      	adds	r7, #40	; 0x28
 8000d2e:	46bd      	mov	sp, r7
 8000d30:	bd80      	pop	{r7, pc}
 8000d32:	bf00      	nop
 8000d34:	40007400 	.word	0x40007400
 8000d38:	58024400 	.word	0x58024400
 8000d3c:	58020000 	.word	0x58020000

08000d40 <MX_DMA2D_Init>:

DMA2D_HandleTypeDef hdma2d;

/* DMA2D init function */
void MX_DMA2D_Init(void)
{
 8000d40:	b580      	push	{r7, lr}
 8000d42:	af00      	add	r7, sp, #0
  /* USER CODE END DMA2D_Init 0 */

  /* USER CODE BEGIN DMA2D_Init 1 */

  /* USER CODE END DMA2D_Init 1 */
  hdma2d.Instance = DMA2D;
 8000d44:	4b19      	ldr	r3, [pc, #100]	; (8000dac <MX_DMA2D_Init+0x6c>)
 8000d46:	4a1a      	ldr	r2, [pc, #104]	; (8000db0 <MX_DMA2D_Init+0x70>)
 8000d48:	601a      	str	r2, [r3, #0]
  hdma2d.Init.Mode = DMA2D_M2M;
 8000d4a:	4b18      	ldr	r3, [pc, #96]	; (8000dac <MX_DMA2D_Init+0x6c>)
 8000d4c:	2200      	movs	r2, #0
 8000d4e:	605a      	str	r2, [r3, #4]
  hdma2d.Init.ColorMode = DMA2D_OUTPUT_ARGB8888;
 8000d50:	4b16      	ldr	r3, [pc, #88]	; (8000dac <MX_DMA2D_Init+0x6c>)
 8000d52:	2200      	movs	r2, #0
 8000d54:	609a      	str	r2, [r3, #8]
  hdma2d.Init.OutputOffset = 0;
 8000d56:	4b15      	ldr	r3, [pc, #84]	; (8000dac <MX_DMA2D_Init+0x6c>)
 8000d58:	2200      	movs	r2, #0
 8000d5a:	60da      	str	r2, [r3, #12]
  hdma2d.LayerCfg[1].InputOffset = 0;
 8000d5c:	4b13      	ldr	r3, [pc, #76]	; (8000dac <MX_DMA2D_Init+0x6c>)
 8000d5e:	2200      	movs	r2, #0
 8000d60:	645a      	str	r2, [r3, #68]	; 0x44
  hdma2d.LayerCfg[1].InputColorMode = DMA2D_INPUT_ARGB8888;
 8000d62:	4b12      	ldr	r3, [pc, #72]	; (8000dac <MX_DMA2D_Init+0x6c>)
 8000d64:	2200      	movs	r2, #0
 8000d66:	649a      	str	r2, [r3, #72]	; 0x48
  hdma2d.LayerCfg[1].AlphaMode = DMA2D_NO_MODIF_ALPHA;
 8000d68:	4b10      	ldr	r3, [pc, #64]	; (8000dac <MX_DMA2D_Init+0x6c>)
 8000d6a:	2200      	movs	r2, #0
 8000d6c:	64da      	str	r2, [r3, #76]	; 0x4c
  hdma2d.LayerCfg[1].InputAlpha = 0;
 8000d6e:	4b0f      	ldr	r3, [pc, #60]	; (8000dac <MX_DMA2D_Init+0x6c>)
 8000d70:	2200      	movs	r2, #0
 8000d72:	651a      	str	r2, [r3, #80]	; 0x50
  hdma2d.LayerCfg[1].AlphaInverted = DMA2D_REGULAR_ALPHA;
 8000d74:	4b0d      	ldr	r3, [pc, #52]	; (8000dac <MX_DMA2D_Init+0x6c>)
 8000d76:	2200      	movs	r2, #0
 8000d78:	655a      	str	r2, [r3, #84]	; 0x54
  hdma2d.LayerCfg[1].RedBlueSwap = DMA2D_RB_REGULAR;
 8000d7a:	4b0c      	ldr	r3, [pc, #48]	; (8000dac <MX_DMA2D_Init+0x6c>)
 8000d7c:	2200      	movs	r2, #0
 8000d7e:	659a      	str	r2, [r3, #88]	; 0x58
  hdma2d.LayerCfg[1].ChromaSubSampling = DMA2D_NO_CSS;
 8000d80:	4b0a      	ldr	r3, [pc, #40]	; (8000dac <MX_DMA2D_Init+0x6c>)
 8000d82:	2200      	movs	r2, #0
 8000d84:	65da      	str	r2, [r3, #92]	; 0x5c
  if (HAL_DMA2D_Init(&hdma2d) != HAL_OK)
 8000d86:	4809      	ldr	r0, [pc, #36]	; (8000dac <MX_DMA2D_Init+0x6c>)
 8000d88:	f002 fe48 	bl	8003a1c <HAL_DMA2D_Init>
 8000d8c:	4603      	mov	r3, r0
 8000d8e:	2b00      	cmp	r3, #0
 8000d90:	d001      	beq.n	8000d96 <MX_DMA2D_Init+0x56>
  {
    Error_Handler();
 8000d92:	f000 fdc3 	bl	800191c <Error_Handler>
  }
  if (HAL_DMA2D_ConfigLayer(&hdma2d, 1) != HAL_OK)
 8000d96:	2101      	movs	r1, #1
 8000d98:	4804      	ldr	r0, [pc, #16]	; (8000dac <MX_DMA2D_Init+0x6c>)
 8000d9a:	f002 fea3 	bl	8003ae4 <HAL_DMA2D_ConfigLayer>
 8000d9e:	4603      	mov	r3, r0
 8000da0:	2b00      	cmp	r3, #0
 8000da2:	d001      	beq.n	8000da8 <MX_DMA2D_Init+0x68>
  {
    Error_Handler();
 8000da4:	f000 fdba 	bl	800191c <Error_Handler>
  }
  /* USER CODE BEGIN DMA2D_Init 2 */

  /* USER CODE END DMA2D_Init 2 */

}
 8000da8:	bf00      	nop
 8000daa:	bd80      	pop	{r7, pc}
 8000dac:	240004e4 	.word	0x240004e4
 8000db0:	52001000 	.word	0x52001000

08000db4 <HAL_DMA2D_MspInit>:

void HAL_DMA2D_MspInit(DMA2D_HandleTypeDef* dma2dHandle)
{
 8000db4:	b480      	push	{r7}
 8000db6:	b085      	sub	sp, #20
 8000db8:	af00      	add	r7, sp, #0
 8000dba:	6078      	str	r0, [r7, #4]

  if(dma2dHandle->Instance==DMA2D)
 8000dbc:	687b      	ldr	r3, [r7, #4]
 8000dbe:	681b      	ldr	r3, [r3, #0]
 8000dc0:	4a0b      	ldr	r2, [pc, #44]	; (8000df0 <HAL_DMA2D_MspInit+0x3c>)
 8000dc2:	4293      	cmp	r3, r2
 8000dc4:	d10e      	bne.n	8000de4 <HAL_DMA2D_MspInit+0x30>
  {
  /* USER CODE BEGIN DMA2D_MspInit 0 */

  /* USER CODE END DMA2D_MspInit 0 */
    /* DMA2D clock enable */
    __HAL_RCC_DMA2D_CLK_ENABLE();
 8000dc6:	4b0b      	ldr	r3, [pc, #44]	; (8000df4 <HAL_DMA2D_MspInit+0x40>)
 8000dc8:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 8000dcc:	4a09      	ldr	r2, [pc, #36]	; (8000df4 <HAL_DMA2D_MspInit+0x40>)
 8000dce:	f043 0310 	orr.w	r3, r3, #16
 8000dd2:	f8c2 30d4 	str.w	r3, [r2, #212]	; 0xd4
 8000dd6:	4b07      	ldr	r3, [pc, #28]	; (8000df4 <HAL_DMA2D_MspInit+0x40>)
 8000dd8:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 8000ddc:	f003 0310 	and.w	r3, r3, #16
 8000de0:	60fb      	str	r3, [r7, #12]
 8000de2:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN DMA2D_MspInit 1 */

  /* USER CODE END DMA2D_MspInit 1 */
  }
}
 8000de4:	bf00      	nop
 8000de6:	3714      	adds	r7, #20
 8000de8:	46bd      	mov	sp, r7
 8000dea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dee:	4770      	bx	lr
 8000df0:	52001000 	.word	0x52001000
 8000df4:	58024400 	.word	0x58024400

08000df8 <MX_FDCAN1_Init>:

FDCAN_HandleTypeDef hfdcan1;

/* FDCAN1 init function */
void MX_FDCAN1_Init(void)
{
 8000df8:	b580      	push	{r7, lr}
 8000dfa:	af00      	add	r7, sp, #0
  /* USER CODE END FDCAN1_Init 0 */

  /* USER CODE BEGIN FDCAN1_Init 1 */

  /* USER CODE END FDCAN1_Init 1 */
  hfdcan1.Instance = FDCAN1;
 8000dfc:	4b2e      	ldr	r3, [pc, #184]	; (8000eb8 <MX_FDCAN1_Init+0xc0>)
 8000dfe:	4a2f      	ldr	r2, [pc, #188]	; (8000ebc <MX_FDCAN1_Init+0xc4>)
 8000e00:	601a      	str	r2, [r3, #0]
  hfdcan1.Init.FrameFormat = FDCAN_FRAME_CLASSIC;
 8000e02:	4b2d      	ldr	r3, [pc, #180]	; (8000eb8 <MX_FDCAN1_Init+0xc0>)
 8000e04:	2200      	movs	r2, #0
 8000e06:	609a      	str	r2, [r3, #8]
  hfdcan1.Init.Mode = FDCAN_MODE_NORMAL;
 8000e08:	4b2b      	ldr	r3, [pc, #172]	; (8000eb8 <MX_FDCAN1_Init+0xc0>)
 8000e0a:	2200      	movs	r2, #0
 8000e0c:	60da      	str	r2, [r3, #12]
  hfdcan1.Init.AutoRetransmission = DISABLE;
 8000e0e:	4b2a      	ldr	r3, [pc, #168]	; (8000eb8 <MX_FDCAN1_Init+0xc0>)
 8000e10:	2200      	movs	r2, #0
 8000e12:	741a      	strb	r2, [r3, #16]
  hfdcan1.Init.TransmitPause = DISABLE;
 8000e14:	4b28      	ldr	r3, [pc, #160]	; (8000eb8 <MX_FDCAN1_Init+0xc0>)
 8000e16:	2200      	movs	r2, #0
 8000e18:	745a      	strb	r2, [r3, #17]
  hfdcan1.Init.ProtocolException = ENABLE;
 8000e1a:	4b27      	ldr	r3, [pc, #156]	; (8000eb8 <MX_FDCAN1_Init+0xc0>)
 8000e1c:	2201      	movs	r2, #1
 8000e1e:	749a      	strb	r2, [r3, #18]
  hfdcan1.Init.NominalPrescaler = 1;
 8000e20:	4b25      	ldr	r3, [pc, #148]	; (8000eb8 <MX_FDCAN1_Init+0xc0>)
 8000e22:	2201      	movs	r2, #1
 8000e24:	615a      	str	r2, [r3, #20]
  hfdcan1.Init.NominalSyncJumpWidth = 8;
 8000e26:	4b24      	ldr	r3, [pc, #144]	; (8000eb8 <MX_FDCAN1_Init+0xc0>)
 8000e28:	2208      	movs	r2, #8
 8000e2a:	619a      	str	r2, [r3, #24]
  hfdcan1.Init.NominalTimeSeg1 = 0x1f;
 8000e2c:	4b22      	ldr	r3, [pc, #136]	; (8000eb8 <MX_FDCAN1_Init+0xc0>)
 8000e2e:	221f      	movs	r2, #31
 8000e30:	61da      	str	r2, [r3, #28]
  hfdcan1.Init.NominalTimeSeg2 = 8;
 8000e32:	4b21      	ldr	r3, [pc, #132]	; (8000eb8 <MX_FDCAN1_Init+0xc0>)
 8000e34:	2208      	movs	r2, #8
 8000e36:	621a      	str	r2, [r3, #32]
  hfdcan1.Init.DataPrescaler = 1;
 8000e38:	4b1f      	ldr	r3, [pc, #124]	; (8000eb8 <MX_FDCAN1_Init+0xc0>)
 8000e3a:	2201      	movs	r2, #1
 8000e3c:	625a      	str	r2, [r3, #36]	; 0x24
  hfdcan1.Init.DataSyncJumpWidth = 1;
 8000e3e:	4b1e      	ldr	r3, [pc, #120]	; (8000eb8 <MX_FDCAN1_Init+0xc0>)
 8000e40:	2201      	movs	r2, #1
 8000e42:	629a      	str	r2, [r3, #40]	; 0x28
  hfdcan1.Init.DataTimeSeg1 = 1;
 8000e44:	4b1c      	ldr	r3, [pc, #112]	; (8000eb8 <MX_FDCAN1_Init+0xc0>)
 8000e46:	2201      	movs	r2, #1
 8000e48:	62da      	str	r2, [r3, #44]	; 0x2c
  hfdcan1.Init.DataTimeSeg2 = 1;
 8000e4a:	4b1b      	ldr	r3, [pc, #108]	; (8000eb8 <MX_FDCAN1_Init+0xc0>)
 8000e4c:	2201      	movs	r2, #1
 8000e4e:	631a      	str	r2, [r3, #48]	; 0x30
  hfdcan1.Init.MessageRAMOffset = 0;
 8000e50:	4b19      	ldr	r3, [pc, #100]	; (8000eb8 <MX_FDCAN1_Init+0xc0>)
 8000e52:	2200      	movs	r2, #0
 8000e54:	635a      	str	r2, [r3, #52]	; 0x34
  hfdcan1.Init.StdFiltersNbr = 1;
 8000e56:	4b18      	ldr	r3, [pc, #96]	; (8000eb8 <MX_FDCAN1_Init+0xc0>)
 8000e58:	2201      	movs	r2, #1
 8000e5a:	639a      	str	r2, [r3, #56]	; 0x38
  hfdcan1.Init.ExtFiltersNbr = 0;
 8000e5c:	4b16      	ldr	r3, [pc, #88]	; (8000eb8 <MX_FDCAN1_Init+0xc0>)
 8000e5e:	2200      	movs	r2, #0
 8000e60:	63da      	str	r2, [r3, #60]	; 0x3c
  hfdcan1.Init.RxFifo0ElmtsNbr = 1;
 8000e62:	4b15      	ldr	r3, [pc, #84]	; (8000eb8 <MX_FDCAN1_Init+0xc0>)
 8000e64:	2201      	movs	r2, #1
 8000e66:	641a      	str	r2, [r3, #64]	; 0x40
  hfdcan1.Init.RxFifo0ElmtSize = FDCAN_DATA_BYTES_8;
 8000e68:	4b13      	ldr	r3, [pc, #76]	; (8000eb8 <MX_FDCAN1_Init+0xc0>)
 8000e6a:	2204      	movs	r2, #4
 8000e6c:	645a      	str	r2, [r3, #68]	; 0x44
  hfdcan1.Init.RxFifo1ElmtsNbr = 0;
 8000e6e:	4b12      	ldr	r3, [pc, #72]	; (8000eb8 <MX_FDCAN1_Init+0xc0>)
 8000e70:	2200      	movs	r2, #0
 8000e72:	649a      	str	r2, [r3, #72]	; 0x48
  hfdcan1.Init.RxFifo1ElmtSize = FDCAN_DATA_BYTES_8;
 8000e74:	4b10      	ldr	r3, [pc, #64]	; (8000eb8 <MX_FDCAN1_Init+0xc0>)
 8000e76:	2204      	movs	r2, #4
 8000e78:	64da      	str	r2, [r3, #76]	; 0x4c
  hfdcan1.Init.RxBuffersNbr = 0;
 8000e7a:	4b0f      	ldr	r3, [pc, #60]	; (8000eb8 <MX_FDCAN1_Init+0xc0>)
 8000e7c:	2200      	movs	r2, #0
 8000e7e:	651a      	str	r2, [r3, #80]	; 0x50
  hfdcan1.Init.RxBufferSize = FDCAN_DATA_BYTES_8;
 8000e80:	4b0d      	ldr	r3, [pc, #52]	; (8000eb8 <MX_FDCAN1_Init+0xc0>)
 8000e82:	2204      	movs	r2, #4
 8000e84:	655a      	str	r2, [r3, #84]	; 0x54
  hfdcan1.Init.TxEventsNbr = 0;
 8000e86:	4b0c      	ldr	r3, [pc, #48]	; (8000eb8 <MX_FDCAN1_Init+0xc0>)
 8000e88:	2200      	movs	r2, #0
 8000e8a:	659a      	str	r2, [r3, #88]	; 0x58
  hfdcan1.Init.TxBuffersNbr = 0;
 8000e8c:	4b0a      	ldr	r3, [pc, #40]	; (8000eb8 <MX_FDCAN1_Init+0xc0>)
 8000e8e:	2200      	movs	r2, #0
 8000e90:	65da      	str	r2, [r3, #92]	; 0x5c
  hfdcan1.Init.TxFifoQueueElmtsNbr = 1;
 8000e92:	4b09      	ldr	r3, [pc, #36]	; (8000eb8 <MX_FDCAN1_Init+0xc0>)
 8000e94:	2201      	movs	r2, #1
 8000e96:	661a      	str	r2, [r3, #96]	; 0x60
  hfdcan1.Init.TxFifoQueueMode = FDCAN_TX_FIFO_OPERATION;
 8000e98:	4b07      	ldr	r3, [pc, #28]	; (8000eb8 <MX_FDCAN1_Init+0xc0>)
 8000e9a:	2200      	movs	r2, #0
 8000e9c:	665a      	str	r2, [r3, #100]	; 0x64
  hfdcan1.Init.TxElmtSize = FDCAN_DATA_BYTES_8;
 8000e9e:	4b06      	ldr	r3, [pc, #24]	; (8000eb8 <MX_FDCAN1_Init+0xc0>)
 8000ea0:	2204      	movs	r2, #4
 8000ea2:	669a      	str	r2, [r3, #104]	; 0x68
  if (HAL_FDCAN_Init(&hfdcan1) != HAL_OK)
 8000ea4:	4804      	ldr	r0, [pc, #16]	; (8000eb8 <MX_FDCAN1_Init+0xc0>)
 8000ea6:	f002 fed1 	bl	8003c4c <HAL_FDCAN_Init>
 8000eaa:	4603      	mov	r3, r0
 8000eac:	2b00      	cmp	r3, #0
 8000eae:	d001      	beq.n	8000eb4 <MX_FDCAN1_Init+0xbc>
  {
    Error_Handler();
 8000eb0:	f000 fd34 	bl	800191c <Error_Handler>
  }
  /* USER CODE BEGIN FDCAN1_Init 2 */

  /* USER CODE END FDCAN1_Init 2 */

}
 8000eb4:	bf00      	nop
 8000eb6:	bd80      	pop	{r7, pc}
 8000eb8:	2400054c 	.word	0x2400054c
 8000ebc:	4000a000 	.word	0x4000a000

08000ec0 <HAL_FDCAN_MspInit>:

void HAL_FDCAN_MspInit(FDCAN_HandleTypeDef* fdcanHandle)
{
 8000ec0:	b580      	push	{r7, lr}
 8000ec2:	b08a      	sub	sp, #40	; 0x28
 8000ec4:	af00      	add	r7, sp, #0
 8000ec6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ec8:	f107 0314 	add.w	r3, r7, #20
 8000ecc:	2200      	movs	r2, #0
 8000ece:	601a      	str	r2, [r3, #0]
 8000ed0:	605a      	str	r2, [r3, #4]
 8000ed2:	609a      	str	r2, [r3, #8]
 8000ed4:	60da      	str	r2, [r3, #12]
 8000ed6:	611a      	str	r2, [r3, #16]
  if(fdcanHandle->Instance==FDCAN1)
 8000ed8:	687b      	ldr	r3, [r7, #4]
 8000eda:	681b      	ldr	r3, [r3, #0]
 8000edc:	4a1e      	ldr	r2, [pc, #120]	; (8000f58 <HAL_FDCAN_MspInit+0x98>)
 8000ede:	4293      	cmp	r3, r2
 8000ee0:	d136      	bne.n	8000f50 <HAL_FDCAN_MspInit+0x90>
  {
  /* USER CODE BEGIN FDCAN1_MspInit 0 */

  /* USER CODE END FDCAN1_MspInit 0 */
    /* FDCAN1 clock enable */
    __HAL_RCC_FDCAN_CLK_ENABLE();
 8000ee2:	4b1e      	ldr	r3, [pc, #120]	; (8000f5c <HAL_FDCAN_MspInit+0x9c>)
 8000ee4:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 8000ee8:	4a1c      	ldr	r2, [pc, #112]	; (8000f5c <HAL_FDCAN_MspInit+0x9c>)
 8000eea:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000eee:	f8c2 30ec 	str.w	r3, [r2, #236]	; 0xec
 8000ef2:	4b1a      	ldr	r3, [pc, #104]	; (8000f5c <HAL_FDCAN_MspInit+0x9c>)
 8000ef4:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 8000ef8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000efc:	613b      	str	r3, [r7, #16]
 8000efe:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000f00:	4b16      	ldr	r3, [pc, #88]	; (8000f5c <HAL_FDCAN_MspInit+0x9c>)
 8000f02:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000f06:	4a15      	ldr	r2, [pc, #84]	; (8000f5c <HAL_FDCAN_MspInit+0x9c>)
 8000f08:	f043 0302 	orr.w	r3, r3, #2
 8000f0c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000f10:	4b12      	ldr	r3, [pc, #72]	; (8000f5c <HAL_FDCAN_MspInit+0x9c>)
 8000f12:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000f16:	f003 0302 	and.w	r3, r3, #2
 8000f1a:	60fb      	str	r3, [r7, #12]
 8000f1c:	68fb      	ldr	r3, [r7, #12]
    /**FDCAN1 GPIO Configuration
    PB8     ------> FDCAN1_RX
    PB9     ------> FDCAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8000f1e:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000f22:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f24:	2302      	movs	r3, #2
 8000f26:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f28:	2300      	movs	r3, #0
 8000f2a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f2c:	2300      	movs	r3, #0
 8000f2e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_FDCAN1;
 8000f30:	2309      	movs	r3, #9
 8000f32:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000f34:	f107 0314 	add.w	r3, r7, #20
 8000f38:	4619      	mov	r1, r3
 8000f3a:	4809      	ldr	r0, [pc, #36]	; (8000f60 <HAL_FDCAN_MspInit+0xa0>)
 8000f3c:	f003 fd02 	bl	8004944 <HAL_GPIO_Init>

    /* FDCAN1 interrupt Init */
    HAL_NVIC_SetPriority(FDCAN1_IT0_IRQn, 0, 0);
 8000f40:	2200      	movs	r2, #0
 8000f42:	2100      	movs	r1, #0
 8000f44:	2013      	movs	r0, #19
 8000f46:	f002 fbe2 	bl	800370e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(FDCAN1_IT0_IRQn);
 8000f4a:	2013      	movs	r0, #19
 8000f4c:	f002 fbf9 	bl	8003742 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN FDCAN1_MspInit 1 */

  /* USER CODE END FDCAN1_MspInit 1 */
  }
}
 8000f50:	bf00      	nop
 8000f52:	3728      	adds	r7, #40	; 0x28
 8000f54:	46bd      	mov	sp, r7
 8000f56:	bd80      	pop	{r7, pc}
 8000f58:	4000a000 	.word	0x4000a000
 8000f5c:	58024400 	.word	0x58024400
 8000f60:	58020400 	.word	0x58020400

08000f64 <MX_FMC_Init>:
SRAM_HandleTypeDef hsram2;
SDRAM_HandleTypeDef hsdram1;

/* FMC initialization function */
void MX_FMC_Init(void)
{
 8000f64:	b580      	push	{r7, lr}
 8000f66:	b08e      	sub	sp, #56	; 0x38
 8000f68:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FMC_Init 0 */

  /* USER CODE END FMC_Init 0 */

  FMC_NORSRAM_TimingTypeDef Timing = {0};
 8000f6a:	f107 031c 	add.w	r3, r7, #28
 8000f6e:	2200      	movs	r2, #0
 8000f70:	601a      	str	r2, [r3, #0]
 8000f72:	605a      	str	r2, [r3, #4]
 8000f74:	609a      	str	r2, [r3, #8]
 8000f76:	60da      	str	r2, [r3, #12]
 8000f78:	611a      	str	r2, [r3, #16]
 8000f7a:	615a      	str	r2, [r3, #20]
 8000f7c:	619a      	str	r2, [r3, #24]
  FMC_SDRAM_TimingTypeDef SdramTiming = {0};
 8000f7e:	463b      	mov	r3, r7
 8000f80:	2200      	movs	r2, #0
 8000f82:	601a      	str	r2, [r3, #0]
 8000f84:	605a      	str	r2, [r3, #4]
 8000f86:	609a      	str	r2, [r3, #8]
 8000f88:	60da      	str	r2, [r3, #12]
 8000f8a:	611a      	str	r2, [r3, #16]
 8000f8c:	615a      	str	r2, [r3, #20]
 8000f8e:	619a      	str	r2, [r3, #24]

  /* USER CODE END FMC_Init 1 */

  /** Perform the SRAM1 memory initialization sequence
  */
  hsram1.Instance = FMC_NORSRAM_DEVICE;
 8000f90:	4b70      	ldr	r3, [pc, #448]	; (8001154 <MX_FMC_Init+0x1f0>)
 8000f92:	4a71      	ldr	r2, [pc, #452]	; (8001158 <MX_FMC_Init+0x1f4>)
 8000f94:	601a      	str	r2, [r3, #0]
  hsram1.Extended = FMC_NORSRAM_EXTENDED_DEVICE;
 8000f96:	4b6f      	ldr	r3, [pc, #444]	; (8001154 <MX_FMC_Init+0x1f0>)
 8000f98:	4a70      	ldr	r2, [pc, #448]	; (800115c <MX_FMC_Init+0x1f8>)
 8000f9a:	605a      	str	r2, [r3, #4]
  /* hsram1.Init */
  hsram1.Init.NSBank = FMC_NORSRAM_BANK3;
 8000f9c:	4b6d      	ldr	r3, [pc, #436]	; (8001154 <MX_FMC_Init+0x1f0>)
 8000f9e:	2204      	movs	r2, #4
 8000fa0:	609a      	str	r2, [r3, #8]
  hsram1.Init.DataAddressMux = FMC_DATA_ADDRESS_MUX_DISABLE;
 8000fa2:	4b6c      	ldr	r3, [pc, #432]	; (8001154 <MX_FMC_Init+0x1f0>)
 8000fa4:	2200      	movs	r2, #0
 8000fa6:	60da      	str	r2, [r3, #12]
  hsram1.Init.MemoryType = FMC_MEMORY_TYPE_SRAM;
 8000fa8:	4b6a      	ldr	r3, [pc, #424]	; (8001154 <MX_FMC_Init+0x1f0>)
 8000faa:	2200      	movs	r2, #0
 8000fac:	611a      	str	r2, [r3, #16]
  hsram1.Init.MemoryDataWidth = FMC_NORSRAM_MEM_BUS_WIDTH_16;
 8000fae:	4b69      	ldr	r3, [pc, #420]	; (8001154 <MX_FMC_Init+0x1f0>)
 8000fb0:	2210      	movs	r2, #16
 8000fb2:	615a      	str	r2, [r3, #20]
  hsram1.Init.BurstAccessMode = FMC_BURST_ACCESS_MODE_DISABLE;
 8000fb4:	4b67      	ldr	r3, [pc, #412]	; (8001154 <MX_FMC_Init+0x1f0>)
 8000fb6:	2200      	movs	r2, #0
 8000fb8:	619a      	str	r2, [r3, #24]
  hsram1.Init.WaitSignalPolarity = FMC_WAIT_SIGNAL_POLARITY_LOW;
 8000fba:	4b66      	ldr	r3, [pc, #408]	; (8001154 <MX_FMC_Init+0x1f0>)
 8000fbc:	2200      	movs	r2, #0
 8000fbe:	61da      	str	r2, [r3, #28]
  hsram1.Init.WaitSignalActive = FMC_WAIT_TIMING_BEFORE_WS;
 8000fc0:	4b64      	ldr	r3, [pc, #400]	; (8001154 <MX_FMC_Init+0x1f0>)
 8000fc2:	2200      	movs	r2, #0
 8000fc4:	621a      	str	r2, [r3, #32]
  hsram1.Init.WriteOperation = FMC_WRITE_OPERATION_ENABLE;
 8000fc6:	4b63      	ldr	r3, [pc, #396]	; (8001154 <MX_FMC_Init+0x1f0>)
 8000fc8:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000fcc:	625a      	str	r2, [r3, #36]	; 0x24
  hsram1.Init.WaitSignal = FMC_WAIT_SIGNAL_DISABLE;
 8000fce:	4b61      	ldr	r3, [pc, #388]	; (8001154 <MX_FMC_Init+0x1f0>)
 8000fd0:	2200      	movs	r2, #0
 8000fd2:	629a      	str	r2, [r3, #40]	; 0x28
  hsram1.Init.ExtendedMode = FMC_EXTENDED_MODE_DISABLE;
 8000fd4:	4b5f      	ldr	r3, [pc, #380]	; (8001154 <MX_FMC_Init+0x1f0>)
 8000fd6:	2200      	movs	r2, #0
 8000fd8:	62da      	str	r2, [r3, #44]	; 0x2c
  hsram1.Init.AsynchronousWait = FMC_ASYNCHRONOUS_WAIT_DISABLE;
 8000fda:	4b5e      	ldr	r3, [pc, #376]	; (8001154 <MX_FMC_Init+0x1f0>)
 8000fdc:	2200      	movs	r2, #0
 8000fde:	631a      	str	r2, [r3, #48]	; 0x30
  hsram1.Init.WriteBurst = FMC_WRITE_BURST_DISABLE;
 8000fe0:	4b5c      	ldr	r3, [pc, #368]	; (8001154 <MX_FMC_Init+0x1f0>)
 8000fe2:	2200      	movs	r2, #0
 8000fe4:	635a      	str	r2, [r3, #52]	; 0x34
  hsram1.Init.ContinuousClock = FMC_CONTINUOUS_CLOCK_SYNC_ONLY;
 8000fe6:	4b5b      	ldr	r3, [pc, #364]	; (8001154 <MX_FMC_Init+0x1f0>)
 8000fe8:	2200      	movs	r2, #0
 8000fea:	639a      	str	r2, [r3, #56]	; 0x38
  hsram1.Init.WriteFifo = FMC_WRITE_FIFO_ENABLE;
 8000fec:	4b59      	ldr	r3, [pc, #356]	; (8001154 <MX_FMC_Init+0x1f0>)
 8000fee:	2200      	movs	r2, #0
 8000ff0:	63da      	str	r2, [r3, #60]	; 0x3c
  hsram1.Init.PageSize = FMC_PAGE_SIZE_NONE;
 8000ff2:	4b58      	ldr	r3, [pc, #352]	; (8001154 <MX_FMC_Init+0x1f0>)
 8000ff4:	2200      	movs	r2, #0
 8000ff6:	641a      	str	r2, [r3, #64]	; 0x40
  /* Timing */
  Timing.AddressSetupTime = 5;
 8000ff8:	2305      	movs	r3, #5
 8000ffa:	61fb      	str	r3, [r7, #28]
  Timing.AddressHoldTime = 15;
 8000ffc:	230f      	movs	r3, #15
 8000ffe:	623b      	str	r3, [r7, #32]
  Timing.DataSetupTime = 5;
 8001000:	2305      	movs	r3, #5
 8001002:	627b      	str	r3, [r7, #36]	; 0x24
  Timing.BusTurnAroundDuration = 1;
 8001004:	2301      	movs	r3, #1
 8001006:	62bb      	str	r3, [r7, #40]	; 0x28
  Timing.CLKDivision = 16;
 8001008:	2310      	movs	r3, #16
 800100a:	62fb      	str	r3, [r7, #44]	; 0x2c
  Timing.DataLatency = 17;
 800100c:	2311      	movs	r3, #17
 800100e:	633b      	str	r3, [r7, #48]	; 0x30
  Timing.AccessMode = FMC_ACCESS_MODE_A;
 8001010:	2300      	movs	r3, #0
 8001012:	637b      	str	r3, [r7, #52]	; 0x34
  /* ExtTiming */

  if (HAL_SRAM_Init(&hsram1, &Timing, NULL) != HAL_OK)
 8001014:	f107 031c 	add.w	r3, r7, #28
 8001018:	2200      	movs	r2, #0
 800101a:	4619      	mov	r1, r3
 800101c:	484d      	ldr	r0, [pc, #308]	; (8001154 <MX_FMC_Init+0x1f0>)
 800101e:	f00b faf5 	bl	800c60c <HAL_SRAM_Init>
 8001022:	4603      	mov	r3, r0
 8001024:	2b00      	cmp	r3, #0
 8001026:	d001      	beq.n	800102c <MX_FMC_Init+0xc8>
  {
    Error_Handler( );
 8001028:	f000 fc78 	bl	800191c <Error_Handler>
  }

  HAL_SetFMCMemorySwappingConfig(FMC_SWAPBMAP_SDRAM_SRAM);
 800102c:	f04f 7080 	mov.w	r0, #16777216	; 0x1000000
 8001030:	f001 f9f4 	bl	800241c <HAL_SetFMCMemorySwappingConfig>

  /** Perform the SRAM2 memory initialization sequence
  */
  hsram2.Instance = FMC_NORSRAM_DEVICE;
 8001034:	4b4a      	ldr	r3, [pc, #296]	; (8001160 <MX_FMC_Init+0x1fc>)
 8001036:	4a48      	ldr	r2, [pc, #288]	; (8001158 <MX_FMC_Init+0x1f4>)
 8001038:	601a      	str	r2, [r3, #0]
  hsram2.Extended = FMC_NORSRAM_EXTENDED_DEVICE;
 800103a:	4b49      	ldr	r3, [pc, #292]	; (8001160 <MX_FMC_Init+0x1fc>)
 800103c:	4a47      	ldr	r2, [pc, #284]	; (800115c <MX_FMC_Init+0x1f8>)
 800103e:	605a      	str	r2, [r3, #4]
  /* hsram2.Init */
  hsram2.Init.NSBank = FMC_NORSRAM_BANK1;
 8001040:	4b47      	ldr	r3, [pc, #284]	; (8001160 <MX_FMC_Init+0x1fc>)
 8001042:	2200      	movs	r2, #0
 8001044:	609a      	str	r2, [r3, #8]
  hsram2.Init.DataAddressMux = FMC_DATA_ADDRESS_MUX_DISABLE;
 8001046:	4b46      	ldr	r3, [pc, #280]	; (8001160 <MX_FMC_Init+0x1fc>)
 8001048:	2200      	movs	r2, #0
 800104a:	60da      	str	r2, [r3, #12]
  hsram2.Init.MemoryType = FMC_MEMORY_TYPE_SRAM;
 800104c:	4b44      	ldr	r3, [pc, #272]	; (8001160 <MX_FMC_Init+0x1fc>)
 800104e:	2200      	movs	r2, #0
 8001050:	611a      	str	r2, [r3, #16]
  hsram2.Init.MemoryDataWidth = FMC_NORSRAM_MEM_BUS_WIDTH_16;
 8001052:	4b43      	ldr	r3, [pc, #268]	; (8001160 <MX_FMC_Init+0x1fc>)
 8001054:	2210      	movs	r2, #16
 8001056:	615a      	str	r2, [r3, #20]
  hsram2.Init.BurstAccessMode = FMC_BURST_ACCESS_MODE_DISABLE;
 8001058:	4b41      	ldr	r3, [pc, #260]	; (8001160 <MX_FMC_Init+0x1fc>)
 800105a:	2200      	movs	r2, #0
 800105c:	619a      	str	r2, [r3, #24]
  hsram2.Init.WaitSignalPolarity = FMC_WAIT_SIGNAL_POLARITY_LOW;
 800105e:	4b40      	ldr	r3, [pc, #256]	; (8001160 <MX_FMC_Init+0x1fc>)
 8001060:	2200      	movs	r2, #0
 8001062:	61da      	str	r2, [r3, #28]
  hsram2.Init.WaitSignalActive = FMC_WAIT_TIMING_BEFORE_WS;
 8001064:	4b3e      	ldr	r3, [pc, #248]	; (8001160 <MX_FMC_Init+0x1fc>)
 8001066:	2200      	movs	r2, #0
 8001068:	621a      	str	r2, [r3, #32]
  hsram2.Init.WriteOperation = FMC_WRITE_OPERATION_ENABLE;
 800106a:	4b3d      	ldr	r3, [pc, #244]	; (8001160 <MX_FMC_Init+0x1fc>)
 800106c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001070:	625a      	str	r2, [r3, #36]	; 0x24
  hsram2.Init.WaitSignal = FMC_WAIT_SIGNAL_DISABLE;
 8001072:	4b3b      	ldr	r3, [pc, #236]	; (8001160 <MX_FMC_Init+0x1fc>)
 8001074:	2200      	movs	r2, #0
 8001076:	629a      	str	r2, [r3, #40]	; 0x28
  hsram2.Init.ExtendedMode = FMC_EXTENDED_MODE_DISABLE;
 8001078:	4b39      	ldr	r3, [pc, #228]	; (8001160 <MX_FMC_Init+0x1fc>)
 800107a:	2200      	movs	r2, #0
 800107c:	62da      	str	r2, [r3, #44]	; 0x2c
  hsram2.Init.AsynchronousWait = FMC_ASYNCHRONOUS_WAIT_DISABLE;
 800107e:	4b38      	ldr	r3, [pc, #224]	; (8001160 <MX_FMC_Init+0x1fc>)
 8001080:	2200      	movs	r2, #0
 8001082:	631a      	str	r2, [r3, #48]	; 0x30
  hsram2.Init.WriteBurst = FMC_WRITE_BURST_DISABLE;
 8001084:	4b36      	ldr	r3, [pc, #216]	; (8001160 <MX_FMC_Init+0x1fc>)
 8001086:	2200      	movs	r2, #0
 8001088:	635a      	str	r2, [r3, #52]	; 0x34
  hsram2.Init.ContinuousClock = FMC_CONTINUOUS_CLOCK_SYNC_ONLY;
 800108a:	4b35      	ldr	r3, [pc, #212]	; (8001160 <MX_FMC_Init+0x1fc>)
 800108c:	2200      	movs	r2, #0
 800108e:	639a      	str	r2, [r3, #56]	; 0x38
  hsram2.Init.WriteFifo = FMC_WRITE_FIFO_ENABLE;
 8001090:	4b33      	ldr	r3, [pc, #204]	; (8001160 <MX_FMC_Init+0x1fc>)
 8001092:	2200      	movs	r2, #0
 8001094:	63da      	str	r2, [r3, #60]	; 0x3c
  hsram2.Init.PageSize = FMC_PAGE_SIZE_NONE;
 8001096:	4b32      	ldr	r3, [pc, #200]	; (8001160 <MX_FMC_Init+0x1fc>)
 8001098:	2200      	movs	r2, #0
 800109a:	641a      	str	r2, [r3, #64]	; 0x40
  /* Timing */
  Timing.AddressSetupTime = 5;
 800109c:	2305      	movs	r3, #5
 800109e:	61fb      	str	r3, [r7, #28]
  Timing.AddressHoldTime = 15;
 80010a0:	230f      	movs	r3, #15
 80010a2:	623b      	str	r3, [r7, #32]
  Timing.DataSetupTime = 9;
 80010a4:	2309      	movs	r3, #9
 80010a6:	627b      	str	r3, [r7, #36]	; 0x24
  Timing.BusTurnAroundDuration = 0;
 80010a8:	2300      	movs	r3, #0
 80010aa:	62bb      	str	r3, [r7, #40]	; 0x28
  Timing.CLKDivision = 16;
 80010ac:	2310      	movs	r3, #16
 80010ae:	62fb      	str	r3, [r7, #44]	; 0x2c
  Timing.DataLatency = 17;
 80010b0:	2311      	movs	r3, #17
 80010b2:	633b      	str	r3, [r7, #48]	; 0x30
  Timing.AccessMode = FMC_ACCESS_MODE_A;
 80010b4:	2300      	movs	r3, #0
 80010b6:	637b      	str	r3, [r7, #52]	; 0x34
  /* ExtTiming */

  if (HAL_SRAM_Init(&hsram2, &Timing, NULL) != HAL_OK)
 80010b8:	f107 031c 	add.w	r3, r7, #28
 80010bc:	2200      	movs	r2, #0
 80010be:	4619      	mov	r1, r3
 80010c0:	4827      	ldr	r0, [pc, #156]	; (8001160 <MX_FMC_Init+0x1fc>)
 80010c2:	f00b faa3 	bl	800c60c <HAL_SRAM_Init>
 80010c6:	4603      	mov	r3, r0
 80010c8:	2b00      	cmp	r3, #0
 80010ca:	d001      	beq.n	80010d0 <MX_FMC_Init+0x16c>
  {
    Error_Handler( );
 80010cc:	f000 fc26 	bl	800191c <Error_Handler>
  }

  /** Perform the SDRAM1 memory initialization sequence
  */
  hsdram1.Instance = FMC_SDRAM_DEVICE;
 80010d0:	4b24      	ldr	r3, [pc, #144]	; (8001164 <MX_FMC_Init+0x200>)
 80010d2:	4a25      	ldr	r2, [pc, #148]	; (8001168 <MX_FMC_Init+0x204>)
 80010d4:	601a      	str	r2, [r3, #0]
  /* hsdram1.Init */
  hsdram1.Init.SDBank = FMC_SDRAM_BANK1;
 80010d6:	4b23      	ldr	r3, [pc, #140]	; (8001164 <MX_FMC_Init+0x200>)
 80010d8:	2200      	movs	r2, #0
 80010da:	605a      	str	r2, [r3, #4]
  hsdram1.Init.ColumnBitsNumber = FMC_SDRAM_COLUMN_BITS_NUM_9;
 80010dc:	4b21      	ldr	r3, [pc, #132]	; (8001164 <MX_FMC_Init+0x200>)
 80010de:	2201      	movs	r2, #1
 80010e0:	609a      	str	r2, [r3, #8]
  hsdram1.Init.RowBitsNumber = FMC_SDRAM_ROW_BITS_NUM_13;
 80010e2:	4b20      	ldr	r3, [pc, #128]	; (8001164 <MX_FMC_Init+0x200>)
 80010e4:	2208      	movs	r2, #8
 80010e6:	60da      	str	r2, [r3, #12]
  hsdram1.Init.MemoryDataWidth = FMC_SDRAM_MEM_BUS_WIDTH_16;
 80010e8:	4b1e      	ldr	r3, [pc, #120]	; (8001164 <MX_FMC_Init+0x200>)
 80010ea:	2210      	movs	r2, #16
 80010ec:	611a      	str	r2, [r3, #16]
  hsdram1.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 80010ee:	4b1d      	ldr	r3, [pc, #116]	; (8001164 <MX_FMC_Init+0x200>)
 80010f0:	2240      	movs	r2, #64	; 0x40
 80010f2:	615a      	str	r2, [r3, #20]
  hsdram1.Init.CASLatency = FMC_SDRAM_CAS_LATENCY_3;
 80010f4:	4b1b      	ldr	r3, [pc, #108]	; (8001164 <MX_FMC_Init+0x200>)
 80010f6:	f44f 72c0 	mov.w	r2, #384	; 0x180
 80010fa:	619a      	str	r2, [r3, #24]
  hsdram1.Init.WriteProtection = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
 80010fc:	4b19      	ldr	r3, [pc, #100]	; (8001164 <MX_FMC_Init+0x200>)
 80010fe:	2200      	movs	r2, #0
 8001100:	61da      	str	r2, [r3, #28]
  hsdram1.Init.SDClockPeriod = FMC_SDRAM_CLOCK_PERIOD_3;
 8001102:	4b18      	ldr	r3, [pc, #96]	; (8001164 <MX_FMC_Init+0x200>)
 8001104:	f44f 6240 	mov.w	r2, #3072	; 0xc00
 8001108:	621a      	str	r2, [r3, #32]
  hsdram1.Init.ReadBurst = FMC_SDRAM_RBURST_ENABLE;
 800110a:	4b16      	ldr	r3, [pc, #88]	; (8001164 <MX_FMC_Init+0x200>)
 800110c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001110:	625a      	str	r2, [r3, #36]	; 0x24
  hsdram1.Init.ReadPipeDelay = FMC_SDRAM_RPIPE_DELAY_1;
 8001112:	4b14      	ldr	r3, [pc, #80]	; (8001164 <MX_FMC_Init+0x200>)
 8001114:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001118:	629a      	str	r2, [r3, #40]	; 0x28
  /* SdramTiming */
  SdramTiming.LoadToActiveDelay = 4;
 800111a:	2304      	movs	r3, #4
 800111c:	603b      	str	r3, [r7, #0]
  SdramTiming.ExitSelfRefreshDelay = 16;
 800111e:	2310      	movs	r3, #16
 8001120:	607b      	str	r3, [r7, #4]
  SdramTiming.SelfRefreshTime = 16;
 8001122:	2310      	movs	r3, #16
 8001124:	60bb      	str	r3, [r7, #8]
  SdramTiming.RowCycleDelay = 16;
 8001126:	2310      	movs	r3, #16
 8001128:	60fb      	str	r3, [r7, #12]
  SdramTiming.WriteRecoveryTime = 16;
 800112a:	2310      	movs	r3, #16
 800112c:	613b      	str	r3, [r7, #16]
  SdramTiming.RPDelay = 16;
 800112e:	2310      	movs	r3, #16
 8001130:	617b      	str	r3, [r7, #20]
  SdramTiming.RCDDelay = 16;
 8001132:	2310      	movs	r3, #16
 8001134:	61bb      	str	r3, [r7, #24]

  if (HAL_SDRAM_Init(&hsdram1, &SdramTiming) != HAL_OK)
 8001136:	463b      	mov	r3, r7
 8001138:	4619      	mov	r1, r3
 800113a:	480a      	ldr	r0, [pc, #40]	; (8001164 <MX_FMC_Init+0x200>)
 800113c:	f00a fb60 	bl	800b800 <HAL_SDRAM_Init>
 8001140:	4603      	mov	r3, r0
 8001142:	2b00      	cmp	r3, #0
 8001144:	d001      	beq.n	800114a <MX_FMC_Init+0x1e6>
  {
    Error_Handler( );
 8001146:	f000 fbe9 	bl	800191c <Error_Handler>
  }

  /* USER CODE BEGIN FMC_Init 2 */

  /* USER CODE END FMC_Init 2 */
}
 800114a:	bf00      	nop
 800114c:	3738      	adds	r7, #56	; 0x38
 800114e:	46bd      	mov	sp, r7
 8001150:	bd80      	pop	{r7, pc}
 8001152:	bf00      	nop
 8001154:	240005ec 	.word	0x240005ec
 8001158:	52004000 	.word	0x52004000
 800115c:	52004104 	.word	0x52004104
 8001160:	24000638 	.word	0x24000638
 8001164:	24000684 	.word	0x24000684
 8001168:	52004140 	.word	0x52004140

0800116c <HAL_FMC_MspInit>:

static uint32_t FMC_Initialized = 0;

static void HAL_FMC_MspInit(void){
 800116c:	b580      	push	{r7, lr}
 800116e:	b086      	sub	sp, #24
 8001170:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FMC_MspInit 0 */

  /* USER CODE END FMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001172:	1d3b      	adds	r3, r7, #4
 8001174:	2200      	movs	r2, #0
 8001176:	601a      	str	r2, [r3, #0]
 8001178:	605a      	str	r2, [r3, #4]
 800117a:	609a      	str	r2, [r3, #8]
 800117c:	60da      	str	r2, [r3, #12]
 800117e:	611a      	str	r2, [r3, #16]
  if (FMC_Initialized) {
 8001180:	4b43      	ldr	r3, [pc, #268]	; (8001290 <HAL_FMC_MspInit+0x124>)
 8001182:	681b      	ldr	r3, [r3, #0]
 8001184:	2b00      	cmp	r3, #0
 8001186:	d17f      	bne.n	8001288 <HAL_FMC_MspInit+0x11c>
    return;
  }
  FMC_Initialized = 1;
 8001188:	4b41      	ldr	r3, [pc, #260]	; (8001290 <HAL_FMC_MspInit+0x124>)
 800118a:	2201      	movs	r2, #1
 800118c:	601a      	str	r2, [r3, #0]

  /* Peripheral clock enable */
  __HAL_RCC_FMC_CLK_ENABLE();
 800118e:	4b41      	ldr	r3, [pc, #260]	; (8001294 <HAL_FMC_MspInit+0x128>)
 8001190:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 8001194:	4a3f      	ldr	r2, [pc, #252]	; (8001294 <HAL_FMC_MspInit+0x128>)
 8001196:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800119a:	f8c2 30d4 	str.w	r3, [r2, #212]	; 0xd4
 800119e:	4b3d      	ldr	r3, [pc, #244]	; (8001294 <HAL_FMC_MspInit+0x128>)
 80011a0:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 80011a4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80011a8:	603b      	str	r3, [r7, #0]
 80011aa:	683b      	ldr	r3, [r7, #0]
  PG15   ------> FMC_SDNCAS
  PE0   ------> FMC_NBL0
  PE1   ------> FMC_NBL1
  */
  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 80011ac:	f64f 033f 	movw	r3, #63551	; 0xf83f
 80011b0:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_11|GPIO_PIN_12
                          |GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011b2:	2302      	movs	r3, #2
 80011b4:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011b6:	2300      	movs	r3, #0
 80011b8:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80011ba:	2303      	movs	r3, #3
 80011bc:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80011be:	230c      	movs	r3, #12
 80011c0:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80011c2:	1d3b      	adds	r3, r7, #4
 80011c4:	4619      	mov	r1, r3
 80011c6:	4834      	ldr	r0, [pc, #208]	; (8001298 <HAL_FMC_MspInit+0x12c>)
 80011c8:	f003 fbbc 	bl	8004944 <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = GPIO_PIN_7;
 80011cc:	2380      	movs	r3, #128	; 0x80
 80011ce:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011d0:	2302      	movs	r3, #2
 80011d2:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011d4:	2300      	movs	r3, #0
 80011d6:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80011d8:	2303      	movs	r3, #3
 80011da:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80011dc:	230c      	movs	r3, #12
 80011de:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80011e0:	1d3b      	adds	r3, r7, #4
 80011e2:	4619      	mov	r1, r3
 80011e4:	482d      	ldr	r0, [pc, #180]	; (800129c <HAL_FMC_MspInit+0x130>)
 80011e6:	f003 fbad 	bl	8004944 <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 80011ea:	2330      	movs	r3, #48	; 0x30
 80011ec:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011ee:	2302      	movs	r3, #2
 80011f0:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011f2:	2300      	movs	r3, #0
 80011f4:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80011f6:	2303      	movs	r3, #3
 80011f8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80011fa:	230c      	movs	r3, #12
 80011fc:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80011fe:	1d3b      	adds	r3, r7, #4
 8001200:	4619      	mov	r1, r3
 8001202:	4827      	ldr	r0, [pc, #156]	; (80012a0 <HAL_FMC_MspInit+0x134>)
 8001204:	f003 fb9e 	bl	8004944 <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_4
 8001208:	f248 5337 	movw	r3, #34103	; 0x8537
 800120c:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_5|GPIO_PIN_8|GPIO_PIN_10|GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800120e:	2302      	movs	r3, #2
 8001210:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001212:	2300      	movs	r3, #0
 8001214:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001216:	2303      	movs	r3, #3
 8001218:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 800121a:	230c      	movs	r3, #12
 800121c:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800121e:	1d3b      	adds	r3, r7, #4
 8001220:	4619      	mov	r1, r3
 8001222:	4820      	ldr	r0, [pc, #128]	; (80012a4 <HAL_FMC_MspInit+0x138>)
 8001224:	f003 fb8e 	bl	8004944 <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10
 8001228:	f64f 7383 	movw	r3, #65411	; 0xff83
 800122c:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14
                          |GPIO_PIN_15|GPIO_PIN_0|GPIO_PIN_1;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800122e:	2302      	movs	r3, #2
 8001230:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001232:	2300      	movs	r3, #0
 8001234:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001236:	2303      	movs	r3, #3
 8001238:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 800123a:	230c      	movs	r3, #12
 800123c:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800123e:	1d3b      	adds	r3, r7, #4
 8001240:	4619      	mov	r1, r3
 8001242:	4819      	ldr	r0, [pc, #100]	; (80012a8 <HAL_FMC_MspInit+0x13c>)
 8001244:	f003 fb7e 	bl	8004944 <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_14
 8001248:	f24c 7333 	movw	r3, #50995	; 0xc733
 800124c:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_15|GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_4
                          |GPIO_PIN_5;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800124e:	2302      	movs	r3, #2
 8001250:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001252:	2300      	movs	r3, #0
 8001254:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001256:	2303      	movs	r3, #3
 8001258:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 800125a:	230c      	movs	r3, #12
 800125c:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800125e:	1d3b      	adds	r3, r7, #4
 8001260:	4619      	mov	r1, r3
 8001262:	4812      	ldr	r0, [pc, #72]	; (80012ac <HAL_FMC_MspInit+0x140>)
 8001264:	f003 fb6e 	bl	8004944 <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = GPIO_PIN_7;
 8001268:	2380      	movs	r3, #128	; 0x80
 800126a:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800126c:	2302      	movs	r3, #2
 800126e:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001270:	2300      	movs	r3, #0
 8001272:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001274:	2303      	movs	r3, #3
 8001276:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF9_FMC;
 8001278:	2309      	movs	r3, #9
 800127a:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800127c:	1d3b      	adds	r3, r7, #4
 800127e:	4619      	mov	r1, r3
 8001280:	4807      	ldr	r0, [pc, #28]	; (80012a0 <HAL_FMC_MspInit+0x134>)
 8001282:	f003 fb5f 	bl	8004944 <HAL_GPIO_Init>
 8001286:	e000      	b.n	800128a <HAL_FMC_MspInit+0x11e>
    return;
 8001288:	bf00      	nop

  /* USER CODE BEGIN FMC_MspInit 1 */

  /* USER CODE END FMC_MspInit 1 */
}
 800128a:	3718      	adds	r7, #24
 800128c:	46bd      	mov	sp, r7
 800128e:	bd80      	pop	{r7, pc}
 8001290:	24000350 	.word	0x24000350
 8001294:	58024400 	.word	0x58024400
 8001298:	58021400 	.word	0x58021400
 800129c:	58020000 	.word	0x58020000
 80012a0:	58020800 	.word	0x58020800
 80012a4:	58021800 	.word	0x58021800
 80012a8:	58021000 	.word	0x58021000
 80012ac:	58020c00 	.word	0x58020c00

080012b0 <HAL_SRAM_MspInit>:

void HAL_SRAM_MspInit(SRAM_HandleTypeDef* sramHandle){
 80012b0:	b580      	push	{r7, lr}
 80012b2:	b082      	sub	sp, #8
 80012b4:	af00      	add	r7, sp, #0
 80012b6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SRAM_MspInit 0 */

  /* USER CODE END SRAM_MspInit 0 */
  HAL_FMC_MspInit();
 80012b8:	f7ff ff58 	bl	800116c <HAL_FMC_MspInit>
  /* USER CODE BEGIN SRAM_MspInit 1 */

  /* USER CODE END SRAM_MspInit 1 */
}
 80012bc:	bf00      	nop
 80012be:	3708      	adds	r7, #8
 80012c0:	46bd      	mov	sp, r7
 80012c2:	bd80      	pop	{r7, pc}

080012c4 <HAL_SDRAM_MspInit>:

void HAL_SDRAM_MspInit(SDRAM_HandleTypeDef* sdramHandle){
 80012c4:	b580      	push	{r7, lr}
 80012c6:	b082      	sub	sp, #8
 80012c8:	af00      	add	r7, sp, #0
 80012ca:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SDRAM_MspInit 0 */

  /* USER CODE END SDRAM_MspInit 0 */
  HAL_FMC_MspInit();
 80012cc:	f7ff ff4e 	bl	800116c <HAL_FMC_MspInit>
  /* USER CODE BEGIN SDRAM_MspInit 1 */

  /* USER CODE END SDRAM_MspInit 1 */
}
 80012d0:	bf00      	nop
 80012d2:	3708      	adds	r7, #8
 80012d4:	46bd      	mov	sp, r7
 80012d6:	bd80      	pop	{r7, pc}

080012d8 <MX_GPIO_Init>:
/** Configure pins
     PH0-OSC_IN (PH0)   ------> RCC_OSC_IN
     PH1-OSC_OUT (PH1)   ------> RCC_OSC_OUT
*/
void MX_GPIO_Init(void)
{
 80012d8:	b580      	push	{r7, lr}
 80012da:	b08e      	sub	sp, #56	; 0x38
 80012dc:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012de:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80012e2:	2200      	movs	r2, #0
 80012e4:	601a      	str	r2, [r3, #0]
 80012e6:	605a      	str	r2, [r3, #4]
 80012e8:	609a      	str	r2, [r3, #8]
 80012ea:	60da      	str	r2, [r3, #12]
 80012ec:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80012ee:	4b69      	ldr	r3, [pc, #420]	; (8001494 <MX_GPIO_Init+0x1bc>)
 80012f0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80012f4:	4a67      	ldr	r2, [pc, #412]	; (8001494 <MX_GPIO_Init+0x1bc>)
 80012f6:	f043 0310 	orr.w	r3, r3, #16
 80012fa:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80012fe:	4b65      	ldr	r3, [pc, #404]	; (8001494 <MX_GPIO_Init+0x1bc>)
 8001300:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001304:	f003 0310 	and.w	r3, r3, #16
 8001308:	623b      	str	r3, [r7, #32]
 800130a:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800130c:	4b61      	ldr	r3, [pc, #388]	; (8001494 <MX_GPIO_Init+0x1bc>)
 800130e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001312:	4a60      	ldr	r2, [pc, #384]	; (8001494 <MX_GPIO_Init+0x1bc>)
 8001314:	f043 0320 	orr.w	r3, r3, #32
 8001318:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800131c:	4b5d      	ldr	r3, [pc, #372]	; (8001494 <MX_GPIO_Init+0x1bc>)
 800131e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001322:	f003 0320 	and.w	r3, r3, #32
 8001326:	61fb      	str	r3, [r7, #28]
 8001328:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800132a:	4b5a      	ldr	r3, [pc, #360]	; (8001494 <MX_GPIO_Init+0x1bc>)
 800132c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001330:	4a58      	ldr	r2, [pc, #352]	; (8001494 <MX_GPIO_Init+0x1bc>)
 8001332:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001336:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800133a:	4b56      	ldr	r3, [pc, #344]	; (8001494 <MX_GPIO_Init+0x1bc>)
 800133c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001340:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001344:	61bb      	str	r3, [r7, #24]
 8001346:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001348:	4b52      	ldr	r3, [pc, #328]	; (8001494 <MX_GPIO_Init+0x1bc>)
 800134a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800134e:	4a51      	ldr	r2, [pc, #324]	; (8001494 <MX_GPIO_Init+0x1bc>)
 8001350:	f043 0304 	orr.w	r3, r3, #4
 8001354:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001358:	4b4e      	ldr	r3, [pc, #312]	; (8001494 <MX_GPIO_Init+0x1bc>)
 800135a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800135e:	f003 0304 	and.w	r3, r3, #4
 8001362:	617b      	str	r3, [r7, #20]
 8001364:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001366:	4b4b      	ldr	r3, [pc, #300]	; (8001494 <MX_GPIO_Init+0x1bc>)
 8001368:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800136c:	4a49      	ldr	r2, [pc, #292]	; (8001494 <MX_GPIO_Init+0x1bc>)
 800136e:	f043 0301 	orr.w	r3, r3, #1
 8001372:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001376:	4b47      	ldr	r3, [pc, #284]	; (8001494 <MX_GPIO_Init+0x1bc>)
 8001378:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800137c:	f003 0301 	and.w	r3, r3, #1
 8001380:	613b      	str	r3, [r7, #16]
 8001382:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001384:	4b43      	ldr	r3, [pc, #268]	; (8001494 <MX_GPIO_Init+0x1bc>)
 8001386:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800138a:	4a42      	ldr	r2, [pc, #264]	; (8001494 <MX_GPIO_Init+0x1bc>)
 800138c:	f043 0302 	orr.w	r3, r3, #2
 8001390:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001394:	4b3f      	ldr	r3, [pc, #252]	; (8001494 <MX_GPIO_Init+0x1bc>)
 8001396:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800139a:	f003 0302 	and.w	r3, r3, #2
 800139e:	60fb      	str	r3, [r7, #12]
 80013a0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80013a2:	4b3c      	ldr	r3, [pc, #240]	; (8001494 <MX_GPIO_Init+0x1bc>)
 80013a4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80013a8:	4a3a      	ldr	r2, [pc, #232]	; (8001494 <MX_GPIO_Init+0x1bc>)
 80013aa:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80013ae:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80013b2:	4b38      	ldr	r3, [pc, #224]	; (8001494 <MX_GPIO_Init+0x1bc>)
 80013b4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80013b8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80013bc:	60bb      	str	r3, [r7, #8]
 80013be:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80013c0:	4b34      	ldr	r3, [pc, #208]	; (8001494 <MX_GPIO_Init+0x1bc>)
 80013c2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80013c6:	4a33      	ldr	r2, [pc, #204]	; (8001494 <MX_GPIO_Init+0x1bc>)
 80013c8:	f043 0308 	orr.w	r3, r3, #8
 80013cc:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80013d0:	4b30      	ldr	r3, [pc, #192]	; (8001494 <MX_GPIO_Init+0x1bc>)
 80013d2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80013d6:	f003 0308 	and.w	r3, r3, #8
 80013da:	607b      	str	r3, [r7, #4]
 80013dc:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(MotionnCs_GPIO_Port, MotionnCs_Pin, GPIO_PIN_SET);
 80013de:	2201      	movs	r2, #1
 80013e0:	2104      	movs	r1, #4
 80013e2:	482d      	ldr	r0, [pc, #180]	; (8001498 <MX_GPIO_Init+0x1c0>)
 80013e4:	f003 fc76 	bl	8004cd4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPI4_nCS_GPIO_Port, SPI4_nCS_Pin, GPIO_PIN_SET);
 80013e8:	2201      	movs	r2, #1
 80013ea:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80013ee:	482b      	ldr	r0, [pc, #172]	; (800149c <MX_GPIO_Init+0x1c4>)
 80013f0:	f003 fc70 	bl	8004cd4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPI6_nCS_GPIO_Port, SPI6_nCS_Pin, GPIO_PIN_SET);
 80013f4:	2201      	movs	r2, #1
 80013f6:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80013fa:	4829      	ldr	r0, [pc, #164]	; (80014a0 <MX_GPIO_Init+0x1c8>)
 80013fc:	f003 fc6a 	bl	8004cd4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = MotionnCs_Pin;
 8001400:	2304      	movs	r3, #4
 8001402:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001404:	2301      	movs	r3, #1
 8001406:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001408:	2300      	movs	r3, #0
 800140a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800140c:	2300      	movs	r3, #0
 800140e:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(MotionnCs_GPIO_Port, &GPIO_InitStruct);
 8001410:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001414:	4619      	mov	r1, r3
 8001416:	4820      	ldr	r0, [pc, #128]	; (8001498 <MX_GPIO_Init+0x1c0>)
 8001418:	f003 fa94 	bl	8004944 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = SPI4_nCS_Pin;
 800141c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001420:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001422:	2301      	movs	r3, #1
 8001424:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001426:	2300      	movs	r3, #0
 8001428:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800142a:	2300      	movs	r3, #0
 800142c:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(SPI4_nCS_GPIO_Port, &GPIO_InitStruct);
 800142e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001432:	4619      	mov	r1, r3
 8001434:	4819      	ldr	r0, [pc, #100]	; (800149c <MX_GPIO_Init+0x1c4>)
 8001436:	f003 fa85 	bl	8004944 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = SDCardnDet_Pin;
 800143a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800143e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001440:	2300      	movs	r3, #0
 8001442:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001444:	2300      	movs	r3, #0
 8001446:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(SDCardnDet_GPIO_Port, &GPIO_InitStruct);
 8001448:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800144c:	4619      	mov	r1, r3
 800144e:	4815      	ldr	r0, [pc, #84]	; (80014a4 <MX_GPIO_Init+0x1cc>)
 8001450:	f003 fa78 	bl	8004944 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = TOUCH_IRQ_Pin;
 8001454:	2308      	movs	r3, #8
 8001456:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001458:	4b13      	ldr	r3, [pc, #76]	; (80014a8 <MX_GPIO_Init+0x1d0>)
 800145a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800145c:	2300      	movs	r3, #0
 800145e:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(TOUCH_IRQ_GPIO_Port, &GPIO_InitStruct);
 8001460:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001464:	4619      	mov	r1, r3
 8001466:	480d      	ldr	r0, [pc, #52]	; (800149c <MX_GPIO_Init+0x1c4>)
 8001468:	f003 fa6c 	bl	8004944 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = SPI6_nCS_Pin;
 800146c:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001470:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001472:	2301      	movs	r3, #1
 8001474:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001476:	2300      	movs	r3, #0
 8001478:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800147a:	2300      	movs	r3, #0
 800147c:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(SPI6_nCS_GPIO_Port, &GPIO_InitStruct);
 800147e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001482:	4619      	mov	r1, r3
 8001484:	4806      	ldr	r0, [pc, #24]	; (80014a0 <MX_GPIO_Init+0x1c8>)
 8001486:	f003 fa5d 	bl	8004944 <HAL_GPIO_Init>

}
 800148a:	bf00      	nop
 800148c:	3738      	adds	r7, #56	; 0x38
 800148e:	46bd      	mov	sp, r7
 8001490:	bd80      	pop	{r7, pc}
 8001492:	bf00      	nop
 8001494:	58024400 	.word	0x58024400
 8001498:	58020400 	.word	0x58020400
 800149c:	58020c00 	.word	0x58020c00
 80014a0:	58021800 	.word	0x58021800
 80014a4:	58020000 	.word	0x58020000
 80014a8:	11210000 	.word	0x11210000

080014ac <MX_I2C2_Init>:

I2C_HandleTypeDef hi2c2;

/* I2C2 init function */
void MX_I2C2_Init(void)
{
 80014ac:	b580      	push	{r7, lr}
 80014ae:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 80014b0:	4b1b      	ldr	r3, [pc, #108]	; (8001520 <MX_I2C2_Init+0x74>)
 80014b2:	4a1c      	ldr	r2, [pc, #112]	; (8001524 <MX_I2C2_Init+0x78>)
 80014b4:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x00B03FDB;
 80014b6:	4b1a      	ldr	r3, [pc, #104]	; (8001520 <MX_I2C2_Init+0x74>)
 80014b8:	4a1b      	ldr	r2, [pc, #108]	; (8001528 <MX_I2C2_Init+0x7c>)
 80014ba:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 80014bc:	4b18      	ldr	r3, [pc, #96]	; (8001520 <MX_I2C2_Init+0x74>)
 80014be:	2200      	movs	r2, #0
 80014c0:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80014c2:	4b17      	ldr	r3, [pc, #92]	; (8001520 <MX_I2C2_Init+0x74>)
 80014c4:	2201      	movs	r2, #1
 80014c6:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80014c8:	4b15      	ldr	r3, [pc, #84]	; (8001520 <MX_I2C2_Init+0x74>)
 80014ca:	2200      	movs	r2, #0
 80014cc:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 80014ce:	4b14      	ldr	r3, [pc, #80]	; (8001520 <MX_I2C2_Init+0x74>)
 80014d0:	2200      	movs	r2, #0
 80014d2:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80014d4:	4b12      	ldr	r3, [pc, #72]	; (8001520 <MX_I2C2_Init+0x74>)
 80014d6:	2200      	movs	r2, #0
 80014d8:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80014da:	4b11      	ldr	r3, [pc, #68]	; (8001520 <MX_I2C2_Init+0x74>)
 80014dc:	2200      	movs	r2, #0
 80014de:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80014e0:	4b0f      	ldr	r3, [pc, #60]	; (8001520 <MX_I2C2_Init+0x74>)
 80014e2:	2200      	movs	r2, #0
 80014e4:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 80014e6:	480e      	ldr	r0, [pc, #56]	; (8001520 <MX_I2C2_Init+0x74>)
 80014e8:	f003 fc0e 	bl	8004d08 <HAL_I2C_Init>
 80014ec:	4603      	mov	r3, r0
 80014ee:	2b00      	cmp	r3, #0
 80014f0:	d001      	beq.n	80014f6 <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 80014f2:	f000 fa13 	bl	800191c <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80014f6:	2100      	movs	r1, #0
 80014f8:	4809      	ldr	r0, [pc, #36]	; (8001520 <MX_I2C2_Init+0x74>)
 80014fa:	f004 f85f 	bl	80055bc <HAL_I2CEx_ConfigAnalogFilter>
 80014fe:	4603      	mov	r3, r0
 8001500:	2b00      	cmp	r3, #0
 8001502:	d001      	beq.n	8001508 <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 8001504:	f000 fa0a 	bl	800191c <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 8001508:	2100      	movs	r1, #0
 800150a:	4805      	ldr	r0, [pc, #20]	; (8001520 <MX_I2C2_Init+0x74>)
 800150c:	f004 f8a1 	bl	8005652 <HAL_I2CEx_ConfigDigitalFilter>
 8001510:	4603      	mov	r3, r0
 8001512:	2b00      	cmp	r3, #0
 8001514:	d001      	beq.n	800151a <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 8001516:	f000 fa01 	bl	800191c <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 800151a:	bf00      	nop
 800151c:	bd80      	pop	{r7, pc}
 800151e:	bf00      	nop
 8001520:	240006b8 	.word	0x240006b8
 8001524:	40005800 	.word	0x40005800
 8001528:	00b03fdb 	.word	0x00b03fdb

0800152c <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 800152c:	b580      	push	{r7, lr}
 800152e:	b0b8      	sub	sp, #224	; 0xe0
 8001530:	af00      	add	r7, sp, #0
 8001532:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001534:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8001538:	2200      	movs	r2, #0
 800153a:	601a      	str	r2, [r3, #0]
 800153c:	605a      	str	r2, [r3, #4]
 800153e:	609a      	str	r2, [r3, #8]
 8001540:	60da      	str	r2, [r3, #12]
 8001542:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001544:	f107 0310 	add.w	r3, r7, #16
 8001548:	22bc      	movs	r2, #188	; 0xbc
 800154a:	2100      	movs	r1, #0
 800154c:	4618      	mov	r0, r3
 800154e:	f012 fa1d 	bl	801398c <memset>
  if(i2cHandle->Instance==I2C2)
 8001552:	687b      	ldr	r3, [r7, #4]
 8001554:	681b      	ldr	r3, [r3, #0]
 8001556:	4a25      	ldr	r2, [pc, #148]	; (80015ec <HAL_I2C_MspInit+0xc0>)
 8001558:	4293      	cmp	r3, r2
 800155a:	d142      	bne.n	80015e2 <HAL_I2C_MspInit+0xb6>
  /* USER CODE BEGIN I2C2_MspInit 0 */

  /* USER CODE END I2C2_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 800155c:	2308      	movs	r3, #8
 800155e:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.I2c123ClockSelection = RCC_I2C123CLKSOURCE_D2PCLK1;
 8001560:	2300      	movs	r3, #0
 8001562:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001566:	f107 0310 	add.w	r3, r7, #16
 800156a:	4618      	mov	r0, r3
 800156c:	f006 fb88 	bl	8007c80 <HAL_RCCEx_PeriphCLKConfig>
 8001570:	4603      	mov	r3, r0
 8001572:	2b00      	cmp	r3, #0
 8001574:	d001      	beq.n	800157a <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 8001576:	f000 f9d1 	bl	800191c <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800157a:	4b1d      	ldr	r3, [pc, #116]	; (80015f0 <HAL_I2C_MspInit+0xc4>)
 800157c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001580:	4a1b      	ldr	r2, [pc, #108]	; (80015f0 <HAL_I2C_MspInit+0xc4>)
 8001582:	f043 0302 	orr.w	r3, r3, #2
 8001586:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800158a:	4b19      	ldr	r3, [pc, #100]	; (80015f0 <HAL_I2C_MspInit+0xc4>)
 800158c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001590:	f003 0302 	and.w	r3, r3, #2
 8001594:	60fb      	str	r3, [r7, #12]
 8001596:	68fb      	ldr	r3, [r7, #12]
    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8001598:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 800159c:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80015a0:	2312      	movs	r3, #18
 80015a2:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80015a6:	2301      	movs	r3, #1
 80015a8:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015ac:	2300      	movs	r3, #0
 80015ae:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 80015b2:	2304      	movs	r3, #4
 80015b4:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80015b8:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 80015bc:	4619      	mov	r1, r3
 80015be:	480d      	ldr	r0, [pc, #52]	; (80015f4 <HAL_I2C_MspInit+0xc8>)
 80015c0:	f003 f9c0 	bl	8004944 <HAL_GPIO_Init>

    /* I2C2 clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 80015c4:	4b0a      	ldr	r3, [pc, #40]	; (80015f0 <HAL_I2C_MspInit+0xc4>)
 80015c6:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80015ca:	4a09      	ldr	r2, [pc, #36]	; (80015f0 <HAL_I2C_MspInit+0xc4>)
 80015cc:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80015d0:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 80015d4:	4b06      	ldr	r3, [pc, #24]	; (80015f0 <HAL_I2C_MspInit+0xc4>)
 80015d6:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80015da:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80015de:	60bb      	str	r3, [r7, #8]
 80015e0:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }
}
 80015e2:	bf00      	nop
 80015e4:	37e0      	adds	r7, #224	; 0xe0
 80015e6:	46bd      	mov	sp, r7
 80015e8:	bd80      	pop	{r7, pc}
 80015ea:	bf00      	nop
 80015ec:	40005800 	.word	0x40005800
 80015f0:	58024400 	.word	0x58024400
 80015f4:	58020400 	.word	0x58020400

080015f8 <MX_I2S2_Init>:

I2S_HandleTypeDef hi2s2;

/* I2S2 init function */
void MX_I2S2_Init(void)
{
 80015f8:	b580      	push	{r7, lr}
 80015fa:	af00      	add	r7, sp, #0
  /* USER CODE END I2S2_Init 0 */

  /* USER CODE BEGIN I2S2_Init 1 */

  /* USER CODE END I2S2_Init 1 */
  hi2s2.Instance = SPI2;
 80015fc:	4b15      	ldr	r3, [pc, #84]	; (8001654 <MX_I2S2_Init+0x5c>)
 80015fe:	4a16      	ldr	r2, [pc, #88]	; (8001658 <MX_I2S2_Init+0x60>)
 8001600:	601a      	str	r2, [r3, #0]
  hi2s2.Init.Mode = I2S_MODE_MASTER_FULLDUPLEX;
 8001602:	4b14      	ldr	r3, [pc, #80]	; (8001654 <MX_I2S2_Init+0x5c>)
 8001604:	220a      	movs	r2, #10
 8001606:	605a      	str	r2, [r3, #4]
  hi2s2.Init.Standard = I2S_STANDARD_PHILIPS;
 8001608:	4b12      	ldr	r3, [pc, #72]	; (8001654 <MX_I2S2_Init+0x5c>)
 800160a:	2200      	movs	r2, #0
 800160c:	609a      	str	r2, [r3, #8]
  hi2s2.Init.DataFormat = I2S_DATAFORMAT_16B;
 800160e:	4b11      	ldr	r3, [pc, #68]	; (8001654 <MX_I2S2_Init+0x5c>)
 8001610:	2200      	movs	r2, #0
 8001612:	60da      	str	r2, [r3, #12]
  hi2s2.Init.MCLKOutput = I2S_MCLKOUTPUT_DISABLE;
 8001614:	4b0f      	ldr	r3, [pc, #60]	; (8001654 <MX_I2S2_Init+0x5c>)
 8001616:	2200      	movs	r2, #0
 8001618:	611a      	str	r2, [r3, #16]
  hi2s2.Init.AudioFreq = I2S_AUDIOFREQ_48K;
 800161a:	4b0e      	ldr	r3, [pc, #56]	; (8001654 <MX_I2S2_Init+0x5c>)
 800161c:	f64b 3280 	movw	r2, #48000	; 0xbb80
 8001620:	615a      	str	r2, [r3, #20]
  hi2s2.Init.CPOL = I2S_CPOL_LOW;
 8001622:	4b0c      	ldr	r3, [pc, #48]	; (8001654 <MX_I2S2_Init+0x5c>)
 8001624:	2200      	movs	r2, #0
 8001626:	619a      	str	r2, [r3, #24]
  hi2s2.Init.FirstBit = I2S_FIRSTBIT_MSB;
 8001628:	4b0a      	ldr	r3, [pc, #40]	; (8001654 <MX_I2S2_Init+0x5c>)
 800162a:	2200      	movs	r2, #0
 800162c:	61da      	str	r2, [r3, #28]
  hi2s2.Init.WSInversion = I2S_WS_INVERSION_DISABLE;
 800162e:	4b09      	ldr	r3, [pc, #36]	; (8001654 <MX_I2S2_Init+0x5c>)
 8001630:	2200      	movs	r2, #0
 8001632:	621a      	str	r2, [r3, #32]
  hi2s2.Init.Data24BitAlignment = I2S_DATA_24BIT_ALIGNMENT_RIGHT;
 8001634:	4b07      	ldr	r3, [pc, #28]	; (8001654 <MX_I2S2_Init+0x5c>)
 8001636:	2200      	movs	r2, #0
 8001638:	625a      	str	r2, [r3, #36]	; 0x24
  hi2s2.Init.MasterKeepIOState = I2S_MASTER_KEEP_IO_STATE_DISABLE;
 800163a:	4b06      	ldr	r3, [pc, #24]	; (8001654 <MX_I2S2_Init+0x5c>)
 800163c:	2200      	movs	r2, #0
 800163e:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_I2S_Init(&hi2s2) != HAL_OK)
 8001640:	4804      	ldr	r0, [pc, #16]	; (8001654 <MX_I2S2_Init+0x5c>)
 8001642:	f004 f853 	bl	80056ec <HAL_I2S_Init>
 8001646:	4603      	mov	r3, r0
 8001648:	2b00      	cmp	r3, #0
 800164a:	d001      	beq.n	8001650 <MX_I2S2_Init+0x58>
  {
    Error_Handler();
 800164c:	f000 f966 	bl	800191c <Error_Handler>
  }
  /* USER CODE BEGIN I2S2_Init 2 */

  /* USER CODE END I2S2_Init 2 */

}
 8001650:	bf00      	nop
 8001652:	bd80      	pop	{r7, pc}
 8001654:	24000704 	.word	0x24000704
 8001658:	40003800 	.word	0x40003800

0800165c <HAL_I2S_MspInit>:

void HAL_I2S_MspInit(I2S_HandleTypeDef* i2sHandle)
{
 800165c:	b580      	push	{r7, lr}
 800165e:	b0ba      	sub	sp, #232	; 0xe8
 8001660:	af00      	add	r7, sp, #0
 8001662:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001664:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8001668:	2200      	movs	r2, #0
 800166a:	601a      	str	r2, [r3, #0]
 800166c:	605a      	str	r2, [r3, #4]
 800166e:	609a      	str	r2, [r3, #8]
 8001670:	60da      	str	r2, [r3, #12]
 8001672:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001674:	f107 0318 	add.w	r3, r7, #24
 8001678:	22bc      	movs	r2, #188	; 0xbc
 800167a:	2100      	movs	r1, #0
 800167c:	4618      	mov	r0, r3
 800167e:	f012 f985 	bl	801398c <memset>
  if(i2sHandle->Instance==SPI2)
 8001682:	687b      	ldr	r3, [r7, #4]
 8001684:	681b      	ldr	r3, [r3, #0]
 8001686:	4a41      	ldr	r2, [pc, #260]	; (800178c <HAL_I2S_MspInit+0x130>)
 8001688:	4293      	cmp	r3, r2
 800168a:	d17b      	bne.n	8001784 <HAL_I2S_MspInit+0x128>
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI2;
 800168c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001690:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_PLL;
 8001692:	2300      	movs	r3, #0
 8001694:	677b      	str	r3, [r7, #116]	; 0x74
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001696:	f107 0318 	add.w	r3, r7, #24
 800169a:	4618      	mov	r0, r3
 800169c:	f006 faf0 	bl	8007c80 <HAL_RCCEx_PeriphCLKConfig>
 80016a0:	4603      	mov	r3, r0
 80016a2:	2b00      	cmp	r3, #0
 80016a4:	d001      	beq.n	80016aa <HAL_I2S_MspInit+0x4e>
    {
      Error_Handler();
 80016a6:	f000 f939 	bl	800191c <Error_Handler>
    }

    /* I2S2 clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 80016aa:	4b39      	ldr	r3, [pc, #228]	; (8001790 <HAL_I2S_MspInit+0x134>)
 80016ac:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80016b0:	4a37      	ldr	r2, [pc, #220]	; (8001790 <HAL_I2S_MspInit+0x134>)
 80016b2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80016b6:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 80016ba:	4b35      	ldr	r3, [pc, #212]	; (8001790 <HAL_I2S_MspInit+0x134>)
 80016bc:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80016c0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80016c4:	617b      	str	r3, [r7, #20]
 80016c6:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80016c8:	4b31      	ldr	r3, [pc, #196]	; (8001790 <HAL_I2S_MspInit+0x134>)
 80016ca:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80016ce:	4a30      	ldr	r2, [pc, #192]	; (8001790 <HAL_I2S_MspInit+0x134>)
 80016d0:	f043 0304 	orr.w	r3, r3, #4
 80016d4:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80016d8:	4b2d      	ldr	r3, [pc, #180]	; (8001790 <HAL_I2S_MspInit+0x134>)
 80016da:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80016de:	f003 0304 	and.w	r3, r3, #4
 80016e2:	613b      	str	r3, [r7, #16]
 80016e4:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80016e6:	4b2a      	ldr	r3, [pc, #168]	; (8001790 <HAL_I2S_MspInit+0x134>)
 80016e8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80016ec:	4a28      	ldr	r2, [pc, #160]	; (8001790 <HAL_I2S_MspInit+0x134>)
 80016ee:	f043 0302 	orr.w	r3, r3, #2
 80016f2:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80016f6:	4b26      	ldr	r3, [pc, #152]	; (8001790 <HAL_I2S_MspInit+0x134>)
 80016f8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80016fc:	f003 0302 	and.w	r3, r3, #2
 8001700:	60fb      	str	r3, [r7, #12]
 8001702:	68fb      	ldr	r3, [r7, #12]
    PC2_C     ------> I2S2_SDI
    PC3_C     ------> I2S2_SDO
    PB12     ------> I2S2_WS
    PB13     ------> I2S2_CK
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8001704:	2304      	movs	r3, #4
 8001706:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800170a:	2302      	movs	r3, #2
 800170c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001710:	2300      	movs	r3, #0
 8001712:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001716:	2300      	movs	r3, #0
 8001718:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800171c:	2305      	movs	r3, #5
 800171e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001722:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8001726:	4619      	mov	r1, r3
 8001728:	481a      	ldr	r0, [pc, #104]	; (8001794 <HAL_I2S_MspInit+0x138>)
 800172a:	f003 f90b 	bl	8004944 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 800172e:	2308      	movs	r3, #8
 8001730:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001734:	2302      	movs	r3, #2
 8001736:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800173a:	2300      	movs	r3, #0
 800173c:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001740:	2303      	movs	r3, #3
 8001742:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001746:	2305      	movs	r3, #5
 8001748:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800174c:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8001750:	4619      	mov	r1, r3
 8001752:	4810      	ldr	r0, [pc, #64]	; (8001794 <HAL_I2S_MspInit+0x138>)
 8001754:	f003 f8f6 	bl	8004944 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13;
 8001758:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 800175c:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001760:	2302      	movs	r3, #2
 8001762:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001766:	2300      	movs	r3, #0
 8001768:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800176c:	2300      	movs	r3, #0
 800176e:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001772:	2305      	movs	r3, #5
 8001774:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001778:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 800177c:	4619      	mov	r1, r3
 800177e:	4806      	ldr	r0, [pc, #24]	; (8001798 <HAL_I2S_MspInit+0x13c>)
 8001780:	f003 f8e0 	bl	8004944 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }
}
 8001784:	bf00      	nop
 8001786:	37e8      	adds	r7, #232	; 0xe8
 8001788:	46bd      	mov	sp, r7
 800178a:	bd80      	pop	{r7, pc}
 800178c:	40003800 	.word	0x40003800
 8001790:	58024400 	.word	0x58024400
 8001794:	58020800 	.word	0x58020800
 8001798:	58020400 	.word	0x58020400

0800179c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800179c:	b580      	push	{r7, lr}
 800179e:	b09c      	sub	sp, #112	; 0x70
 80017a0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80017a2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80017a6:	224c      	movs	r2, #76	; 0x4c
 80017a8:	2100      	movs	r1, #0
 80017aa:	4618      	mov	r0, r3
 80017ac:	f012 f8ee 	bl	801398c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80017b0:	1d3b      	adds	r3, r7, #4
 80017b2:	2220      	movs	r2, #32
 80017b4:	2100      	movs	r1, #0
 80017b6:	4618      	mov	r0, r3
 80017b8:	f012 f8e8 	bl	801398c <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 80017bc:	2002      	movs	r0, #2
 80017be:	f005 fa79 	bl	8006cb4 <HAL_PWREx_ConfigSupply>
  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 80017c2:	2300      	movs	r3, #0
 80017c4:	603b      	str	r3, [r7, #0]
 80017c6:	4b37      	ldr	r3, [pc, #220]	; (80018a4 <SystemClock_Config+0x108>)
 80017c8:	699b      	ldr	r3, [r3, #24]
 80017ca:	4a36      	ldr	r2, [pc, #216]	; (80018a4 <SystemClock_Config+0x108>)
 80017cc:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80017d0:	6193      	str	r3, [r2, #24]
 80017d2:	4b34      	ldr	r3, [pc, #208]	; (80018a4 <SystemClock_Config+0x108>)
 80017d4:	699b      	ldr	r3, [r3, #24]
 80017d6:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80017da:	603b      	str	r3, [r7, #0]
 80017dc:	4b32      	ldr	r3, [pc, #200]	; (80018a8 <SystemClock_Config+0x10c>)
 80017de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80017e0:	4a31      	ldr	r2, [pc, #196]	; (80018a8 <SystemClock_Config+0x10c>)
 80017e2:	f043 0301 	orr.w	r3, r3, #1
 80017e6:	62d3      	str	r3, [r2, #44]	; 0x2c
 80017e8:	4b2f      	ldr	r3, [pc, #188]	; (80018a8 <SystemClock_Config+0x10c>)
 80017ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80017ec:	f003 0301 	and.w	r3, r3, #1
 80017f0:	603b      	str	r3, [r7, #0]
 80017f2:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 80017f4:	bf00      	nop
 80017f6:	4b2b      	ldr	r3, [pc, #172]	; (80018a4 <SystemClock_Config+0x108>)
 80017f8:	699b      	ldr	r3, [r3, #24]
 80017fa:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80017fe:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001802:	d1f8      	bne.n	80017f6 <SystemClock_Config+0x5a>
  /** Macro to configure the PLL clock source
  */
  __HAL_RCC_PLL_PLLSOURCE_CONFIG(RCC_PLLSOURCE_HSE);
 8001804:	4b29      	ldr	r3, [pc, #164]	; (80018ac <SystemClock_Config+0x110>)
 8001806:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001808:	f023 0303 	bic.w	r3, r3, #3
 800180c:	4a27      	ldr	r2, [pc, #156]	; (80018ac <SystemClock_Config+0x110>)
 800180e:	f043 0302 	orr.w	r3, r3, #2
 8001812:	6293      	str	r3, [r2, #40]	; 0x28
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48|RCC_OSCILLATORTYPE_HSI
 8001814:	2323      	movs	r3, #35	; 0x23
 8001816:	627b      	str	r3, [r7, #36]	; 0x24
                              |RCC_OSCILLATORTYPE_HSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001818:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800181c:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 800181e:	2301      	movs	r3, #1
 8001820:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001822:	2340      	movs	r3, #64	; 0x40
 8001824:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 8001826:	2301      	movs	r3, #1
 8001828:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800182a:	2302      	movs	r3, #2
 800182c:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800182e:	2302      	movs	r3, #2
 8001830:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 5;
 8001832:	2305      	movs	r3, #5
 8001834:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 192;
 8001836:	23c0      	movs	r3, #192	; 0xc0
 8001838:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 800183a:	2302      	movs	r3, #2
 800183c:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 5;
 800183e:	2305      	movs	r3, #5
 8001840:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8001842:	2302      	movs	r3, #2
 8001844:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_2;
 8001846:	2308      	movs	r3, #8
 8001848:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 800184a:	2300      	movs	r3, #0
 800184c:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 800184e:	2300      	movs	r3, #0
 8001850:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001852:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001856:	4618      	mov	r0, r3
 8001858:	f005 fa76 	bl	8006d48 <HAL_RCC_OscConfig>
 800185c:	4603      	mov	r3, r0
 800185e:	2b00      	cmp	r3, #0
 8001860:	d001      	beq.n	8001866 <SystemClock_Config+0xca>
  {
    Error_Handler();
 8001862:	f000 f85b 	bl	800191c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001866:	233f      	movs	r3, #63	; 0x3f
 8001868:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800186a:	2303      	movs	r3, #3
 800186c:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 800186e:	2300      	movs	r3, #0
 8001870:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 8001872:	2308      	movs	r3, #8
 8001874:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 8001876:	2340      	movs	r3, #64	; 0x40
 8001878:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 800187a:	2340      	movs	r3, #64	; 0x40
 800187c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 800187e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001882:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 8001884:	2340      	movs	r3, #64	; 0x40
 8001886:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8001888:	1d3b      	adds	r3, r7, #4
 800188a:	2104      	movs	r1, #4
 800188c:	4618      	mov	r0, r3
 800188e:	f005 fe6b 	bl	8007568 <HAL_RCC_ClockConfig>
 8001892:	4603      	mov	r3, r0
 8001894:	2b00      	cmp	r3, #0
 8001896:	d001      	beq.n	800189c <SystemClock_Config+0x100>
  {
    Error_Handler();
 8001898:	f000 f840 	bl	800191c <Error_Handler>
  }
}
 800189c:	bf00      	nop
 800189e:	3770      	adds	r7, #112	; 0x70
 80018a0:	46bd      	mov	sp, r7
 80018a2:	bd80      	pop	{r7, pc}
 80018a4:	58024800 	.word	0x58024800
 80018a8:	58000400 	.word	0x58000400
 80018ac:	58024400 	.word	0x58024400

080018b0 <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 80018b0:	b580      	push	{r7, lr}
 80018b2:	b0b0      	sub	sp, #192	; 0xc0
 80018b4:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80018b6:	1d3b      	adds	r3, r7, #4
 80018b8:	22bc      	movs	r2, #188	; 0xbc
 80018ba:	2100      	movs	r1, #0
 80018bc:	4618      	mov	r0, r3
 80018be:	f012 f865 	bl	801398c <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_FMC|RCC_PERIPHCLK_FDCAN
 80018c2:	4b15      	ldr	r3, [pc, #84]	; (8001918 <PeriphCommonClock_Config+0x68>)
 80018c4:	607b      	str	r3, [r7, #4]
                              |RCC_PERIPHCLK_CKPER|RCC_PERIPHCLK_TIM;
  PeriphClkInitStruct.PLL2.PLL2M = 2;
 80018c6:	2302      	movs	r3, #2
 80018c8:	60bb      	str	r3, [r7, #8]
  PeriphClkInitStruct.PLL2.PLL2N = 48;
 80018ca:	2330      	movs	r3, #48	; 0x30
 80018cc:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.PLL2.PLL2P = 2;
 80018ce:	2302      	movs	r3, #2
 80018d0:	613b      	str	r3, [r7, #16]
  PeriphClkInitStruct.PLL2.PLL2Q = 5;
 80018d2:	2305      	movs	r3, #5
 80018d4:	617b      	str	r3, [r7, #20]
  PeriphClkInitStruct.PLL2.PLL2R = 2;
 80018d6:	2302      	movs	r3, #2
 80018d8:	61bb      	str	r3, [r7, #24]
  PeriphClkInitStruct.PLL2.PLL2RGE = RCC_PLL2VCIRANGE_3;
 80018da:	23c0      	movs	r3, #192	; 0xc0
 80018dc:	61fb      	str	r3, [r7, #28]
  PeriphClkInitStruct.PLL2.PLL2VCOSEL = RCC_PLL2VCOWIDE;
 80018de:	2300      	movs	r3, #0
 80018e0:	623b      	str	r3, [r7, #32]
  PeriphClkInitStruct.PLL2.PLL2FRACN = 0;
 80018e2:	2300      	movs	r3, #0
 80018e4:	627b      	str	r3, [r7, #36]	; 0x24
  PeriphClkInitStruct.FmcClockSelection = RCC_FMCCLKSOURCE_PLL2;
 80018e6:	2302      	movs	r3, #2
 80018e8:	64bb      	str	r3, [r7, #72]	; 0x48
  PeriphClkInitStruct.CkperClockSelection = RCC_CLKPSOURCE_HSI;
 80018ea:	2300      	movs	r3, #0
 80018ec:	657b      	str	r3, [r7, #84]	; 0x54
  PeriphClkInitStruct.FdcanClockSelection = RCC_FDCANCLKSOURCE_PLL2;
 80018ee:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 80018f2:	673b      	str	r3, [r7, #112]	; 0x70
  PeriphClkInitStruct.TIMPresSelection = RCC_TIMPRES_ACTIVATED;
 80018f4:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80018f8:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc

  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80018fc:	1d3b      	adds	r3, r7, #4
 80018fe:	4618      	mov	r0, r3
 8001900:	f006 f9be 	bl	8007c80 <HAL_RCCEx_PeriphCLKConfig>
 8001904:	4603      	mov	r3, r0
 8001906:	2b00      	cmp	r3, #0
 8001908:	d001      	beq.n	800190e <PeriphCommonClock_Config+0x5e>
  {
    Error_Handler();
 800190a:	f000 f807 	bl	800191c <Error_Handler>
  }
}
 800190e:	bf00      	nop
 8001910:	37c0      	adds	r7, #192	; 0xc0
 8001912:	46bd      	mov	sp, r7
 8001914:	bd80      	pop	{r7, pc}
 8001916:	bf00      	nop
 8001918:	c1008000 	.word	0xc1008000

0800191c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800191c:	b480      	push	{r7}
 800191e:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8001920:	b672      	cpsid	i
}
 8001922:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001924:	e7fe      	b.n	8001924 <Error_Handler+0x8>
	...

08001928 <MX_SDMMC1_SD_Init>:
SD_HandleTypeDef hsd1;

/* SDMMC1 init function */

void MX_SDMMC1_SD_Init(void)
{
 8001928:	b480      	push	{r7}
 800192a:	af00      	add	r7, sp, #0
  /* USER CODE END SDMMC1_Init 0 */

  /* USER CODE BEGIN SDMMC1_Init 1 */

  /* USER CODE END SDMMC1_Init 1 */
  hsd1.Instance = SDMMC1;
 800192c:	4b0c      	ldr	r3, [pc, #48]	; (8001960 <MX_SDMMC1_SD_Init+0x38>)
 800192e:	4a0d      	ldr	r2, [pc, #52]	; (8001964 <MX_SDMMC1_SD_Init+0x3c>)
 8001930:	601a      	str	r2, [r3, #0]
  hsd1.Init.ClockEdge = SDMMC_CLOCK_EDGE_RISING;
 8001932:	4b0b      	ldr	r3, [pc, #44]	; (8001960 <MX_SDMMC1_SD_Init+0x38>)
 8001934:	2200      	movs	r2, #0
 8001936:	605a      	str	r2, [r3, #4]
  hsd1.Init.ClockPowerSave = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 8001938:	4b09      	ldr	r3, [pc, #36]	; (8001960 <MX_SDMMC1_SD_Init+0x38>)
 800193a:	2200      	movs	r2, #0
 800193c:	609a      	str	r2, [r3, #8]
  hsd1.Init.BusWide = SDMMC_BUS_WIDE_4B;
 800193e:	4b08      	ldr	r3, [pc, #32]	; (8001960 <MX_SDMMC1_SD_Init+0x38>)
 8001940:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001944:	60da      	str	r2, [r3, #12]
  hsd1.Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_ENABLE;
 8001946:	4b06      	ldr	r3, [pc, #24]	; (8001960 <MX_SDMMC1_SD_Init+0x38>)
 8001948:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800194c:	611a      	str	r2, [r3, #16]
  hsd1.Init.ClockDiv = 0;
 800194e:	4b04      	ldr	r3, [pc, #16]	; (8001960 <MX_SDMMC1_SD_Init+0x38>)
 8001950:	2200      	movs	r2, #0
 8001952:	615a      	str	r2, [r3, #20]
  /* USER CODE BEGIN SDMMC1_Init 2 */

  /* USER CODE END SDMMC1_Init 2 */

}
 8001954:	bf00      	nop
 8001956:	46bd      	mov	sp, r7
 8001958:	f85d 7b04 	ldr.w	r7, [sp], #4
 800195c:	4770      	bx	lr
 800195e:	bf00      	nop
 8001960:	24000758 	.word	0x24000758
 8001964:	52007000 	.word	0x52007000

08001968 <HAL_SD_MspInit>:

void HAL_SD_MspInit(SD_HandleTypeDef* sdHandle)
{
 8001968:	b580      	push	{r7, lr}
 800196a:	b0ba      	sub	sp, #232	; 0xe8
 800196c:	af00      	add	r7, sp, #0
 800196e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001970:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8001974:	2200      	movs	r2, #0
 8001976:	601a      	str	r2, [r3, #0]
 8001978:	605a      	str	r2, [r3, #4]
 800197a:	609a      	str	r2, [r3, #8]
 800197c:	60da      	str	r2, [r3, #12]
 800197e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001980:	f107 0318 	add.w	r3, r7, #24
 8001984:	22bc      	movs	r2, #188	; 0xbc
 8001986:	2100      	movs	r1, #0
 8001988:	4618      	mov	r0, r3
 800198a:	f011 ffff 	bl	801398c <memset>
  if(sdHandle->Instance==SDMMC1)
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	681b      	ldr	r3, [r3, #0]
 8001992:	4a46      	ldr	r2, [pc, #280]	; (8001aac <HAL_SD_MspInit+0x144>)
 8001994:	4293      	cmp	r3, r2
 8001996:	f040 8085 	bne.w	8001aa4 <HAL_SD_MspInit+0x13c>
  /* USER CODE BEGIN SDMMC1_MspInit 0 */

  /* USER CODE END SDMMC1_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SDMMC;
 800199a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800199e:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.SdmmcClockSelection = RCC_SDMMCCLKSOURCE_PLL;
 80019a0:	2300      	movs	r3, #0
 80019a2:	667b      	str	r3, [r7, #100]	; 0x64
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80019a4:	f107 0318 	add.w	r3, r7, #24
 80019a8:	4618      	mov	r0, r3
 80019aa:	f006 f969 	bl	8007c80 <HAL_RCCEx_PeriphCLKConfig>
 80019ae:	4603      	mov	r3, r0
 80019b0:	2b00      	cmp	r3, #0
 80019b2:	d001      	beq.n	80019b8 <HAL_SD_MspInit+0x50>
    {
      Error_Handler();
 80019b4:	f7ff ffb2 	bl	800191c <Error_Handler>
    }

    /* SDMMC1 clock enable */
    __HAL_RCC_SDMMC1_CLK_ENABLE();
 80019b8:	4b3d      	ldr	r3, [pc, #244]	; (8001ab0 <HAL_SD_MspInit+0x148>)
 80019ba:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 80019be:	4a3c      	ldr	r2, [pc, #240]	; (8001ab0 <HAL_SD_MspInit+0x148>)
 80019c0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80019c4:	f8c2 30d4 	str.w	r3, [r2, #212]	; 0xd4
 80019c8:	4b39      	ldr	r3, [pc, #228]	; (8001ab0 <HAL_SD_MspInit+0x148>)
 80019ca:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 80019ce:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80019d2:	617b      	str	r3, [r7, #20]
 80019d4:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80019d6:	4b36      	ldr	r3, [pc, #216]	; (8001ab0 <HAL_SD_MspInit+0x148>)
 80019d8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80019dc:	4a34      	ldr	r2, [pc, #208]	; (8001ab0 <HAL_SD_MspInit+0x148>)
 80019de:	f043 0304 	orr.w	r3, r3, #4
 80019e2:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80019e6:	4b32      	ldr	r3, [pc, #200]	; (8001ab0 <HAL_SD_MspInit+0x148>)
 80019e8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80019ec:	f003 0304 	and.w	r3, r3, #4
 80019f0:	613b      	str	r3, [r7, #16]
 80019f2:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80019f4:	4b2e      	ldr	r3, [pc, #184]	; (8001ab0 <HAL_SD_MspInit+0x148>)
 80019f6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80019fa:	4a2d      	ldr	r2, [pc, #180]	; (8001ab0 <HAL_SD_MspInit+0x148>)
 80019fc:	f043 0308 	orr.w	r3, r3, #8
 8001a00:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001a04:	4b2a      	ldr	r3, [pc, #168]	; (8001ab0 <HAL_SD_MspInit+0x148>)
 8001a06:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001a0a:	f003 0308 	and.w	r3, r3, #8
 8001a0e:	60fb      	str	r3, [r7, #12]
 8001a10:	68fb      	ldr	r3, [r7, #12]
    PC10     ------> SDMMC1_D2
    PC11     ------> SDMMC1_D3
    PC12     ------> SDMMC1_CK
    PD2     ------> SDMMC1_CMD
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11;
 8001a12:	f44f 6370 	mov.w	r3, #3840	; 0xf00
 8001a16:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a1a:	2302      	movs	r3, #2
 8001a1c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001a20:	2301      	movs	r3, #1
 8001a22:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001a26:	2303      	movs	r3, #3
 8001a28:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO1;
 8001a2c:	230c      	movs	r3, #12
 8001a2e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001a32:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8001a36:	4619      	mov	r1, r3
 8001a38:	481e      	ldr	r0, [pc, #120]	; (8001ab4 <HAL_SD_MspInit+0x14c>)
 8001a3a:	f002 ff83 	bl	8004944 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8001a3e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001a42:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a46:	2302      	movs	r3, #2
 8001a48:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a4c:	2300      	movs	r3, #0
 8001a4e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001a52:	2303      	movs	r3, #3
 8001a54:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO1;
 8001a58:	230c      	movs	r3, #12
 8001a5a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001a5e:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8001a62:	4619      	mov	r1, r3
 8001a64:	4813      	ldr	r0, [pc, #76]	; (8001ab4 <HAL_SD_MspInit+0x14c>)
 8001a66:	f002 ff6d 	bl	8004944 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8001a6a:	2304      	movs	r3, #4
 8001a6c:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a70:	2302      	movs	r3, #2
 8001a72:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001a76:	2301      	movs	r3, #1
 8001a78:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001a7c:	2303      	movs	r3, #3
 8001a7e:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO1;
 8001a82:	230c      	movs	r3, #12
 8001a84:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001a88:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8001a8c:	4619      	mov	r1, r3
 8001a8e:	480a      	ldr	r0, [pc, #40]	; (8001ab8 <HAL_SD_MspInit+0x150>)
 8001a90:	f002 ff58 	bl	8004944 <HAL_GPIO_Init>

    /* SDMMC1 interrupt Init */
    HAL_NVIC_SetPriority(SDMMC1_IRQn, 0, 0);
 8001a94:	2200      	movs	r2, #0
 8001a96:	2100      	movs	r1, #0
 8001a98:	2031      	movs	r0, #49	; 0x31
 8001a9a:	f001 fe38 	bl	800370e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SDMMC1_IRQn);
 8001a9e:	2031      	movs	r0, #49	; 0x31
 8001aa0:	f001 fe4f 	bl	8003742 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SDMMC1_MspInit 1 */

  /* USER CODE END SDMMC1_MspInit 1 */
  }
}
 8001aa4:	bf00      	nop
 8001aa6:	37e8      	adds	r7, #232	; 0xe8
 8001aa8:	46bd      	mov	sp, r7
 8001aaa:	bd80      	pop	{r7, pc}
 8001aac:	52007000 	.word	0x52007000
 8001ab0:	58024400 	.word	0x58024400
 8001ab4:	58020800 	.word	0x58020800
 8001ab8:	58020c00 	.word	0x58020c00

08001abc <MX_SPI4_Init>:
SPI_HandleTypeDef hspi4;
SPI_HandleTypeDef hspi6;

/* SPI4 init function */
void MX_SPI4_Init(void)
{
 8001abc:	b580      	push	{r7, lr}
 8001abe:	af00      	add	r7, sp, #0
  /* USER CODE END SPI4_Init 0 */

  /* USER CODE BEGIN SPI4_Init 1 */

  /* USER CODE END SPI4_Init 1 */
  hspi4.Instance = SPI4;
 8001ac0:	4b27      	ldr	r3, [pc, #156]	; (8001b60 <MX_SPI4_Init+0xa4>)
 8001ac2:	4a28      	ldr	r2, [pc, #160]	; (8001b64 <MX_SPI4_Init+0xa8>)
 8001ac4:	601a      	str	r2, [r3, #0]
  hspi4.Init.Mode = SPI_MODE_MASTER;
 8001ac6:	4b26      	ldr	r3, [pc, #152]	; (8001b60 <MX_SPI4_Init+0xa4>)
 8001ac8:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 8001acc:	605a      	str	r2, [r3, #4]
  hspi4.Init.Direction = SPI_DIRECTION_2LINES;
 8001ace:	4b24      	ldr	r3, [pc, #144]	; (8001b60 <MX_SPI4_Init+0xa4>)
 8001ad0:	2200      	movs	r2, #0
 8001ad2:	609a      	str	r2, [r3, #8]
  hspi4.Init.DataSize = SPI_DATASIZE_8BIT;
 8001ad4:	4b22      	ldr	r3, [pc, #136]	; (8001b60 <MX_SPI4_Init+0xa4>)
 8001ad6:	2207      	movs	r2, #7
 8001ad8:	60da      	str	r2, [r3, #12]
  hspi4.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001ada:	4b21      	ldr	r3, [pc, #132]	; (8001b60 <MX_SPI4_Init+0xa4>)
 8001adc:	2200      	movs	r2, #0
 8001ade:	611a      	str	r2, [r3, #16]
  hspi4.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001ae0:	4b1f      	ldr	r3, [pc, #124]	; (8001b60 <MX_SPI4_Init+0xa4>)
 8001ae2:	2200      	movs	r2, #0
 8001ae4:	615a      	str	r2, [r3, #20]
  hspi4.Init.NSS = SPI_NSS_SOFT;
 8001ae6:	4b1e      	ldr	r3, [pc, #120]	; (8001b60 <MX_SPI4_Init+0xa4>)
 8001ae8:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8001aec:	619a      	str	r2, [r3, #24]
  hspi4.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_64;
 8001aee:	4b1c      	ldr	r3, [pc, #112]	; (8001b60 <MX_SPI4_Init+0xa4>)
 8001af0:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8001af4:	61da      	str	r2, [r3, #28]
  hspi4.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001af6:	4b1a      	ldr	r3, [pc, #104]	; (8001b60 <MX_SPI4_Init+0xa4>)
 8001af8:	2200      	movs	r2, #0
 8001afa:	621a      	str	r2, [r3, #32]
  hspi4.Init.TIMode = SPI_TIMODE_DISABLE;
 8001afc:	4b18      	ldr	r3, [pc, #96]	; (8001b60 <MX_SPI4_Init+0xa4>)
 8001afe:	2200      	movs	r2, #0
 8001b00:	625a      	str	r2, [r3, #36]	; 0x24
  hspi4.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001b02:	4b17      	ldr	r3, [pc, #92]	; (8001b60 <MX_SPI4_Init+0xa4>)
 8001b04:	2200      	movs	r2, #0
 8001b06:	629a      	str	r2, [r3, #40]	; 0x28
  hspi4.Init.CRCPolynomial = 0x0;
 8001b08:	4b15      	ldr	r3, [pc, #84]	; (8001b60 <MX_SPI4_Init+0xa4>)
 8001b0a:	2200      	movs	r2, #0
 8001b0c:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi4.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8001b0e:	4b14      	ldr	r3, [pc, #80]	; (8001b60 <MX_SPI4_Init+0xa4>)
 8001b10:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001b14:	635a      	str	r2, [r3, #52]	; 0x34
  hspi4.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 8001b16:	4b12      	ldr	r3, [pc, #72]	; (8001b60 <MX_SPI4_Init+0xa4>)
 8001b18:	2200      	movs	r2, #0
 8001b1a:	639a      	str	r2, [r3, #56]	; 0x38
  hspi4.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 8001b1c:	4b10      	ldr	r3, [pc, #64]	; (8001b60 <MX_SPI4_Init+0xa4>)
 8001b1e:	2200      	movs	r2, #0
 8001b20:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi4.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8001b22:	4b0f      	ldr	r3, [pc, #60]	; (8001b60 <MX_SPI4_Init+0xa4>)
 8001b24:	2200      	movs	r2, #0
 8001b26:	641a      	str	r2, [r3, #64]	; 0x40
  hspi4.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8001b28:	4b0d      	ldr	r3, [pc, #52]	; (8001b60 <MX_SPI4_Init+0xa4>)
 8001b2a:	2200      	movs	r2, #0
 8001b2c:	645a      	str	r2, [r3, #68]	; 0x44
  hspi4.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 8001b2e:	4b0c      	ldr	r3, [pc, #48]	; (8001b60 <MX_SPI4_Init+0xa4>)
 8001b30:	2200      	movs	r2, #0
 8001b32:	649a      	str	r2, [r3, #72]	; 0x48
  hspi4.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 8001b34:	4b0a      	ldr	r3, [pc, #40]	; (8001b60 <MX_SPI4_Init+0xa4>)
 8001b36:	2200      	movs	r2, #0
 8001b38:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi4.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 8001b3a:	4b09      	ldr	r3, [pc, #36]	; (8001b60 <MX_SPI4_Init+0xa4>)
 8001b3c:	2200      	movs	r2, #0
 8001b3e:	651a      	str	r2, [r3, #80]	; 0x50
  hspi4.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 8001b40:	4b07      	ldr	r3, [pc, #28]	; (8001b60 <MX_SPI4_Init+0xa4>)
 8001b42:	2200      	movs	r2, #0
 8001b44:	655a      	str	r2, [r3, #84]	; 0x54
  hspi4.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 8001b46:	4b06      	ldr	r3, [pc, #24]	; (8001b60 <MX_SPI4_Init+0xa4>)
 8001b48:	2200      	movs	r2, #0
 8001b4a:	659a      	str	r2, [r3, #88]	; 0x58
  if (HAL_SPI_Init(&hspi4) != HAL_OK)
 8001b4c:	4804      	ldr	r0, [pc, #16]	; (8001b60 <MX_SPI4_Init+0xa4>)
 8001b4e:	f009 fe93 	bl	800b878 <HAL_SPI_Init>
 8001b52:	4603      	mov	r3, r0
 8001b54:	2b00      	cmp	r3, #0
 8001b56:	d001      	beq.n	8001b5c <MX_SPI4_Init+0xa0>
  {
    Error_Handler();
 8001b58:	f7ff fee0 	bl	800191c <Error_Handler>
  }
  /* USER CODE BEGIN SPI4_Init 2 */

  /* USER CODE END SPI4_Init 2 */

}
 8001b5c:	bf00      	nop
 8001b5e:	bd80      	pop	{r7, pc}
 8001b60:	2400085c 	.word	0x2400085c
 8001b64:	40013400 	.word	0x40013400

08001b68 <MX_SPI6_Init>:
/* SPI6 init function */
void MX_SPI6_Init(void)
{
 8001b68:	b580      	push	{r7, lr}
 8001b6a:	af00      	add	r7, sp, #0
  /* USER CODE END SPI6_Init 0 */

  /* USER CODE BEGIN SPI6_Init 1 */

  /* USER CODE END SPI6_Init 1 */
  hspi6.Instance = SPI6;
 8001b6c:	4b27      	ldr	r3, [pc, #156]	; (8001c0c <MX_SPI6_Init+0xa4>)
 8001b6e:	4a28      	ldr	r2, [pc, #160]	; (8001c10 <MX_SPI6_Init+0xa8>)
 8001b70:	601a      	str	r2, [r3, #0]
  hspi6.Init.Mode = SPI_MODE_MASTER;
 8001b72:	4b26      	ldr	r3, [pc, #152]	; (8001c0c <MX_SPI6_Init+0xa4>)
 8001b74:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 8001b78:	605a      	str	r2, [r3, #4]
  hspi6.Init.Direction = SPI_DIRECTION_2LINES;
 8001b7a:	4b24      	ldr	r3, [pc, #144]	; (8001c0c <MX_SPI6_Init+0xa4>)
 8001b7c:	2200      	movs	r2, #0
 8001b7e:	609a      	str	r2, [r3, #8]
  hspi6.Init.DataSize = SPI_DATASIZE_8BIT;
 8001b80:	4b22      	ldr	r3, [pc, #136]	; (8001c0c <MX_SPI6_Init+0xa4>)
 8001b82:	2207      	movs	r2, #7
 8001b84:	60da      	str	r2, [r3, #12]
  hspi6.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001b86:	4b21      	ldr	r3, [pc, #132]	; (8001c0c <MX_SPI6_Init+0xa4>)
 8001b88:	2200      	movs	r2, #0
 8001b8a:	611a      	str	r2, [r3, #16]
  hspi6.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001b8c:	4b1f      	ldr	r3, [pc, #124]	; (8001c0c <MX_SPI6_Init+0xa4>)
 8001b8e:	2200      	movs	r2, #0
 8001b90:	615a      	str	r2, [r3, #20]
  hspi6.Init.NSS = SPI_NSS_SOFT;
 8001b92:	4b1e      	ldr	r3, [pc, #120]	; (8001c0c <MX_SPI6_Init+0xa4>)
 8001b94:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8001b98:	619a      	str	r2, [r3, #24]
  hspi6.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 8001b9a:	4b1c      	ldr	r3, [pc, #112]	; (8001c0c <MX_SPI6_Init+0xa4>)
 8001b9c:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8001ba0:	61da      	str	r2, [r3, #28]
  hspi6.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001ba2:	4b1a      	ldr	r3, [pc, #104]	; (8001c0c <MX_SPI6_Init+0xa4>)
 8001ba4:	2200      	movs	r2, #0
 8001ba6:	621a      	str	r2, [r3, #32]
  hspi6.Init.TIMode = SPI_TIMODE_DISABLE;
 8001ba8:	4b18      	ldr	r3, [pc, #96]	; (8001c0c <MX_SPI6_Init+0xa4>)
 8001baa:	2200      	movs	r2, #0
 8001bac:	625a      	str	r2, [r3, #36]	; 0x24
  hspi6.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001bae:	4b17      	ldr	r3, [pc, #92]	; (8001c0c <MX_SPI6_Init+0xa4>)
 8001bb0:	2200      	movs	r2, #0
 8001bb2:	629a      	str	r2, [r3, #40]	; 0x28
  hspi6.Init.CRCPolynomial = 0x0;
 8001bb4:	4b15      	ldr	r3, [pc, #84]	; (8001c0c <MX_SPI6_Init+0xa4>)
 8001bb6:	2200      	movs	r2, #0
 8001bb8:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi6.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 8001bba:	4b14      	ldr	r3, [pc, #80]	; (8001c0c <MX_SPI6_Init+0xa4>)
 8001bbc:	2200      	movs	r2, #0
 8001bbe:	635a      	str	r2, [r3, #52]	; 0x34
  hspi6.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 8001bc0:	4b12      	ldr	r3, [pc, #72]	; (8001c0c <MX_SPI6_Init+0xa4>)
 8001bc2:	2200      	movs	r2, #0
 8001bc4:	639a      	str	r2, [r3, #56]	; 0x38
  hspi6.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 8001bc6:	4b11      	ldr	r3, [pc, #68]	; (8001c0c <MX_SPI6_Init+0xa4>)
 8001bc8:	2200      	movs	r2, #0
 8001bca:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi6.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8001bcc:	4b0f      	ldr	r3, [pc, #60]	; (8001c0c <MX_SPI6_Init+0xa4>)
 8001bce:	2200      	movs	r2, #0
 8001bd0:	641a      	str	r2, [r3, #64]	; 0x40
  hspi6.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8001bd2:	4b0e      	ldr	r3, [pc, #56]	; (8001c0c <MX_SPI6_Init+0xa4>)
 8001bd4:	2200      	movs	r2, #0
 8001bd6:	645a      	str	r2, [r3, #68]	; 0x44
  hspi6.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 8001bd8:	4b0c      	ldr	r3, [pc, #48]	; (8001c0c <MX_SPI6_Init+0xa4>)
 8001bda:	2200      	movs	r2, #0
 8001bdc:	649a      	str	r2, [r3, #72]	; 0x48
  hspi6.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 8001bde:	4b0b      	ldr	r3, [pc, #44]	; (8001c0c <MX_SPI6_Init+0xa4>)
 8001be0:	2200      	movs	r2, #0
 8001be2:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi6.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 8001be4:	4b09      	ldr	r3, [pc, #36]	; (8001c0c <MX_SPI6_Init+0xa4>)
 8001be6:	2200      	movs	r2, #0
 8001be8:	651a      	str	r2, [r3, #80]	; 0x50
  hspi6.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 8001bea:	4b08      	ldr	r3, [pc, #32]	; (8001c0c <MX_SPI6_Init+0xa4>)
 8001bec:	2200      	movs	r2, #0
 8001bee:	655a      	str	r2, [r3, #84]	; 0x54
  hspi6.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 8001bf0:	4b06      	ldr	r3, [pc, #24]	; (8001c0c <MX_SPI6_Init+0xa4>)
 8001bf2:	2200      	movs	r2, #0
 8001bf4:	659a      	str	r2, [r3, #88]	; 0x58
  if (HAL_SPI_Init(&hspi6) != HAL_OK)
 8001bf6:	4805      	ldr	r0, [pc, #20]	; (8001c0c <MX_SPI6_Init+0xa4>)
 8001bf8:	f009 fe3e 	bl	800b878 <HAL_SPI_Init>
 8001bfc:	4603      	mov	r3, r0
 8001bfe:	2b00      	cmp	r3, #0
 8001c00:	d001      	beq.n	8001c06 <MX_SPI6_Init+0x9e>
  {
    Error_Handler();
 8001c02:	f7ff fe8b 	bl	800191c <Error_Handler>
  }
  /* USER CODE BEGIN SPI6_Init 2 */

  /* USER CODE END SPI6_Init 2 */

}
 8001c06:	bf00      	nop
 8001c08:	bd80      	pop	{r7, pc}
 8001c0a:	bf00      	nop
 8001c0c:	240007d4 	.word	0x240007d4
 8001c10:	58001400 	.word	0x58001400

08001c14 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8001c14:	b580      	push	{r7, lr}
 8001c16:	b0ba      	sub	sp, #232	; 0xe8
 8001c18:	af00      	add	r7, sp, #0
 8001c1a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c1c:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8001c20:	2200      	movs	r2, #0
 8001c22:	601a      	str	r2, [r3, #0]
 8001c24:	605a      	str	r2, [r3, #4]
 8001c26:	609a      	str	r2, [r3, #8]
 8001c28:	60da      	str	r2, [r3, #12]
 8001c2a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001c2c:	f107 0318 	add.w	r3, r7, #24
 8001c30:	22bc      	movs	r2, #188	; 0xbc
 8001c32:	2100      	movs	r1, #0
 8001c34:	4618      	mov	r0, r3
 8001c36:	f011 fea9 	bl	801398c <memset>
  if(spiHandle->Instance==SPI4)
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	681b      	ldr	r3, [r3, #0]
 8001c3e:	4a49      	ldr	r2, [pc, #292]	; (8001d64 <HAL_SPI_MspInit+0x150>)
 8001c40:	4293      	cmp	r3, r2
 8001c42:	d142      	bne.n	8001cca <HAL_SPI_MspInit+0xb6>
  /* USER CODE BEGIN SPI4_MspInit 0 */

  /* USER CODE END SPI4_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI4;
 8001c44:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001c48:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.Spi45ClockSelection = RCC_SPI45CLKSOURCE_D2PCLK1;
 8001c4a:	2300      	movs	r3, #0
 8001c4c:	67bb      	str	r3, [r7, #120]	; 0x78
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001c4e:	f107 0318 	add.w	r3, r7, #24
 8001c52:	4618      	mov	r0, r3
 8001c54:	f006 f814 	bl	8007c80 <HAL_RCCEx_PeriphCLKConfig>
 8001c58:	4603      	mov	r3, r0
 8001c5a:	2b00      	cmp	r3, #0
 8001c5c:	d001      	beq.n	8001c62 <HAL_SPI_MspInit+0x4e>
    {
      Error_Handler();
 8001c5e:	f7ff fe5d 	bl	800191c <Error_Handler>
    }

    /* SPI4 clock enable */
    __HAL_RCC_SPI4_CLK_ENABLE();
 8001c62:	4b41      	ldr	r3, [pc, #260]	; (8001d68 <HAL_SPI_MspInit+0x154>)
 8001c64:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001c68:	4a3f      	ldr	r2, [pc, #252]	; (8001d68 <HAL_SPI_MspInit+0x154>)
 8001c6a:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8001c6e:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8001c72:	4b3d      	ldr	r3, [pc, #244]	; (8001d68 <HAL_SPI_MspInit+0x154>)
 8001c74:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001c78:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001c7c:	617b      	str	r3, [r7, #20]
 8001c7e:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8001c80:	4b39      	ldr	r3, [pc, #228]	; (8001d68 <HAL_SPI_MspInit+0x154>)
 8001c82:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001c86:	4a38      	ldr	r2, [pc, #224]	; (8001d68 <HAL_SPI_MspInit+0x154>)
 8001c88:	f043 0310 	orr.w	r3, r3, #16
 8001c8c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001c90:	4b35      	ldr	r3, [pc, #212]	; (8001d68 <HAL_SPI_MspInit+0x154>)
 8001c92:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001c96:	f003 0310 	and.w	r3, r3, #16
 8001c9a:	613b      	str	r3, [r7, #16]
 8001c9c:	693b      	ldr	r3, [r7, #16]
    /**SPI4 GPIO Configuration
    PE2     ------> SPI4_SCK
    PE5     ------> SPI4_MISO
    PE6     ------> SPI4_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_5|GPIO_PIN_6;
 8001c9e:	2364      	movs	r3, #100	; 0x64
 8001ca0:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ca4:	2302      	movs	r3, #2
 8001ca6:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001caa:	2300      	movs	r3, #0
 8001cac:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001cb0:	2300      	movs	r3, #0
 8001cb2:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI4;
 8001cb6:	2305      	movs	r3, #5
 8001cb8:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001cbc:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8001cc0:	4619      	mov	r1, r3
 8001cc2:	482a      	ldr	r0, [pc, #168]	; (8001d6c <HAL_SPI_MspInit+0x158>)
 8001cc4:	f002 fe3e 	bl	8004944 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI6_MspInit 1 */

  /* USER CODE END SPI6_MspInit 1 */
  }
}
 8001cc8:	e048      	b.n	8001d5c <HAL_SPI_MspInit+0x148>
  else if(spiHandle->Instance==SPI6)
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	681b      	ldr	r3, [r3, #0]
 8001cce:	4a28      	ldr	r2, [pc, #160]	; (8001d70 <HAL_SPI_MspInit+0x15c>)
 8001cd0:	4293      	cmp	r3, r2
 8001cd2:	d143      	bne.n	8001d5c <HAL_SPI_MspInit+0x148>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI6;
 8001cd4:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001cd8:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.Spi6ClockSelection = RCC_SPI6CLKSOURCE_D3PCLK1;
 8001cda:	2300      	movs	r3, #0
 8001cdc:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001ce0:	f107 0318 	add.w	r3, r7, #24
 8001ce4:	4618      	mov	r0, r3
 8001ce6:	f005 ffcb 	bl	8007c80 <HAL_RCCEx_PeriphCLKConfig>
 8001cea:	4603      	mov	r3, r0
 8001cec:	2b00      	cmp	r3, #0
 8001cee:	d001      	beq.n	8001cf4 <HAL_SPI_MspInit+0xe0>
      Error_Handler();
 8001cf0:	f7ff fe14 	bl	800191c <Error_Handler>
    __HAL_RCC_SPI6_CLK_ENABLE();
 8001cf4:	4b1c      	ldr	r3, [pc, #112]	; (8001d68 <HAL_SPI_MspInit+0x154>)
 8001cf6:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8001cfa:	4a1b      	ldr	r2, [pc, #108]	; (8001d68 <HAL_SPI_MspInit+0x154>)
 8001cfc:	f043 0320 	orr.w	r3, r3, #32
 8001d00:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8001d04:	4b18      	ldr	r3, [pc, #96]	; (8001d68 <HAL_SPI_MspInit+0x154>)
 8001d06:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8001d0a:	f003 0320 	and.w	r3, r3, #32
 8001d0e:	60fb      	str	r3, [r7, #12]
 8001d10:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8001d12:	4b15      	ldr	r3, [pc, #84]	; (8001d68 <HAL_SPI_MspInit+0x154>)
 8001d14:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001d18:	4a13      	ldr	r2, [pc, #76]	; (8001d68 <HAL_SPI_MspInit+0x154>)
 8001d1a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001d1e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001d22:	4b11      	ldr	r3, [pc, #68]	; (8001d68 <HAL_SPI_MspInit+0x154>)
 8001d24:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001d28:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001d2c:	60bb      	str	r3, [r7, #8]
 8001d2e:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14;
 8001d30:	f44f 43e0 	mov.w	r3, #28672	; 0x7000
 8001d34:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d38:	2302      	movs	r3, #2
 8001d3a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d3e:	2300      	movs	r3, #0
 8001d40:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d44:	2300      	movs	r3, #0
 8001d46:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI6;
 8001d4a:	2305      	movs	r3, #5
 8001d4c:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001d50:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8001d54:	4619      	mov	r1, r3
 8001d56:	4807      	ldr	r0, [pc, #28]	; (8001d74 <HAL_SPI_MspInit+0x160>)
 8001d58:	f002 fdf4 	bl	8004944 <HAL_GPIO_Init>
}
 8001d5c:	bf00      	nop
 8001d5e:	37e8      	adds	r7, #232	; 0xe8
 8001d60:	46bd      	mov	sp, r7
 8001d62:	bd80      	pop	{r7, pc}
 8001d64:	40013400 	.word	0x40013400
 8001d68:	58024400 	.word	0x58024400
 8001d6c:	58021000 	.word	0x58021000
 8001d70:	58001400 	.word	0x58001400
 8001d74:	58021800 	.word	0x58021800

08001d78 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001d78:	b480      	push	{r7}
 8001d7a:	b083      	sub	sp, #12
 8001d7c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001d7e:	4b0a      	ldr	r3, [pc, #40]	; (8001da8 <HAL_MspInit+0x30>)
 8001d80:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8001d84:	4a08      	ldr	r2, [pc, #32]	; (8001da8 <HAL_MspInit+0x30>)
 8001d86:	f043 0302 	orr.w	r3, r3, #2
 8001d8a:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8001d8e:	4b06      	ldr	r3, [pc, #24]	; (8001da8 <HAL_MspInit+0x30>)
 8001d90:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8001d94:	f003 0302 	and.w	r3, r3, #2
 8001d98:	607b      	str	r3, [r7, #4]
 8001d9a:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001d9c:	bf00      	nop
 8001d9e:	370c      	adds	r7, #12
 8001da0:	46bd      	mov	sp, r7
 8001da2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001da6:	4770      	bx	lr
 8001da8:	58024400 	.word	0x58024400

08001dac <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001dac:	b480      	push	{r7}
 8001dae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001db0:	e7fe      	b.n	8001db0 <NMI_Handler+0x4>

08001db2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001db2:	b480      	push	{r7}
 8001db4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001db6:	e7fe      	b.n	8001db6 <HardFault_Handler+0x4>

08001db8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001db8:	b480      	push	{r7}
 8001dba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001dbc:	e7fe      	b.n	8001dbc <MemManage_Handler+0x4>

08001dbe <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001dbe:	b480      	push	{r7}
 8001dc0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001dc2:	e7fe      	b.n	8001dc2 <BusFault_Handler+0x4>

08001dc4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001dc4:	b480      	push	{r7}
 8001dc6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001dc8:	e7fe      	b.n	8001dc8 <UsageFault_Handler+0x4>

08001dca <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001dca:	b480      	push	{r7}
 8001dcc:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001dce:	bf00      	nop
 8001dd0:	46bd      	mov	sp, r7
 8001dd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dd6:	4770      	bx	lr

08001dd8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001dd8:	b480      	push	{r7}
 8001dda:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001ddc:	bf00      	nop
 8001dde:	46bd      	mov	sp, r7
 8001de0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001de4:	4770      	bx	lr

08001de6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001de6:	b480      	push	{r7}
 8001de8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001dea:	bf00      	nop
 8001dec:	46bd      	mov	sp, r7
 8001dee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001df2:	4770      	bx	lr

08001df4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001df4:	b580      	push	{r7, lr}
 8001df6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001df8:	f000 fac0 	bl	800237c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001dfc:	bf00      	nop
 8001dfe:	bd80      	pop	{r7, pc}

08001e00 <FDCAN1_IT0_IRQHandler>:

/**
  * @brief This function handles FDCAN1 interrupt 0.
  */
void FDCAN1_IT0_IRQHandler(void)
{
 8001e00:	b580      	push	{r7, lr}
 8001e02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FDCAN1_IT0_IRQn 0 */

  /* USER CODE END FDCAN1_IT0_IRQn 0 */
  HAL_FDCAN_IRQHandler(&hfdcan1);
 8001e04:	4802      	ldr	r0, [pc, #8]	; (8001e10 <FDCAN1_IT0_IRQHandler+0x10>)
 8001e06:	f002 f903 	bl	8004010 <HAL_FDCAN_IRQHandler>
  /* USER CODE BEGIN FDCAN1_IT0_IRQn 1 */

  /* USER CODE END FDCAN1_IT0_IRQn 1 */
}
 8001e0a:	bf00      	nop
 8001e0c:	bd80      	pop	{r7, pc}
 8001e0e:	bf00      	nop
 8001e10:	2400054c 	.word	0x2400054c

08001e14 <SDMMC1_IRQHandler>:

/**
  * @brief This function handles SDMMC1 global interrupt.
  */
void SDMMC1_IRQHandler(void)
{
 8001e14:	b580      	push	{r7, lr}
 8001e16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SDMMC1_IRQn 0 */

  /* USER CODE END SDMMC1_IRQn 0 */
  HAL_SD_IRQHandler(&hsd1);
 8001e18:	4802      	ldr	r0, [pc, #8]	; (8001e24 <SDMMC1_IRQHandler+0x10>)
 8001e1a:	f008 fb1f 	bl	800a45c <HAL_SD_IRQHandler>
  /* USER CODE BEGIN SDMMC1_IRQn 1 */

  /* USER CODE END SDMMC1_IRQn 1 */
}
 8001e1e:	bf00      	nop
 8001e20:	bd80      	pop	{r7, pc}
 8001e22:	bf00      	nop
 8001e24:	24000758 	.word	0x24000758

08001e28 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8001e28:	b580      	push	{r7, lr}
 8001e2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8001e2c:	4802      	ldr	r0, [pc, #8]	; (8001e38 <OTG_FS_IRQHandler+0x10>)
 8001e2e:	f003 fed4 	bl	8005bda <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8001e32:	bf00      	nop
 8001e34:	bd80      	pop	{r7, pc}
 8001e36:	bf00      	nop
 8001e38:	240012b4 	.word	0x240012b4

08001e3c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001e3c:	b480      	push	{r7}
 8001e3e:	af00      	add	r7, sp, #0
	return 1;
 8001e40:	2301      	movs	r3, #1
}
 8001e42:	4618      	mov	r0, r3
 8001e44:	46bd      	mov	sp, r7
 8001e46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e4a:	4770      	bx	lr

08001e4c <_kill>:

int _kill(int pid, int sig)
{
 8001e4c:	b580      	push	{r7, lr}
 8001e4e:	b082      	sub	sp, #8
 8001e50:	af00      	add	r7, sp, #0
 8001e52:	6078      	str	r0, [r7, #4]
 8001e54:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8001e56:	f011 fd61 	bl	801391c <__errno>
 8001e5a:	4603      	mov	r3, r0
 8001e5c:	2216      	movs	r2, #22
 8001e5e:	601a      	str	r2, [r3, #0]
	return -1;
 8001e60:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001e64:	4618      	mov	r0, r3
 8001e66:	3708      	adds	r7, #8
 8001e68:	46bd      	mov	sp, r7
 8001e6a:	bd80      	pop	{r7, pc}

08001e6c <_exit>:

void _exit (int status)
{
 8001e6c:	b580      	push	{r7, lr}
 8001e6e:	b082      	sub	sp, #8
 8001e70:	af00      	add	r7, sp, #0
 8001e72:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8001e74:	f04f 31ff 	mov.w	r1, #4294967295
 8001e78:	6878      	ldr	r0, [r7, #4]
 8001e7a:	f7ff ffe7 	bl	8001e4c <_kill>
	while (1) {}		/* Make sure we hang here */
 8001e7e:	e7fe      	b.n	8001e7e <_exit+0x12>

08001e80 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001e80:	b580      	push	{r7, lr}
 8001e82:	b086      	sub	sp, #24
 8001e84:	af00      	add	r7, sp, #0
 8001e86:	60f8      	str	r0, [r7, #12]
 8001e88:	60b9      	str	r1, [r7, #8]
 8001e8a:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001e8c:	2300      	movs	r3, #0
 8001e8e:	617b      	str	r3, [r7, #20]
 8001e90:	e00a      	b.n	8001ea8 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8001e92:	f3af 8000 	nop.w
 8001e96:	4601      	mov	r1, r0
 8001e98:	68bb      	ldr	r3, [r7, #8]
 8001e9a:	1c5a      	adds	r2, r3, #1
 8001e9c:	60ba      	str	r2, [r7, #8]
 8001e9e:	b2ca      	uxtb	r2, r1
 8001ea0:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001ea2:	697b      	ldr	r3, [r7, #20]
 8001ea4:	3301      	adds	r3, #1
 8001ea6:	617b      	str	r3, [r7, #20]
 8001ea8:	697a      	ldr	r2, [r7, #20]
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	429a      	cmp	r2, r3
 8001eae:	dbf0      	blt.n	8001e92 <_read+0x12>
	}

return len;
 8001eb0:	687b      	ldr	r3, [r7, #4]
}
 8001eb2:	4618      	mov	r0, r3
 8001eb4:	3718      	adds	r7, #24
 8001eb6:	46bd      	mov	sp, r7
 8001eb8:	bd80      	pop	{r7, pc}

08001eba <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001eba:	b580      	push	{r7, lr}
 8001ebc:	b086      	sub	sp, #24
 8001ebe:	af00      	add	r7, sp, #0
 8001ec0:	60f8      	str	r0, [r7, #12]
 8001ec2:	60b9      	str	r1, [r7, #8]
 8001ec4:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001ec6:	2300      	movs	r3, #0
 8001ec8:	617b      	str	r3, [r7, #20]
 8001eca:	e009      	b.n	8001ee0 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8001ecc:	68bb      	ldr	r3, [r7, #8]
 8001ece:	1c5a      	adds	r2, r3, #1
 8001ed0:	60ba      	str	r2, [r7, #8]
 8001ed2:	781b      	ldrb	r3, [r3, #0]
 8001ed4:	4618      	mov	r0, r3
 8001ed6:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001eda:	697b      	ldr	r3, [r7, #20]
 8001edc:	3301      	adds	r3, #1
 8001ede:	617b      	str	r3, [r7, #20]
 8001ee0:	697a      	ldr	r2, [r7, #20]
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	429a      	cmp	r2, r3
 8001ee6:	dbf1      	blt.n	8001ecc <_write+0x12>
	}
	return len;
 8001ee8:	687b      	ldr	r3, [r7, #4]
}
 8001eea:	4618      	mov	r0, r3
 8001eec:	3718      	adds	r7, #24
 8001eee:	46bd      	mov	sp, r7
 8001ef0:	bd80      	pop	{r7, pc}

08001ef2 <_close>:

int _close(int file)
{
 8001ef2:	b480      	push	{r7}
 8001ef4:	b083      	sub	sp, #12
 8001ef6:	af00      	add	r7, sp, #0
 8001ef8:	6078      	str	r0, [r7, #4]
	return -1;
 8001efa:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001efe:	4618      	mov	r0, r3
 8001f00:	370c      	adds	r7, #12
 8001f02:	46bd      	mov	sp, r7
 8001f04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f08:	4770      	bx	lr

08001f0a <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001f0a:	b480      	push	{r7}
 8001f0c:	b083      	sub	sp, #12
 8001f0e:	af00      	add	r7, sp, #0
 8001f10:	6078      	str	r0, [r7, #4]
 8001f12:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8001f14:	683b      	ldr	r3, [r7, #0]
 8001f16:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001f1a:	605a      	str	r2, [r3, #4]
	return 0;
 8001f1c:	2300      	movs	r3, #0
}
 8001f1e:	4618      	mov	r0, r3
 8001f20:	370c      	adds	r7, #12
 8001f22:	46bd      	mov	sp, r7
 8001f24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f28:	4770      	bx	lr

08001f2a <_isatty>:

int _isatty(int file)
{
 8001f2a:	b480      	push	{r7}
 8001f2c:	b083      	sub	sp, #12
 8001f2e:	af00      	add	r7, sp, #0
 8001f30:	6078      	str	r0, [r7, #4]
	return 1;
 8001f32:	2301      	movs	r3, #1
}
 8001f34:	4618      	mov	r0, r3
 8001f36:	370c      	adds	r7, #12
 8001f38:	46bd      	mov	sp, r7
 8001f3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f3e:	4770      	bx	lr

08001f40 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001f40:	b480      	push	{r7}
 8001f42:	b085      	sub	sp, #20
 8001f44:	af00      	add	r7, sp, #0
 8001f46:	60f8      	str	r0, [r7, #12]
 8001f48:	60b9      	str	r1, [r7, #8]
 8001f4a:	607a      	str	r2, [r7, #4]
	return 0;
 8001f4c:	2300      	movs	r3, #0
}
 8001f4e:	4618      	mov	r0, r3
 8001f50:	3714      	adds	r7, #20
 8001f52:	46bd      	mov	sp, r7
 8001f54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f58:	4770      	bx	lr
	...

08001f5c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001f5c:	b580      	push	{r7, lr}
 8001f5e:	b086      	sub	sp, #24
 8001f60:	af00      	add	r7, sp, #0
 8001f62:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001f64:	4a14      	ldr	r2, [pc, #80]	; (8001fb8 <_sbrk+0x5c>)
 8001f66:	4b15      	ldr	r3, [pc, #84]	; (8001fbc <_sbrk+0x60>)
 8001f68:	1ad3      	subs	r3, r2, r3
 8001f6a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001f6c:	697b      	ldr	r3, [r7, #20]
 8001f6e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001f70:	4b13      	ldr	r3, [pc, #76]	; (8001fc0 <_sbrk+0x64>)
 8001f72:	681b      	ldr	r3, [r3, #0]
 8001f74:	2b00      	cmp	r3, #0
 8001f76:	d102      	bne.n	8001f7e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001f78:	4b11      	ldr	r3, [pc, #68]	; (8001fc0 <_sbrk+0x64>)
 8001f7a:	4a12      	ldr	r2, [pc, #72]	; (8001fc4 <_sbrk+0x68>)
 8001f7c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001f7e:	4b10      	ldr	r3, [pc, #64]	; (8001fc0 <_sbrk+0x64>)
 8001f80:	681a      	ldr	r2, [r3, #0]
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	4413      	add	r3, r2
 8001f86:	693a      	ldr	r2, [r7, #16]
 8001f88:	429a      	cmp	r2, r3
 8001f8a:	d207      	bcs.n	8001f9c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001f8c:	f011 fcc6 	bl	801391c <__errno>
 8001f90:	4603      	mov	r3, r0
 8001f92:	220c      	movs	r2, #12
 8001f94:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001f96:	f04f 33ff 	mov.w	r3, #4294967295
 8001f9a:	e009      	b.n	8001fb0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001f9c:	4b08      	ldr	r3, [pc, #32]	; (8001fc0 <_sbrk+0x64>)
 8001f9e:	681b      	ldr	r3, [r3, #0]
 8001fa0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001fa2:	4b07      	ldr	r3, [pc, #28]	; (8001fc0 <_sbrk+0x64>)
 8001fa4:	681a      	ldr	r2, [r3, #0]
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	4413      	add	r3, r2
 8001faa:	4a05      	ldr	r2, [pc, #20]	; (8001fc0 <_sbrk+0x64>)
 8001fac:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001fae:	68fb      	ldr	r3, [r7, #12]
}
 8001fb0:	4618      	mov	r0, r3
 8001fb2:	3718      	adds	r7, #24
 8001fb4:	46bd      	mov	sp, r7
 8001fb6:	bd80      	pop	{r7, pc}
 8001fb8:	24080000 	.word	0x24080000
 8001fbc:	00001000 	.word	0x00001000
 8001fc0:	24000354 	.word	0x24000354
 8001fc4:	240016d0 	.word	0x240016d0

08001fc8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001fc8:	b480      	push	{r7}
 8001fca:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8001fcc:	4b39      	ldr	r3, [pc, #228]	; (80020b4 <SystemInit+0xec>)
 8001fce:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001fd2:	4a38      	ldr	r2, [pc, #224]	; (80020b4 <SystemInit+0xec>)
 8001fd4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001fd8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8001fdc:	4b36      	ldr	r3, [pc, #216]	; (80020b8 <SystemInit+0xf0>)
 8001fde:	681b      	ldr	r3, [r3, #0]
 8001fe0:	f003 030f 	and.w	r3, r3, #15
 8001fe4:	2b06      	cmp	r3, #6
 8001fe6:	d807      	bhi.n	8001ff8 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8001fe8:	4b33      	ldr	r3, [pc, #204]	; (80020b8 <SystemInit+0xf0>)
 8001fea:	681b      	ldr	r3, [r3, #0]
 8001fec:	f023 030f 	bic.w	r3, r3, #15
 8001ff0:	4a31      	ldr	r2, [pc, #196]	; (80020b8 <SystemInit+0xf0>)
 8001ff2:	f043 0307 	orr.w	r3, r3, #7
 8001ff6:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8001ff8:	4b30      	ldr	r3, [pc, #192]	; (80020bc <SystemInit+0xf4>)
 8001ffa:	681b      	ldr	r3, [r3, #0]
 8001ffc:	4a2f      	ldr	r2, [pc, #188]	; (80020bc <SystemInit+0xf4>)
 8001ffe:	f043 0301 	orr.w	r3, r3, #1
 8002002:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8002004:	4b2d      	ldr	r3, [pc, #180]	; (80020bc <SystemInit+0xf4>)
 8002006:	2200      	movs	r2, #0
 8002008:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 800200a:	4b2c      	ldr	r3, [pc, #176]	; (80020bc <SystemInit+0xf4>)
 800200c:	681a      	ldr	r2, [r3, #0]
 800200e:	492b      	ldr	r1, [pc, #172]	; (80020bc <SystemInit+0xf4>)
 8002010:	4b2b      	ldr	r3, [pc, #172]	; (80020c0 <SystemInit+0xf8>)
 8002012:	4013      	ands	r3, r2
 8002014:	600b      	str	r3, [r1, #0]
  
   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8002016:	4b28      	ldr	r3, [pc, #160]	; (80020b8 <SystemInit+0xf0>)
 8002018:	681b      	ldr	r3, [r3, #0]
 800201a:	f003 0308 	and.w	r3, r3, #8
 800201e:	2b00      	cmp	r3, #0
 8002020:	d007      	beq.n	8002032 <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8002022:	4b25      	ldr	r3, [pc, #148]	; (80020b8 <SystemInit+0xf0>)
 8002024:	681b      	ldr	r3, [r3, #0]
 8002026:	f023 030f 	bic.w	r3, r3, #15
 800202a:	4a23      	ldr	r2, [pc, #140]	; (80020b8 <SystemInit+0xf0>)
 800202c:	f043 0307 	orr.w	r3, r3, #7
 8002030:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8002032:	4b22      	ldr	r3, [pc, #136]	; (80020bc <SystemInit+0xf4>)
 8002034:	2200      	movs	r2, #0
 8002036:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8002038:	4b20      	ldr	r3, [pc, #128]	; (80020bc <SystemInit+0xf4>)
 800203a:	2200      	movs	r2, #0
 800203c:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 800203e:	4b1f      	ldr	r3, [pc, #124]	; (80020bc <SystemInit+0xf4>)
 8002040:	2200      	movs	r2, #0
 8002042:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8002044:	4b1d      	ldr	r3, [pc, #116]	; (80020bc <SystemInit+0xf4>)
 8002046:	4a1f      	ldr	r2, [pc, #124]	; (80020c4 <SystemInit+0xfc>)
 8002048:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 800204a:	4b1c      	ldr	r3, [pc, #112]	; (80020bc <SystemInit+0xf4>)
 800204c:	4a1e      	ldr	r2, [pc, #120]	; (80020c8 <SystemInit+0x100>)
 800204e:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8002050:	4b1a      	ldr	r3, [pc, #104]	; (80020bc <SystemInit+0xf4>)
 8002052:	4a1e      	ldr	r2, [pc, #120]	; (80020cc <SystemInit+0x104>)
 8002054:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8002056:	4b19      	ldr	r3, [pc, #100]	; (80020bc <SystemInit+0xf4>)
 8002058:	2200      	movs	r2, #0
 800205a:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 800205c:	4b17      	ldr	r3, [pc, #92]	; (80020bc <SystemInit+0xf4>)
 800205e:	4a1b      	ldr	r2, [pc, #108]	; (80020cc <SystemInit+0x104>)
 8002060:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8002062:	4b16      	ldr	r3, [pc, #88]	; (80020bc <SystemInit+0xf4>)
 8002064:	2200      	movs	r2, #0
 8002066:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8002068:	4b14      	ldr	r3, [pc, #80]	; (80020bc <SystemInit+0xf4>)
 800206a:	4a18      	ldr	r2, [pc, #96]	; (80020cc <SystemInit+0x104>)
 800206c:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 800206e:	4b13      	ldr	r3, [pc, #76]	; (80020bc <SystemInit+0xf4>)
 8002070:	2200      	movs	r2, #0
 8002072:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8002074:	4b11      	ldr	r3, [pc, #68]	; (80020bc <SystemInit+0xf4>)
 8002076:	681b      	ldr	r3, [r3, #0]
 8002078:	4a10      	ldr	r2, [pc, #64]	; (80020bc <SystemInit+0xf4>)
 800207a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800207e:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8002080:	4b0e      	ldr	r3, [pc, #56]	; (80020bc <SystemInit+0xf4>)
 8002082:	2200      	movs	r2, #0
 8002084:	661a      	str	r2, [r3, #96]	; 0x60

#if (STM32H7_DEV_ID == 0x450UL)
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 8002086:	4b12      	ldr	r3, [pc, #72]	; (80020d0 <SystemInit+0x108>)
 8002088:	681a      	ldr	r2, [r3, #0]
 800208a:	4b12      	ldr	r3, [pc, #72]	; (80020d4 <SystemInit+0x10c>)
 800208c:	4013      	ands	r3, r2
 800208e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002092:	d202      	bcs.n	800209a <SystemInit+0xd2>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 8002094:	4b10      	ldr	r3, [pc, #64]	; (80020d8 <SystemInit+0x110>)
 8002096:	2201      	movs	r2, #1
 8002098:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 800209a:	4b10      	ldr	r3, [pc, #64]	; (80020dc <SystemInit+0x114>)
 800209c:	f243 02d2 	movw	r2, #12498	; 0x30d2
 80020a0:	601a      	str	r2, [r3, #0]

  /* Configure the Vector Table location add offset address for cortex-M7 ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = D1_AXISRAM_BASE  | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal AXI-RAM */
#else
  SCB->VTOR = FLASH_BANK1_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80020a2:	4b04      	ldr	r3, [pc, #16]	; (80020b4 <SystemInit+0xec>)
 80020a4:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80020a8:	609a      	str	r2, [r3, #8]
#endif

#endif /*DUAL_CORE && CORE_CM4*/

}
 80020aa:	bf00      	nop
 80020ac:	46bd      	mov	sp, r7
 80020ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020b2:	4770      	bx	lr
 80020b4:	e000ed00 	.word	0xe000ed00
 80020b8:	52002000 	.word	0x52002000
 80020bc:	58024400 	.word	0x58024400
 80020c0:	eaf6ed7f 	.word	0xeaf6ed7f
 80020c4:	02020200 	.word	0x02020200
 80020c8:	01ff0000 	.word	0x01ff0000
 80020cc:	01010280 	.word	0x01010280
 80020d0:	5c001000 	.word	0x5c001000
 80020d4:	ffff0000 	.word	0xffff0000
 80020d8:	51008108 	.word	0x51008108
 80020dc:	52004000 	.word	0x52004000

080020e0 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 80020e0:	b580      	push	{r7, lr}
 80020e2:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80020e4:	4b22      	ldr	r3, [pc, #136]	; (8002170 <MX_USART1_UART_Init+0x90>)
 80020e6:	4a23      	ldr	r2, [pc, #140]	; (8002174 <MX_USART1_UART_Init+0x94>)
 80020e8:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80020ea:	4b21      	ldr	r3, [pc, #132]	; (8002170 <MX_USART1_UART_Init+0x90>)
 80020ec:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80020f0:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80020f2:	4b1f      	ldr	r3, [pc, #124]	; (8002170 <MX_USART1_UART_Init+0x90>)
 80020f4:	2200      	movs	r2, #0
 80020f6:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80020f8:	4b1d      	ldr	r3, [pc, #116]	; (8002170 <MX_USART1_UART_Init+0x90>)
 80020fa:	2200      	movs	r2, #0
 80020fc:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80020fe:	4b1c      	ldr	r3, [pc, #112]	; (8002170 <MX_USART1_UART_Init+0x90>)
 8002100:	2200      	movs	r2, #0
 8002102:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8002104:	4b1a      	ldr	r3, [pc, #104]	; (8002170 <MX_USART1_UART_Init+0x90>)
 8002106:	220c      	movs	r2, #12
 8002108:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800210a:	4b19      	ldr	r3, [pc, #100]	; (8002170 <MX_USART1_UART_Init+0x90>)
 800210c:	2200      	movs	r2, #0
 800210e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8002110:	4b17      	ldr	r3, [pc, #92]	; (8002170 <MX_USART1_UART_Init+0x90>)
 8002112:	2200      	movs	r2, #0
 8002114:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002116:	4b16      	ldr	r3, [pc, #88]	; (8002170 <MX_USART1_UART_Init+0x90>)
 8002118:	2200      	movs	r2, #0
 800211a:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 800211c:	4b14      	ldr	r3, [pc, #80]	; (8002170 <MX_USART1_UART_Init+0x90>)
 800211e:	2200      	movs	r2, #0
 8002120:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002122:	4b13      	ldr	r3, [pc, #76]	; (8002170 <MX_USART1_UART_Init+0x90>)
 8002124:	2200      	movs	r2, #0
 8002126:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8002128:	4811      	ldr	r0, [pc, #68]	; (8002170 <MX_USART1_UART_Init+0x90>)
 800212a:	f00a fabf 	bl	800c6ac <HAL_UART_Init>
 800212e:	4603      	mov	r3, r0
 8002130:	2b00      	cmp	r3, #0
 8002132:	d001      	beq.n	8002138 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 8002134:	f7ff fbf2 	bl	800191c <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002138:	2100      	movs	r1, #0
 800213a:	480d      	ldr	r0, [pc, #52]	; (8002170 <MX_USART1_UART_Init+0x90>)
 800213c:	f00b fa0c 	bl	800d558 <HAL_UARTEx_SetTxFifoThreshold>
 8002140:	4603      	mov	r3, r0
 8002142:	2b00      	cmp	r3, #0
 8002144:	d001      	beq.n	800214a <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 8002146:	f7ff fbe9 	bl	800191c <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800214a:	2100      	movs	r1, #0
 800214c:	4808      	ldr	r0, [pc, #32]	; (8002170 <MX_USART1_UART_Init+0x90>)
 800214e:	f00b fa41 	bl	800d5d4 <HAL_UARTEx_SetRxFifoThreshold>
 8002152:	4603      	mov	r3, r0
 8002154:	2b00      	cmp	r3, #0
 8002156:	d001      	beq.n	800215c <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 8002158:	f7ff fbe0 	bl	800191c <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 800215c:	4804      	ldr	r0, [pc, #16]	; (8002170 <MX_USART1_UART_Init+0x90>)
 800215e:	f00b f9c2 	bl	800d4e6 <HAL_UARTEx_DisableFifoMode>
 8002162:	4603      	mov	r3, r0
 8002164:	2b00      	cmp	r3, #0
 8002166:	d001      	beq.n	800216c <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 8002168:	f7ff fbd8 	bl	800191c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800216c:	bf00      	nop
 800216e:	bd80      	pop	{r7, pc}
 8002170:	240008e4 	.word	0x240008e4
 8002174:	40011000 	.word	0x40011000

08002178 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8002178:	b580      	push	{r7, lr}
 800217a:	b0b8      	sub	sp, #224	; 0xe0
 800217c:	af00      	add	r7, sp, #0
 800217e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002180:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8002184:	2200      	movs	r2, #0
 8002186:	601a      	str	r2, [r3, #0]
 8002188:	605a      	str	r2, [r3, #4]
 800218a:	609a      	str	r2, [r3, #8]
 800218c:	60da      	str	r2, [r3, #12]
 800218e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002190:	f107 0310 	add.w	r3, r7, #16
 8002194:	22bc      	movs	r2, #188	; 0xbc
 8002196:	2100      	movs	r1, #0
 8002198:	4618      	mov	r0, r3
 800219a:	f011 fbf7 	bl	801398c <memset>
  if(uartHandle->Instance==USART1)
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	681b      	ldr	r3, [r3, #0]
 80021a2:	4a25      	ldr	r2, [pc, #148]	; (8002238 <HAL_UART_MspInit+0xc0>)
 80021a4:	4293      	cmp	r3, r2
 80021a6:	d142      	bne.n	800222e <HAL_UART_MspInit+0xb6>
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 80021a8:	2301      	movs	r3, #1
 80021aa:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.Usart16ClockSelection = RCC_USART16CLKSOURCE_D2PCLK2;
 80021ac:	2300      	movs	r3, #0
 80021ae:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80021b2:	f107 0310 	add.w	r3, r7, #16
 80021b6:	4618      	mov	r0, r3
 80021b8:	f005 fd62 	bl	8007c80 <HAL_RCCEx_PeriphCLKConfig>
 80021bc:	4603      	mov	r3, r0
 80021be:	2b00      	cmp	r3, #0
 80021c0:	d001      	beq.n	80021c6 <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 80021c2:	f7ff fbab 	bl	800191c <Error_Handler>
    }

    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80021c6:	4b1d      	ldr	r3, [pc, #116]	; (800223c <HAL_UART_MspInit+0xc4>)
 80021c8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80021cc:	4a1b      	ldr	r2, [pc, #108]	; (800223c <HAL_UART_MspInit+0xc4>)
 80021ce:	f043 0310 	orr.w	r3, r3, #16
 80021d2:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 80021d6:	4b19      	ldr	r3, [pc, #100]	; (800223c <HAL_UART_MspInit+0xc4>)
 80021d8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80021dc:	f003 0310 	and.w	r3, r3, #16
 80021e0:	60fb      	str	r3, [r7, #12]
 80021e2:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80021e4:	4b15      	ldr	r3, [pc, #84]	; (800223c <HAL_UART_MspInit+0xc4>)
 80021e6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80021ea:	4a14      	ldr	r2, [pc, #80]	; (800223c <HAL_UART_MspInit+0xc4>)
 80021ec:	f043 0301 	orr.w	r3, r3, #1
 80021f0:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80021f4:	4b11      	ldr	r3, [pc, #68]	; (800223c <HAL_UART_MspInit+0xc4>)
 80021f6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80021fa:	f003 0301 	and.w	r3, r3, #1
 80021fe:	60bb      	str	r3, [r7, #8]
 8002200:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8002202:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8002206:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800220a:	2302      	movs	r3, #2
 800220c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002210:	2300      	movs	r3, #0
 8002212:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002216:	2300      	movs	r3, #0
 8002218:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800221c:	2307      	movs	r3, #7
 800221e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002222:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8002226:	4619      	mov	r1, r3
 8002228:	4805      	ldr	r0, [pc, #20]	; (8002240 <HAL_UART_MspInit+0xc8>)
 800222a:	f002 fb8b 	bl	8004944 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 800222e:	bf00      	nop
 8002230:	37e0      	adds	r7, #224	; 0xe0
 8002232:	46bd      	mov	sp, r7
 8002234:	bd80      	pop	{r7, pc}
 8002236:	bf00      	nop
 8002238:	40011000 	.word	0x40011000
 800223c:	58024400 	.word	0x58024400
 8002240:	58020000 	.word	0x58020000

08002244 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8002244:	f8df d034 	ldr.w	sp, [pc, #52]	; 800227c <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8002248:	f7ff febe 	bl	8001fc8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800224c:	480c      	ldr	r0, [pc, #48]	; (8002280 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800224e:	490d      	ldr	r1, [pc, #52]	; (8002284 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8002250:	4a0d      	ldr	r2, [pc, #52]	; (8002288 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8002252:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002254:	e002      	b.n	800225c <LoopCopyDataInit>

08002256 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002256:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002258:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800225a:	3304      	adds	r3, #4

0800225c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800225c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800225e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002260:	d3f9      	bcc.n	8002256 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002262:	4a0a      	ldr	r2, [pc, #40]	; (800228c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8002264:	4c0a      	ldr	r4, [pc, #40]	; (8002290 <LoopFillZerobss+0x22>)
  movs r3, #0
 8002266:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002268:	e001      	b.n	800226e <LoopFillZerobss>

0800226a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800226a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800226c:	3204      	adds	r2, #4

0800226e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800226e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002270:	d3fb      	bcc.n	800226a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8002272:	f011 fb59 	bl	8013928 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002276:	f011 f9af 	bl	80135d8 <main>
  bx  lr
 800227a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 800227c:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 8002280:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8002284:	24000330 	.word	0x24000330
  ldr r2, =_sidata
 8002288:	0801735c 	.word	0x0801735c
  ldr r2, =_sbss
 800228c:	24000330 	.word	0x24000330
  ldr r4, =_ebss
 8002290:	240016cc 	.word	0x240016cc

08002294 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002294:	e7fe      	b.n	8002294 <ADC3_IRQHandler>
	...

08002298 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002298:	b580      	push	{r7, lr}
 800229a:	b082      	sub	sp, #8
 800229c:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800229e:	2003      	movs	r0, #3
 80022a0:	f001 fa2a 	bl	80036f8 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80022a4:	f005 fb16 	bl	80078d4 <HAL_RCC_GetSysClockFreq>
 80022a8:	4602      	mov	r2, r0
 80022aa:	4b15      	ldr	r3, [pc, #84]	; (8002300 <HAL_Init+0x68>)
 80022ac:	699b      	ldr	r3, [r3, #24]
 80022ae:	0a1b      	lsrs	r3, r3, #8
 80022b0:	f003 030f 	and.w	r3, r3, #15
 80022b4:	4913      	ldr	r1, [pc, #76]	; (8002304 <HAL_Init+0x6c>)
 80022b6:	5ccb      	ldrb	r3, [r1, r3]
 80022b8:	f003 031f 	and.w	r3, r3, #31
 80022bc:	fa22 f303 	lsr.w	r3, r2, r3
 80022c0:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80022c2:	4b0f      	ldr	r3, [pc, #60]	; (8002300 <HAL_Init+0x68>)
 80022c4:	699b      	ldr	r3, [r3, #24]
 80022c6:	f003 030f 	and.w	r3, r3, #15
 80022ca:	4a0e      	ldr	r2, [pc, #56]	; (8002304 <HAL_Init+0x6c>)
 80022cc:	5cd3      	ldrb	r3, [r2, r3]
 80022ce:	f003 031f 	and.w	r3, r3, #31
 80022d2:	687a      	ldr	r2, [r7, #4]
 80022d4:	fa22 f303 	lsr.w	r3, r2, r3
 80022d8:	4a0b      	ldr	r2, [pc, #44]	; (8002308 <HAL_Init+0x70>)
 80022da:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80022dc:	4a0b      	ldr	r2, [pc, #44]	; (800230c <HAL_Init+0x74>)
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80022e2:	2000      	movs	r0, #0
 80022e4:	f000 f814 	bl	8002310 <HAL_InitTick>
 80022e8:	4603      	mov	r3, r0
 80022ea:	2b00      	cmp	r3, #0
 80022ec:	d001      	beq.n	80022f2 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 80022ee:	2301      	movs	r3, #1
 80022f0:	e002      	b.n	80022f8 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 80022f2:	f7ff fd41 	bl	8001d78 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80022f6:	2300      	movs	r3, #0
}
 80022f8:	4618      	mov	r0, r3
 80022fa:	3708      	adds	r7, #8
 80022fc:	46bd      	mov	sp, r7
 80022fe:	bd80      	pop	{r7, pc}
 8002300:	58024400 	.word	0x58024400
 8002304:	080166e8 	.word	0x080166e8
 8002308:	24000004 	.word	0x24000004
 800230c:	24000000 	.word	0x24000000

08002310 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002310:	b580      	push	{r7, lr}
 8002312:	b082      	sub	sp, #8
 8002314:	af00      	add	r7, sp, #0
 8002316:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8002318:	4b15      	ldr	r3, [pc, #84]	; (8002370 <HAL_InitTick+0x60>)
 800231a:	781b      	ldrb	r3, [r3, #0]
 800231c:	2b00      	cmp	r3, #0
 800231e:	d101      	bne.n	8002324 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8002320:	2301      	movs	r3, #1
 8002322:	e021      	b.n	8002368 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8002324:	4b13      	ldr	r3, [pc, #76]	; (8002374 <HAL_InitTick+0x64>)
 8002326:	681a      	ldr	r2, [r3, #0]
 8002328:	4b11      	ldr	r3, [pc, #68]	; (8002370 <HAL_InitTick+0x60>)
 800232a:	781b      	ldrb	r3, [r3, #0]
 800232c:	4619      	mov	r1, r3
 800232e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002332:	fbb3 f3f1 	udiv	r3, r3, r1
 8002336:	fbb2 f3f3 	udiv	r3, r2, r3
 800233a:	4618      	mov	r0, r3
 800233c:	f001 fa0f 	bl	800375e <HAL_SYSTICK_Config>
 8002340:	4603      	mov	r3, r0
 8002342:	2b00      	cmp	r3, #0
 8002344:	d001      	beq.n	800234a <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8002346:	2301      	movs	r3, #1
 8002348:	e00e      	b.n	8002368 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	2b0f      	cmp	r3, #15
 800234e:	d80a      	bhi.n	8002366 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002350:	2200      	movs	r2, #0
 8002352:	6879      	ldr	r1, [r7, #4]
 8002354:	f04f 30ff 	mov.w	r0, #4294967295
 8002358:	f001 f9d9 	bl	800370e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800235c:	4a06      	ldr	r2, [pc, #24]	; (8002378 <HAL_InitTick+0x68>)
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002362:	2300      	movs	r3, #0
 8002364:	e000      	b.n	8002368 <HAL_InitTick+0x58>
    return HAL_ERROR;
 8002366:	2301      	movs	r3, #1
}
 8002368:	4618      	mov	r0, r3
 800236a:	3708      	adds	r7, #8
 800236c:	46bd      	mov	sp, r7
 800236e:	bd80      	pop	{r7, pc}
 8002370:	2400000c 	.word	0x2400000c
 8002374:	24000000 	.word	0x24000000
 8002378:	24000008 	.word	0x24000008

0800237c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800237c:	b480      	push	{r7}
 800237e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8002380:	4b06      	ldr	r3, [pc, #24]	; (800239c <HAL_IncTick+0x20>)
 8002382:	781b      	ldrb	r3, [r3, #0]
 8002384:	461a      	mov	r2, r3
 8002386:	4b06      	ldr	r3, [pc, #24]	; (80023a0 <HAL_IncTick+0x24>)
 8002388:	681b      	ldr	r3, [r3, #0]
 800238a:	4413      	add	r3, r2
 800238c:	4a04      	ldr	r2, [pc, #16]	; (80023a0 <HAL_IncTick+0x24>)
 800238e:	6013      	str	r3, [r2, #0]
}
 8002390:	bf00      	nop
 8002392:	46bd      	mov	sp, r7
 8002394:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002398:	4770      	bx	lr
 800239a:	bf00      	nop
 800239c:	2400000c 	.word	0x2400000c
 80023a0:	24000974 	.word	0x24000974

080023a4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80023a4:	b480      	push	{r7}
 80023a6:	af00      	add	r7, sp, #0
  return uwTick;
 80023a8:	4b03      	ldr	r3, [pc, #12]	; (80023b8 <HAL_GetTick+0x14>)
 80023aa:	681b      	ldr	r3, [r3, #0]
}
 80023ac:	4618      	mov	r0, r3
 80023ae:	46bd      	mov	sp, r7
 80023b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023b4:	4770      	bx	lr
 80023b6:	bf00      	nop
 80023b8:	24000974 	.word	0x24000974

080023bc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80023bc:	b580      	push	{r7, lr}
 80023be:	b084      	sub	sp, #16
 80023c0:	af00      	add	r7, sp, #0
 80023c2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80023c4:	f7ff ffee 	bl	80023a4 <HAL_GetTick>
 80023c8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80023ce:	68fb      	ldr	r3, [r7, #12]
 80023d0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80023d4:	d005      	beq.n	80023e2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80023d6:	4b0a      	ldr	r3, [pc, #40]	; (8002400 <HAL_Delay+0x44>)
 80023d8:	781b      	ldrb	r3, [r3, #0]
 80023da:	461a      	mov	r2, r3
 80023dc:	68fb      	ldr	r3, [r7, #12]
 80023de:	4413      	add	r3, r2
 80023e0:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80023e2:	bf00      	nop
 80023e4:	f7ff ffde 	bl	80023a4 <HAL_GetTick>
 80023e8:	4602      	mov	r2, r0
 80023ea:	68bb      	ldr	r3, [r7, #8]
 80023ec:	1ad3      	subs	r3, r2, r3
 80023ee:	68fa      	ldr	r2, [r7, #12]
 80023f0:	429a      	cmp	r2, r3
 80023f2:	d8f7      	bhi.n	80023e4 <HAL_Delay+0x28>
  {
  }
}
 80023f4:	bf00      	nop
 80023f6:	bf00      	nop
 80023f8:	3710      	adds	r7, #16
 80023fa:	46bd      	mov	sp, r7
 80023fc:	bd80      	pop	{r7, pc}
 80023fe:	bf00      	nop
 8002400:	2400000c 	.word	0x2400000c

08002404 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8002404:	b480      	push	{r7}
 8002406:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8002408:	4b03      	ldr	r3, [pc, #12]	; (8002418 <HAL_GetREVID+0x14>)
 800240a:	681b      	ldr	r3, [r3, #0]
 800240c:	0c1b      	lsrs	r3, r3, #16
}
 800240e:	4618      	mov	r0, r3
 8002410:	46bd      	mov	sp, r7
 8002412:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002416:	4770      	bx	lr
 8002418:	5c001000 	.word	0x5c001000

0800241c <HAL_SetFMCMemorySwappingConfig>:
  * @param  BankMapConfig: Defines the FMC Bank mapping configuration. This parameter can be
            FMC_SWAPBMAP_DISABLE, FMC_SWAPBMAP_SDRAM_SRAM, FMC_SWAPBMAP_SDRAMB2
  * @retval HAL state
  */
void HAL_SetFMCMemorySwappingConfig(uint32_t BankMapConfig)
{
 800241c:	b480      	push	{r7}
 800241e:	b083      	sub	sp, #12
 8002420:	af00      	add	r7, sp, #0
 8002422:	6078      	str	r0, [r7, #4]
  /* Check the parameter */
  assert_param(IS_FMC_SWAPBMAP_MODE(BankMapConfig));
  MODIFY_REG(FMC_Bank1_R->BTCR[0], FMC_BCR1_BMAP, BankMapConfig);
 8002424:	4b06      	ldr	r3, [pc, #24]	; (8002440 <HAL_SetFMCMemorySwappingConfig+0x24>)
 8002426:	681b      	ldr	r3, [r3, #0]
 8002428:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 800242c:	4904      	ldr	r1, [pc, #16]	; (8002440 <HAL_SetFMCMemorySwappingConfig+0x24>)
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	4313      	orrs	r3, r2
 8002432:	600b      	str	r3, [r1, #0]
}
 8002434:	bf00      	nop
 8002436:	370c      	adds	r7, #12
 8002438:	46bd      	mov	sp, r7
 800243a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800243e:	4770      	bx	lr
 8002440:	52004000 	.word	0x52004000

08002444 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8002444:	b480      	push	{r7}
 8002446:	b083      	sub	sp, #12
 8002448:	af00      	add	r7, sp, #0
 800244a:	6078      	str	r0, [r7, #4]
 800244c:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	689b      	ldr	r3, [r3, #8]
 8002452:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 8002456:	683b      	ldr	r3, [r7, #0]
 8002458:	431a      	orrs	r2, r3
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	609a      	str	r2, [r3, #8]
}
 800245e:	bf00      	nop
 8002460:	370c      	adds	r7, #12
 8002462:	46bd      	mov	sp, r7
 8002464:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002468:	4770      	bx	lr

0800246a <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 800246a:	b480      	push	{r7}
 800246c:	b083      	sub	sp, #12
 800246e:	af00      	add	r7, sp, #0
 8002470:	6078      	str	r0, [r7, #4]
 8002472:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	689b      	ldr	r3, [r3, #8]
 8002478:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 800247c:	683b      	ldr	r3, [r7, #0]
 800247e:	431a      	orrs	r2, r3
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	609a      	str	r2, [r3, #8]
}
 8002484:	bf00      	nop
 8002486:	370c      	adds	r7, #12
 8002488:	46bd      	mov	sp, r7
 800248a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800248e:	4770      	bx	lr

08002490 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8002490:	b480      	push	{r7}
 8002492:	b083      	sub	sp, #12
 8002494:	af00      	add	r7, sp, #0
 8002496:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	689b      	ldr	r3, [r3, #8]
 800249c:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 80024a0:	4618      	mov	r0, r3
 80024a2:	370c      	adds	r7, #12
 80024a4:	46bd      	mov	sp, r7
 80024a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024aa:	4770      	bx	lr

080024ac <LL_ADC_SetOffset>:
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0x1FFFFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 80024ac:	b480      	push	{r7}
 80024ae:	b087      	sub	sp, #28
 80024b0:	af00      	add	r7, sp, #0
 80024b2:	60f8      	str	r0, [r7, #12]
 80024b4:	60b9      	str	r1, [r7, #8]
 80024b6:	607a      	str	r2, [r7, #4]
 80024b8:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80024ba:	68fb      	ldr	r3, [r7, #12]
 80024bc:	3360      	adds	r3, #96	; 0x60
 80024be:	461a      	mov	r2, r3
 80024c0:	68bb      	ldr	r3, [r7, #8]
 80024c2:	009b      	lsls	r3, r3, #2
 80024c4:	4413      	add	r3, r2
 80024c6:	617b      	str	r3, [r7, #20]
               ADC3_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
  else
#endif /* ADC_VER_V5_V90 */
  {
    MODIFY_REG(*preg,
 80024c8:	697b      	ldr	r3, [r7, #20]
 80024ca:	681b      	ldr	r3, [r3, #0]
 80024cc:	f003 4200 	and.w	r2, r3, #2147483648	; 0x80000000
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	f003 41f8 	and.w	r1, r3, #2080374784	; 0x7c000000
 80024d6:	683b      	ldr	r3, [r7, #0]
 80024d8:	430b      	orrs	r3, r1
 80024da:	431a      	orrs	r2, r3
 80024dc:	697b      	ldr	r3, [r7, #20]
 80024de:	601a      	str	r2, [r3, #0]
               ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
               (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
}
 80024e0:	bf00      	nop
 80024e2:	371c      	adds	r7, #28
 80024e4:	46bd      	mov	sp, r7
 80024e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024ea:	4770      	bx	lr

080024ec <LL_ADC_SetDataRightShift>:
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_ENABLE
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetDataRightShift(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t RigthShift)
{
 80024ec:	b480      	push	{r7}
 80024ee:	b085      	sub	sp, #20
 80024f0:	af00      	add	r7, sp, #0
 80024f2:	60f8      	str	r0, [r7, #12]
 80024f4:	60b9      	str	r1, [r7, #8]
 80024f6:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->CFGR2, (ADC_CFGR2_RSHIFT1 | ADC_CFGR2_RSHIFT2 | ADC_CFGR2_RSHIFT3 | ADC_CFGR2_RSHIFT4), RigthShift << (Offsety & 0x1FUL));
 80024f8:	68fb      	ldr	r3, [r7, #12]
 80024fa:	691b      	ldr	r3, [r3, #16]
 80024fc:	f423 42f0 	bic.w	r2, r3, #30720	; 0x7800
 8002500:	68bb      	ldr	r3, [r7, #8]
 8002502:	f003 031f 	and.w	r3, r3, #31
 8002506:	6879      	ldr	r1, [r7, #4]
 8002508:	fa01 f303 	lsl.w	r3, r1, r3
 800250c:	431a      	orrs	r2, r3
 800250e:	68fb      	ldr	r3, [r7, #12]
 8002510:	611a      	str	r2, [r3, #16]
}
 8002512:	bf00      	nop
 8002514:	3714      	adds	r7, #20
 8002516:	46bd      	mov	sp, r7
 8002518:	f85d 7b04 	ldr.w	r7, [sp], #4
 800251c:	4770      	bx	lr

0800251e <LL_ADC_SetOffsetSignedSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSignedSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSignedSaturation)
{
 800251e:	b480      	push	{r7}
 8002520:	b087      	sub	sp, #28
 8002522:	af00      	add	r7, sp, #0
 8002524:	60f8      	str	r0, [r7, #12]
 8002526:	60b9      	str	r1, [r7, #8]
 8002528:	607a      	str	r2, [r7, #4]
    /* Function not available on this instance */
  }
  else
#endif  /* ADC_VER_V5_V90 */
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800252a:	68fb      	ldr	r3, [r7, #12]
 800252c:	3360      	adds	r3, #96	; 0x60
 800252e:	461a      	mov	r2, r3
 8002530:	68bb      	ldr	r3, [r7, #8]
 8002532:	009b      	lsls	r3, r3, #2
 8002534:	4413      	add	r3, r2
 8002536:	617b      	str	r3, [r7, #20]
    MODIFY_REG(*preg, ADC_OFR1_SSATE, OffsetSignedSaturation);
 8002538:	697b      	ldr	r3, [r7, #20]
 800253a:	681b      	ldr	r3, [r3, #0]
 800253c:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	431a      	orrs	r2, r3
 8002544:	697b      	ldr	r3, [r7, #20]
 8002546:	601a      	str	r2, [r3, #0]
  }
}
 8002548:	bf00      	nop
 800254a:	371c      	adds	r7, #28
 800254c:	46bd      	mov	sp, r7
 800254e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002552:	4770      	bx	lr

08002554 <LL_ADC_REG_SetSequencerRanks>:
  *         (3) On STM32H7, fast channel (0.125 us for 14-bit resolution (ADC conversion rate up to 8 Ms/s)).
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8002554:	b480      	push	{r7}
 8002556:	b087      	sub	sp, #28
 8002558:	af00      	add	r7, sp, #0
 800255a:	60f8      	str	r0, [r7, #12]
 800255c:	60b9      	str	r1, [r7, #8]
 800255e:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8002560:	68fb      	ldr	r3, [r7, #12]
 8002562:	3330      	adds	r3, #48	; 0x30
 8002564:	461a      	mov	r2, r3
 8002566:	68bb      	ldr	r3, [r7, #8]
 8002568:	0a1b      	lsrs	r3, r3, #8
 800256a:	009b      	lsls	r3, r3, #2
 800256c:	f003 030c 	and.w	r3, r3, #12
 8002570:	4413      	add	r3, r2
 8002572:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002574:	697b      	ldr	r3, [r7, #20]
 8002576:	681a      	ldr	r2, [r3, #0]
 8002578:	68bb      	ldr	r3, [r7, #8]
 800257a:	f003 031f 	and.w	r3, r3, #31
 800257e:	211f      	movs	r1, #31
 8002580:	fa01 f303 	lsl.w	r3, r1, r3
 8002584:	43db      	mvns	r3, r3
 8002586:	401a      	ands	r2, r3
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	0e9b      	lsrs	r3, r3, #26
 800258c:	f003 011f 	and.w	r1, r3, #31
 8002590:	68bb      	ldr	r3, [r7, #8]
 8002592:	f003 031f 	and.w	r3, r3, #31
 8002596:	fa01 f303 	lsl.w	r3, r1, r3
 800259a:	431a      	orrs	r2, r3
 800259c:	697b      	ldr	r3, [r7, #20]
 800259e:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 80025a0:	bf00      	nop
 80025a2:	371c      	adds	r7, #28
 80025a4:	46bd      	mov	sp, r7
 80025a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025aa:	4770      	bx	lr

080025ac <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_387CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_810CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 80025ac:	b480      	push	{r7}
 80025ae:	b087      	sub	sp, #28
 80025b0:	af00      	add	r7, sp, #0
 80025b2:	60f8      	str	r0, [r7, #12]
 80025b4:	60b9      	str	r1, [r7, #8]
 80025b6:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 80025b8:	68fb      	ldr	r3, [r7, #12]
 80025ba:	3314      	adds	r3, #20
 80025bc:	461a      	mov	r2, r3
 80025be:	68bb      	ldr	r3, [r7, #8]
 80025c0:	0e5b      	lsrs	r3, r3, #25
 80025c2:	009b      	lsls	r3, r3, #2
 80025c4:	f003 0304 	and.w	r3, r3, #4
 80025c8:	4413      	add	r3, r2
 80025ca:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80025cc:	697b      	ldr	r3, [r7, #20]
 80025ce:	681a      	ldr	r2, [r3, #0]
 80025d0:	68bb      	ldr	r3, [r7, #8]
 80025d2:	0d1b      	lsrs	r3, r3, #20
 80025d4:	f003 031f 	and.w	r3, r3, #31
 80025d8:	2107      	movs	r1, #7
 80025da:	fa01 f303 	lsl.w	r3, r1, r3
 80025de:	43db      	mvns	r3, r3
 80025e0:	401a      	ands	r2, r3
 80025e2:	68bb      	ldr	r3, [r7, #8]
 80025e4:	0d1b      	lsrs	r3, r3, #20
 80025e6:	f003 031f 	and.w	r3, r3, #31
 80025ea:	6879      	ldr	r1, [r7, #4]
 80025ec:	fa01 f303 	lsl.w	r3, r1, r3
 80025f0:	431a      	orrs	r2, r3
 80025f2:	697b      	ldr	r3, [r7, #20]
 80025f4:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 80025f6:	bf00      	nop
 80025f8:	371c      	adds	r7, #28
 80025fa:	46bd      	mov	sp, r7
 80025fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002600:	4770      	bx	lr
	...

08002604 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8002604:	b480      	push	{r7}
 8002606:	b085      	sub	sp, #20
 8002608:	af00      	add	r7, sp, #0
 800260a:	60f8      	str	r0, [r7, #12]
 800260c:	60b9      	str	r1, [r7, #8]
 800260e:	607a      	str	r2, [r7, #4]
  }
#else  /* ADC_VER_V5_V90 */
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8002610:	68fb      	ldr	r3, [r7, #12]
 8002612:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
 8002616:	68bb      	ldr	r3, [r7, #8]
 8002618:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800261c:	43db      	mvns	r3, r3
 800261e:	401a      	ands	r2, r3
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	f003 0318 	and.w	r3, r3, #24
 8002626:	4908      	ldr	r1, [pc, #32]	; (8002648 <LL_ADC_SetChannelSingleDiff+0x44>)
 8002628:	40d9      	lsrs	r1, r3
 800262a:	68bb      	ldr	r3, [r7, #8]
 800262c:	400b      	ands	r3, r1
 800262e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002632:	431a      	orrs	r2, r3
 8002634:	68fb      	ldr	r3, [r7, #12]
 8002636:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
#endif
}
 800263a:	bf00      	nop
 800263c:	3714      	adds	r7, #20
 800263e:	46bd      	mov	sp, r7
 8002640:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002644:	4770      	bx	lr
 8002646:	bf00      	nop
 8002648:	000fffff 	.word	0x000fffff

0800264c <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 800264c:	b480      	push	{r7}
 800264e:	b083      	sub	sp, #12
 8002650:	af00      	add	r7, sp, #0
 8002652:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	689a      	ldr	r2, [r3, #8]
 8002658:	4b04      	ldr	r3, [pc, #16]	; (800266c <LL_ADC_DisableDeepPowerDown+0x20>)
 800265a:	4013      	ands	r3, r2
 800265c:	687a      	ldr	r2, [r7, #4]
 800265e:	6093      	str	r3, [r2, #8]
}
 8002660:	bf00      	nop
 8002662:	370c      	adds	r7, #12
 8002664:	46bd      	mov	sp, r7
 8002666:	f85d 7b04 	ldr.w	r7, [sp], #4
 800266a:	4770      	bx	lr
 800266c:	5fffffc0 	.word	0x5fffffc0

08002670 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 8002670:	b480      	push	{r7}
 8002672:	b083      	sub	sp, #12
 8002674:	af00      	add	r7, sp, #0
 8002676:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	689b      	ldr	r3, [r3, #8]
 800267c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002680:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002684:	d101      	bne.n	800268a <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8002686:	2301      	movs	r3, #1
 8002688:	e000      	b.n	800268c <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 800268a:	2300      	movs	r3, #0
}
 800268c:	4618      	mov	r0, r3
 800268e:	370c      	adds	r7, #12
 8002690:	46bd      	mov	sp, r7
 8002692:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002696:	4770      	bx	lr

08002698 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8002698:	b480      	push	{r7}
 800269a:	b083      	sub	sp, #12
 800269c:	af00      	add	r7, sp, #0
 800269e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	689a      	ldr	r2, [r3, #8]
 80026a4:	4b05      	ldr	r3, [pc, #20]	; (80026bc <LL_ADC_EnableInternalRegulator+0x24>)
 80026a6:	4013      	ands	r3, r2
 80026a8:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 80026b0:	bf00      	nop
 80026b2:	370c      	adds	r7, #12
 80026b4:	46bd      	mov	sp, r7
 80026b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026ba:	4770      	bx	lr
 80026bc:	6fffffc0 	.word	0x6fffffc0

080026c0 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 80026c0:	b480      	push	{r7}
 80026c2:	b083      	sub	sp, #12
 80026c4:	af00      	add	r7, sp, #0
 80026c6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	689b      	ldr	r3, [r3, #8]
 80026cc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80026d0:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80026d4:	d101      	bne.n	80026da <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 80026d6:	2301      	movs	r3, #1
 80026d8:	e000      	b.n	80026dc <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 80026da:	2300      	movs	r3, #0
}
 80026dc:	4618      	mov	r0, r3
 80026de:	370c      	adds	r7, #12
 80026e0:	46bd      	mov	sp, r7
 80026e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026e6:	4770      	bx	lr

080026e8 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 80026e8:	b480      	push	{r7}
 80026ea:	b083      	sub	sp, #12
 80026ec:	af00      	add	r7, sp, #0
 80026ee:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	689b      	ldr	r3, [r3, #8]
 80026f4:	f003 0301 	and.w	r3, r3, #1
 80026f8:	2b01      	cmp	r3, #1
 80026fa:	d101      	bne.n	8002700 <LL_ADC_IsEnabled+0x18>
 80026fc:	2301      	movs	r3, #1
 80026fe:	e000      	b.n	8002702 <LL_ADC_IsEnabled+0x1a>
 8002700:	2300      	movs	r3, #0
}
 8002702:	4618      	mov	r0, r3
 8002704:	370c      	adds	r7, #12
 8002706:	46bd      	mov	sp, r7
 8002708:	f85d 7b04 	ldr.w	r7, [sp], #4
 800270c:	4770      	bx	lr

0800270e <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 800270e:	b480      	push	{r7}
 8002710:	b083      	sub	sp, #12
 8002712:	af00      	add	r7, sp, #0
 8002714:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	689b      	ldr	r3, [r3, #8]
 800271a:	f003 0304 	and.w	r3, r3, #4
 800271e:	2b04      	cmp	r3, #4
 8002720:	d101      	bne.n	8002726 <LL_ADC_REG_IsConversionOngoing+0x18>
 8002722:	2301      	movs	r3, #1
 8002724:	e000      	b.n	8002728 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8002726:	2300      	movs	r3, #0
}
 8002728:	4618      	mov	r0, r3
 800272a:	370c      	adds	r7, #12
 800272c:	46bd      	mov	sp, r7
 800272e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002732:	4770      	bx	lr

08002734 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8002734:	b480      	push	{r7}
 8002736:	b083      	sub	sp, #12
 8002738:	af00      	add	r7, sp, #0
 800273a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	689b      	ldr	r3, [r3, #8]
 8002740:	f003 0308 	and.w	r3, r3, #8
 8002744:	2b08      	cmp	r3, #8
 8002746:	d101      	bne.n	800274c <LL_ADC_INJ_IsConversionOngoing+0x18>
 8002748:	2301      	movs	r3, #1
 800274a:	e000      	b.n	800274e <LL_ADC_INJ_IsConversionOngoing+0x1a>
 800274c:	2300      	movs	r3, #0
}
 800274e:	4618      	mov	r0, r3
 8002750:	370c      	adds	r7, #12
 8002752:	46bd      	mov	sp, r7
 8002754:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002758:	4770      	bx	lr
	...

0800275c <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 800275c:	b590      	push	{r4, r7, lr}
 800275e:	b089      	sub	sp, #36	; 0x24
 8002760:	af00      	add	r7, sp, #0
 8002762:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002764:	2300      	movs	r3, #0
 8002766:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8002768:	2300      	movs	r3, #0
 800276a:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	2b00      	cmp	r3, #0
 8002770:	d101      	bne.n	8002776 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8002772:	2301      	movs	r3, #1
 8002774:	e18e      	b.n	8002a94 <HAL_ADC_Init+0x338>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	68db      	ldr	r3, [r3, #12]
 800277a:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002780:	2b00      	cmp	r3, #0
 8002782:	d109      	bne.n	8002798 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002784:	6878      	ldr	r0, [r7, #4]
 8002786:	f7fe f8c5 	bl	8000914 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	2200      	movs	r2, #0
 800278e:	659a      	str	r2, [r3, #88]	; 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	2200      	movs	r2, #0
 8002794:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	681b      	ldr	r3, [r3, #0]
 800279c:	4618      	mov	r0, r3
 800279e:	f7ff ff67 	bl	8002670 <LL_ADC_IsDeepPowerDownEnabled>
 80027a2:	4603      	mov	r3, r0
 80027a4:	2b00      	cmp	r3, #0
 80027a6:	d004      	beq.n	80027b2 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	681b      	ldr	r3, [r3, #0]
 80027ac:	4618      	mov	r0, r3
 80027ae:	f7ff ff4d 	bl	800264c <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	681b      	ldr	r3, [r3, #0]
 80027b6:	4618      	mov	r0, r3
 80027b8:	f7ff ff82 	bl	80026c0 <LL_ADC_IsInternalRegulatorEnabled>
 80027bc:	4603      	mov	r3, r0
 80027be:	2b00      	cmp	r3, #0
 80027c0:	d114      	bne.n	80027ec <HAL_ADC_Init+0x90>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	681b      	ldr	r3, [r3, #0]
 80027c6:	4618      	mov	r0, r3
 80027c8:	f7ff ff66 	bl	8002698 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80027cc:	4b9a      	ldr	r3, [pc, #616]	; (8002a38 <HAL_ADC_Init+0x2dc>)
 80027ce:	681b      	ldr	r3, [r3, #0]
 80027d0:	099b      	lsrs	r3, r3, #6
 80027d2:	4a9a      	ldr	r2, [pc, #616]	; (8002a3c <HAL_ADC_Init+0x2e0>)
 80027d4:	fba2 2303 	umull	r2, r3, r2, r3
 80027d8:	099b      	lsrs	r3, r3, #6
 80027da:	3301      	adds	r3, #1
 80027dc:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 80027de:	e002      	b.n	80027e6 <HAL_ADC_Init+0x8a>
    {
      wait_loop_index--;
 80027e0:	68bb      	ldr	r3, [r7, #8]
 80027e2:	3b01      	subs	r3, #1
 80027e4:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 80027e6:	68bb      	ldr	r3, [r7, #8]
 80027e8:	2b00      	cmp	r3, #0
 80027ea:	d1f9      	bne.n	80027e0 <HAL_ADC_Init+0x84>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	681b      	ldr	r3, [r3, #0]
 80027f0:	4618      	mov	r0, r3
 80027f2:	f7ff ff65 	bl	80026c0 <LL_ADC_IsInternalRegulatorEnabled>
 80027f6:	4603      	mov	r3, r0
 80027f8:	2b00      	cmp	r3, #0
 80027fa:	d10d      	bne.n	8002818 <HAL_ADC_Init+0xbc>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002800:	f043 0210 	orr.w	r2, r3, #16
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800280c:	f043 0201 	orr.w	r2, r3, #1
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8002814:	2301      	movs	r3, #1
 8002816:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	681b      	ldr	r3, [r3, #0]
 800281c:	4618      	mov	r0, r3
 800281e:	f7ff ff76 	bl	800270e <LL_ADC_REG_IsConversionOngoing>
 8002822:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002828:	f003 0310 	and.w	r3, r3, #16
 800282c:	2b00      	cmp	r3, #0
 800282e:	f040 8128 	bne.w	8002a82 <HAL_ADC_Init+0x326>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8002832:	697b      	ldr	r3, [r7, #20]
 8002834:	2b00      	cmp	r3, #0
 8002836:	f040 8124 	bne.w	8002a82 <HAL_ADC_Init+0x326>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800283e:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8002842:	f043 0202 	orr.w	r2, r3, #2
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	655a      	str	r2, [r3, #84]	; 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	681b      	ldr	r3, [r3, #0]
 800284e:	4618      	mov	r0, r3
 8002850:	f7ff ff4a 	bl	80026e8 <LL_ADC_IsEnabled>
 8002854:	4603      	mov	r3, r0
 8002856:	2b00      	cmp	r3, #0
 8002858:	d136      	bne.n	80028c8 <HAL_ADC_Init+0x16c>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	681b      	ldr	r3, [r3, #0]
 800285e:	4a78      	ldr	r2, [pc, #480]	; (8002a40 <HAL_ADC_Init+0x2e4>)
 8002860:	4293      	cmp	r3, r2
 8002862:	d004      	beq.n	800286e <HAL_ADC_Init+0x112>
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	681b      	ldr	r3, [r3, #0]
 8002868:	4a76      	ldr	r2, [pc, #472]	; (8002a44 <HAL_ADC_Init+0x2e8>)
 800286a:	4293      	cmp	r3, r2
 800286c:	d10e      	bne.n	800288c <HAL_ADC_Init+0x130>
 800286e:	4874      	ldr	r0, [pc, #464]	; (8002a40 <HAL_ADC_Init+0x2e4>)
 8002870:	f7ff ff3a 	bl	80026e8 <LL_ADC_IsEnabled>
 8002874:	4604      	mov	r4, r0
 8002876:	4873      	ldr	r0, [pc, #460]	; (8002a44 <HAL_ADC_Init+0x2e8>)
 8002878:	f7ff ff36 	bl	80026e8 <LL_ADC_IsEnabled>
 800287c:	4603      	mov	r3, r0
 800287e:	4323      	orrs	r3, r4
 8002880:	2b00      	cmp	r3, #0
 8002882:	bf0c      	ite	eq
 8002884:	2301      	moveq	r3, #1
 8002886:	2300      	movne	r3, #0
 8002888:	b2db      	uxtb	r3, r3
 800288a:	e008      	b.n	800289e <HAL_ADC_Init+0x142>
 800288c:	486e      	ldr	r0, [pc, #440]	; (8002a48 <HAL_ADC_Init+0x2ec>)
 800288e:	f7ff ff2b 	bl	80026e8 <LL_ADC_IsEnabled>
 8002892:	4603      	mov	r3, r0
 8002894:	2b00      	cmp	r3, #0
 8002896:	bf0c      	ite	eq
 8002898:	2301      	moveq	r3, #1
 800289a:	2300      	movne	r3, #0
 800289c:	b2db      	uxtb	r3, r3
 800289e:	2b00      	cmp	r3, #0
 80028a0:	d012      	beq.n	80028c8 <HAL_ADC_Init+0x16c>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	681b      	ldr	r3, [r3, #0]
 80028a6:	4a66      	ldr	r2, [pc, #408]	; (8002a40 <HAL_ADC_Init+0x2e4>)
 80028a8:	4293      	cmp	r3, r2
 80028aa:	d004      	beq.n	80028b6 <HAL_ADC_Init+0x15a>
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	681b      	ldr	r3, [r3, #0]
 80028b0:	4a64      	ldr	r2, [pc, #400]	; (8002a44 <HAL_ADC_Init+0x2e8>)
 80028b2:	4293      	cmp	r3, r2
 80028b4:	d101      	bne.n	80028ba <HAL_ADC_Init+0x15e>
 80028b6:	4a65      	ldr	r2, [pc, #404]	; (8002a4c <HAL_ADC_Init+0x2f0>)
 80028b8:	e000      	b.n	80028bc <HAL_ADC_Init+0x160>
 80028ba:	4a65      	ldr	r2, [pc, #404]	; (8002a50 <HAL_ADC_Init+0x2f4>)
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	685b      	ldr	r3, [r3, #4]
 80028c0:	4619      	mov	r1, r3
 80028c2:	4610      	mov	r0, r2
 80028c4:	f7ff fdbe 	bl	8002444 <LL_ADC_SetCommonClock>
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
    }

#else

    if ((HAL_GetREVID() > REV_ID_Y) && (ADC_RESOLUTION_8B == hadc->Init.Resolution))
 80028c8:	f7ff fd9c 	bl	8002404 <HAL_GetREVID>
 80028cc:	4603      	mov	r3, r0
 80028ce:	f241 0203 	movw	r2, #4099	; 0x1003
 80028d2:	4293      	cmp	r3, r2
 80028d4:	d914      	bls.n	8002900 <HAL_ADC_Init+0x1a4>
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	689b      	ldr	r3, [r3, #8]
 80028da:	2b10      	cmp	r3, #16
 80028dc:	d110      	bne.n	8002900 <HAL_ADC_Init+0x1a4>
    {
      /* for STM32H7 silicon rev.B and above , ADC_CFGR_RES value for 8bits resolution is : b111 */
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	7d5b      	ldrb	r3, [r3, #21]
 80028e2:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 80028e8:	431a      	orrs	r2, r3
                  hadc->Init.Resolution | (ADC_CFGR_RES_1 | ADC_CFGR_RES_0)                |
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 80028ee:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	7f1b      	ldrb	r3, [r3, #28]
 80028f4:	041b      	lsls	r3, r3, #16
                  hadc->Init.Resolution | (ADC_CFGR_RES_1 | ADC_CFGR_RES_0)                |
 80028f6:	4313      	orrs	r3, r2
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 80028f8:	f043 030c 	orr.w	r3, r3, #12
 80028fc:	61bb      	str	r3, [r7, #24]
 80028fe:	e00d      	b.n	800291c <HAL_ADC_Init+0x1c0>
    }
    else
    {

      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	7d5b      	ldrb	r3, [r3, #21]
 8002904:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	6b1b      	ldr	r3, [r3, #48]	; 0x30
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 800290a:	431a      	orrs	r2, r3
                  hadc->Init.Resolution                                                 |
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 8002910:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	7f1b      	ldrb	r3, [r3, #28]
 8002916:	041b      	lsls	r3, r3, #16
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8002918:	4313      	orrs	r3, r2
 800291a:	61bb      	str	r3, [r7, #24]
    }

#endif /* ADC_VER_V5_3 */

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	7f1b      	ldrb	r3, [r3, #28]
 8002920:	2b01      	cmp	r3, #1
 8002922:	d106      	bne.n	8002932 <HAL_ADC_Init+0x1d6>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	6a1b      	ldr	r3, [r3, #32]
 8002928:	3b01      	subs	r3, #1
 800292a:	045b      	lsls	r3, r3, #17
 800292c:	69ba      	ldr	r2, [r7, #24]
 800292e:	4313      	orrs	r3, r2
 8002930:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002936:	2b00      	cmp	r3, #0
 8002938:	d009      	beq.n	800294e <HAL_ADC_Init+0x1f2>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800293e:	f403 7278 	and.w	r2, r3, #992	; 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002946:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8002948:	69ba      	ldr	r2, [r7, #24]
 800294a:	4313      	orrs	r3, r2
 800294c:	61bb      	str	r3, [r7, #24]
      /* Update Configuration Register CFGR */
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
    }
#else
    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	681b      	ldr	r3, [r3, #0]
 8002952:	68da      	ldr	r2, [r3, #12]
 8002954:	4b3f      	ldr	r3, [pc, #252]	; (8002a54 <HAL_ADC_Init+0x2f8>)
 8002956:	4013      	ands	r3, r2
 8002958:	687a      	ldr	r2, [r7, #4]
 800295a:	6812      	ldr	r2, [r2, #0]
 800295c:	69b9      	ldr	r1, [r7, #24]
 800295e:	430b      	orrs	r3, r1
 8002960:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - Conversion data management      Init.ConversionDataManagement       */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	681b      	ldr	r3, [r3, #0]
 8002966:	4618      	mov	r0, r3
 8002968:	f7ff fed1 	bl	800270e <LL_ADC_REG_IsConversionOngoing>
 800296c:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	681b      	ldr	r3, [r3, #0]
 8002972:	4618      	mov	r0, r3
 8002974:	f7ff fede 	bl	8002734 <LL_ADC_INJ_IsConversionOngoing>
 8002978:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 800297a:	693b      	ldr	r3, [r7, #16]
 800297c:	2b00      	cmp	r3, #0
 800297e:	d14a      	bne.n	8002a16 <HAL_ADC_Init+0x2ba>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8002980:	68fb      	ldr	r3, [r7, #12]
 8002982:	2b00      	cmp	r3, #0
 8002984:	d147      	bne.n	8002a16 <HAL_ADC_Init+0x2ba>
                    ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
                    ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
      }
#else
      tmpCFGR = (
                  ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	7d1b      	ldrb	r3, [r3, #20]
 800298a:	039a      	lsls	r2, r3, #14
                  ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
      tmpCFGR = (
 8002990:	4313      	orrs	r3, r2
 8002992:	61bb      	str	r3, [r7, #24]
#endif

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	681b      	ldr	r3, [r3, #0]
 8002998:	68da      	ldr	r2, [r3, #12]
 800299a:	4b2f      	ldr	r3, [pc, #188]	; (8002a58 <HAL_ADC_Init+0x2fc>)
 800299c:	4013      	ands	r3, r2
 800299e:	687a      	ldr	r2, [r7, #4]
 80029a0:	6812      	ldr	r2, [r2, #0]
 80029a2:	69b9      	ldr	r1, [r7, #24]
 80029a4:	430b      	orrs	r3, r1
 80029a6:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80029ae:	2b01      	cmp	r3, #1
 80029b0:	d11b      	bne.n	80029ea <HAL_ADC_Init+0x28e>
#endif
        assert_param(IS_ADC_RIGHT_BIT_SHIFT(hadc->Init.Oversampling.RightBitShift));
        assert_param(IS_ADC_TRIGGERED_OVERSAMPLING_MODE(hadc->Init.Oversampling.TriggeredMode));
        assert_param(IS_ADC_REGOVERSAMPLING_MODE(hadc->Init.Oversampling.OversamplingStopReset));

        if ((hadc->Init.ExternalTrigConv == ADC_SOFTWARE_START)
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029b6:	2b00      	cmp	r3, #0
        /*  - Oversampling Ratio                                               */
        /*  - Right bit shift                                                  */
        /*  - Left bit shift                                                   */
        /*  - Triggered mode                                                   */
        /*  - Oversampling mode (continued/resumed)                            */
        MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_FIELDS,
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	681b      	ldr	r3, [r3, #0]
 80029bc:	691a      	ldr	r2, [r3, #16]
 80029be:	4b27      	ldr	r3, [pc, #156]	; (8002a5c <HAL_ADC_Init+0x300>)
 80029c0:	4013      	ands	r3, r2
 80029c2:	687a      	ldr	r2, [r7, #4]
 80029c4:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 80029c6:	3a01      	subs	r2, #1
 80029c8:	0411      	lsls	r1, r2, #16
 80029ca:	687a      	ldr	r2, [r7, #4]
 80029cc:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80029ce:	4311      	orrs	r1, r2
 80029d0:	687a      	ldr	r2, [r7, #4]
 80029d2:	6c52      	ldr	r2, [r2, #68]	; 0x44
 80029d4:	4311      	orrs	r1, r2
 80029d6:	687a      	ldr	r2, [r7, #4]
 80029d8:	6c92      	ldr	r2, [r2, #72]	; 0x48
 80029da:	430a      	orrs	r2, r1
 80029dc:	431a      	orrs	r2, r3
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	681b      	ldr	r3, [r3, #0]
 80029e2:	f042 0201 	orr.w	r2, r2, #1
 80029e6:	611a      	str	r2, [r3, #16]
 80029e8:	e007      	b.n	80029fa <HAL_ADC_Init+0x29e>

      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	681b      	ldr	r3, [r3, #0]
 80029ee:	691a      	ldr	r2, [r3, #16]
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	681b      	ldr	r3, [r3, #0]
 80029f4:	f022 0201 	bic.w	r2, r2, #1
 80029f8:	611a      	str	r2, [r3, #16]
      }

      /* Set the LeftShift parameter: it is applied to the final result with or without oversampling */
      MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_LSHIFT, hadc->Init.LeftBitShift);
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	681b      	ldr	r3, [r3, #0]
 80029fe:	691b      	ldr	r3, [r3, #16]
 8002a00:	f023 4170 	bic.w	r1, r3, #4026531840	; 0xf0000000
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	681b      	ldr	r3, [r3, #0]
 8002a0c:	430a      	orrs	r2, r1
 8002a0e:	611a      	str	r2, [r3, #16]
        /* Configure the BOOST Mode */
        ADC_ConfigureBoostMode(hadc);
      }
#else
      /* Configure the BOOST Mode */
      ADC_ConfigureBoostMode(hadc);
 8002a10:	6878      	ldr	r0, [r7, #4]
 8002a12:	f000 fb93 	bl	800313c <ADC_ConfigureBoostMode>
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	68db      	ldr	r3, [r3, #12]
 8002a1a:	2b01      	cmp	r3, #1
 8002a1c:	d120      	bne.n	8002a60 <HAL_ADC_Init+0x304>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	681b      	ldr	r3, [r3, #0]
 8002a22:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a24:	f023 010f 	bic.w	r1, r3, #15
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	699b      	ldr	r3, [r3, #24]
 8002a2c:	1e5a      	subs	r2, r3, #1
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	681b      	ldr	r3, [r3, #0]
 8002a32:	430a      	orrs	r2, r1
 8002a34:	631a      	str	r2, [r3, #48]	; 0x30
 8002a36:	e01b      	b.n	8002a70 <HAL_ADC_Init+0x314>
 8002a38:	24000000 	.word	0x24000000
 8002a3c:	053e2d63 	.word	0x053e2d63
 8002a40:	40022000 	.word	0x40022000
 8002a44:	40022100 	.word	0x40022100
 8002a48:	58026000 	.word	0x58026000
 8002a4c:	40022300 	.word	0x40022300
 8002a50:	58026300 	.word	0x58026300
 8002a54:	fff0c003 	.word	0xfff0c003
 8002a58:	ffffbffc 	.word	0xffffbffc
 8002a5c:	fc00f81e 	.word	0xfc00f81e
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	681b      	ldr	r3, [r3, #0]
 8002a64:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	681b      	ldr	r3, [r3, #0]
 8002a6a:	f022 020f 	bic.w	r2, r2, #15
 8002a6e:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002a74:	f023 0303 	bic.w	r3, r3, #3
 8002a78:	f043 0201 	orr.w	r2, r3, #1
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	655a      	str	r2, [r3, #84]	; 0x54
 8002a80:	e007      	b.n	8002a92 <HAL_ADC_Init+0x336>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002a86:	f043 0210 	orr.w	r2, r3, #16
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8002a8e:	2301      	movs	r3, #1
 8002a90:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8002a92:	7ffb      	ldrb	r3, [r7, #31]
}
 8002a94:	4618      	mov	r0, r3
 8002a96:	3724      	adds	r7, #36	; 0x24
 8002a98:	46bd      	mov	sp, r7
 8002a9a:	bd90      	pop	{r4, r7, pc}

08002a9c <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8002a9c:	b590      	push	{r4, r7, lr}
 8002a9e:	b0a1      	sub	sp, #132	; 0x84
 8002aa0:	af00      	add	r7, sp, #0
 8002aa2:	6078      	str	r0, [r7, #4]
 8002aa4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002aa6:	2300      	movs	r3, #0
 8002aa8:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0;
 8002aac:	2300      	movs	r3, #0
 8002aae:	60bb      	str	r3, [r7, #8]
  /* if ROVSE is set, the value of the OFFSETy_EN bit in ADCx_OFRy register is
     ignored (considered as reset) */
  assert_param(!((sConfig->OffsetNumber != ADC_OFFSET_NONE) && (hadc->Init.OversamplingMode == ENABLE)));

  /* Verification of channel number */
  if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 8002ab0:	683b      	ldr	r3, [r7, #0]
 8002ab2:	68db      	ldr	r3, [r3, #12]
 8002ab4:	4a9d      	ldr	r2, [pc, #628]	; (8002d2c <HAL_ADC_ConfigChannel+0x290>)
 8002ab6:	4293      	cmp	r3, r2
    }
#endif
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8002abe:	2b01      	cmp	r3, #1
 8002ac0:	d101      	bne.n	8002ac6 <HAL_ADC_ConfigChannel+0x2a>
 8002ac2:	2302      	movs	r3, #2
 8002ac4:	e321      	b.n	800310a <HAL_ADC_ConfigChannel+0x66e>
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	2201      	movs	r2, #1
 8002aca:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	681b      	ldr	r3, [r3, #0]
 8002ad2:	4618      	mov	r0, r3
 8002ad4:	f7ff fe1b 	bl	800270e <LL_ADC_REG_IsConversionOngoing>
 8002ad8:	4603      	mov	r3, r0
 8002ada:	2b00      	cmp	r3, #0
 8002adc:	f040 8306 	bne.w	80030ec <HAL_ADC_ConfigChannel+0x650>
      /* ADC channels preselection */
      hadc->Instance->PCSEL_RES0 |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
    }
#else
    /* ADC channels preselection */
    hadc->Instance->PCSEL |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
 8002ae0:	683b      	ldr	r3, [r7, #0]
 8002ae2:	681b      	ldr	r3, [r3, #0]
 8002ae4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002ae8:	2b00      	cmp	r3, #0
 8002aea:	d108      	bne.n	8002afe <HAL_ADC_ConfigChannel+0x62>
 8002aec:	683b      	ldr	r3, [r7, #0]
 8002aee:	681b      	ldr	r3, [r3, #0]
 8002af0:	0e9b      	lsrs	r3, r3, #26
 8002af2:	f003 031f 	and.w	r3, r3, #31
 8002af6:	2201      	movs	r2, #1
 8002af8:	fa02 f303 	lsl.w	r3, r2, r3
 8002afc:	e016      	b.n	8002b2c <HAL_ADC_ConfigChannel+0x90>
 8002afe:	683b      	ldr	r3, [r7, #0]
 8002b00:	681b      	ldr	r3, [r3, #0]
 8002b02:	667b      	str	r3, [r7, #100]	; 0x64
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b04:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002b06:	fa93 f3a3 	rbit	r3, r3
 8002b0a:	663b      	str	r3, [r7, #96]	; 0x60
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8002b0c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002b0e:	66bb      	str	r3, [r7, #104]	; 0x68
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8002b10:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002b12:	2b00      	cmp	r3, #0
 8002b14:	d101      	bne.n	8002b1a <HAL_ADC_ConfigChannel+0x7e>
  {
    return 32U;
 8002b16:	2320      	movs	r3, #32
 8002b18:	e003      	b.n	8002b22 <HAL_ADC_ConfigChannel+0x86>
  }
  return __builtin_clz(value);
 8002b1a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002b1c:	fab3 f383 	clz	r3, r3
 8002b20:	b2db      	uxtb	r3, r3
 8002b22:	f003 031f 	and.w	r3, r3, #31
 8002b26:	2201      	movs	r2, #1
 8002b28:	fa02 f303 	lsl.w	r3, r2, r3
 8002b2c:	687a      	ldr	r2, [r7, #4]
 8002b2e:	6812      	ldr	r2, [r2, #0]
 8002b30:	69d1      	ldr	r1, [r2, #28]
 8002b32:	687a      	ldr	r2, [r7, #4]
 8002b34:	6812      	ldr	r2, [r2, #0]
 8002b36:	430b      	orrs	r3, r1
 8002b38:	61d3      	str	r3, [r2, #28]
#endif /* ADC_VER_V5_V90 */

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	6818      	ldr	r0, [r3, #0]
 8002b3e:	683b      	ldr	r3, [r7, #0]
 8002b40:	6859      	ldr	r1, [r3, #4]
 8002b42:	683b      	ldr	r3, [r7, #0]
 8002b44:	681b      	ldr	r3, [r3, #0]
 8002b46:	461a      	mov	r2, r3
 8002b48:	f7ff fd04 	bl	8002554 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	681b      	ldr	r3, [r3, #0]
 8002b50:	4618      	mov	r0, r3
 8002b52:	f7ff fddc 	bl	800270e <LL_ADC_REG_IsConversionOngoing>
 8002b56:	67b8      	str	r0, [r7, #120]	; 0x78
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	681b      	ldr	r3, [r3, #0]
 8002b5c:	4618      	mov	r0, r3
 8002b5e:	f7ff fde9 	bl	8002734 <LL_ADC_INJ_IsConversionOngoing>
 8002b62:	6778      	str	r0, [r7, #116]	; 0x74
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8002b64:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002b66:	2b00      	cmp	r3, #0
 8002b68:	f040 80b3 	bne.w	8002cd2 <HAL_ADC_ConfigChannel+0x236>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8002b6c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002b6e:	2b00      	cmp	r3, #0
 8002b70:	f040 80af 	bne.w	8002cd2 <HAL_ADC_ConfigChannel+0x236>
       )
    {
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	6818      	ldr	r0, [r3, #0]
 8002b78:	683b      	ldr	r3, [r7, #0]
 8002b7a:	6819      	ldr	r1, [r3, #0]
 8002b7c:	683b      	ldr	r3, [r7, #0]
 8002b7e:	689b      	ldr	r3, [r3, #8]
 8002b80:	461a      	mov	r2, r3
 8002b82:	f7ff fd13 	bl	80025ac <LL_ADC_SetChannelSamplingTime>
        tmpOffsetShifted = ADC3_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
      }
      else
#endif /* ADC_VER_V5_V90 */
      {
        tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8002b86:	4b6a      	ldr	r3, [pc, #424]	; (8002d30 <HAL_ADC_ConfigChannel+0x294>)
 8002b88:	681b      	ldr	r3, [r3, #0]
 8002b8a:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 8002b8e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002b92:	d10b      	bne.n	8002bac <HAL_ADC_ConfigChannel+0x110>
 8002b94:	683b      	ldr	r3, [r7, #0]
 8002b96:	695a      	ldr	r2, [r3, #20]
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	681b      	ldr	r3, [r3, #0]
 8002b9c:	68db      	ldr	r3, [r3, #12]
 8002b9e:	089b      	lsrs	r3, r3, #2
 8002ba0:	f003 0307 	and.w	r3, r3, #7
 8002ba4:	005b      	lsls	r3, r3, #1
 8002ba6:	fa02 f303 	lsl.w	r3, r2, r3
 8002baa:	e01d      	b.n	8002be8 <HAL_ADC_ConfigChannel+0x14c>
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	681b      	ldr	r3, [r3, #0]
 8002bb0:	68db      	ldr	r3, [r3, #12]
 8002bb2:	f003 0310 	and.w	r3, r3, #16
 8002bb6:	2b00      	cmp	r3, #0
 8002bb8:	d10b      	bne.n	8002bd2 <HAL_ADC_ConfigChannel+0x136>
 8002bba:	683b      	ldr	r3, [r7, #0]
 8002bbc:	695a      	ldr	r2, [r3, #20]
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	681b      	ldr	r3, [r3, #0]
 8002bc2:	68db      	ldr	r3, [r3, #12]
 8002bc4:	089b      	lsrs	r3, r3, #2
 8002bc6:	f003 0307 	and.w	r3, r3, #7
 8002bca:	005b      	lsls	r3, r3, #1
 8002bcc:	fa02 f303 	lsl.w	r3, r2, r3
 8002bd0:	e00a      	b.n	8002be8 <HAL_ADC_ConfigChannel+0x14c>
 8002bd2:	683b      	ldr	r3, [r7, #0]
 8002bd4:	695a      	ldr	r2, [r3, #20]
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	681b      	ldr	r3, [r3, #0]
 8002bda:	68db      	ldr	r3, [r3, #12]
 8002bdc:	089b      	lsrs	r3, r3, #2
 8002bde:	f003 0304 	and.w	r3, r3, #4
 8002be2:	005b      	lsls	r3, r3, #1
 8002be4:	fa02 f303 	lsl.w	r3, r2, r3
 8002be8:	673b      	str	r3, [r7, #112]	; 0x70
      }
      
      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8002bea:	683b      	ldr	r3, [r7, #0]
 8002bec:	691b      	ldr	r3, [r3, #16]
 8002bee:	2b04      	cmp	r3, #4
 8002bf0:	d027      	beq.n	8002c42 <HAL_ADC_ConfigChannel+0x1a6>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	6818      	ldr	r0, [r3, #0]
 8002bf6:	683b      	ldr	r3, [r7, #0]
 8002bf8:	6919      	ldr	r1, [r3, #16]
 8002bfa:	683b      	ldr	r3, [r7, #0]
 8002bfc:	681a      	ldr	r2, [r3, #0]
 8002bfe:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002c00:	f7ff fc54 	bl	80024ac <LL_ADC_SetOffset>
        else
#endif /* ADC_VER_V5_V90 */
        {
          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSignedSaturation));
          /* Set ADC selected offset signed saturation */
          LL_ADC_SetOffsetSignedSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSignedSaturation == ENABLE) ? LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE : LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE);
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	6818      	ldr	r0, [r3, #0]
 8002c08:	683b      	ldr	r3, [r7, #0]
 8002c0a:	6919      	ldr	r1, [r3, #16]
 8002c0c:	683b      	ldr	r3, [r7, #0]
 8002c0e:	7e5b      	ldrb	r3, [r3, #25]
 8002c10:	2b01      	cmp	r3, #1
 8002c12:	d102      	bne.n	8002c1a <HAL_ADC_ConfigChannel+0x17e>
 8002c14:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8002c18:	e000      	b.n	8002c1c <HAL_ADC_ConfigChannel+0x180>
 8002c1a:	2300      	movs	r3, #0
 8002c1c:	461a      	mov	r2, r3
 8002c1e:	f7ff fc7e 	bl	800251e <LL_ADC_SetOffsetSignedSaturation>

          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetRightShift));
          /* Set ADC selected offset right shift */
          LL_ADC_SetDataRightShift(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetRightShift == ENABLE) ? LL_ADC_OFFSET_RSHIFT_ENABLE : LL_ADC_OFFSET_RSHIFT_DISABLE);
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	6818      	ldr	r0, [r3, #0]
 8002c26:	683b      	ldr	r3, [r7, #0]
 8002c28:	6919      	ldr	r1, [r3, #16]
 8002c2a:	683b      	ldr	r3, [r7, #0]
 8002c2c:	7e1b      	ldrb	r3, [r3, #24]
 8002c2e:	2b01      	cmp	r3, #1
 8002c30:	d102      	bne.n	8002c38 <HAL_ADC_ConfigChannel+0x19c>
 8002c32:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8002c36:	e000      	b.n	8002c3a <HAL_ADC_ConfigChannel+0x19e>
 8002c38:	2300      	movs	r3, #0
 8002c3a:	461a      	mov	r2, r3
 8002c3c:	f7ff fc56 	bl	80024ec <LL_ADC_SetDataRightShift>
 8002c40:	e047      	b.n	8002cd2 <HAL_ADC_ConfigChannel+0x236>
          }
        }
        else
#endif /* ADC_VER_V5_V90 */
        {
          if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	681b      	ldr	r3, [r3, #0]
 8002c46:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002c48:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002c4c:	683b      	ldr	r3, [r7, #0]
 8002c4e:	681b      	ldr	r3, [r3, #0]
 8002c50:	069b      	lsls	r3, r3, #26
 8002c52:	429a      	cmp	r2, r3
 8002c54:	d107      	bne.n	8002c66 <HAL_ADC_ConfigChannel+0x1ca>
          {
            CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_SSATE);
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	681b      	ldr	r3, [r3, #0]
 8002c5a:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	681b      	ldr	r3, [r3, #0]
 8002c60:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8002c64:	661a      	str	r2, [r3, #96]	; 0x60
          }
          if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	681b      	ldr	r3, [r3, #0]
 8002c6a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002c6c:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002c70:	683b      	ldr	r3, [r7, #0]
 8002c72:	681b      	ldr	r3, [r3, #0]
 8002c74:	069b      	lsls	r3, r3, #26
 8002c76:	429a      	cmp	r2, r3
 8002c78:	d107      	bne.n	8002c8a <HAL_ADC_ConfigChannel+0x1ee>
          {
            CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_SSATE);
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	681b      	ldr	r3, [r3, #0]
 8002c7e:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	681b      	ldr	r3, [r3, #0]
 8002c84:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8002c88:	665a      	str	r2, [r3, #100]	; 0x64
          }
          if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	681b      	ldr	r3, [r3, #0]
 8002c8e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002c90:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002c94:	683b      	ldr	r3, [r7, #0]
 8002c96:	681b      	ldr	r3, [r3, #0]
 8002c98:	069b      	lsls	r3, r3, #26
 8002c9a:	429a      	cmp	r2, r3
 8002c9c:	d107      	bne.n	8002cae <HAL_ADC_ConfigChannel+0x212>
          {
            CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_SSATE);
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	681b      	ldr	r3, [r3, #0]
 8002ca2:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	681b      	ldr	r3, [r3, #0]
 8002ca8:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8002cac:	669a      	str	r2, [r3, #104]	; 0x68
          }
          if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	681b      	ldr	r3, [r3, #0]
 8002cb2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002cb4:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002cb8:	683b      	ldr	r3, [r7, #0]
 8002cba:	681b      	ldr	r3, [r3, #0]
 8002cbc:	069b      	lsls	r3, r3, #26
 8002cbe:	429a      	cmp	r2, r3
 8002cc0:	d107      	bne.n	8002cd2 <HAL_ADC_ConfigChannel+0x236>
          {
            CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_SSATE);
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	681b      	ldr	r3, [r3, #0]
 8002cc6:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	681b      	ldr	r3, [r3, #0]
 8002ccc:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8002cd0:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	681b      	ldr	r3, [r3, #0]
 8002cd6:	4618      	mov	r0, r3
 8002cd8:	f7ff fd06 	bl	80026e8 <LL_ADC_IsEnabled>
 8002cdc:	4603      	mov	r3, r0
 8002cde:	2b00      	cmp	r3, #0
 8002ce0:	f040 820d 	bne.w	80030fe <HAL_ADC_ConfigChannel+0x662>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	6818      	ldr	r0, [r3, #0]
 8002ce8:	683b      	ldr	r3, [r7, #0]
 8002cea:	6819      	ldr	r1, [r3, #0]
 8002cec:	683b      	ldr	r3, [r7, #0]
 8002cee:	68db      	ldr	r3, [r3, #12]
 8002cf0:	461a      	mov	r2, r3
 8002cf2:	f7ff fc87 	bl	8002604 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8002cf6:	683b      	ldr	r3, [r7, #0]
 8002cf8:	68db      	ldr	r3, [r3, #12]
 8002cfa:	4a0c      	ldr	r2, [pc, #48]	; (8002d2c <HAL_ADC_ConfigChannel+0x290>)
 8002cfc:	4293      	cmp	r3, r2
 8002cfe:	f040 8133 	bne.w	8002f68 <HAL_ADC_ConfigChannel+0x4cc>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8002d06:	683b      	ldr	r3, [r7, #0]
 8002d08:	681b      	ldr	r3, [r3, #0]
 8002d0a:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002d0e:	2b00      	cmp	r3, #0
 8002d10:	d110      	bne.n	8002d34 <HAL_ADC_ConfigChannel+0x298>
 8002d12:	683b      	ldr	r3, [r7, #0]
 8002d14:	681b      	ldr	r3, [r3, #0]
 8002d16:	0e9b      	lsrs	r3, r3, #26
 8002d18:	3301      	adds	r3, #1
 8002d1a:	f003 031f 	and.w	r3, r3, #31
 8002d1e:	2b09      	cmp	r3, #9
 8002d20:	bf94      	ite	ls
 8002d22:	2301      	movls	r3, #1
 8002d24:	2300      	movhi	r3, #0
 8002d26:	b2db      	uxtb	r3, r3
 8002d28:	e01e      	b.n	8002d68 <HAL_ADC_ConfigChannel+0x2cc>
 8002d2a:	bf00      	nop
 8002d2c:	47ff0000 	.word	0x47ff0000
 8002d30:	5c001000 	.word	0x5c001000
 8002d34:	683b      	ldr	r3, [r7, #0]
 8002d36:	681b      	ldr	r3, [r3, #0]
 8002d38:	65bb      	str	r3, [r7, #88]	; 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d3a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002d3c:	fa93 f3a3 	rbit	r3, r3
 8002d40:	657b      	str	r3, [r7, #84]	; 0x54
  return result;
 8002d42:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002d44:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (value == 0U)
 8002d46:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002d48:	2b00      	cmp	r3, #0
 8002d4a:	d101      	bne.n	8002d50 <HAL_ADC_ConfigChannel+0x2b4>
    return 32U;
 8002d4c:	2320      	movs	r3, #32
 8002d4e:	e003      	b.n	8002d58 <HAL_ADC_ConfigChannel+0x2bc>
  return __builtin_clz(value);
 8002d50:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002d52:	fab3 f383 	clz	r3, r3
 8002d56:	b2db      	uxtb	r3, r3
 8002d58:	3301      	adds	r3, #1
 8002d5a:	f003 031f 	and.w	r3, r3, #31
 8002d5e:	2b09      	cmp	r3, #9
 8002d60:	bf94      	ite	ls
 8002d62:	2301      	movls	r3, #1
 8002d64:	2300      	movhi	r3, #0
 8002d66:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002d68:	2b00      	cmp	r3, #0
 8002d6a:	d079      	beq.n	8002e60 <HAL_ADC_ConfigChannel+0x3c4>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8002d6c:	683b      	ldr	r3, [r7, #0]
 8002d6e:	681b      	ldr	r3, [r3, #0]
 8002d70:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002d74:	2b00      	cmp	r3, #0
 8002d76:	d107      	bne.n	8002d88 <HAL_ADC_ConfigChannel+0x2ec>
 8002d78:	683b      	ldr	r3, [r7, #0]
 8002d7a:	681b      	ldr	r3, [r3, #0]
 8002d7c:	0e9b      	lsrs	r3, r3, #26
 8002d7e:	3301      	adds	r3, #1
 8002d80:	069b      	lsls	r3, r3, #26
 8002d82:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002d86:	e015      	b.n	8002db4 <HAL_ADC_ConfigChannel+0x318>
 8002d88:	683b      	ldr	r3, [r7, #0]
 8002d8a:	681b      	ldr	r3, [r3, #0]
 8002d8c:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d8e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002d90:	fa93 f3a3 	rbit	r3, r3
 8002d94:	64bb      	str	r3, [r7, #72]	; 0x48
  return result;
 8002d96:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002d98:	653b      	str	r3, [r7, #80]	; 0x50
  if (value == 0U)
 8002d9a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002d9c:	2b00      	cmp	r3, #0
 8002d9e:	d101      	bne.n	8002da4 <HAL_ADC_ConfigChannel+0x308>
    return 32U;
 8002da0:	2320      	movs	r3, #32
 8002da2:	e003      	b.n	8002dac <HAL_ADC_ConfigChannel+0x310>
  return __builtin_clz(value);
 8002da4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002da6:	fab3 f383 	clz	r3, r3
 8002daa:	b2db      	uxtb	r3, r3
 8002dac:	3301      	adds	r3, #1
 8002dae:	069b      	lsls	r3, r3, #26
 8002db0:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002db4:	683b      	ldr	r3, [r7, #0]
 8002db6:	681b      	ldr	r3, [r3, #0]
 8002db8:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002dbc:	2b00      	cmp	r3, #0
 8002dbe:	d109      	bne.n	8002dd4 <HAL_ADC_ConfigChannel+0x338>
 8002dc0:	683b      	ldr	r3, [r7, #0]
 8002dc2:	681b      	ldr	r3, [r3, #0]
 8002dc4:	0e9b      	lsrs	r3, r3, #26
 8002dc6:	3301      	adds	r3, #1
 8002dc8:	f003 031f 	and.w	r3, r3, #31
 8002dcc:	2101      	movs	r1, #1
 8002dce:	fa01 f303 	lsl.w	r3, r1, r3
 8002dd2:	e017      	b.n	8002e04 <HAL_ADC_ConfigChannel+0x368>
 8002dd4:	683b      	ldr	r3, [r7, #0]
 8002dd6:	681b      	ldr	r3, [r3, #0]
 8002dd8:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002dda:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002ddc:	fa93 f3a3 	rbit	r3, r3
 8002de0:	63fb      	str	r3, [r7, #60]	; 0x3c
  return result;
 8002de2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002de4:	647b      	str	r3, [r7, #68]	; 0x44
  if (value == 0U)
 8002de6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002de8:	2b00      	cmp	r3, #0
 8002dea:	d101      	bne.n	8002df0 <HAL_ADC_ConfigChannel+0x354>
    return 32U;
 8002dec:	2320      	movs	r3, #32
 8002dee:	e003      	b.n	8002df8 <HAL_ADC_ConfigChannel+0x35c>
  return __builtin_clz(value);
 8002df0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002df2:	fab3 f383 	clz	r3, r3
 8002df6:	b2db      	uxtb	r3, r3
 8002df8:	3301      	adds	r3, #1
 8002dfa:	f003 031f 	and.w	r3, r3, #31
 8002dfe:	2101      	movs	r1, #1
 8002e00:	fa01 f303 	lsl.w	r3, r1, r3
 8002e04:	ea42 0103 	orr.w	r1, r2, r3
 8002e08:	683b      	ldr	r3, [r7, #0]
 8002e0a:	681b      	ldr	r3, [r3, #0]
 8002e0c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002e10:	2b00      	cmp	r3, #0
 8002e12:	d10a      	bne.n	8002e2a <HAL_ADC_ConfigChannel+0x38e>
 8002e14:	683b      	ldr	r3, [r7, #0]
 8002e16:	681b      	ldr	r3, [r3, #0]
 8002e18:	0e9b      	lsrs	r3, r3, #26
 8002e1a:	3301      	adds	r3, #1
 8002e1c:	f003 021f 	and.w	r2, r3, #31
 8002e20:	4613      	mov	r3, r2
 8002e22:	005b      	lsls	r3, r3, #1
 8002e24:	4413      	add	r3, r2
 8002e26:	051b      	lsls	r3, r3, #20
 8002e28:	e018      	b.n	8002e5c <HAL_ADC_ConfigChannel+0x3c0>
 8002e2a:	683b      	ldr	r3, [r7, #0]
 8002e2c:	681b      	ldr	r3, [r3, #0]
 8002e2e:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e30:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002e32:	fa93 f3a3 	rbit	r3, r3
 8002e36:	633b      	str	r3, [r7, #48]	; 0x30
  return result;
 8002e38:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002e3a:	63bb      	str	r3, [r7, #56]	; 0x38
  if (value == 0U)
 8002e3c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002e3e:	2b00      	cmp	r3, #0
 8002e40:	d101      	bne.n	8002e46 <HAL_ADC_ConfigChannel+0x3aa>
    return 32U;
 8002e42:	2320      	movs	r3, #32
 8002e44:	e003      	b.n	8002e4e <HAL_ADC_ConfigChannel+0x3b2>
  return __builtin_clz(value);
 8002e46:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002e48:	fab3 f383 	clz	r3, r3
 8002e4c:	b2db      	uxtb	r3, r3
 8002e4e:	3301      	adds	r3, #1
 8002e50:	f003 021f 	and.w	r2, r3, #31
 8002e54:	4613      	mov	r3, r2
 8002e56:	005b      	lsls	r3, r3, #1
 8002e58:	4413      	add	r3, r2
 8002e5a:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002e5c:	430b      	orrs	r3, r1
 8002e5e:	e07e      	b.n	8002f5e <HAL_ADC_ConfigChannel+0x4c2>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8002e60:	683b      	ldr	r3, [r7, #0]
 8002e62:	681b      	ldr	r3, [r3, #0]
 8002e64:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002e68:	2b00      	cmp	r3, #0
 8002e6a:	d107      	bne.n	8002e7c <HAL_ADC_ConfigChannel+0x3e0>
 8002e6c:	683b      	ldr	r3, [r7, #0]
 8002e6e:	681b      	ldr	r3, [r3, #0]
 8002e70:	0e9b      	lsrs	r3, r3, #26
 8002e72:	3301      	adds	r3, #1
 8002e74:	069b      	lsls	r3, r3, #26
 8002e76:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002e7a:	e015      	b.n	8002ea8 <HAL_ADC_ConfigChannel+0x40c>
 8002e7c:	683b      	ldr	r3, [r7, #0]
 8002e7e:	681b      	ldr	r3, [r3, #0]
 8002e80:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e82:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002e84:	fa93 f3a3 	rbit	r3, r3
 8002e88:	627b      	str	r3, [r7, #36]	; 0x24
  return result;
 8002e8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e8c:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (value == 0U)
 8002e8e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002e90:	2b00      	cmp	r3, #0
 8002e92:	d101      	bne.n	8002e98 <HAL_ADC_ConfigChannel+0x3fc>
    return 32U;
 8002e94:	2320      	movs	r3, #32
 8002e96:	e003      	b.n	8002ea0 <HAL_ADC_ConfigChannel+0x404>
  return __builtin_clz(value);
 8002e98:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002e9a:	fab3 f383 	clz	r3, r3
 8002e9e:	b2db      	uxtb	r3, r3
 8002ea0:	3301      	adds	r3, #1
 8002ea2:	069b      	lsls	r3, r3, #26
 8002ea4:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002ea8:	683b      	ldr	r3, [r7, #0]
 8002eaa:	681b      	ldr	r3, [r3, #0]
 8002eac:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002eb0:	2b00      	cmp	r3, #0
 8002eb2:	d109      	bne.n	8002ec8 <HAL_ADC_ConfigChannel+0x42c>
 8002eb4:	683b      	ldr	r3, [r7, #0]
 8002eb6:	681b      	ldr	r3, [r3, #0]
 8002eb8:	0e9b      	lsrs	r3, r3, #26
 8002eba:	3301      	adds	r3, #1
 8002ebc:	f003 031f 	and.w	r3, r3, #31
 8002ec0:	2101      	movs	r1, #1
 8002ec2:	fa01 f303 	lsl.w	r3, r1, r3
 8002ec6:	e017      	b.n	8002ef8 <HAL_ADC_ConfigChannel+0x45c>
 8002ec8:	683b      	ldr	r3, [r7, #0]
 8002eca:	681b      	ldr	r3, [r3, #0]
 8002ecc:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ece:	69fb      	ldr	r3, [r7, #28]
 8002ed0:	fa93 f3a3 	rbit	r3, r3
 8002ed4:	61bb      	str	r3, [r7, #24]
  return result;
 8002ed6:	69bb      	ldr	r3, [r7, #24]
 8002ed8:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 8002eda:	6a3b      	ldr	r3, [r7, #32]
 8002edc:	2b00      	cmp	r3, #0
 8002ede:	d101      	bne.n	8002ee4 <HAL_ADC_ConfigChannel+0x448>
    return 32U;
 8002ee0:	2320      	movs	r3, #32
 8002ee2:	e003      	b.n	8002eec <HAL_ADC_ConfigChannel+0x450>
  return __builtin_clz(value);
 8002ee4:	6a3b      	ldr	r3, [r7, #32]
 8002ee6:	fab3 f383 	clz	r3, r3
 8002eea:	b2db      	uxtb	r3, r3
 8002eec:	3301      	adds	r3, #1
 8002eee:	f003 031f 	and.w	r3, r3, #31
 8002ef2:	2101      	movs	r1, #1
 8002ef4:	fa01 f303 	lsl.w	r3, r1, r3
 8002ef8:	ea42 0103 	orr.w	r1, r2, r3
 8002efc:	683b      	ldr	r3, [r7, #0]
 8002efe:	681b      	ldr	r3, [r3, #0]
 8002f00:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002f04:	2b00      	cmp	r3, #0
 8002f06:	d10d      	bne.n	8002f24 <HAL_ADC_ConfigChannel+0x488>
 8002f08:	683b      	ldr	r3, [r7, #0]
 8002f0a:	681b      	ldr	r3, [r3, #0]
 8002f0c:	0e9b      	lsrs	r3, r3, #26
 8002f0e:	3301      	adds	r3, #1
 8002f10:	f003 021f 	and.w	r2, r3, #31
 8002f14:	4613      	mov	r3, r2
 8002f16:	005b      	lsls	r3, r3, #1
 8002f18:	4413      	add	r3, r2
 8002f1a:	3b1e      	subs	r3, #30
 8002f1c:	051b      	lsls	r3, r3, #20
 8002f1e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002f22:	e01b      	b.n	8002f5c <HAL_ADC_ConfigChannel+0x4c0>
 8002f24:	683b      	ldr	r3, [r7, #0]
 8002f26:	681b      	ldr	r3, [r3, #0]
 8002f28:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f2a:	693b      	ldr	r3, [r7, #16]
 8002f2c:	fa93 f3a3 	rbit	r3, r3
 8002f30:	60fb      	str	r3, [r7, #12]
  return result;
 8002f32:	68fb      	ldr	r3, [r7, #12]
 8002f34:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 8002f36:	697b      	ldr	r3, [r7, #20]
 8002f38:	2b00      	cmp	r3, #0
 8002f3a:	d101      	bne.n	8002f40 <HAL_ADC_ConfigChannel+0x4a4>
    return 32U;
 8002f3c:	2320      	movs	r3, #32
 8002f3e:	e003      	b.n	8002f48 <HAL_ADC_ConfigChannel+0x4ac>
  return __builtin_clz(value);
 8002f40:	697b      	ldr	r3, [r7, #20]
 8002f42:	fab3 f383 	clz	r3, r3
 8002f46:	b2db      	uxtb	r3, r3
 8002f48:	3301      	adds	r3, #1
 8002f4a:	f003 021f 	and.w	r2, r3, #31
 8002f4e:	4613      	mov	r3, r2
 8002f50:	005b      	lsls	r3, r3, #1
 8002f52:	4413      	add	r3, r2
 8002f54:	3b1e      	subs	r3, #30
 8002f56:	051b      	lsls	r3, r3, #20
 8002f58:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002f5c:	430b      	orrs	r3, r1
 8002f5e:	683a      	ldr	r2, [r7, #0]
 8002f60:	6892      	ldr	r2, [r2, #8]
 8002f62:	4619      	mov	r1, r3
 8002f64:	f7ff fb22 	bl	80025ac <LL_ADC_SetChannelSamplingTime>
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      /* Note: these internal measurement paths can be disabled using           */
      /* HAL_ADC_DeInit().                                                      */

      if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8002f68:	683b      	ldr	r3, [r7, #0]
 8002f6a:	681b      	ldr	r3, [r3, #0]
 8002f6c:	2b00      	cmp	r3, #0
 8002f6e:	f280 80c6 	bge.w	80030fe <HAL_ADC_ConfigChannel+0x662>
      {
        /* Configuration of common ADC parameters                                 */

        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	681b      	ldr	r3, [r3, #0]
 8002f76:	4a67      	ldr	r2, [pc, #412]	; (8003114 <HAL_ADC_ConfigChannel+0x678>)
 8002f78:	4293      	cmp	r3, r2
 8002f7a:	d004      	beq.n	8002f86 <HAL_ADC_ConfigChannel+0x4ea>
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	681b      	ldr	r3, [r3, #0]
 8002f80:	4a65      	ldr	r2, [pc, #404]	; (8003118 <HAL_ADC_ConfigChannel+0x67c>)
 8002f82:	4293      	cmp	r3, r2
 8002f84:	d101      	bne.n	8002f8a <HAL_ADC_ConfigChannel+0x4ee>
 8002f86:	4b65      	ldr	r3, [pc, #404]	; (800311c <HAL_ADC_ConfigChannel+0x680>)
 8002f88:	e000      	b.n	8002f8c <HAL_ADC_ConfigChannel+0x4f0>
 8002f8a:	4b65      	ldr	r3, [pc, #404]	; (8003120 <HAL_ADC_ConfigChannel+0x684>)
 8002f8c:	4618      	mov	r0, r3
 8002f8e:	f7ff fa7f 	bl	8002490 <LL_ADC_GetCommonPathInternalCh>
 8002f92:	66f8      	str	r0, [r7, #108]	; 0x6c

        /* Software is allowed to change common parameters only when all ADCs   */
        /* of the common group are disabled.                                    */
        if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	681b      	ldr	r3, [r3, #0]
 8002f98:	4a5e      	ldr	r2, [pc, #376]	; (8003114 <HAL_ADC_ConfigChannel+0x678>)
 8002f9a:	4293      	cmp	r3, r2
 8002f9c:	d004      	beq.n	8002fa8 <HAL_ADC_ConfigChannel+0x50c>
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	681b      	ldr	r3, [r3, #0]
 8002fa2:	4a5d      	ldr	r2, [pc, #372]	; (8003118 <HAL_ADC_ConfigChannel+0x67c>)
 8002fa4:	4293      	cmp	r3, r2
 8002fa6:	d10e      	bne.n	8002fc6 <HAL_ADC_ConfigChannel+0x52a>
 8002fa8:	485a      	ldr	r0, [pc, #360]	; (8003114 <HAL_ADC_ConfigChannel+0x678>)
 8002faa:	f7ff fb9d 	bl	80026e8 <LL_ADC_IsEnabled>
 8002fae:	4604      	mov	r4, r0
 8002fb0:	4859      	ldr	r0, [pc, #356]	; (8003118 <HAL_ADC_ConfigChannel+0x67c>)
 8002fb2:	f7ff fb99 	bl	80026e8 <LL_ADC_IsEnabled>
 8002fb6:	4603      	mov	r3, r0
 8002fb8:	4323      	orrs	r3, r4
 8002fba:	2b00      	cmp	r3, #0
 8002fbc:	bf0c      	ite	eq
 8002fbe:	2301      	moveq	r3, #1
 8002fc0:	2300      	movne	r3, #0
 8002fc2:	b2db      	uxtb	r3, r3
 8002fc4:	e008      	b.n	8002fd8 <HAL_ADC_ConfigChannel+0x53c>
 8002fc6:	4857      	ldr	r0, [pc, #348]	; (8003124 <HAL_ADC_ConfigChannel+0x688>)
 8002fc8:	f7ff fb8e 	bl	80026e8 <LL_ADC_IsEnabled>
 8002fcc:	4603      	mov	r3, r0
 8002fce:	2b00      	cmp	r3, #0
 8002fd0:	bf0c      	ite	eq
 8002fd2:	2301      	moveq	r3, #1
 8002fd4:	2300      	movne	r3, #0
 8002fd6:	b2db      	uxtb	r3, r3
 8002fd8:	2b00      	cmp	r3, #0
 8002fda:	d07d      	beq.n	80030d8 <HAL_ADC_ConfigChannel+0x63c>
        {
          /* If the requested internal measurement path has already been enabled, */
          /* bypass the configuration processing.                                 */
          if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8002fdc:	683b      	ldr	r3, [r7, #0]
 8002fde:	681b      	ldr	r3, [r3, #0]
 8002fe0:	4a51      	ldr	r2, [pc, #324]	; (8003128 <HAL_ADC_ConfigChannel+0x68c>)
 8002fe2:	4293      	cmp	r3, r2
 8002fe4:	d130      	bne.n	8003048 <HAL_ADC_ConfigChannel+0x5ac>
 8002fe6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002fe8:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002fec:	2b00      	cmp	r3, #0
 8002fee:	d12b      	bne.n	8003048 <HAL_ADC_ConfigChannel+0x5ac>
          {
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	681b      	ldr	r3, [r3, #0]
 8002ff4:	4a4b      	ldr	r2, [pc, #300]	; (8003124 <HAL_ADC_ConfigChannel+0x688>)
 8002ff6:	4293      	cmp	r3, r2
 8002ff8:	f040 8081 	bne.w	80030fe <HAL_ADC_ConfigChannel+0x662>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_TEMPSENSOR | tmp_config_internal_channel);
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	681b      	ldr	r3, [r3, #0]
 8003000:	4a44      	ldr	r2, [pc, #272]	; (8003114 <HAL_ADC_ConfigChannel+0x678>)
 8003002:	4293      	cmp	r3, r2
 8003004:	d004      	beq.n	8003010 <HAL_ADC_ConfigChannel+0x574>
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	681b      	ldr	r3, [r3, #0]
 800300a:	4a43      	ldr	r2, [pc, #268]	; (8003118 <HAL_ADC_ConfigChannel+0x67c>)
 800300c:	4293      	cmp	r3, r2
 800300e:	d101      	bne.n	8003014 <HAL_ADC_ConfigChannel+0x578>
 8003010:	4a42      	ldr	r2, [pc, #264]	; (800311c <HAL_ADC_ConfigChannel+0x680>)
 8003012:	e000      	b.n	8003016 <HAL_ADC_ConfigChannel+0x57a>
 8003014:	4a42      	ldr	r2, [pc, #264]	; (8003120 <HAL_ADC_ConfigChannel+0x684>)
 8003016:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003018:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800301c:	4619      	mov	r1, r3
 800301e:	4610      	mov	r0, r2
 8003020:	f7ff fa23 	bl	800246a <LL_ADC_SetCommonPathInternalCh>
              /* Delay for temperature sensor stabilization time */
              /* Wait loop initialization and execution */
              /* Note: Variable divided by 2 to compensate partially              */
              /*       CPU processing cycles, scaling in us split to not          */
              /*       exceed 32 bits register capacity and handle low frequency. */
              wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8003024:	4b41      	ldr	r3, [pc, #260]	; (800312c <HAL_ADC_ConfigChannel+0x690>)
 8003026:	681b      	ldr	r3, [r3, #0]
 8003028:	099b      	lsrs	r3, r3, #6
 800302a:	4a41      	ldr	r2, [pc, #260]	; (8003130 <HAL_ADC_ConfigChannel+0x694>)
 800302c:	fba2 2303 	umull	r2, r3, r2, r3
 8003030:	099b      	lsrs	r3, r3, #6
 8003032:	3301      	adds	r3, #1
 8003034:	005b      	lsls	r3, r3, #1
 8003036:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 8003038:	e002      	b.n	8003040 <HAL_ADC_ConfigChannel+0x5a4>
              {
                wait_loop_index--;
 800303a:	68bb      	ldr	r3, [r7, #8]
 800303c:	3b01      	subs	r3, #1
 800303e:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 8003040:	68bb      	ldr	r3, [r7, #8]
 8003042:	2b00      	cmp	r3, #0
 8003044:	d1f9      	bne.n	800303a <HAL_ADC_ConfigChannel+0x59e>
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8003046:	e05a      	b.n	80030fe <HAL_ADC_ConfigChannel+0x662>
              }
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8003048:	683b      	ldr	r3, [r7, #0]
 800304a:	681b      	ldr	r3, [r3, #0]
 800304c:	4a39      	ldr	r2, [pc, #228]	; (8003134 <HAL_ADC_ConfigChannel+0x698>)
 800304e:	4293      	cmp	r3, r2
 8003050:	d11e      	bne.n	8003090 <HAL_ADC_ConfigChannel+0x5f4>
 8003052:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003054:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003058:	2b00      	cmp	r3, #0
 800305a:	d119      	bne.n	8003090 <HAL_ADC_ConfigChannel+0x5f4>
          {
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	681b      	ldr	r3, [r3, #0]
 8003060:	4a30      	ldr	r2, [pc, #192]	; (8003124 <HAL_ADC_ConfigChannel+0x688>)
 8003062:	4293      	cmp	r3, r2
 8003064:	d14b      	bne.n	80030fe <HAL_ADC_ConfigChannel+0x662>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	681b      	ldr	r3, [r3, #0]
 800306a:	4a2a      	ldr	r2, [pc, #168]	; (8003114 <HAL_ADC_ConfigChannel+0x678>)
 800306c:	4293      	cmp	r3, r2
 800306e:	d004      	beq.n	800307a <HAL_ADC_ConfigChannel+0x5de>
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	681b      	ldr	r3, [r3, #0]
 8003074:	4a28      	ldr	r2, [pc, #160]	; (8003118 <HAL_ADC_ConfigChannel+0x67c>)
 8003076:	4293      	cmp	r3, r2
 8003078:	d101      	bne.n	800307e <HAL_ADC_ConfigChannel+0x5e2>
 800307a:	4a28      	ldr	r2, [pc, #160]	; (800311c <HAL_ADC_ConfigChannel+0x680>)
 800307c:	e000      	b.n	8003080 <HAL_ADC_ConfigChannel+0x5e4>
 800307e:	4a28      	ldr	r2, [pc, #160]	; (8003120 <HAL_ADC_ConfigChannel+0x684>)
 8003080:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003082:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003086:	4619      	mov	r1, r3
 8003088:	4610      	mov	r0, r2
 800308a:	f7ff f9ee 	bl	800246a <LL_ADC_SetCommonPathInternalCh>
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 800308e:	e036      	b.n	80030fe <HAL_ADC_ConfigChannel+0x662>
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8003090:	683b      	ldr	r3, [r7, #0]
 8003092:	681b      	ldr	r3, [r3, #0]
 8003094:	4a28      	ldr	r2, [pc, #160]	; (8003138 <HAL_ADC_ConfigChannel+0x69c>)
 8003096:	4293      	cmp	r3, r2
 8003098:	d131      	bne.n	80030fe <HAL_ADC_ConfigChannel+0x662>
 800309a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800309c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80030a0:	2b00      	cmp	r3, #0
 80030a2:	d12c      	bne.n	80030fe <HAL_ADC_ConfigChannel+0x662>
          {
            if (ADC_VREFINT_INSTANCE(hadc))
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	681b      	ldr	r3, [r3, #0]
 80030a8:	4a1e      	ldr	r2, [pc, #120]	; (8003124 <HAL_ADC_ConfigChannel+0x688>)
 80030aa:	4293      	cmp	r3, r2
 80030ac:	d127      	bne.n	80030fe <HAL_ADC_ConfigChannel+0x662>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VREFINT | tmp_config_internal_channel);
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	681b      	ldr	r3, [r3, #0]
 80030b2:	4a18      	ldr	r2, [pc, #96]	; (8003114 <HAL_ADC_ConfigChannel+0x678>)
 80030b4:	4293      	cmp	r3, r2
 80030b6:	d004      	beq.n	80030c2 <HAL_ADC_ConfigChannel+0x626>
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	681b      	ldr	r3, [r3, #0]
 80030bc:	4a16      	ldr	r2, [pc, #88]	; (8003118 <HAL_ADC_ConfigChannel+0x67c>)
 80030be:	4293      	cmp	r3, r2
 80030c0:	d101      	bne.n	80030c6 <HAL_ADC_ConfigChannel+0x62a>
 80030c2:	4a16      	ldr	r2, [pc, #88]	; (800311c <HAL_ADC_ConfigChannel+0x680>)
 80030c4:	e000      	b.n	80030c8 <HAL_ADC_ConfigChannel+0x62c>
 80030c6:	4a16      	ldr	r2, [pc, #88]	; (8003120 <HAL_ADC_ConfigChannel+0x684>)
 80030c8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80030ca:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80030ce:	4619      	mov	r1, r3
 80030d0:	4610      	mov	r0, r2
 80030d2:	f7ff f9ca 	bl	800246a <LL_ADC_SetCommonPathInternalCh>
 80030d6:	e012      	b.n	80030fe <HAL_ADC_ConfigChannel+0x662>
        /* enabled and other ADC of the common group are enabled, internal      */
        /* measurement paths cannot be enabled.                                 */
        else
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80030dc:	f043 0220 	orr.w	r2, r3, #32
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	655a      	str	r2, [r3, #84]	; 0x54

          tmp_hal_status = HAL_ERROR;
 80030e4:	2301      	movs	r3, #1
 80030e6:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
 80030ea:	e008      	b.n	80030fe <HAL_ADC_ConfigChannel+0x662>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80030f0:	f043 0220 	orr.w	r2, r3, #32
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 80030f8:	2301      	movs	r3, #1
 80030fa:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	2200      	movs	r2, #0
 8003102:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 8003106:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
}
 800310a:	4618      	mov	r0, r3
 800310c:	3784      	adds	r7, #132	; 0x84
 800310e:	46bd      	mov	sp, r7
 8003110:	bd90      	pop	{r4, r7, pc}
 8003112:	bf00      	nop
 8003114:	40022000 	.word	0x40022000
 8003118:	40022100 	.word	0x40022100
 800311c:	40022300 	.word	0x40022300
 8003120:	58026300 	.word	0x58026300
 8003124:	58026000 	.word	0x58026000
 8003128:	cb840000 	.word	0xcb840000
 800312c:	24000000 	.word	0x24000000
 8003130:	053e2d63 	.word	0x053e2d63
 8003134:	c7520000 	.word	0xc7520000
 8003138:	cfb80000 	.word	0xcfb80000

0800313c <ADC_ConfigureBoostMode>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval None.
  */
void ADC_ConfigureBoostMode(ADC_HandleTypeDef *hadc)
{
 800313c:	b580      	push	{r7, lr}
 800313e:	b084      	sub	sp, #16
 8003140:	af00      	add	r7, sp, #0
 8003142:	6078      	str	r0, [r7, #4]
  uint32_t freq;
  if (ADC_IS_SYNCHRONOUS_CLOCK_MODE(hadc))
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	681b      	ldr	r3, [r3, #0]
 8003148:	4a79      	ldr	r2, [pc, #484]	; (8003330 <ADC_ConfigureBoostMode+0x1f4>)
 800314a:	4293      	cmp	r3, r2
 800314c:	d004      	beq.n	8003158 <ADC_ConfigureBoostMode+0x1c>
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	681b      	ldr	r3, [r3, #0]
 8003152:	4a78      	ldr	r2, [pc, #480]	; (8003334 <ADC_ConfigureBoostMode+0x1f8>)
 8003154:	4293      	cmp	r3, r2
 8003156:	d109      	bne.n	800316c <ADC_ConfigureBoostMode+0x30>
 8003158:	4b77      	ldr	r3, [pc, #476]	; (8003338 <ADC_ConfigureBoostMode+0x1fc>)
 800315a:	689b      	ldr	r3, [r3, #8]
 800315c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003160:	2b00      	cmp	r3, #0
 8003162:	bf14      	ite	ne
 8003164:	2301      	movne	r3, #1
 8003166:	2300      	moveq	r3, #0
 8003168:	b2db      	uxtb	r3, r3
 800316a:	e008      	b.n	800317e <ADC_ConfigureBoostMode+0x42>
 800316c:	4b73      	ldr	r3, [pc, #460]	; (800333c <ADC_ConfigureBoostMode+0x200>)
 800316e:	689b      	ldr	r3, [r3, #8]
 8003170:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003174:	2b00      	cmp	r3, #0
 8003176:	bf14      	ite	ne
 8003178:	2301      	movne	r3, #1
 800317a:	2300      	moveq	r3, #0
 800317c:	b2db      	uxtb	r3, r3
 800317e:	2b00      	cmp	r3, #0
 8003180:	d01c      	beq.n	80031bc <ADC_ConfigureBoostMode+0x80>
  {
    freq = HAL_RCC_GetHCLKFreq();
 8003182:	f004 fd21 	bl	8007bc8 <HAL_RCC_GetHCLKFreq>
 8003186:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	685b      	ldr	r3, [r3, #4]
 800318c:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8003190:	d010      	beq.n	80031b4 <ADC_ConfigureBoostMode+0x78>
 8003192:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8003196:	d871      	bhi.n	800327c <ADC_ConfigureBoostMode+0x140>
 8003198:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800319c:	d002      	beq.n	80031a4 <ADC_ConfigureBoostMode+0x68>
 800319e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80031a2:	d16b      	bne.n	800327c <ADC_ConfigureBoostMode+0x140>
    {
      case ADC_CLOCK_SYNC_PCLK_DIV1:
      case ADC_CLOCK_SYNC_PCLK_DIV2:
        freq /= (hadc->Init.ClockPrescaler >> ADC_CCR_CKMODE_Pos);
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	685b      	ldr	r3, [r3, #4]
 80031a8:	0c1b      	lsrs	r3, r3, #16
 80031aa:	68fa      	ldr	r2, [r7, #12]
 80031ac:	fbb2 f3f3 	udiv	r3, r2, r3
 80031b0:	60fb      	str	r3, [r7, #12]
        break;
 80031b2:	e066      	b.n	8003282 <ADC_ConfigureBoostMode+0x146>
      case ADC_CLOCK_SYNC_PCLK_DIV4:
        freq /= 4UL;
 80031b4:	68fb      	ldr	r3, [r7, #12]
 80031b6:	089b      	lsrs	r3, r3, #2
 80031b8:	60fb      	str	r3, [r7, #12]
        break;
 80031ba:	e062      	b.n	8003282 <ADC_ConfigureBoostMode+0x146>
        break;
    }
  }
  else
  {
    freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC);
 80031bc:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 80031c0:	f005 fc9e 	bl	8008b00 <HAL_RCCEx_GetPeriphCLKFreq>
 80031c4:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	685b      	ldr	r3, [r3, #4]
 80031ca:	f5b3 1f30 	cmp.w	r3, #2883584	; 0x2c0000
 80031ce:	d051      	beq.n	8003274 <ADC_ConfigureBoostMode+0x138>
 80031d0:	f5b3 1f30 	cmp.w	r3, #2883584	; 0x2c0000
 80031d4:	d854      	bhi.n	8003280 <ADC_ConfigureBoostMode+0x144>
 80031d6:	f5b3 1f20 	cmp.w	r3, #2621440	; 0x280000
 80031da:	d047      	beq.n	800326c <ADC_ConfigureBoostMode+0x130>
 80031dc:	f5b3 1f20 	cmp.w	r3, #2621440	; 0x280000
 80031e0:	d84e      	bhi.n	8003280 <ADC_ConfigureBoostMode+0x144>
 80031e2:	f5b3 1f10 	cmp.w	r3, #2359296	; 0x240000
 80031e6:	d03d      	beq.n	8003264 <ADC_ConfigureBoostMode+0x128>
 80031e8:	f5b3 1f10 	cmp.w	r3, #2359296	; 0x240000
 80031ec:	d848      	bhi.n	8003280 <ADC_ConfigureBoostMode+0x144>
 80031ee:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80031f2:	d033      	beq.n	800325c <ADC_ConfigureBoostMode+0x120>
 80031f4:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80031f8:	d842      	bhi.n	8003280 <ADC_ConfigureBoostMode+0x144>
 80031fa:	f5b3 1fe0 	cmp.w	r3, #1835008	; 0x1c0000
 80031fe:	d029      	beq.n	8003254 <ADC_ConfigureBoostMode+0x118>
 8003200:	f5b3 1fe0 	cmp.w	r3, #1835008	; 0x1c0000
 8003204:	d83c      	bhi.n	8003280 <ADC_ConfigureBoostMode+0x144>
 8003206:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 800320a:	d01a      	beq.n	8003242 <ADC_ConfigureBoostMode+0x106>
 800320c:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 8003210:	d836      	bhi.n	8003280 <ADC_ConfigureBoostMode+0x144>
 8003212:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
 8003216:	d014      	beq.n	8003242 <ADC_ConfigureBoostMode+0x106>
 8003218:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
 800321c:	d830      	bhi.n	8003280 <ADC_ConfigureBoostMode+0x144>
 800321e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003222:	d00e      	beq.n	8003242 <ADC_ConfigureBoostMode+0x106>
 8003224:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003228:	d82a      	bhi.n	8003280 <ADC_ConfigureBoostMode+0x144>
 800322a:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 800322e:	d008      	beq.n	8003242 <ADC_ConfigureBoostMode+0x106>
 8003230:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8003234:	d824      	bhi.n	8003280 <ADC_ConfigureBoostMode+0x144>
 8003236:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800323a:	d002      	beq.n	8003242 <ADC_ConfigureBoostMode+0x106>
 800323c:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8003240:	d11e      	bne.n	8003280 <ADC_ConfigureBoostMode+0x144>
      case ADC_CLOCK_ASYNC_DIV4:
      case ADC_CLOCK_ASYNC_DIV6:
      case ADC_CLOCK_ASYNC_DIV8:
      case ADC_CLOCK_ASYNC_DIV10:
      case ADC_CLOCK_ASYNC_DIV12:
        freq /= ((hadc->Init.ClockPrescaler >> ADC_CCR_PRESC_Pos) << 1UL);
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	685b      	ldr	r3, [r3, #4]
 8003246:	0c9b      	lsrs	r3, r3, #18
 8003248:	005b      	lsls	r3, r3, #1
 800324a:	68fa      	ldr	r2, [r7, #12]
 800324c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003250:	60fb      	str	r3, [r7, #12]
        break;
 8003252:	e016      	b.n	8003282 <ADC_ConfigureBoostMode+0x146>
      case ADC_CLOCK_ASYNC_DIV16:
        freq /= 16UL;
 8003254:	68fb      	ldr	r3, [r7, #12]
 8003256:	091b      	lsrs	r3, r3, #4
 8003258:	60fb      	str	r3, [r7, #12]
        break;
 800325a:	e012      	b.n	8003282 <ADC_ConfigureBoostMode+0x146>
      case ADC_CLOCK_ASYNC_DIV32:
        freq /= 32UL;
 800325c:	68fb      	ldr	r3, [r7, #12]
 800325e:	095b      	lsrs	r3, r3, #5
 8003260:	60fb      	str	r3, [r7, #12]
        break;
 8003262:	e00e      	b.n	8003282 <ADC_ConfigureBoostMode+0x146>
      case ADC_CLOCK_ASYNC_DIV64:
        freq /= 64UL;
 8003264:	68fb      	ldr	r3, [r7, #12]
 8003266:	099b      	lsrs	r3, r3, #6
 8003268:	60fb      	str	r3, [r7, #12]
        break;
 800326a:	e00a      	b.n	8003282 <ADC_ConfigureBoostMode+0x146>
      case ADC_CLOCK_ASYNC_DIV128:
        freq /= 128UL;
 800326c:	68fb      	ldr	r3, [r7, #12]
 800326e:	09db      	lsrs	r3, r3, #7
 8003270:	60fb      	str	r3, [r7, #12]
        break;
 8003272:	e006      	b.n	8003282 <ADC_ConfigureBoostMode+0x146>
      case ADC_CLOCK_ASYNC_DIV256:
        freq /= 256UL;
 8003274:	68fb      	ldr	r3, [r7, #12]
 8003276:	0a1b      	lsrs	r3, r3, #8
 8003278:	60fb      	str	r3, [r7, #12]
        break;
 800327a:	e002      	b.n	8003282 <ADC_ConfigureBoostMode+0x146>
        break;
 800327c:	bf00      	nop
 800327e:	e000      	b.n	8003282 <ADC_ConfigureBoostMode+0x146>
      default:
        break;
 8003280:	bf00      	nop
  else /* if(freq > 25000000UL) */
  {
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
  }
#else
  if (HAL_GetREVID() <= REV_ID_Y) /* STM32H7 silicon Rev.Y */
 8003282:	f7ff f8bf 	bl	8002404 <HAL_GetREVID>
 8003286:	4603      	mov	r3, r0
 8003288:	f241 0203 	movw	r2, #4099	; 0x1003
 800328c:	4293      	cmp	r3, r2
 800328e:	d815      	bhi.n	80032bc <ADC_ConfigureBoostMode+0x180>
  {
    if (freq > 20000000UL)
 8003290:	68fb      	ldr	r3, [r7, #12]
 8003292:	4a2b      	ldr	r2, [pc, #172]	; (8003340 <ADC_ConfigureBoostMode+0x204>)
 8003294:	4293      	cmp	r3, r2
 8003296:	d908      	bls.n	80032aa <ADC_ConfigureBoostMode+0x16e>
    {
      SET_BIT(hadc->Instance->CR, ADC_CR_BOOST_0);
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	681b      	ldr	r3, [r3, #0]
 800329c:	689a      	ldr	r2, [r3, #8]
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	681b      	ldr	r3, [r3, #0]
 80032a2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80032a6:	609a      	str	r2, [r3, #8]
    {
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
    }
  }
#endif /* ADC_VER_V5_3 */
}
 80032a8:	e03e      	b.n	8003328 <ADC_ConfigureBoostMode+0x1ec>
      CLEAR_BIT(hadc->Instance->CR, ADC_CR_BOOST_0);
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	681b      	ldr	r3, [r3, #0]
 80032ae:	689a      	ldr	r2, [r3, #8]
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	681b      	ldr	r3, [r3, #0]
 80032b4:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80032b8:	609a      	str	r2, [r3, #8]
}
 80032ba:	e035      	b.n	8003328 <ADC_ConfigureBoostMode+0x1ec>
    freq /= 2U; /* divider by 2 for Rev.V */
 80032bc:	68fb      	ldr	r3, [r7, #12]
 80032be:	085b      	lsrs	r3, r3, #1
 80032c0:	60fb      	str	r3, [r7, #12]
    if (freq <= 6250000UL)
 80032c2:	68fb      	ldr	r3, [r7, #12]
 80032c4:	4a1f      	ldr	r2, [pc, #124]	; (8003344 <ADC_ConfigureBoostMode+0x208>)
 80032c6:	4293      	cmp	r3, r2
 80032c8:	d808      	bhi.n	80032dc <ADC_ConfigureBoostMode+0x1a0>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, 0UL);
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	681b      	ldr	r3, [r3, #0]
 80032ce:	689a      	ldr	r2, [r3, #8]
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	681b      	ldr	r3, [r3, #0]
 80032d4:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 80032d8:	609a      	str	r2, [r3, #8]
}
 80032da:	e025      	b.n	8003328 <ADC_ConfigureBoostMode+0x1ec>
    else if (freq <= 12500000UL)
 80032dc:	68fb      	ldr	r3, [r7, #12]
 80032de:	4a1a      	ldr	r2, [pc, #104]	; (8003348 <ADC_ConfigureBoostMode+0x20c>)
 80032e0:	4293      	cmp	r3, r2
 80032e2:	d80a      	bhi.n	80032fa <ADC_ConfigureBoostMode+0x1be>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_0);
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	681b      	ldr	r3, [r3, #0]
 80032e8:	689b      	ldr	r3, [r3, #8]
 80032ea:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	681b      	ldr	r3, [r3, #0]
 80032f2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80032f6:	609a      	str	r2, [r3, #8]
}
 80032f8:	e016      	b.n	8003328 <ADC_ConfigureBoostMode+0x1ec>
    else if (freq <= 25000000UL)
 80032fa:	68fb      	ldr	r3, [r7, #12]
 80032fc:	4a13      	ldr	r2, [pc, #76]	; (800334c <ADC_ConfigureBoostMode+0x210>)
 80032fe:	4293      	cmp	r3, r2
 8003300:	d80a      	bhi.n	8003318 <ADC_ConfigureBoostMode+0x1dc>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1);
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	681b      	ldr	r3, [r3, #0]
 8003306:	689b      	ldr	r3, [r3, #8]
 8003308:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	681b      	ldr	r3, [r3, #0]
 8003310:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003314:	609a      	str	r2, [r3, #8]
}
 8003316:	e007      	b.n	8003328 <ADC_ConfigureBoostMode+0x1ec>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	681b      	ldr	r3, [r3, #0]
 800331c:	689a      	ldr	r2, [r3, #8]
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	681b      	ldr	r3, [r3, #0]
 8003322:	f442 7240 	orr.w	r2, r2, #768	; 0x300
 8003326:	609a      	str	r2, [r3, #8]
}
 8003328:	bf00      	nop
 800332a:	3710      	adds	r7, #16
 800332c:	46bd      	mov	sp, r7
 800332e:	bd80      	pop	{r7, pc}
 8003330:	40022000 	.word	0x40022000
 8003334:	40022100 	.word	0x40022100
 8003338:	40022300 	.word	0x40022300
 800333c:	58026300 	.word	0x58026300
 8003340:	01312d00 	.word	0x01312d00
 8003344:	005f5e10 	.word	0x005f5e10
 8003348:	00bebc20 	.word	0x00bebc20
 800334c:	017d7840 	.word	0x017d7840

08003350 <LL_ADC_IsEnabled>:
{
 8003350:	b480      	push	{r7}
 8003352:	b083      	sub	sp, #12
 8003354:	af00      	add	r7, sp, #0
 8003356:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	689b      	ldr	r3, [r3, #8]
 800335c:	f003 0301 	and.w	r3, r3, #1
 8003360:	2b01      	cmp	r3, #1
 8003362:	d101      	bne.n	8003368 <LL_ADC_IsEnabled+0x18>
 8003364:	2301      	movs	r3, #1
 8003366:	e000      	b.n	800336a <LL_ADC_IsEnabled+0x1a>
 8003368:	2300      	movs	r3, #0
}
 800336a:	4618      	mov	r0, r3
 800336c:	370c      	adds	r7, #12
 800336e:	46bd      	mov	sp, r7
 8003370:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003374:	4770      	bx	lr

08003376 <LL_ADC_REG_IsConversionOngoing>:
{
 8003376:	b480      	push	{r7}
 8003378:	b083      	sub	sp, #12
 800337a:	af00      	add	r7, sp, #0
 800337c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	689b      	ldr	r3, [r3, #8]
 8003382:	f003 0304 	and.w	r3, r3, #4
 8003386:	2b04      	cmp	r3, #4
 8003388:	d101      	bne.n	800338e <LL_ADC_REG_IsConversionOngoing+0x18>
 800338a:	2301      	movs	r3, #1
 800338c:	e000      	b.n	8003390 <LL_ADC_REG_IsConversionOngoing+0x1a>
 800338e:	2300      	movs	r3, #0
}
 8003390:	4618      	mov	r0, r3
 8003392:	370c      	adds	r7, #12
 8003394:	46bd      	mov	sp, r7
 8003396:	f85d 7b04 	ldr.w	r7, [sp], #4
 800339a:	4770      	bx	lr

0800339c <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 800339c:	b590      	push	{r4, r7, lr}
 800339e:	b09f      	sub	sp, #124	; 0x7c
 80033a0:	af00      	add	r7, sp, #0
 80033a2:	6078      	str	r0, [r7, #4]
 80033a4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80033a6:	2300      	movs	r3, #0
 80033a8:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
    assert_param(IS_ADC_DUAL_DATA_MODE(multimode->DualModeData));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80033b2:	2b01      	cmp	r3, #1
 80033b4:	d101      	bne.n	80033ba <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 80033b6:	2302      	movs	r3, #2
 80033b8:	e0be      	b.n	8003538 <HAL_ADCEx_MultiModeConfigChannel+0x19c>
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	2201      	movs	r2, #1
 80033be:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  tmphadcSlave.State = HAL_ADC_STATE_RESET;
 80033c2:	2300      	movs	r3, #0
 80033c4:	65fb      	str	r3, [r7, #92]	; 0x5c
  tmphadcSlave.ErrorCode = HAL_ADC_ERROR_NONE;
 80033c6:	2300      	movs	r3, #0
 80033c8:	663b      	str	r3, [r7, #96]	; 0x60

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	681b      	ldr	r3, [r3, #0]
 80033ce:	4a5c      	ldr	r2, [pc, #368]	; (8003540 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 80033d0:	4293      	cmp	r3, r2
 80033d2:	d102      	bne.n	80033da <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 80033d4:	4b5b      	ldr	r3, [pc, #364]	; (8003544 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 80033d6:	60bb      	str	r3, [r7, #8]
 80033d8:	e001      	b.n	80033de <HAL_ADCEx_MultiModeConfigChannel+0x42>
 80033da:	2300      	movs	r3, #0
 80033dc:	60bb      	str	r3, [r7, #8]

  if (tmphadcSlave.Instance == NULL)
 80033de:	68bb      	ldr	r3, [r7, #8]
 80033e0:	2b00      	cmp	r3, #0
 80033e2:	d10b      	bne.n	80033fc <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80033e8:	f043 0220 	orr.w	r2, r3, #32
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	2200      	movs	r2, #0
 80033f4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    return HAL_ERROR;
 80033f8:	2301      	movs	r3, #1
 80033fa:	e09d      	b.n	8003538 <HAL_ADCEx_MultiModeConfigChannel+0x19c>

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DATA Format configuration                                   */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 80033fc:	68bb      	ldr	r3, [r7, #8]
 80033fe:	4618      	mov	r0, r3
 8003400:	f7ff ffb9 	bl	8003376 <LL_ADC_REG_IsConversionOngoing>
 8003404:	6738      	str	r0, [r7, #112]	; 0x70
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	681b      	ldr	r3, [r3, #0]
 800340a:	4618      	mov	r0, r3
 800340c:	f7ff ffb3 	bl	8003376 <LL_ADC_REG_IsConversionOngoing>
 8003410:	4603      	mov	r3, r0
 8003412:	2b00      	cmp	r3, #0
 8003414:	d17f      	bne.n	8003516 <HAL_ADCEx_MultiModeConfigChannel+0x17a>
      && (tmphadcSlave_conversion_on_going == 0UL))
 8003416:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003418:	2b00      	cmp	r3, #0
 800341a:	d17c      	bne.n	8003516 <HAL_ADCEx_MultiModeConfigChannel+0x17a>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	681b      	ldr	r3, [r3, #0]
 8003420:	4a47      	ldr	r2, [pc, #284]	; (8003540 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 8003422:	4293      	cmp	r3, r2
 8003424:	d004      	beq.n	8003430 <HAL_ADCEx_MultiModeConfigChannel+0x94>
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	681b      	ldr	r3, [r3, #0]
 800342a:	4a46      	ldr	r2, [pc, #280]	; (8003544 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 800342c:	4293      	cmp	r3, r2
 800342e:	d101      	bne.n	8003434 <HAL_ADCEx_MultiModeConfigChannel+0x98>
 8003430:	4b45      	ldr	r3, [pc, #276]	; (8003548 <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 8003432:	e000      	b.n	8003436 <HAL_ADCEx_MultiModeConfigChannel+0x9a>
 8003434:	4b45      	ldr	r3, [pc, #276]	; (800354c <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 8003436:	66fb      	str	r3, [r7, #108]	; 0x6c

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8003438:	683b      	ldr	r3, [r7, #0]
 800343a:	681b      	ldr	r3, [r3, #0]
 800343c:	2b00      	cmp	r3, #0
 800343e:	d039      	beq.n	80034b4 <HAL_ADCEx_MultiModeConfigChannel+0x118>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_DAMDF, multimode->DualModeData);
 8003440:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003442:	689b      	ldr	r3, [r3, #8]
 8003444:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8003448:	683b      	ldr	r3, [r7, #0]
 800344a:	685b      	ldr	r3, [r3, #4]
 800344c:	431a      	orrs	r2, r3
 800344e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003450:	609a      	str	r2, [r3, #8]
      /*      from 1 to 8 clock cycles for 12 bits                              */
      /*      from 1 to 6 clock cycles for 10 and 8 bits                        */
      /*    If a higher delay is selected, it will be clipped to maximum delay  */
      /*    range                                                               */

      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	681b      	ldr	r3, [r3, #0]
 8003456:	4a3a      	ldr	r2, [pc, #232]	; (8003540 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 8003458:	4293      	cmp	r3, r2
 800345a:	d004      	beq.n	8003466 <HAL_ADCEx_MultiModeConfigChannel+0xca>
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	681b      	ldr	r3, [r3, #0]
 8003460:	4a38      	ldr	r2, [pc, #224]	; (8003544 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 8003462:	4293      	cmp	r3, r2
 8003464:	d10e      	bne.n	8003484 <HAL_ADCEx_MultiModeConfigChannel+0xe8>
 8003466:	4836      	ldr	r0, [pc, #216]	; (8003540 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 8003468:	f7ff ff72 	bl	8003350 <LL_ADC_IsEnabled>
 800346c:	4604      	mov	r4, r0
 800346e:	4835      	ldr	r0, [pc, #212]	; (8003544 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 8003470:	f7ff ff6e 	bl	8003350 <LL_ADC_IsEnabled>
 8003474:	4603      	mov	r3, r0
 8003476:	4323      	orrs	r3, r4
 8003478:	2b00      	cmp	r3, #0
 800347a:	bf0c      	ite	eq
 800347c:	2301      	moveq	r3, #1
 800347e:	2300      	movne	r3, #0
 8003480:	b2db      	uxtb	r3, r3
 8003482:	e008      	b.n	8003496 <HAL_ADCEx_MultiModeConfigChannel+0xfa>
 8003484:	4832      	ldr	r0, [pc, #200]	; (8003550 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>)
 8003486:	f7ff ff63 	bl	8003350 <LL_ADC_IsEnabled>
 800348a:	4603      	mov	r3, r0
 800348c:	2b00      	cmp	r3, #0
 800348e:	bf0c      	ite	eq
 8003490:	2301      	moveq	r3, #1
 8003492:	2300      	movne	r3, #0
 8003494:	b2db      	uxtb	r3, r3
 8003496:	2b00      	cmp	r3, #0
 8003498:	d047      	beq.n	800352a <HAL_ADCEx_MultiModeConfigChannel+0x18e>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 800349a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800349c:	689a      	ldr	r2, [r3, #8]
 800349e:	4b2d      	ldr	r3, [pc, #180]	; (8003554 <HAL_ADCEx_MultiModeConfigChannel+0x1b8>)
 80034a0:	4013      	ands	r3, r2
 80034a2:	683a      	ldr	r2, [r7, #0]
 80034a4:	6811      	ldr	r1, [r2, #0]
 80034a6:	683a      	ldr	r2, [r7, #0]
 80034a8:	6892      	ldr	r2, [r2, #8]
 80034aa:	430a      	orrs	r2, r1
 80034ac:	431a      	orrs	r2, r3
 80034ae:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80034b0:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 80034b2:	e03a      	b.n	800352a <HAL_ADCEx_MultiModeConfigChannel+0x18e>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DAMDF);
 80034b4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80034b6:	689b      	ldr	r3, [r3, #8]
 80034b8:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80034bc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80034be:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	681b      	ldr	r3, [r3, #0]
 80034c4:	4a1e      	ldr	r2, [pc, #120]	; (8003540 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 80034c6:	4293      	cmp	r3, r2
 80034c8:	d004      	beq.n	80034d4 <HAL_ADCEx_MultiModeConfigChannel+0x138>
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	681b      	ldr	r3, [r3, #0]
 80034ce:	4a1d      	ldr	r2, [pc, #116]	; (8003544 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 80034d0:	4293      	cmp	r3, r2
 80034d2:	d10e      	bne.n	80034f2 <HAL_ADCEx_MultiModeConfigChannel+0x156>
 80034d4:	481a      	ldr	r0, [pc, #104]	; (8003540 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 80034d6:	f7ff ff3b 	bl	8003350 <LL_ADC_IsEnabled>
 80034da:	4604      	mov	r4, r0
 80034dc:	4819      	ldr	r0, [pc, #100]	; (8003544 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 80034de:	f7ff ff37 	bl	8003350 <LL_ADC_IsEnabled>
 80034e2:	4603      	mov	r3, r0
 80034e4:	4323      	orrs	r3, r4
 80034e6:	2b00      	cmp	r3, #0
 80034e8:	bf0c      	ite	eq
 80034ea:	2301      	moveq	r3, #1
 80034ec:	2300      	movne	r3, #0
 80034ee:	b2db      	uxtb	r3, r3
 80034f0:	e008      	b.n	8003504 <HAL_ADCEx_MultiModeConfigChannel+0x168>
 80034f2:	4817      	ldr	r0, [pc, #92]	; (8003550 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>)
 80034f4:	f7ff ff2c 	bl	8003350 <LL_ADC_IsEnabled>
 80034f8:	4603      	mov	r3, r0
 80034fa:	2b00      	cmp	r3, #0
 80034fc:	bf0c      	ite	eq
 80034fe:	2301      	moveq	r3, #1
 8003500:	2300      	movne	r3, #0
 8003502:	b2db      	uxtb	r3, r3
 8003504:	2b00      	cmp	r3, #0
 8003506:	d010      	beq.n	800352a <HAL_ADCEx_MultiModeConfigChannel+0x18e>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8003508:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800350a:	689a      	ldr	r2, [r3, #8]
 800350c:	4b11      	ldr	r3, [pc, #68]	; (8003554 <HAL_ADCEx_MultiModeConfigChannel+0x1b8>)
 800350e:	4013      	ands	r3, r2
 8003510:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8003512:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8003514:	e009      	b.n	800352a <HAL_ADCEx_MultiModeConfigChannel+0x18e>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800351a:	f043 0220 	orr.w	r2, r3, #32
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8003522:	2301      	movs	r3, #1
 8003524:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
 8003528:	e000      	b.n	800352c <HAL_ADCEx_MultiModeConfigChannel+0x190>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 800352a:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	2200      	movs	r2, #0
 8003530:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 8003534:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
}
 8003538:	4618      	mov	r0, r3
 800353a:	377c      	adds	r7, #124	; 0x7c
 800353c:	46bd      	mov	sp, r7
 800353e:	bd90      	pop	{r4, r7, pc}
 8003540:	40022000 	.word	0x40022000
 8003544:	40022100 	.word	0x40022100
 8003548:	40022300 	.word	0x40022300
 800354c:	58026300 	.word	0x58026300
 8003550:	58026000 	.word	0x58026000
 8003554:	fffff0e0 	.word	0xfffff0e0

08003558 <__NVIC_SetPriorityGrouping>:
{
 8003558:	b480      	push	{r7}
 800355a:	b085      	sub	sp, #20
 800355c:	af00      	add	r7, sp, #0
 800355e:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	f003 0307 	and.w	r3, r3, #7
 8003566:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003568:	4b0b      	ldr	r3, [pc, #44]	; (8003598 <__NVIC_SetPriorityGrouping+0x40>)
 800356a:	68db      	ldr	r3, [r3, #12]
 800356c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800356e:	68ba      	ldr	r2, [r7, #8]
 8003570:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003574:	4013      	ands	r3, r2
 8003576:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003578:	68fb      	ldr	r3, [r7, #12]
 800357a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800357c:	68bb      	ldr	r3, [r7, #8]
 800357e:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8003580:	4b06      	ldr	r3, [pc, #24]	; (800359c <__NVIC_SetPriorityGrouping+0x44>)
 8003582:	4313      	orrs	r3, r2
 8003584:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003586:	4a04      	ldr	r2, [pc, #16]	; (8003598 <__NVIC_SetPriorityGrouping+0x40>)
 8003588:	68bb      	ldr	r3, [r7, #8]
 800358a:	60d3      	str	r3, [r2, #12]
}
 800358c:	bf00      	nop
 800358e:	3714      	adds	r7, #20
 8003590:	46bd      	mov	sp, r7
 8003592:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003596:	4770      	bx	lr
 8003598:	e000ed00 	.word	0xe000ed00
 800359c:	05fa0000 	.word	0x05fa0000

080035a0 <__NVIC_GetPriorityGrouping>:
{
 80035a0:	b480      	push	{r7}
 80035a2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80035a4:	4b04      	ldr	r3, [pc, #16]	; (80035b8 <__NVIC_GetPriorityGrouping+0x18>)
 80035a6:	68db      	ldr	r3, [r3, #12]
 80035a8:	0a1b      	lsrs	r3, r3, #8
 80035aa:	f003 0307 	and.w	r3, r3, #7
}
 80035ae:	4618      	mov	r0, r3
 80035b0:	46bd      	mov	sp, r7
 80035b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035b6:	4770      	bx	lr
 80035b8:	e000ed00 	.word	0xe000ed00

080035bc <__NVIC_EnableIRQ>:
{
 80035bc:	b480      	push	{r7}
 80035be:	b083      	sub	sp, #12
 80035c0:	af00      	add	r7, sp, #0
 80035c2:	4603      	mov	r3, r0
 80035c4:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80035c6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80035ca:	2b00      	cmp	r3, #0
 80035cc:	db0b      	blt.n	80035e6 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80035ce:	88fb      	ldrh	r3, [r7, #6]
 80035d0:	f003 021f 	and.w	r2, r3, #31
 80035d4:	4907      	ldr	r1, [pc, #28]	; (80035f4 <__NVIC_EnableIRQ+0x38>)
 80035d6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80035da:	095b      	lsrs	r3, r3, #5
 80035dc:	2001      	movs	r0, #1
 80035de:	fa00 f202 	lsl.w	r2, r0, r2
 80035e2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 80035e6:	bf00      	nop
 80035e8:	370c      	adds	r7, #12
 80035ea:	46bd      	mov	sp, r7
 80035ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035f0:	4770      	bx	lr
 80035f2:	bf00      	nop
 80035f4:	e000e100 	.word	0xe000e100

080035f8 <__NVIC_SetPriority>:
{
 80035f8:	b480      	push	{r7}
 80035fa:	b083      	sub	sp, #12
 80035fc:	af00      	add	r7, sp, #0
 80035fe:	4603      	mov	r3, r0
 8003600:	6039      	str	r1, [r7, #0]
 8003602:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8003604:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003608:	2b00      	cmp	r3, #0
 800360a:	db0a      	blt.n	8003622 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800360c:	683b      	ldr	r3, [r7, #0]
 800360e:	b2da      	uxtb	r2, r3
 8003610:	490c      	ldr	r1, [pc, #48]	; (8003644 <__NVIC_SetPriority+0x4c>)
 8003612:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003616:	0112      	lsls	r2, r2, #4
 8003618:	b2d2      	uxtb	r2, r2
 800361a:	440b      	add	r3, r1
 800361c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8003620:	e00a      	b.n	8003638 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003622:	683b      	ldr	r3, [r7, #0]
 8003624:	b2da      	uxtb	r2, r3
 8003626:	4908      	ldr	r1, [pc, #32]	; (8003648 <__NVIC_SetPriority+0x50>)
 8003628:	88fb      	ldrh	r3, [r7, #6]
 800362a:	f003 030f 	and.w	r3, r3, #15
 800362e:	3b04      	subs	r3, #4
 8003630:	0112      	lsls	r2, r2, #4
 8003632:	b2d2      	uxtb	r2, r2
 8003634:	440b      	add	r3, r1
 8003636:	761a      	strb	r2, [r3, #24]
}
 8003638:	bf00      	nop
 800363a:	370c      	adds	r7, #12
 800363c:	46bd      	mov	sp, r7
 800363e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003642:	4770      	bx	lr
 8003644:	e000e100 	.word	0xe000e100
 8003648:	e000ed00 	.word	0xe000ed00

0800364c <NVIC_EncodePriority>:
{
 800364c:	b480      	push	{r7}
 800364e:	b089      	sub	sp, #36	; 0x24
 8003650:	af00      	add	r7, sp, #0
 8003652:	60f8      	str	r0, [r7, #12]
 8003654:	60b9      	str	r1, [r7, #8]
 8003656:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003658:	68fb      	ldr	r3, [r7, #12]
 800365a:	f003 0307 	and.w	r3, r3, #7
 800365e:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003660:	69fb      	ldr	r3, [r7, #28]
 8003662:	f1c3 0307 	rsb	r3, r3, #7
 8003666:	2b04      	cmp	r3, #4
 8003668:	bf28      	it	cs
 800366a:	2304      	movcs	r3, #4
 800366c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800366e:	69fb      	ldr	r3, [r7, #28]
 8003670:	3304      	adds	r3, #4
 8003672:	2b06      	cmp	r3, #6
 8003674:	d902      	bls.n	800367c <NVIC_EncodePriority+0x30>
 8003676:	69fb      	ldr	r3, [r7, #28]
 8003678:	3b03      	subs	r3, #3
 800367a:	e000      	b.n	800367e <NVIC_EncodePriority+0x32>
 800367c:	2300      	movs	r3, #0
 800367e:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003680:	f04f 32ff 	mov.w	r2, #4294967295
 8003684:	69bb      	ldr	r3, [r7, #24]
 8003686:	fa02 f303 	lsl.w	r3, r2, r3
 800368a:	43da      	mvns	r2, r3
 800368c:	68bb      	ldr	r3, [r7, #8]
 800368e:	401a      	ands	r2, r3
 8003690:	697b      	ldr	r3, [r7, #20]
 8003692:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003694:	f04f 31ff 	mov.w	r1, #4294967295
 8003698:	697b      	ldr	r3, [r7, #20]
 800369a:	fa01 f303 	lsl.w	r3, r1, r3
 800369e:	43d9      	mvns	r1, r3
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80036a4:	4313      	orrs	r3, r2
}
 80036a6:	4618      	mov	r0, r3
 80036a8:	3724      	adds	r7, #36	; 0x24
 80036aa:	46bd      	mov	sp, r7
 80036ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036b0:	4770      	bx	lr
	...

080036b4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80036b4:	b580      	push	{r7, lr}
 80036b6:	b082      	sub	sp, #8
 80036b8:	af00      	add	r7, sp, #0
 80036ba:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	3b01      	subs	r3, #1
 80036c0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80036c4:	d301      	bcc.n	80036ca <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80036c6:	2301      	movs	r3, #1
 80036c8:	e00f      	b.n	80036ea <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80036ca:	4a0a      	ldr	r2, [pc, #40]	; (80036f4 <SysTick_Config+0x40>)
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	3b01      	subs	r3, #1
 80036d0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80036d2:	210f      	movs	r1, #15
 80036d4:	f04f 30ff 	mov.w	r0, #4294967295
 80036d8:	f7ff ff8e 	bl	80035f8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80036dc:	4b05      	ldr	r3, [pc, #20]	; (80036f4 <SysTick_Config+0x40>)
 80036de:	2200      	movs	r2, #0
 80036e0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80036e2:	4b04      	ldr	r3, [pc, #16]	; (80036f4 <SysTick_Config+0x40>)
 80036e4:	2207      	movs	r2, #7
 80036e6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80036e8:	2300      	movs	r3, #0
}
 80036ea:	4618      	mov	r0, r3
 80036ec:	3708      	adds	r7, #8
 80036ee:	46bd      	mov	sp, r7
 80036f0:	bd80      	pop	{r7, pc}
 80036f2:	bf00      	nop
 80036f4:	e000e010 	.word	0xe000e010

080036f8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80036f8:	b580      	push	{r7, lr}
 80036fa:	b082      	sub	sp, #8
 80036fc:	af00      	add	r7, sp, #0
 80036fe:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003700:	6878      	ldr	r0, [r7, #4]
 8003702:	f7ff ff29 	bl	8003558 <__NVIC_SetPriorityGrouping>
}
 8003706:	bf00      	nop
 8003708:	3708      	adds	r7, #8
 800370a:	46bd      	mov	sp, r7
 800370c:	bd80      	pop	{r7, pc}

0800370e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800370e:	b580      	push	{r7, lr}
 8003710:	b086      	sub	sp, #24
 8003712:	af00      	add	r7, sp, #0
 8003714:	4603      	mov	r3, r0
 8003716:	60b9      	str	r1, [r7, #8]
 8003718:	607a      	str	r2, [r7, #4]
 800371a:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800371c:	f7ff ff40 	bl	80035a0 <__NVIC_GetPriorityGrouping>
 8003720:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003722:	687a      	ldr	r2, [r7, #4]
 8003724:	68b9      	ldr	r1, [r7, #8]
 8003726:	6978      	ldr	r0, [r7, #20]
 8003728:	f7ff ff90 	bl	800364c <NVIC_EncodePriority>
 800372c:	4602      	mov	r2, r0
 800372e:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8003732:	4611      	mov	r1, r2
 8003734:	4618      	mov	r0, r3
 8003736:	f7ff ff5f 	bl	80035f8 <__NVIC_SetPriority>
}
 800373a:	bf00      	nop
 800373c:	3718      	adds	r7, #24
 800373e:	46bd      	mov	sp, r7
 8003740:	bd80      	pop	{r7, pc}

08003742 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003742:	b580      	push	{r7, lr}
 8003744:	b082      	sub	sp, #8
 8003746:	af00      	add	r7, sp, #0
 8003748:	4603      	mov	r3, r0
 800374a:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800374c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003750:	4618      	mov	r0, r3
 8003752:	f7ff ff33 	bl	80035bc <__NVIC_EnableIRQ>
}
 8003756:	bf00      	nop
 8003758:	3708      	adds	r7, #8
 800375a:	46bd      	mov	sp, r7
 800375c:	bd80      	pop	{r7, pc}

0800375e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800375e:	b580      	push	{r7, lr}
 8003760:	b082      	sub	sp, #8
 8003762:	af00      	add	r7, sp, #0
 8003764:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003766:	6878      	ldr	r0, [r7, #4]
 8003768:	f7ff ffa4 	bl	80036b4 <SysTick_Config>
 800376c:	4603      	mov	r3, r0
}
 800376e:	4618      	mov	r0, r3
 8003770:	3708      	adds	r7, #8
 8003772:	46bd      	mov	sp, r7
 8003774:	bd80      	pop	{r7, pc}

08003776 <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 8003776:	b580      	push	{r7, lr}
 8003778:	b082      	sub	sp, #8
 800377a:	af00      	add	r7, sp, #0
 800377c:	6078      	str	r0, [r7, #4]
  /* Check DAC handle */
  if (hdac == NULL)
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	2b00      	cmp	r3, #0
 8003782:	d101      	bne.n	8003788 <HAL_DAC_Init+0x12>
  {
    return HAL_ERROR;
 8003784:	2301      	movs	r3, #1
 8003786:	e014      	b.n	80037b2 <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	791b      	ldrb	r3, [r3, #4]
 800378c:	b2db      	uxtb	r3, r3
 800378e:	2b00      	cmp	r3, #0
 8003790:	d105      	bne.n	800379e <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	2200      	movs	r2, #0
 8003796:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 8003798:	6878      	ldr	r0, [r7, #4]
 800379a:	f7fd fa8b 	bl	8000cb4 <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	2202      	movs	r2, #2
 80037a2:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	2200      	movs	r2, #0
 80037a8:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	2201      	movs	r2, #1
 80037ae:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 80037b0:	2300      	movs	r3, #0
}
 80037b2:	4618      	mov	r0, r3
 80037b4:	3708      	adds	r7, #8
 80037b6:	46bd      	mov	sp, r7
 80037b8:	bd80      	pop	{r7, pc}
	...

080037bc <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac, DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 80037bc:	b580      	push	{r7, lr}
 80037be:	b088      	sub	sp, #32
 80037c0:	af00      	add	r7, sp, #0
 80037c2:	60f8      	str	r0, [r7, #12]
 80037c4:	60b9      	str	r1, [r7, #8]
 80037c6:	607a      	str	r2, [r7, #4]
    assert_param(IS_DAC_REFRESHTIME(sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime));
  }
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 80037c8:	68fb      	ldr	r3, [r7, #12]
 80037ca:	795b      	ldrb	r3, [r3, #5]
 80037cc:	2b01      	cmp	r3, #1
 80037ce:	d101      	bne.n	80037d4 <HAL_DAC_ConfigChannel+0x18>
 80037d0:	2302      	movs	r3, #2
 80037d2:	e11d      	b.n	8003a10 <HAL_DAC_ConfigChannel+0x254>
 80037d4:	68fb      	ldr	r3, [r7, #12]
 80037d6:	2201      	movs	r2, #1
 80037d8:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 80037da:	68fb      	ldr	r3, [r7, #12]
 80037dc:	2202      	movs	r2, #2
 80037de:	711a      	strb	r2, [r3, #4]

  /* Sample and hold configuration */
  if (sConfig->DAC_SampleAndHold == DAC_SAMPLEANDHOLD_ENABLE)
 80037e0:	68bb      	ldr	r3, [r7, #8]
 80037e2:	681b      	ldr	r3, [r3, #0]
 80037e4:	2b04      	cmp	r3, #4
 80037e6:	d174      	bne.n	80038d2 <HAL_DAC_ConfigChannel+0x116>
  {
    /* Get timeout */
    tickstart = HAL_GetTick();
 80037e8:	f7fe fddc 	bl	80023a4 <HAL_GetTick>
 80037ec:	61b8      	str	r0, [r7, #24]

    if (Channel == DAC_CHANNEL_1)
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	2b00      	cmp	r3, #0
 80037f2:	d134      	bne.n	800385e <HAL_DAC_ConfigChannel+0xa2>
    {
      /* SHSR1 can be written when BWST1 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 80037f4:	e011      	b.n	800381a <HAL_DAC_ConfigChannel+0x5e>
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 80037f6:	f7fe fdd5 	bl	80023a4 <HAL_GetTick>
 80037fa:	4602      	mov	r2, r0
 80037fc:	69bb      	ldr	r3, [r7, #24]
 80037fe:	1ad3      	subs	r3, r2, r3
 8003800:	2b01      	cmp	r3, #1
 8003802:	d90a      	bls.n	800381a <HAL_DAC_ConfigChannel+0x5e>
        {
          /* Update error code */
          SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 8003804:	68fb      	ldr	r3, [r7, #12]
 8003806:	691b      	ldr	r3, [r3, #16]
 8003808:	f043 0208 	orr.w	r2, r3, #8
 800380c:	68fb      	ldr	r3, [r7, #12]
 800380e:	611a      	str	r2, [r3, #16]

          /* Change the DMA state */
          hdac->State = HAL_DAC_STATE_TIMEOUT;
 8003810:	68fb      	ldr	r3, [r7, #12]
 8003812:	2203      	movs	r2, #3
 8003814:	711a      	strb	r2, [r3, #4]

          return HAL_TIMEOUT;
 8003816:	2303      	movs	r3, #3
 8003818:	e0fa      	b.n	8003a10 <HAL_DAC_ConfigChannel+0x254>
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 800381a:	68fb      	ldr	r3, [r7, #12]
 800381c:	681b      	ldr	r3, [r3, #0]
 800381e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003820:	4b7d      	ldr	r3, [pc, #500]	; (8003a18 <HAL_DAC_ConfigChannel+0x25c>)
 8003822:	4013      	ands	r3, r2
 8003824:	2b00      	cmp	r3, #0
 8003826:	d1e6      	bne.n	80037f6 <HAL_DAC_ConfigChannel+0x3a>
        }
      }
      HAL_Delay(1);
 8003828:	2001      	movs	r0, #1
 800382a:	f7fe fdc7 	bl	80023bc <HAL_Delay>
      hdac->Instance->SHSR1 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 800382e:	68fb      	ldr	r3, [r7, #12]
 8003830:	681b      	ldr	r3, [r3, #0]
 8003832:	68ba      	ldr	r2, [r7, #8]
 8003834:	6992      	ldr	r2, [r2, #24]
 8003836:	641a      	str	r2, [r3, #64]	; 0x40
 8003838:	e01e      	b.n	8003878 <HAL_DAC_ConfigChannel+0xbc>
    {
      /* SHSR2 can be written when BWST2 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 800383a:	f7fe fdb3 	bl	80023a4 <HAL_GetTick>
 800383e:	4602      	mov	r2, r0
 8003840:	69bb      	ldr	r3, [r7, #24]
 8003842:	1ad3      	subs	r3, r2, r3
 8003844:	2b01      	cmp	r3, #1
 8003846:	d90a      	bls.n	800385e <HAL_DAC_ConfigChannel+0xa2>
        {
          /* Update error code */
          SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 8003848:	68fb      	ldr	r3, [r7, #12]
 800384a:	691b      	ldr	r3, [r3, #16]
 800384c:	f043 0208 	orr.w	r2, r3, #8
 8003850:	68fb      	ldr	r3, [r7, #12]
 8003852:	611a      	str	r2, [r3, #16]

          /* Change the DMA state */
          hdac->State = HAL_DAC_STATE_TIMEOUT;
 8003854:	68fb      	ldr	r3, [r7, #12]
 8003856:	2203      	movs	r2, #3
 8003858:	711a      	strb	r2, [r3, #4]

          return HAL_TIMEOUT;
 800385a:	2303      	movs	r3, #3
 800385c:	e0d8      	b.n	8003a10 <HAL_DAC_ConfigChannel+0x254>
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 800385e:	68fb      	ldr	r3, [r7, #12]
 8003860:	681b      	ldr	r3, [r3, #0]
 8003862:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003864:	2b00      	cmp	r3, #0
 8003866:	dbe8      	blt.n	800383a <HAL_DAC_ConfigChannel+0x7e>
        }
      }
      HAL_Delay(1U);
 8003868:	2001      	movs	r0, #1
 800386a:	f7fe fda7 	bl	80023bc <HAL_Delay>
      hdac->Instance->SHSR2 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 800386e:	68fb      	ldr	r3, [r7, #12]
 8003870:	681b      	ldr	r3, [r3, #0]
 8003872:	68ba      	ldr	r2, [r7, #8]
 8003874:	6992      	ldr	r2, [r2, #24]
 8003876:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* HoldTime */
    MODIFY_REG(hdac->Instance->SHHR, DAC_SHHR_THOLD1 << (Channel & 0x10UL),
 8003878:	68fb      	ldr	r3, [r7, #12]
 800387a:	681b      	ldr	r3, [r3, #0]
 800387c:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	f003 0310 	and.w	r3, r3, #16
 8003884:	f240 31ff 	movw	r1, #1023	; 0x3ff
 8003888:	fa01 f303 	lsl.w	r3, r1, r3
 800388c:	43db      	mvns	r3, r3
 800388e:	ea02 0103 	and.w	r1, r2, r3
 8003892:	68bb      	ldr	r3, [r7, #8]
 8003894:	69da      	ldr	r2, [r3, #28]
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	f003 0310 	and.w	r3, r3, #16
 800389c:	409a      	lsls	r2, r3
 800389e:	68fb      	ldr	r3, [r7, #12]
 80038a0:	681b      	ldr	r3, [r3, #0]
 80038a2:	430a      	orrs	r2, r1
 80038a4:	649a      	str	r2, [r3, #72]	; 0x48
               (sConfig->DAC_SampleAndHoldConfig.DAC_HoldTime) << (Channel & 0x10UL));
    /* RefreshTime */
    MODIFY_REG(hdac->Instance->SHRR, DAC_SHRR_TREFRESH1 << (Channel & 0x10UL),
 80038a6:	68fb      	ldr	r3, [r7, #12]
 80038a8:	681b      	ldr	r3, [r3, #0]
 80038aa:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	f003 0310 	and.w	r3, r3, #16
 80038b2:	21ff      	movs	r1, #255	; 0xff
 80038b4:	fa01 f303 	lsl.w	r3, r1, r3
 80038b8:	43db      	mvns	r3, r3
 80038ba:	ea02 0103 	and.w	r1, r2, r3
 80038be:	68bb      	ldr	r3, [r7, #8]
 80038c0:	6a1a      	ldr	r2, [r3, #32]
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	f003 0310 	and.w	r3, r3, #16
 80038c8:	409a      	lsls	r2, r3
 80038ca:	68fb      	ldr	r3, [r7, #12]
 80038cc:	681b      	ldr	r3, [r3, #0]
 80038ce:	430a      	orrs	r2, r1
 80038d0:	64da      	str	r2, [r3, #76]	; 0x4c
               (sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime) << (Channel & 0x10UL));
  }

  if (sConfig->DAC_UserTrimming == DAC_TRIMMING_USER)
 80038d2:	68bb      	ldr	r3, [r7, #8]
 80038d4:	691b      	ldr	r3, [r3, #16]
 80038d6:	2b01      	cmp	r3, #1
 80038d8:	d11d      	bne.n	8003916 <HAL_DAC_ConfigChannel+0x15a>
    /* USER TRIMMING */
  {
    /* Get the DAC CCR value */
    tmpreg1 = hdac->Instance->CCR;
 80038da:	68fb      	ldr	r3, [r7, #12]
 80038dc:	681b      	ldr	r3, [r3, #0]
 80038de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80038e0:	617b      	str	r3, [r7, #20]
    /* Clear trimming value */
    tmpreg1 &= ~(((uint32_t)(DAC_CCR_OTRIM1)) << (Channel & 0x10UL));
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	f003 0310 	and.w	r3, r3, #16
 80038e8:	221f      	movs	r2, #31
 80038ea:	fa02 f303 	lsl.w	r3, r2, r3
 80038ee:	43db      	mvns	r3, r3
 80038f0:	697a      	ldr	r2, [r7, #20]
 80038f2:	4013      	ands	r3, r2
 80038f4:	617b      	str	r3, [r7, #20]
    /* Configure for the selected trimming offset */
    tmpreg2 = sConfig->DAC_TrimmingValue;
 80038f6:	68bb      	ldr	r3, [r7, #8]
 80038f8:	695b      	ldr	r3, [r3, #20]
 80038fa:	613b      	str	r3, [r7, #16]
    /* Calculate CCR register value depending on DAC_Channel */
    tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	f003 0310 	and.w	r3, r3, #16
 8003902:	693a      	ldr	r2, [r7, #16]
 8003904:	fa02 f303 	lsl.w	r3, r2, r3
 8003908:	697a      	ldr	r2, [r7, #20]
 800390a:	4313      	orrs	r3, r2
 800390c:	617b      	str	r3, [r7, #20]
    /* Write to DAC CCR */
    hdac->Instance->CCR = tmpreg1;
 800390e:	68fb      	ldr	r3, [r7, #12]
 8003910:	681b      	ldr	r3, [r3, #0]
 8003912:	697a      	ldr	r2, [r7, #20]
 8003914:	639a      	str	r2, [r3, #56]	; 0x38
  }
  /* else factory trimming is used (factory setting are available at reset)*/
  /* SW Nothing has nothing to do */

  /* Get the DAC MCR value */
  tmpreg1 = hdac->Instance->MCR;
 8003916:	68fb      	ldr	r3, [r7, #12]
 8003918:	681b      	ldr	r3, [r3, #0]
 800391a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800391c:	617b      	str	r3, [r7, #20]
  /* Clear DAC_MCR_MODEx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_MODE1)) << (Channel & 0x10UL));
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	f003 0310 	and.w	r3, r3, #16
 8003924:	2207      	movs	r2, #7
 8003926:	fa02 f303 	lsl.w	r3, r2, r3
 800392a:	43db      	mvns	r3, r3
 800392c:	697a      	ldr	r2, [r7, #20]
 800392e:	4013      	ands	r3, r2
 8003930:	617b      	str	r3, [r7, #20]
  /* Configure for the selected DAC channel: mode, buffer output & on chip peripheral connect */
  if (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_EXTERNAL)
 8003932:	68bb      	ldr	r3, [r7, #8]
 8003934:	68db      	ldr	r3, [r3, #12]
 8003936:	2b01      	cmp	r3, #1
 8003938:	d102      	bne.n	8003940 <HAL_DAC_ConfigChannel+0x184>
  {
    connectOnChip = 0x00000000UL;
 800393a:	2300      	movs	r3, #0
 800393c:	61fb      	str	r3, [r7, #28]
 800393e:	e00f      	b.n	8003960 <HAL_DAC_ConfigChannel+0x1a4>
  }
  else if (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_INTERNAL)
 8003940:	68bb      	ldr	r3, [r7, #8]
 8003942:	68db      	ldr	r3, [r3, #12]
 8003944:	2b02      	cmp	r3, #2
 8003946:	d102      	bne.n	800394e <HAL_DAC_ConfigChannel+0x192>
  {
    connectOnChip = DAC_MCR_MODE1_0;
 8003948:	2301      	movs	r3, #1
 800394a:	61fb      	str	r3, [r7, #28]
 800394c:	e008      	b.n	8003960 <HAL_DAC_ConfigChannel+0x1a4>
  }
  else /* (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_BOTH) */
  {
    if (sConfig->DAC_OutputBuffer == DAC_OUTPUTBUFFER_ENABLE)
 800394e:	68bb      	ldr	r3, [r7, #8]
 8003950:	689b      	ldr	r3, [r3, #8]
 8003952:	2b00      	cmp	r3, #0
 8003954:	d102      	bne.n	800395c <HAL_DAC_ConfigChannel+0x1a0>
    {
      connectOnChip = DAC_MCR_MODE1_0;
 8003956:	2301      	movs	r3, #1
 8003958:	61fb      	str	r3, [r7, #28]
 800395a:	e001      	b.n	8003960 <HAL_DAC_ConfigChannel+0x1a4>
    }
    else
    {
      connectOnChip = 0x00000000UL;
 800395c:	2300      	movs	r3, #0
 800395e:	61fb      	str	r3, [r7, #28]
    }
  }
  tmpreg2 = (sConfig->DAC_SampleAndHold | sConfig->DAC_OutputBuffer | connectOnChip);
 8003960:	68bb      	ldr	r3, [r7, #8]
 8003962:	681a      	ldr	r2, [r3, #0]
 8003964:	68bb      	ldr	r3, [r7, #8]
 8003966:	689b      	ldr	r3, [r3, #8]
 8003968:	4313      	orrs	r3, r2
 800396a:	69fa      	ldr	r2, [r7, #28]
 800396c:	4313      	orrs	r3, r2
 800396e:	613b      	str	r3, [r7, #16]
  /* Calculate MCR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	f003 0310 	and.w	r3, r3, #16
 8003976:	693a      	ldr	r2, [r7, #16]
 8003978:	fa02 f303 	lsl.w	r3, r2, r3
 800397c:	697a      	ldr	r2, [r7, #20]
 800397e:	4313      	orrs	r3, r2
 8003980:	617b      	str	r3, [r7, #20]
  /* Write to DAC MCR */
  hdac->Instance->MCR = tmpreg1;
 8003982:	68fb      	ldr	r3, [r7, #12]
 8003984:	681b      	ldr	r3, [r3, #0]
 8003986:	697a      	ldr	r2, [r7, #20]
 8003988:	63da      	str	r2, [r3, #60]	; 0x3c

  /* DAC in normal operating mode hence clear DAC_CR_CENx bit */
  CLEAR_BIT(hdac->Instance->CR, DAC_CR_CEN1 << (Channel & 0x10UL));
 800398a:	68fb      	ldr	r3, [r7, #12]
 800398c:	681b      	ldr	r3, [r3, #0]
 800398e:	6819      	ldr	r1, [r3, #0]
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	f003 0310 	and.w	r3, r3, #16
 8003996:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800399a:	fa02 f303 	lsl.w	r3, r2, r3
 800399e:	43da      	mvns	r2, r3
 80039a0:	68fb      	ldr	r3, [r7, #12]
 80039a2:	681b      	ldr	r3, [r3, #0]
 80039a4:	400a      	ands	r2, r1
 80039a6:	601a      	str	r2, [r3, #0]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 80039a8:	68fb      	ldr	r3, [r7, #12]
 80039aa:	681b      	ldr	r3, [r3, #0]
 80039ac:	681b      	ldr	r3, [r3, #0]
 80039ae:	617b      	str	r3, [r7, #20]
  /* Clear TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1)) << (Channel & 0x10UL));
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	f003 0310 	and.w	r3, r3, #16
 80039b6:	f640 72fe 	movw	r2, #4094	; 0xffe
 80039ba:	fa02 f303 	lsl.w	r3, r2, r3
 80039be:	43db      	mvns	r3, r3
 80039c0:	697a      	ldr	r2, [r7, #20]
 80039c2:	4013      	ands	r3, r2
 80039c4:	617b      	str	r3, [r7, #20]
  /* Configure for the selected DAC channel: trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  tmpreg2 = sConfig->DAC_Trigger;
 80039c6:	68bb      	ldr	r3, [r7, #8]
 80039c8:	685b      	ldr	r3, [r3, #4]
 80039ca:	613b      	str	r3, [r7, #16]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	f003 0310 	and.w	r3, r3, #16
 80039d2:	693a      	ldr	r2, [r7, #16]
 80039d4:	fa02 f303 	lsl.w	r3, r2, r3
 80039d8:	697a      	ldr	r2, [r7, #20]
 80039da:	4313      	orrs	r3, r2
 80039dc:	617b      	str	r3, [r7, #20]
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 80039de:	68fb      	ldr	r3, [r7, #12]
 80039e0:	681b      	ldr	r3, [r3, #0]
 80039e2:	697a      	ldr	r2, [r7, #20]
 80039e4:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  hdac->Instance->CR &= ~(DAC_CR_WAVE1 << (Channel & 0x10UL));
 80039e6:	68fb      	ldr	r3, [r7, #12]
 80039e8:	681b      	ldr	r3, [r3, #0]
 80039ea:	6819      	ldr	r1, [r3, #0]
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	f003 0310 	and.w	r3, r3, #16
 80039f2:	22c0      	movs	r2, #192	; 0xc0
 80039f4:	fa02 f303 	lsl.w	r3, r2, r3
 80039f8:	43da      	mvns	r2, r3
 80039fa:	68fb      	ldr	r3, [r7, #12]
 80039fc:	681b      	ldr	r3, [r3, #0]
 80039fe:	400a      	ands	r2, r1
 8003a00:	601a      	str	r2, [r3, #0]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8003a02:	68fb      	ldr	r3, [r7, #12]
 8003a04:	2201      	movs	r2, #1
 8003a06:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8003a08:	68fb      	ldr	r3, [r7, #12]
 8003a0a:	2200      	movs	r2, #0
 8003a0c:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8003a0e:	2300      	movs	r3, #0
}
 8003a10:	4618      	mov	r0, r3
 8003a12:	3720      	adds	r7, #32
 8003a14:	46bd      	mov	sp, r7
 8003a16:	bd80      	pop	{r7, pc}
 8003a18:	20008000 	.word	0x20008000

08003a1c <HAL_DMA2D_Init>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Init(DMA2D_HandleTypeDef *hdma2d)
{
 8003a1c:	b580      	push	{r7, lr}
 8003a1e:	b082      	sub	sp, #8
 8003a20:	af00      	add	r7, sp, #0
 8003a22:	6078      	str	r0, [r7, #4]
  /* Check the DMA2D peripheral state */
  if (hdma2d == NULL)
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	2b00      	cmp	r3, #0
 8003a28:	d101      	bne.n	8003a2e <HAL_DMA2D_Init+0x12>
  {
    return HAL_ERROR;
 8003a2a:	2301      	movs	r3, #1
 8003a2c:	e04f      	b.n	8003ace <HAL_DMA2D_Init+0xb2>

    /* Init the low level hardware */
    hdma2d->MspInitCallback(hdma2d);
  }
#else
  if (hdma2d->State == HAL_DMA2D_STATE_RESET)
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	f893 3061 	ldrb.w	r3, [r3, #97]	; 0x61
 8003a34:	b2db      	uxtb	r3, r3
 8003a36:	2b00      	cmp	r3, #0
 8003a38:	d106      	bne.n	8003a48 <HAL_DMA2D_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hdma2d->Lock = HAL_UNLOCKED;
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	2200      	movs	r2, #0
 8003a3e:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
    /* Init the low level hardware */
    HAL_DMA2D_MspInit(hdma2d);
 8003a42:	6878      	ldr	r0, [r7, #4]
 8003a44:	f7fd f9b6 	bl	8000db4 <HAL_DMA2D_MspInit>
  }
#endif /* (USE_HAL_DMA2D_REGISTER_CALLBACKS) */

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	2202      	movs	r2, #2
 8003a4c:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61

  /* DMA2D CR register configuration -------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE | DMA2D_CR_LOM, hdma2d->Init.Mode | hdma2d->Init.LineOffsetMode);
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	681b      	ldr	r3, [r3, #0]
 8003a54:	681a      	ldr	r2, [r3, #0]
 8003a56:	4b20      	ldr	r3, [pc, #128]	; (8003ad8 <HAL_DMA2D_Init+0xbc>)
 8003a58:	4013      	ands	r3, r2
 8003a5a:	687a      	ldr	r2, [r7, #4]
 8003a5c:	6851      	ldr	r1, [r2, #4]
 8003a5e:	687a      	ldr	r2, [r7, #4]
 8003a60:	69d2      	ldr	r2, [r2, #28]
 8003a62:	4311      	orrs	r1, r2
 8003a64:	687a      	ldr	r2, [r7, #4]
 8003a66:	6812      	ldr	r2, [r2, #0]
 8003a68:	430b      	orrs	r3, r1
 8003a6a:	6013      	str	r3, [r2, #0]

  /* DMA2D OPFCCR register configuration ---------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM | DMA2D_OPFCCR_SB,
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	681b      	ldr	r3, [r3, #0]
 8003a70:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003a72:	4b1a      	ldr	r3, [pc, #104]	; (8003adc <HAL_DMA2D_Init+0xc0>)
 8003a74:	4013      	ands	r3, r2
 8003a76:	687a      	ldr	r2, [r7, #4]
 8003a78:	6891      	ldr	r1, [r2, #8]
 8003a7a:	687a      	ldr	r2, [r7, #4]
 8003a7c:	6992      	ldr	r2, [r2, #24]
 8003a7e:	4311      	orrs	r1, r2
 8003a80:	687a      	ldr	r2, [r7, #4]
 8003a82:	6812      	ldr	r2, [r2, #0]
 8003a84:	430b      	orrs	r3, r1
 8003a86:	6353      	str	r3, [r2, #52]	; 0x34
             hdma2d->Init.ColorMode | hdma2d->Init.BytesSwap);

  /* DMA2D OOR register configuration ------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OOR, DMA2D_OOR_LO, hdma2d->Init.OutputOffset);
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	681b      	ldr	r3, [r3, #0]
 8003a8c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003a8e:	4b14      	ldr	r3, [pc, #80]	; (8003ae0 <HAL_DMA2D_Init+0xc4>)
 8003a90:	4013      	ands	r3, r2
 8003a92:	687a      	ldr	r2, [r7, #4]
 8003a94:	68d1      	ldr	r1, [r2, #12]
 8003a96:	687a      	ldr	r2, [r7, #4]
 8003a98:	6812      	ldr	r2, [r2, #0]
 8003a9a:	430b      	orrs	r3, r1
 8003a9c:	6413      	str	r3, [r2, #64]	; 0x40
  /* DMA2D OPFCCR AI and RBS fields setting (Output Alpha Inversion)*/
  MODIFY_REG(hdma2d->Instance->OPFCCR, (DMA2D_OPFCCR_AI | DMA2D_OPFCCR_RBS),
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	681b      	ldr	r3, [r3, #0]
 8003aa2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003aa4:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	691b      	ldr	r3, [r3, #16]
 8003aac:	051a      	lsls	r2, r3, #20
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	695b      	ldr	r3, [r3, #20]
 8003ab2:	055b      	lsls	r3, r3, #21
 8003ab4:	431a      	orrs	r2, r3
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	681b      	ldr	r3, [r3, #0]
 8003aba:	430a      	orrs	r2, r1
 8003abc:	635a      	str	r2, [r3, #52]	; 0x34
             ((hdma2d->Init.AlphaInverted << DMA2D_OPFCCR_AI_Pos) | \
              (hdma2d->Init.RedBlueSwap << DMA2D_OPFCCR_RBS_Pos)));


  /* Update error code */
  hdma2d->ErrorCode = HAL_DMA2D_ERROR_NONE;
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	2200      	movs	r2, #0
 8003ac2:	665a      	str	r2, [r3, #100]	; 0x64

  /* Initialize the DMA2D state*/
  hdma2d->State  = HAL_DMA2D_STATE_READY;
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	2201      	movs	r2, #1
 8003ac8:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61

  return HAL_OK;
 8003acc:	2300      	movs	r3, #0
}
 8003ace:	4618      	mov	r0, r3
 8003ad0:	3708      	adds	r7, #8
 8003ad2:	46bd      	mov	sp, r7
 8003ad4:	bd80      	pop	{r7, pc}
 8003ad6:	bf00      	nop
 8003ad8:	fff8ffbf 	.word	0xfff8ffbf
 8003adc:	fffffef8 	.word	0xfffffef8
 8003ae0:	ffff0000 	.word	0xffff0000

08003ae4 <HAL_DMA2D_ConfigLayer>:
  *                   This parameter can be one of the following values:
  *                   DMA2D_BACKGROUND_LAYER(0) / DMA2D_FOREGROUND_LAYER(1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_ConfigLayer(DMA2D_HandleTypeDef *hdma2d, uint32_t LayerIdx)
{
 8003ae4:	b480      	push	{r7}
 8003ae6:	b087      	sub	sp, #28
 8003ae8:	af00      	add	r7, sp, #0
 8003aea:	6078      	str	r0, [r7, #4]
 8003aec:	6039      	str	r1, [r7, #0]
  uint32_t regValue;

  /* Check the parameters */
  assert_param(IS_DMA2D_LAYER(LayerIdx));
  assert_param(IS_DMA2D_OFFSET(hdma2d->LayerCfg[LayerIdx].InputOffset));
  if (hdma2d->Init.Mode != DMA2D_R2M)
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	685b      	ldr	r3, [r3, #4]
 8003af2:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
    }
  }
  assert_param(IS_DMA2D_ALPHA_INVERTED(hdma2d->LayerCfg[LayerIdx].AlphaInverted));
  assert_param(IS_DMA2D_RB_SWAP(hdma2d->LayerCfg[LayerIdx].RedBlueSwap));

  if ((LayerIdx == DMA2D_FOREGROUND_LAYER) && (hdma2d->LayerCfg[LayerIdx].InputColorMode == DMA2D_INPUT_YCBCR))
 8003af6:	683b      	ldr	r3, [r7, #0]
 8003af8:	2b01      	cmp	r3, #1
 8003afa:	d104      	bne.n	8003b06 <HAL_DMA2D_ConfigLayer+0x22>
 8003afc:	683a      	ldr	r2, [r7, #0]
 8003afe:	4613      	mov	r3, r2
 8003b00:	00db      	lsls	r3, r3, #3
 8003b02:	1a9b      	subs	r3, r3, r2
 8003b04:	009b      	lsls	r3, r3, #2
  {
    assert_param(IS_DMA2D_CHROMA_SUB_SAMPLING(hdma2d->LayerCfg[LayerIdx].ChromaSubSampling));
  }

  /* Process locked */
  __HAL_LOCK(hdma2d);
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	f893 3060 	ldrb.w	r3, [r3, #96]	; 0x60
 8003b0c:	2b01      	cmp	r3, #1
 8003b0e:	d101      	bne.n	8003b14 <HAL_DMA2D_ConfigLayer+0x30>
 8003b10:	2302      	movs	r3, #2
 8003b12:	e092      	b.n	8003c3a <HAL_DMA2D_ConfigLayer+0x156>
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	2201      	movs	r2, #1
 8003b18:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	2202      	movs	r2, #2
 8003b20:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61

  pLayerCfg = &hdma2d->LayerCfg[LayerIdx];
 8003b24:	683a      	ldr	r2, [r7, #0]
 8003b26:	4613      	mov	r3, r2
 8003b28:	00db      	lsls	r3, r3, #3
 8003b2a:	1a9b      	subs	r3, r3, r2
 8003b2c:	009b      	lsls	r3, r3, #2
 8003b2e:	3328      	adds	r3, #40	; 0x28
 8003b30:	687a      	ldr	r2, [r7, #4]
 8003b32:	4413      	add	r3, r2
 8003b34:	60fb      	str	r3, [r7, #12]

  /* Prepare the value to be written to the BGPFCCR or FGPFCCR register */
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos) | \
 8003b36:	68fb      	ldr	r3, [r7, #12]
 8003b38:	685a      	ldr	r2, [r3, #4]
 8003b3a:	68fb      	ldr	r3, [r7, #12]
 8003b3c:	689b      	ldr	r3, [r3, #8]
 8003b3e:	041b      	lsls	r3, r3, #16
 8003b40:	431a      	orrs	r2, r3
             (pLayerCfg->AlphaInverted << DMA2D_BGPFCCR_AI_Pos) | (pLayerCfg->RedBlueSwap << DMA2D_BGPFCCR_RBS_Pos);
 8003b42:	68fb      	ldr	r3, [r7, #12]
 8003b44:	691b      	ldr	r3, [r3, #16]
 8003b46:	051b      	lsls	r3, r3, #20
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos) | \
 8003b48:	431a      	orrs	r2, r3
             (pLayerCfg->AlphaInverted << DMA2D_BGPFCCR_AI_Pos) | (pLayerCfg->RedBlueSwap << DMA2D_BGPFCCR_RBS_Pos);
 8003b4a:	68fb      	ldr	r3, [r7, #12]
 8003b4c:	695b      	ldr	r3, [r3, #20]
 8003b4e:	055b      	lsls	r3, r3, #21
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos) | \
 8003b50:	4313      	orrs	r3, r2
 8003b52:	613b      	str	r3, [r7, #16]
  regMask  = (DMA2D_BGPFCCR_CM | DMA2D_BGPFCCR_AM | DMA2D_BGPFCCR_ALPHA | DMA2D_BGPFCCR_AI | DMA2D_BGPFCCR_RBS);
 8003b54:	4b3c      	ldr	r3, [pc, #240]	; (8003c48 <HAL_DMA2D_ConfigLayer+0x164>)
 8003b56:	617b      	str	r3, [r7, #20]


  if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8003b58:	68fb      	ldr	r3, [r7, #12]
 8003b5a:	685b      	ldr	r3, [r3, #4]
 8003b5c:	2b0a      	cmp	r3, #10
 8003b5e:	d003      	beq.n	8003b68 <HAL_DMA2D_ConfigLayer+0x84>
 8003b60:	68fb      	ldr	r3, [r7, #12]
 8003b62:	685b      	ldr	r3, [r3, #4]
 8003b64:	2b09      	cmp	r3, #9
 8003b66:	d107      	bne.n	8003b78 <HAL_DMA2D_ConfigLayer+0x94>
  {
    regValue |= (pLayerCfg->InputAlpha & DMA2D_BGPFCCR_ALPHA);
 8003b68:	68fb      	ldr	r3, [r7, #12]
 8003b6a:	68db      	ldr	r3, [r3, #12]
 8003b6c:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8003b70:	693a      	ldr	r2, [r7, #16]
 8003b72:	4313      	orrs	r3, r2
 8003b74:	613b      	str	r3, [r7, #16]
 8003b76:	e005      	b.n	8003b84 <HAL_DMA2D_ConfigLayer+0xa0>
  }
  else
  {
    regValue |= (pLayerCfg->InputAlpha << DMA2D_BGPFCCR_ALPHA_Pos);
 8003b78:	68fb      	ldr	r3, [r7, #12]
 8003b7a:	68db      	ldr	r3, [r3, #12]
 8003b7c:	061b      	lsls	r3, r3, #24
 8003b7e:	693a      	ldr	r2, [r7, #16]
 8003b80:	4313      	orrs	r3, r2
 8003b82:	613b      	str	r3, [r7, #16]
  }

  /* Configure the background DMA2D layer */
  if (LayerIdx == DMA2D_BACKGROUND_LAYER)
 8003b84:	683b      	ldr	r3, [r7, #0]
 8003b86:	2b00      	cmp	r3, #0
 8003b88:	d120      	bne.n	8003bcc <HAL_DMA2D_ConfigLayer+0xe8>
  {
    /* Write DMA2D BGPFCCR register */
    MODIFY_REG(hdma2d->Instance->BGPFCCR, regMask, regValue);
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	681b      	ldr	r3, [r3, #0]
 8003b8e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003b90:	697b      	ldr	r3, [r7, #20]
 8003b92:	43db      	mvns	r3, r3
 8003b94:	ea02 0103 	and.w	r1, r2, r3
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	681b      	ldr	r3, [r3, #0]
 8003b9c:	693a      	ldr	r2, [r7, #16]
 8003b9e:	430a      	orrs	r2, r1
 8003ba0:	625a      	str	r2, [r3, #36]	; 0x24

    /* DMA2D BGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->BGOR, pLayerCfg->InputOffset);
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	681b      	ldr	r3, [r3, #0]
 8003ba6:	68fa      	ldr	r2, [r7, #12]
 8003ba8:	6812      	ldr	r2, [r2, #0]
 8003baa:	619a      	str	r2, [r3, #24]

    /* DMA2D BGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8003bac:	68fb      	ldr	r3, [r7, #12]
 8003bae:	685b      	ldr	r3, [r3, #4]
 8003bb0:	2b0a      	cmp	r3, #10
 8003bb2:	d003      	beq.n	8003bbc <HAL_DMA2D_ConfigLayer+0xd8>
 8003bb4:	68fb      	ldr	r3, [r7, #12]
 8003bb6:	685b      	ldr	r3, [r3, #4]
 8003bb8:	2b09      	cmp	r3, #9
 8003bba:	d135      	bne.n	8003c28 <HAL_DMA2D_ConfigLayer+0x144>
    {
      WRITE_REG(hdma2d->Instance->BGCOLR, pLayerCfg->InputAlpha & (DMA2D_BGCOLR_BLUE | DMA2D_BGCOLR_GREEN | \
 8003bbc:	68fb      	ldr	r3, [r7, #12]
 8003bbe:	68da      	ldr	r2, [r3, #12]
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	681b      	ldr	r3, [r3, #0]
 8003bc4:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
 8003bc8:	629a      	str	r2, [r3, #40]	; 0x28
 8003bca:	e02d      	b.n	8003c28 <HAL_DMA2D_ConfigLayer+0x144>
  }
  /* Configure the foreground DMA2D layer */
  else
  {

    if (pLayerCfg->InputColorMode == DMA2D_INPUT_YCBCR)
 8003bcc:	68fb      	ldr	r3, [r7, #12]
 8003bce:	685b      	ldr	r3, [r3, #4]
 8003bd0:	2b0b      	cmp	r3, #11
 8003bd2:	d109      	bne.n	8003be8 <HAL_DMA2D_ConfigLayer+0x104>
    {
      regValue |= (pLayerCfg->ChromaSubSampling << DMA2D_FGPFCCR_CSS_Pos);
 8003bd4:	68fb      	ldr	r3, [r7, #12]
 8003bd6:	699b      	ldr	r3, [r3, #24]
 8003bd8:	049b      	lsls	r3, r3, #18
 8003bda:	693a      	ldr	r2, [r7, #16]
 8003bdc:	4313      	orrs	r3, r2
 8003bde:	613b      	str	r3, [r7, #16]
      regMask  |= DMA2D_FGPFCCR_CSS;
 8003be0:	697b      	ldr	r3, [r7, #20]
 8003be2:	f443 2340 	orr.w	r3, r3, #786432	; 0xc0000
 8003be6:	617b      	str	r3, [r7, #20]
    }

    /* Write DMA2D FGPFCCR register */
    MODIFY_REG(hdma2d->Instance->FGPFCCR, regMask, regValue);
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	681b      	ldr	r3, [r3, #0]
 8003bec:	69da      	ldr	r2, [r3, #28]
 8003bee:	697b      	ldr	r3, [r7, #20]
 8003bf0:	43db      	mvns	r3, r3
 8003bf2:	ea02 0103 	and.w	r1, r2, r3
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	681b      	ldr	r3, [r3, #0]
 8003bfa:	693a      	ldr	r2, [r7, #16]
 8003bfc:	430a      	orrs	r2, r1
 8003bfe:	61da      	str	r2, [r3, #28]

    /* DMA2D FGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->FGOR, pLayerCfg->InputOffset);
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	681b      	ldr	r3, [r3, #0]
 8003c04:	68fa      	ldr	r2, [r7, #12]
 8003c06:	6812      	ldr	r2, [r2, #0]
 8003c08:	611a      	str	r2, [r3, #16]

    /* DMA2D FGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8003c0a:	68fb      	ldr	r3, [r7, #12]
 8003c0c:	685b      	ldr	r3, [r3, #4]
 8003c0e:	2b0a      	cmp	r3, #10
 8003c10:	d003      	beq.n	8003c1a <HAL_DMA2D_ConfigLayer+0x136>
 8003c12:	68fb      	ldr	r3, [r7, #12]
 8003c14:	685b      	ldr	r3, [r3, #4]
 8003c16:	2b09      	cmp	r3, #9
 8003c18:	d106      	bne.n	8003c28 <HAL_DMA2D_ConfigLayer+0x144>
    {
      WRITE_REG(hdma2d->Instance->FGCOLR, pLayerCfg->InputAlpha & (DMA2D_FGCOLR_BLUE | DMA2D_FGCOLR_GREEN | \
 8003c1a:	68fb      	ldr	r3, [r7, #12]
 8003c1c:	68da      	ldr	r2, [r3, #12]
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	681b      	ldr	r3, [r3, #0]
 8003c22:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
 8003c26:	621a      	str	r2, [r3, #32]
                                                                   DMA2D_FGCOLR_RED));
    }
  }
  /* Initialize the DMA2D state*/
  hdma2d->State = HAL_DMA2D_STATE_READY;
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	2201      	movs	r2, #1
 8003c2c:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61

  /* Process unlocked */
  __HAL_UNLOCK(hdma2d);
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	2200      	movs	r2, #0
 8003c34:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60

  return HAL_OK;
 8003c38:	2300      	movs	r3, #0
}
 8003c3a:	4618      	mov	r0, r3
 8003c3c:	371c      	adds	r7, #28
 8003c3e:	46bd      	mov	sp, r7
 8003c40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c44:	4770      	bx	lr
 8003c46:	bf00      	nop
 8003c48:	ff33000f 	.word	0xff33000f

08003c4c <HAL_FDCAN_Init>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Init(FDCAN_HandleTypeDef *hfdcan)
{
 8003c4c:	b580      	push	{r7, lr}
 8003c4e:	b098      	sub	sp, #96	; 0x60
 8003c50:	af00      	add	r7, sp, #0
 8003c52:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  const uint32_t CvtEltSize[] = {0, 0, 0, 0, 0, 1, 2, 3, 4, 0, 5, 0, 0, 0, 6, 0, 0, 0, 7};
 8003c54:	4a84      	ldr	r2, [pc, #528]	; (8003e68 <HAL_FDCAN_Init+0x21c>)
 8003c56:	f107 030c 	add.w	r3, r7, #12
 8003c5a:	4611      	mov	r1, r2
 8003c5c:	224c      	movs	r2, #76	; 0x4c
 8003c5e:	4618      	mov	r0, r3
 8003c60:	f00f fe86 	bl	8013970 <memcpy>

  /* Check FDCAN handle */
  if (hfdcan == NULL)
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	2b00      	cmp	r3, #0
 8003c68:	d101      	bne.n	8003c6e <HAL_FDCAN_Init+0x22>
  {
    return HAL_ERROR;
 8003c6a:	2301      	movs	r3, #1
 8003c6c:	e1ca      	b.n	8004004 <HAL_FDCAN_Init+0x3b8>
  }

  /* Check FDCAN instance */
  if (hfdcan->Instance == FDCAN1)
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	681b      	ldr	r3, [r3, #0]
 8003c72:	4a7e      	ldr	r2, [pc, #504]	; (8003e6c <HAL_FDCAN_Init+0x220>)
 8003c74:	4293      	cmp	r3, r2
 8003c76:	d106      	bne.n	8003c86 <HAL_FDCAN_Init+0x3a>
  {
    hfdcan->ttcan = (TTCAN_TypeDef *)((uint32_t)hfdcan->Instance + 0x100U);
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	681b      	ldr	r3, [r3, #0]
 8003c7c:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8003c80:	461a      	mov	r2, r3
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	605a      	str	r2, [r3, #4]

    /* Init the low level hardware: CLOCK, NVIC */
    hfdcan->MspInitCallback(hfdcan);
  }
#else
  if (hfdcan->State == HAL_FDCAN_STATE_RESET)
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 8003c8c:	b2db      	uxtb	r3, r3
 8003c8e:	2b00      	cmp	r3, #0
 8003c90:	d106      	bne.n	8003ca0 <HAL_FDCAN_Init+0x54>
  {
    /* Allocate lock resource and initialize it */
    hfdcan->Lock = HAL_UNLOCKED;
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	2200      	movs	r2, #0
 8003c96:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99

    /* Init the low level hardware: CLOCK, NVIC */
    HAL_FDCAN_MspInit(hfdcan);
 8003c9a:	6878      	ldr	r0, [r7, #4]
 8003c9c:	f7fd f910 	bl	8000ec0 <HAL_FDCAN_MspInit>
  }
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */

  /* Exit from Sleep mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CSR);
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	681b      	ldr	r3, [r3, #0]
 8003ca4:	699a      	ldr	r2, [r3, #24]
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	681b      	ldr	r3, [r3, #0]
 8003caa:	f022 0210 	bic.w	r2, r2, #16
 8003cae:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003cb0:	f7fe fb78 	bl	80023a4 <HAL_GetTick>
 8003cb4:	65f8      	str	r0, [r7, #92]	; 0x5c

  /* Check Sleep mode acknowledge */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 8003cb6:	e014      	b.n	8003ce2 <HAL_FDCAN_Init+0x96>
  {
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 8003cb8:	f7fe fb74 	bl	80023a4 <HAL_GetTick>
 8003cbc:	4602      	mov	r2, r0
 8003cbe:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003cc0:	1ad3      	subs	r3, r2, r3
 8003cc2:	2b0a      	cmp	r3, #10
 8003cc4:	d90d      	bls.n	8003ce2 <HAL_FDCAN_Init+0x96>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003ccc:	f043 0201 	orr.w	r2, r3, #1
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	2203      	movs	r2, #3
 8003cda:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

      return HAL_ERROR;
 8003cde:	2301      	movs	r3, #1
 8003ce0:	e190      	b.n	8004004 <HAL_FDCAN_Init+0x3b8>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	681b      	ldr	r3, [r3, #0]
 8003ce6:	699b      	ldr	r3, [r3, #24]
 8003ce8:	f003 0308 	and.w	r3, r3, #8
 8003cec:	2b08      	cmp	r3, #8
 8003cee:	d0e3      	beq.n	8003cb8 <HAL_FDCAN_Init+0x6c>
    }
  }

  /* Request initialisation */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	681b      	ldr	r3, [r3, #0]
 8003cf4:	699a      	ldr	r2, [r3, #24]
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	681b      	ldr	r3, [r3, #0]
 8003cfa:	f042 0201 	orr.w	r2, r2, #1
 8003cfe:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003d00:	f7fe fb50 	bl	80023a4 <HAL_GetTick>
 8003d04:	65f8      	str	r0, [r7, #92]	; 0x5c

  /* Wait until the INIT bit into CCCR register is set */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 8003d06:	e014      	b.n	8003d32 <HAL_FDCAN_Init+0xe6>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 8003d08:	f7fe fb4c 	bl	80023a4 <HAL_GetTick>
 8003d0c:	4602      	mov	r2, r0
 8003d0e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003d10:	1ad3      	subs	r3, r2, r3
 8003d12:	2b0a      	cmp	r3, #10
 8003d14:	d90d      	bls.n	8003d32 <HAL_FDCAN_Init+0xe6>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003d1c:	f043 0201 	orr.w	r2, r3, #1
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	2203      	movs	r2, #3
 8003d2a:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

      return HAL_ERROR;
 8003d2e:	2301      	movs	r3, #1
 8003d30:	e168      	b.n	8004004 <HAL_FDCAN_Init+0x3b8>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	681b      	ldr	r3, [r3, #0]
 8003d36:	699b      	ldr	r3, [r3, #24]
 8003d38:	f003 0301 	and.w	r3, r3, #1
 8003d3c:	2b00      	cmp	r3, #0
 8003d3e:	d0e3      	beq.n	8003d08 <HAL_FDCAN_Init+0xbc>
    }
  }

  /* Enable configuration change */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CCE);
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	681b      	ldr	r3, [r3, #0]
 8003d44:	699a      	ldr	r2, [r3, #24]
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	681b      	ldr	r3, [r3, #0]
 8003d4a:	f042 0202 	orr.w	r2, r2, #2
 8003d4e:	619a      	str	r2, [r3, #24]

  /* Set the no automatic retransmission */
  if (hfdcan->Init.AutoRetransmission == ENABLE)
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	7c1b      	ldrb	r3, [r3, #16]
 8003d54:	2b01      	cmp	r3, #1
 8003d56:	d108      	bne.n	8003d6a <HAL_FDCAN_Init+0x11e>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	681b      	ldr	r3, [r3, #0]
 8003d5c:	699a      	ldr	r2, [r3, #24]
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	681b      	ldr	r3, [r3, #0]
 8003d62:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003d66:	619a      	str	r2, [r3, #24]
 8003d68:	e007      	b.n	8003d7a <HAL_FDCAN_Init+0x12e>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	681b      	ldr	r3, [r3, #0]
 8003d6e:	699a      	ldr	r2, [r3, #24]
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	681b      	ldr	r3, [r3, #0]
 8003d74:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003d78:	619a      	str	r2, [r3, #24]
  }

  /* Set the transmit pause feature */
  if (hfdcan->Init.TransmitPause == ENABLE)
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	7c5b      	ldrb	r3, [r3, #17]
 8003d7e:	2b01      	cmp	r3, #1
 8003d80:	d108      	bne.n	8003d94 <HAL_FDCAN_Init+0x148>
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	681b      	ldr	r3, [r3, #0]
 8003d86:	699a      	ldr	r2, [r3, #24]
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	681b      	ldr	r3, [r3, #0]
 8003d8c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003d90:	619a      	str	r2, [r3, #24]
 8003d92:	e007      	b.n	8003da4 <HAL_FDCAN_Init+0x158>
  }
  else
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	681b      	ldr	r3, [r3, #0]
 8003d98:	699a      	ldr	r2, [r3, #24]
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	681b      	ldr	r3, [r3, #0]
 8003d9e:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8003da2:	619a      	str	r2, [r3, #24]
  }

  /* Set the Protocol Exception Handling */
  if (hfdcan->Init.ProtocolException == ENABLE)
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	7c9b      	ldrb	r3, [r3, #18]
 8003da8:	2b01      	cmp	r3, #1
 8003daa:	d108      	bne.n	8003dbe <HAL_FDCAN_Init+0x172>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	681b      	ldr	r3, [r3, #0]
 8003db0:	699a      	ldr	r2, [r3, #24]
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	681b      	ldr	r3, [r3, #0]
 8003db6:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8003dba:	619a      	str	r2, [r3, #24]
 8003dbc:	e007      	b.n	8003dce <HAL_FDCAN_Init+0x182>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	681b      	ldr	r3, [r3, #0]
 8003dc2:	699a      	ldr	r2, [r3, #24]
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	681b      	ldr	r3, [r3, #0]
 8003dc8:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8003dcc:	619a      	str	r2, [r3, #24]
  }

  /* Set FDCAN Frame Format */
  MODIFY_REG(hfdcan->Instance->CCCR, FDCAN_FRAME_FD_BRS, hfdcan->Init.FrameFormat);
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	681b      	ldr	r3, [r3, #0]
 8003dd2:	699b      	ldr	r3, [r3, #24]
 8003dd4:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	689a      	ldr	r2, [r3, #8]
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	681b      	ldr	r3, [r3, #0]
 8003de0:	430a      	orrs	r2, r1
 8003de2:	619a      	str	r2, [r3, #24]

  /* Reset FDCAN Operation Mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, (FDCAN_CCCR_TEST | FDCAN_CCCR_MON | FDCAN_CCCR_ASM));
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	681b      	ldr	r3, [r3, #0]
 8003de8:	699a      	ldr	r2, [r3, #24]
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	681b      	ldr	r3, [r3, #0]
 8003dee:	f022 02a4 	bic.w	r2, r2, #164	; 0xa4
 8003df2:	619a      	str	r2, [r3, #24]
  CLEAR_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	681b      	ldr	r3, [r3, #0]
 8003df8:	691a      	ldr	r2, [r3, #16]
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	681b      	ldr	r3, [r3, #0]
 8003dfe:	f022 0210 	bic.w	r2, r2, #16
 8003e02:	611a      	str	r2, [r3, #16]
     CCCR.TEST |   0    |     0      |     0      |    1     |    1
     CCCR.MON  |   0    |     0      |     1      |    1     |    0
     TEST.LBCK |   0    |     0      |     0      |    1     |    1
     CCCR.ASM  |   0    |     1      |     0      |    0     |    0
  */
  if (hfdcan->Init.Mode == FDCAN_MODE_RESTRICTED_OPERATION)
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	68db      	ldr	r3, [r3, #12]
 8003e08:	2b01      	cmp	r3, #1
 8003e0a:	d108      	bne.n	8003e1e <HAL_FDCAN_Init+0x1d2>
  {
    /* Enable Restricted Operation mode */
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_ASM);
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	681b      	ldr	r3, [r3, #0]
 8003e10:	699a      	ldr	r2, [r3, #24]
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	681b      	ldr	r3, [r3, #0]
 8003e16:	f042 0204 	orr.w	r2, r2, #4
 8003e1a:	619a      	str	r2, [r3, #24]
 8003e1c:	e030      	b.n	8003e80 <HAL_FDCAN_Init+0x234>
  }
  else if (hfdcan->Init.Mode != FDCAN_MODE_NORMAL)
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	68db      	ldr	r3, [r3, #12]
 8003e22:	2b00      	cmp	r3, #0
 8003e24:	d02c      	beq.n	8003e80 <HAL_FDCAN_Init+0x234>
  {
    if (hfdcan->Init.Mode != FDCAN_MODE_BUS_MONITORING)
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	68db      	ldr	r3, [r3, #12]
 8003e2a:	2b02      	cmp	r3, #2
 8003e2c:	d020      	beq.n	8003e70 <HAL_FDCAN_Init+0x224>
    {
      /* Enable write access to TEST register */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TEST);
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	681b      	ldr	r3, [r3, #0]
 8003e32:	699a      	ldr	r2, [r3, #24]
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	681b      	ldr	r3, [r3, #0]
 8003e38:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8003e3c:	619a      	str	r2, [r3, #24]

      /* Enable LoopBack mode */
      SET_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	681b      	ldr	r3, [r3, #0]
 8003e42:	691a      	ldr	r2, [r3, #16]
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	681b      	ldr	r3, [r3, #0]
 8003e48:	f042 0210 	orr.w	r2, r2, #16
 8003e4c:	611a      	str	r2, [r3, #16]

      if (hfdcan->Init.Mode == FDCAN_MODE_INTERNAL_LOOPBACK)
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	68db      	ldr	r3, [r3, #12]
 8003e52:	2b03      	cmp	r3, #3
 8003e54:	d114      	bne.n	8003e80 <HAL_FDCAN_Init+0x234>
      {
        SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	681b      	ldr	r3, [r3, #0]
 8003e5a:	699a      	ldr	r2, [r3, #24]
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	681b      	ldr	r3, [r3, #0]
 8003e60:	f042 0220 	orr.w	r2, r2, #32
 8003e64:	619a      	str	r2, [r3, #24]
 8003e66:	e00b      	b.n	8003e80 <HAL_FDCAN_Init+0x234>
 8003e68:	080165d8 	.word	0x080165d8
 8003e6c:	4000a000 	.word	0x4000a000
      }
    }
    else
    {
      /* Enable bus monitoring mode */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	681b      	ldr	r3, [r3, #0]
 8003e74:	699a      	ldr	r2, [r3, #24]
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	681b      	ldr	r3, [r3, #0]
 8003e7a:	f042 0220 	orr.w	r2, r2, #32
 8003e7e:	619a      	str	r2, [r3, #24]
  {
    /* Nothing to do: normal mode */
  }

  /* Set the nominal bit timing register */
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	699b      	ldr	r3, [r3, #24]
 8003e84:	3b01      	subs	r3, #1
 8003e86:	065a      	lsls	r2, r3, #25
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	69db      	ldr	r3, [r3, #28]
 8003e8c:	3b01      	subs	r3, #1
 8003e8e:	021b      	lsls	r3, r3, #8
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8003e90:	431a      	orrs	r2, r3
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	6a1b      	ldr	r3, [r3, #32]
 8003e96:	3b01      	subs	r3, #1
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 8003e98:	ea42 0103 	orr.w	r1, r2, r3
                            (((uint32_t)hfdcan->Init.NominalPrescaler - 1U) << FDCAN_NBTP_NBRP_Pos));
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	695b      	ldr	r3, [r3, #20]
 8003ea0:	3b01      	subs	r3, #1
 8003ea2:	041a      	lsls	r2, r3, #16
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	681b      	ldr	r3, [r3, #0]
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 8003ea8:	430a      	orrs	r2, r1
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8003eaa:	61da      	str	r2, [r3, #28]

  /* If FD operation with BRS is selected, set the data bit timing register */
  if (hfdcan->Init.FrameFormat == FDCAN_FRAME_FD_BRS)
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	689b      	ldr	r3, [r3, #8]
 8003eb0:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003eb4:	d115      	bne.n	8003ee2 <HAL_FDCAN_Init+0x296>
  {
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos) | \
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003eba:	1e5a      	subs	r2, r3, #1
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)    | \
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ec0:	3b01      	subs	r3, #1
 8003ec2:	021b      	lsls	r3, r3, #8
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos) | \
 8003ec4:	431a      	orrs	r2, r3
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)    | \
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003eca:	3b01      	subs	r3, #1
 8003ecc:	011b      	lsls	r3, r3, #4
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)    | \
 8003ece:	ea42 0103 	orr.w	r1, r2, r3
                              (((uint32_t)hfdcan->Init.DataPrescaler - 1U) << FDCAN_DBTP_DBRP_Pos));
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ed6:	3b01      	subs	r3, #1
 8003ed8:	041a      	lsls	r2, r3, #16
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos) | \
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	681b      	ldr	r3, [r3, #0]
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)    | \
 8003ede:	430a      	orrs	r2, r1
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos) | \
 8003ee0:	60da      	str	r2, [r3, #12]
  }

  if (hfdcan->Init.TxFifoQueueElmtsNbr > 0U)
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003ee6:	2b00      	cmp	r3, #0
 8003ee8:	d00a      	beq.n	8003f00 <HAL_FDCAN_Init+0x2b4>
  {
    /* Select between Tx FIFO and Tx Queue operation modes */
    SET_BIT(hfdcan->Instance->TXBC, hfdcan->Init.TxFifoQueueMode);
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	681b      	ldr	r3, [r3, #0]
 8003eee:	f8d3 10c0 	ldr.w	r1, [r3, #192]	; 0xc0
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	681b      	ldr	r3, [r3, #0]
 8003efa:	430a      	orrs	r2, r1
 8003efc:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
  }

  /* Configure Tx element size */
  if ((hfdcan->Init.TxBuffersNbr + hfdcan->Init.TxFifoQueueElmtsNbr) > 0U)
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003f08:	4413      	add	r3, r2
 8003f0a:	2b00      	cmp	r3, #0
 8003f0c:	d012      	beq.n	8003f34 <HAL_FDCAN_Init+0x2e8>
  {
    MODIFY_REG(hfdcan->Instance->TXESC, FDCAN_TXESC_TBDS, CvtEltSize[hfdcan->Init.TxElmtSize]);
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	681b      	ldr	r3, [r3, #0]
 8003f12:	f8d3 30c8 	ldr.w	r3, [r3, #200]	; 0xc8
 8003f16:	f023 0107 	bic.w	r1, r3, #7
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003f1e:	009b      	lsls	r3, r3, #2
 8003f20:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8003f24:	4413      	add	r3, r2
 8003f26:	f853 2c54 	ldr.w	r2, [r3, #-84]
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	681b      	ldr	r3, [r3, #0]
 8003f2e:	430a      	orrs	r2, r1
 8003f30:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
  }

  /* Configure Rx FIFO 0 element size */
  if (hfdcan->Init.RxFifo0ElmtsNbr > 0U)
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f38:	2b00      	cmp	r3, #0
 8003f3a:	d012      	beq.n	8003f62 <HAL_FDCAN_Init+0x316>
  {
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_F0DS, (CvtEltSize[hfdcan->Init.RxFifo0ElmtSize] << FDCAN_RXESC_F0DS_Pos));
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	681b      	ldr	r3, [r3, #0]
 8003f40:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 8003f44:	f023 0107 	bic.w	r1, r3, #7
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003f4c:	009b      	lsls	r3, r3, #2
 8003f4e:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8003f52:	4413      	add	r3, r2
 8003f54:	f853 2c54 	ldr.w	r2, [r3, #-84]
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	681b      	ldr	r3, [r3, #0]
 8003f5c:	430a      	orrs	r2, r1
 8003f5e:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
  }

  /* Configure Rx FIFO 1 element size */
  if (hfdcan->Init.RxFifo1ElmtsNbr > 0U)
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003f66:	2b00      	cmp	r3, #0
 8003f68:	d013      	beq.n	8003f92 <HAL_FDCAN_Init+0x346>
  {
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_F1DS, (CvtEltSize[hfdcan->Init.RxFifo1ElmtSize] << FDCAN_RXESC_F1DS_Pos));
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	681b      	ldr	r3, [r3, #0]
 8003f6e:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 8003f72:	f023 0170 	bic.w	r1, r3, #112	; 0x70
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003f7a:	009b      	lsls	r3, r3, #2
 8003f7c:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8003f80:	4413      	add	r3, r2
 8003f82:	f853 3c54 	ldr.w	r3, [r3, #-84]
 8003f86:	011a      	lsls	r2, r3, #4
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	681b      	ldr	r3, [r3, #0]
 8003f8c:	430a      	orrs	r2, r1
 8003f8e:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
  }

  /* Configure Rx buffer element size */
  if (hfdcan->Init.RxBuffersNbr > 0U)
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003f96:	2b00      	cmp	r3, #0
 8003f98:	d013      	beq.n	8003fc2 <HAL_FDCAN_Init+0x376>
  {
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_RBDS, (CvtEltSize[hfdcan->Init.RxBufferSize] << FDCAN_RXESC_RBDS_Pos));
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	681b      	ldr	r3, [r3, #0]
 8003f9e:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 8003fa2:	f423 61e0 	bic.w	r1, r3, #1792	; 0x700
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003faa:	009b      	lsls	r3, r3, #2
 8003fac:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8003fb0:	4413      	add	r3, r2
 8003fb2:	f853 3c54 	ldr.w	r3, [r3, #-84]
 8003fb6:	021a      	lsls	r2, r3, #8
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	681b      	ldr	r3, [r3, #0]
 8003fbc:	430a      	orrs	r2, r1
 8003fbe:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
  }

  /* By default operation mode is set to Event-driven communication.
     If Time-triggered communication is needed, user should call the
     HAL_FDCAN_TT_ConfigOperation function just after the HAL_FDCAN_Init */
  if (hfdcan->Instance == FDCAN1)
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	681b      	ldr	r3, [r3, #0]
 8003fc6:	4a11      	ldr	r2, [pc, #68]	; (800400c <HAL_FDCAN_Init+0x3c0>)
 8003fc8:	4293      	cmp	r3, r2
 8003fca:	d107      	bne.n	8003fdc <HAL_FDCAN_Init+0x390>
  {
    CLEAR_BIT(hfdcan->ttcan->TTOCF, FDCAN_TTOCF_OM);
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	685b      	ldr	r3, [r3, #4]
 8003fd0:	689a      	ldr	r2, [r3, #8]
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	685b      	ldr	r3, [r3, #4]
 8003fd6:	f022 0203 	bic.w	r2, r2, #3
 8003fda:	609a      	str	r2, [r3, #8]
  }

  /* Initialize the Latest Tx FIFO/Queue request buffer index */
  hfdcan->LatestTxFifoQRequest = 0U;
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	2200      	movs	r2, #0
 8003fe0:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94

  /* Initialize the error code */
  hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	2200      	movs	r2, #0
 8003fe8:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

  /* Initialize the FDCAN state */
  hfdcan->State = HAL_FDCAN_STATE_READY;
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	2201      	movs	r2, #1
 8003ff0:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

  /* Calculate each RAM block address */
  status = FDCAN_CalcultateRamBlockAddresses(hfdcan);
 8003ff4:	6878      	ldr	r0, [r7, #4]
 8003ff6:	f000 fb1f 	bl	8004638 <FDCAN_CalcultateRamBlockAddresses>
 8003ffa:	4603      	mov	r3, r0
 8003ffc:	f887 305b 	strb.w	r3, [r7, #91]	; 0x5b

  /* Return function status */
  return status;
 8004000:	f897 305b 	ldrb.w	r3, [r7, #91]	; 0x5b
}
 8004004:	4618      	mov	r0, r3
 8004006:	3760      	adds	r7, #96	; 0x60
 8004008:	46bd      	mov	sp, r7
 800400a:	bd80      	pop	{r7, pc}
 800400c:	4000a000 	.word	0x4000a000

08004010 <HAL_FDCAN_IRQHandler>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
void HAL_FDCAN_IRQHandler(FDCAN_HandleTypeDef *hfdcan)
{
 8004010:	b580      	push	{r7, lr}
 8004012:	b092      	sub	sp, #72	; 0x48
 8004014:	af00      	add	r7, sp, #0
 8004016:	6078      	str	r0, [r7, #4]
  uint32_t TTDistErrors;
  uint32_t TTFatalErrors;
  uint32_t SWTime;
  uint32_t SWCycleCount;

  ClkCalibrationITs = (FDCAN_CCU->IR << 30);
 8004018:	4b90      	ldr	r3, [pc, #576]	; (800425c <HAL_FDCAN_IRQHandler+0x24c>)
 800401a:	691b      	ldr	r3, [r3, #16]
 800401c:	079b      	lsls	r3, r3, #30
 800401e:	647b      	str	r3, [r7, #68]	; 0x44
  ClkCalibrationITs &= (FDCAN_CCU->IE << 30);
 8004020:	4b8e      	ldr	r3, [pc, #568]	; (800425c <HAL_FDCAN_IRQHandler+0x24c>)
 8004022:	695b      	ldr	r3, [r3, #20]
 8004024:	079b      	lsls	r3, r3, #30
 8004026:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004028:	4013      	ands	r3, r2
 800402a:	647b      	str	r3, [r7, #68]	; 0x44
  TxEventFifoITs = hfdcan->Instance->IR & FDCAN_TX_EVENT_FIFO_MASK;
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	681b      	ldr	r3, [r3, #0]
 8004030:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004032:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 8004036:	643b      	str	r3, [r7, #64]	; 0x40
  TxEventFifoITs &= hfdcan->Instance->IE;
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	681b      	ldr	r3, [r3, #0]
 800403c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800403e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8004040:	4013      	ands	r3, r2
 8004042:	643b      	str	r3, [r7, #64]	; 0x40
  RxFifo0ITs = hfdcan->Instance->IR & FDCAN_RX_FIFO0_MASK;
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	681b      	ldr	r3, [r3, #0]
 8004048:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800404a:	f003 030f 	and.w	r3, r3, #15
 800404e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RxFifo0ITs &= hfdcan->Instance->IE;
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	681b      	ldr	r3, [r3, #0]
 8004054:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004056:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8004058:	4013      	ands	r3, r2
 800405a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RxFifo1ITs = hfdcan->Instance->IR & FDCAN_RX_FIFO1_MASK;
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	681b      	ldr	r3, [r3, #0]
 8004060:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004062:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004066:	63bb      	str	r3, [r7, #56]	; 0x38
  RxFifo1ITs &= hfdcan->Instance->IE;
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	681b      	ldr	r3, [r3, #0]
 800406c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800406e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004070:	4013      	ands	r3, r2
 8004072:	63bb      	str	r3, [r7, #56]	; 0x38
  Errors = hfdcan->Instance->IR & FDCAN_ERROR_MASK;
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	681b      	ldr	r3, [r3, #0]
 8004078:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800407a:	f003 5371 	and.w	r3, r3, #1010827264	; 0x3c400000
 800407e:	637b      	str	r3, [r7, #52]	; 0x34
  Errors &= hfdcan->Instance->IE;
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	681b      	ldr	r3, [r3, #0]
 8004084:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004086:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004088:	4013      	ands	r3, r2
 800408a:	637b      	str	r3, [r7, #52]	; 0x34
  ErrorStatusITs = hfdcan->Instance->IR & FDCAN_ERROR_STATUS_MASK;
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	681b      	ldr	r3, [r3, #0]
 8004090:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004092:	f003 7360 	and.w	r3, r3, #58720256	; 0x3800000
 8004096:	633b      	str	r3, [r7, #48]	; 0x30
  ErrorStatusITs &= hfdcan->Instance->IE;
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	681b      	ldr	r3, [r3, #0]
 800409c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800409e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80040a0:	4013      	ands	r3, r2
 80040a2:	633b      	str	r3, [r7, #48]	; 0x30

  /* High Priority Message interrupt management *******************************/
  if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_RX_HIGH_PRIORITY_MSG) != 0U)
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	681b      	ldr	r3, [r3, #0]
 80040a8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80040aa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80040ae:	2b00      	cmp	r3, #0
 80040b0:	d011      	beq.n	80040d6 <HAL_FDCAN_IRQHandler+0xc6>
  {
    if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_RX_HIGH_PRIORITY_MSG) != 0U)
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	681b      	ldr	r3, [r3, #0]
 80040b6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80040b8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80040bc:	2b00      	cmp	r3, #0
 80040be:	d00a      	beq.n	80040d6 <HAL_FDCAN_IRQHandler+0xc6>
    {
      /* Clear the High Priority Message flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_RX_HIGH_PRIORITY_MSG);
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	681b      	ldr	r3, [r3, #0]
 80040c4:	f44f 7280 	mov.w	r2, #256	; 0x100
 80040c8:	651a      	str	r2, [r3, #80]	; 0x50
 80040ca:	4b64      	ldr	r3, [pc, #400]	; (800425c <HAL_FDCAN_IRQHandler+0x24c>)
 80040cc:	2200      	movs	r2, #0
 80040ce:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->HighPriorityMessageCallback(hfdcan);
#else
      /* High Priority Message Callback */
      HAL_FDCAN_HighPriorityMessageCallback(hfdcan);
 80040d0:	6878      	ldr	r0, [r7, #4]
 80040d2:	f000 fa65 	bl	80045a0 <HAL_FDCAN_HighPriorityMessageCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Transmission Abort interrupt management **********************************/
  if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_TX_ABORT_COMPLETE) != 0U)
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	681b      	ldr	r3, [r3, #0]
 80040da:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80040dc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80040e0:	2b00      	cmp	r3, #0
 80040e2:	d01e      	beq.n	8004122 <HAL_FDCAN_IRQHandler+0x112>
  {
    if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_TX_ABORT_COMPLETE) != 0U)
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	681b      	ldr	r3, [r3, #0]
 80040e8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80040ea:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80040ee:	2b00      	cmp	r3, #0
 80040f0:	d017      	beq.n	8004122 <HAL_FDCAN_IRQHandler+0x112>
    {
      /* List of aborted monitored buffers */
      AbortedBuffers = hfdcan->Instance->TXBCF;
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	681b      	ldr	r3, [r3, #0]
 80040f6:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 80040fa:	62fb      	str	r3, [r7, #44]	; 0x2c
      AbortedBuffers &= hfdcan->Instance->TXBCIE;
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	681b      	ldr	r3, [r3, #0]
 8004100:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8004104:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004106:	4013      	ands	r3, r2
 8004108:	62fb      	str	r3, [r7, #44]	; 0x2c

      /* Clear the Transmission Cancellation flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_ABORT_COMPLETE);
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	681b      	ldr	r3, [r3, #0]
 800410e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8004112:	651a      	str	r2, [r3, #80]	; 0x50
 8004114:	4b51      	ldr	r3, [pc, #324]	; (800425c <HAL_FDCAN_IRQHandler+0x24c>)
 8004116:	2200      	movs	r2, #0
 8004118:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxBufferAbortCallback(hfdcan, AbortedBuffers);
#else
      /* Transmission Cancellation Callback */
      HAL_FDCAN_TxBufferAbortCallback(hfdcan, AbortedBuffers);
 800411a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800411c:	6878      	ldr	r0, [r7, #4]
 800411e:	f000 fa16 	bl	800454e <HAL_FDCAN_TxBufferAbortCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Clock calibration unit interrupts management *****************************/
  if (ClkCalibrationITs != 0U)
 8004122:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004124:	2b00      	cmp	r3, #0
 8004126:	d00d      	beq.n	8004144 <HAL_FDCAN_IRQHandler+0x134>
  {
    /* Clear the Clock Calibration flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, ClkCalibrationITs);
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	681a      	ldr	r2, [r3, #0]
 800412c:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800412e:	4b4c      	ldr	r3, [pc, #304]	; (8004260 <HAL_FDCAN_IRQHandler+0x250>)
 8004130:	400b      	ands	r3, r1
 8004132:	6513      	str	r3, [r2, #80]	; 0x50
 8004134:	4a49      	ldr	r2, [pc, #292]	; (800425c <HAL_FDCAN_IRQHandler+0x24c>)
 8004136:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004138:	0f9b      	lsrs	r3, r3, #30
 800413a:	6113      	str	r3, [r2, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->ClockCalibrationCallback(hfdcan, ClkCalibrationITs);
#else
    /* Clock Calibration Callback */
    HAL_FDCAN_ClockCalibrationCallback(hfdcan, ClkCalibrationITs);
 800413c:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800413e:	6878      	ldr	r0, [r7, #4]
 8004140:	f000 f9c4 	bl	80044cc <HAL_FDCAN_ClockCalibrationCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Tx event FIFO interrupts management **************************************/
  if (TxEventFifoITs != 0U)
 8004144:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004146:	2b00      	cmp	r3, #0
 8004148:	d00d      	beq.n	8004166 <HAL_FDCAN_IRQHandler+0x156>
  {
    /* Clear the Tx Event FIFO flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, TxEventFifoITs);
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	681a      	ldr	r2, [r3, #0]
 800414e:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8004150:	4b43      	ldr	r3, [pc, #268]	; (8004260 <HAL_FDCAN_IRQHandler+0x250>)
 8004152:	400b      	ands	r3, r1
 8004154:	6513      	str	r3, [r2, #80]	; 0x50
 8004156:	4a41      	ldr	r2, [pc, #260]	; (800425c <HAL_FDCAN_IRQHandler+0x24c>)
 8004158:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800415a:	0f9b      	lsrs	r3, r3, #30
 800415c:	6113      	str	r3, [r2, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->TxEventFifoCallback(hfdcan, TxEventFifoITs);
#else
    /* Tx Event FIFO Callback */
    HAL_FDCAN_TxEventFifoCallback(hfdcan, TxEventFifoITs);
 800415e:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8004160:	6878      	ldr	r0, [r7, #4]
 8004162:	f000 f9be 	bl	80044e2 <HAL_FDCAN_TxEventFifoCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Rx FIFO 0 interrupts management ******************************************/
  if (RxFifo0ITs != 0U)
 8004166:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004168:	2b00      	cmp	r3, #0
 800416a:	d00d      	beq.n	8004188 <HAL_FDCAN_IRQHandler+0x178>
  {
    /* Clear the Rx FIFO 0 flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, RxFifo0ITs);
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	681a      	ldr	r2, [r3, #0]
 8004170:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8004172:	4b3b      	ldr	r3, [pc, #236]	; (8004260 <HAL_FDCAN_IRQHandler+0x250>)
 8004174:	400b      	ands	r3, r1
 8004176:	6513      	str	r3, [r2, #80]	; 0x50
 8004178:	4a38      	ldr	r2, [pc, #224]	; (800425c <HAL_FDCAN_IRQHandler+0x24c>)
 800417a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800417c:	0f9b      	lsrs	r3, r3, #30
 800417e:	6113      	str	r3, [r2, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->RxFifo0Callback(hfdcan, RxFifo0ITs);
#else
    /* Rx FIFO 0 Callback */
    HAL_FDCAN_RxFifo0Callback(hfdcan, RxFifo0ITs);
 8004180:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8004182:	6878      	ldr	r0, [r7, #4]
 8004184:	f000 f9b8 	bl	80044f8 <HAL_FDCAN_RxFifo0Callback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Rx FIFO 1 interrupts management ******************************************/
  if (RxFifo1ITs != 0U)
 8004188:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800418a:	2b00      	cmp	r3, #0
 800418c:	d00d      	beq.n	80041aa <HAL_FDCAN_IRQHandler+0x19a>
  {
    /* Clear the Rx FIFO 1 flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, RxFifo1ITs);
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	681a      	ldr	r2, [r3, #0]
 8004192:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8004194:	4b32      	ldr	r3, [pc, #200]	; (8004260 <HAL_FDCAN_IRQHandler+0x250>)
 8004196:	400b      	ands	r3, r1
 8004198:	6513      	str	r3, [r2, #80]	; 0x50
 800419a:	4a30      	ldr	r2, [pc, #192]	; (800425c <HAL_FDCAN_IRQHandler+0x24c>)
 800419c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800419e:	0f9b      	lsrs	r3, r3, #30
 80041a0:	6113      	str	r3, [r2, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->RxFifo1Callback(hfdcan, RxFifo1ITs);
#else
    /* Rx FIFO 1 Callback */
    HAL_FDCAN_RxFifo1Callback(hfdcan, RxFifo1ITs);
 80041a2:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80041a4:	6878      	ldr	r0, [r7, #4]
 80041a6:	f000 f9b2 	bl	800450e <HAL_FDCAN_RxFifo1Callback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Tx FIFO empty interrupt management ***************************************/
  if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_TX_FIFO_EMPTY) != 0U)
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	681b      	ldr	r3, [r3, #0]
 80041ae:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80041b0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80041b4:	2b00      	cmp	r3, #0
 80041b6:	d011      	beq.n	80041dc <HAL_FDCAN_IRQHandler+0x1cc>
  {
    if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_TX_FIFO_EMPTY) != 0U)
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	681b      	ldr	r3, [r3, #0]
 80041bc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80041be:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80041c2:	2b00      	cmp	r3, #0
 80041c4:	d00a      	beq.n	80041dc <HAL_FDCAN_IRQHandler+0x1cc>
    {
      /* Clear the Tx FIFO empty flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_FIFO_EMPTY);
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	681b      	ldr	r3, [r3, #0]
 80041ca:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80041ce:	651a      	str	r2, [r3, #80]	; 0x50
 80041d0:	4b22      	ldr	r3, [pc, #136]	; (800425c <HAL_FDCAN_IRQHandler+0x24c>)
 80041d2:	2200      	movs	r2, #0
 80041d4:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxFifoEmptyCallback(hfdcan);
#else
      /* Tx FIFO empty Callback */
      HAL_FDCAN_TxFifoEmptyCallback(hfdcan);
 80041d6:	6878      	ldr	r0, [r7, #4]
 80041d8:	f000 f9a4 	bl	8004524 <HAL_FDCAN_TxFifoEmptyCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Transmission Complete interrupt management *******************************/
  if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_TX_COMPLETE) != 0U)
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	681b      	ldr	r3, [r3, #0]
 80041e0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80041e2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80041e6:	2b00      	cmp	r3, #0
 80041e8:	d01e      	beq.n	8004228 <HAL_FDCAN_IRQHandler+0x218>
  {
    if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_TX_COMPLETE) != 0U)
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	681b      	ldr	r3, [r3, #0]
 80041ee:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80041f0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80041f4:	2b00      	cmp	r3, #0
 80041f6:	d017      	beq.n	8004228 <HAL_FDCAN_IRQHandler+0x218>
    {
      /* List of transmitted monitored buffers */
      TransmittedBuffers = hfdcan->Instance->TXBTO;
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	681b      	ldr	r3, [r3, #0]
 80041fc:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8004200:	62bb      	str	r3, [r7, #40]	; 0x28
      TransmittedBuffers &= hfdcan->Instance->TXBTIE;
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	681b      	ldr	r3, [r3, #0]
 8004206:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800420a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800420c:	4013      	ands	r3, r2
 800420e:	62bb      	str	r3, [r7, #40]	; 0x28

      /* Clear the Transmission Complete flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_COMPLETE);
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	681b      	ldr	r3, [r3, #0]
 8004214:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004218:	651a      	str	r2, [r3, #80]	; 0x50
 800421a:	4b10      	ldr	r3, [pc, #64]	; (800425c <HAL_FDCAN_IRQHandler+0x24c>)
 800421c:	2200      	movs	r2, #0
 800421e:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxBufferCompleteCallback(hfdcan, TransmittedBuffers);
#else
      /* Transmission Complete Callback */
      HAL_FDCAN_TxBufferCompleteCallback(hfdcan, TransmittedBuffers);
 8004220:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004222:	6878      	ldr	r0, [r7, #4]
 8004224:	f000 f988 	bl	8004538 <HAL_FDCAN_TxBufferCompleteCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Rx Buffer New Message interrupt management *******************************/
  if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_RX_BUFFER_NEW_MESSAGE) != 0U)
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	681b      	ldr	r3, [r3, #0]
 800422c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800422e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004232:	2b00      	cmp	r3, #0
 8004234:	d016      	beq.n	8004264 <HAL_FDCAN_IRQHandler+0x254>
  {
    if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_RX_BUFFER_NEW_MESSAGE) != 0U)
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	681b      	ldr	r3, [r3, #0]
 800423a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800423c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004240:	2b00      	cmp	r3, #0
 8004242:	d00f      	beq.n	8004264 <HAL_FDCAN_IRQHandler+0x254>
    {
      /* Clear the Rx Buffer New Message flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_RX_BUFFER_NEW_MESSAGE);
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	681b      	ldr	r3, [r3, #0]
 8004248:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 800424c:	651a      	str	r2, [r3, #80]	; 0x50
 800424e:	4b03      	ldr	r3, [pc, #12]	; (800425c <HAL_FDCAN_IRQHandler+0x24c>)
 8004250:	2200      	movs	r2, #0
 8004252:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->RxBufferNewMessageCallback(hfdcan);
#else
      /* Rx Buffer New Message Callback */
      HAL_FDCAN_RxBufferNewMessageCallback(hfdcan);
 8004254:	6878      	ldr	r0, [r7, #4]
 8004256:	f000 f985 	bl	8004564 <HAL_FDCAN_RxBufferNewMessageCallback>
 800425a:	e003      	b.n	8004264 <HAL_FDCAN_IRQHandler+0x254>
 800425c:	4000a800 	.word	0x4000a800
 8004260:	3fcfffff 	.word	0x3fcfffff
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Timestamp Wraparound interrupt management ********************************/
  if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_TIMESTAMP_WRAPAROUND) != 0U)
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	681b      	ldr	r3, [r3, #0]
 8004268:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800426a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800426e:	2b00      	cmp	r3, #0
 8004270:	d011      	beq.n	8004296 <HAL_FDCAN_IRQHandler+0x286>
  {
    if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_TIMESTAMP_WRAPAROUND) != 0U)
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	681b      	ldr	r3, [r3, #0]
 8004276:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004278:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800427c:	2b00      	cmp	r3, #0
 800427e:	d00a      	beq.n	8004296 <HAL_FDCAN_IRQHandler+0x286>
    {
      /* Clear the Timestamp Wraparound flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TIMESTAMP_WRAPAROUND);
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	681b      	ldr	r3, [r3, #0]
 8004284:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8004288:	651a      	str	r2, [r3, #80]	; 0x50
 800428a:	4b8d      	ldr	r3, [pc, #564]	; (80044c0 <HAL_FDCAN_IRQHandler+0x4b0>)
 800428c:	2200      	movs	r2, #0
 800428e:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TimestampWraparoundCallback(hfdcan);
#else
      /* Timestamp Wraparound Callback */
      HAL_FDCAN_TimestampWraparoundCallback(hfdcan);
 8004290:	6878      	ldr	r0, [r7, #4]
 8004292:	f000 f971 	bl	8004578 <HAL_FDCAN_TimestampWraparoundCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Timeout Occurred interrupt management ************************************/
  if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_TIMEOUT_OCCURRED) != 0U)
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	681b      	ldr	r3, [r3, #0]
 800429a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800429c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80042a0:	2b00      	cmp	r3, #0
 80042a2:	d011      	beq.n	80042c8 <HAL_FDCAN_IRQHandler+0x2b8>
  {
    if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_TIMEOUT_OCCURRED) != 0U)
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	681b      	ldr	r3, [r3, #0]
 80042a8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80042aa:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80042ae:	2b00      	cmp	r3, #0
 80042b0:	d00a      	beq.n	80042c8 <HAL_FDCAN_IRQHandler+0x2b8>
    {
      /* Clear the Timeout Occurred flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TIMEOUT_OCCURRED);
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	681b      	ldr	r3, [r3, #0]
 80042b6:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 80042ba:	651a      	str	r2, [r3, #80]	; 0x50
 80042bc:	4b80      	ldr	r3, [pc, #512]	; (80044c0 <HAL_FDCAN_IRQHandler+0x4b0>)
 80042be:	2200      	movs	r2, #0
 80042c0:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TimeoutOccurredCallback(hfdcan);
#else
      /* Timeout Occurred Callback */
      HAL_FDCAN_TimeoutOccurredCallback(hfdcan);
 80042c2:	6878      	ldr	r0, [r7, #4]
 80042c4:	f000 f962 	bl	800458c <HAL_FDCAN_TimeoutOccurredCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Message RAM access failure interrupt management **************************/
  if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_RAM_ACCESS_FAILURE) != 0U)
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	681b      	ldr	r3, [r3, #0]
 80042cc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80042ce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80042d2:	2b00      	cmp	r3, #0
 80042d4:	d016      	beq.n	8004304 <HAL_FDCAN_IRQHandler+0x2f4>
  {
    if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_RAM_ACCESS_FAILURE) != 0U)
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	681b      	ldr	r3, [r3, #0]
 80042da:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80042dc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80042e0:	2b00      	cmp	r3, #0
 80042e2:	d00f      	beq.n	8004304 <HAL_FDCAN_IRQHandler+0x2f4>
    {
      /* Clear the Message RAM access failure flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_RAM_ACCESS_FAILURE);
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	681b      	ldr	r3, [r3, #0]
 80042e8:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80042ec:	651a      	str	r2, [r3, #80]	; 0x50
 80042ee:	4b74      	ldr	r3, [pc, #464]	; (80044c0 <HAL_FDCAN_IRQHandler+0x4b0>)
 80042f0:	2200      	movs	r2, #0
 80042f2:	611a      	str	r2, [r3, #16]

      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_RAM_ACCESS;
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80042fa:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
    }
  }

  /* Error Status interrupts management ***************************************/
  if (ErrorStatusITs != 0U)
 8004304:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004306:	2b00      	cmp	r3, #0
 8004308:	d00d      	beq.n	8004326 <HAL_FDCAN_IRQHandler+0x316>
  {
    /* Clear the Error flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, ErrorStatusITs);
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	681a      	ldr	r2, [r3, #0]
 800430e:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004310:	4b6c      	ldr	r3, [pc, #432]	; (80044c4 <HAL_FDCAN_IRQHandler+0x4b4>)
 8004312:	400b      	ands	r3, r1
 8004314:	6513      	str	r3, [r2, #80]	; 0x50
 8004316:	4a6a      	ldr	r2, [pc, #424]	; (80044c0 <HAL_FDCAN_IRQHandler+0x4b0>)
 8004318:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800431a:	0f9b      	lsrs	r3, r3, #30
 800431c:	6113      	str	r3, [r2, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->ErrorStatusCallback(hfdcan, ErrorStatusITs);
#else
    /* Error Status Callback */
    HAL_FDCAN_ErrorStatusCallback(hfdcan, ErrorStatusITs);
 800431e:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004320:	6878      	ldr	r0, [r7, #4]
 8004322:	f000 f951 	bl	80045c8 <HAL_FDCAN_ErrorStatusCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Error interrupts management **********************************************/
  if (Errors != 0U)
 8004326:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004328:	2b00      	cmp	r3, #0
 800432a:	d011      	beq.n	8004350 <HAL_FDCAN_IRQHandler+0x340>
  {
    /* Clear the Error flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, Errors);
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	681a      	ldr	r2, [r3, #0]
 8004330:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8004332:	4b64      	ldr	r3, [pc, #400]	; (80044c4 <HAL_FDCAN_IRQHandler+0x4b4>)
 8004334:	400b      	ands	r3, r1
 8004336:	6513      	str	r3, [r2, #80]	; 0x50
 8004338:	4a61      	ldr	r2, [pc, #388]	; (80044c0 <HAL_FDCAN_IRQHandler+0x4b0>)
 800433a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800433c:	0f9b      	lsrs	r3, r3, #30
 800433e:	6113      	str	r3, [r2, #16]

    /* Update error code */
    hfdcan->ErrorCode |= Errors;
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	f8d3 209c 	ldr.w	r2, [r3, #156]	; 0x9c
 8004346:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004348:	431a      	orrs	r2, r3
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
  }

  if (hfdcan->Instance == FDCAN1)
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	681b      	ldr	r3, [r3, #0]
 8004354:	4a5c      	ldr	r2, [pc, #368]	; (80044c8 <HAL_FDCAN_IRQHandler+0x4b8>)
 8004356:	4293      	cmp	r3, r2
 8004358:	f040 80a6 	bne.w	80044a8 <HAL_FDCAN_IRQHandler+0x498>
  {
    if ((hfdcan->ttcan->TTOCF & FDCAN_TTOCF_OM) != 0U)
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	685b      	ldr	r3, [r3, #4]
 8004360:	689b      	ldr	r3, [r3, #8]
 8004362:	f003 0303 	and.w	r3, r3, #3
 8004366:	2b00      	cmp	r3, #0
 8004368:	f000 809e 	beq.w	80044a8 <HAL_FDCAN_IRQHandler+0x498>
    {
      TTSchedSyncITs = hfdcan->ttcan->TTIR & FDCAN_TT_SCHEDULE_SYNC_MASK;
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	685b      	ldr	r3, [r3, #4]
 8004370:	6a1b      	ldr	r3, [r3, #32]
 8004372:	f003 030f 	and.w	r3, r3, #15
 8004376:	627b      	str	r3, [r7, #36]	; 0x24
      TTSchedSyncITs &= hfdcan->ttcan->TTIE;
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	685b      	ldr	r3, [r3, #4]
 800437c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800437e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004380:	4013      	ands	r3, r2
 8004382:	627b      	str	r3, [r7, #36]	; 0x24
      TTTimeMarkITs = hfdcan->ttcan->TTIR & FDCAN_TT_TIME_MARK_MASK;
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	685b      	ldr	r3, [r3, #4]
 8004388:	6a1b      	ldr	r3, [r3, #32]
 800438a:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800438e:	623b      	str	r3, [r7, #32]
      TTTimeMarkITs &= hfdcan->ttcan->TTIE;
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	685b      	ldr	r3, [r3, #4]
 8004394:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004396:	6a3a      	ldr	r2, [r7, #32]
 8004398:	4013      	ands	r3, r2
 800439a:	623b      	str	r3, [r7, #32]
      TTGlobTimeITs = hfdcan->ttcan->TTIR & FDCAN_TT_GLOBAL_TIME_MASK;
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	685b      	ldr	r3, [r3, #4]
 80043a0:	6a1b      	ldr	r3, [r3, #32]
 80043a2:	f403 73c0 	and.w	r3, r3, #384	; 0x180
 80043a6:	61fb      	str	r3, [r7, #28]
      TTGlobTimeITs &= hfdcan->ttcan->TTIE;
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	685b      	ldr	r3, [r3, #4]
 80043ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043ae:	69fa      	ldr	r2, [r7, #28]
 80043b0:	4013      	ands	r3, r2
 80043b2:	61fb      	str	r3, [r7, #28]
      TTDistErrors = hfdcan->ttcan->TTIR & FDCAN_TT_DISTURBING_ERROR_MASK;
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	685b      	ldr	r3, [r3, #4]
 80043b8:	6a1b      	ldr	r3, [r3, #32]
 80043ba:	f403 43fc 	and.w	r3, r3, #32256	; 0x7e00
 80043be:	61bb      	str	r3, [r7, #24]
      TTDistErrors &= hfdcan->ttcan->TTIE;
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	685b      	ldr	r3, [r3, #4]
 80043c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043c6:	69ba      	ldr	r2, [r7, #24]
 80043c8:	4013      	ands	r3, r2
 80043ca:	61bb      	str	r3, [r7, #24]
      TTFatalErrors = hfdcan->ttcan->TTIR & FDCAN_TT_FATAL_ERROR_MASK;
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	685b      	ldr	r3, [r3, #4]
 80043d0:	6a1b      	ldr	r3, [r3, #32]
 80043d2:	f403 23f0 	and.w	r3, r3, #491520	; 0x78000
 80043d6:	617b      	str	r3, [r7, #20]
      TTFatalErrors &= hfdcan->ttcan->TTIE;
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	685b      	ldr	r3, [r3, #4]
 80043dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043de:	697a      	ldr	r2, [r7, #20]
 80043e0:	4013      	ands	r3, r2
 80043e2:	617b      	str	r3, [r7, #20]

      /* TT Schedule Synchronization interrupts management **********************/
      if (TTSchedSyncITs != 0U)
 80043e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043e6:	2b00      	cmp	r3, #0
 80043e8:	d007      	beq.n	80043fa <HAL_FDCAN_IRQHandler+0x3ea>
      {
        /* Clear the TT Schedule Synchronization flags */
        __HAL_FDCAN_TT_CLEAR_FLAG(hfdcan, TTSchedSyncITs);
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	685b      	ldr	r3, [r3, #4]
 80043ee:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80043f0:	621a      	str	r2, [r3, #32]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hfdcan->TT_ScheduleSyncCallback(hfdcan, TTSchedSyncITs);
#else
        /* TT Schedule Synchronization Callback */
        HAL_FDCAN_TT_ScheduleSyncCallback(hfdcan, TTSchedSyncITs);
 80043f2:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80043f4:	6878      	ldr	r0, [r7, #4]
 80043f6:	f000 f8f2 	bl	80045de <HAL_FDCAN_TT_ScheduleSyncCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
      }

      /* TT Time Mark interrupts management *************************************/
      if (TTTimeMarkITs != 0U)
 80043fa:	6a3b      	ldr	r3, [r7, #32]
 80043fc:	2b00      	cmp	r3, #0
 80043fe:	d007      	beq.n	8004410 <HAL_FDCAN_IRQHandler+0x400>
      {
        /* Clear the TT Time Mark flags */
        __HAL_FDCAN_TT_CLEAR_FLAG(hfdcan, TTTimeMarkITs);
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	685b      	ldr	r3, [r3, #4]
 8004404:	6a3a      	ldr	r2, [r7, #32]
 8004406:	621a      	str	r2, [r3, #32]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hfdcan->TT_TimeMarkCallback(hfdcan, TTTimeMarkITs);
#else
        /* TT Time Mark Callback */
        HAL_FDCAN_TT_TimeMarkCallback(hfdcan, TTTimeMarkITs);
 8004408:	6a39      	ldr	r1, [r7, #32]
 800440a:	6878      	ldr	r0, [r7, #4]
 800440c:	f000 f8f2 	bl	80045f4 <HAL_FDCAN_TT_TimeMarkCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
      }

      /* TT Stop Watch interrupt management *************************************/
      if (__HAL_FDCAN_TT_GET_IT_SOURCE(hfdcan, FDCAN_TT_IT_STOP_WATCH) != 0U)
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	685b      	ldr	r3, [r3, #4]
 8004414:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004416:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800441a:	2b00      	cmp	r3, #0
 800441c:	d01b      	beq.n	8004456 <HAL_FDCAN_IRQHandler+0x446>
      {
        if (__HAL_FDCAN_TT_GET_FLAG(hfdcan, FDCAN_TT_FLAG_STOP_WATCH) != 0U)
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	685b      	ldr	r3, [r3, #4]
 8004422:	6a1b      	ldr	r3, [r3, #32]
 8004424:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004428:	2b00      	cmp	r3, #0
 800442a:	d014      	beq.n	8004456 <HAL_FDCAN_IRQHandler+0x446>
        {
          /* Retrieve Stop watch Time and Cycle count */
          SWTime = ((hfdcan->ttcan->TTCPT & FDCAN_TTCPT_SWV) >> FDCAN_TTCPT_SWV_Pos);
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	685b      	ldr	r3, [r3, #4]
 8004430:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004432:	0c1b      	lsrs	r3, r3, #16
 8004434:	b29b      	uxth	r3, r3
 8004436:	613b      	str	r3, [r7, #16]
          SWCycleCount = ((hfdcan->ttcan->TTCPT & FDCAN_TTCPT_CCV) >> FDCAN_TTCPT_CCV_Pos);
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	685b      	ldr	r3, [r3, #4]
 800443c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800443e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004442:	60fb      	str	r3, [r7, #12]

          /* Clear the TT Stop Watch flag */
          __HAL_FDCAN_TT_CLEAR_FLAG(hfdcan, FDCAN_TT_FLAG_STOP_WATCH);
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	685b      	ldr	r3, [r3, #4]
 8004448:	2240      	movs	r2, #64	; 0x40
 800444a:	621a      	str	r2, [r3, #32]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hfdcan->TT_StopWatchCallback(hfdcan, SWTime, SWCycleCount);
#else
          /* TT Stop Watch Callback */
          HAL_FDCAN_TT_StopWatchCallback(hfdcan, SWTime, SWCycleCount);
 800444c:	68fa      	ldr	r2, [r7, #12]
 800444e:	6939      	ldr	r1, [r7, #16]
 8004450:	6878      	ldr	r0, [r7, #4]
 8004452:	f000 f8da 	bl	800460a <HAL_FDCAN_TT_StopWatchCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
        }
      }

      /* TT Global Time interrupts management ***********************************/
      if (TTGlobTimeITs != 0U)
 8004456:	69fb      	ldr	r3, [r7, #28]
 8004458:	2b00      	cmp	r3, #0
 800445a:	d007      	beq.n	800446c <HAL_FDCAN_IRQHandler+0x45c>
      {
        /* Clear the TT Global Time flags */
        __HAL_FDCAN_TT_CLEAR_FLAG(hfdcan, TTGlobTimeITs);
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	685b      	ldr	r3, [r3, #4]
 8004460:	69fa      	ldr	r2, [r7, #28]
 8004462:	621a      	str	r2, [r3, #32]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hfdcan->TT_GlobalTimeCallback(hfdcan, TTGlobTimeITs);
#else
        /* TT Global Time Callback */
        HAL_FDCAN_TT_GlobalTimeCallback(hfdcan, TTGlobTimeITs);
 8004464:	69f9      	ldr	r1, [r7, #28]
 8004466:	6878      	ldr	r0, [r7, #4]
 8004468:	f000 f8db 	bl	8004622 <HAL_FDCAN_TT_GlobalTimeCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
      }

      /* TT Disturbing Error interrupts management ******************************/
      if (TTDistErrors != 0U)
 800446c:	69bb      	ldr	r3, [r7, #24]
 800446e:	2b00      	cmp	r3, #0
 8004470:	d00b      	beq.n	800448a <HAL_FDCAN_IRQHandler+0x47a>
      {
        /* Clear the TT Disturbing Error flags */
        __HAL_FDCAN_TT_CLEAR_FLAG(hfdcan, TTDistErrors);
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	685b      	ldr	r3, [r3, #4]
 8004476:	69ba      	ldr	r2, [r7, #24]
 8004478:	621a      	str	r2, [r3, #32]

        /* Update error code */
        hfdcan->ErrorCode |= TTDistErrors;
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	f8d3 209c 	ldr.w	r2, [r3, #156]	; 0x9c
 8004480:	69bb      	ldr	r3, [r7, #24]
 8004482:	431a      	orrs	r2, r3
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
      }

      /* TT Fatal Error interrupts management ***********************************/
      if (TTFatalErrors != 0U)
 800448a:	697b      	ldr	r3, [r7, #20]
 800448c:	2b00      	cmp	r3, #0
 800448e:	d00b      	beq.n	80044a8 <HAL_FDCAN_IRQHandler+0x498>
      {
        /* Clear the TT Fatal Error flags */
        __HAL_FDCAN_TT_CLEAR_FLAG(hfdcan, TTFatalErrors);
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	685b      	ldr	r3, [r3, #4]
 8004494:	697a      	ldr	r2, [r7, #20]
 8004496:	621a      	str	r2, [r3, #32]

        /* Update error code */
        hfdcan->ErrorCode |= TTFatalErrors;
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	f8d3 209c 	ldr.w	r2, [r3, #156]	; 0x9c
 800449e:	697b      	ldr	r3, [r7, #20]
 80044a0:	431a      	orrs	r2, r3
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
      }
    }
  }

  if (hfdcan->ErrorCode != HAL_FDCAN_ERROR_NONE)
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80044ae:	2b00      	cmp	r3, #0
 80044b0:	d002      	beq.n	80044b8 <HAL_FDCAN_IRQHandler+0x4a8>
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->ErrorCallback(hfdcan);
#else
    /* Error Callback */
    HAL_FDCAN_ErrorCallback(hfdcan);
 80044b2:	6878      	ldr	r0, [r7, #4]
 80044b4:	f000 f87e 	bl	80045b4 <HAL_FDCAN_ErrorCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }
}
 80044b8:	bf00      	nop
 80044ba:	3748      	adds	r7, #72	; 0x48
 80044bc:	46bd      	mov	sp, r7
 80044be:	bd80      	pop	{r7, pc}
 80044c0:	4000a800 	.word	0x4000a800
 80044c4:	3fcfffff 	.word	0x3fcfffff
 80044c8:	4000a000 	.word	0x4000a000

080044cc <HAL_FDCAN_ClockCalibrationCallback>:
  * @param  ClkCalibrationITs indicates which Clock Calibration interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Clock_Calibration_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_ClockCalibrationCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t ClkCalibrationITs)
{
 80044cc:	b480      	push	{r7}
 80044ce:	b083      	sub	sp, #12
 80044d0:	af00      	add	r7, sp, #0
 80044d2:	6078      	str	r0, [r7, #4]
 80044d4:	6039      	str	r1, [r7, #0]
  UNUSED(ClkCalibrationITs);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_ClockCalibrationCallback could be implemented in the user file
   */
}
 80044d6:	bf00      	nop
 80044d8:	370c      	adds	r7, #12
 80044da:	46bd      	mov	sp, r7
 80044dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044e0:	4770      	bx	lr

080044e2 <HAL_FDCAN_TxEventFifoCallback>:
  * @param  TxEventFifoITs indicates which Tx Event FIFO interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Tx_Event_Fifo_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_TxEventFifoCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t TxEventFifoITs)
{
 80044e2:	b480      	push	{r7}
 80044e4:	b083      	sub	sp, #12
 80044e6:	af00      	add	r7, sp, #0
 80044e8:	6078      	str	r0, [r7, #4]
 80044ea:	6039      	str	r1, [r7, #0]
  UNUSED(TxEventFifoITs);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxEventFifoCallback could be implemented in the user file
   */
}
 80044ec:	bf00      	nop
 80044ee:	370c      	adds	r7, #12
 80044f0:	46bd      	mov	sp, r7
 80044f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044f6:	4770      	bx	lr

080044f8 <HAL_FDCAN_RxFifo0Callback>:
  * @param  RxFifo0ITs indicates which Rx FIFO 0 interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Rx_Fifo0_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_RxFifo0Callback(FDCAN_HandleTypeDef *hfdcan, uint32_t RxFifo0ITs)
{
 80044f8:	b480      	push	{r7}
 80044fa:	b083      	sub	sp, #12
 80044fc:	af00      	add	r7, sp, #0
 80044fe:	6078      	str	r0, [r7, #4]
 8004500:	6039      	str	r1, [r7, #0]
  UNUSED(RxFifo0ITs);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_RxFifo0Callback could be implemented in the user file
   */
}
 8004502:	bf00      	nop
 8004504:	370c      	adds	r7, #12
 8004506:	46bd      	mov	sp, r7
 8004508:	f85d 7b04 	ldr.w	r7, [sp], #4
 800450c:	4770      	bx	lr

0800450e <HAL_FDCAN_RxFifo1Callback>:
  * @param  RxFifo1ITs indicates which Rx FIFO 1 interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Rx_Fifo1_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_RxFifo1Callback(FDCAN_HandleTypeDef *hfdcan, uint32_t RxFifo1ITs)
{
 800450e:	b480      	push	{r7}
 8004510:	b083      	sub	sp, #12
 8004512:	af00      	add	r7, sp, #0
 8004514:	6078      	str	r0, [r7, #4]
 8004516:	6039      	str	r1, [r7, #0]
  UNUSED(RxFifo1ITs);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_RxFifo1Callback could be implemented in the user file
   */
}
 8004518:	bf00      	nop
 800451a:	370c      	adds	r7, #12
 800451c:	46bd      	mov	sp, r7
 800451e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004522:	4770      	bx	lr

08004524 <HAL_FDCAN_TxFifoEmptyCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TxFifoEmptyCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8004524:	b480      	push	{r7}
 8004526:	b083      	sub	sp, #12
 8004528:	af00      	add	r7, sp, #0
 800452a:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxFifoEmptyCallback could be implemented in the user file
   */
}
 800452c:	bf00      	nop
 800452e:	370c      	adds	r7, #12
 8004530:	46bd      	mov	sp, r7
 8004532:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004536:	4770      	bx	lr

08004538 <HAL_FDCAN_TxBufferCompleteCallback>:
  * @param  BufferIndexes Indexes of the transmitted buffers.
  *         This parameter can be any combination of @arg FDCAN_Tx_location.
  * @retval None
  */
__weak void HAL_FDCAN_TxBufferCompleteCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t BufferIndexes)
{
 8004538:	b480      	push	{r7}
 800453a:	b083      	sub	sp, #12
 800453c:	af00      	add	r7, sp, #0
 800453e:	6078      	str	r0, [r7, #4]
 8004540:	6039      	str	r1, [r7, #0]
  UNUSED(BufferIndexes);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxBufferCompleteCallback could be implemented in the user file
   */
}
 8004542:	bf00      	nop
 8004544:	370c      	adds	r7, #12
 8004546:	46bd      	mov	sp, r7
 8004548:	f85d 7b04 	ldr.w	r7, [sp], #4
 800454c:	4770      	bx	lr

0800454e <HAL_FDCAN_TxBufferAbortCallback>:
  * @param  BufferIndexes Indexes of the aborted buffers.
  *         This parameter can be any combination of @arg FDCAN_Tx_location.
  * @retval None
  */
__weak void HAL_FDCAN_TxBufferAbortCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t BufferIndexes)
{
 800454e:	b480      	push	{r7}
 8004550:	b083      	sub	sp, #12
 8004552:	af00      	add	r7, sp, #0
 8004554:	6078      	str	r0, [r7, #4]
 8004556:	6039      	str	r1, [r7, #0]
  UNUSED(BufferIndexes);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxBufferAbortCallback could be implemented in the user file
   */
}
 8004558:	bf00      	nop
 800455a:	370c      	adds	r7, #12
 800455c:	46bd      	mov	sp, r7
 800455e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004562:	4770      	bx	lr

08004564 <HAL_FDCAN_RxBufferNewMessageCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_RxBufferNewMessageCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8004564:	b480      	push	{r7}
 8004566:	b083      	sub	sp, #12
 8004568:	af00      	add	r7, sp, #0
 800456a:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_RxBufferNewMessageCallback could be implemented in the user file
   */
}
 800456c:	bf00      	nop
 800456e:	370c      	adds	r7, #12
 8004570:	46bd      	mov	sp, r7
 8004572:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004576:	4770      	bx	lr

08004578 <HAL_FDCAN_TimestampWraparoundCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TimestampWraparoundCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8004578:	b480      	push	{r7}
 800457a:	b083      	sub	sp, #12
 800457c:	af00      	add	r7, sp, #0
 800457e:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TimestampWraparoundCallback could be implemented in the user file
   */
}
 8004580:	bf00      	nop
 8004582:	370c      	adds	r7, #12
 8004584:	46bd      	mov	sp, r7
 8004586:	f85d 7b04 	ldr.w	r7, [sp], #4
 800458a:	4770      	bx	lr

0800458c <HAL_FDCAN_TimeoutOccurredCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TimeoutOccurredCallback(FDCAN_HandleTypeDef *hfdcan)
{
 800458c:	b480      	push	{r7}
 800458e:	b083      	sub	sp, #12
 8004590:	af00      	add	r7, sp, #0
 8004592:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TimeoutOccurredCallback could be implemented in the user file
   */
}
 8004594:	bf00      	nop
 8004596:	370c      	adds	r7, #12
 8004598:	46bd      	mov	sp, r7
 800459a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800459e:	4770      	bx	lr

080045a0 <HAL_FDCAN_HighPriorityMessageCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_HighPriorityMessageCallback(FDCAN_HandleTypeDef *hfdcan)
{
 80045a0:	b480      	push	{r7}
 80045a2:	b083      	sub	sp, #12
 80045a4:	af00      	add	r7, sp, #0
 80045a6:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_HighPriorityMessageCallback could be implemented in the user file
   */
}
 80045a8:	bf00      	nop
 80045aa:	370c      	adds	r7, #12
 80045ac:	46bd      	mov	sp, r7
 80045ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045b2:	4770      	bx	lr

080045b4 <HAL_FDCAN_ErrorCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_ErrorCallback(FDCAN_HandleTypeDef *hfdcan)
{
 80045b4:	b480      	push	{r7}
 80045b6:	b083      	sub	sp, #12
 80045b8:	af00      	add	r7, sp, #0
 80045ba:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_ErrorCallback could be implemented in the user file
   */
}
 80045bc:	bf00      	nop
 80045be:	370c      	adds	r7, #12
 80045c0:	46bd      	mov	sp, r7
 80045c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045c6:	4770      	bx	lr

080045c8 <HAL_FDCAN_ErrorStatusCallback>:
  * @param  ErrorStatusITs indicates which Error Status interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Error_Status_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_ErrorStatusCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t ErrorStatusITs)
{
 80045c8:	b480      	push	{r7}
 80045ca:	b083      	sub	sp, #12
 80045cc:	af00      	add	r7, sp, #0
 80045ce:	6078      	str	r0, [r7, #4]
 80045d0:	6039      	str	r1, [r7, #0]
  UNUSED(ErrorStatusITs);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_ErrorStatusCallback could be implemented in the user file
   */
}
 80045d2:	bf00      	nop
 80045d4:	370c      	adds	r7, #12
 80045d6:	46bd      	mov	sp, r7
 80045d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045dc:	4770      	bx	lr

080045de <HAL_FDCAN_TT_ScheduleSyncCallback>:
  * @param  TTSchedSyncITs indicates which TT Schedule Synchronization interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_TTScheduleSynchronization_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_TT_ScheduleSyncCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t TTSchedSyncITs)
{
 80045de:	b480      	push	{r7}
 80045e0:	b083      	sub	sp, #12
 80045e2:	af00      	add	r7, sp, #0
 80045e4:	6078      	str	r0, [r7, #4]
 80045e6:	6039      	str	r1, [r7, #0]
  UNUSED(TTSchedSyncITs);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TT_ScheduleSyncCallback could be implemented in the user file
   */
}
 80045e8:	bf00      	nop
 80045ea:	370c      	adds	r7, #12
 80045ec:	46bd      	mov	sp, r7
 80045ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045f2:	4770      	bx	lr

080045f4 <HAL_FDCAN_TT_TimeMarkCallback>:
  * @param  TTTimeMarkITs indicates which TT Schedule Synchronization interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_TTTimeMark_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_TT_TimeMarkCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t TTTimeMarkITs)
{
 80045f4:	b480      	push	{r7}
 80045f6:	b083      	sub	sp, #12
 80045f8:	af00      	add	r7, sp, #0
 80045fa:	6078      	str	r0, [r7, #4]
 80045fc:	6039      	str	r1, [r7, #0]
  UNUSED(TTTimeMarkITs);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TT_TimeMarkCallback could be implemented in the user file
   */
}
 80045fe:	bf00      	nop
 8004600:	370c      	adds	r7, #12
 8004602:	46bd      	mov	sp, r7
 8004604:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004608:	4770      	bx	lr

0800460a <HAL_FDCAN_TT_StopWatchCallback>:
  * @param  SWCycleCount Cycle count value captured together with SWTime.
  *         This parameter is a number between 0 and 0x3F.
  * @retval None
  */
__weak void HAL_FDCAN_TT_StopWatchCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t SWTime, uint32_t SWCycleCount)
{
 800460a:	b480      	push	{r7}
 800460c:	b085      	sub	sp, #20
 800460e:	af00      	add	r7, sp, #0
 8004610:	60f8      	str	r0, [r7, #12]
 8004612:	60b9      	str	r1, [r7, #8]
 8004614:	607a      	str	r2, [r7, #4]
  UNUSED(SWCycleCount);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TT_StopWatchCallback could be implemented in the user file
   */
}
 8004616:	bf00      	nop
 8004618:	3714      	adds	r7, #20
 800461a:	46bd      	mov	sp, r7
 800461c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004620:	4770      	bx	lr

08004622 <HAL_FDCAN_TT_GlobalTimeCallback>:
  * @param  TTGlobTimeITs indicates which TT Global Time interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_TTGlobalTime_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_TT_GlobalTimeCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t TTGlobTimeITs)
{
 8004622:	b480      	push	{r7}
 8004624:	b083      	sub	sp, #12
 8004626:	af00      	add	r7, sp, #0
 8004628:	6078      	str	r0, [r7, #4]
 800462a:	6039      	str	r1, [r7, #0]
  UNUSED(TTGlobTimeITs);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TT_GlobalTimeCallback could be implemented in the user file
   */
}
 800462c:	bf00      	nop
 800462e:	370c      	adds	r7, #12
 8004630:	46bd      	mov	sp, r7
 8004632:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004636:	4770      	bx	lr

08004638 <FDCAN_CalcultateRamBlockAddresses>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
 */
static HAL_StatusTypeDef FDCAN_CalcultateRamBlockAddresses(FDCAN_HandleTypeDef *hfdcan)
{
 8004638:	b480      	push	{r7}
 800463a:	b085      	sub	sp, #20
 800463c:	af00      	add	r7, sp, #0
 800463e:	6078      	str	r0, [r7, #4]
  uint32_t RAMcounter;
  uint32_t StartAddress;

  StartAddress = hfdcan->Init.MessageRAMOffset;
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004644:	60bb      	str	r3, [r7, #8]

  /* Standard filter list start address */
  MODIFY_REG(hfdcan->Instance->SIDFC, FDCAN_SIDFC_FLSSA, (StartAddress << FDCAN_SIDFC_FLSSA_Pos));
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	681b      	ldr	r3, [r3, #0]
 800464a:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 800464e:	4ba7      	ldr	r3, [pc, #668]	; (80048ec <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8004650:	4013      	ands	r3, r2
 8004652:	68ba      	ldr	r2, [r7, #8]
 8004654:	0091      	lsls	r1, r2, #2
 8004656:	687a      	ldr	r2, [r7, #4]
 8004658:	6812      	ldr	r2, [r2, #0]
 800465a:	430b      	orrs	r3, r1
 800465c:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84

  /* Standard filter elements number */
  MODIFY_REG(hfdcan->Instance->SIDFC, FDCAN_SIDFC_LSS, (hfdcan->Init.StdFiltersNbr << FDCAN_SIDFC_LSS_Pos));
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	681b      	ldr	r3, [r3, #0]
 8004664:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004668:	f423 017f 	bic.w	r1, r3, #16711680	; 0xff0000
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004670:	041a      	lsls	r2, r3, #16
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	681b      	ldr	r3, [r3, #0]
 8004676:	430a      	orrs	r2, r1
 8004678:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Extended filter list start address */
  StartAddress += hfdcan->Init.StdFiltersNbr;
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004680:	68ba      	ldr	r2, [r7, #8]
 8004682:	4413      	add	r3, r2
 8004684:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->XIDFC, FDCAN_XIDFC_FLESA, (StartAddress << FDCAN_XIDFC_FLESA_Pos));
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	681b      	ldr	r3, [r3, #0]
 800468a:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 800468e:	4b97      	ldr	r3, [pc, #604]	; (80048ec <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8004690:	4013      	ands	r3, r2
 8004692:	68ba      	ldr	r2, [r7, #8]
 8004694:	0091      	lsls	r1, r2, #2
 8004696:	687a      	ldr	r2, [r7, #4]
 8004698:	6812      	ldr	r2, [r2, #0]
 800469a:	430b      	orrs	r3, r1
 800469c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Extended filter elements number */
  MODIFY_REG(hfdcan->Instance->XIDFC, FDCAN_XIDFC_LSE, (hfdcan->Init.ExtFiltersNbr << FDCAN_XIDFC_LSE_Pos));
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	681b      	ldr	r3, [r3, #0]
 80046a4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80046a8:	f423 01fe 	bic.w	r1, r3, #8323072	; 0x7f0000
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80046b0:	041a      	lsls	r2, r3, #16
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	681b      	ldr	r3, [r3, #0]
 80046b6:	430a      	orrs	r2, r1
 80046b8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Rx FIFO 0 start address */
  StartAddress += (hfdcan->Init.ExtFiltersNbr * 2U);
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80046c0:	005b      	lsls	r3, r3, #1
 80046c2:	68ba      	ldr	r2, [r7, #8]
 80046c4:	4413      	add	r3, r2
 80046c6:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->RXF0C, FDCAN_RXF0C_F0SA, (StartAddress << FDCAN_RXF0C_F0SA_Pos));
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	681b      	ldr	r3, [r3, #0]
 80046cc:	f8d3 20a0 	ldr.w	r2, [r3, #160]	; 0xa0
 80046d0:	4b86      	ldr	r3, [pc, #536]	; (80048ec <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 80046d2:	4013      	ands	r3, r2
 80046d4:	68ba      	ldr	r2, [r7, #8]
 80046d6:	0091      	lsls	r1, r2, #2
 80046d8:	687a      	ldr	r2, [r7, #4]
 80046da:	6812      	ldr	r2, [r2, #0]
 80046dc:	430b      	orrs	r3, r1
 80046de:	f8c2 30a0 	str.w	r3, [r2, #160]	; 0xa0

  /* Rx FIFO 0 elements number */
  MODIFY_REG(hfdcan->Instance->RXF0C, FDCAN_RXF0C_F0S, (hfdcan->Init.RxFifo0ElmtsNbr << FDCAN_RXF0C_F0S_Pos));
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	681b      	ldr	r3, [r3, #0]
 80046e6:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 80046ea:	f423 01fe 	bic.w	r1, r3, #8323072	; 0x7f0000
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80046f2:	041a      	lsls	r2, r3, #16
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	681b      	ldr	r3, [r3, #0]
 80046f8:	430a      	orrs	r2, r1
 80046fa:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0

  /* Rx FIFO 1 start address */
  StartAddress += (hfdcan->Init.RxFifo0ElmtsNbr * hfdcan->Init.RxFifo0ElmtSize);
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004702:	687a      	ldr	r2, [r7, #4]
 8004704:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8004706:	fb02 f303 	mul.w	r3, r2, r3
 800470a:	68ba      	ldr	r2, [r7, #8]
 800470c:	4413      	add	r3, r2
 800470e:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->RXF1C, FDCAN_RXF1C_F1SA, (StartAddress << FDCAN_RXF1C_F1SA_Pos));
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	681b      	ldr	r3, [r3, #0]
 8004714:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8004718:	4b74      	ldr	r3, [pc, #464]	; (80048ec <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 800471a:	4013      	ands	r3, r2
 800471c:	68ba      	ldr	r2, [r7, #8]
 800471e:	0091      	lsls	r1, r2, #2
 8004720:	687a      	ldr	r2, [r7, #4]
 8004722:	6812      	ldr	r2, [r2, #0]
 8004724:	430b      	orrs	r3, r1
 8004726:	f8c2 30b0 	str.w	r3, [r2, #176]	; 0xb0

  /* Rx FIFO 1 elements number */
  MODIFY_REG(hfdcan->Instance->RXF1C, FDCAN_RXF1C_F1S, (hfdcan->Init.RxFifo1ElmtsNbr << FDCAN_RXF1C_F1S_Pos));
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	681b      	ldr	r3, [r3, #0]
 800472e:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8004732:	f423 01fe 	bic.w	r1, r3, #8323072	; 0x7f0000
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800473a:	041a      	lsls	r2, r3, #16
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	681b      	ldr	r3, [r3, #0]
 8004740:	430a      	orrs	r2, r1
 8004742:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0

  /* Rx buffer list start address */
  StartAddress += (hfdcan->Init.RxFifo1ElmtsNbr * hfdcan->Init.RxFifo1ElmtSize);
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800474a:	687a      	ldr	r2, [r7, #4]
 800474c:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 800474e:	fb02 f303 	mul.w	r3, r2, r3
 8004752:	68ba      	ldr	r2, [r7, #8]
 8004754:	4413      	add	r3, r2
 8004756:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->RXBC, FDCAN_RXBC_RBSA, (StartAddress << FDCAN_RXBC_RBSA_Pos));
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	681b      	ldr	r3, [r3, #0]
 800475c:	f8d3 20ac 	ldr.w	r2, [r3, #172]	; 0xac
 8004760:	4b62      	ldr	r3, [pc, #392]	; (80048ec <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8004762:	4013      	ands	r3, r2
 8004764:	68ba      	ldr	r2, [r7, #8]
 8004766:	0091      	lsls	r1, r2, #2
 8004768:	687a      	ldr	r2, [r7, #4]
 800476a:	6812      	ldr	r2, [r2, #0]
 800476c:	430b      	orrs	r3, r1
 800476e:	f8c2 30ac 	str.w	r3, [r2, #172]	; 0xac

  /* Tx event FIFO start address */
  StartAddress += (hfdcan->Init.RxBuffersNbr * hfdcan->Init.RxBufferSize);
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004776:	687a      	ldr	r2, [r7, #4]
 8004778:	6d52      	ldr	r2, [r2, #84]	; 0x54
 800477a:	fb02 f303 	mul.w	r3, r2, r3
 800477e:	68ba      	ldr	r2, [r7, #8]
 8004780:	4413      	add	r3, r2
 8004782:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->TXEFC, FDCAN_TXEFC_EFSA, (StartAddress << FDCAN_TXEFC_EFSA_Pos));
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	681b      	ldr	r3, [r3, #0]
 8004788:	f8d3 20f0 	ldr.w	r2, [r3, #240]	; 0xf0
 800478c:	4b57      	ldr	r3, [pc, #348]	; (80048ec <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 800478e:	4013      	ands	r3, r2
 8004790:	68ba      	ldr	r2, [r7, #8]
 8004792:	0091      	lsls	r1, r2, #2
 8004794:	687a      	ldr	r2, [r7, #4]
 8004796:	6812      	ldr	r2, [r2, #0]
 8004798:	430b      	orrs	r3, r1
 800479a:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0

  /* Tx event FIFO elements number */
  MODIFY_REG(hfdcan->Instance->TXEFC, FDCAN_TXEFC_EFS, (hfdcan->Init.TxEventsNbr << FDCAN_TXEFC_EFS_Pos));
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	681b      	ldr	r3, [r3, #0]
 80047a2:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80047a6:	f423 117c 	bic.w	r1, r3, #4128768	; 0x3f0000
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80047ae:	041a      	lsls	r2, r3, #16
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	681b      	ldr	r3, [r3, #0]
 80047b4:	430a      	orrs	r2, r1
 80047b6:	f8c3 20f0 	str.w	r2, [r3, #240]	; 0xf0

  /* Tx buffer list start address */
  StartAddress += (hfdcan->Init.TxEventsNbr * 2U);
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80047be:	005b      	lsls	r3, r3, #1
 80047c0:	68ba      	ldr	r2, [r7, #8]
 80047c2:	4413      	add	r3, r2
 80047c4:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_TBSA, (StartAddress << FDCAN_TXBC_TBSA_Pos));
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	681b      	ldr	r3, [r3, #0]
 80047ca:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
 80047ce:	4b47      	ldr	r3, [pc, #284]	; (80048ec <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 80047d0:	4013      	ands	r3, r2
 80047d2:	68ba      	ldr	r2, [r7, #8]
 80047d4:	0091      	lsls	r1, r2, #2
 80047d6:	687a      	ldr	r2, [r7, #4]
 80047d8:	6812      	ldr	r2, [r2, #0]
 80047da:	430b      	orrs	r3, r1
 80047dc:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0

  /* Dedicated Tx buffers number */
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_NDTB, (hfdcan->Init.TxBuffersNbr << FDCAN_TXBC_NDTB_Pos));
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	681b      	ldr	r3, [r3, #0]
 80047e4:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 80047e8:	f423 117c 	bic.w	r1, r3, #4128768	; 0x3f0000
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80047f0:	041a      	lsls	r2, r3, #16
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	681b      	ldr	r3, [r3, #0]
 80047f6:	430a      	orrs	r2, r1
 80047f8:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0

  /* Tx FIFO/queue elements number */
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_TFQS, (hfdcan->Init.TxFifoQueueElmtsNbr << FDCAN_TXBC_TFQS_Pos));
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	681b      	ldr	r3, [r3, #0]
 8004800:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8004804:	f023 517c 	bic.w	r1, r3, #1056964608	; 0x3f000000
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800480c:	061a      	lsls	r2, r3, #24
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	681b      	ldr	r3, [r3, #0]
 8004812:	430a      	orrs	r2, r1
 8004814:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0

  hfdcan->msgRam.StandardFilterSA = SRAMCAN_BASE + (hfdcan->Init.MessageRAMOffset * 4U);
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800481c:	4b34      	ldr	r3, [pc, #208]	; (80048f0 <FDCAN_CalcultateRamBlockAddresses+0x2b8>)
 800481e:	4413      	add	r3, r2
 8004820:	009a      	lsls	r2, r3, #2
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	66da      	str	r2, [r3, #108]	; 0x6c
  hfdcan->msgRam.ExtendedFilterSA = hfdcan->msgRam.StandardFilterSA + (hfdcan->Init.StdFiltersNbr * 4U);
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800482e:	009b      	lsls	r3, r3, #2
 8004830:	441a      	add	r2, r3
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	671a      	str	r2, [r3, #112]	; 0x70
  hfdcan->msgRam.RxFIFO0SA = hfdcan->msgRam.ExtendedFilterSA + (hfdcan->Init.ExtFiltersNbr * 2U * 4U);
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800483e:	00db      	lsls	r3, r3, #3
 8004840:	441a      	add	r2, r3
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	675a      	str	r2, [r3, #116]	; 0x74
  hfdcan->msgRam.RxFIFO1SA = hfdcan->msgRam.RxFIFO0SA + (hfdcan->Init.RxFifo0ElmtsNbr * hfdcan->Init.RxFifo0ElmtSize * 4U);
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	6f5a      	ldr	r2, [r3, #116]	; 0x74
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800484e:	6879      	ldr	r1, [r7, #4]
 8004850:	6c49      	ldr	r1, [r1, #68]	; 0x44
 8004852:	fb01 f303 	mul.w	r3, r1, r3
 8004856:	009b      	lsls	r3, r3, #2
 8004858:	441a      	add	r2, r3
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	679a      	str	r2, [r3, #120]	; 0x78
  hfdcan->msgRam.RxBufferSA = hfdcan->msgRam.RxFIFO1SA + (hfdcan->Init.RxFifo1ElmtsNbr * hfdcan->Init.RxFifo1ElmtSize * 4U);
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	6f9a      	ldr	r2, [r3, #120]	; 0x78
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004866:	6879      	ldr	r1, [r7, #4]
 8004868:	6cc9      	ldr	r1, [r1, #76]	; 0x4c
 800486a:	fb01 f303 	mul.w	r3, r1, r3
 800486e:	009b      	lsls	r3, r3, #2
 8004870:	441a      	add	r2, r3
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	67da      	str	r2, [r3, #124]	; 0x7c
  hfdcan->msgRam.TxEventFIFOSA = hfdcan->msgRam.RxBufferSA + (hfdcan->Init.RxBuffersNbr * hfdcan->Init.RxBufferSize * 4U);
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	6fda      	ldr	r2, [r3, #124]	; 0x7c
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800487e:	6879      	ldr	r1, [r7, #4]
 8004880:	6d49      	ldr	r1, [r1, #84]	; 0x54
 8004882:	fb01 f303 	mul.w	r3, r1, r3
 8004886:	009b      	lsls	r3, r3, #2
 8004888:	441a      	add	r2, r3
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  hfdcan->msgRam.TxBufferSA = hfdcan->msgRam.TxEventFIFOSA + (hfdcan->Init.TxEventsNbr * 2U * 4U);
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800489a:	00db      	lsls	r3, r3, #3
 800489c:	441a      	add	r2, r3
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hfdcan->msgRam.TxFIFOQSA = hfdcan->msgRam.TxBufferSA + (hfdcan->Init.TxBuffersNbr * hfdcan->Init.TxElmtSize * 4U);
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80048ae:	6879      	ldr	r1, [r7, #4]
 80048b0:	6e89      	ldr	r1, [r1, #104]	; 0x68
 80048b2:	fb01 f303 	mul.w	r3, r1, r3
 80048b6:	009b      	lsls	r3, r3, #2
 80048b8:	441a      	add	r2, r3
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  hfdcan->msgRam.EndAddress = hfdcan->msgRam.TxFIFOQSA + (hfdcan->Init.TxFifoQueueElmtsNbr * hfdcan->Init.TxElmtSize * 4U);
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80048ca:	6879      	ldr	r1, [r7, #4]
 80048cc:	6e89      	ldr	r1, [r1, #104]	; 0x68
 80048ce:	fb01 f303 	mul.w	r3, r1, r3
 80048d2:	009b      	lsls	r3, r3, #2
 80048d4:	441a      	add	r2, r3
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  if (hfdcan->msgRam.EndAddress > FDCAN_MESSAGE_RAM_END_ADDRESS) /* Last address of the Message RAM */
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80048e2:	4a04      	ldr	r2, [pc, #16]	; (80048f4 <FDCAN_CalcultateRamBlockAddresses+0x2bc>)
 80048e4:	4293      	cmp	r3, r2
 80048e6:	d915      	bls.n	8004914 <FDCAN_CalcultateRamBlockAddresses+0x2dc>
 80048e8:	e006      	b.n	80048f8 <FDCAN_CalcultateRamBlockAddresses+0x2c0>
 80048ea:	bf00      	nop
 80048ec:	ffff0003 	.word	0xffff0003
 80048f0:	10002b00 	.word	0x10002b00
 80048f4:	4000d3fc 	.word	0x4000d3fc
  {
    /* Update error code.
       Message RAM overflow */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_PARAM;
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80048fe:	f043 0220 	orr.w	r2, r3, #32
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

    /* Change FDCAN state */
    hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	2203      	movs	r2, #3
 800490c:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

    return HAL_ERROR;
 8004910:	2301      	movs	r3, #1
 8004912:	e010      	b.n	8004936 <FDCAN_CalcultateRamBlockAddresses+0x2fe>
  }
  else
  {
    /* Flush the allocated Message RAM area */
    for (RAMcounter = hfdcan->msgRam.StandardFilterSA; RAMcounter < hfdcan->msgRam.EndAddress; RAMcounter += 4U)
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004918:	60fb      	str	r3, [r7, #12]
 800491a:	e005      	b.n	8004928 <FDCAN_CalcultateRamBlockAddresses+0x2f0>
    {
      *(uint32_t *)(RAMcounter) = 0x00000000;
 800491c:	68fb      	ldr	r3, [r7, #12]
 800491e:	2200      	movs	r2, #0
 8004920:	601a      	str	r2, [r3, #0]
    for (RAMcounter = hfdcan->msgRam.StandardFilterSA; RAMcounter < hfdcan->msgRam.EndAddress; RAMcounter += 4U)
 8004922:	68fb      	ldr	r3, [r7, #12]
 8004924:	3304      	adds	r3, #4
 8004926:	60fb      	str	r3, [r7, #12]
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800492e:	68fa      	ldr	r2, [r7, #12]
 8004930:	429a      	cmp	r2, r3
 8004932:	d3f3      	bcc.n	800491c <FDCAN_CalcultateRamBlockAddresses+0x2e4>
    }
  }

  /* Return function status */
  return HAL_OK;
 8004934:	2300      	movs	r3, #0
}
 8004936:	4618      	mov	r0, r3
 8004938:	3714      	adds	r7, #20
 800493a:	46bd      	mov	sp, r7
 800493c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004940:	4770      	bx	lr
 8004942:	bf00      	nop

08004944 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004944:	b480      	push	{r7}
 8004946:	b089      	sub	sp, #36	; 0x24
 8004948:	af00      	add	r7, sp, #0
 800494a:	6078      	str	r0, [r7, #4]
 800494c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800494e:	2300      	movs	r3, #0
 8004950:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8004952:	4b89      	ldr	r3, [pc, #548]	; (8004b78 <HAL_GPIO_Init+0x234>)
 8004954:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8004956:	e194      	b.n	8004c82 <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8004958:	683b      	ldr	r3, [r7, #0]
 800495a:	681a      	ldr	r2, [r3, #0]
 800495c:	2101      	movs	r1, #1
 800495e:	69fb      	ldr	r3, [r7, #28]
 8004960:	fa01 f303 	lsl.w	r3, r1, r3
 8004964:	4013      	ands	r3, r2
 8004966:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8004968:	693b      	ldr	r3, [r7, #16]
 800496a:	2b00      	cmp	r3, #0
 800496c:	f000 8186 	beq.w	8004c7c <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8004970:	683b      	ldr	r3, [r7, #0]
 8004972:	685b      	ldr	r3, [r3, #4]
 8004974:	2b01      	cmp	r3, #1
 8004976:	d00b      	beq.n	8004990 <HAL_GPIO_Init+0x4c>
 8004978:	683b      	ldr	r3, [r7, #0]
 800497a:	685b      	ldr	r3, [r3, #4]
 800497c:	2b02      	cmp	r3, #2
 800497e:	d007      	beq.n	8004990 <HAL_GPIO_Init+0x4c>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8004980:	683b      	ldr	r3, [r7, #0]
 8004982:	685b      	ldr	r3, [r3, #4]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8004984:	2b11      	cmp	r3, #17
 8004986:	d003      	beq.n	8004990 <HAL_GPIO_Init+0x4c>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8004988:	683b      	ldr	r3, [r7, #0]
 800498a:	685b      	ldr	r3, [r3, #4]
 800498c:	2b12      	cmp	r3, #18
 800498e:	d130      	bne.n	80049f2 <HAL_GPIO_Init+0xae>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	689b      	ldr	r3, [r3, #8]
 8004994:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8004996:	69fb      	ldr	r3, [r7, #28]
 8004998:	005b      	lsls	r3, r3, #1
 800499a:	2203      	movs	r2, #3
 800499c:	fa02 f303 	lsl.w	r3, r2, r3
 80049a0:	43db      	mvns	r3, r3
 80049a2:	69ba      	ldr	r2, [r7, #24]
 80049a4:	4013      	ands	r3, r2
 80049a6:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80049a8:	683b      	ldr	r3, [r7, #0]
 80049aa:	68da      	ldr	r2, [r3, #12]
 80049ac:	69fb      	ldr	r3, [r7, #28]
 80049ae:	005b      	lsls	r3, r3, #1
 80049b0:	fa02 f303 	lsl.w	r3, r2, r3
 80049b4:	69ba      	ldr	r2, [r7, #24]
 80049b6:	4313      	orrs	r3, r2
 80049b8:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	69ba      	ldr	r2, [r7, #24]
 80049be:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	685b      	ldr	r3, [r3, #4]
 80049c4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80049c6:	2201      	movs	r2, #1
 80049c8:	69fb      	ldr	r3, [r7, #28]
 80049ca:	fa02 f303 	lsl.w	r3, r2, r3
 80049ce:	43db      	mvns	r3, r3
 80049d0:	69ba      	ldr	r2, [r7, #24]
 80049d2:	4013      	ands	r3, r2
 80049d4:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 80049d6:	683b      	ldr	r3, [r7, #0]
 80049d8:	685b      	ldr	r3, [r3, #4]
 80049da:	091b      	lsrs	r3, r3, #4
 80049dc:	f003 0201 	and.w	r2, r3, #1
 80049e0:	69fb      	ldr	r3, [r7, #28]
 80049e2:	fa02 f303 	lsl.w	r3, r2, r3
 80049e6:	69ba      	ldr	r2, [r7, #24]
 80049e8:	4313      	orrs	r3, r2
 80049ea:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	69ba      	ldr	r2, [r7, #24]
 80049f0:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	68db      	ldr	r3, [r3, #12]
 80049f6:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80049f8:	69fb      	ldr	r3, [r7, #28]
 80049fa:	005b      	lsls	r3, r3, #1
 80049fc:	2203      	movs	r2, #3
 80049fe:	fa02 f303 	lsl.w	r3, r2, r3
 8004a02:	43db      	mvns	r3, r3
 8004a04:	69ba      	ldr	r2, [r7, #24]
 8004a06:	4013      	ands	r3, r2
 8004a08:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004a0a:	683b      	ldr	r3, [r7, #0]
 8004a0c:	689a      	ldr	r2, [r3, #8]
 8004a0e:	69fb      	ldr	r3, [r7, #28]
 8004a10:	005b      	lsls	r3, r3, #1
 8004a12:	fa02 f303 	lsl.w	r3, r2, r3
 8004a16:	69ba      	ldr	r2, [r7, #24]
 8004a18:	4313      	orrs	r3, r2
 8004a1a:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	69ba      	ldr	r2, [r7, #24]
 8004a20:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8004a22:	683b      	ldr	r3, [r7, #0]
 8004a24:	685b      	ldr	r3, [r3, #4]
 8004a26:	2b02      	cmp	r3, #2
 8004a28:	d003      	beq.n	8004a32 <HAL_GPIO_Init+0xee>
 8004a2a:	683b      	ldr	r3, [r7, #0]
 8004a2c:	685b      	ldr	r3, [r3, #4]
 8004a2e:	2b12      	cmp	r3, #18
 8004a30:	d123      	bne.n	8004a7a <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8004a32:	69fb      	ldr	r3, [r7, #28]
 8004a34:	08da      	lsrs	r2, r3, #3
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	3208      	adds	r2, #8
 8004a3a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004a3e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8004a40:	69fb      	ldr	r3, [r7, #28]
 8004a42:	f003 0307 	and.w	r3, r3, #7
 8004a46:	009b      	lsls	r3, r3, #2
 8004a48:	220f      	movs	r2, #15
 8004a4a:	fa02 f303 	lsl.w	r3, r2, r3
 8004a4e:	43db      	mvns	r3, r3
 8004a50:	69ba      	ldr	r2, [r7, #24]
 8004a52:	4013      	ands	r3, r2
 8004a54:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8004a56:	683b      	ldr	r3, [r7, #0]
 8004a58:	691a      	ldr	r2, [r3, #16]
 8004a5a:	69fb      	ldr	r3, [r7, #28]
 8004a5c:	f003 0307 	and.w	r3, r3, #7
 8004a60:	009b      	lsls	r3, r3, #2
 8004a62:	fa02 f303 	lsl.w	r3, r2, r3
 8004a66:	69ba      	ldr	r2, [r7, #24]
 8004a68:	4313      	orrs	r3, r2
 8004a6a:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8004a6c:	69fb      	ldr	r3, [r7, #28]
 8004a6e:	08da      	lsrs	r2, r3, #3
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	3208      	adds	r2, #8
 8004a74:	69b9      	ldr	r1, [r7, #24]
 8004a76:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	681b      	ldr	r3, [r3, #0]
 8004a7e:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8004a80:	69fb      	ldr	r3, [r7, #28]
 8004a82:	005b      	lsls	r3, r3, #1
 8004a84:	2203      	movs	r2, #3
 8004a86:	fa02 f303 	lsl.w	r3, r2, r3
 8004a8a:	43db      	mvns	r3, r3
 8004a8c:	69ba      	ldr	r2, [r7, #24]
 8004a8e:	4013      	ands	r3, r2
 8004a90:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8004a92:	683b      	ldr	r3, [r7, #0]
 8004a94:	685b      	ldr	r3, [r3, #4]
 8004a96:	f003 0203 	and.w	r2, r3, #3
 8004a9a:	69fb      	ldr	r3, [r7, #28]
 8004a9c:	005b      	lsls	r3, r3, #1
 8004a9e:	fa02 f303 	lsl.w	r3, r2, r3
 8004aa2:	69ba      	ldr	r2, [r7, #24]
 8004aa4:	4313      	orrs	r3, r2
 8004aa6:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	69ba      	ldr	r2, [r7, #24]
 8004aac:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8004aae:	683b      	ldr	r3, [r7, #0]
 8004ab0:	685b      	ldr	r3, [r3, #4]
 8004ab2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004ab6:	2b00      	cmp	r3, #0
 8004ab8:	f000 80e0 	beq.w	8004c7c <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004abc:	4b2f      	ldr	r3, [pc, #188]	; (8004b7c <HAL_GPIO_Init+0x238>)
 8004abe:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8004ac2:	4a2e      	ldr	r2, [pc, #184]	; (8004b7c <HAL_GPIO_Init+0x238>)
 8004ac4:	f043 0302 	orr.w	r3, r3, #2
 8004ac8:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8004acc:	4b2b      	ldr	r3, [pc, #172]	; (8004b7c <HAL_GPIO_Init+0x238>)
 8004ace:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8004ad2:	f003 0302 	and.w	r3, r3, #2
 8004ad6:	60fb      	str	r3, [r7, #12]
 8004ad8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8004ada:	4a29      	ldr	r2, [pc, #164]	; (8004b80 <HAL_GPIO_Init+0x23c>)
 8004adc:	69fb      	ldr	r3, [r7, #28]
 8004ade:	089b      	lsrs	r3, r3, #2
 8004ae0:	3302      	adds	r3, #2
 8004ae2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004ae6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8004ae8:	69fb      	ldr	r3, [r7, #28]
 8004aea:	f003 0303 	and.w	r3, r3, #3
 8004aee:	009b      	lsls	r3, r3, #2
 8004af0:	220f      	movs	r2, #15
 8004af2:	fa02 f303 	lsl.w	r3, r2, r3
 8004af6:	43db      	mvns	r3, r3
 8004af8:	69ba      	ldr	r2, [r7, #24]
 8004afa:	4013      	ands	r3, r2
 8004afc:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	4a20      	ldr	r2, [pc, #128]	; (8004b84 <HAL_GPIO_Init+0x240>)
 8004b02:	4293      	cmp	r3, r2
 8004b04:	d052      	beq.n	8004bac <HAL_GPIO_Init+0x268>
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	4a1f      	ldr	r2, [pc, #124]	; (8004b88 <HAL_GPIO_Init+0x244>)
 8004b0a:	4293      	cmp	r3, r2
 8004b0c:	d031      	beq.n	8004b72 <HAL_GPIO_Init+0x22e>
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	4a1e      	ldr	r2, [pc, #120]	; (8004b8c <HAL_GPIO_Init+0x248>)
 8004b12:	4293      	cmp	r3, r2
 8004b14:	d02b      	beq.n	8004b6e <HAL_GPIO_Init+0x22a>
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	4a1d      	ldr	r2, [pc, #116]	; (8004b90 <HAL_GPIO_Init+0x24c>)
 8004b1a:	4293      	cmp	r3, r2
 8004b1c:	d025      	beq.n	8004b6a <HAL_GPIO_Init+0x226>
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	4a1c      	ldr	r2, [pc, #112]	; (8004b94 <HAL_GPIO_Init+0x250>)
 8004b22:	4293      	cmp	r3, r2
 8004b24:	d01f      	beq.n	8004b66 <HAL_GPIO_Init+0x222>
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	4a1b      	ldr	r2, [pc, #108]	; (8004b98 <HAL_GPIO_Init+0x254>)
 8004b2a:	4293      	cmp	r3, r2
 8004b2c:	d019      	beq.n	8004b62 <HAL_GPIO_Init+0x21e>
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	4a1a      	ldr	r2, [pc, #104]	; (8004b9c <HAL_GPIO_Init+0x258>)
 8004b32:	4293      	cmp	r3, r2
 8004b34:	d013      	beq.n	8004b5e <HAL_GPIO_Init+0x21a>
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	4a19      	ldr	r2, [pc, #100]	; (8004ba0 <HAL_GPIO_Init+0x25c>)
 8004b3a:	4293      	cmp	r3, r2
 8004b3c:	d00d      	beq.n	8004b5a <HAL_GPIO_Init+0x216>
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	4a18      	ldr	r2, [pc, #96]	; (8004ba4 <HAL_GPIO_Init+0x260>)
 8004b42:	4293      	cmp	r3, r2
 8004b44:	d007      	beq.n	8004b56 <HAL_GPIO_Init+0x212>
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	4a17      	ldr	r2, [pc, #92]	; (8004ba8 <HAL_GPIO_Init+0x264>)
 8004b4a:	4293      	cmp	r3, r2
 8004b4c:	d101      	bne.n	8004b52 <HAL_GPIO_Init+0x20e>
 8004b4e:	2309      	movs	r3, #9
 8004b50:	e02d      	b.n	8004bae <HAL_GPIO_Init+0x26a>
 8004b52:	230a      	movs	r3, #10
 8004b54:	e02b      	b.n	8004bae <HAL_GPIO_Init+0x26a>
 8004b56:	2308      	movs	r3, #8
 8004b58:	e029      	b.n	8004bae <HAL_GPIO_Init+0x26a>
 8004b5a:	2307      	movs	r3, #7
 8004b5c:	e027      	b.n	8004bae <HAL_GPIO_Init+0x26a>
 8004b5e:	2306      	movs	r3, #6
 8004b60:	e025      	b.n	8004bae <HAL_GPIO_Init+0x26a>
 8004b62:	2305      	movs	r3, #5
 8004b64:	e023      	b.n	8004bae <HAL_GPIO_Init+0x26a>
 8004b66:	2304      	movs	r3, #4
 8004b68:	e021      	b.n	8004bae <HAL_GPIO_Init+0x26a>
 8004b6a:	2303      	movs	r3, #3
 8004b6c:	e01f      	b.n	8004bae <HAL_GPIO_Init+0x26a>
 8004b6e:	2302      	movs	r3, #2
 8004b70:	e01d      	b.n	8004bae <HAL_GPIO_Init+0x26a>
 8004b72:	2301      	movs	r3, #1
 8004b74:	e01b      	b.n	8004bae <HAL_GPIO_Init+0x26a>
 8004b76:	bf00      	nop
 8004b78:	58000080 	.word	0x58000080
 8004b7c:	58024400 	.word	0x58024400
 8004b80:	58000400 	.word	0x58000400
 8004b84:	58020000 	.word	0x58020000
 8004b88:	58020400 	.word	0x58020400
 8004b8c:	58020800 	.word	0x58020800
 8004b90:	58020c00 	.word	0x58020c00
 8004b94:	58021000 	.word	0x58021000
 8004b98:	58021400 	.word	0x58021400
 8004b9c:	58021800 	.word	0x58021800
 8004ba0:	58021c00 	.word	0x58021c00
 8004ba4:	58022000 	.word	0x58022000
 8004ba8:	58022400 	.word	0x58022400
 8004bac:	2300      	movs	r3, #0
 8004bae:	69fa      	ldr	r2, [r7, #28]
 8004bb0:	f002 0203 	and.w	r2, r2, #3
 8004bb4:	0092      	lsls	r2, r2, #2
 8004bb6:	4093      	lsls	r3, r2
 8004bb8:	69ba      	ldr	r2, [r7, #24]
 8004bba:	4313      	orrs	r3, r2
 8004bbc:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8004bbe:	4938      	ldr	r1, [pc, #224]	; (8004ca0 <HAL_GPIO_Init+0x35c>)
 8004bc0:	69fb      	ldr	r3, [r7, #28]
 8004bc2:	089b      	lsrs	r3, r3, #2
 8004bc4:	3302      	adds	r3, #2
 8004bc6:	69ba      	ldr	r2, [r7, #24]
 8004bc8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8004bcc:	697b      	ldr	r3, [r7, #20]
 8004bce:	681b      	ldr	r3, [r3, #0]
 8004bd0:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8004bd2:	693b      	ldr	r3, [r7, #16]
 8004bd4:	43db      	mvns	r3, r3
 8004bd6:	69ba      	ldr	r2, [r7, #24]
 8004bd8:	4013      	ands	r3, r2
 8004bda:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8004bdc:	683b      	ldr	r3, [r7, #0]
 8004bde:	685b      	ldr	r3, [r3, #4]
 8004be0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004be4:	2b00      	cmp	r3, #0
 8004be6:	d003      	beq.n	8004bf0 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8004be8:	69ba      	ldr	r2, [r7, #24]
 8004bea:	693b      	ldr	r3, [r7, #16]
 8004bec:	4313      	orrs	r3, r2
 8004bee:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8004bf0:	697b      	ldr	r3, [r7, #20]
 8004bf2:	69ba      	ldr	r2, [r7, #24]
 8004bf4:	601a      	str	r2, [r3, #0]

        temp = EXTI_CurrentCPU->EMR1;
 8004bf6:	697b      	ldr	r3, [r7, #20]
 8004bf8:	685b      	ldr	r3, [r3, #4]
 8004bfa:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8004bfc:	693b      	ldr	r3, [r7, #16]
 8004bfe:	43db      	mvns	r3, r3
 8004c00:	69ba      	ldr	r2, [r7, #24]
 8004c02:	4013      	ands	r3, r2
 8004c04:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8004c06:	683b      	ldr	r3, [r7, #0]
 8004c08:	685b      	ldr	r3, [r3, #4]
 8004c0a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004c0e:	2b00      	cmp	r3, #0
 8004c10:	d003      	beq.n	8004c1a <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8004c12:	69ba      	ldr	r2, [r7, #24]
 8004c14:	693b      	ldr	r3, [r7, #16]
 8004c16:	4313      	orrs	r3, r2
 8004c18:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8004c1a:	697b      	ldr	r3, [r7, #20]
 8004c1c:	69ba      	ldr	r2, [r7, #24]
 8004c1e:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8004c20:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004c24:	681b      	ldr	r3, [r3, #0]
 8004c26:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8004c28:	693b      	ldr	r3, [r7, #16]
 8004c2a:	43db      	mvns	r3, r3
 8004c2c:	69ba      	ldr	r2, [r7, #24]
 8004c2e:	4013      	ands	r3, r2
 8004c30:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8004c32:	683b      	ldr	r3, [r7, #0]
 8004c34:	685b      	ldr	r3, [r3, #4]
 8004c36:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004c3a:	2b00      	cmp	r3, #0
 8004c3c:	d003      	beq.n	8004c46 <HAL_GPIO_Init+0x302>
        {
          temp |= iocurrent;
 8004c3e:	69ba      	ldr	r2, [r7, #24]
 8004c40:	693b      	ldr	r3, [r7, #16]
 8004c42:	4313      	orrs	r3, r2
 8004c44:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8004c46:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004c4a:	69bb      	ldr	r3, [r7, #24]
 8004c4c:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8004c4e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004c52:	685b      	ldr	r3, [r3, #4]
 8004c54:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8004c56:	693b      	ldr	r3, [r7, #16]
 8004c58:	43db      	mvns	r3, r3
 8004c5a:	69ba      	ldr	r2, [r7, #24]
 8004c5c:	4013      	ands	r3, r2
 8004c5e:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8004c60:	683b      	ldr	r3, [r7, #0]
 8004c62:	685b      	ldr	r3, [r3, #4]
 8004c64:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004c68:	2b00      	cmp	r3, #0
 8004c6a:	d003      	beq.n	8004c74 <HAL_GPIO_Init+0x330>
        {
          temp |= iocurrent;
 8004c6c:	69ba      	ldr	r2, [r7, #24]
 8004c6e:	693b      	ldr	r3, [r7, #16]
 8004c70:	4313      	orrs	r3, r2
 8004c72:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8004c74:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004c78:	69bb      	ldr	r3, [r7, #24]
 8004c7a:	6053      	str	r3, [r2, #4]
      }
    }

    position++;
 8004c7c:	69fb      	ldr	r3, [r7, #28]
 8004c7e:	3301      	adds	r3, #1
 8004c80:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8004c82:	683b      	ldr	r3, [r7, #0]
 8004c84:	681a      	ldr	r2, [r3, #0]
 8004c86:	69fb      	ldr	r3, [r7, #28]
 8004c88:	fa22 f303 	lsr.w	r3, r2, r3
 8004c8c:	2b00      	cmp	r3, #0
 8004c8e:	f47f ae63 	bne.w	8004958 <HAL_GPIO_Init+0x14>
  }
}
 8004c92:	bf00      	nop
 8004c94:	bf00      	nop
 8004c96:	3724      	adds	r7, #36	; 0x24
 8004c98:	46bd      	mov	sp, r7
 8004c9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c9e:	4770      	bx	lr
 8004ca0:	58000400 	.word	0x58000400

08004ca4 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8004ca4:	b480      	push	{r7}
 8004ca6:	b085      	sub	sp, #20
 8004ca8:	af00      	add	r7, sp, #0
 8004caa:	6078      	str	r0, [r7, #4]
 8004cac:	460b      	mov	r3, r1
 8004cae:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	691a      	ldr	r2, [r3, #16]
 8004cb4:	887b      	ldrh	r3, [r7, #2]
 8004cb6:	4013      	ands	r3, r2
 8004cb8:	2b00      	cmp	r3, #0
 8004cba:	d002      	beq.n	8004cc2 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8004cbc:	2301      	movs	r3, #1
 8004cbe:	73fb      	strb	r3, [r7, #15]
 8004cc0:	e001      	b.n	8004cc6 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8004cc2:	2300      	movs	r3, #0
 8004cc4:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8004cc6:	7bfb      	ldrb	r3, [r7, #15]
}
 8004cc8:	4618      	mov	r0, r3
 8004cca:	3714      	adds	r7, #20
 8004ccc:	46bd      	mov	sp, r7
 8004cce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cd2:	4770      	bx	lr

08004cd4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004cd4:	b480      	push	{r7}
 8004cd6:	b083      	sub	sp, #12
 8004cd8:	af00      	add	r7, sp, #0
 8004cda:	6078      	str	r0, [r7, #4]
 8004cdc:	460b      	mov	r3, r1
 8004cde:	807b      	strh	r3, [r7, #2]
 8004ce0:	4613      	mov	r3, r2
 8004ce2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8004ce4:	787b      	ldrb	r3, [r7, #1]
 8004ce6:	2b00      	cmp	r3, #0
 8004ce8:	d003      	beq.n	8004cf2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8004cea:	887a      	ldrh	r2, [r7, #2]
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8004cf0:	e003      	b.n	8004cfa <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8004cf2:	887b      	ldrh	r3, [r7, #2]
 8004cf4:	041a      	lsls	r2, r3, #16
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	619a      	str	r2, [r3, #24]
}
 8004cfa:	bf00      	nop
 8004cfc:	370c      	adds	r7, #12
 8004cfe:	46bd      	mov	sp, r7
 8004d00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d04:	4770      	bx	lr
	...

08004d08 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8004d08:	b580      	push	{r7, lr}
 8004d0a:	b082      	sub	sp, #8
 8004d0c:	af00      	add	r7, sp, #0
 8004d0e:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	2b00      	cmp	r3, #0
 8004d14:	d101      	bne.n	8004d1a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8004d16:	2301      	movs	r3, #1
 8004d18:	e07f      	b.n	8004e1a <HAL_I2C_Init+0x112>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004d20:	b2db      	uxtb	r3, r3
 8004d22:	2b00      	cmp	r3, #0
 8004d24:	d106      	bne.n	8004d34 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	2200      	movs	r2, #0
 8004d2a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8004d2e:	6878      	ldr	r0, [r7, #4]
 8004d30:	f7fc fbfc 	bl	800152c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	2224      	movs	r2, #36	; 0x24
 8004d38:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	681b      	ldr	r3, [r3, #0]
 8004d40:	681a      	ldr	r2, [r3, #0]
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	681b      	ldr	r3, [r3, #0]
 8004d46:	f022 0201 	bic.w	r2, r2, #1
 8004d4a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	685a      	ldr	r2, [r3, #4]
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	681b      	ldr	r3, [r3, #0]
 8004d54:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8004d58:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	681b      	ldr	r3, [r3, #0]
 8004d5e:	689a      	ldr	r2, [r3, #8]
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	681b      	ldr	r3, [r3, #0]
 8004d64:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8004d68:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	68db      	ldr	r3, [r3, #12]
 8004d6e:	2b01      	cmp	r3, #1
 8004d70:	d107      	bne.n	8004d82 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	689a      	ldr	r2, [r3, #8]
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	681b      	ldr	r3, [r3, #0]
 8004d7a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004d7e:	609a      	str	r2, [r3, #8]
 8004d80:	e006      	b.n	8004d90 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	689a      	ldr	r2, [r3, #8]
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	681b      	ldr	r3, [r3, #0]
 8004d8a:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8004d8e:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	68db      	ldr	r3, [r3, #12]
 8004d94:	2b02      	cmp	r3, #2
 8004d96:	d104      	bne.n	8004da2 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	681b      	ldr	r3, [r3, #0]
 8004d9c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004da0:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	681b      	ldr	r3, [r3, #0]
 8004da6:	6859      	ldr	r1, [r3, #4]
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	681a      	ldr	r2, [r3, #0]
 8004dac:	4b1d      	ldr	r3, [pc, #116]	; (8004e24 <HAL_I2C_Init+0x11c>)
 8004dae:	430b      	orrs	r3, r1
 8004db0:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	681b      	ldr	r3, [r3, #0]
 8004db6:	68da      	ldr	r2, [r3, #12]
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	681b      	ldr	r3, [r3, #0]
 8004dbc:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8004dc0:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	691a      	ldr	r2, [r3, #16]
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	695b      	ldr	r3, [r3, #20]
 8004dca:	ea42 0103 	orr.w	r1, r2, r3
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	699b      	ldr	r3, [r3, #24]
 8004dd2:	021a      	lsls	r2, r3, #8
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	681b      	ldr	r3, [r3, #0]
 8004dd8:	430a      	orrs	r2, r1
 8004dda:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	69d9      	ldr	r1, [r3, #28]
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	6a1a      	ldr	r2, [r3, #32]
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	681b      	ldr	r3, [r3, #0]
 8004de8:	430a      	orrs	r2, r1
 8004dea:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	681b      	ldr	r3, [r3, #0]
 8004df0:	681a      	ldr	r2, [r3, #0]
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	681b      	ldr	r3, [r3, #0]
 8004df6:	f042 0201 	orr.w	r2, r2, #1
 8004dfa:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	2200      	movs	r2, #0
 8004e00:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	2220      	movs	r2, #32
 8004e06:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	2200      	movs	r2, #0
 8004e0e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	2200      	movs	r2, #0
 8004e14:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8004e18:	2300      	movs	r3, #0
}
 8004e1a:	4618      	mov	r0, r3
 8004e1c:	3708      	adds	r7, #8
 8004e1e:	46bd      	mov	sp, r7
 8004e20:	bd80      	pop	{r7, pc}
 8004e22:	bf00      	nop
 8004e24:	02008000 	.word	0x02008000

08004e28 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size,
                                          uint32_t Timeout)
{
 8004e28:	b580      	push	{r7, lr}
 8004e2a:	b088      	sub	sp, #32
 8004e2c:	af02      	add	r7, sp, #8
 8004e2e:	60f8      	str	r0, [r7, #12]
 8004e30:	607a      	str	r2, [r7, #4]
 8004e32:	461a      	mov	r2, r3
 8004e34:	460b      	mov	r3, r1
 8004e36:	817b      	strh	r3, [r7, #10]
 8004e38:	4613      	mov	r3, r2
 8004e3a:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004e3c:	68fb      	ldr	r3, [r7, #12]
 8004e3e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004e42:	b2db      	uxtb	r3, r3
 8004e44:	2b20      	cmp	r3, #32
 8004e46:	f040 80da 	bne.w	8004ffe <HAL_I2C_Master_Transmit+0x1d6>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004e4a:	68fb      	ldr	r3, [r7, #12]
 8004e4c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004e50:	2b01      	cmp	r3, #1
 8004e52:	d101      	bne.n	8004e58 <HAL_I2C_Master_Transmit+0x30>
 8004e54:	2302      	movs	r3, #2
 8004e56:	e0d3      	b.n	8005000 <HAL_I2C_Master_Transmit+0x1d8>
 8004e58:	68fb      	ldr	r3, [r7, #12]
 8004e5a:	2201      	movs	r2, #1
 8004e5c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8004e60:	f7fd faa0 	bl	80023a4 <HAL_GetTick>
 8004e64:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8004e66:	697b      	ldr	r3, [r7, #20]
 8004e68:	9300      	str	r3, [sp, #0]
 8004e6a:	2319      	movs	r3, #25
 8004e6c:	2201      	movs	r2, #1
 8004e6e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8004e72:	68f8      	ldr	r0, [r7, #12]
 8004e74:	f000 f9e6 	bl	8005244 <I2C_WaitOnFlagUntilTimeout>
 8004e78:	4603      	mov	r3, r0
 8004e7a:	2b00      	cmp	r3, #0
 8004e7c:	d001      	beq.n	8004e82 <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 8004e7e:	2301      	movs	r3, #1
 8004e80:	e0be      	b.n	8005000 <HAL_I2C_Master_Transmit+0x1d8>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8004e82:	68fb      	ldr	r3, [r7, #12]
 8004e84:	2221      	movs	r2, #33	; 0x21
 8004e86:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8004e8a:	68fb      	ldr	r3, [r7, #12]
 8004e8c:	2210      	movs	r2, #16
 8004e8e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004e92:	68fb      	ldr	r3, [r7, #12]
 8004e94:	2200      	movs	r2, #0
 8004e96:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8004e98:	68fb      	ldr	r3, [r7, #12]
 8004e9a:	687a      	ldr	r2, [r7, #4]
 8004e9c:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8004e9e:	68fb      	ldr	r3, [r7, #12]
 8004ea0:	893a      	ldrh	r2, [r7, #8]
 8004ea2:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8004ea4:	68fb      	ldr	r3, [r7, #12]
 8004ea6:	2200      	movs	r2, #0
 8004ea8:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004eaa:	68fb      	ldr	r3, [r7, #12]
 8004eac:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004eae:	b29b      	uxth	r3, r3
 8004eb0:	2bff      	cmp	r3, #255	; 0xff
 8004eb2:	d90e      	bls.n	8004ed2 <HAL_I2C_Master_Transmit+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8004eb4:	68fb      	ldr	r3, [r7, #12]
 8004eb6:	22ff      	movs	r2, #255	; 0xff
 8004eb8:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8004eba:	68fb      	ldr	r3, [r7, #12]
 8004ebc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004ebe:	b2da      	uxtb	r2, r3
 8004ec0:	8979      	ldrh	r1, [r7, #10]
 8004ec2:	4b51      	ldr	r3, [pc, #324]	; (8005008 <HAL_I2C_Master_Transmit+0x1e0>)
 8004ec4:	9300      	str	r3, [sp, #0]
 8004ec6:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8004eca:	68f8      	ldr	r0, [r7, #12]
 8004ecc:	f000 fb48 	bl	8005560 <I2C_TransferConfig>
 8004ed0:	e06c      	b.n	8004fac <HAL_I2C_Master_Transmit+0x184>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8004ed2:	68fb      	ldr	r3, [r7, #12]
 8004ed4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004ed6:	b29a      	uxth	r2, r3
 8004ed8:	68fb      	ldr	r3, [r7, #12]
 8004eda:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_WRITE);
 8004edc:	68fb      	ldr	r3, [r7, #12]
 8004ede:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004ee0:	b2da      	uxtb	r2, r3
 8004ee2:	8979      	ldrh	r1, [r7, #10]
 8004ee4:	4b48      	ldr	r3, [pc, #288]	; (8005008 <HAL_I2C_Master_Transmit+0x1e0>)
 8004ee6:	9300      	str	r3, [sp, #0]
 8004ee8:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8004eec:	68f8      	ldr	r0, [r7, #12]
 8004eee:	f000 fb37 	bl	8005560 <I2C_TransferConfig>
    }

    while (hi2c->XferCount > 0U)
 8004ef2:	e05b      	b.n	8004fac <HAL_I2C_Master_Transmit+0x184>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004ef4:	697a      	ldr	r2, [r7, #20]
 8004ef6:	6a39      	ldr	r1, [r7, #32]
 8004ef8:	68f8      	ldr	r0, [r7, #12]
 8004efa:	f000 f9e3 	bl	80052c4 <I2C_WaitOnTXISFlagUntilTimeout>
 8004efe:	4603      	mov	r3, r0
 8004f00:	2b00      	cmp	r3, #0
 8004f02:	d001      	beq.n	8004f08 <HAL_I2C_Master_Transmit+0xe0>
      {
        return HAL_ERROR;
 8004f04:	2301      	movs	r3, #1
 8004f06:	e07b      	b.n	8005000 <HAL_I2C_Master_Transmit+0x1d8>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8004f08:	68fb      	ldr	r3, [r7, #12]
 8004f0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f0c:	781a      	ldrb	r2, [r3, #0]
 8004f0e:	68fb      	ldr	r3, [r7, #12]
 8004f10:	681b      	ldr	r3, [r3, #0]
 8004f12:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004f14:	68fb      	ldr	r3, [r7, #12]
 8004f16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f18:	1c5a      	adds	r2, r3, #1
 8004f1a:	68fb      	ldr	r3, [r7, #12]
 8004f1c:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8004f1e:	68fb      	ldr	r3, [r7, #12]
 8004f20:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004f22:	b29b      	uxth	r3, r3
 8004f24:	3b01      	subs	r3, #1
 8004f26:	b29a      	uxth	r2, r3
 8004f28:	68fb      	ldr	r3, [r7, #12]
 8004f2a:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8004f2c:	68fb      	ldr	r3, [r7, #12]
 8004f2e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004f30:	3b01      	subs	r3, #1
 8004f32:	b29a      	uxth	r2, r3
 8004f34:	68fb      	ldr	r3, [r7, #12]
 8004f36:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8004f38:	68fb      	ldr	r3, [r7, #12]
 8004f3a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004f3c:	b29b      	uxth	r3, r3
 8004f3e:	2b00      	cmp	r3, #0
 8004f40:	d034      	beq.n	8004fac <HAL_I2C_Master_Transmit+0x184>
 8004f42:	68fb      	ldr	r3, [r7, #12]
 8004f44:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004f46:	2b00      	cmp	r3, #0
 8004f48:	d130      	bne.n	8004fac <HAL_I2C_Master_Transmit+0x184>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8004f4a:	697b      	ldr	r3, [r7, #20]
 8004f4c:	9300      	str	r3, [sp, #0]
 8004f4e:	6a3b      	ldr	r3, [r7, #32]
 8004f50:	2200      	movs	r2, #0
 8004f52:	2180      	movs	r1, #128	; 0x80
 8004f54:	68f8      	ldr	r0, [r7, #12]
 8004f56:	f000 f975 	bl	8005244 <I2C_WaitOnFlagUntilTimeout>
 8004f5a:	4603      	mov	r3, r0
 8004f5c:	2b00      	cmp	r3, #0
 8004f5e:	d001      	beq.n	8004f64 <HAL_I2C_Master_Transmit+0x13c>
        {
          return HAL_ERROR;
 8004f60:	2301      	movs	r3, #1
 8004f62:	e04d      	b.n	8005000 <HAL_I2C_Master_Transmit+0x1d8>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004f64:	68fb      	ldr	r3, [r7, #12]
 8004f66:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004f68:	b29b      	uxth	r3, r3
 8004f6a:	2bff      	cmp	r3, #255	; 0xff
 8004f6c:	d90e      	bls.n	8004f8c <HAL_I2C_Master_Transmit+0x164>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8004f6e:	68fb      	ldr	r3, [r7, #12]
 8004f70:	22ff      	movs	r2, #255	; 0xff
 8004f72:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8004f74:	68fb      	ldr	r3, [r7, #12]
 8004f76:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004f78:	b2da      	uxtb	r2, r3
 8004f7a:	8979      	ldrh	r1, [r7, #10]
 8004f7c:	2300      	movs	r3, #0
 8004f7e:	9300      	str	r3, [sp, #0]
 8004f80:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8004f84:	68f8      	ldr	r0, [r7, #12]
 8004f86:	f000 faeb 	bl	8005560 <I2C_TransferConfig>
 8004f8a:	e00f      	b.n	8004fac <HAL_I2C_Master_Transmit+0x184>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8004f8c:	68fb      	ldr	r3, [r7, #12]
 8004f8e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004f90:	b29a      	uxth	r2, r3
 8004f92:	68fb      	ldr	r3, [r7, #12]
 8004f94:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8004f96:	68fb      	ldr	r3, [r7, #12]
 8004f98:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004f9a:	b2da      	uxtb	r2, r3
 8004f9c:	8979      	ldrh	r1, [r7, #10]
 8004f9e:	2300      	movs	r3, #0
 8004fa0:	9300      	str	r3, [sp, #0]
 8004fa2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8004fa6:	68f8      	ldr	r0, [r7, #12]
 8004fa8:	f000 fada 	bl	8005560 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8004fac:	68fb      	ldr	r3, [r7, #12]
 8004fae:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004fb0:	b29b      	uxth	r3, r3
 8004fb2:	2b00      	cmp	r3, #0
 8004fb4:	d19e      	bne.n	8004ef4 <HAL_I2C_Master_Transmit+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004fb6:	697a      	ldr	r2, [r7, #20]
 8004fb8:	6a39      	ldr	r1, [r7, #32]
 8004fba:	68f8      	ldr	r0, [r7, #12]
 8004fbc:	f000 f9c2 	bl	8005344 <I2C_WaitOnSTOPFlagUntilTimeout>
 8004fc0:	4603      	mov	r3, r0
 8004fc2:	2b00      	cmp	r3, #0
 8004fc4:	d001      	beq.n	8004fca <HAL_I2C_Master_Transmit+0x1a2>
    {
      return HAL_ERROR;
 8004fc6:	2301      	movs	r3, #1
 8004fc8:	e01a      	b.n	8005000 <HAL_I2C_Master_Transmit+0x1d8>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004fca:	68fb      	ldr	r3, [r7, #12]
 8004fcc:	681b      	ldr	r3, [r3, #0]
 8004fce:	2220      	movs	r2, #32
 8004fd0:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8004fd2:	68fb      	ldr	r3, [r7, #12]
 8004fd4:	681b      	ldr	r3, [r3, #0]
 8004fd6:	6859      	ldr	r1, [r3, #4]
 8004fd8:	68fb      	ldr	r3, [r7, #12]
 8004fda:	681a      	ldr	r2, [r3, #0]
 8004fdc:	4b0b      	ldr	r3, [pc, #44]	; (800500c <HAL_I2C_Master_Transmit+0x1e4>)
 8004fde:	400b      	ands	r3, r1
 8004fe0:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8004fe2:	68fb      	ldr	r3, [r7, #12]
 8004fe4:	2220      	movs	r2, #32
 8004fe6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8004fea:	68fb      	ldr	r3, [r7, #12]
 8004fec:	2200      	movs	r2, #0
 8004fee:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004ff2:	68fb      	ldr	r3, [r7, #12]
 8004ff4:	2200      	movs	r2, #0
 8004ff6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8004ffa:	2300      	movs	r3, #0
 8004ffc:	e000      	b.n	8005000 <HAL_I2C_Master_Transmit+0x1d8>
  }
  else
  {
    return HAL_BUSY;
 8004ffe:	2302      	movs	r3, #2
  }
}
 8005000:	4618      	mov	r0, r3
 8005002:	3718      	adds	r7, #24
 8005004:	46bd      	mov	sp, r7
 8005006:	bd80      	pop	{r7, pc}
 8005008:	80002000 	.word	0x80002000
 800500c:	fe00e800 	.word	0xfe00e800

08005010 <HAL_I2C_Master_Receive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size,
                                         uint32_t Timeout)
{
 8005010:	b580      	push	{r7, lr}
 8005012:	b088      	sub	sp, #32
 8005014:	af02      	add	r7, sp, #8
 8005016:	60f8      	str	r0, [r7, #12]
 8005018:	607a      	str	r2, [r7, #4]
 800501a:	461a      	mov	r2, r3
 800501c:	460b      	mov	r3, r1
 800501e:	817b      	strh	r3, [r7, #10]
 8005020:	4613      	mov	r3, r2
 8005022:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005024:	68fb      	ldr	r3, [r7, #12]
 8005026:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800502a:	b2db      	uxtb	r3, r3
 800502c:	2b20      	cmp	r3, #32
 800502e:	f040 80db 	bne.w	80051e8 <HAL_I2C_Master_Receive+0x1d8>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005032:	68fb      	ldr	r3, [r7, #12]
 8005034:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005038:	2b01      	cmp	r3, #1
 800503a:	d101      	bne.n	8005040 <HAL_I2C_Master_Receive+0x30>
 800503c:	2302      	movs	r3, #2
 800503e:	e0d4      	b.n	80051ea <HAL_I2C_Master_Receive+0x1da>
 8005040:	68fb      	ldr	r3, [r7, #12]
 8005042:	2201      	movs	r2, #1
 8005044:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8005048:	f7fd f9ac 	bl	80023a4 <HAL_GetTick>
 800504c:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800504e:	697b      	ldr	r3, [r7, #20]
 8005050:	9300      	str	r3, [sp, #0]
 8005052:	2319      	movs	r3, #25
 8005054:	2201      	movs	r2, #1
 8005056:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800505a:	68f8      	ldr	r0, [r7, #12]
 800505c:	f000 f8f2 	bl	8005244 <I2C_WaitOnFlagUntilTimeout>
 8005060:	4603      	mov	r3, r0
 8005062:	2b00      	cmp	r3, #0
 8005064:	d001      	beq.n	800506a <HAL_I2C_Master_Receive+0x5a>
    {
      return HAL_ERROR;
 8005066:	2301      	movs	r3, #1
 8005068:	e0bf      	b.n	80051ea <HAL_I2C_Master_Receive+0x1da>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800506a:	68fb      	ldr	r3, [r7, #12]
 800506c:	2222      	movs	r2, #34	; 0x22
 800506e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8005072:	68fb      	ldr	r3, [r7, #12]
 8005074:	2210      	movs	r2, #16
 8005076:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800507a:	68fb      	ldr	r3, [r7, #12]
 800507c:	2200      	movs	r2, #0
 800507e:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8005080:	68fb      	ldr	r3, [r7, #12]
 8005082:	687a      	ldr	r2, [r7, #4]
 8005084:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8005086:	68fb      	ldr	r3, [r7, #12]
 8005088:	893a      	ldrh	r2, [r7, #8]
 800508a:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 800508c:	68fb      	ldr	r3, [r7, #12]
 800508e:	2200      	movs	r2, #0
 8005090:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8005092:	68fb      	ldr	r3, [r7, #12]
 8005094:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005096:	b29b      	uxth	r3, r3
 8005098:	2bff      	cmp	r3, #255	; 0xff
 800509a:	d90e      	bls.n	80050ba <HAL_I2C_Master_Receive+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800509c:	68fb      	ldr	r3, [r7, #12]
 800509e:	22ff      	movs	r2, #255	; 0xff
 80050a0:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_READ);
 80050a2:	68fb      	ldr	r3, [r7, #12]
 80050a4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80050a6:	b2da      	uxtb	r2, r3
 80050a8:	8979      	ldrh	r1, [r7, #10]
 80050aa:	4b52      	ldr	r3, [pc, #328]	; (80051f4 <HAL_I2C_Master_Receive+0x1e4>)
 80050ac:	9300      	str	r3, [sp, #0]
 80050ae:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80050b2:	68f8      	ldr	r0, [r7, #12]
 80050b4:	f000 fa54 	bl	8005560 <I2C_TransferConfig>
 80050b8:	e06d      	b.n	8005196 <HAL_I2C_Master_Receive+0x186>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80050ba:	68fb      	ldr	r3, [r7, #12]
 80050bc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80050be:	b29a      	uxth	r2, r3
 80050c0:	68fb      	ldr	r3, [r7, #12]
 80050c2:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_READ);
 80050c4:	68fb      	ldr	r3, [r7, #12]
 80050c6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80050c8:	b2da      	uxtb	r2, r3
 80050ca:	8979      	ldrh	r1, [r7, #10]
 80050cc:	4b49      	ldr	r3, [pc, #292]	; (80051f4 <HAL_I2C_Master_Receive+0x1e4>)
 80050ce:	9300      	str	r3, [sp, #0]
 80050d0:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80050d4:	68f8      	ldr	r0, [r7, #12]
 80050d6:	f000 fa43 	bl	8005560 <I2C_TransferConfig>
    }

    while (hi2c->XferCount > 0U)
 80050da:	e05c      	b.n	8005196 <HAL_I2C_Master_Receive+0x186>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80050dc:	697a      	ldr	r2, [r7, #20]
 80050de:	6a39      	ldr	r1, [r7, #32]
 80050e0:	68f8      	ldr	r0, [r7, #12]
 80050e2:	f000 f96b 	bl	80053bc <I2C_WaitOnRXNEFlagUntilTimeout>
 80050e6:	4603      	mov	r3, r0
 80050e8:	2b00      	cmp	r3, #0
 80050ea:	d001      	beq.n	80050f0 <HAL_I2C_Master_Receive+0xe0>
      {
        return HAL_ERROR;
 80050ec:	2301      	movs	r3, #1
 80050ee:	e07c      	b.n	80051ea <HAL_I2C_Master_Receive+0x1da>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80050f0:	68fb      	ldr	r3, [r7, #12]
 80050f2:	681b      	ldr	r3, [r3, #0]
 80050f4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80050f6:	68fb      	ldr	r3, [r7, #12]
 80050f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80050fa:	b2d2      	uxtb	r2, r2
 80050fc:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80050fe:	68fb      	ldr	r3, [r7, #12]
 8005100:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005102:	1c5a      	adds	r2, r3, #1
 8005104:	68fb      	ldr	r3, [r7, #12]
 8005106:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8005108:	68fb      	ldr	r3, [r7, #12]
 800510a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800510c:	3b01      	subs	r3, #1
 800510e:	b29a      	uxth	r2, r3
 8005110:	68fb      	ldr	r3, [r7, #12]
 8005112:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8005114:	68fb      	ldr	r3, [r7, #12]
 8005116:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005118:	b29b      	uxth	r3, r3
 800511a:	3b01      	subs	r3, #1
 800511c:	b29a      	uxth	r2, r3
 800511e:	68fb      	ldr	r3, [r7, #12]
 8005120:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8005122:	68fb      	ldr	r3, [r7, #12]
 8005124:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005126:	b29b      	uxth	r3, r3
 8005128:	2b00      	cmp	r3, #0
 800512a:	d034      	beq.n	8005196 <HAL_I2C_Master_Receive+0x186>
 800512c:	68fb      	ldr	r3, [r7, #12]
 800512e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005130:	2b00      	cmp	r3, #0
 8005132:	d130      	bne.n	8005196 <HAL_I2C_Master_Receive+0x186>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8005134:	697b      	ldr	r3, [r7, #20]
 8005136:	9300      	str	r3, [sp, #0]
 8005138:	6a3b      	ldr	r3, [r7, #32]
 800513a:	2200      	movs	r2, #0
 800513c:	2180      	movs	r1, #128	; 0x80
 800513e:	68f8      	ldr	r0, [r7, #12]
 8005140:	f000 f880 	bl	8005244 <I2C_WaitOnFlagUntilTimeout>
 8005144:	4603      	mov	r3, r0
 8005146:	2b00      	cmp	r3, #0
 8005148:	d001      	beq.n	800514e <HAL_I2C_Master_Receive+0x13e>
        {
          return HAL_ERROR;
 800514a:	2301      	movs	r3, #1
 800514c:	e04d      	b.n	80051ea <HAL_I2C_Master_Receive+0x1da>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800514e:	68fb      	ldr	r3, [r7, #12]
 8005150:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005152:	b29b      	uxth	r3, r3
 8005154:	2bff      	cmp	r3, #255	; 0xff
 8005156:	d90e      	bls.n	8005176 <HAL_I2C_Master_Receive+0x166>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8005158:	68fb      	ldr	r3, [r7, #12]
 800515a:	22ff      	movs	r2, #255	; 0xff
 800515c:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 800515e:	68fb      	ldr	r3, [r7, #12]
 8005160:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005162:	b2da      	uxtb	r2, r3
 8005164:	8979      	ldrh	r1, [r7, #10]
 8005166:	2300      	movs	r3, #0
 8005168:	9300      	str	r3, [sp, #0]
 800516a:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800516e:	68f8      	ldr	r0, [r7, #12]
 8005170:	f000 f9f6 	bl	8005560 <I2C_TransferConfig>
 8005174:	e00f      	b.n	8005196 <HAL_I2C_Master_Receive+0x186>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8005176:	68fb      	ldr	r3, [r7, #12]
 8005178:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800517a:	b29a      	uxth	r2, r3
 800517c:	68fb      	ldr	r3, [r7, #12]
 800517e:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8005180:	68fb      	ldr	r3, [r7, #12]
 8005182:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005184:	b2da      	uxtb	r2, r3
 8005186:	8979      	ldrh	r1, [r7, #10]
 8005188:	2300      	movs	r3, #0
 800518a:	9300      	str	r3, [sp, #0]
 800518c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8005190:	68f8      	ldr	r0, [r7, #12]
 8005192:	f000 f9e5 	bl	8005560 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8005196:	68fb      	ldr	r3, [r7, #12]
 8005198:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800519a:	b29b      	uxth	r3, r3
 800519c:	2b00      	cmp	r3, #0
 800519e:	d19d      	bne.n	80050dc <HAL_I2C_Master_Receive+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80051a0:	697a      	ldr	r2, [r7, #20]
 80051a2:	6a39      	ldr	r1, [r7, #32]
 80051a4:	68f8      	ldr	r0, [r7, #12]
 80051a6:	f000 f8cd 	bl	8005344 <I2C_WaitOnSTOPFlagUntilTimeout>
 80051aa:	4603      	mov	r3, r0
 80051ac:	2b00      	cmp	r3, #0
 80051ae:	d001      	beq.n	80051b4 <HAL_I2C_Master_Receive+0x1a4>
    {
      return HAL_ERROR;
 80051b0:	2301      	movs	r3, #1
 80051b2:	e01a      	b.n	80051ea <HAL_I2C_Master_Receive+0x1da>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80051b4:	68fb      	ldr	r3, [r7, #12]
 80051b6:	681b      	ldr	r3, [r3, #0]
 80051b8:	2220      	movs	r2, #32
 80051ba:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80051bc:	68fb      	ldr	r3, [r7, #12]
 80051be:	681b      	ldr	r3, [r3, #0]
 80051c0:	6859      	ldr	r1, [r3, #4]
 80051c2:	68fb      	ldr	r3, [r7, #12]
 80051c4:	681a      	ldr	r2, [r3, #0]
 80051c6:	4b0c      	ldr	r3, [pc, #48]	; (80051f8 <HAL_I2C_Master_Receive+0x1e8>)
 80051c8:	400b      	ands	r3, r1
 80051ca:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80051cc:	68fb      	ldr	r3, [r7, #12]
 80051ce:	2220      	movs	r2, #32
 80051d0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80051d4:	68fb      	ldr	r3, [r7, #12]
 80051d6:	2200      	movs	r2, #0
 80051d8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80051dc:	68fb      	ldr	r3, [r7, #12]
 80051de:	2200      	movs	r2, #0
 80051e0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80051e4:	2300      	movs	r3, #0
 80051e6:	e000      	b.n	80051ea <HAL_I2C_Master_Receive+0x1da>
  }
  else
  {
    return HAL_BUSY;
 80051e8:	2302      	movs	r3, #2
  }
}
 80051ea:	4618      	mov	r0, r3
 80051ec:	3718      	adds	r7, #24
 80051ee:	46bd      	mov	sp, r7
 80051f0:	bd80      	pop	{r7, pc}
 80051f2:	bf00      	nop
 80051f4:	80002400 	.word	0x80002400
 80051f8:	fe00e800 	.word	0xfe00e800

080051fc <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 80051fc:	b480      	push	{r7}
 80051fe:	b083      	sub	sp, #12
 8005200:	af00      	add	r7, sp, #0
 8005202:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	681b      	ldr	r3, [r3, #0]
 8005208:	699b      	ldr	r3, [r3, #24]
 800520a:	f003 0302 	and.w	r3, r3, #2
 800520e:	2b02      	cmp	r3, #2
 8005210:	d103      	bne.n	800521a <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	681b      	ldr	r3, [r3, #0]
 8005216:	2200      	movs	r2, #0
 8005218:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	681b      	ldr	r3, [r3, #0]
 800521e:	699b      	ldr	r3, [r3, #24]
 8005220:	f003 0301 	and.w	r3, r3, #1
 8005224:	2b01      	cmp	r3, #1
 8005226:	d007      	beq.n	8005238 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8005228:	687b      	ldr	r3, [r7, #4]
 800522a:	681b      	ldr	r3, [r3, #0]
 800522c:	699a      	ldr	r2, [r3, #24]
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	681b      	ldr	r3, [r3, #0]
 8005232:	f042 0201 	orr.w	r2, r2, #1
 8005236:	619a      	str	r2, [r3, #24]
  }
}
 8005238:	bf00      	nop
 800523a:	370c      	adds	r7, #12
 800523c:	46bd      	mov	sp, r7
 800523e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005242:	4770      	bx	lr

08005244 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8005244:	b580      	push	{r7, lr}
 8005246:	b084      	sub	sp, #16
 8005248:	af00      	add	r7, sp, #0
 800524a:	60f8      	str	r0, [r7, #12]
 800524c:	60b9      	str	r1, [r7, #8]
 800524e:	603b      	str	r3, [r7, #0]
 8005250:	4613      	mov	r3, r2
 8005252:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005254:	e022      	b.n	800529c <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005256:	683b      	ldr	r3, [r7, #0]
 8005258:	f1b3 3fff 	cmp.w	r3, #4294967295
 800525c:	d01e      	beq.n	800529c <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800525e:	f7fd f8a1 	bl	80023a4 <HAL_GetTick>
 8005262:	4602      	mov	r2, r0
 8005264:	69bb      	ldr	r3, [r7, #24]
 8005266:	1ad3      	subs	r3, r2, r3
 8005268:	683a      	ldr	r2, [r7, #0]
 800526a:	429a      	cmp	r2, r3
 800526c:	d302      	bcc.n	8005274 <I2C_WaitOnFlagUntilTimeout+0x30>
 800526e:	683b      	ldr	r3, [r7, #0]
 8005270:	2b00      	cmp	r3, #0
 8005272:	d113      	bne.n	800529c <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8005274:	68fb      	ldr	r3, [r7, #12]
 8005276:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005278:	f043 0220 	orr.w	r2, r3, #32
 800527c:	68fb      	ldr	r3, [r7, #12]
 800527e:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8005280:	68fb      	ldr	r3, [r7, #12]
 8005282:	2220      	movs	r2, #32
 8005284:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8005288:	68fb      	ldr	r3, [r7, #12]
 800528a:	2200      	movs	r2, #0
 800528c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005290:	68fb      	ldr	r3, [r7, #12]
 8005292:	2200      	movs	r2, #0
 8005294:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 8005298:	2301      	movs	r3, #1
 800529a:	e00f      	b.n	80052bc <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800529c:	68fb      	ldr	r3, [r7, #12]
 800529e:	681b      	ldr	r3, [r3, #0]
 80052a0:	699a      	ldr	r2, [r3, #24]
 80052a2:	68bb      	ldr	r3, [r7, #8]
 80052a4:	4013      	ands	r3, r2
 80052a6:	68ba      	ldr	r2, [r7, #8]
 80052a8:	429a      	cmp	r2, r3
 80052aa:	bf0c      	ite	eq
 80052ac:	2301      	moveq	r3, #1
 80052ae:	2300      	movne	r3, #0
 80052b0:	b2db      	uxtb	r3, r3
 80052b2:	461a      	mov	r2, r3
 80052b4:	79fb      	ldrb	r3, [r7, #7]
 80052b6:	429a      	cmp	r2, r3
 80052b8:	d0cd      	beq.n	8005256 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80052ba:	2300      	movs	r3, #0
}
 80052bc:	4618      	mov	r0, r3
 80052be:	3710      	adds	r7, #16
 80052c0:	46bd      	mov	sp, r7
 80052c2:	bd80      	pop	{r7, pc}

080052c4 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80052c4:	b580      	push	{r7, lr}
 80052c6:	b084      	sub	sp, #16
 80052c8:	af00      	add	r7, sp, #0
 80052ca:	60f8      	str	r0, [r7, #12]
 80052cc:	60b9      	str	r1, [r7, #8]
 80052ce:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80052d0:	e02c      	b.n	800532c <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 80052d2:	687a      	ldr	r2, [r7, #4]
 80052d4:	68b9      	ldr	r1, [r7, #8]
 80052d6:	68f8      	ldr	r0, [r7, #12]
 80052d8:	f000 f8dc 	bl	8005494 <I2C_IsAcknowledgeFailed>
 80052dc:	4603      	mov	r3, r0
 80052de:	2b00      	cmp	r3, #0
 80052e0:	d001      	beq.n	80052e6 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80052e2:	2301      	movs	r3, #1
 80052e4:	e02a      	b.n	800533c <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80052e6:	68bb      	ldr	r3, [r7, #8]
 80052e8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80052ec:	d01e      	beq.n	800532c <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80052ee:	f7fd f859 	bl	80023a4 <HAL_GetTick>
 80052f2:	4602      	mov	r2, r0
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	1ad3      	subs	r3, r2, r3
 80052f8:	68ba      	ldr	r2, [r7, #8]
 80052fa:	429a      	cmp	r2, r3
 80052fc:	d302      	bcc.n	8005304 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 80052fe:	68bb      	ldr	r3, [r7, #8]
 8005300:	2b00      	cmp	r3, #0
 8005302:	d113      	bne.n	800532c <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8005304:	68fb      	ldr	r3, [r7, #12]
 8005306:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005308:	f043 0220 	orr.w	r2, r3, #32
 800530c:	68fb      	ldr	r3, [r7, #12]
 800530e:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8005310:	68fb      	ldr	r3, [r7, #12]
 8005312:	2220      	movs	r2, #32
 8005314:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8005318:	68fb      	ldr	r3, [r7, #12]
 800531a:	2200      	movs	r2, #0
 800531c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005320:	68fb      	ldr	r3, [r7, #12]
 8005322:	2200      	movs	r2, #0
 8005324:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8005328:	2301      	movs	r3, #1
 800532a:	e007      	b.n	800533c <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800532c:	68fb      	ldr	r3, [r7, #12]
 800532e:	681b      	ldr	r3, [r3, #0]
 8005330:	699b      	ldr	r3, [r3, #24]
 8005332:	f003 0302 	and.w	r3, r3, #2
 8005336:	2b02      	cmp	r3, #2
 8005338:	d1cb      	bne.n	80052d2 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800533a:	2300      	movs	r3, #0
}
 800533c:	4618      	mov	r0, r3
 800533e:	3710      	adds	r7, #16
 8005340:	46bd      	mov	sp, r7
 8005342:	bd80      	pop	{r7, pc}

08005344 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005344:	b580      	push	{r7, lr}
 8005346:	b084      	sub	sp, #16
 8005348:	af00      	add	r7, sp, #0
 800534a:	60f8      	str	r0, [r7, #12]
 800534c:	60b9      	str	r1, [r7, #8]
 800534e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8005350:	e028      	b.n	80053a4 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8005352:	687a      	ldr	r2, [r7, #4]
 8005354:	68b9      	ldr	r1, [r7, #8]
 8005356:	68f8      	ldr	r0, [r7, #12]
 8005358:	f000 f89c 	bl	8005494 <I2C_IsAcknowledgeFailed>
 800535c:	4603      	mov	r3, r0
 800535e:	2b00      	cmp	r3, #0
 8005360:	d001      	beq.n	8005366 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8005362:	2301      	movs	r3, #1
 8005364:	e026      	b.n	80053b4 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005366:	f7fd f81d 	bl	80023a4 <HAL_GetTick>
 800536a:	4602      	mov	r2, r0
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	1ad3      	subs	r3, r2, r3
 8005370:	68ba      	ldr	r2, [r7, #8]
 8005372:	429a      	cmp	r2, r3
 8005374:	d302      	bcc.n	800537c <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8005376:	68bb      	ldr	r3, [r7, #8]
 8005378:	2b00      	cmp	r3, #0
 800537a:	d113      	bne.n	80053a4 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800537c:	68fb      	ldr	r3, [r7, #12]
 800537e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005380:	f043 0220 	orr.w	r2, r3, #32
 8005384:	68fb      	ldr	r3, [r7, #12]
 8005386:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8005388:	68fb      	ldr	r3, [r7, #12]
 800538a:	2220      	movs	r2, #32
 800538c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8005390:	68fb      	ldr	r3, [r7, #12]
 8005392:	2200      	movs	r2, #0
 8005394:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005398:	68fb      	ldr	r3, [r7, #12]
 800539a:	2200      	movs	r2, #0
 800539c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 80053a0:	2301      	movs	r3, #1
 80053a2:	e007      	b.n	80053b4 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80053a4:	68fb      	ldr	r3, [r7, #12]
 80053a6:	681b      	ldr	r3, [r3, #0]
 80053a8:	699b      	ldr	r3, [r3, #24]
 80053aa:	f003 0320 	and.w	r3, r3, #32
 80053ae:	2b20      	cmp	r3, #32
 80053b0:	d1cf      	bne.n	8005352 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 80053b2:	2300      	movs	r3, #0
}
 80053b4:	4618      	mov	r0, r3
 80053b6:	3710      	adds	r7, #16
 80053b8:	46bd      	mov	sp, r7
 80053ba:	bd80      	pop	{r7, pc}

080053bc <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80053bc:	b580      	push	{r7, lr}
 80053be:	b084      	sub	sp, #16
 80053c0:	af00      	add	r7, sp, #0
 80053c2:	60f8      	str	r0, [r7, #12]
 80053c4:	60b9      	str	r1, [r7, #8]
 80053c6:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80053c8:	e055      	b.n	8005476 <I2C_WaitOnRXNEFlagUntilTimeout+0xba>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 80053ca:	687a      	ldr	r2, [r7, #4]
 80053cc:	68b9      	ldr	r1, [r7, #8]
 80053ce:	68f8      	ldr	r0, [r7, #12]
 80053d0:	f000 f860 	bl	8005494 <I2C_IsAcknowledgeFailed>
 80053d4:	4603      	mov	r3, r0
 80053d6:	2b00      	cmp	r3, #0
 80053d8:	d001      	beq.n	80053de <I2C_WaitOnRXNEFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80053da:	2301      	movs	r3, #1
 80053dc:	e053      	b.n	8005486 <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
    }

    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80053de:	68fb      	ldr	r3, [r7, #12]
 80053e0:	681b      	ldr	r3, [r3, #0]
 80053e2:	699b      	ldr	r3, [r3, #24]
 80053e4:	f003 0320 	and.w	r3, r3, #32
 80053e8:	2b20      	cmp	r3, #32
 80053ea:	d129      	bne.n	8005440 <I2C_WaitOnRXNEFlagUntilTimeout+0x84>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 80053ec:	68fb      	ldr	r3, [r7, #12]
 80053ee:	681b      	ldr	r3, [r3, #0]
 80053f0:	699b      	ldr	r3, [r3, #24]
 80053f2:	f003 0304 	and.w	r3, r3, #4
 80053f6:	2b04      	cmp	r3, #4
 80053f8:	d105      	bne.n	8005406 <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
 80053fa:	68fb      	ldr	r3, [r7, #12]
 80053fc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80053fe:	2b00      	cmp	r3, #0
 8005400:	d001      	beq.n	8005406 <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        return HAL_OK;
 8005402:	2300      	movs	r3, #0
 8005404:	e03f      	b.n	8005486 <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
      }
      else
      {
        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005406:	68fb      	ldr	r3, [r7, #12]
 8005408:	681b      	ldr	r3, [r3, #0]
 800540a:	2220      	movs	r2, #32
 800540c:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 800540e:	68fb      	ldr	r3, [r7, #12]
 8005410:	681b      	ldr	r3, [r3, #0]
 8005412:	6859      	ldr	r1, [r3, #4]
 8005414:	68fb      	ldr	r3, [r7, #12]
 8005416:	681a      	ldr	r2, [r3, #0]
 8005418:	4b1d      	ldr	r3, [pc, #116]	; (8005490 <I2C_WaitOnRXNEFlagUntilTimeout+0xd4>)
 800541a:	400b      	ands	r3, r1
 800541c:	6053      	str	r3, [r2, #4]

        hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800541e:	68fb      	ldr	r3, [r7, #12]
 8005420:	2200      	movs	r2, #0
 8005422:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8005424:	68fb      	ldr	r3, [r7, #12]
 8005426:	2220      	movs	r2, #32
 8005428:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800542c:	68fb      	ldr	r3, [r7, #12]
 800542e:	2200      	movs	r2, #0
 8005430:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005434:	68fb      	ldr	r3, [r7, #12]
 8005436:	2200      	movs	r2, #0
 8005438:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 800543c:	2301      	movs	r3, #1
 800543e:	e022      	b.n	8005486 <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
      }
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005440:	f7fc ffb0 	bl	80023a4 <HAL_GetTick>
 8005444:	4602      	mov	r2, r0
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	1ad3      	subs	r3, r2, r3
 800544a:	68ba      	ldr	r2, [r7, #8]
 800544c:	429a      	cmp	r2, r3
 800544e:	d302      	bcc.n	8005456 <I2C_WaitOnRXNEFlagUntilTimeout+0x9a>
 8005450:	68bb      	ldr	r3, [r7, #8]
 8005452:	2b00      	cmp	r3, #0
 8005454:	d10f      	bne.n	8005476 <I2C_WaitOnRXNEFlagUntilTimeout+0xba>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8005456:	68fb      	ldr	r3, [r7, #12]
 8005458:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800545a:	f043 0220 	orr.w	r2, r3, #32
 800545e:	68fb      	ldr	r3, [r7, #12]
 8005460:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8005462:	68fb      	ldr	r3, [r7, #12]
 8005464:	2220      	movs	r2, #32
 8005466:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800546a:	68fb      	ldr	r3, [r7, #12]
 800546c:	2200      	movs	r2, #0
 800546e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8005472:	2301      	movs	r3, #1
 8005474:	e007      	b.n	8005486 <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8005476:	68fb      	ldr	r3, [r7, #12]
 8005478:	681b      	ldr	r3, [r3, #0]
 800547a:	699b      	ldr	r3, [r3, #24]
 800547c:	f003 0304 	and.w	r3, r3, #4
 8005480:	2b04      	cmp	r3, #4
 8005482:	d1a2      	bne.n	80053ca <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8005484:	2300      	movs	r3, #0
}
 8005486:	4618      	mov	r0, r3
 8005488:	3710      	adds	r7, #16
 800548a:	46bd      	mov	sp, r7
 800548c:	bd80      	pop	{r7, pc}
 800548e:	bf00      	nop
 8005490:	fe00e800 	.word	0xfe00e800

08005494 <I2C_IsAcknowledgeFailed>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005494:	b580      	push	{r7, lr}
 8005496:	b084      	sub	sp, #16
 8005498:	af00      	add	r7, sp, #0
 800549a:	60f8      	str	r0, [r7, #12]
 800549c:	60b9      	str	r1, [r7, #8]
 800549e:	607a      	str	r2, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80054a0:	68fb      	ldr	r3, [r7, #12]
 80054a2:	681b      	ldr	r3, [r3, #0]
 80054a4:	699b      	ldr	r3, [r3, #24]
 80054a6:	f003 0310 	and.w	r3, r3, #16
 80054aa:	2b10      	cmp	r3, #16
 80054ac:	d151      	bne.n	8005552 <I2C_IsAcknowledgeFailed+0xbe>
  {
    /* Wait until STOP Flag is reset */
    /* AutoEnd should be initiate after AF */
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80054ae:	e022      	b.n	80054f6 <I2C_IsAcknowledgeFailed+0x62>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 80054b0:	68bb      	ldr	r3, [r7, #8]
 80054b2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80054b6:	d01e      	beq.n	80054f6 <I2C_IsAcknowledgeFailed+0x62>
      {
        if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80054b8:	f7fc ff74 	bl	80023a4 <HAL_GetTick>
 80054bc:	4602      	mov	r2, r0
 80054be:	687b      	ldr	r3, [r7, #4]
 80054c0:	1ad3      	subs	r3, r2, r3
 80054c2:	68ba      	ldr	r2, [r7, #8]
 80054c4:	429a      	cmp	r2, r3
 80054c6:	d302      	bcc.n	80054ce <I2C_IsAcknowledgeFailed+0x3a>
 80054c8:	68bb      	ldr	r3, [r7, #8]
 80054ca:	2b00      	cmp	r3, #0
 80054cc:	d113      	bne.n	80054f6 <I2C_IsAcknowledgeFailed+0x62>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80054ce:	68fb      	ldr	r3, [r7, #12]
 80054d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80054d2:	f043 0220 	orr.w	r2, r3, #32
 80054d6:	68fb      	ldr	r3, [r7, #12]
 80054d8:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 80054da:	68fb      	ldr	r3, [r7, #12]
 80054dc:	2220      	movs	r2, #32
 80054de:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80054e2:	68fb      	ldr	r3, [r7, #12]
 80054e4:	2200      	movs	r2, #0
 80054e6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80054ea:	68fb      	ldr	r3, [r7, #12]
 80054ec:	2200      	movs	r2, #0
 80054ee:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 80054f2:	2301      	movs	r3, #1
 80054f4:	e02e      	b.n	8005554 <I2C_IsAcknowledgeFailed+0xc0>
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80054f6:	68fb      	ldr	r3, [r7, #12]
 80054f8:	681b      	ldr	r3, [r3, #0]
 80054fa:	699b      	ldr	r3, [r3, #24]
 80054fc:	f003 0320 	and.w	r3, r3, #32
 8005500:	2b20      	cmp	r3, #32
 8005502:	d1d5      	bne.n	80054b0 <I2C_IsAcknowledgeFailed+0x1c>
        }
      }
    }

    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005504:	68fb      	ldr	r3, [r7, #12]
 8005506:	681b      	ldr	r3, [r3, #0]
 8005508:	2210      	movs	r2, #16
 800550a:	61da      	str	r2, [r3, #28]

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800550c:	68fb      	ldr	r3, [r7, #12]
 800550e:	681b      	ldr	r3, [r3, #0]
 8005510:	2220      	movs	r2, #32
 8005512:	61da      	str	r2, [r3, #28]

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8005514:	68f8      	ldr	r0, [r7, #12]
 8005516:	f7ff fe71 	bl	80051fc <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800551a:	68fb      	ldr	r3, [r7, #12]
 800551c:	681b      	ldr	r3, [r3, #0]
 800551e:	6859      	ldr	r1, [r3, #4]
 8005520:	68fb      	ldr	r3, [r7, #12]
 8005522:	681a      	ldr	r2, [r3, #0]
 8005524:	4b0d      	ldr	r3, [pc, #52]	; (800555c <I2C_IsAcknowledgeFailed+0xc8>)
 8005526:	400b      	ands	r3, r1
 8005528:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800552a:	68fb      	ldr	r3, [r7, #12]
 800552c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800552e:	f043 0204 	orr.w	r2, r3, #4
 8005532:	68fb      	ldr	r3, [r7, #12]
 8005534:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8005536:	68fb      	ldr	r3, [r7, #12]
 8005538:	2220      	movs	r2, #32
 800553a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800553e:	68fb      	ldr	r3, [r7, #12]
 8005540:	2200      	movs	r2, #0
 8005542:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005546:	68fb      	ldr	r3, [r7, #12]
 8005548:	2200      	movs	r2, #0
 800554a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_ERROR;
 800554e:	2301      	movs	r3, #1
 8005550:	e000      	b.n	8005554 <I2C_IsAcknowledgeFailed+0xc0>
  }
  return HAL_OK;
 8005552:	2300      	movs	r3, #0
}
 8005554:	4618      	mov	r0, r3
 8005556:	3710      	adds	r7, #16
 8005558:	46bd      	mov	sp, r7
 800555a:	bd80      	pop	{r7, pc}
 800555c:	fe00e800 	.word	0xfe00e800

08005560 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8005560:	b480      	push	{r7}
 8005562:	b085      	sub	sp, #20
 8005564:	af00      	add	r7, sp, #0
 8005566:	60f8      	str	r0, [r7, #12]
 8005568:	607b      	str	r3, [r7, #4]
 800556a:	460b      	mov	r3, r1
 800556c:	817b      	strh	r3, [r7, #10]
 800556e:	4613      	mov	r3, r2
 8005570:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2,
 8005572:	68fb      	ldr	r3, [r7, #12]
 8005574:	681b      	ldr	r3, [r3, #0]
 8005576:	685a      	ldr	r2, [r3, #4]
 8005578:	69bb      	ldr	r3, [r7, #24]
 800557a:	0d5b      	lsrs	r3, r3, #21
 800557c:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8005580:	4b0d      	ldr	r3, [pc, #52]	; (80055b8 <I2C_TransferConfig+0x58>)
 8005582:	430b      	orrs	r3, r1
 8005584:	43db      	mvns	r3, r3
 8005586:	ea02 0103 	and.w	r1, r2, r3
 800558a:	897b      	ldrh	r3, [r7, #10]
 800558c:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8005590:	7a7b      	ldrb	r3, [r7, #9]
 8005592:	041b      	lsls	r3, r3, #16
 8005594:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8005598:	431a      	orrs	r2, r3
 800559a:	687b      	ldr	r3, [r7, #4]
 800559c:	431a      	orrs	r2, r3
 800559e:	69bb      	ldr	r3, [r7, #24]
 80055a0:	431a      	orrs	r2, r3
 80055a2:	68fb      	ldr	r3, [r7, #12]
 80055a4:	681b      	ldr	r3, [r3, #0]
 80055a6:	430a      	orrs	r2, r1
 80055a8:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
             (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) |
                        (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | (uint32_t)Mode | (uint32_t)Request));
}
 80055aa:	bf00      	nop
 80055ac:	3714      	adds	r7, #20
 80055ae:	46bd      	mov	sp, r7
 80055b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055b4:	4770      	bx	lr
 80055b6:	bf00      	nop
 80055b8:	03ff63ff 	.word	0x03ff63ff

080055bc <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80055bc:	b480      	push	{r7}
 80055be:	b083      	sub	sp, #12
 80055c0:	af00      	add	r7, sp, #0
 80055c2:	6078      	str	r0, [r7, #4]
 80055c4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80055c6:	687b      	ldr	r3, [r7, #4]
 80055c8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80055cc:	b2db      	uxtb	r3, r3
 80055ce:	2b20      	cmp	r3, #32
 80055d0:	d138      	bne.n	8005644 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80055d2:	687b      	ldr	r3, [r7, #4]
 80055d4:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80055d8:	2b01      	cmp	r3, #1
 80055da:	d101      	bne.n	80055e0 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80055dc:	2302      	movs	r3, #2
 80055de:	e032      	b.n	8005646 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	2201      	movs	r2, #1
 80055e4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80055e8:	687b      	ldr	r3, [r7, #4]
 80055ea:	2224      	movs	r2, #36	; 0x24
 80055ec:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	681b      	ldr	r3, [r3, #0]
 80055f4:	681a      	ldr	r2, [r3, #0]
 80055f6:	687b      	ldr	r3, [r7, #4]
 80055f8:	681b      	ldr	r3, [r3, #0]
 80055fa:	f022 0201 	bic.w	r2, r2, #1
 80055fe:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	681b      	ldr	r3, [r3, #0]
 8005604:	681a      	ldr	r2, [r3, #0]
 8005606:	687b      	ldr	r3, [r7, #4]
 8005608:	681b      	ldr	r3, [r3, #0]
 800560a:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800560e:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8005610:	687b      	ldr	r3, [r7, #4]
 8005612:	681b      	ldr	r3, [r3, #0]
 8005614:	6819      	ldr	r1, [r3, #0]
 8005616:	687b      	ldr	r3, [r7, #4]
 8005618:	681b      	ldr	r3, [r3, #0]
 800561a:	683a      	ldr	r2, [r7, #0]
 800561c:	430a      	orrs	r2, r1
 800561e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8005620:	687b      	ldr	r3, [r7, #4]
 8005622:	681b      	ldr	r3, [r3, #0]
 8005624:	681a      	ldr	r2, [r3, #0]
 8005626:	687b      	ldr	r3, [r7, #4]
 8005628:	681b      	ldr	r3, [r3, #0]
 800562a:	f042 0201 	orr.w	r2, r2, #1
 800562e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	2220      	movs	r2, #32
 8005634:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005638:	687b      	ldr	r3, [r7, #4]
 800563a:	2200      	movs	r2, #0
 800563c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8005640:	2300      	movs	r3, #0
 8005642:	e000      	b.n	8005646 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8005644:	2302      	movs	r3, #2
  }
}
 8005646:	4618      	mov	r0, r3
 8005648:	370c      	adds	r7, #12
 800564a:	46bd      	mov	sp, r7
 800564c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005650:	4770      	bx	lr

08005652 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8005652:	b480      	push	{r7}
 8005654:	b085      	sub	sp, #20
 8005656:	af00      	add	r7, sp, #0
 8005658:	6078      	str	r0, [r7, #4]
 800565a:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800565c:	687b      	ldr	r3, [r7, #4]
 800565e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005662:	b2db      	uxtb	r3, r3
 8005664:	2b20      	cmp	r3, #32
 8005666:	d139      	bne.n	80056dc <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005668:	687b      	ldr	r3, [r7, #4]
 800566a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800566e:	2b01      	cmp	r3, #1
 8005670:	d101      	bne.n	8005676 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8005672:	2302      	movs	r3, #2
 8005674:	e033      	b.n	80056de <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8005676:	687b      	ldr	r3, [r7, #4]
 8005678:	2201      	movs	r2, #1
 800567a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800567e:	687b      	ldr	r3, [r7, #4]
 8005680:	2224      	movs	r2, #36	; 0x24
 8005682:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8005686:	687b      	ldr	r3, [r7, #4]
 8005688:	681b      	ldr	r3, [r3, #0]
 800568a:	681a      	ldr	r2, [r3, #0]
 800568c:	687b      	ldr	r3, [r7, #4]
 800568e:	681b      	ldr	r3, [r3, #0]
 8005690:	f022 0201 	bic.w	r2, r2, #1
 8005694:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8005696:	687b      	ldr	r3, [r7, #4]
 8005698:	681b      	ldr	r3, [r3, #0]
 800569a:	681b      	ldr	r3, [r3, #0]
 800569c:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800569e:	68fb      	ldr	r3, [r7, #12]
 80056a0:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80056a4:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80056a6:	683b      	ldr	r3, [r7, #0]
 80056a8:	021b      	lsls	r3, r3, #8
 80056aa:	68fa      	ldr	r2, [r7, #12]
 80056ac:	4313      	orrs	r3, r2
 80056ae:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80056b0:	687b      	ldr	r3, [r7, #4]
 80056b2:	681b      	ldr	r3, [r3, #0]
 80056b4:	68fa      	ldr	r2, [r7, #12]
 80056b6:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80056b8:	687b      	ldr	r3, [r7, #4]
 80056ba:	681b      	ldr	r3, [r3, #0]
 80056bc:	681a      	ldr	r2, [r3, #0]
 80056be:	687b      	ldr	r3, [r7, #4]
 80056c0:	681b      	ldr	r3, [r3, #0]
 80056c2:	f042 0201 	orr.w	r2, r2, #1
 80056c6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80056c8:	687b      	ldr	r3, [r7, #4]
 80056ca:	2220      	movs	r2, #32
 80056cc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80056d0:	687b      	ldr	r3, [r7, #4]
 80056d2:	2200      	movs	r2, #0
 80056d4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80056d8:	2300      	movs	r3, #0
 80056da:	e000      	b.n	80056de <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80056dc:	2302      	movs	r3, #2
  }
}
 80056de:	4618      	mov	r0, r3
 80056e0:	3714      	adds	r7, #20
 80056e2:	46bd      	mov	sp, r7
 80056e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056e8:	4770      	bx	lr
	...

080056ec <HAL_I2S_Init>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Init(I2S_HandleTypeDef *hi2s)
{
 80056ec:	b580      	push	{r7, lr}
 80056ee:	b088      	sub	sp, #32
 80056f0:	af00      	add	r7, sp, #0
 80056f2:	6078      	str	r0, [r7, #4]
  uint32_t tmp;
  uint32_t i2sclk;
  uint32_t ispcm;

  /* Check the I2S handle allocation */
  if (hi2s == NULL)
 80056f4:	687b      	ldr	r3, [r7, #4]
 80056f6:	2b00      	cmp	r3, #0
 80056f8:	d101      	bne.n	80056fe <HAL_I2S_Init+0x12>
  {
    return HAL_ERROR;
 80056fa:	2301      	movs	r3, #1
 80056fc:	e10b      	b.n	8005916 <HAL_I2S_Init+0x22a>
  assert_param(IS_I2S_FIRST_BIT(hi2s->Init.FirstBit));
  assert_param(IS_I2S_WS_INVERSION(hi2s->Init.WSInversion));
  assert_param(IS_I2S_DATA_24BIT_ALIGNMENT(hi2s->Init.Data24BitAlignment));
  assert_param(IS_I2S_MASTER_KEEP_IO_STATE(hi2s->Init.MasterKeepIOState));

  if (hi2s->State == HAL_I2S_STATE_RESET)
 80056fe:	687b      	ldr	r3, [r7, #4]
 8005700:	f893 304d 	ldrb.w	r3, [r3, #77]	; 0x4d
 8005704:	b2db      	uxtb	r3, r3
 8005706:	2b00      	cmp	r3, #0
 8005708:	d106      	bne.n	8005718 <HAL_I2S_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2s->Lock = HAL_UNLOCKED;
 800570a:	687b      	ldr	r3, [r7, #4]
 800570c:	2200      	movs	r2, #0
 800570e:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hi2s->MspInitCallback(hi2s);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2S_MspInit(hi2s);
 8005712:	6878      	ldr	r0, [r7, #4]
 8005714:	f7fb ffa2 	bl	800165c <HAL_I2S_MspInit>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }

  hi2s->State = HAL_I2S_STATE_BUSY;
 8005718:	687b      	ldr	r3, [r7, #4]
 800571a:	2202      	movs	r2, #2
 800571c:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d

  /* Disable the selected I2S peripheral */
  if ((hi2s->Instance->CR1 & SPI_CR1_SPE) == SPI_CR1_SPE)
 8005720:	687b      	ldr	r3, [r7, #4]
 8005722:	681b      	ldr	r3, [r3, #0]
 8005724:	681b      	ldr	r3, [r3, #0]
 8005726:	f003 0301 	and.w	r3, r3, #1
 800572a:	2b01      	cmp	r3, #1
 800572c:	d107      	bne.n	800573e <HAL_I2S_Init+0x52>
  {
    /* Disable I2S peripheral */
    __HAL_I2S_DISABLE(hi2s);
 800572e:	687b      	ldr	r3, [r7, #4]
 8005730:	681b      	ldr	r3, [r3, #0]
 8005732:	681a      	ldr	r2, [r3, #0]
 8005734:	687b      	ldr	r3, [r7, #4]
 8005736:	681b      	ldr	r3, [r3, #0]
 8005738:	f022 0201 	bic.w	r2, r2, #1
 800573c:	601a      	str	r2, [r3, #0]
  }

  /* Clear I2S configuration register */
  CLEAR_REG(hi2s->Instance->I2SCFGR);
 800573e:	687b      	ldr	r3, [r7, #4]
 8005740:	681b      	ldr	r3, [r3, #0]
 8005742:	2200      	movs	r2, #0
 8005744:	651a      	str	r2, [r3, #80]	; 0x50

  if (IS_I2S_MASTER(hi2s->Init.Mode))
 8005746:	687b      	ldr	r3, [r7, #4]
 8005748:	685b      	ldr	r3, [r3, #4]
 800574a:	2b04      	cmp	r3, #4
 800574c:	d008      	beq.n	8005760 <HAL_I2S_Init+0x74>
 800574e:	687b      	ldr	r3, [r7, #4]
 8005750:	685b      	ldr	r3, [r3, #4]
 8005752:	2b06      	cmp	r3, #6
 8005754:	d004      	beq.n	8005760 <HAL_I2S_Init+0x74>
 8005756:	687b      	ldr	r3, [r7, #4]
 8005758:	685b      	ldr	r3, [r3, #4]
 800575a:	2b0a      	cmp	r3, #10
 800575c:	f040 8085 	bne.w	800586a <HAL_I2S_Init+0x17e>
  {
    /*------------------------- I2SDIV and ODD Calculation ---------------------*/
    /* If the requested audio frequency is not the default, compute the prescaler */
    if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 8005760:	687b      	ldr	r3, [r7, #4]
 8005762:	695b      	ldr	r3, [r3, #20]
 8005764:	2b02      	cmp	r3, #2
 8005766:	d058      	beq.n	800581a <HAL_I2S_Init+0x12e>
    {
      /* Check the frame length (For the Prescaler computing) ********************/
      if (hi2s->Init.DataFormat != I2S_DATAFORMAT_16B)
 8005768:	687b      	ldr	r3, [r7, #4]
 800576a:	68db      	ldr	r3, [r3, #12]
 800576c:	2b00      	cmp	r3, #0
 800576e:	d002      	beq.n	8005776 <HAL_I2S_Init+0x8a>
      {
        /* Channel length is 32 bits */
        packetlength = 2UL;
 8005770:	2302      	movs	r3, #2
 8005772:	617b      	str	r3, [r7, #20]
 8005774:	e001      	b.n	800577a <HAL_I2S_Init+0x8e>
      }
      else
      {
        /* Channel length is 16 bits */
        packetlength = 1UL;
 8005776:	2301      	movs	r3, #1
 8005778:	617b      	str	r3, [r7, #20]
      }

      /* Check if PCM standard is used */
      if ((hi2s->Init.Standard == I2S_STANDARD_PCM_SHORT) ||
 800577a:	687b      	ldr	r3, [r7, #4]
 800577c:	689b      	ldr	r3, [r3, #8]
 800577e:	2b30      	cmp	r3, #48	; 0x30
 8005780:	d003      	beq.n	800578a <HAL_I2S_Init+0x9e>
          (hi2s->Init.Standard == I2S_STANDARD_PCM_LONG))
 8005782:	687b      	ldr	r3, [r7, #4]
 8005784:	689b      	ldr	r3, [r3, #8]
      if ((hi2s->Init.Standard == I2S_STANDARD_PCM_SHORT) ||
 8005786:	2bb0      	cmp	r3, #176	; 0xb0
 8005788:	d102      	bne.n	8005790 <HAL_I2S_Init+0xa4>
      {
        ispcm = 1UL;
 800578a:	2301      	movs	r3, #1
 800578c:	60fb      	str	r3, [r7, #12]
 800578e:	e001      	b.n	8005794 <HAL_I2S_Init+0xa8>
      }
      else
      {
        ispcm = 0UL;
 8005790:	2300      	movs	r3, #0
 8005792:	60fb      	str	r3, [r7, #12]
        /* SPI1,SPI2 and SPI3 share the same source clock */
        i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SPI123);
      }
#else
      /* SPI1,SPI2 and SPI3 share the same source clock */
      i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SPI123);
 8005794:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8005798:	f003 f9b2 	bl	8008b00 <HAL_RCCEx_GetPeriphCLKFreq>
 800579c:	60b8      	str	r0, [r7, #8]
#endif

      /* Compute the Real divider depending on the MCLK output state, with a floating point */
      if (hi2s->Init.MCLKOutput == I2S_MCLKOUTPUT_ENABLE)
 800579e:	687b      	ldr	r3, [r7, #4]
 80057a0:	691b      	ldr	r3, [r3, #16]
 80057a2:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80057a6:	d113      	bne.n	80057d0 <HAL_I2S_Init+0xe4>
      {
        /* MCLK output is enabled */
        tmp = (uint32_t)((((i2sclk / (256UL >> ispcm)) * 10UL) / hi2s->Init.AudioFreq) + 5UL);
 80057a8:	f44f 7280 	mov.w	r2, #256	; 0x100
 80057ac:	68fb      	ldr	r3, [r7, #12]
 80057ae:	fa22 f303 	lsr.w	r3, r2, r3
 80057b2:	68ba      	ldr	r2, [r7, #8]
 80057b4:	fbb2 f2f3 	udiv	r2, r2, r3
 80057b8:	4613      	mov	r3, r2
 80057ba:	009b      	lsls	r3, r3, #2
 80057bc:	4413      	add	r3, r2
 80057be:	005b      	lsls	r3, r3, #1
 80057c0:	461a      	mov	r2, r3
 80057c2:	687b      	ldr	r3, [r7, #4]
 80057c4:	695b      	ldr	r3, [r3, #20]
 80057c6:	fbb2 f3f3 	udiv	r3, r2, r3
 80057ca:	3305      	adds	r3, #5
 80057cc:	613b      	str	r3, [r7, #16]
 80057ce:	e014      	b.n	80057fa <HAL_I2S_Init+0x10e>
      }
      else
      {
        /* MCLK output is disabled */
        tmp = (uint32_t)((((i2sclk / ((32UL >> ispcm) * packetlength)) * 10UL) / hi2s->Init.AudioFreq) + 5UL);
 80057d0:	2220      	movs	r2, #32
 80057d2:	68fb      	ldr	r3, [r7, #12]
 80057d4:	fa22 f303 	lsr.w	r3, r2, r3
 80057d8:	697a      	ldr	r2, [r7, #20]
 80057da:	fb02 f303 	mul.w	r3, r2, r3
 80057de:	68ba      	ldr	r2, [r7, #8]
 80057e0:	fbb2 f2f3 	udiv	r2, r2, r3
 80057e4:	4613      	mov	r3, r2
 80057e6:	009b      	lsls	r3, r3, #2
 80057e8:	4413      	add	r3, r2
 80057ea:	005b      	lsls	r3, r3, #1
 80057ec:	461a      	mov	r2, r3
 80057ee:	687b      	ldr	r3, [r7, #4]
 80057f0:	695b      	ldr	r3, [r3, #20]
 80057f2:	fbb2 f3f3 	udiv	r3, r2, r3
 80057f6:	3305      	adds	r3, #5
 80057f8:	613b      	str	r3, [r7, #16]
      }

      /* Remove the flatting point */
      tmp = tmp / 10UL;
 80057fa:	693b      	ldr	r3, [r7, #16]
 80057fc:	4a48      	ldr	r2, [pc, #288]	; (8005920 <HAL_I2S_Init+0x234>)
 80057fe:	fba2 2303 	umull	r2, r3, r2, r3
 8005802:	08db      	lsrs	r3, r3, #3
 8005804:	613b      	str	r3, [r7, #16]

      /* Check the parity of the divider */
      i2sodd = (uint32_t)(tmp & (uint32_t)1UL);
 8005806:	693b      	ldr	r3, [r7, #16]
 8005808:	f003 0301 	and.w	r3, r3, #1
 800580c:	61bb      	str	r3, [r7, #24]

      /* Compute the i2sdiv prescaler */
      i2sdiv = (uint32_t)((tmp - i2sodd) / 2UL);
 800580e:	693a      	ldr	r2, [r7, #16]
 8005810:	69bb      	ldr	r3, [r7, #24]
 8005812:	1ad3      	subs	r3, r2, r3
 8005814:	085b      	lsrs	r3, r3, #1
 8005816:	61fb      	str	r3, [r7, #28]
 8005818:	e003      	b.n	8005822 <HAL_I2S_Init+0x136>
    }
    else
    {
      /* Set the default values */
      i2sdiv = 2UL;
 800581a:	2302      	movs	r3, #2
 800581c:	61fb      	str	r3, [r7, #28]
      i2sodd = 0UL;
 800581e:	2300      	movs	r3, #0
 8005820:	61bb      	str	r3, [r7, #24]
    }

    /* Test if the obtain values are forbidden or out of range */
    if (((i2sodd == 1UL) && (i2sdiv == 1UL)) || (i2sdiv > 0xFFUL))
 8005822:	69bb      	ldr	r3, [r7, #24]
 8005824:	2b01      	cmp	r3, #1
 8005826:	d102      	bne.n	800582e <HAL_I2S_Init+0x142>
 8005828:	69fb      	ldr	r3, [r7, #28]
 800582a:	2b01      	cmp	r3, #1
 800582c:	d002      	beq.n	8005834 <HAL_I2S_Init+0x148>
 800582e:	69fb      	ldr	r3, [r7, #28]
 8005830:	2bff      	cmp	r3, #255	; 0xff
 8005832:	d907      	bls.n	8005844 <HAL_I2S_Init+0x158>
    {
      /* Set the error code */
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_PRESCALER);
 8005834:	687b      	ldr	r3, [r7, #4]
 8005836:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005838:	f043 0210 	orr.w	r2, r3, #16
 800583c:	687b      	ldr	r3, [r7, #4]
 800583e:	651a      	str	r2, [r3, #80]	; 0x50
      return  HAL_ERROR;
 8005840:	2301      	movs	r3, #1
 8005842:	e068      	b.n	8005916 <HAL_I2S_Init+0x22a>
    }

    /* Force i2smod to 1 just to be sure that (2xi2sdiv + i2sodd) is always higher than 0 */
    if (i2sdiv == 0UL)
 8005844:	69fb      	ldr	r3, [r7, #28]
 8005846:	2b00      	cmp	r3, #0
 8005848:	d101      	bne.n	800584e <HAL_I2S_Init+0x162>
    {
      i2sodd = 1UL;
 800584a:	2301      	movs	r3, #1
 800584c:	61bb      	str	r3, [r7, #24]
    }

    MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_I2SDIV                 | SPI_I2SCFGR_ODD),
 800584e:	687b      	ldr	r3, [r7, #4]
 8005850:	681b      	ldr	r3, [r3, #0]
 8005852:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8005854:	4b33      	ldr	r3, [pc, #204]	; (8005924 <HAL_I2S_Init+0x238>)
 8005856:	4013      	ands	r3, r2
 8005858:	69fa      	ldr	r2, [r7, #28]
 800585a:	0411      	lsls	r1, r2, #16
 800585c:	69ba      	ldr	r2, [r7, #24]
 800585e:	0612      	lsls	r2, r2, #24
 8005860:	4311      	orrs	r1, r2
 8005862:	687a      	ldr	r2, [r7, #4]
 8005864:	6812      	ldr	r2, [r2, #0]
 8005866:	430b      	orrs	r3, r1
 8005868:	6513      	str	r3, [r2, #80]	; 0x50
  }

  /*-------------------------- I2Sx I2SCFGR Configuration --------------------*/
  /* Configure I2SMOD, I2SCFG, I2SSTD, PCMSYNC, DATLEN ,CHLEN ,CKPOL, WSINV, DATAFMT, I2SDIV, ODD and MCKOE bits bits */
  /* And configure the I2S with the I2S_InitStruct values */
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_I2SMOD   | SPI_I2SCFGR_I2SCFG     | \
 800586a:	687b      	ldr	r3, [r7, #4]
 800586c:	681b      	ldr	r3, [r3, #0]
 800586e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8005870:	4b2d      	ldr	r3, [pc, #180]	; (8005928 <HAL_I2S_Init+0x23c>)
 8005872:	4013      	ands	r3, r2
 8005874:	687a      	ldr	r2, [r7, #4]
 8005876:	6851      	ldr	r1, [r2, #4]
 8005878:	687a      	ldr	r2, [r7, #4]
 800587a:	6892      	ldr	r2, [r2, #8]
 800587c:	4311      	orrs	r1, r2
 800587e:	687a      	ldr	r2, [r7, #4]
 8005880:	68d2      	ldr	r2, [r2, #12]
 8005882:	4311      	orrs	r1, r2
 8005884:	687a      	ldr	r2, [r7, #4]
 8005886:	6992      	ldr	r2, [r2, #24]
 8005888:	4311      	orrs	r1, r2
 800588a:	687a      	ldr	r2, [r7, #4]
 800588c:	6a12      	ldr	r2, [r2, #32]
 800588e:	4311      	orrs	r1, r2
 8005890:	687a      	ldr	r2, [r7, #4]
 8005892:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8005894:	4311      	orrs	r1, r2
 8005896:	687a      	ldr	r2, [r7, #4]
 8005898:	6912      	ldr	r2, [r2, #16]
 800589a:	430a      	orrs	r2, r1
 800589c:	431a      	orrs	r2, r3
 800589e:	687b      	ldr	r3, [r7, #4]
 80058a0:	681b      	ldr	r3, [r3, #0]
 80058a2:	f042 0201 	orr.w	r2, r2, #1
 80058a6:	651a      	str	r2, [r3, #80]	; 0x50
                                      (SPI_I2SCFGR_I2SMOD   | hi2s->Init.Mode        | \
                                       hi2s->Init.Standard  | hi2s->Init.DataFormat  | \
                                       hi2s->Init.CPOL      | hi2s->Init.WSInversion | \
                                       hi2s->Init.Data24BitAlignment | hi2s->Init.MCLKOutput));
  /*Clear status register*/
  WRITE_REG(hi2s->Instance->IFCR, 0x0FF8);
 80058a8:	687b      	ldr	r3, [r7, #4]
 80058aa:	681b      	ldr	r3, [r3, #0]
 80058ac:	f640 72f8 	movw	r2, #4088	; 0xff8
 80058b0:	619a      	str	r2, [r3, #24]

  /*---------------------------- I2Sx CFG2 Configuration ----------------------*/

  /* Unlock the AF configuration to configure CFG2 register*/
  CLEAR_BIT(hi2s->Instance->CR1, SPI_CR1_IOLOCK);
 80058b2:	687b      	ldr	r3, [r7, #4]
 80058b4:	681b      	ldr	r3, [r3, #0]
 80058b6:	681a      	ldr	r2, [r3, #0]
 80058b8:	687b      	ldr	r3, [r7, #4]
 80058ba:	681b      	ldr	r3, [r3, #0]
 80058bc:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 80058c0:	601a      	str	r2, [r3, #0]

  MODIFY_REG(hi2s->Instance->CFG2, SPI_CFG2_LSBFRST, hi2s->Init.FirstBit);
 80058c2:	687b      	ldr	r3, [r7, #4]
 80058c4:	681b      	ldr	r3, [r3, #0]
 80058c6:	68db      	ldr	r3, [r3, #12]
 80058c8:	f423 0100 	bic.w	r1, r3, #8388608	; 0x800000
 80058cc:	687b      	ldr	r3, [r7, #4]
 80058ce:	69da      	ldr	r2, [r3, #28]
 80058d0:	687b      	ldr	r3, [r7, #4]
 80058d2:	681b      	ldr	r3, [r3, #0]
 80058d4:	430a      	orrs	r2, r1
 80058d6:	60da      	str	r2, [r3, #12]

  /* Insure that AFCNTR is managed only by Master */
  if (IS_I2S_MASTER(hi2s->Init.Mode))
 80058d8:	687b      	ldr	r3, [r7, #4]
 80058da:	685b      	ldr	r3, [r3, #4]
 80058dc:	2b04      	cmp	r3, #4
 80058de:	d007      	beq.n	80058f0 <HAL_I2S_Init+0x204>
 80058e0:	687b      	ldr	r3, [r7, #4]
 80058e2:	685b      	ldr	r3, [r3, #4]
 80058e4:	2b06      	cmp	r3, #6
 80058e6:	d003      	beq.n	80058f0 <HAL_I2S_Init+0x204>
 80058e8:	687b      	ldr	r3, [r7, #4]
 80058ea:	685b      	ldr	r3, [r3, #4]
 80058ec:	2b0a      	cmp	r3, #10
 80058ee:	d10a      	bne.n	8005906 <HAL_I2S_Init+0x21a>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hi2s->Instance->CFG2, SPI_CFG2_AFCNTR, (hi2s->Init.MasterKeepIOState));
 80058f0:	687b      	ldr	r3, [r7, #4]
 80058f2:	681b      	ldr	r3, [r3, #0]
 80058f4:	68db      	ldr	r3, [r3, #12]
 80058f6:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 80058fa:	687b      	ldr	r3, [r7, #4]
 80058fc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80058fe:	687b      	ldr	r3, [r7, #4]
 8005900:	681b      	ldr	r3, [r3, #0]
 8005902:	430a      	orrs	r2, r1
 8005904:	60da      	str	r2, [r3, #12]
  }

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 8005906:	687b      	ldr	r3, [r7, #4]
 8005908:	2200      	movs	r2, #0
 800590a:	651a      	str	r2, [r3, #80]	; 0x50
  hi2s->State     = HAL_I2S_STATE_READY;
 800590c:	687b      	ldr	r3, [r7, #4]
 800590e:	2201      	movs	r2, #1
 8005910:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d

  return HAL_OK;
 8005914:	2300      	movs	r3, #0
}
 8005916:	4618      	mov	r0, r3
 8005918:	3720      	adds	r7, #32
 800591a:	46bd      	mov	sp, r7
 800591c:	bd80      	pop	{r7, pc}
 800591e:	bf00      	nop
 8005920:	cccccccd 	.word	0xcccccccd
 8005924:	fe00ffff 	.word	0xfe00ffff
 8005928:	fdff9040 	.word	0xfdff9040

0800592c <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 800592c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800592e:	b08f      	sub	sp, #60	; 0x3c
 8005930:	af0a      	add	r7, sp, #40	; 0x28
 8005932:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8005934:	687b      	ldr	r3, [r7, #4]
 8005936:	2b00      	cmp	r3, #0
 8005938:	d101      	bne.n	800593e <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 800593a:	2301      	movs	r3, #1
 800593c:	e116      	b.n	8005b6c <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 800593e:	687b      	ldr	r3, [r7, #4]
 8005940:	681b      	ldr	r3, [r3, #0]
 8005942:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8005944:	687b      	ldr	r3, [r7, #4]
 8005946:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 800594a:	b2db      	uxtb	r3, r3
 800594c:	2b00      	cmp	r3, #0
 800594e:	d106      	bne.n	800595e <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8005950:	687b      	ldr	r3, [r7, #4]
 8005952:	2200      	movs	r2, #0
 8005954:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8005958:	6878      	ldr	r0, [r7, #4]
 800595a:	f00c f9a7 	bl	8011cac <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 800595e:	687b      	ldr	r3, [r7, #4]
 8005960:	2203      	movs	r2, #3
 8005962:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8005966:	68bb      	ldr	r3, [r7, #8]
 8005968:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800596a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800596e:	2b00      	cmp	r3, #0
 8005970:	d102      	bne.n	8005978 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8005972:	687b      	ldr	r3, [r7, #4]
 8005974:	2200      	movs	r2, #0
 8005976:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8005978:	687b      	ldr	r3, [r7, #4]
 800597a:	681b      	ldr	r3, [r3, #0]
 800597c:	4618      	mov	r0, r3
 800597e:	f008 ff7e 	bl	800e87e <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8005982:	687b      	ldr	r3, [r7, #4]
 8005984:	681b      	ldr	r3, [r3, #0]
 8005986:	603b      	str	r3, [r7, #0]
 8005988:	687e      	ldr	r6, [r7, #4]
 800598a:	466d      	mov	r5, sp
 800598c:	f106 0410 	add.w	r4, r6, #16
 8005990:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8005992:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8005994:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8005996:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8005998:	e894 0003 	ldmia.w	r4, {r0, r1}
 800599c:	e885 0003 	stmia.w	r5, {r0, r1}
 80059a0:	1d33      	adds	r3, r6, #4
 80059a2:	cb0e      	ldmia	r3, {r1, r2, r3}
 80059a4:	6838      	ldr	r0, [r7, #0]
 80059a6:	f008 fe49 	bl	800e63c <USB_CoreInit>
 80059aa:	4603      	mov	r3, r0
 80059ac:	2b00      	cmp	r3, #0
 80059ae:	d005      	beq.n	80059bc <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80059b0:	687b      	ldr	r3, [r7, #4]
 80059b2:	2202      	movs	r2, #2
 80059b4:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 80059b8:	2301      	movs	r3, #1
 80059ba:	e0d7      	b.n	8005b6c <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 80059bc:	687b      	ldr	r3, [r7, #4]
 80059be:	681b      	ldr	r3, [r3, #0]
 80059c0:	2100      	movs	r1, #0
 80059c2:	4618      	mov	r0, r3
 80059c4:	f008 ff6c 	bl	800e8a0 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80059c8:	2300      	movs	r3, #0
 80059ca:	73fb      	strb	r3, [r7, #15]
 80059cc:	e04a      	b.n	8005a64 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80059ce:	7bfa      	ldrb	r2, [r7, #15]
 80059d0:	6879      	ldr	r1, [r7, #4]
 80059d2:	4613      	mov	r3, r2
 80059d4:	00db      	lsls	r3, r3, #3
 80059d6:	1a9b      	subs	r3, r3, r2
 80059d8:	009b      	lsls	r3, r3, #2
 80059da:	440b      	add	r3, r1
 80059dc:	333d      	adds	r3, #61	; 0x3d
 80059de:	2201      	movs	r2, #1
 80059e0:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80059e2:	7bfa      	ldrb	r2, [r7, #15]
 80059e4:	6879      	ldr	r1, [r7, #4]
 80059e6:	4613      	mov	r3, r2
 80059e8:	00db      	lsls	r3, r3, #3
 80059ea:	1a9b      	subs	r3, r3, r2
 80059ec:	009b      	lsls	r3, r3, #2
 80059ee:	440b      	add	r3, r1
 80059f0:	333c      	adds	r3, #60	; 0x3c
 80059f2:	7bfa      	ldrb	r2, [r7, #15]
 80059f4:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 80059f6:	7bfa      	ldrb	r2, [r7, #15]
 80059f8:	7bfb      	ldrb	r3, [r7, #15]
 80059fa:	b298      	uxth	r0, r3
 80059fc:	6879      	ldr	r1, [r7, #4]
 80059fe:	4613      	mov	r3, r2
 8005a00:	00db      	lsls	r3, r3, #3
 8005a02:	1a9b      	subs	r3, r3, r2
 8005a04:	009b      	lsls	r3, r3, #2
 8005a06:	440b      	add	r3, r1
 8005a08:	3342      	adds	r3, #66	; 0x42
 8005a0a:	4602      	mov	r2, r0
 8005a0c:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8005a0e:	7bfa      	ldrb	r2, [r7, #15]
 8005a10:	6879      	ldr	r1, [r7, #4]
 8005a12:	4613      	mov	r3, r2
 8005a14:	00db      	lsls	r3, r3, #3
 8005a16:	1a9b      	subs	r3, r3, r2
 8005a18:	009b      	lsls	r3, r3, #2
 8005a1a:	440b      	add	r3, r1
 8005a1c:	333f      	adds	r3, #63	; 0x3f
 8005a1e:	2200      	movs	r2, #0
 8005a20:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8005a22:	7bfa      	ldrb	r2, [r7, #15]
 8005a24:	6879      	ldr	r1, [r7, #4]
 8005a26:	4613      	mov	r3, r2
 8005a28:	00db      	lsls	r3, r3, #3
 8005a2a:	1a9b      	subs	r3, r3, r2
 8005a2c:	009b      	lsls	r3, r3, #2
 8005a2e:	440b      	add	r3, r1
 8005a30:	3344      	adds	r3, #68	; 0x44
 8005a32:	2200      	movs	r2, #0
 8005a34:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8005a36:	7bfa      	ldrb	r2, [r7, #15]
 8005a38:	6879      	ldr	r1, [r7, #4]
 8005a3a:	4613      	mov	r3, r2
 8005a3c:	00db      	lsls	r3, r3, #3
 8005a3e:	1a9b      	subs	r3, r3, r2
 8005a40:	009b      	lsls	r3, r3, #2
 8005a42:	440b      	add	r3, r1
 8005a44:	3348      	adds	r3, #72	; 0x48
 8005a46:	2200      	movs	r2, #0
 8005a48:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8005a4a:	7bfa      	ldrb	r2, [r7, #15]
 8005a4c:	6879      	ldr	r1, [r7, #4]
 8005a4e:	4613      	mov	r3, r2
 8005a50:	00db      	lsls	r3, r3, #3
 8005a52:	1a9b      	subs	r3, r3, r2
 8005a54:	009b      	lsls	r3, r3, #2
 8005a56:	440b      	add	r3, r1
 8005a58:	3350      	adds	r3, #80	; 0x50
 8005a5a:	2200      	movs	r2, #0
 8005a5c:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005a5e:	7bfb      	ldrb	r3, [r7, #15]
 8005a60:	3301      	adds	r3, #1
 8005a62:	73fb      	strb	r3, [r7, #15]
 8005a64:	7bfa      	ldrb	r2, [r7, #15]
 8005a66:	687b      	ldr	r3, [r7, #4]
 8005a68:	685b      	ldr	r3, [r3, #4]
 8005a6a:	429a      	cmp	r2, r3
 8005a6c:	d3af      	bcc.n	80059ce <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005a6e:	2300      	movs	r3, #0
 8005a70:	73fb      	strb	r3, [r7, #15]
 8005a72:	e044      	b.n	8005afe <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8005a74:	7bfa      	ldrb	r2, [r7, #15]
 8005a76:	6879      	ldr	r1, [r7, #4]
 8005a78:	4613      	mov	r3, r2
 8005a7a:	00db      	lsls	r3, r3, #3
 8005a7c:	1a9b      	subs	r3, r3, r2
 8005a7e:	009b      	lsls	r3, r3, #2
 8005a80:	440b      	add	r3, r1
 8005a82:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 8005a86:	2200      	movs	r2, #0
 8005a88:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8005a8a:	7bfa      	ldrb	r2, [r7, #15]
 8005a8c:	6879      	ldr	r1, [r7, #4]
 8005a8e:	4613      	mov	r3, r2
 8005a90:	00db      	lsls	r3, r3, #3
 8005a92:	1a9b      	subs	r3, r3, r2
 8005a94:	009b      	lsls	r3, r3, #2
 8005a96:	440b      	add	r3, r1
 8005a98:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 8005a9c:	7bfa      	ldrb	r2, [r7, #15]
 8005a9e:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8005aa0:	7bfa      	ldrb	r2, [r7, #15]
 8005aa2:	6879      	ldr	r1, [r7, #4]
 8005aa4:	4613      	mov	r3, r2
 8005aa6:	00db      	lsls	r3, r3, #3
 8005aa8:	1a9b      	subs	r3, r3, r2
 8005aaa:	009b      	lsls	r3, r3, #2
 8005aac:	440b      	add	r3, r1
 8005aae:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 8005ab2:	2200      	movs	r2, #0
 8005ab4:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8005ab6:	7bfa      	ldrb	r2, [r7, #15]
 8005ab8:	6879      	ldr	r1, [r7, #4]
 8005aba:	4613      	mov	r3, r2
 8005abc:	00db      	lsls	r3, r3, #3
 8005abe:	1a9b      	subs	r3, r3, r2
 8005ac0:	009b      	lsls	r3, r3, #2
 8005ac2:	440b      	add	r3, r1
 8005ac4:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8005ac8:	2200      	movs	r2, #0
 8005aca:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8005acc:	7bfa      	ldrb	r2, [r7, #15]
 8005ace:	6879      	ldr	r1, [r7, #4]
 8005ad0:	4613      	mov	r3, r2
 8005ad2:	00db      	lsls	r3, r3, #3
 8005ad4:	1a9b      	subs	r3, r3, r2
 8005ad6:	009b      	lsls	r3, r3, #2
 8005ad8:	440b      	add	r3, r1
 8005ada:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8005ade:	2200      	movs	r2, #0
 8005ae0:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8005ae2:	7bfa      	ldrb	r2, [r7, #15]
 8005ae4:	6879      	ldr	r1, [r7, #4]
 8005ae6:	4613      	mov	r3, r2
 8005ae8:	00db      	lsls	r3, r3, #3
 8005aea:	1a9b      	subs	r3, r3, r2
 8005aec:	009b      	lsls	r3, r3, #2
 8005aee:	440b      	add	r3, r1
 8005af0:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8005af4:	2200      	movs	r2, #0
 8005af6:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005af8:	7bfb      	ldrb	r3, [r7, #15]
 8005afa:	3301      	adds	r3, #1
 8005afc:	73fb      	strb	r3, [r7, #15]
 8005afe:	7bfa      	ldrb	r2, [r7, #15]
 8005b00:	687b      	ldr	r3, [r7, #4]
 8005b02:	685b      	ldr	r3, [r3, #4]
 8005b04:	429a      	cmp	r2, r3
 8005b06:	d3b5      	bcc.n	8005a74 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8005b08:	687b      	ldr	r3, [r7, #4]
 8005b0a:	681b      	ldr	r3, [r3, #0]
 8005b0c:	603b      	str	r3, [r7, #0]
 8005b0e:	687e      	ldr	r6, [r7, #4]
 8005b10:	466d      	mov	r5, sp
 8005b12:	f106 0410 	add.w	r4, r6, #16
 8005b16:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8005b18:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8005b1a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8005b1c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8005b1e:	e894 0003 	ldmia.w	r4, {r0, r1}
 8005b22:	e885 0003 	stmia.w	r5, {r0, r1}
 8005b26:	1d33      	adds	r3, r6, #4
 8005b28:	cb0e      	ldmia	r3, {r1, r2, r3}
 8005b2a:	6838      	ldr	r0, [r7, #0]
 8005b2c:	f008 fee2 	bl	800e8f4 <USB_DevInit>
 8005b30:	4603      	mov	r3, r0
 8005b32:	2b00      	cmp	r3, #0
 8005b34:	d005      	beq.n	8005b42 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8005b36:	687b      	ldr	r3, [r7, #4]
 8005b38:	2202      	movs	r2, #2
 8005b3a:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8005b3e:	2301      	movs	r3, #1
 8005b40:	e014      	b.n	8005b6c <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 8005b42:	687b      	ldr	r3, [r7, #4]
 8005b44:	2200      	movs	r2, #0
 8005b46:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8005b4a:	687b      	ldr	r3, [r7, #4]
 8005b4c:	2201      	movs	r2, #1
 8005b4e:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
  
  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8005b52:	687b      	ldr	r3, [r7, #4]
 8005b54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b56:	2b01      	cmp	r3, #1
 8005b58:	d102      	bne.n	8005b60 <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8005b5a:	6878      	ldr	r0, [r7, #4]
 8005b5c:	f001 f87a 	bl	8006c54 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 8005b60:	687b      	ldr	r3, [r7, #4]
 8005b62:	681b      	ldr	r3, [r3, #0]
 8005b64:	4618      	mov	r0, r3
 8005b66:	f009 ff62 	bl	800fa2e <USB_DevDisconnect>

  return HAL_OK;
 8005b6a:	2300      	movs	r3, #0
}
 8005b6c:	4618      	mov	r0, r3
 8005b6e:	3714      	adds	r7, #20
 8005b70:	46bd      	mov	sp, r7
 8005b72:	bdf0      	pop	{r4, r5, r6, r7, pc}

08005b74 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8005b74:	b580      	push	{r7, lr}
 8005b76:	b084      	sub	sp, #16
 8005b78:	af00      	add	r7, sp, #0
 8005b7a:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8005b7c:	687b      	ldr	r3, [r7, #4]
 8005b7e:	681b      	ldr	r3, [r3, #0]
 8005b80:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 8005b82:	687b      	ldr	r3, [r7, #4]
 8005b84:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8005b88:	2b01      	cmp	r3, #1
 8005b8a:	d101      	bne.n	8005b90 <HAL_PCD_Start+0x1c>
 8005b8c:	2302      	movs	r3, #2
 8005b8e:	e020      	b.n	8005bd2 <HAL_PCD_Start+0x5e>
 8005b90:	687b      	ldr	r3, [r7, #4]
 8005b92:	2201      	movs	r2, #1
 8005b94:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8005b98:	687b      	ldr	r3, [r7, #4]
 8005b9a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005b9c:	2b01      	cmp	r3, #1
 8005b9e:	d109      	bne.n	8005bb4 <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 8005ba0:	687b      	ldr	r3, [r7, #4]
 8005ba2:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8005ba4:	2b01      	cmp	r3, #1
 8005ba6:	d005      	beq.n	8005bb4 <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8005ba8:	68fb      	ldr	r3, [r7, #12]
 8005baa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005bac:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8005bb0:	68fb      	ldr	r3, [r7, #12]
 8005bb2:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 8005bb4:	687b      	ldr	r3, [r7, #4]
 8005bb6:	681b      	ldr	r3, [r3, #0]
 8005bb8:	4618      	mov	r0, r3
 8005bba:	f008 fe4f 	bl	800e85c <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8005bbe:	687b      	ldr	r3, [r7, #4]
 8005bc0:	681b      	ldr	r3, [r3, #0]
 8005bc2:	4618      	mov	r0, r3
 8005bc4:	f009 ff12 	bl	800f9ec <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8005bc8:	687b      	ldr	r3, [r7, #4]
 8005bca:	2200      	movs	r2, #0
 8005bcc:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8005bd0:	2300      	movs	r3, #0
}
 8005bd2:	4618      	mov	r0, r3
 8005bd4:	3710      	adds	r7, #16
 8005bd6:	46bd      	mov	sp, r7
 8005bd8:	bd80      	pop	{r7, pc}

08005bda <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8005bda:	b590      	push	{r4, r7, lr}
 8005bdc:	b08d      	sub	sp, #52	; 0x34
 8005bde:	af00      	add	r7, sp, #0
 8005be0:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8005be2:	687b      	ldr	r3, [r7, #4]
 8005be4:	681b      	ldr	r3, [r3, #0]
 8005be6:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005be8:	6a3b      	ldr	r3, [r7, #32]
 8005bea:	61fb      	str	r3, [r7, #28]
  uint32_t i, ep_intr, epint, epnum;
  uint32_t fifoemptymsk, temp;
  USB_OTG_EPTypeDef *ep;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8005bec:	687b      	ldr	r3, [r7, #4]
 8005bee:	681b      	ldr	r3, [r3, #0]
 8005bf0:	4618      	mov	r0, r3
 8005bf2:	f009 ffd0 	bl	800fb96 <USB_GetMode>
 8005bf6:	4603      	mov	r3, r0
 8005bf8:	2b00      	cmp	r3, #0
 8005bfa:	f040 83ca 	bne.w	8006392 <HAL_PCD_IRQHandler+0x7b8>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8005bfe:	687b      	ldr	r3, [r7, #4]
 8005c00:	681b      	ldr	r3, [r3, #0]
 8005c02:	4618      	mov	r0, r3
 8005c04:	f009 ff34 	bl	800fa70 <USB_ReadInterrupts>
 8005c08:	4603      	mov	r3, r0
 8005c0a:	2b00      	cmp	r3, #0
 8005c0c:	f000 83c0 	beq.w	8006390 <HAL_PCD_IRQHandler+0x7b6>
    {
      return;
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8005c10:	687b      	ldr	r3, [r7, #4]
 8005c12:	681b      	ldr	r3, [r3, #0]
 8005c14:	4618      	mov	r0, r3
 8005c16:	f009 ff2b 	bl	800fa70 <USB_ReadInterrupts>
 8005c1a:	4603      	mov	r3, r0
 8005c1c:	f003 0302 	and.w	r3, r3, #2
 8005c20:	2b02      	cmp	r3, #2
 8005c22:	d107      	bne.n	8005c34 <HAL_PCD_IRQHandler+0x5a>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8005c24:	687b      	ldr	r3, [r7, #4]
 8005c26:	681b      	ldr	r3, [r3, #0]
 8005c28:	695a      	ldr	r2, [r3, #20]
 8005c2a:	687b      	ldr	r3, [r7, #4]
 8005c2c:	681b      	ldr	r3, [r3, #0]
 8005c2e:	f002 0202 	and.w	r2, r2, #2
 8005c32:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8005c34:	687b      	ldr	r3, [r7, #4]
 8005c36:	681b      	ldr	r3, [r3, #0]
 8005c38:	4618      	mov	r0, r3
 8005c3a:	f009 ff19 	bl	800fa70 <USB_ReadInterrupts>
 8005c3e:	4603      	mov	r3, r0
 8005c40:	f003 0310 	and.w	r3, r3, #16
 8005c44:	2b10      	cmp	r3, #16
 8005c46:	d161      	bne.n	8005d0c <HAL_PCD_IRQHandler+0x132>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8005c48:	687b      	ldr	r3, [r7, #4]
 8005c4a:	681b      	ldr	r3, [r3, #0]
 8005c4c:	699a      	ldr	r2, [r3, #24]
 8005c4e:	687b      	ldr	r3, [r7, #4]
 8005c50:	681b      	ldr	r3, [r3, #0]
 8005c52:	f022 0210 	bic.w	r2, r2, #16
 8005c56:	619a      	str	r2, [r3, #24]

      temp = USBx->GRXSTSP;
 8005c58:	6a3b      	ldr	r3, [r7, #32]
 8005c5a:	6a1b      	ldr	r3, [r3, #32]
 8005c5c:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[temp & USB_OTG_GRXSTSP_EPNUM];
 8005c5e:	69bb      	ldr	r3, [r7, #24]
 8005c60:	f003 020f 	and.w	r2, r3, #15
 8005c64:	4613      	mov	r3, r2
 8005c66:	00db      	lsls	r3, r3, #3
 8005c68:	1a9b      	subs	r3, r3, r2
 8005c6a:	009b      	lsls	r3, r3, #2
 8005c6c:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8005c70:	687a      	ldr	r2, [r7, #4]
 8005c72:	4413      	add	r3, r2
 8005c74:	3304      	adds	r3, #4
 8005c76:	617b      	str	r3, [r7, #20]

      if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8005c78:	69bb      	ldr	r3, [r7, #24]
 8005c7a:	0c5b      	lsrs	r3, r3, #17
 8005c7c:	f003 030f 	and.w	r3, r3, #15
 8005c80:	2b02      	cmp	r3, #2
 8005c82:	d124      	bne.n	8005cce <HAL_PCD_IRQHandler+0xf4>
      {
        if ((temp & USB_OTG_GRXSTSP_BCNT) != 0U)
 8005c84:	69ba      	ldr	r2, [r7, #24]
 8005c86:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 8005c8a:	4013      	ands	r3, r2
 8005c8c:	2b00      	cmp	r3, #0
 8005c8e:	d035      	beq.n	8005cfc <HAL_PCD_IRQHandler+0x122>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8005c90:	697b      	ldr	r3, [r7, #20]
 8005c92:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((temp & USB_OTG_GRXSTSP_BCNT) >> 4));
 8005c94:	69bb      	ldr	r3, [r7, #24]
 8005c96:	091b      	lsrs	r3, r3, #4
 8005c98:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8005c9a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8005c9e:	b29b      	uxth	r3, r3
 8005ca0:	461a      	mov	r2, r3
 8005ca2:	6a38      	ldr	r0, [r7, #32]
 8005ca4:	f009 fd50 	bl	800f748 <USB_ReadPacket>

          ep->xfer_buff += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8005ca8:	697b      	ldr	r3, [r7, #20]
 8005caa:	68da      	ldr	r2, [r3, #12]
 8005cac:	69bb      	ldr	r3, [r7, #24]
 8005cae:	091b      	lsrs	r3, r3, #4
 8005cb0:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8005cb4:	441a      	add	r2, r3
 8005cb6:	697b      	ldr	r3, [r7, #20]
 8005cb8:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8005cba:	697b      	ldr	r3, [r7, #20]
 8005cbc:	699a      	ldr	r2, [r3, #24]
 8005cbe:	69bb      	ldr	r3, [r7, #24]
 8005cc0:	091b      	lsrs	r3, r3, #4
 8005cc2:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8005cc6:	441a      	add	r2, r3
 8005cc8:	697b      	ldr	r3, [r7, #20]
 8005cca:	619a      	str	r2, [r3, #24]
 8005ccc:	e016      	b.n	8005cfc <HAL_PCD_IRQHandler+0x122>
        }
      }
      else if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_SETUP_UPDT)
 8005cce:	69bb      	ldr	r3, [r7, #24]
 8005cd0:	0c5b      	lsrs	r3, r3, #17
 8005cd2:	f003 030f 	and.w	r3, r3, #15
 8005cd6:	2b06      	cmp	r3, #6
 8005cd8:	d110      	bne.n	8005cfc <HAL_PCD_IRQHandler+0x122>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8005cda:	687b      	ldr	r3, [r7, #4]
 8005cdc:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8005ce0:	2208      	movs	r2, #8
 8005ce2:	4619      	mov	r1, r3
 8005ce4:	6a38      	ldr	r0, [r7, #32]
 8005ce6:	f009 fd2f 	bl	800f748 <USB_ReadPacket>
        ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8005cea:	697b      	ldr	r3, [r7, #20]
 8005cec:	699a      	ldr	r2, [r3, #24]
 8005cee:	69bb      	ldr	r3, [r7, #24]
 8005cf0:	091b      	lsrs	r3, r3, #4
 8005cf2:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8005cf6:	441a      	add	r2, r3
 8005cf8:	697b      	ldr	r3, [r7, #20]
 8005cfa:	619a      	str	r2, [r3, #24]
      }
      else
      {
        /* ... */
      }
      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8005cfc:	687b      	ldr	r3, [r7, #4]
 8005cfe:	681b      	ldr	r3, [r3, #0]
 8005d00:	699a      	ldr	r2, [r3, #24]
 8005d02:	687b      	ldr	r3, [r7, #4]
 8005d04:	681b      	ldr	r3, [r3, #0]
 8005d06:	f042 0210 	orr.w	r2, r2, #16
 8005d0a:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8005d0c:	687b      	ldr	r3, [r7, #4]
 8005d0e:	681b      	ldr	r3, [r3, #0]
 8005d10:	4618      	mov	r0, r3
 8005d12:	f009 fead 	bl	800fa70 <USB_ReadInterrupts>
 8005d16:	4603      	mov	r3, r0
 8005d18:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8005d1c:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8005d20:	d16e      	bne.n	8005e00 <HAL_PCD_IRQHandler+0x226>
    {
      epnum = 0U;
 8005d22:	2300      	movs	r3, #0
 8005d24:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8005d26:	687b      	ldr	r3, [r7, #4]
 8005d28:	681b      	ldr	r3, [r3, #0]
 8005d2a:	4618      	mov	r0, r3
 8005d2c:	f009 feb3 	bl	800fa96 <USB_ReadDevAllOutEpInterrupt>
 8005d30:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 8005d32:	e062      	b.n	8005dfa <HAL_PCD_IRQHandler+0x220>
      {
        if ((ep_intr & 0x1U) != 0U)
 8005d34:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005d36:	f003 0301 	and.w	r3, r3, #1
 8005d3a:	2b00      	cmp	r3, #0
 8005d3c:	d057      	beq.n	8005dee <HAL_PCD_IRQHandler+0x214>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8005d3e:	687b      	ldr	r3, [r7, #4]
 8005d40:	681b      	ldr	r3, [r3, #0]
 8005d42:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005d44:	b2d2      	uxtb	r2, r2
 8005d46:	4611      	mov	r1, r2
 8005d48:	4618      	mov	r0, r3
 8005d4a:	f009 fed8 	bl	800fafe <USB_ReadDevOutEPInterrupt>
 8005d4e:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8005d50:	693b      	ldr	r3, [r7, #16]
 8005d52:	f003 0301 	and.w	r3, r3, #1
 8005d56:	2b00      	cmp	r3, #0
 8005d58:	d00c      	beq.n	8005d74 <HAL_PCD_IRQHandler+0x19a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8005d5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d5c:	015a      	lsls	r2, r3, #5
 8005d5e:	69fb      	ldr	r3, [r7, #28]
 8005d60:	4413      	add	r3, r2
 8005d62:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005d66:	461a      	mov	r2, r3
 8005d68:	2301      	movs	r3, #1
 8005d6a:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8005d6c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8005d6e:	6878      	ldr	r0, [r7, #4]
 8005d70:	f000 fdc6 	bl	8006900 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8005d74:	693b      	ldr	r3, [r7, #16]
 8005d76:	f003 0308 	and.w	r3, r3, #8
 8005d7a:	2b00      	cmp	r3, #0
 8005d7c:	d00c      	beq.n	8005d98 <HAL_PCD_IRQHandler+0x1be>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8005d7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d80:	015a      	lsls	r2, r3, #5
 8005d82:	69fb      	ldr	r3, [r7, #28]
 8005d84:	4413      	add	r3, r2
 8005d86:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005d8a:	461a      	mov	r2, r3
 8005d8c:	2308      	movs	r3, #8
 8005d8e:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8005d90:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8005d92:	6878      	ldr	r0, [r7, #4]
 8005d94:	f000 fec0 	bl	8006b18 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8005d98:	693b      	ldr	r3, [r7, #16]
 8005d9a:	f003 0310 	and.w	r3, r3, #16
 8005d9e:	2b00      	cmp	r3, #0
 8005da0:	d008      	beq.n	8005db4 <HAL_PCD_IRQHandler+0x1da>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8005da2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005da4:	015a      	lsls	r2, r3, #5
 8005da6:	69fb      	ldr	r3, [r7, #28]
 8005da8:	4413      	add	r3, r2
 8005daa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005dae:	461a      	mov	r2, r3
 8005db0:	2310      	movs	r3, #16
 8005db2:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8005db4:	693b      	ldr	r3, [r7, #16]
 8005db6:	f003 0320 	and.w	r3, r3, #32
 8005dba:	2b00      	cmp	r3, #0
 8005dbc:	d008      	beq.n	8005dd0 <HAL_PCD_IRQHandler+0x1f6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8005dbe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005dc0:	015a      	lsls	r2, r3, #5
 8005dc2:	69fb      	ldr	r3, [r7, #28]
 8005dc4:	4413      	add	r3, r2
 8005dc6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005dca:	461a      	mov	r2, r3
 8005dcc:	2320      	movs	r3, #32
 8005dce:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8005dd0:	693b      	ldr	r3, [r7, #16]
 8005dd2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005dd6:	2b00      	cmp	r3, #0
 8005dd8:	d009      	beq.n	8005dee <HAL_PCD_IRQHandler+0x214>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8005dda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ddc:	015a      	lsls	r2, r3, #5
 8005dde:	69fb      	ldr	r3, [r7, #28]
 8005de0:	4413      	add	r3, r2
 8005de2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005de6:	461a      	mov	r2, r3
 8005de8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8005dec:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8005dee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005df0:	3301      	adds	r3, #1
 8005df2:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8005df4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005df6:	085b      	lsrs	r3, r3, #1
 8005df8:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8005dfa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005dfc:	2b00      	cmp	r3, #0
 8005dfe:	d199      	bne.n	8005d34 <HAL_PCD_IRQHandler+0x15a>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8005e00:	687b      	ldr	r3, [r7, #4]
 8005e02:	681b      	ldr	r3, [r3, #0]
 8005e04:	4618      	mov	r0, r3
 8005e06:	f009 fe33 	bl	800fa70 <USB_ReadInterrupts>
 8005e0a:	4603      	mov	r3, r0
 8005e0c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005e10:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8005e14:	f040 80c0 	bne.w	8005f98 <HAL_PCD_IRQHandler+0x3be>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8005e18:	687b      	ldr	r3, [r7, #4]
 8005e1a:	681b      	ldr	r3, [r3, #0]
 8005e1c:	4618      	mov	r0, r3
 8005e1e:	f009 fe54 	bl	800faca <USB_ReadDevAllInEpInterrupt>
 8005e22:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 8005e24:	2300      	movs	r3, #0
 8005e26:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 8005e28:	e0b2      	b.n	8005f90 <HAL_PCD_IRQHandler+0x3b6>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8005e2a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005e2c:	f003 0301 	and.w	r3, r3, #1
 8005e30:	2b00      	cmp	r3, #0
 8005e32:	f000 80a7 	beq.w	8005f84 <HAL_PCD_IRQHandler+0x3aa>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8005e36:	687b      	ldr	r3, [r7, #4]
 8005e38:	681b      	ldr	r3, [r3, #0]
 8005e3a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005e3c:	b2d2      	uxtb	r2, r2
 8005e3e:	4611      	mov	r1, r2
 8005e40:	4618      	mov	r0, r3
 8005e42:	f009 fe7a 	bl	800fb3a <USB_ReadDevInEPInterrupt>
 8005e46:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8005e48:	693b      	ldr	r3, [r7, #16]
 8005e4a:	f003 0301 	and.w	r3, r3, #1
 8005e4e:	2b00      	cmp	r3, #0
 8005e50:	d057      	beq.n	8005f02 <HAL_PCD_IRQHandler+0x328>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8005e52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e54:	f003 030f 	and.w	r3, r3, #15
 8005e58:	2201      	movs	r2, #1
 8005e5a:	fa02 f303 	lsl.w	r3, r2, r3
 8005e5e:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8005e60:	69fb      	ldr	r3, [r7, #28]
 8005e62:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005e66:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005e68:	68fb      	ldr	r3, [r7, #12]
 8005e6a:	43db      	mvns	r3, r3
 8005e6c:	69f9      	ldr	r1, [r7, #28]
 8005e6e:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005e72:	4013      	ands	r3, r2
 8005e74:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8005e76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e78:	015a      	lsls	r2, r3, #5
 8005e7a:	69fb      	ldr	r3, [r7, #28]
 8005e7c:	4413      	add	r3, r2
 8005e7e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005e82:	461a      	mov	r2, r3
 8005e84:	2301      	movs	r3, #1
 8005e86:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8005e88:	687b      	ldr	r3, [r7, #4]
 8005e8a:	691b      	ldr	r3, [r3, #16]
 8005e8c:	2b01      	cmp	r3, #1
 8005e8e:	d132      	bne.n	8005ef6 <HAL_PCD_IRQHandler+0x31c>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8005e90:	6879      	ldr	r1, [r7, #4]
 8005e92:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005e94:	4613      	mov	r3, r2
 8005e96:	00db      	lsls	r3, r3, #3
 8005e98:	1a9b      	subs	r3, r3, r2
 8005e9a:	009b      	lsls	r3, r3, #2
 8005e9c:	440b      	add	r3, r1
 8005e9e:	3348      	adds	r3, #72	; 0x48
 8005ea0:	6819      	ldr	r1, [r3, #0]
 8005ea2:	6878      	ldr	r0, [r7, #4]
 8005ea4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005ea6:	4613      	mov	r3, r2
 8005ea8:	00db      	lsls	r3, r3, #3
 8005eaa:	1a9b      	subs	r3, r3, r2
 8005eac:	009b      	lsls	r3, r3, #2
 8005eae:	4403      	add	r3, r0
 8005eb0:	3344      	adds	r3, #68	; 0x44
 8005eb2:	681b      	ldr	r3, [r3, #0]
 8005eb4:	4419      	add	r1, r3
 8005eb6:	6878      	ldr	r0, [r7, #4]
 8005eb8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005eba:	4613      	mov	r3, r2
 8005ebc:	00db      	lsls	r3, r3, #3
 8005ebe:	1a9b      	subs	r3, r3, r2
 8005ec0:	009b      	lsls	r3, r3, #2
 8005ec2:	4403      	add	r3, r0
 8005ec4:	3348      	adds	r3, #72	; 0x48
 8005ec6:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8005ec8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005eca:	2b00      	cmp	r3, #0
 8005ecc:	d113      	bne.n	8005ef6 <HAL_PCD_IRQHandler+0x31c>
 8005ece:	6879      	ldr	r1, [r7, #4]
 8005ed0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005ed2:	4613      	mov	r3, r2
 8005ed4:	00db      	lsls	r3, r3, #3
 8005ed6:	1a9b      	subs	r3, r3, r2
 8005ed8:	009b      	lsls	r3, r3, #2
 8005eda:	440b      	add	r3, r1
 8005edc:	3350      	adds	r3, #80	; 0x50
 8005ede:	681b      	ldr	r3, [r3, #0]
 8005ee0:	2b00      	cmp	r3, #0
 8005ee2:	d108      	bne.n	8005ef6 <HAL_PCD_IRQHandler+0x31c>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8005ee4:	687b      	ldr	r3, [r7, #4]
 8005ee6:	6818      	ldr	r0, [r3, #0]
 8005ee8:	687b      	ldr	r3, [r7, #4]
 8005eea:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8005eee:	461a      	mov	r2, r3
 8005ef0:	2101      	movs	r1, #1
 8005ef2:	f009 fe83 	bl	800fbfc <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8005ef6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ef8:	b2db      	uxtb	r3, r3
 8005efa:	4619      	mov	r1, r3
 8005efc:	6878      	ldr	r0, [r7, #4]
 8005efe:	f00b ff74 	bl	8011dea <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8005f02:	693b      	ldr	r3, [r7, #16]
 8005f04:	f003 0308 	and.w	r3, r3, #8
 8005f08:	2b00      	cmp	r3, #0
 8005f0a:	d008      	beq.n	8005f1e <HAL_PCD_IRQHandler+0x344>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8005f0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f0e:	015a      	lsls	r2, r3, #5
 8005f10:	69fb      	ldr	r3, [r7, #28]
 8005f12:	4413      	add	r3, r2
 8005f14:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005f18:	461a      	mov	r2, r3
 8005f1a:	2308      	movs	r3, #8
 8005f1c:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8005f1e:	693b      	ldr	r3, [r7, #16]
 8005f20:	f003 0310 	and.w	r3, r3, #16
 8005f24:	2b00      	cmp	r3, #0
 8005f26:	d008      	beq.n	8005f3a <HAL_PCD_IRQHandler+0x360>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8005f28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f2a:	015a      	lsls	r2, r3, #5
 8005f2c:	69fb      	ldr	r3, [r7, #28]
 8005f2e:	4413      	add	r3, r2
 8005f30:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005f34:	461a      	mov	r2, r3
 8005f36:	2310      	movs	r3, #16
 8005f38:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8005f3a:	693b      	ldr	r3, [r7, #16]
 8005f3c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005f40:	2b00      	cmp	r3, #0
 8005f42:	d008      	beq.n	8005f56 <HAL_PCD_IRQHandler+0x37c>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8005f44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f46:	015a      	lsls	r2, r3, #5
 8005f48:	69fb      	ldr	r3, [r7, #28]
 8005f4a:	4413      	add	r3, r2
 8005f4c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005f50:	461a      	mov	r2, r3
 8005f52:	2340      	movs	r3, #64	; 0x40
 8005f54:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8005f56:	693b      	ldr	r3, [r7, #16]
 8005f58:	f003 0302 	and.w	r3, r3, #2
 8005f5c:	2b00      	cmp	r3, #0
 8005f5e:	d008      	beq.n	8005f72 <HAL_PCD_IRQHandler+0x398>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8005f60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f62:	015a      	lsls	r2, r3, #5
 8005f64:	69fb      	ldr	r3, [r7, #28]
 8005f66:	4413      	add	r3, r2
 8005f68:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005f6c:	461a      	mov	r2, r3
 8005f6e:	2302      	movs	r3, #2
 8005f70:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8005f72:	693b      	ldr	r3, [r7, #16]
 8005f74:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005f78:	2b00      	cmp	r3, #0
 8005f7a:	d003      	beq.n	8005f84 <HAL_PCD_IRQHandler+0x3aa>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8005f7c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8005f7e:	6878      	ldr	r0, [r7, #4]
 8005f80:	f000 fc30 	bl	80067e4 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8005f84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f86:	3301      	adds	r3, #1
 8005f88:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8005f8a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005f8c:	085b      	lsrs	r3, r3, #1
 8005f8e:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8005f90:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005f92:	2b00      	cmp	r3, #0
 8005f94:	f47f af49 	bne.w	8005e2a <HAL_PCD_IRQHandler+0x250>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8005f98:	687b      	ldr	r3, [r7, #4]
 8005f9a:	681b      	ldr	r3, [r3, #0]
 8005f9c:	4618      	mov	r0, r3
 8005f9e:	f009 fd67 	bl	800fa70 <USB_ReadInterrupts>
 8005fa2:	4603      	mov	r3, r0
 8005fa4:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005fa8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005fac:	d122      	bne.n	8005ff4 <HAL_PCD_IRQHandler+0x41a>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8005fae:	69fb      	ldr	r3, [r7, #28]
 8005fb0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005fb4:	685b      	ldr	r3, [r3, #4]
 8005fb6:	69fa      	ldr	r2, [r7, #28]
 8005fb8:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005fbc:	f023 0301 	bic.w	r3, r3, #1
 8005fc0:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8005fc2:	687b      	ldr	r3, [r7, #4]
 8005fc4:	f893 33f4 	ldrb.w	r3, [r3, #1012]	; 0x3f4
 8005fc8:	2b01      	cmp	r3, #1
 8005fca:	d108      	bne.n	8005fde <HAL_PCD_IRQHandler+0x404>
      {
        hpcd->LPM_State = LPM_L0;
 8005fcc:	687b      	ldr	r3, [r7, #4]
 8005fce:	2200      	movs	r2, #0
 8005fd0:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8005fd4:	2100      	movs	r1, #0
 8005fd6:	6878      	ldr	r0, [r7, #4]
 8005fd8:	f000 fe60 	bl	8006c9c <HAL_PCDEx_LPM_Callback>
 8005fdc:	e002      	b.n	8005fe4 <HAL_PCD_IRQHandler+0x40a>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8005fde:	6878      	ldr	r0, [r7, #4]
 8005fe0:	f00b ff7a 	bl	8011ed8 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8005fe4:	687b      	ldr	r3, [r7, #4]
 8005fe6:	681b      	ldr	r3, [r3, #0]
 8005fe8:	695a      	ldr	r2, [r3, #20]
 8005fea:	687b      	ldr	r3, [r7, #4]
 8005fec:	681b      	ldr	r3, [r3, #0]
 8005fee:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 8005ff2:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8005ff4:	687b      	ldr	r3, [r7, #4]
 8005ff6:	681b      	ldr	r3, [r3, #0]
 8005ff8:	4618      	mov	r0, r3
 8005ffa:	f009 fd39 	bl	800fa70 <USB_ReadInterrupts>
 8005ffe:	4603      	mov	r3, r0
 8006000:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006004:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006008:	d112      	bne.n	8006030 <HAL_PCD_IRQHandler+0x456>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 800600a:	69fb      	ldr	r3, [r7, #28]
 800600c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006010:	689b      	ldr	r3, [r3, #8]
 8006012:	f003 0301 	and.w	r3, r3, #1
 8006016:	2b01      	cmp	r3, #1
 8006018:	d102      	bne.n	8006020 <HAL_PCD_IRQHandler+0x446>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 800601a:	6878      	ldr	r0, [r7, #4]
 800601c:	f00b ff36 	bl	8011e8c <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8006020:	687b      	ldr	r3, [r7, #4]
 8006022:	681b      	ldr	r3, [r3, #0]
 8006024:	695a      	ldr	r2, [r3, #20]
 8006026:	687b      	ldr	r3, [r7, #4]
 8006028:	681b      	ldr	r3, [r3, #0]
 800602a:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 800602e:	615a      	str	r2, [r3, #20]
    }

    /* Handle LPM Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT))
 8006030:	687b      	ldr	r3, [r7, #4]
 8006032:	681b      	ldr	r3, [r3, #0]
 8006034:	4618      	mov	r0, r3
 8006036:	f009 fd1b 	bl	800fa70 <USB_ReadInterrupts>
 800603a:	4603      	mov	r3, r0
 800603c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006040:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006044:	d121      	bne.n	800608a <HAL_PCD_IRQHandler+0x4b0>
    {
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT);
 8006046:	687b      	ldr	r3, [r7, #4]
 8006048:	681b      	ldr	r3, [r3, #0]
 800604a:	695a      	ldr	r2, [r3, #20]
 800604c:	687b      	ldr	r3, [r7, #4]
 800604e:	681b      	ldr	r3, [r3, #0]
 8006050:	f002 6200 	and.w	r2, r2, #134217728	; 0x8000000
 8006054:	615a      	str	r2, [r3, #20]

      if (hpcd->LPM_State == LPM_L0)
 8006056:	687b      	ldr	r3, [r7, #4]
 8006058:	f893 33f4 	ldrb.w	r3, [r3, #1012]	; 0x3f4
 800605c:	2b00      	cmp	r3, #0
 800605e:	d111      	bne.n	8006084 <HAL_PCD_IRQHandler+0x4aa>
      {
        hpcd->LPM_State = LPM_L1;
 8006060:	687b      	ldr	r3, [r7, #4]
 8006062:	2201      	movs	r2, #1
 8006064:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4
        hpcd->BESL = (hpcd->Instance->GLPMCFG & USB_OTG_GLPMCFG_BESL) >> 2U;
 8006068:	687b      	ldr	r3, [r7, #4]
 800606a:	681b      	ldr	r3, [r3, #0]
 800606c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800606e:	089b      	lsrs	r3, r3, #2
 8006070:	f003 020f 	and.w	r2, r3, #15
 8006074:	687b      	ldr	r3, [r7, #4]
 8006076:	f8c3 23f8 	str.w	r2, [r3, #1016]	; 0x3f8

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 800607a:	2101      	movs	r1, #1
 800607c:	6878      	ldr	r0, [r7, #4]
 800607e:	f000 fe0d 	bl	8006c9c <HAL_PCDEx_LPM_Callback>
 8006082:	e002      	b.n	800608a <HAL_PCD_IRQHandler+0x4b0>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8006084:	6878      	ldr	r0, [r7, #4]
 8006086:	f00b ff01 	bl	8011e8c <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 800608a:	687b      	ldr	r3, [r7, #4]
 800608c:	681b      	ldr	r3, [r3, #0]
 800608e:	4618      	mov	r0, r3
 8006090:	f009 fcee 	bl	800fa70 <USB_ReadInterrupts>
 8006094:	4603      	mov	r3, r0
 8006096:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800609a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800609e:	f040 80c7 	bne.w	8006230 <HAL_PCD_IRQHandler+0x656>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 80060a2:	69fb      	ldr	r3, [r7, #28]
 80060a4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80060a8:	685b      	ldr	r3, [r3, #4]
 80060aa:	69fa      	ldr	r2, [r7, #28]
 80060ac:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80060b0:	f023 0301 	bic.w	r3, r3, #1
 80060b4:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 80060b6:	687b      	ldr	r3, [r7, #4]
 80060b8:	681b      	ldr	r3, [r3, #0]
 80060ba:	2110      	movs	r1, #16
 80060bc:	4618      	mov	r0, r3
 80060be:	f008 fd77 	bl	800ebb0 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80060c2:	2300      	movs	r3, #0
 80060c4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80060c6:	e056      	b.n	8006176 <HAL_PCD_IRQHandler+0x59c>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 80060c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80060ca:	015a      	lsls	r2, r3, #5
 80060cc:	69fb      	ldr	r3, [r7, #28]
 80060ce:	4413      	add	r3, r2
 80060d0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80060d4:	461a      	mov	r2, r3
 80060d6:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80060da:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 80060dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80060de:	015a      	lsls	r2, r3, #5
 80060e0:	69fb      	ldr	r3, [r7, #28]
 80060e2:	4413      	add	r3, r2
 80060e4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80060e8:	681b      	ldr	r3, [r3, #0]
 80060ea:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80060ec:	0151      	lsls	r1, r2, #5
 80060ee:	69fa      	ldr	r2, [r7, #28]
 80060f0:	440a      	add	r2, r1
 80060f2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80060f6:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80060fa:	6013      	str	r3, [r2, #0]
        USBx_INEP(i)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 80060fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80060fe:	015a      	lsls	r2, r3, #5
 8006100:	69fb      	ldr	r3, [r7, #28]
 8006102:	4413      	add	r3, r2
 8006104:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006108:	681b      	ldr	r3, [r3, #0]
 800610a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800610c:	0151      	lsls	r1, r2, #5
 800610e:	69fa      	ldr	r2, [r7, #28]
 8006110:	440a      	add	r2, r1
 8006112:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006116:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800611a:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 800611c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800611e:	015a      	lsls	r2, r3, #5
 8006120:	69fb      	ldr	r3, [r7, #28]
 8006122:	4413      	add	r3, r2
 8006124:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006128:	461a      	mov	r2, r3
 800612a:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800612e:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8006130:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006132:	015a      	lsls	r2, r3, #5
 8006134:	69fb      	ldr	r3, [r7, #28]
 8006136:	4413      	add	r3, r2
 8006138:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800613c:	681b      	ldr	r3, [r3, #0]
 800613e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006140:	0151      	lsls	r1, r2, #5
 8006142:	69fa      	ldr	r2, [r7, #28]
 8006144:	440a      	add	r2, r1
 8006146:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800614a:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800614e:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8006150:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006152:	015a      	lsls	r2, r3, #5
 8006154:	69fb      	ldr	r3, [r7, #28]
 8006156:	4413      	add	r3, r2
 8006158:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800615c:	681b      	ldr	r3, [r3, #0]
 800615e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006160:	0151      	lsls	r1, r2, #5
 8006162:	69fa      	ldr	r2, [r7, #28]
 8006164:	440a      	add	r2, r1
 8006166:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800616a:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800616e:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8006170:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006172:	3301      	adds	r3, #1
 8006174:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006176:	687b      	ldr	r3, [r7, #4]
 8006178:	685b      	ldr	r3, [r3, #4]
 800617a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800617c:	429a      	cmp	r2, r3
 800617e:	d3a3      	bcc.n	80060c8 <HAL_PCD_IRQHandler+0x4ee>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8006180:	69fb      	ldr	r3, [r7, #28]
 8006182:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006186:	69db      	ldr	r3, [r3, #28]
 8006188:	69fa      	ldr	r2, [r7, #28]
 800618a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800618e:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 8006192:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8006194:	687b      	ldr	r3, [r7, #4]
 8006196:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006198:	2b00      	cmp	r3, #0
 800619a:	d016      	beq.n	80061ca <HAL_PCD_IRQHandler+0x5f0>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 800619c:	69fb      	ldr	r3, [r7, #28]
 800619e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80061a2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80061a6:	69fa      	ldr	r2, [r7, #28]
 80061a8:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80061ac:	f043 030b 	orr.w	r3, r3, #11
 80061b0:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 80061b4:	69fb      	ldr	r3, [r7, #28]
 80061b6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80061ba:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80061bc:	69fa      	ldr	r2, [r7, #28]
 80061be:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80061c2:	f043 030b 	orr.w	r3, r3, #11
 80061c6:	6453      	str	r3, [r2, #68]	; 0x44
 80061c8:	e015      	b.n	80061f6 <HAL_PCD_IRQHandler+0x61c>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 80061ca:	69fb      	ldr	r3, [r7, #28]
 80061cc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80061d0:	695a      	ldr	r2, [r3, #20]
 80061d2:	69fb      	ldr	r3, [r7, #28]
 80061d4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80061d8:	4619      	mov	r1, r3
 80061da:	f242 032b 	movw	r3, #8235	; 0x202b
 80061de:	4313      	orrs	r3, r2
 80061e0:	614b      	str	r3, [r1, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 80061e2:	69fb      	ldr	r3, [r7, #28]
 80061e4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80061e8:	691b      	ldr	r3, [r3, #16]
 80061ea:	69fa      	ldr	r2, [r7, #28]
 80061ec:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80061f0:	f043 030b 	orr.w	r3, r3, #11
 80061f4:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 80061f6:	69fb      	ldr	r3, [r7, #28]
 80061f8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80061fc:	681b      	ldr	r3, [r3, #0]
 80061fe:	69fa      	ldr	r2, [r7, #28]
 8006200:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006204:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8006208:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 800620a:	687b      	ldr	r3, [r7, #4]
 800620c:	6818      	ldr	r0, [r3, #0]
 800620e:	687b      	ldr	r3, [r7, #4]
 8006210:	691b      	ldr	r3, [r3, #16]
 8006212:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 8006214:	687b      	ldr	r3, [r7, #4]
 8006216:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 800621a:	461a      	mov	r2, r3
 800621c:	f009 fcee 	bl	800fbfc <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8006220:	687b      	ldr	r3, [r7, #4]
 8006222:	681b      	ldr	r3, [r3, #0]
 8006224:	695a      	ldr	r2, [r3, #20]
 8006226:	687b      	ldr	r3, [r7, #4]
 8006228:	681b      	ldr	r3, [r3, #0]
 800622a:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 800622e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8006230:	687b      	ldr	r3, [r7, #4]
 8006232:	681b      	ldr	r3, [r3, #0]
 8006234:	4618      	mov	r0, r3
 8006236:	f009 fc1b 	bl	800fa70 <USB_ReadInterrupts>
 800623a:	4603      	mov	r3, r0
 800623c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8006240:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006244:	d124      	bne.n	8006290 <HAL_PCD_IRQHandler+0x6b6>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8006246:	687b      	ldr	r3, [r7, #4]
 8006248:	681b      	ldr	r3, [r3, #0]
 800624a:	4618      	mov	r0, r3
 800624c:	f009 fcb2 	bl	800fbb4 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8006250:	687b      	ldr	r3, [r7, #4]
 8006252:	681b      	ldr	r3, [r3, #0]
 8006254:	4618      	mov	r0, r3
 8006256:	f008 fd0c 	bl	800ec72 <USB_GetDevSpeed>
 800625a:	4603      	mov	r3, r0
 800625c:	461a      	mov	r2, r3
 800625e:	687b      	ldr	r3, [r7, #4]
 8006260:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8006262:	687b      	ldr	r3, [r7, #4]
 8006264:	681c      	ldr	r4, [r3, #0]
 8006266:	f001 fcaf 	bl	8007bc8 <HAL_RCC_GetHCLKFreq>
 800626a:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 800626c:	687b      	ldr	r3, [r7, #4]
 800626e:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8006270:	b2db      	uxtb	r3, r3
 8006272:	461a      	mov	r2, r3
 8006274:	4620      	mov	r0, r4
 8006276:	f008 fa4f 	bl	800e718 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 800627a:	6878      	ldr	r0, [r7, #4]
 800627c:	f00b fddd 	bl	8011e3a <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8006280:	687b      	ldr	r3, [r7, #4]
 8006282:	681b      	ldr	r3, [r3, #0]
 8006284:	695a      	ldr	r2, [r3, #20]
 8006286:	687b      	ldr	r3, [r7, #4]
 8006288:	681b      	ldr	r3, [r3, #0]
 800628a:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 800628e:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8006290:	687b      	ldr	r3, [r7, #4]
 8006292:	681b      	ldr	r3, [r3, #0]
 8006294:	4618      	mov	r0, r3
 8006296:	f009 fbeb 	bl	800fa70 <USB_ReadInterrupts>
 800629a:	4603      	mov	r3, r0
 800629c:	f003 0308 	and.w	r3, r3, #8
 80062a0:	2b08      	cmp	r3, #8
 80062a2:	d10a      	bne.n	80062ba <HAL_PCD_IRQHandler+0x6e0>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 80062a4:	6878      	ldr	r0, [r7, #4]
 80062a6:	f00b fdba 	bl	8011e1e <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 80062aa:	687b      	ldr	r3, [r7, #4]
 80062ac:	681b      	ldr	r3, [r3, #0]
 80062ae:	695a      	ldr	r2, [r3, #20]
 80062b0:	687b      	ldr	r3, [r7, #4]
 80062b2:	681b      	ldr	r3, [r3, #0]
 80062b4:	f002 0208 	and.w	r2, r2, #8
 80062b8:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 80062ba:	687b      	ldr	r3, [r7, #4]
 80062bc:	681b      	ldr	r3, [r3, #0]
 80062be:	4618      	mov	r0, r3
 80062c0:	f009 fbd6 	bl	800fa70 <USB_ReadInterrupts>
 80062c4:	4603      	mov	r3, r0
 80062c6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80062ca:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80062ce:	d10f      	bne.n	80062f0 <HAL_PCD_IRQHandler+0x716>
    {
      /* Keep application checking the corresponding Iso IN endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 80062d0:	2300      	movs	r3, #0
 80062d2:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 80062d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80062d6:	b2db      	uxtb	r3, r3
 80062d8:	4619      	mov	r1, r3
 80062da:	6878      	ldr	r0, [r7, #4]
 80062dc:	f00b fe1c 	bl	8011f18 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 80062e0:	687b      	ldr	r3, [r7, #4]
 80062e2:	681b      	ldr	r3, [r3, #0]
 80062e4:	695a      	ldr	r2, [r3, #20]
 80062e6:	687b      	ldr	r3, [r7, #4]
 80062e8:	681b      	ldr	r3, [r3, #0]
 80062ea:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 80062ee:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 80062f0:	687b      	ldr	r3, [r7, #4]
 80062f2:	681b      	ldr	r3, [r3, #0]
 80062f4:	4618      	mov	r0, r3
 80062f6:	f009 fbbb 	bl	800fa70 <USB_ReadInterrupts>
 80062fa:	4603      	mov	r3, r0
 80062fc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8006300:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8006304:	d10f      	bne.n	8006326 <HAL_PCD_IRQHandler+0x74c>
    {
      /* Keep application checking the corresponding Iso OUT endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 8006306:	2300      	movs	r3, #0
 8006308:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 800630a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800630c:	b2db      	uxtb	r3, r3
 800630e:	4619      	mov	r1, r3
 8006310:	6878      	ldr	r0, [r7, #4]
 8006312:	f00b fdef 	bl	8011ef4 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8006316:	687b      	ldr	r3, [r7, #4]
 8006318:	681b      	ldr	r3, [r3, #0]
 800631a:	695a      	ldr	r2, [r3, #20]
 800631c:	687b      	ldr	r3, [r7, #4]
 800631e:	681b      	ldr	r3, [r3, #0]
 8006320:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 8006324:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8006326:	687b      	ldr	r3, [r7, #4]
 8006328:	681b      	ldr	r3, [r3, #0]
 800632a:	4618      	mov	r0, r3
 800632c:	f009 fba0 	bl	800fa70 <USB_ReadInterrupts>
 8006330:	4603      	mov	r3, r0
 8006332:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8006336:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800633a:	d10a      	bne.n	8006352 <HAL_PCD_IRQHandler+0x778>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 800633c:	6878      	ldr	r0, [r7, #4]
 800633e:	f00b fdfd 	bl	8011f3c <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8006342:	687b      	ldr	r3, [r7, #4]
 8006344:	681b      	ldr	r3, [r3, #0]
 8006346:	695a      	ldr	r2, [r3, #20]
 8006348:	687b      	ldr	r3, [r7, #4]
 800634a:	681b      	ldr	r3, [r3, #0]
 800634c:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8006350:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8006352:	687b      	ldr	r3, [r7, #4]
 8006354:	681b      	ldr	r3, [r3, #0]
 8006356:	4618      	mov	r0, r3
 8006358:	f009 fb8a 	bl	800fa70 <USB_ReadInterrupts>
 800635c:	4603      	mov	r3, r0
 800635e:	f003 0304 	and.w	r3, r3, #4
 8006362:	2b04      	cmp	r3, #4
 8006364:	d115      	bne.n	8006392 <HAL_PCD_IRQHandler+0x7b8>
    {
      temp = hpcd->Instance->GOTGINT;
 8006366:	687b      	ldr	r3, [r7, #4]
 8006368:	681b      	ldr	r3, [r3, #0]
 800636a:	685b      	ldr	r3, [r3, #4]
 800636c:	61bb      	str	r3, [r7, #24]

      if ((temp & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 800636e:	69bb      	ldr	r3, [r7, #24]
 8006370:	f003 0304 	and.w	r3, r3, #4
 8006374:	2b00      	cmp	r3, #0
 8006376:	d002      	beq.n	800637e <HAL_PCD_IRQHandler+0x7a4>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8006378:	6878      	ldr	r0, [r7, #4]
 800637a:	f00b fded 	bl	8011f58 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= temp;
 800637e:	687b      	ldr	r3, [r7, #4]
 8006380:	681b      	ldr	r3, [r3, #0]
 8006382:	6859      	ldr	r1, [r3, #4]
 8006384:	687b      	ldr	r3, [r7, #4]
 8006386:	681b      	ldr	r3, [r3, #0]
 8006388:	69ba      	ldr	r2, [r7, #24]
 800638a:	430a      	orrs	r2, r1
 800638c:	605a      	str	r2, [r3, #4]
 800638e:	e000      	b.n	8006392 <HAL_PCD_IRQHandler+0x7b8>
      return;
 8006390:	bf00      	nop
    }
  }
}
 8006392:	3734      	adds	r7, #52	; 0x34
 8006394:	46bd      	mov	sp, r7
 8006396:	bd90      	pop	{r4, r7, pc}

08006398 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8006398:	b580      	push	{r7, lr}
 800639a:	b082      	sub	sp, #8
 800639c:	af00      	add	r7, sp, #0
 800639e:	6078      	str	r0, [r7, #4]
 80063a0:	460b      	mov	r3, r1
 80063a2:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 80063a4:	687b      	ldr	r3, [r7, #4]
 80063a6:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 80063aa:	2b01      	cmp	r3, #1
 80063ac:	d101      	bne.n	80063b2 <HAL_PCD_SetAddress+0x1a>
 80063ae:	2302      	movs	r3, #2
 80063b0:	e013      	b.n	80063da <HAL_PCD_SetAddress+0x42>
 80063b2:	687b      	ldr	r3, [r7, #4]
 80063b4:	2201      	movs	r2, #1
 80063b6:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  hpcd->USB_Address = address;
 80063ba:	687b      	ldr	r3, [r7, #4]
 80063bc:	78fa      	ldrb	r2, [r7, #3]
 80063be:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 80063c2:	687b      	ldr	r3, [r7, #4]
 80063c4:	681b      	ldr	r3, [r3, #0]
 80063c6:	78fa      	ldrb	r2, [r7, #3]
 80063c8:	4611      	mov	r1, r2
 80063ca:	4618      	mov	r0, r3
 80063cc:	f009 fae8 	bl	800f9a0 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 80063d0:	687b      	ldr	r3, [r7, #4]
 80063d2:	2200      	movs	r2, #0
 80063d4:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 80063d8:	2300      	movs	r3, #0
}
 80063da:	4618      	mov	r0, r3
 80063dc:	3708      	adds	r7, #8
 80063de:	46bd      	mov	sp, r7
 80063e0:	bd80      	pop	{r7, pc}

080063e2 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 80063e2:	b580      	push	{r7, lr}
 80063e4:	b084      	sub	sp, #16
 80063e6:	af00      	add	r7, sp, #0
 80063e8:	6078      	str	r0, [r7, #4]
 80063ea:	4608      	mov	r0, r1
 80063ec:	4611      	mov	r1, r2
 80063ee:	461a      	mov	r2, r3
 80063f0:	4603      	mov	r3, r0
 80063f2:	70fb      	strb	r3, [r7, #3]
 80063f4:	460b      	mov	r3, r1
 80063f6:	803b      	strh	r3, [r7, #0]
 80063f8:	4613      	mov	r3, r2
 80063fa:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 80063fc:	2300      	movs	r3, #0
 80063fe:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8006400:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8006404:	2b00      	cmp	r3, #0
 8006406:	da0f      	bge.n	8006428 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8006408:	78fb      	ldrb	r3, [r7, #3]
 800640a:	f003 020f 	and.w	r2, r3, #15
 800640e:	4613      	mov	r3, r2
 8006410:	00db      	lsls	r3, r3, #3
 8006412:	1a9b      	subs	r3, r3, r2
 8006414:	009b      	lsls	r3, r3, #2
 8006416:	3338      	adds	r3, #56	; 0x38
 8006418:	687a      	ldr	r2, [r7, #4]
 800641a:	4413      	add	r3, r2
 800641c:	3304      	adds	r3, #4
 800641e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8006420:	68fb      	ldr	r3, [r7, #12]
 8006422:	2201      	movs	r2, #1
 8006424:	705a      	strb	r2, [r3, #1]
 8006426:	e00f      	b.n	8006448 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8006428:	78fb      	ldrb	r3, [r7, #3]
 800642a:	f003 020f 	and.w	r2, r3, #15
 800642e:	4613      	mov	r3, r2
 8006430:	00db      	lsls	r3, r3, #3
 8006432:	1a9b      	subs	r3, r3, r2
 8006434:	009b      	lsls	r3, r3, #2
 8006436:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 800643a:	687a      	ldr	r2, [r7, #4]
 800643c:	4413      	add	r3, r2
 800643e:	3304      	adds	r3, #4
 8006440:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8006442:	68fb      	ldr	r3, [r7, #12]
 8006444:	2200      	movs	r2, #0
 8006446:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8006448:	78fb      	ldrb	r3, [r7, #3]
 800644a:	f003 030f 	and.w	r3, r3, #15
 800644e:	b2da      	uxtb	r2, r3
 8006450:	68fb      	ldr	r3, [r7, #12]
 8006452:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8006454:	883a      	ldrh	r2, [r7, #0]
 8006456:	68fb      	ldr	r3, [r7, #12]
 8006458:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 800645a:	68fb      	ldr	r3, [r7, #12]
 800645c:	78ba      	ldrb	r2, [r7, #2]
 800645e:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 8006460:	68fb      	ldr	r3, [r7, #12]
 8006462:	785b      	ldrb	r3, [r3, #1]
 8006464:	2b00      	cmp	r3, #0
 8006466:	d004      	beq.n	8006472 <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8006468:	68fb      	ldr	r3, [r7, #12]
 800646a:	781b      	ldrb	r3, [r3, #0]
 800646c:	b29a      	uxth	r2, r3
 800646e:	68fb      	ldr	r3, [r7, #12]
 8006470:	80da      	strh	r2, [r3, #6]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8006472:	78bb      	ldrb	r3, [r7, #2]
 8006474:	2b02      	cmp	r3, #2
 8006476:	d102      	bne.n	800647e <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 8006478:	68fb      	ldr	r3, [r7, #12]
 800647a:	2200      	movs	r2, #0
 800647c:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 800647e:	687b      	ldr	r3, [r7, #4]
 8006480:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8006484:	2b01      	cmp	r3, #1
 8006486:	d101      	bne.n	800648c <HAL_PCD_EP_Open+0xaa>
 8006488:	2302      	movs	r3, #2
 800648a:	e00e      	b.n	80064aa <HAL_PCD_EP_Open+0xc8>
 800648c:	687b      	ldr	r3, [r7, #4]
 800648e:	2201      	movs	r2, #1
 8006490:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8006494:	687b      	ldr	r3, [r7, #4]
 8006496:	681b      	ldr	r3, [r3, #0]
 8006498:	68f9      	ldr	r1, [r7, #12]
 800649a:	4618      	mov	r0, r3
 800649c:	f008 fc0e 	bl	800ecbc <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80064a0:	687b      	ldr	r3, [r7, #4]
 80064a2:	2200      	movs	r2, #0
 80064a4:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return ret;
 80064a8:	7afb      	ldrb	r3, [r7, #11]
}
 80064aa:	4618      	mov	r0, r3
 80064ac:	3710      	adds	r7, #16
 80064ae:	46bd      	mov	sp, r7
 80064b0:	bd80      	pop	{r7, pc}

080064b2 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80064b2:	b580      	push	{r7, lr}
 80064b4:	b084      	sub	sp, #16
 80064b6:	af00      	add	r7, sp, #0
 80064b8:	6078      	str	r0, [r7, #4]
 80064ba:	460b      	mov	r3, r1
 80064bc:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80064be:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80064c2:	2b00      	cmp	r3, #0
 80064c4:	da0f      	bge.n	80064e6 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80064c6:	78fb      	ldrb	r3, [r7, #3]
 80064c8:	f003 020f 	and.w	r2, r3, #15
 80064cc:	4613      	mov	r3, r2
 80064ce:	00db      	lsls	r3, r3, #3
 80064d0:	1a9b      	subs	r3, r3, r2
 80064d2:	009b      	lsls	r3, r3, #2
 80064d4:	3338      	adds	r3, #56	; 0x38
 80064d6:	687a      	ldr	r2, [r7, #4]
 80064d8:	4413      	add	r3, r2
 80064da:	3304      	adds	r3, #4
 80064dc:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80064de:	68fb      	ldr	r3, [r7, #12]
 80064e0:	2201      	movs	r2, #1
 80064e2:	705a      	strb	r2, [r3, #1]
 80064e4:	e00f      	b.n	8006506 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80064e6:	78fb      	ldrb	r3, [r7, #3]
 80064e8:	f003 020f 	and.w	r2, r3, #15
 80064ec:	4613      	mov	r3, r2
 80064ee:	00db      	lsls	r3, r3, #3
 80064f0:	1a9b      	subs	r3, r3, r2
 80064f2:	009b      	lsls	r3, r3, #2
 80064f4:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 80064f8:	687a      	ldr	r2, [r7, #4]
 80064fa:	4413      	add	r3, r2
 80064fc:	3304      	adds	r3, #4
 80064fe:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8006500:	68fb      	ldr	r3, [r7, #12]
 8006502:	2200      	movs	r2, #0
 8006504:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8006506:	78fb      	ldrb	r3, [r7, #3]
 8006508:	f003 030f 	and.w	r3, r3, #15
 800650c:	b2da      	uxtb	r2, r3
 800650e:	68fb      	ldr	r3, [r7, #12]
 8006510:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8006512:	687b      	ldr	r3, [r7, #4]
 8006514:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8006518:	2b01      	cmp	r3, #1
 800651a:	d101      	bne.n	8006520 <HAL_PCD_EP_Close+0x6e>
 800651c:	2302      	movs	r3, #2
 800651e:	e00e      	b.n	800653e <HAL_PCD_EP_Close+0x8c>
 8006520:	687b      	ldr	r3, [r7, #4]
 8006522:	2201      	movs	r2, #1
 8006524:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8006528:	687b      	ldr	r3, [r7, #4]
 800652a:	681b      	ldr	r3, [r3, #0]
 800652c:	68f9      	ldr	r1, [r7, #12]
 800652e:	4618      	mov	r0, r3
 8006530:	f008 fc4c 	bl	800edcc <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8006534:	687b      	ldr	r3, [r7, #4]
 8006536:	2200      	movs	r2, #0
 8006538:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  return HAL_OK;
 800653c:	2300      	movs	r3, #0
}
 800653e:	4618      	mov	r0, r3
 8006540:	3710      	adds	r7, #16
 8006542:	46bd      	mov	sp, r7
 8006544:	bd80      	pop	{r7, pc}

08006546 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8006546:	b580      	push	{r7, lr}
 8006548:	b086      	sub	sp, #24
 800654a:	af00      	add	r7, sp, #0
 800654c:	60f8      	str	r0, [r7, #12]
 800654e:	607a      	str	r2, [r7, #4]
 8006550:	603b      	str	r3, [r7, #0]
 8006552:	460b      	mov	r3, r1
 8006554:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8006556:	7afb      	ldrb	r3, [r7, #11]
 8006558:	f003 020f 	and.w	r2, r3, #15
 800655c:	4613      	mov	r3, r2
 800655e:	00db      	lsls	r3, r3, #3
 8006560:	1a9b      	subs	r3, r3, r2
 8006562:	009b      	lsls	r3, r3, #2
 8006564:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8006568:	68fa      	ldr	r2, [r7, #12]
 800656a:	4413      	add	r3, r2
 800656c:	3304      	adds	r3, #4
 800656e:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8006570:	697b      	ldr	r3, [r7, #20]
 8006572:	687a      	ldr	r2, [r7, #4]
 8006574:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8006576:	697b      	ldr	r3, [r7, #20]
 8006578:	683a      	ldr	r2, [r7, #0]
 800657a:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 800657c:	697b      	ldr	r3, [r7, #20]
 800657e:	2200      	movs	r2, #0
 8006580:	619a      	str	r2, [r3, #24]
  ep->is_in = 0U;
 8006582:	697b      	ldr	r3, [r7, #20]
 8006584:	2200      	movs	r2, #0
 8006586:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8006588:	7afb      	ldrb	r3, [r7, #11]
 800658a:	f003 030f 	and.w	r3, r3, #15
 800658e:	b2da      	uxtb	r2, r3
 8006590:	697b      	ldr	r3, [r7, #20]
 8006592:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8006594:	68fb      	ldr	r3, [r7, #12]
 8006596:	691b      	ldr	r3, [r3, #16]
 8006598:	2b01      	cmp	r3, #1
 800659a:	d102      	bne.n	80065a2 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 800659c:	687a      	ldr	r2, [r7, #4]
 800659e:	697b      	ldr	r3, [r7, #20]
 80065a0:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80065a2:	7afb      	ldrb	r3, [r7, #11]
 80065a4:	f003 030f 	and.w	r3, r3, #15
 80065a8:	2b00      	cmp	r3, #0
 80065aa:	d109      	bne.n	80065c0 <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80065ac:	68fb      	ldr	r3, [r7, #12]
 80065ae:	6818      	ldr	r0, [r3, #0]
 80065b0:	68fb      	ldr	r3, [r7, #12]
 80065b2:	691b      	ldr	r3, [r3, #16]
 80065b4:	b2db      	uxtb	r3, r3
 80065b6:	461a      	mov	r2, r3
 80065b8:	6979      	ldr	r1, [r7, #20]
 80065ba:	f008 ff2f 	bl	800f41c <USB_EP0StartXfer>
 80065be:	e008      	b.n	80065d2 <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80065c0:	68fb      	ldr	r3, [r7, #12]
 80065c2:	6818      	ldr	r0, [r3, #0]
 80065c4:	68fb      	ldr	r3, [r7, #12]
 80065c6:	691b      	ldr	r3, [r3, #16]
 80065c8:	b2db      	uxtb	r3, r3
 80065ca:	461a      	mov	r2, r3
 80065cc:	6979      	ldr	r1, [r7, #20]
 80065ce:	f008 fcd9 	bl	800ef84 <USB_EPStartXfer>
  }

  return HAL_OK;
 80065d2:	2300      	movs	r3, #0
}
 80065d4:	4618      	mov	r0, r3
 80065d6:	3718      	adds	r7, #24
 80065d8:	46bd      	mov	sp, r7
 80065da:	bd80      	pop	{r7, pc}

080065dc <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80065dc:	b580      	push	{r7, lr}
 80065de:	b086      	sub	sp, #24
 80065e0:	af00      	add	r7, sp, #0
 80065e2:	60f8      	str	r0, [r7, #12]
 80065e4:	607a      	str	r2, [r7, #4]
 80065e6:	603b      	str	r3, [r7, #0]
 80065e8:	460b      	mov	r3, r1
 80065ea:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80065ec:	7afb      	ldrb	r3, [r7, #11]
 80065ee:	f003 020f 	and.w	r2, r3, #15
 80065f2:	4613      	mov	r3, r2
 80065f4:	00db      	lsls	r3, r3, #3
 80065f6:	1a9b      	subs	r3, r3, r2
 80065f8:	009b      	lsls	r3, r3, #2
 80065fa:	3338      	adds	r3, #56	; 0x38
 80065fc:	68fa      	ldr	r2, [r7, #12]
 80065fe:	4413      	add	r3, r2
 8006600:	3304      	adds	r3, #4
 8006602:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8006604:	697b      	ldr	r3, [r7, #20]
 8006606:	687a      	ldr	r2, [r7, #4]
 8006608:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 800660a:	697b      	ldr	r3, [r7, #20]
 800660c:	683a      	ldr	r2, [r7, #0]
 800660e:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 8006610:	697b      	ldr	r3, [r7, #20]
 8006612:	2200      	movs	r2, #0
 8006614:	619a      	str	r2, [r3, #24]
  ep->is_in = 1U;
 8006616:	697b      	ldr	r3, [r7, #20]
 8006618:	2201      	movs	r2, #1
 800661a:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800661c:	7afb      	ldrb	r3, [r7, #11]
 800661e:	f003 030f 	and.w	r3, r3, #15
 8006622:	b2da      	uxtb	r2, r3
 8006624:	697b      	ldr	r3, [r7, #20]
 8006626:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8006628:	68fb      	ldr	r3, [r7, #12]
 800662a:	691b      	ldr	r3, [r3, #16]
 800662c:	2b01      	cmp	r3, #1
 800662e:	d102      	bne.n	8006636 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8006630:	687a      	ldr	r2, [r7, #4]
 8006632:	697b      	ldr	r3, [r7, #20]
 8006634:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8006636:	7afb      	ldrb	r3, [r7, #11]
 8006638:	f003 030f 	and.w	r3, r3, #15
 800663c:	2b00      	cmp	r3, #0
 800663e:	d109      	bne.n	8006654 <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8006640:	68fb      	ldr	r3, [r7, #12]
 8006642:	6818      	ldr	r0, [r3, #0]
 8006644:	68fb      	ldr	r3, [r7, #12]
 8006646:	691b      	ldr	r3, [r3, #16]
 8006648:	b2db      	uxtb	r3, r3
 800664a:	461a      	mov	r2, r3
 800664c:	6979      	ldr	r1, [r7, #20]
 800664e:	f008 fee5 	bl	800f41c <USB_EP0StartXfer>
 8006652:	e008      	b.n	8006666 <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8006654:	68fb      	ldr	r3, [r7, #12]
 8006656:	6818      	ldr	r0, [r3, #0]
 8006658:	68fb      	ldr	r3, [r7, #12]
 800665a:	691b      	ldr	r3, [r3, #16]
 800665c:	b2db      	uxtb	r3, r3
 800665e:	461a      	mov	r2, r3
 8006660:	6979      	ldr	r1, [r7, #20]
 8006662:	f008 fc8f 	bl	800ef84 <USB_EPStartXfer>
  }

  return HAL_OK;
 8006666:	2300      	movs	r3, #0
}
 8006668:	4618      	mov	r0, r3
 800666a:	3718      	adds	r7, #24
 800666c:	46bd      	mov	sp, r7
 800666e:	bd80      	pop	{r7, pc}

08006670 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8006670:	b580      	push	{r7, lr}
 8006672:	b084      	sub	sp, #16
 8006674:	af00      	add	r7, sp, #0
 8006676:	6078      	str	r0, [r7, #4]
 8006678:	460b      	mov	r3, r1
 800667a:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 800667c:	78fb      	ldrb	r3, [r7, #3]
 800667e:	f003 020f 	and.w	r2, r3, #15
 8006682:	687b      	ldr	r3, [r7, #4]
 8006684:	685b      	ldr	r3, [r3, #4]
 8006686:	429a      	cmp	r2, r3
 8006688:	d901      	bls.n	800668e <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 800668a:	2301      	movs	r3, #1
 800668c:	e050      	b.n	8006730 <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800668e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8006692:	2b00      	cmp	r3, #0
 8006694:	da0f      	bge.n	80066b6 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8006696:	78fb      	ldrb	r3, [r7, #3]
 8006698:	f003 020f 	and.w	r2, r3, #15
 800669c:	4613      	mov	r3, r2
 800669e:	00db      	lsls	r3, r3, #3
 80066a0:	1a9b      	subs	r3, r3, r2
 80066a2:	009b      	lsls	r3, r3, #2
 80066a4:	3338      	adds	r3, #56	; 0x38
 80066a6:	687a      	ldr	r2, [r7, #4]
 80066a8:	4413      	add	r3, r2
 80066aa:	3304      	adds	r3, #4
 80066ac:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80066ae:	68fb      	ldr	r3, [r7, #12]
 80066b0:	2201      	movs	r2, #1
 80066b2:	705a      	strb	r2, [r3, #1]
 80066b4:	e00d      	b.n	80066d2 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 80066b6:	78fa      	ldrb	r2, [r7, #3]
 80066b8:	4613      	mov	r3, r2
 80066ba:	00db      	lsls	r3, r3, #3
 80066bc:	1a9b      	subs	r3, r3, r2
 80066be:	009b      	lsls	r3, r3, #2
 80066c0:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 80066c4:	687a      	ldr	r2, [r7, #4]
 80066c6:	4413      	add	r3, r2
 80066c8:	3304      	adds	r3, #4
 80066ca:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80066cc:	68fb      	ldr	r3, [r7, #12]
 80066ce:	2200      	movs	r2, #0
 80066d0:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 80066d2:	68fb      	ldr	r3, [r7, #12]
 80066d4:	2201      	movs	r2, #1
 80066d6:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80066d8:	78fb      	ldrb	r3, [r7, #3]
 80066da:	f003 030f 	and.w	r3, r3, #15
 80066de:	b2da      	uxtb	r2, r3
 80066e0:	68fb      	ldr	r3, [r7, #12]
 80066e2:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80066e4:	687b      	ldr	r3, [r7, #4]
 80066e6:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 80066ea:	2b01      	cmp	r3, #1
 80066ec:	d101      	bne.n	80066f2 <HAL_PCD_EP_SetStall+0x82>
 80066ee:	2302      	movs	r3, #2
 80066f0:	e01e      	b.n	8006730 <HAL_PCD_EP_SetStall+0xc0>
 80066f2:	687b      	ldr	r3, [r7, #4]
 80066f4:	2201      	movs	r2, #1
 80066f6:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 80066fa:	687b      	ldr	r3, [r7, #4]
 80066fc:	681b      	ldr	r3, [r3, #0]
 80066fe:	68f9      	ldr	r1, [r7, #12]
 8006700:	4618      	mov	r0, r3
 8006702:	f009 f879 	bl	800f7f8 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8006706:	78fb      	ldrb	r3, [r7, #3]
 8006708:	f003 030f 	and.w	r3, r3, #15
 800670c:	2b00      	cmp	r3, #0
 800670e:	d10a      	bne.n	8006726 <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8006710:	687b      	ldr	r3, [r7, #4]
 8006712:	6818      	ldr	r0, [r3, #0]
 8006714:	687b      	ldr	r3, [r7, #4]
 8006716:	691b      	ldr	r3, [r3, #16]
 8006718:	b2d9      	uxtb	r1, r3
 800671a:	687b      	ldr	r3, [r7, #4]
 800671c:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8006720:	461a      	mov	r2, r3
 8006722:	f009 fa6b 	bl	800fbfc <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8006726:	687b      	ldr	r3, [r7, #4]
 8006728:	2200      	movs	r2, #0
 800672a:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 800672e:	2300      	movs	r3, #0
}
 8006730:	4618      	mov	r0, r3
 8006732:	3710      	adds	r7, #16
 8006734:	46bd      	mov	sp, r7
 8006736:	bd80      	pop	{r7, pc}

08006738 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8006738:	b580      	push	{r7, lr}
 800673a:	b084      	sub	sp, #16
 800673c:	af00      	add	r7, sp, #0
 800673e:	6078      	str	r0, [r7, #4]
 8006740:	460b      	mov	r3, r1
 8006742:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8006744:	78fb      	ldrb	r3, [r7, #3]
 8006746:	f003 020f 	and.w	r2, r3, #15
 800674a:	687b      	ldr	r3, [r7, #4]
 800674c:	685b      	ldr	r3, [r3, #4]
 800674e:	429a      	cmp	r2, r3
 8006750:	d901      	bls.n	8006756 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8006752:	2301      	movs	r3, #1
 8006754:	e042      	b.n	80067dc <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8006756:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800675a:	2b00      	cmp	r3, #0
 800675c:	da0f      	bge.n	800677e <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800675e:	78fb      	ldrb	r3, [r7, #3]
 8006760:	f003 020f 	and.w	r2, r3, #15
 8006764:	4613      	mov	r3, r2
 8006766:	00db      	lsls	r3, r3, #3
 8006768:	1a9b      	subs	r3, r3, r2
 800676a:	009b      	lsls	r3, r3, #2
 800676c:	3338      	adds	r3, #56	; 0x38
 800676e:	687a      	ldr	r2, [r7, #4]
 8006770:	4413      	add	r3, r2
 8006772:	3304      	adds	r3, #4
 8006774:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8006776:	68fb      	ldr	r3, [r7, #12]
 8006778:	2201      	movs	r2, #1
 800677a:	705a      	strb	r2, [r3, #1]
 800677c:	e00f      	b.n	800679e <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800677e:	78fb      	ldrb	r3, [r7, #3]
 8006780:	f003 020f 	and.w	r2, r3, #15
 8006784:	4613      	mov	r3, r2
 8006786:	00db      	lsls	r3, r3, #3
 8006788:	1a9b      	subs	r3, r3, r2
 800678a:	009b      	lsls	r3, r3, #2
 800678c:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8006790:	687a      	ldr	r2, [r7, #4]
 8006792:	4413      	add	r3, r2
 8006794:	3304      	adds	r3, #4
 8006796:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8006798:	68fb      	ldr	r3, [r7, #12]
 800679a:	2200      	movs	r2, #0
 800679c:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 800679e:	68fb      	ldr	r3, [r7, #12]
 80067a0:	2200      	movs	r2, #0
 80067a2:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80067a4:	78fb      	ldrb	r3, [r7, #3]
 80067a6:	f003 030f 	and.w	r3, r3, #15
 80067aa:	b2da      	uxtb	r2, r3
 80067ac:	68fb      	ldr	r3, [r7, #12]
 80067ae:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80067b0:	687b      	ldr	r3, [r7, #4]
 80067b2:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 80067b6:	2b01      	cmp	r3, #1
 80067b8:	d101      	bne.n	80067be <HAL_PCD_EP_ClrStall+0x86>
 80067ba:	2302      	movs	r3, #2
 80067bc:	e00e      	b.n	80067dc <HAL_PCD_EP_ClrStall+0xa4>
 80067be:	687b      	ldr	r3, [r7, #4]
 80067c0:	2201      	movs	r2, #1
 80067c2:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 80067c6:	687b      	ldr	r3, [r7, #4]
 80067c8:	681b      	ldr	r3, [r3, #0]
 80067ca:	68f9      	ldr	r1, [r7, #12]
 80067cc:	4618      	mov	r0, r3
 80067ce:	f009 f881 	bl	800f8d4 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 80067d2:	687b      	ldr	r3, [r7, #4]
 80067d4:	2200      	movs	r2, #0
 80067d6:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 80067da:	2300      	movs	r3, #0
}
 80067dc:	4618      	mov	r0, r3
 80067de:	3710      	adds	r7, #16
 80067e0:	46bd      	mov	sp, r7
 80067e2:	bd80      	pop	{r7, pc}

080067e4 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80067e4:	b580      	push	{r7, lr}
 80067e6:	b08a      	sub	sp, #40	; 0x28
 80067e8:	af02      	add	r7, sp, #8
 80067ea:	6078      	str	r0, [r7, #4]
 80067ec:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80067ee:	687b      	ldr	r3, [r7, #4]
 80067f0:	681b      	ldr	r3, [r3, #0]
 80067f2:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80067f4:	697b      	ldr	r3, [r7, #20]
 80067f6:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 80067f8:	683a      	ldr	r2, [r7, #0]
 80067fa:	4613      	mov	r3, r2
 80067fc:	00db      	lsls	r3, r3, #3
 80067fe:	1a9b      	subs	r3, r3, r2
 8006800:	009b      	lsls	r3, r3, #2
 8006802:	3338      	adds	r3, #56	; 0x38
 8006804:	687a      	ldr	r2, [r7, #4]
 8006806:	4413      	add	r3, r2
 8006808:	3304      	adds	r3, #4
 800680a:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 800680c:	68fb      	ldr	r3, [r7, #12]
 800680e:	699a      	ldr	r2, [r3, #24]
 8006810:	68fb      	ldr	r3, [r7, #12]
 8006812:	695b      	ldr	r3, [r3, #20]
 8006814:	429a      	cmp	r2, r3
 8006816:	d901      	bls.n	800681c <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8006818:	2301      	movs	r3, #1
 800681a:	e06c      	b.n	80068f6 <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 800681c:	68fb      	ldr	r3, [r7, #12]
 800681e:	695a      	ldr	r2, [r3, #20]
 8006820:	68fb      	ldr	r3, [r7, #12]
 8006822:	699b      	ldr	r3, [r3, #24]
 8006824:	1ad3      	subs	r3, r2, r3
 8006826:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8006828:	68fb      	ldr	r3, [r7, #12]
 800682a:	689b      	ldr	r3, [r3, #8]
 800682c:	69fa      	ldr	r2, [r7, #28]
 800682e:	429a      	cmp	r2, r3
 8006830:	d902      	bls.n	8006838 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8006832:	68fb      	ldr	r3, [r7, #12]
 8006834:	689b      	ldr	r3, [r3, #8]
 8006836:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8006838:	69fb      	ldr	r3, [r7, #28]
 800683a:	3303      	adds	r3, #3
 800683c:	089b      	lsrs	r3, r3, #2
 800683e:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8006840:	e02b      	b.n	800689a <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8006842:	68fb      	ldr	r3, [r7, #12]
 8006844:	695a      	ldr	r2, [r3, #20]
 8006846:	68fb      	ldr	r3, [r7, #12]
 8006848:	699b      	ldr	r3, [r3, #24]
 800684a:	1ad3      	subs	r3, r2, r3
 800684c:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 800684e:	68fb      	ldr	r3, [r7, #12]
 8006850:	689b      	ldr	r3, [r3, #8]
 8006852:	69fa      	ldr	r2, [r7, #28]
 8006854:	429a      	cmp	r2, r3
 8006856:	d902      	bls.n	800685e <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8006858:	68fb      	ldr	r3, [r7, #12]
 800685a:	689b      	ldr	r3, [r3, #8]
 800685c:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 800685e:	69fb      	ldr	r3, [r7, #28]
 8006860:	3303      	adds	r3, #3
 8006862:	089b      	lsrs	r3, r3, #2
 8006864:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8006866:	68fb      	ldr	r3, [r7, #12]
 8006868:	68d9      	ldr	r1, [r3, #12]
 800686a:	683b      	ldr	r3, [r7, #0]
 800686c:	b2da      	uxtb	r2, r3
 800686e:	69fb      	ldr	r3, [r7, #28]
 8006870:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8006872:	687b      	ldr	r3, [r7, #4]
 8006874:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8006876:	b2db      	uxtb	r3, r3
 8006878:	9300      	str	r3, [sp, #0]
 800687a:	4603      	mov	r3, r0
 800687c:	6978      	ldr	r0, [r7, #20]
 800687e:	f008 ff25 	bl	800f6cc <USB_WritePacket>

    ep->xfer_buff  += len;
 8006882:	68fb      	ldr	r3, [r7, #12]
 8006884:	68da      	ldr	r2, [r3, #12]
 8006886:	69fb      	ldr	r3, [r7, #28]
 8006888:	441a      	add	r2, r3
 800688a:	68fb      	ldr	r3, [r7, #12]
 800688c:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 800688e:	68fb      	ldr	r3, [r7, #12]
 8006890:	699a      	ldr	r2, [r3, #24]
 8006892:	69fb      	ldr	r3, [r7, #28]
 8006894:	441a      	add	r2, r3
 8006896:	68fb      	ldr	r3, [r7, #12]
 8006898:	619a      	str	r2, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800689a:	683b      	ldr	r3, [r7, #0]
 800689c:	015a      	lsls	r2, r3, #5
 800689e:	693b      	ldr	r3, [r7, #16]
 80068a0:	4413      	add	r3, r2
 80068a2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80068a6:	699b      	ldr	r3, [r3, #24]
 80068a8:	b29b      	uxth	r3, r3
 80068aa:	69ba      	ldr	r2, [r7, #24]
 80068ac:	429a      	cmp	r2, r3
 80068ae:	d809      	bhi.n	80068c4 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 80068b0:	68fb      	ldr	r3, [r7, #12]
 80068b2:	699a      	ldr	r2, [r3, #24]
 80068b4:	68fb      	ldr	r3, [r7, #12]
 80068b6:	695b      	ldr	r3, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80068b8:	429a      	cmp	r2, r3
 80068ba:	d203      	bcs.n	80068c4 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 80068bc:	68fb      	ldr	r3, [r7, #12]
 80068be:	695b      	ldr	r3, [r3, #20]
 80068c0:	2b00      	cmp	r3, #0
 80068c2:	d1be      	bne.n	8006842 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 80068c4:	68fb      	ldr	r3, [r7, #12]
 80068c6:	695a      	ldr	r2, [r3, #20]
 80068c8:	68fb      	ldr	r3, [r7, #12]
 80068ca:	699b      	ldr	r3, [r3, #24]
 80068cc:	429a      	cmp	r2, r3
 80068ce:	d811      	bhi.n	80068f4 <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 80068d0:	683b      	ldr	r3, [r7, #0]
 80068d2:	f003 030f 	and.w	r3, r3, #15
 80068d6:	2201      	movs	r2, #1
 80068d8:	fa02 f303 	lsl.w	r3, r2, r3
 80068dc:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80068de:	693b      	ldr	r3, [r7, #16]
 80068e0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80068e4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80068e6:	68bb      	ldr	r3, [r7, #8]
 80068e8:	43db      	mvns	r3, r3
 80068ea:	6939      	ldr	r1, [r7, #16]
 80068ec:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80068f0:	4013      	ands	r3, r2
 80068f2:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 80068f4:	2300      	movs	r3, #0
}
 80068f6:	4618      	mov	r0, r3
 80068f8:	3720      	adds	r7, #32
 80068fa:	46bd      	mov	sp, r7
 80068fc:	bd80      	pop	{r7, pc}
	...

08006900 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8006900:	b580      	push	{r7, lr}
 8006902:	b086      	sub	sp, #24
 8006904:	af00      	add	r7, sp, #0
 8006906:	6078      	str	r0, [r7, #4]
 8006908:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800690a:	687b      	ldr	r3, [r7, #4]
 800690c:	681b      	ldr	r3, [r3, #0]
 800690e:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006910:	697b      	ldr	r3, [r7, #20]
 8006912:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8006914:	697b      	ldr	r3, [r7, #20]
 8006916:	333c      	adds	r3, #60	; 0x3c
 8006918:	3304      	adds	r3, #4
 800691a:	681b      	ldr	r3, [r3, #0]
 800691c:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800691e:	683b      	ldr	r3, [r7, #0]
 8006920:	015a      	lsls	r2, r3, #5
 8006922:	693b      	ldr	r3, [r7, #16]
 8006924:	4413      	add	r3, r2
 8006926:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800692a:	689b      	ldr	r3, [r3, #8]
 800692c:	60bb      	str	r3, [r7, #8]

  if (hpcd->Init.dma_enable == 1U)
 800692e:	687b      	ldr	r3, [r7, #4]
 8006930:	691b      	ldr	r3, [r3, #16]
 8006932:	2b01      	cmp	r3, #1
 8006934:	f040 80a0 	bne.w	8006a78 <PCD_EP_OutXfrComplete_int+0x178>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8006938:	68bb      	ldr	r3, [r7, #8]
 800693a:	f003 0308 	and.w	r3, r3, #8
 800693e:	2b00      	cmp	r3, #0
 8006940:	d015      	beq.n	800696e <PCD_EP_OutXfrComplete_int+0x6e>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8006942:	68fb      	ldr	r3, [r7, #12]
 8006944:	4a72      	ldr	r2, [pc, #456]	; (8006b10 <PCD_EP_OutXfrComplete_int+0x210>)
 8006946:	4293      	cmp	r3, r2
 8006948:	f240 80dd 	bls.w	8006b06 <PCD_EP_OutXfrComplete_int+0x206>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800694c:	68bb      	ldr	r3, [r7, #8]
 800694e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8006952:	2b00      	cmp	r3, #0
 8006954:	f000 80d7 	beq.w	8006b06 <PCD_EP_OutXfrComplete_int+0x206>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8006958:	683b      	ldr	r3, [r7, #0]
 800695a:	015a      	lsls	r2, r3, #5
 800695c:	693b      	ldr	r3, [r7, #16]
 800695e:	4413      	add	r3, r2
 8006960:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006964:	461a      	mov	r2, r3
 8006966:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800696a:	6093      	str	r3, [r2, #8]
 800696c:	e0cb      	b.n	8006b06 <PCD_EP_OutXfrComplete_int+0x206>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 800696e:	68bb      	ldr	r3, [r7, #8]
 8006970:	f003 0320 	and.w	r3, r3, #32
 8006974:	2b00      	cmp	r3, #0
 8006976:	d009      	beq.n	800698c <PCD_EP_OutXfrComplete_int+0x8c>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8006978:	683b      	ldr	r3, [r7, #0]
 800697a:	015a      	lsls	r2, r3, #5
 800697c:	693b      	ldr	r3, [r7, #16]
 800697e:	4413      	add	r3, r2
 8006980:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006984:	461a      	mov	r2, r3
 8006986:	2320      	movs	r3, #32
 8006988:	6093      	str	r3, [r2, #8]
 800698a:	e0bc      	b.n	8006b06 <PCD_EP_OutXfrComplete_int+0x206>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 800698c:	68bb      	ldr	r3, [r7, #8]
 800698e:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8006992:	2b00      	cmp	r3, #0
 8006994:	f040 80b7 	bne.w	8006b06 <PCD_EP_OutXfrComplete_int+0x206>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8006998:	68fb      	ldr	r3, [r7, #12]
 800699a:	4a5d      	ldr	r2, [pc, #372]	; (8006b10 <PCD_EP_OutXfrComplete_int+0x210>)
 800699c:	4293      	cmp	r3, r2
 800699e:	d90f      	bls.n	80069c0 <PCD_EP_OutXfrComplete_int+0xc0>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80069a0:	68bb      	ldr	r3, [r7, #8]
 80069a2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80069a6:	2b00      	cmp	r3, #0
 80069a8:	d00a      	beq.n	80069c0 <PCD_EP_OutXfrComplete_int+0xc0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80069aa:	683b      	ldr	r3, [r7, #0]
 80069ac:	015a      	lsls	r2, r3, #5
 80069ae:	693b      	ldr	r3, [r7, #16]
 80069b0:	4413      	add	r3, r2
 80069b2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80069b6:	461a      	mov	r2, r3
 80069b8:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80069bc:	6093      	str	r3, [r2, #8]
 80069be:	e0a2      	b.n	8006b06 <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        /* out data packet received over EP0 */
        hpcd->OUT_ep[epnum].xfer_count =
          hpcd->OUT_ep[epnum].maxpacket -
 80069c0:	6879      	ldr	r1, [r7, #4]
 80069c2:	683a      	ldr	r2, [r7, #0]
 80069c4:	4613      	mov	r3, r2
 80069c6:	00db      	lsls	r3, r3, #3
 80069c8:	1a9b      	subs	r3, r3, r2
 80069ca:	009b      	lsls	r3, r3, #2
 80069cc:	440b      	add	r3, r1
 80069ce:	f503 7301 	add.w	r3, r3, #516	; 0x204
 80069d2:	681a      	ldr	r2, [r3, #0]
          (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 80069d4:	683b      	ldr	r3, [r7, #0]
 80069d6:	0159      	lsls	r1, r3, #5
 80069d8:	693b      	ldr	r3, [r7, #16]
 80069da:	440b      	add	r3, r1
 80069dc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80069e0:	691b      	ldr	r3, [r3, #16]
 80069e2:	f3c3 0312 	ubfx	r3, r3, #0, #19
          hpcd->OUT_ep[epnum].maxpacket -
 80069e6:	1ad1      	subs	r1, r2, r3
        hpcd->OUT_ep[epnum].xfer_count =
 80069e8:	6878      	ldr	r0, [r7, #4]
 80069ea:	683a      	ldr	r2, [r7, #0]
 80069ec:	4613      	mov	r3, r2
 80069ee:	00db      	lsls	r3, r3, #3
 80069f0:	1a9b      	subs	r3, r3, r2
 80069f2:	009b      	lsls	r3, r3, #2
 80069f4:	4403      	add	r3, r0
 80069f6:	f503 7305 	add.w	r3, r3, #532	; 0x214
 80069fa:	6019      	str	r1, [r3, #0]

        hpcd->OUT_ep[epnum].xfer_buff += hpcd->OUT_ep[epnum].maxpacket;
 80069fc:	6879      	ldr	r1, [r7, #4]
 80069fe:	683a      	ldr	r2, [r7, #0]
 8006a00:	4613      	mov	r3, r2
 8006a02:	00db      	lsls	r3, r3, #3
 8006a04:	1a9b      	subs	r3, r3, r2
 8006a06:	009b      	lsls	r3, r3, #2
 8006a08:	440b      	add	r3, r1
 8006a0a:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8006a0e:	6819      	ldr	r1, [r3, #0]
 8006a10:	6878      	ldr	r0, [r7, #4]
 8006a12:	683a      	ldr	r2, [r7, #0]
 8006a14:	4613      	mov	r3, r2
 8006a16:	00db      	lsls	r3, r3, #3
 8006a18:	1a9b      	subs	r3, r3, r2
 8006a1a:	009b      	lsls	r3, r3, #2
 8006a1c:	4403      	add	r3, r0
 8006a1e:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8006a22:	681b      	ldr	r3, [r3, #0]
 8006a24:	4419      	add	r1, r3
 8006a26:	6878      	ldr	r0, [r7, #4]
 8006a28:	683a      	ldr	r2, [r7, #0]
 8006a2a:	4613      	mov	r3, r2
 8006a2c:	00db      	lsls	r3, r3, #3
 8006a2e:	1a9b      	subs	r3, r3, r2
 8006a30:	009b      	lsls	r3, r3, #2
 8006a32:	4403      	add	r3, r0
 8006a34:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8006a38:	6019      	str	r1, [r3, #0]

        if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8006a3a:	683b      	ldr	r3, [r7, #0]
 8006a3c:	2b00      	cmp	r3, #0
 8006a3e:	d114      	bne.n	8006a6a <PCD_EP_OutXfrComplete_int+0x16a>
 8006a40:	6879      	ldr	r1, [r7, #4]
 8006a42:	683a      	ldr	r2, [r7, #0]
 8006a44:	4613      	mov	r3, r2
 8006a46:	00db      	lsls	r3, r3, #3
 8006a48:	1a9b      	subs	r3, r3, r2
 8006a4a:	009b      	lsls	r3, r3, #2
 8006a4c:	440b      	add	r3, r1
 8006a4e:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8006a52:	681b      	ldr	r3, [r3, #0]
 8006a54:	2b00      	cmp	r3, #0
 8006a56:	d108      	bne.n	8006a6a <PCD_EP_OutXfrComplete_int+0x16a>
        {
          /* this is ZLP, so prepare EP0 for next setup */
          (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8006a58:	687b      	ldr	r3, [r7, #4]
 8006a5a:	6818      	ldr	r0, [r3, #0]
 8006a5c:	687b      	ldr	r3, [r7, #4]
 8006a5e:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8006a62:	461a      	mov	r2, r3
 8006a64:	2101      	movs	r1, #1
 8006a66:	f009 f8c9 	bl	800fbfc <USB_EP0_OutStart>
        }
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8006a6a:	683b      	ldr	r3, [r7, #0]
 8006a6c:	b2db      	uxtb	r3, r3
 8006a6e:	4619      	mov	r1, r3
 8006a70:	6878      	ldr	r0, [r7, #4]
 8006a72:	f00b f99f 	bl	8011db4 <HAL_PCD_DataOutStageCallback>
 8006a76:	e046      	b.n	8006b06 <PCD_EP_OutXfrComplete_int+0x206>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8006a78:	68fb      	ldr	r3, [r7, #12]
 8006a7a:	4a26      	ldr	r2, [pc, #152]	; (8006b14 <PCD_EP_OutXfrComplete_int+0x214>)
 8006a7c:	4293      	cmp	r3, r2
 8006a7e:	d124      	bne.n	8006aca <PCD_EP_OutXfrComplete_int+0x1ca>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8006a80:	68bb      	ldr	r3, [r7, #8]
 8006a82:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006a86:	2b00      	cmp	r3, #0
 8006a88:	d00a      	beq.n	8006aa0 <PCD_EP_OutXfrComplete_int+0x1a0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8006a8a:	683b      	ldr	r3, [r7, #0]
 8006a8c:	015a      	lsls	r2, r3, #5
 8006a8e:	693b      	ldr	r3, [r7, #16]
 8006a90:	4413      	add	r3, r2
 8006a92:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006a96:	461a      	mov	r2, r3
 8006a98:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006a9c:	6093      	str	r3, [r2, #8]
 8006a9e:	e032      	b.n	8006b06 <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8006aa0:	68bb      	ldr	r3, [r7, #8]
 8006aa2:	f003 0320 	and.w	r3, r3, #32
 8006aa6:	2b00      	cmp	r3, #0
 8006aa8:	d008      	beq.n	8006abc <PCD_EP_OutXfrComplete_int+0x1bc>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8006aaa:	683b      	ldr	r3, [r7, #0]
 8006aac:	015a      	lsls	r2, r3, #5
 8006aae:	693b      	ldr	r3, [r7, #16]
 8006ab0:	4413      	add	r3, r2
 8006ab2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006ab6:	461a      	mov	r2, r3
 8006ab8:	2320      	movs	r3, #32
 8006aba:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8006abc:	683b      	ldr	r3, [r7, #0]
 8006abe:	b2db      	uxtb	r3, r3
 8006ac0:	4619      	mov	r1, r3
 8006ac2:	6878      	ldr	r0, [r7, #4]
 8006ac4:	f00b f976 	bl	8011db4 <HAL_PCD_DataOutStageCallback>
 8006ac8:	e01d      	b.n	8006b06 <PCD_EP_OutXfrComplete_int+0x206>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8006aca:	683b      	ldr	r3, [r7, #0]
 8006acc:	2b00      	cmp	r3, #0
 8006ace:	d114      	bne.n	8006afa <PCD_EP_OutXfrComplete_int+0x1fa>
 8006ad0:	6879      	ldr	r1, [r7, #4]
 8006ad2:	683a      	ldr	r2, [r7, #0]
 8006ad4:	4613      	mov	r3, r2
 8006ad6:	00db      	lsls	r3, r3, #3
 8006ad8:	1a9b      	subs	r3, r3, r2
 8006ada:	009b      	lsls	r3, r3, #2
 8006adc:	440b      	add	r3, r1
 8006ade:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8006ae2:	681b      	ldr	r3, [r3, #0]
 8006ae4:	2b00      	cmp	r3, #0
 8006ae6:	d108      	bne.n	8006afa <PCD_EP_OutXfrComplete_int+0x1fa>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 8006ae8:	687b      	ldr	r3, [r7, #4]
 8006aea:	6818      	ldr	r0, [r3, #0]
 8006aec:	687b      	ldr	r3, [r7, #4]
 8006aee:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8006af2:	461a      	mov	r2, r3
 8006af4:	2100      	movs	r1, #0
 8006af6:	f009 f881 	bl	800fbfc <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8006afa:	683b      	ldr	r3, [r7, #0]
 8006afc:	b2db      	uxtb	r3, r3
 8006afe:	4619      	mov	r1, r3
 8006b00:	6878      	ldr	r0, [r7, #4]
 8006b02:	f00b f957 	bl	8011db4 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8006b06:	2300      	movs	r3, #0
}
 8006b08:	4618      	mov	r0, r3
 8006b0a:	3718      	adds	r7, #24
 8006b0c:	46bd      	mov	sp, r7
 8006b0e:	bd80      	pop	{r7, pc}
 8006b10:	4f54300a 	.word	0x4f54300a
 8006b14:	4f54310a 	.word	0x4f54310a

08006b18 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8006b18:	b580      	push	{r7, lr}
 8006b1a:	b086      	sub	sp, #24
 8006b1c:	af00      	add	r7, sp, #0
 8006b1e:	6078      	str	r0, [r7, #4]
 8006b20:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8006b22:	687b      	ldr	r3, [r7, #4]
 8006b24:	681b      	ldr	r3, [r3, #0]
 8006b26:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006b28:	697b      	ldr	r3, [r7, #20]
 8006b2a:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8006b2c:	697b      	ldr	r3, [r7, #20]
 8006b2e:	333c      	adds	r3, #60	; 0x3c
 8006b30:	3304      	adds	r3, #4
 8006b32:	681b      	ldr	r3, [r3, #0]
 8006b34:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8006b36:	683b      	ldr	r3, [r7, #0]
 8006b38:	015a      	lsls	r2, r3, #5
 8006b3a:	693b      	ldr	r3, [r7, #16]
 8006b3c:	4413      	add	r3, r2
 8006b3e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006b42:	689b      	ldr	r3, [r3, #8]
 8006b44:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8006b46:	68fb      	ldr	r3, [r7, #12]
 8006b48:	4a15      	ldr	r2, [pc, #84]	; (8006ba0 <PCD_EP_OutSetupPacket_int+0x88>)
 8006b4a:	4293      	cmp	r3, r2
 8006b4c:	d90e      	bls.n	8006b6c <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8006b4e:	68bb      	ldr	r3, [r7, #8]
 8006b50:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8006b54:	2b00      	cmp	r3, #0
 8006b56:	d009      	beq.n	8006b6c <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8006b58:	683b      	ldr	r3, [r7, #0]
 8006b5a:	015a      	lsls	r2, r3, #5
 8006b5c:	693b      	ldr	r3, [r7, #16]
 8006b5e:	4413      	add	r3, r2
 8006b60:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006b64:	461a      	mov	r2, r3
 8006b66:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006b6a:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8006b6c:	6878      	ldr	r0, [r7, #4]
 8006b6e:	f00b f90f 	bl	8011d90 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 8006b72:	68fb      	ldr	r3, [r7, #12]
 8006b74:	4a0a      	ldr	r2, [pc, #40]	; (8006ba0 <PCD_EP_OutSetupPacket_int+0x88>)
 8006b76:	4293      	cmp	r3, r2
 8006b78:	d90c      	bls.n	8006b94 <PCD_EP_OutSetupPacket_int+0x7c>
 8006b7a:	687b      	ldr	r3, [r7, #4]
 8006b7c:	691b      	ldr	r3, [r3, #16]
 8006b7e:	2b01      	cmp	r3, #1
 8006b80:	d108      	bne.n	8006b94 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8006b82:	687b      	ldr	r3, [r7, #4]
 8006b84:	6818      	ldr	r0, [r3, #0]
 8006b86:	687b      	ldr	r3, [r7, #4]
 8006b88:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8006b8c:	461a      	mov	r2, r3
 8006b8e:	2101      	movs	r1, #1
 8006b90:	f009 f834 	bl	800fbfc <USB_EP0_OutStart>
  }

  return HAL_OK;
 8006b94:	2300      	movs	r3, #0
}
 8006b96:	4618      	mov	r0, r3
 8006b98:	3718      	adds	r7, #24
 8006b9a:	46bd      	mov	sp, r7
 8006b9c:	bd80      	pop	{r7, pc}
 8006b9e:	bf00      	nop
 8006ba0:	4f54300a 	.word	0x4f54300a

08006ba4 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8006ba4:	b480      	push	{r7}
 8006ba6:	b085      	sub	sp, #20
 8006ba8:	af00      	add	r7, sp, #0
 8006baa:	6078      	str	r0, [r7, #4]
 8006bac:	460b      	mov	r3, r1
 8006bae:	70fb      	strb	r3, [r7, #3]
 8006bb0:	4613      	mov	r3, r2
 8006bb2:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8006bb4:	687b      	ldr	r3, [r7, #4]
 8006bb6:	681b      	ldr	r3, [r3, #0]
 8006bb8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006bba:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8006bbc:	78fb      	ldrb	r3, [r7, #3]
 8006bbe:	2b00      	cmp	r3, #0
 8006bc0:	d107      	bne.n	8006bd2 <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8006bc2:	883b      	ldrh	r3, [r7, #0]
 8006bc4:	0419      	lsls	r1, r3, #16
 8006bc6:	687b      	ldr	r3, [r7, #4]
 8006bc8:	681b      	ldr	r3, [r3, #0]
 8006bca:	68ba      	ldr	r2, [r7, #8]
 8006bcc:	430a      	orrs	r2, r1
 8006bce:	629a      	str	r2, [r3, #40]	; 0x28
 8006bd0:	e028      	b.n	8006c24 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8006bd2:	687b      	ldr	r3, [r7, #4]
 8006bd4:	681b      	ldr	r3, [r3, #0]
 8006bd6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006bd8:	0c1b      	lsrs	r3, r3, #16
 8006bda:	68ba      	ldr	r2, [r7, #8]
 8006bdc:	4413      	add	r3, r2
 8006bde:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8006be0:	2300      	movs	r3, #0
 8006be2:	73fb      	strb	r3, [r7, #15]
 8006be4:	e00d      	b.n	8006c02 <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8006be6:	687b      	ldr	r3, [r7, #4]
 8006be8:	681a      	ldr	r2, [r3, #0]
 8006bea:	7bfb      	ldrb	r3, [r7, #15]
 8006bec:	3340      	adds	r3, #64	; 0x40
 8006bee:	009b      	lsls	r3, r3, #2
 8006bf0:	4413      	add	r3, r2
 8006bf2:	685b      	ldr	r3, [r3, #4]
 8006bf4:	0c1b      	lsrs	r3, r3, #16
 8006bf6:	68ba      	ldr	r2, [r7, #8]
 8006bf8:	4413      	add	r3, r2
 8006bfa:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8006bfc:	7bfb      	ldrb	r3, [r7, #15]
 8006bfe:	3301      	adds	r3, #1
 8006c00:	73fb      	strb	r3, [r7, #15]
 8006c02:	7bfa      	ldrb	r2, [r7, #15]
 8006c04:	78fb      	ldrb	r3, [r7, #3]
 8006c06:	3b01      	subs	r3, #1
 8006c08:	429a      	cmp	r2, r3
 8006c0a:	d3ec      	bcc.n	8006be6 <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8006c0c:	883b      	ldrh	r3, [r7, #0]
 8006c0e:	0418      	lsls	r0, r3, #16
 8006c10:	687b      	ldr	r3, [r7, #4]
 8006c12:	6819      	ldr	r1, [r3, #0]
 8006c14:	78fb      	ldrb	r3, [r7, #3]
 8006c16:	3b01      	subs	r3, #1
 8006c18:	68ba      	ldr	r2, [r7, #8]
 8006c1a:	4302      	orrs	r2, r0
 8006c1c:	3340      	adds	r3, #64	; 0x40
 8006c1e:	009b      	lsls	r3, r3, #2
 8006c20:	440b      	add	r3, r1
 8006c22:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8006c24:	2300      	movs	r3, #0
}
 8006c26:	4618      	mov	r0, r3
 8006c28:	3714      	adds	r7, #20
 8006c2a:	46bd      	mov	sp, r7
 8006c2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c30:	4770      	bx	lr

08006c32 <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 8006c32:	b480      	push	{r7}
 8006c34:	b083      	sub	sp, #12
 8006c36:	af00      	add	r7, sp, #0
 8006c38:	6078      	str	r0, [r7, #4]
 8006c3a:	460b      	mov	r3, r1
 8006c3c:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 8006c3e:	687b      	ldr	r3, [r7, #4]
 8006c40:	681b      	ldr	r3, [r3, #0]
 8006c42:	887a      	ldrh	r2, [r7, #2]
 8006c44:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8006c46:	2300      	movs	r3, #0
}
 8006c48:	4618      	mov	r0, r3
 8006c4a:	370c      	adds	r7, #12
 8006c4c:	46bd      	mov	sp, r7
 8006c4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c52:	4770      	bx	lr

08006c54 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8006c54:	b480      	push	{r7}
 8006c56:	b085      	sub	sp, #20
 8006c58:	af00      	add	r7, sp, #0
 8006c5a:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8006c5c:	687b      	ldr	r3, [r7, #4]
 8006c5e:	681b      	ldr	r3, [r3, #0]
 8006c60:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 8006c62:	687b      	ldr	r3, [r7, #4]
 8006c64:	2201      	movs	r2, #1
 8006c66:	f8c3 23fc 	str.w	r2, [r3, #1020]	; 0x3fc
  hpcd->LPM_State = LPM_L0;
 8006c6a:	687b      	ldr	r3, [r7, #4]
 8006c6c:	2200      	movs	r2, #0
 8006c6e:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8006c72:	68fb      	ldr	r3, [r7, #12]
 8006c74:	699b      	ldr	r3, [r3, #24]
 8006c76:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8006c7a:	68fb      	ldr	r3, [r7, #12]
 8006c7c:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8006c7e:	68fb      	ldr	r3, [r7, #12]
 8006c80:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8006c82:	4b05      	ldr	r3, [pc, #20]	; (8006c98 <HAL_PCDEx_ActivateLPM+0x44>)
 8006c84:	4313      	orrs	r3, r2
 8006c86:	68fa      	ldr	r2, [r7, #12]
 8006c88:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 8006c8a:	2300      	movs	r3, #0
}
 8006c8c:	4618      	mov	r0, r3
 8006c8e:	3714      	adds	r7, #20
 8006c90:	46bd      	mov	sp, r7
 8006c92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c96:	4770      	bx	lr
 8006c98:	10000003 	.word	0x10000003

08006c9c <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8006c9c:	b480      	push	{r7}
 8006c9e:	b083      	sub	sp, #12
 8006ca0:	af00      	add	r7, sp, #0
 8006ca2:	6078      	str	r0, [r7, #4]
 8006ca4:	460b      	mov	r3, r1
 8006ca6:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8006ca8:	bf00      	nop
 8006caa:	370c      	adds	r7, #12
 8006cac:	46bd      	mov	sp, r7
 8006cae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cb2:	4770      	bx	lr

08006cb4 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8006cb4:	b580      	push	{r7, lr}
 8006cb6:	b084      	sub	sp, #16
 8006cb8:	af00      	add	r7, sp, #0
 8006cba:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 8006cbc:	4b19      	ldr	r3, [pc, #100]	; (8006d24 <HAL_PWREx_ConfigSupply+0x70>)
 8006cbe:	68db      	ldr	r3, [r3, #12]
 8006cc0:	f003 0304 	and.w	r3, r3, #4
 8006cc4:	2b04      	cmp	r3, #4
 8006cc6:	d00a      	beq.n	8006cde <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8006cc8:	4b16      	ldr	r3, [pc, #88]	; (8006d24 <HAL_PWREx_ConfigSupply+0x70>)
 8006cca:	68db      	ldr	r3, [r3, #12]
 8006ccc:	f003 0307 	and.w	r3, r3, #7
 8006cd0:	687a      	ldr	r2, [r7, #4]
 8006cd2:	429a      	cmp	r2, r3
 8006cd4:	d001      	beq.n	8006cda <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8006cd6:	2301      	movs	r3, #1
 8006cd8:	e01f      	b.n	8006d1a <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8006cda:	2300      	movs	r3, #0
 8006cdc:	e01d      	b.n	8006d1a <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8006cde:	4b11      	ldr	r3, [pc, #68]	; (8006d24 <HAL_PWREx_ConfigSupply+0x70>)
 8006ce0:	68db      	ldr	r3, [r3, #12]
 8006ce2:	f023 0207 	bic.w	r2, r3, #7
 8006ce6:	490f      	ldr	r1, [pc, #60]	; (8006d24 <HAL_PWREx_ConfigSupply+0x70>)
 8006ce8:	687b      	ldr	r3, [r7, #4]
 8006cea:	4313      	orrs	r3, r2
 8006cec:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8006cee:	f7fb fb59 	bl	80023a4 <HAL_GetTick>
 8006cf2:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8006cf4:	e009      	b.n	8006d0a <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8006cf6:	f7fb fb55 	bl	80023a4 <HAL_GetTick>
 8006cfa:	4602      	mov	r2, r0
 8006cfc:	68fb      	ldr	r3, [r7, #12]
 8006cfe:	1ad3      	subs	r3, r2, r3
 8006d00:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8006d04:	d901      	bls.n	8006d0a <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8006d06:	2301      	movs	r3, #1
 8006d08:	e007      	b.n	8006d1a <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8006d0a:	4b06      	ldr	r3, [pc, #24]	; (8006d24 <HAL_PWREx_ConfigSupply+0x70>)
 8006d0c:	685b      	ldr	r3, [r3, #4]
 8006d0e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8006d12:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006d16:	d1ee      	bne.n	8006cf6 <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8006d18:	2300      	movs	r3, #0
}
 8006d1a:	4618      	mov	r0, r3
 8006d1c:	3710      	adds	r7, #16
 8006d1e:	46bd      	mov	sp, r7
 8006d20:	bd80      	pop	{r7, pc}
 8006d22:	bf00      	nop
 8006d24:	58024800 	.word	0x58024800

08006d28 <HAL_PWREx_EnableUSBVoltageDetector>:
/**
  * @brief Enable the USB voltage level detector.
  * @retval None.
  */
void HAL_PWREx_EnableUSBVoltageDetector (void)
{
 8006d28:	b480      	push	{r7}
 8006d2a:	af00      	add	r7, sp, #0
  /* Enable the USB voltage detector */
  SET_BIT (PWR->CR3, PWR_CR3_USB33DEN);
 8006d2c:	4b05      	ldr	r3, [pc, #20]	; (8006d44 <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 8006d2e:	68db      	ldr	r3, [r3, #12]
 8006d30:	4a04      	ldr	r2, [pc, #16]	; (8006d44 <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 8006d32:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8006d36:	60d3      	str	r3, [r2, #12]
}
 8006d38:	bf00      	nop
 8006d3a:	46bd      	mov	sp, r7
 8006d3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d40:	4770      	bx	lr
 8006d42:	bf00      	nop
 8006d44:	58024800 	.word	0x58024800

08006d48 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8006d48:	b580      	push	{r7, lr}
 8006d4a:	b08c      	sub	sp, #48	; 0x30
 8006d4c:	af00      	add	r7, sp, #0
 8006d4e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

    /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8006d50:	687b      	ldr	r3, [r7, #4]
 8006d52:	2b00      	cmp	r3, #0
 8006d54:	d101      	bne.n	8006d5a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8006d56:	2301      	movs	r3, #1
 8006d58:	e3ff      	b.n	800755a <HAL_RCC_OscConfig+0x812>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8006d5a:	687b      	ldr	r3, [r7, #4]
 8006d5c:	681b      	ldr	r3, [r3, #0]
 8006d5e:	f003 0301 	and.w	r3, r3, #1
 8006d62:	2b00      	cmp	r3, #0
 8006d64:	f000 8087 	beq.w	8006e76 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8006d68:	4b99      	ldr	r3, [pc, #612]	; (8006fd0 <HAL_RCC_OscConfig+0x288>)
 8006d6a:	691b      	ldr	r3, [r3, #16]
 8006d6c:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8006d70:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8006d72:	4b97      	ldr	r3, [pc, #604]	; (8006fd0 <HAL_RCC_OscConfig+0x288>)
 8006d74:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006d76:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8006d78:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006d7a:	2b10      	cmp	r3, #16
 8006d7c:	d007      	beq.n	8006d8e <HAL_RCC_OscConfig+0x46>
 8006d7e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006d80:	2b18      	cmp	r3, #24
 8006d82:	d110      	bne.n	8006da6 <HAL_RCC_OscConfig+0x5e>
 8006d84:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006d86:	f003 0303 	and.w	r3, r3, #3
 8006d8a:	2b02      	cmp	r3, #2
 8006d8c:	d10b      	bne.n	8006da6 <HAL_RCC_OscConfig+0x5e>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006d8e:	4b90      	ldr	r3, [pc, #576]	; (8006fd0 <HAL_RCC_OscConfig+0x288>)
 8006d90:	681b      	ldr	r3, [r3, #0]
 8006d92:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006d96:	2b00      	cmp	r3, #0
 8006d98:	d06c      	beq.n	8006e74 <HAL_RCC_OscConfig+0x12c>
 8006d9a:	687b      	ldr	r3, [r7, #4]
 8006d9c:	685b      	ldr	r3, [r3, #4]
 8006d9e:	2b00      	cmp	r3, #0
 8006da0:	d168      	bne.n	8006e74 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8006da2:	2301      	movs	r3, #1
 8006da4:	e3d9      	b.n	800755a <HAL_RCC_OscConfig+0x812>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8006da6:	687b      	ldr	r3, [r7, #4]
 8006da8:	685b      	ldr	r3, [r3, #4]
 8006daa:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006dae:	d106      	bne.n	8006dbe <HAL_RCC_OscConfig+0x76>
 8006db0:	4b87      	ldr	r3, [pc, #540]	; (8006fd0 <HAL_RCC_OscConfig+0x288>)
 8006db2:	681b      	ldr	r3, [r3, #0]
 8006db4:	4a86      	ldr	r2, [pc, #536]	; (8006fd0 <HAL_RCC_OscConfig+0x288>)
 8006db6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006dba:	6013      	str	r3, [r2, #0]
 8006dbc:	e02e      	b.n	8006e1c <HAL_RCC_OscConfig+0xd4>
 8006dbe:	687b      	ldr	r3, [r7, #4]
 8006dc0:	685b      	ldr	r3, [r3, #4]
 8006dc2:	2b00      	cmp	r3, #0
 8006dc4:	d10c      	bne.n	8006de0 <HAL_RCC_OscConfig+0x98>
 8006dc6:	4b82      	ldr	r3, [pc, #520]	; (8006fd0 <HAL_RCC_OscConfig+0x288>)
 8006dc8:	681b      	ldr	r3, [r3, #0]
 8006dca:	4a81      	ldr	r2, [pc, #516]	; (8006fd0 <HAL_RCC_OscConfig+0x288>)
 8006dcc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006dd0:	6013      	str	r3, [r2, #0]
 8006dd2:	4b7f      	ldr	r3, [pc, #508]	; (8006fd0 <HAL_RCC_OscConfig+0x288>)
 8006dd4:	681b      	ldr	r3, [r3, #0]
 8006dd6:	4a7e      	ldr	r2, [pc, #504]	; (8006fd0 <HAL_RCC_OscConfig+0x288>)
 8006dd8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006ddc:	6013      	str	r3, [r2, #0]
 8006dde:	e01d      	b.n	8006e1c <HAL_RCC_OscConfig+0xd4>
 8006de0:	687b      	ldr	r3, [r7, #4]
 8006de2:	685b      	ldr	r3, [r3, #4]
 8006de4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8006de8:	d10c      	bne.n	8006e04 <HAL_RCC_OscConfig+0xbc>
 8006dea:	4b79      	ldr	r3, [pc, #484]	; (8006fd0 <HAL_RCC_OscConfig+0x288>)
 8006dec:	681b      	ldr	r3, [r3, #0]
 8006dee:	4a78      	ldr	r2, [pc, #480]	; (8006fd0 <HAL_RCC_OscConfig+0x288>)
 8006df0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8006df4:	6013      	str	r3, [r2, #0]
 8006df6:	4b76      	ldr	r3, [pc, #472]	; (8006fd0 <HAL_RCC_OscConfig+0x288>)
 8006df8:	681b      	ldr	r3, [r3, #0]
 8006dfa:	4a75      	ldr	r2, [pc, #468]	; (8006fd0 <HAL_RCC_OscConfig+0x288>)
 8006dfc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006e00:	6013      	str	r3, [r2, #0]
 8006e02:	e00b      	b.n	8006e1c <HAL_RCC_OscConfig+0xd4>
 8006e04:	4b72      	ldr	r3, [pc, #456]	; (8006fd0 <HAL_RCC_OscConfig+0x288>)
 8006e06:	681b      	ldr	r3, [r3, #0]
 8006e08:	4a71      	ldr	r2, [pc, #452]	; (8006fd0 <HAL_RCC_OscConfig+0x288>)
 8006e0a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006e0e:	6013      	str	r3, [r2, #0]
 8006e10:	4b6f      	ldr	r3, [pc, #444]	; (8006fd0 <HAL_RCC_OscConfig+0x288>)
 8006e12:	681b      	ldr	r3, [r3, #0]
 8006e14:	4a6e      	ldr	r2, [pc, #440]	; (8006fd0 <HAL_RCC_OscConfig+0x288>)
 8006e16:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006e1a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8006e1c:	687b      	ldr	r3, [r7, #4]
 8006e1e:	685b      	ldr	r3, [r3, #4]
 8006e20:	2b00      	cmp	r3, #0
 8006e22:	d013      	beq.n	8006e4c <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006e24:	f7fb fabe 	bl	80023a4 <HAL_GetTick>
 8006e28:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8006e2a:	e008      	b.n	8006e3e <HAL_RCC_OscConfig+0xf6>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8006e2c:	f7fb faba 	bl	80023a4 <HAL_GetTick>
 8006e30:	4602      	mov	r2, r0
 8006e32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e34:	1ad3      	subs	r3, r2, r3
 8006e36:	2b64      	cmp	r3, #100	; 0x64
 8006e38:	d901      	bls.n	8006e3e <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8006e3a:	2303      	movs	r3, #3
 8006e3c:	e38d      	b.n	800755a <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8006e3e:	4b64      	ldr	r3, [pc, #400]	; (8006fd0 <HAL_RCC_OscConfig+0x288>)
 8006e40:	681b      	ldr	r3, [r3, #0]
 8006e42:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006e46:	2b00      	cmp	r3, #0
 8006e48:	d0f0      	beq.n	8006e2c <HAL_RCC_OscConfig+0xe4>
 8006e4a:	e014      	b.n	8006e76 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006e4c:	f7fb faaa 	bl	80023a4 <HAL_GetTick>
 8006e50:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8006e52:	e008      	b.n	8006e66 <HAL_RCC_OscConfig+0x11e>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8006e54:	f7fb faa6 	bl	80023a4 <HAL_GetTick>
 8006e58:	4602      	mov	r2, r0
 8006e5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e5c:	1ad3      	subs	r3, r2, r3
 8006e5e:	2b64      	cmp	r3, #100	; 0x64
 8006e60:	d901      	bls.n	8006e66 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8006e62:	2303      	movs	r3, #3
 8006e64:	e379      	b.n	800755a <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8006e66:	4b5a      	ldr	r3, [pc, #360]	; (8006fd0 <HAL_RCC_OscConfig+0x288>)
 8006e68:	681b      	ldr	r3, [r3, #0]
 8006e6a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006e6e:	2b00      	cmp	r3, #0
 8006e70:	d1f0      	bne.n	8006e54 <HAL_RCC_OscConfig+0x10c>
 8006e72:	e000      	b.n	8006e76 <HAL_RCC_OscConfig+0x12e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006e74:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8006e76:	687b      	ldr	r3, [r7, #4]
 8006e78:	681b      	ldr	r3, [r3, #0]
 8006e7a:	f003 0302 	and.w	r3, r3, #2
 8006e7e:	2b00      	cmp	r3, #0
 8006e80:	f000 80ae 	beq.w	8006fe0 <HAL_RCC_OscConfig+0x298>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8006e84:	4b52      	ldr	r3, [pc, #328]	; (8006fd0 <HAL_RCC_OscConfig+0x288>)
 8006e86:	691b      	ldr	r3, [r3, #16]
 8006e88:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8006e8c:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8006e8e:	4b50      	ldr	r3, [pc, #320]	; (8006fd0 <HAL_RCC_OscConfig+0x288>)
 8006e90:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006e92:	61fb      	str	r3, [r7, #28]
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8006e94:	6a3b      	ldr	r3, [r7, #32]
 8006e96:	2b00      	cmp	r3, #0
 8006e98:	d007      	beq.n	8006eaa <HAL_RCC_OscConfig+0x162>
 8006e9a:	6a3b      	ldr	r3, [r7, #32]
 8006e9c:	2b18      	cmp	r3, #24
 8006e9e:	d13a      	bne.n	8006f16 <HAL_RCC_OscConfig+0x1ce>
 8006ea0:	69fb      	ldr	r3, [r7, #28]
 8006ea2:	f003 0303 	and.w	r3, r3, #3
 8006ea6:	2b00      	cmp	r3, #0
 8006ea8:	d135      	bne.n	8006f16 <HAL_RCC_OscConfig+0x1ce>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8006eaa:	4b49      	ldr	r3, [pc, #292]	; (8006fd0 <HAL_RCC_OscConfig+0x288>)
 8006eac:	681b      	ldr	r3, [r3, #0]
 8006eae:	f003 0304 	and.w	r3, r3, #4
 8006eb2:	2b00      	cmp	r3, #0
 8006eb4:	d005      	beq.n	8006ec2 <HAL_RCC_OscConfig+0x17a>
 8006eb6:	687b      	ldr	r3, [r7, #4]
 8006eb8:	68db      	ldr	r3, [r3, #12]
 8006eba:	2b00      	cmp	r3, #0
 8006ebc:	d101      	bne.n	8006ec2 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8006ebe:	2301      	movs	r3, #1
 8006ec0:	e34b      	b.n	800755a <HAL_RCC_OscConfig+0x812>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006ec2:	f7fb fa9f 	bl	8002404 <HAL_GetREVID>
 8006ec6:	4603      	mov	r3, r0
 8006ec8:	f241 0203 	movw	r2, #4099	; 0x1003
 8006ecc:	4293      	cmp	r3, r2
 8006ece:	d817      	bhi.n	8006f00 <HAL_RCC_OscConfig+0x1b8>
 8006ed0:	687b      	ldr	r3, [r7, #4]
 8006ed2:	691b      	ldr	r3, [r3, #16]
 8006ed4:	2b40      	cmp	r3, #64	; 0x40
 8006ed6:	d108      	bne.n	8006eea <HAL_RCC_OscConfig+0x1a2>
 8006ed8:	4b3d      	ldr	r3, [pc, #244]	; (8006fd0 <HAL_RCC_OscConfig+0x288>)
 8006eda:	685b      	ldr	r3, [r3, #4]
 8006edc:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8006ee0:	4a3b      	ldr	r2, [pc, #236]	; (8006fd0 <HAL_RCC_OscConfig+0x288>)
 8006ee2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006ee6:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8006ee8:	e07a      	b.n	8006fe0 <HAL_RCC_OscConfig+0x298>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006eea:	4b39      	ldr	r3, [pc, #228]	; (8006fd0 <HAL_RCC_OscConfig+0x288>)
 8006eec:	685b      	ldr	r3, [r3, #4]
 8006eee:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8006ef2:	687b      	ldr	r3, [r7, #4]
 8006ef4:	691b      	ldr	r3, [r3, #16]
 8006ef6:	031b      	lsls	r3, r3, #12
 8006ef8:	4935      	ldr	r1, [pc, #212]	; (8006fd0 <HAL_RCC_OscConfig+0x288>)
 8006efa:	4313      	orrs	r3, r2
 8006efc:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8006efe:	e06f      	b.n	8006fe0 <HAL_RCC_OscConfig+0x298>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006f00:	4b33      	ldr	r3, [pc, #204]	; (8006fd0 <HAL_RCC_OscConfig+0x288>)
 8006f02:	685b      	ldr	r3, [r3, #4]
 8006f04:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8006f08:	687b      	ldr	r3, [r7, #4]
 8006f0a:	691b      	ldr	r3, [r3, #16]
 8006f0c:	061b      	lsls	r3, r3, #24
 8006f0e:	4930      	ldr	r1, [pc, #192]	; (8006fd0 <HAL_RCC_OscConfig+0x288>)
 8006f10:	4313      	orrs	r3, r2
 8006f12:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8006f14:	e064      	b.n	8006fe0 <HAL_RCC_OscConfig+0x298>
    }

    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8006f16:	687b      	ldr	r3, [r7, #4]
 8006f18:	68db      	ldr	r3, [r3, #12]
 8006f1a:	2b00      	cmp	r3, #0
 8006f1c:	d045      	beq.n	8006faa <HAL_RCC_OscConfig+0x262>
      {
     /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8006f1e:	4b2c      	ldr	r3, [pc, #176]	; (8006fd0 <HAL_RCC_OscConfig+0x288>)
 8006f20:	681b      	ldr	r3, [r3, #0]
 8006f22:	f023 0219 	bic.w	r2, r3, #25
 8006f26:	687b      	ldr	r3, [r7, #4]
 8006f28:	68db      	ldr	r3, [r3, #12]
 8006f2a:	4929      	ldr	r1, [pc, #164]	; (8006fd0 <HAL_RCC_OscConfig+0x288>)
 8006f2c:	4313      	orrs	r3, r2
 8006f2e:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006f30:	f7fb fa38 	bl	80023a4 <HAL_GetTick>
 8006f34:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8006f36:	e008      	b.n	8006f4a <HAL_RCC_OscConfig+0x202>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8006f38:	f7fb fa34 	bl	80023a4 <HAL_GetTick>
 8006f3c:	4602      	mov	r2, r0
 8006f3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f40:	1ad3      	subs	r3, r2, r3
 8006f42:	2b02      	cmp	r3, #2
 8006f44:	d901      	bls.n	8006f4a <HAL_RCC_OscConfig+0x202>
          {
            return HAL_TIMEOUT;
 8006f46:	2303      	movs	r3, #3
 8006f48:	e307      	b.n	800755a <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8006f4a:	4b21      	ldr	r3, [pc, #132]	; (8006fd0 <HAL_RCC_OscConfig+0x288>)
 8006f4c:	681b      	ldr	r3, [r3, #0]
 8006f4e:	f003 0304 	and.w	r3, r3, #4
 8006f52:	2b00      	cmp	r3, #0
 8006f54:	d0f0      	beq.n	8006f38 <HAL_RCC_OscConfig+0x1f0>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006f56:	f7fb fa55 	bl	8002404 <HAL_GetREVID>
 8006f5a:	4603      	mov	r3, r0
 8006f5c:	f241 0203 	movw	r2, #4099	; 0x1003
 8006f60:	4293      	cmp	r3, r2
 8006f62:	d817      	bhi.n	8006f94 <HAL_RCC_OscConfig+0x24c>
 8006f64:	687b      	ldr	r3, [r7, #4]
 8006f66:	691b      	ldr	r3, [r3, #16]
 8006f68:	2b40      	cmp	r3, #64	; 0x40
 8006f6a:	d108      	bne.n	8006f7e <HAL_RCC_OscConfig+0x236>
 8006f6c:	4b18      	ldr	r3, [pc, #96]	; (8006fd0 <HAL_RCC_OscConfig+0x288>)
 8006f6e:	685b      	ldr	r3, [r3, #4]
 8006f70:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8006f74:	4a16      	ldr	r2, [pc, #88]	; (8006fd0 <HAL_RCC_OscConfig+0x288>)
 8006f76:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006f7a:	6053      	str	r3, [r2, #4]
 8006f7c:	e030      	b.n	8006fe0 <HAL_RCC_OscConfig+0x298>
 8006f7e:	4b14      	ldr	r3, [pc, #80]	; (8006fd0 <HAL_RCC_OscConfig+0x288>)
 8006f80:	685b      	ldr	r3, [r3, #4]
 8006f82:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8006f86:	687b      	ldr	r3, [r7, #4]
 8006f88:	691b      	ldr	r3, [r3, #16]
 8006f8a:	031b      	lsls	r3, r3, #12
 8006f8c:	4910      	ldr	r1, [pc, #64]	; (8006fd0 <HAL_RCC_OscConfig+0x288>)
 8006f8e:	4313      	orrs	r3, r2
 8006f90:	604b      	str	r3, [r1, #4]
 8006f92:	e025      	b.n	8006fe0 <HAL_RCC_OscConfig+0x298>
 8006f94:	4b0e      	ldr	r3, [pc, #56]	; (8006fd0 <HAL_RCC_OscConfig+0x288>)
 8006f96:	685b      	ldr	r3, [r3, #4]
 8006f98:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8006f9c:	687b      	ldr	r3, [r7, #4]
 8006f9e:	691b      	ldr	r3, [r3, #16]
 8006fa0:	061b      	lsls	r3, r3, #24
 8006fa2:	490b      	ldr	r1, [pc, #44]	; (8006fd0 <HAL_RCC_OscConfig+0x288>)
 8006fa4:	4313      	orrs	r3, r2
 8006fa6:	604b      	str	r3, [r1, #4]
 8006fa8:	e01a      	b.n	8006fe0 <HAL_RCC_OscConfig+0x298>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8006faa:	4b09      	ldr	r3, [pc, #36]	; (8006fd0 <HAL_RCC_OscConfig+0x288>)
 8006fac:	681b      	ldr	r3, [r3, #0]
 8006fae:	4a08      	ldr	r2, [pc, #32]	; (8006fd0 <HAL_RCC_OscConfig+0x288>)
 8006fb0:	f023 0301 	bic.w	r3, r3, #1
 8006fb4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006fb6:	f7fb f9f5 	bl	80023a4 <HAL_GetTick>
 8006fba:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8006fbc:	e00a      	b.n	8006fd4 <HAL_RCC_OscConfig+0x28c>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8006fbe:	f7fb f9f1 	bl	80023a4 <HAL_GetTick>
 8006fc2:	4602      	mov	r2, r0
 8006fc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006fc6:	1ad3      	subs	r3, r2, r3
 8006fc8:	2b02      	cmp	r3, #2
 8006fca:	d903      	bls.n	8006fd4 <HAL_RCC_OscConfig+0x28c>
          {
            return HAL_TIMEOUT;
 8006fcc:	2303      	movs	r3, #3
 8006fce:	e2c4      	b.n	800755a <HAL_RCC_OscConfig+0x812>
 8006fd0:	58024400 	.word	0x58024400
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8006fd4:	4ba4      	ldr	r3, [pc, #656]	; (8007268 <HAL_RCC_OscConfig+0x520>)
 8006fd6:	681b      	ldr	r3, [r3, #0]
 8006fd8:	f003 0304 	and.w	r3, r3, #4
 8006fdc:	2b00      	cmp	r3, #0
 8006fde:	d1ee      	bne.n	8006fbe <HAL_RCC_OscConfig+0x276>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8006fe0:	687b      	ldr	r3, [r7, #4]
 8006fe2:	681b      	ldr	r3, [r3, #0]
 8006fe4:	f003 0310 	and.w	r3, r3, #16
 8006fe8:	2b00      	cmp	r3, #0
 8006fea:	f000 80a9 	beq.w	8007140 <HAL_RCC_OscConfig+0x3f8>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8006fee:	4b9e      	ldr	r3, [pc, #632]	; (8007268 <HAL_RCC_OscConfig+0x520>)
 8006ff0:	691b      	ldr	r3, [r3, #16]
 8006ff2:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8006ff6:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8006ff8:	4b9b      	ldr	r3, [pc, #620]	; (8007268 <HAL_RCC_OscConfig+0x520>)
 8006ffa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006ffc:	617b      	str	r3, [r7, #20]
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8006ffe:	69bb      	ldr	r3, [r7, #24]
 8007000:	2b08      	cmp	r3, #8
 8007002:	d007      	beq.n	8007014 <HAL_RCC_OscConfig+0x2cc>
 8007004:	69bb      	ldr	r3, [r7, #24]
 8007006:	2b18      	cmp	r3, #24
 8007008:	d13a      	bne.n	8007080 <HAL_RCC_OscConfig+0x338>
 800700a:	697b      	ldr	r3, [r7, #20]
 800700c:	f003 0303 	and.w	r3, r3, #3
 8007010:	2b01      	cmp	r3, #1
 8007012:	d135      	bne.n	8007080 <HAL_RCC_OscConfig+0x338>
    {
      /* When CSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8007014:	4b94      	ldr	r3, [pc, #592]	; (8007268 <HAL_RCC_OscConfig+0x520>)
 8007016:	681b      	ldr	r3, [r3, #0]
 8007018:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800701c:	2b00      	cmp	r3, #0
 800701e:	d005      	beq.n	800702c <HAL_RCC_OscConfig+0x2e4>
 8007020:	687b      	ldr	r3, [r7, #4]
 8007022:	69db      	ldr	r3, [r3, #28]
 8007024:	2b80      	cmp	r3, #128	; 0x80
 8007026:	d001      	beq.n	800702c <HAL_RCC_OscConfig+0x2e4>
      {
        return HAL_ERROR;
 8007028:	2301      	movs	r3, #1
 800702a:	e296      	b.n	800755a <HAL_RCC_OscConfig+0x812>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800702c:	f7fb f9ea 	bl	8002404 <HAL_GetREVID>
 8007030:	4603      	mov	r3, r0
 8007032:	f241 0203 	movw	r2, #4099	; 0x1003
 8007036:	4293      	cmp	r3, r2
 8007038:	d817      	bhi.n	800706a <HAL_RCC_OscConfig+0x322>
 800703a:	687b      	ldr	r3, [r7, #4]
 800703c:	6a1b      	ldr	r3, [r3, #32]
 800703e:	2b20      	cmp	r3, #32
 8007040:	d108      	bne.n	8007054 <HAL_RCC_OscConfig+0x30c>
 8007042:	4b89      	ldr	r3, [pc, #548]	; (8007268 <HAL_RCC_OscConfig+0x520>)
 8007044:	685b      	ldr	r3, [r3, #4]
 8007046:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 800704a:	4a87      	ldr	r2, [pc, #540]	; (8007268 <HAL_RCC_OscConfig+0x520>)
 800704c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8007050:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8007052:	e075      	b.n	8007140 <HAL_RCC_OscConfig+0x3f8>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8007054:	4b84      	ldr	r3, [pc, #528]	; (8007268 <HAL_RCC_OscConfig+0x520>)
 8007056:	685b      	ldr	r3, [r3, #4]
 8007058:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 800705c:	687b      	ldr	r3, [r7, #4]
 800705e:	6a1b      	ldr	r3, [r3, #32]
 8007060:	069b      	lsls	r3, r3, #26
 8007062:	4981      	ldr	r1, [pc, #516]	; (8007268 <HAL_RCC_OscConfig+0x520>)
 8007064:	4313      	orrs	r3, r2
 8007066:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8007068:	e06a      	b.n	8007140 <HAL_RCC_OscConfig+0x3f8>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800706a:	4b7f      	ldr	r3, [pc, #508]	; (8007268 <HAL_RCC_OscConfig+0x520>)
 800706c:	68db      	ldr	r3, [r3, #12]
 800706e:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8007072:	687b      	ldr	r3, [r7, #4]
 8007074:	6a1b      	ldr	r3, [r3, #32]
 8007076:	061b      	lsls	r3, r3, #24
 8007078:	497b      	ldr	r1, [pc, #492]	; (8007268 <HAL_RCC_OscConfig+0x520>)
 800707a:	4313      	orrs	r3, r2
 800707c:	60cb      	str	r3, [r1, #12]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800707e:	e05f      	b.n	8007140 <HAL_RCC_OscConfig+0x3f8>
      }
    }
    else
    {
      /* Check the CSI State */
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 8007080:	687b      	ldr	r3, [r7, #4]
 8007082:	69db      	ldr	r3, [r3, #28]
 8007084:	2b00      	cmp	r3, #0
 8007086:	d042      	beq.n	800710e <HAL_RCC_OscConfig+0x3c6>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8007088:	4b77      	ldr	r3, [pc, #476]	; (8007268 <HAL_RCC_OscConfig+0x520>)
 800708a:	681b      	ldr	r3, [r3, #0]
 800708c:	4a76      	ldr	r2, [pc, #472]	; (8007268 <HAL_RCC_OscConfig+0x520>)
 800708e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007092:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007094:	f7fb f986 	bl	80023a4 <HAL_GetTick>
 8007098:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800709a:	e008      	b.n	80070ae <HAL_RCC_OscConfig+0x366>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 800709c:	f7fb f982 	bl	80023a4 <HAL_GetTick>
 80070a0:	4602      	mov	r2, r0
 80070a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80070a4:	1ad3      	subs	r3, r2, r3
 80070a6:	2b02      	cmp	r3, #2
 80070a8:	d901      	bls.n	80070ae <HAL_RCC_OscConfig+0x366>
          {
            return HAL_TIMEOUT;
 80070aa:	2303      	movs	r3, #3
 80070ac:	e255      	b.n	800755a <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80070ae:	4b6e      	ldr	r3, [pc, #440]	; (8007268 <HAL_RCC_OscConfig+0x520>)
 80070b0:	681b      	ldr	r3, [r3, #0]
 80070b2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80070b6:	2b00      	cmp	r3, #0
 80070b8:	d0f0      	beq.n	800709c <HAL_RCC_OscConfig+0x354>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80070ba:	f7fb f9a3 	bl	8002404 <HAL_GetREVID>
 80070be:	4603      	mov	r3, r0
 80070c0:	f241 0203 	movw	r2, #4099	; 0x1003
 80070c4:	4293      	cmp	r3, r2
 80070c6:	d817      	bhi.n	80070f8 <HAL_RCC_OscConfig+0x3b0>
 80070c8:	687b      	ldr	r3, [r7, #4]
 80070ca:	6a1b      	ldr	r3, [r3, #32]
 80070cc:	2b20      	cmp	r3, #32
 80070ce:	d108      	bne.n	80070e2 <HAL_RCC_OscConfig+0x39a>
 80070d0:	4b65      	ldr	r3, [pc, #404]	; (8007268 <HAL_RCC_OscConfig+0x520>)
 80070d2:	685b      	ldr	r3, [r3, #4]
 80070d4:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 80070d8:	4a63      	ldr	r2, [pc, #396]	; (8007268 <HAL_RCC_OscConfig+0x520>)
 80070da:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80070de:	6053      	str	r3, [r2, #4]
 80070e0:	e02e      	b.n	8007140 <HAL_RCC_OscConfig+0x3f8>
 80070e2:	4b61      	ldr	r3, [pc, #388]	; (8007268 <HAL_RCC_OscConfig+0x520>)
 80070e4:	685b      	ldr	r3, [r3, #4]
 80070e6:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 80070ea:	687b      	ldr	r3, [r7, #4]
 80070ec:	6a1b      	ldr	r3, [r3, #32]
 80070ee:	069b      	lsls	r3, r3, #26
 80070f0:	495d      	ldr	r1, [pc, #372]	; (8007268 <HAL_RCC_OscConfig+0x520>)
 80070f2:	4313      	orrs	r3, r2
 80070f4:	604b      	str	r3, [r1, #4]
 80070f6:	e023      	b.n	8007140 <HAL_RCC_OscConfig+0x3f8>
 80070f8:	4b5b      	ldr	r3, [pc, #364]	; (8007268 <HAL_RCC_OscConfig+0x520>)
 80070fa:	68db      	ldr	r3, [r3, #12]
 80070fc:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8007100:	687b      	ldr	r3, [r7, #4]
 8007102:	6a1b      	ldr	r3, [r3, #32]
 8007104:	061b      	lsls	r3, r3, #24
 8007106:	4958      	ldr	r1, [pc, #352]	; (8007268 <HAL_RCC_OscConfig+0x520>)
 8007108:	4313      	orrs	r3, r2
 800710a:	60cb      	str	r3, [r1, #12]
 800710c:	e018      	b.n	8007140 <HAL_RCC_OscConfig+0x3f8>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 800710e:	4b56      	ldr	r3, [pc, #344]	; (8007268 <HAL_RCC_OscConfig+0x520>)
 8007110:	681b      	ldr	r3, [r3, #0]
 8007112:	4a55      	ldr	r2, [pc, #340]	; (8007268 <HAL_RCC_OscConfig+0x520>)
 8007114:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007118:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800711a:	f7fb f943 	bl	80023a4 <HAL_GetTick>
 800711e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8007120:	e008      	b.n	8007134 <HAL_RCC_OscConfig+0x3ec>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8007122:	f7fb f93f 	bl	80023a4 <HAL_GetTick>
 8007126:	4602      	mov	r2, r0
 8007128:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800712a:	1ad3      	subs	r3, r2, r3
 800712c:	2b02      	cmp	r3, #2
 800712e:	d901      	bls.n	8007134 <HAL_RCC_OscConfig+0x3ec>
          {
            return HAL_TIMEOUT;
 8007130:	2303      	movs	r3, #3
 8007132:	e212      	b.n	800755a <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8007134:	4b4c      	ldr	r3, [pc, #304]	; (8007268 <HAL_RCC_OscConfig+0x520>)
 8007136:	681b      	ldr	r3, [r3, #0]
 8007138:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800713c:	2b00      	cmp	r3, #0
 800713e:	d1f0      	bne.n	8007122 <HAL_RCC_OscConfig+0x3da>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8007140:	687b      	ldr	r3, [r7, #4]
 8007142:	681b      	ldr	r3, [r3, #0]
 8007144:	f003 0308 	and.w	r3, r3, #8
 8007148:	2b00      	cmp	r3, #0
 800714a:	d036      	beq.n	80071ba <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800714c:	687b      	ldr	r3, [r7, #4]
 800714e:	695b      	ldr	r3, [r3, #20]
 8007150:	2b00      	cmp	r3, #0
 8007152:	d019      	beq.n	8007188 <HAL_RCC_OscConfig+0x440>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8007154:	4b44      	ldr	r3, [pc, #272]	; (8007268 <HAL_RCC_OscConfig+0x520>)
 8007156:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007158:	4a43      	ldr	r2, [pc, #268]	; (8007268 <HAL_RCC_OscConfig+0x520>)
 800715a:	f043 0301 	orr.w	r3, r3, #1
 800715e:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007160:	f7fb f920 	bl	80023a4 <HAL_GetTick>
 8007164:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8007166:	e008      	b.n	800717a <HAL_RCC_OscConfig+0x432>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8007168:	f7fb f91c 	bl	80023a4 <HAL_GetTick>
 800716c:	4602      	mov	r2, r0
 800716e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007170:	1ad3      	subs	r3, r2, r3
 8007172:	2b02      	cmp	r3, #2
 8007174:	d901      	bls.n	800717a <HAL_RCC_OscConfig+0x432>
        {
          return HAL_TIMEOUT;
 8007176:	2303      	movs	r3, #3
 8007178:	e1ef      	b.n	800755a <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800717a:	4b3b      	ldr	r3, [pc, #236]	; (8007268 <HAL_RCC_OscConfig+0x520>)
 800717c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800717e:	f003 0302 	and.w	r3, r3, #2
 8007182:	2b00      	cmp	r3, #0
 8007184:	d0f0      	beq.n	8007168 <HAL_RCC_OscConfig+0x420>
 8007186:	e018      	b.n	80071ba <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8007188:	4b37      	ldr	r3, [pc, #220]	; (8007268 <HAL_RCC_OscConfig+0x520>)
 800718a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800718c:	4a36      	ldr	r2, [pc, #216]	; (8007268 <HAL_RCC_OscConfig+0x520>)
 800718e:	f023 0301 	bic.w	r3, r3, #1
 8007192:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007194:	f7fb f906 	bl	80023a4 <HAL_GetTick>
 8007198:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800719a:	e008      	b.n	80071ae <HAL_RCC_OscConfig+0x466>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800719c:	f7fb f902 	bl	80023a4 <HAL_GetTick>
 80071a0:	4602      	mov	r2, r0
 80071a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80071a4:	1ad3      	subs	r3, r2, r3
 80071a6:	2b02      	cmp	r3, #2
 80071a8:	d901      	bls.n	80071ae <HAL_RCC_OscConfig+0x466>
        {
          return HAL_TIMEOUT;
 80071aa:	2303      	movs	r3, #3
 80071ac:	e1d5      	b.n	800755a <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80071ae:	4b2e      	ldr	r3, [pc, #184]	; (8007268 <HAL_RCC_OscConfig+0x520>)
 80071b0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80071b2:	f003 0302 	and.w	r3, r3, #2
 80071b6:	2b00      	cmp	r3, #0
 80071b8:	d1f0      	bne.n	800719c <HAL_RCC_OscConfig+0x454>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80071ba:	687b      	ldr	r3, [r7, #4]
 80071bc:	681b      	ldr	r3, [r3, #0]
 80071be:	f003 0320 	and.w	r3, r3, #32
 80071c2:	2b00      	cmp	r3, #0
 80071c4:	d036      	beq.n	8007234 <HAL_RCC_OscConfig+0x4ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 80071c6:	687b      	ldr	r3, [r7, #4]
 80071c8:	699b      	ldr	r3, [r3, #24]
 80071ca:	2b00      	cmp	r3, #0
 80071cc:	d019      	beq.n	8007202 <HAL_RCC_OscConfig+0x4ba>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80071ce:	4b26      	ldr	r3, [pc, #152]	; (8007268 <HAL_RCC_OscConfig+0x520>)
 80071d0:	681b      	ldr	r3, [r3, #0]
 80071d2:	4a25      	ldr	r2, [pc, #148]	; (8007268 <HAL_RCC_OscConfig+0x520>)
 80071d4:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80071d8:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 80071da:	f7fb f8e3 	bl	80023a4 <HAL_GetTick>
 80071de:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80071e0:	e008      	b.n	80071f4 <HAL_RCC_OscConfig+0x4ac>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 80071e2:	f7fb f8df 	bl	80023a4 <HAL_GetTick>
 80071e6:	4602      	mov	r2, r0
 80071e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80071ea:	1ad3      	subs	r3, r2, r3
 80071ec:	2b02      	cmp	r3, #2
 80071ee:	d901      	bls.n	80071f4 <HAL_RCC_OscConfig+0x4ac>
        {
          return HAL_TIMEOUT;
 80071f0:	2303      	movs	r3, #3
 80071f2:	e1b2      	b.n	800755a <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80071f4:	4b1c      	ldr	r3, [pc, #112]	; (8007268 <HAL_RCC_OscConfig+0x520>)
 80071f6:	681b      	ldr	r3, [r3, #0]
 80071f8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80071fc:	2b00      	cmp	r3, #0
 80071fe:	d0f0      	beq.n	80071e2 <HAL_RCC_OscConfig+0x49a>
 8007200:	e018      	b.n	8007234 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8007202:	4b19      	ldr	r3, [pc, #100]	; (8007268 <HAL_RCC_OscConfig+0x520>)
 8007204:	681b      	ldr	r3, [r3, #0]
 8007206:	4a18      	ldr	r2, [pc, #96]	; (8007268 <HAL_RCC_OscConfig+0x520>)
 8007208:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800720c:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 800720e:	f7fb f8c9 	bl	80023a4 <HAL_GetTick>
 8007212:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8007214:	e008      	b.n	8007228 <HAL_RCC_OscConfig+0x4e0>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8007216:	f7fb f8c5 	bl	80023a4 <HAL_GetTick>
 800721a:	4602      	mov	r2, r0
 800721c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800721e:	1ad3      	subs	r3, r2, r3
 8007220:	2b02      	cmp	r3, #2
 8007222:	d901      	bls.n	8007228 <HAL_RCC_OscConfig+0x4e0>
        {
          return HAL_TIMEOUT;
 8007224:	2303      	movs	r3, #3
 8007226:	e198      	b.n	800755a <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8007228:	4b0f      	ldr	r3, [pc, #60]	; (8007268 <HAL_RCC_OscConfig+0x520>)
 800722a:	681b      	ldr	r3, [r3, #0]
 800722c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8007230:	2b00      	cmp	r3, #0
 8007232:	d1f0      	bne.n	8007216 <HAL_RCC_OscConfig+0x4ce>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8007234:	687b      	ldr	r3, [r7, #4]
 8007236:	681b      	ldr	r3, [r3, #0]
 8007238:	f003 0304 	and.w	r3, r3, #4
 800723c:	2b00      	cmp	r3, #0
 800723e:	f000 8085 	beq.w	800734c <HAL_RCC_OscConfig+0x604>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8007242:	4b0a      	ldr	r3, [pc, #40]	; (800726c <HAL_RCC_OscConfig+0x524>)
 8007244:	681b      	ldr	r3, [r3, #0]
 8007246:	4a09      	ldr	r2, [pc, #36]	; (800726c <HAL_RCC_OscConfig+0x524>)
 8007248:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800724c:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800724e:	f7fb f8a9 	bl	80023a4 <HAL_GetTick>
 8007252:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8007254:	e00c      	b.n	8007270 <HAL_RCC_OscConfig+0x528>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8007256:	f7fb f8a5 	bl	80023a4 <HAL_GetTick>
 800725a:	4602      	mov	r2, r0
 800725c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800725e:	1ad3      	subs	r3, r2, r3
 8007260:	2b64      	cmp	r3, #100	; 0x64
 8007262:	d905      	bls.n	8007270 <HAL_RCC_OscConfig+0x528>
      {
        return HAL_TIMEOUT;
 8007264:	2303      	movs	r3, #3
 8007266:	e178      	b.n	800755a <HAL_RCC_OscConfig+0x812>
 8007268:	58024400 	.word	0x58024400
 800726c:	58024800 	.word	0x58024800
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8007270:	4b96      	ldr	r3, [pc, #600]	; (80074cc <HAL_RCC_OscConfig+0x784>)
 8007272:	681b      	ldr	r3, [r3, #0]
 8007274:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007278:	2b00      	cmp	r3, #0
 800727a:	d0ec      	beq.n	8007256 <HAL_RCC_OscConfig+0x50e>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800727c:	687b      	ldr	r3, [r7, #4]
 800727e:	689b      	ldr	r3, [r3, #8]
 8007280:	2b01      	cmp	r3, #1
 8007282:	d106      	bne.n	8007292 <HAL_RCC_OscConfig+0x54a>
 8007284:	4b92      	ldr	r3, [pc, #584]	; (80074d0 <HAL_RCC_OscConfig+0x788>)
 8007286:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007288:	4a91      	ldr	r2, [pc, #580]	; (80074d0 <HAL_RCC_OscConfig+0x788>)
 800728a:	f043 0301 	orr.w	r3, r3, #1
 800728e:	6713      	str	r3, [r2, #112]	; 0x70
 8007290:	e02d      	b.n	80072ee <HAL_RCC_OscConfig+0x5a6>
 8007292:	687b      	ldr	r3, [r7, #4]
 8007294:	689b      	ldr	r3, [r3, #8]
 8007296:	2b00      	cmp	r3, #0
 8007298:	d10c      	bne.n	80072b4 <HAL_RCC_OscConfig+0x56c>
 800729a:	4b8d      	ldr	r3, [pc, #564]	; (80074d0 <HAL_RCC_OscConfig+0x788>)
 800729c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800729e:	4a8c      	ldr	r2, [pc, #560]	; (80074d0 <HAL_RCC_OscConfig+0x788>)
 80072a0:	f023 0301 	bic.w	r3, r3, #1
 80072a4:	6713      	str	r3, [r2, #112]	; 0x70
 80072a6:	4b8a      	ldr	r3, [pc, #552]	; (80074d0 <HAL_RCC_OscConfig+0x788>)
 80072a8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80072aa:	4a89      	ldr	r2, [pc, #548]	; (80074d0 <HAL_RCC_OscConfig+0x788>)
 80072ac:	f023 0304 	bic.w	r3, r3, #4
 80072b0:	6713      	str	r3, [r2, #112]	; 0x70
 80072b2:	e01c      	b.n	80072ee <HAL_RCC_OscConfig+0x5a6>
 80072b4:	687b      	ldr	r3, [r7, #4]
 80072b6:	689b      	ldr	r3, [r3, #8]
 80072b8:	2b05      	cmp	r3, #5
 80072ba:	d10c      	bne.n	80072d6 <HAL_RCC_OscConfig+0x58e>
 80072bc:	4b84      	ldr	r3, [pc, #528]	; (80074d0 <HAL_RCC_OscConfig+0x788>)
 80072be:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80072c0:	4a83      	ldr	r2, [pc, #524]	; (80074d0 <HAL_RCC_OscConfig+0x788>)
 80072c2:	f043 0304 	orr.w	r3, r3, #4
 80072c6:	6713      	str	r3, [r2, #112]	; 0x70
 80072c8:	4b81      	ldr	r3, [pc, #516]	; (80074d0 <HAL_RCC_OscConfig+0x788>)
 80072ca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80072cc:	4a80      	ldr	r2, [pc, #512]	; (80074d0 <HAL_RCC_OscConfig+0x788>)
 80072ce:	f043 0301 	orr.w	r3, r3, #1
 80072d2:	6713      	str	r3, [r2, #112]	; 0x70
 80072d4:	e00b      	b.n	80072ee <HAL_RCC_OscConfig+0x5a6>
 80072d6:	4b7e      	ldr	r3, [pc, #504]	; (80074d0 <HAL_RCC_OscConfig+0x788>)
 80072d8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80072da:	4a7d      	ldr	r2, [pc, #500]	; (80074d0 <HAL_RCC_OscConfig+0x788>)
 80072dc:	f023 0301 	bic.w	r3, r3, #1
 80072e0:	6713      	str	r3, [r2, #112]	; 0x70
 80072e2:	4b7b      	ldr	r3, [pc, #492]	; (80074d0 <HAL_RCC_OscConfig+0x788>)
 80072e4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80072e6:	4a7a      	ldr	r2, [pc, #488]	; (80074d0 <HAL_RCC_OscConfig+0x788>)
 80072e8:	f023 0304 	bic.w	r3, r3, #4
 80072ec:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80072ee:	687b      	ldr	r3, [r7, #4]
 80072f0:	689b      	ldr	r3, [r3, #8]
 80072f2:	2b00      	cmp	r3, #0
 80072f4:	d015      	beq.n	8007322 <HAL_RCC_OscConfig+0x5da>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80072f6:	f7fb f855 	bl	80023a4 <HAL_GetTick>
 80072fa:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80072fc:	e00a      	b.n	8007314 <HAL_RCC_OscConfig+0x5cc>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80072fe:	f7fb f851 	bl	80023a4 <HAL_GetTick>
 8007302:	4602      	mov	r2, r0
 8007304:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007306:	1ad3      	subs	r3, r2, r3
 8007308:	f241 3288 	movw	r2, #5000	; 0x1388
 800730c:	4293      	cmp	r3, r2
 800730e:	d901      	bls.n	8007314 <HAL_RCC_OscConfig+0x5cc>
        {
          return HAL_TIMEOUT;
 8007310:	2303      	movs	r3, #3
 8007312:	e122      	b.n	800755a <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8007314:	4b6e      	ldr	r3, [pc, #440]	; (80074d0 <HAL_RCC_OscConfig+0x788>)
 8007316:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007318:	f003 0302 	and.w	r3, r3, #2
 800731c:	2b00      	cmp	r3, #0
 800731e:	d0ee      	beq.n	80072fe <HAL_RCC_OscConfig+0x5b6>
 8007320:	e014      	b.n	800734c <HAL_RCC_OscConfig+0x604>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007322:	f7fb f83f 	bl	80023a4 <HAL_GetTick>
 8007326:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8007328:	e00a      	b.n	8007340 <HAL_RCC_OscConfig+0x5f8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800732a:	f7fb f83b 	bl	80023a4 <HAL_GetTick>
 800732e:	4602      	mov	r2, r0
 8007330:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007332:	1ad3      	subs	r3, r2, r3
 8007334:	f241 3288 	movw	r2, #5000	; 0x1388
 8007338:	4293      	cmp	r3, r2
 800733a:	d901      	bls.n	8007340 <HAL_RCC_OscConfig+0x5f8>
        {
          return HAL_TIMEOUT;
 800733c:	2303      	movs	r3, #3
 800733e:	e10c      	b.n	800755a <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8007340:	4b63      	ldr	r3, [pc, #396]	; (80074d0 <HAL_RCC_OscConfig+0x788>)
 8007342:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007344:	f003 0302 	and.w	r3, r3, #2
 8007348:	2b00      	cmp	r3, #0
 800734a:	d1ee      	bne.n	800732a <HAL_RCC_OscConfig+0x5e2>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800734c:	687b      	ldr	r3, [r7, #4]
 800734e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007350:	2b00      	cmp	r3, #0
 8007352:	f000 8101 	beq.w	8007558 <HAL_RCC_OscConfig+0x810>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8007356:	4b5e      	ldr	r3, [pc, #376]	; (80074d0 <HAL_RCC_OscConfig+0x788>)
 8007358:	691b      	ldr	r3, [r3, #16]
 800735a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800735e:	2b18      	cmp	r3, #24
 8007360:	f000 80bc 	beq.w	80074dc <HAL_RCC_OscConfig+0x794>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8007364:	687b      	ldr	r3, [r7, #4]
 8007366:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007368:	2b02      	cmp	r3, #2
 800736a:	f040 8095 	bne.w	8007498 <HAL_RCC_OscConfig+0x750>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800736e:	4b58      	ldr	r3, [pc, #352]	; (80074d0 <HAL_RCC_OscConfig+0x788>)
 8007370:	681b      	ldr	r3, [r3, #0]
 8007372:	4a57      	ldr	r2, [pc, #348]	; (80074d0 <HAL_RCC_OscConfig+0x788>)
 8007374:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8007378:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800737a:	f7fb f813 	bl	80023a4 <HAL_GetTick>
 800737e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8007380:	e008      	b.n	8007394 <HAL_RCC_OscConfig+0x64c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8007382:	f7fb f80f 	bl	80023a4 <HAL_GetTick>
 8007386:	4602      	mov	r2, r0
 8007388:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800738a:	1ad3      	subs	r3, r2, r3
 800738c:	2b02      	cmp	r3, #2
 800738e:	d901      	bls.n	8007394 <HAL_RCC_OscConfig+0x64c>
          {
            return HAL_TIMEOUT;
 8007390:	2303      	movs	r3, #3
 8007392:	e0e2      	b.n	800755a <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8007394:	4b4e      	ldr	r3, [pc, #312]	; (80074d0 <HAL_RCC_OscConfig+0x788>)
 8007396:	681b      	ldr	r3, [r3, #0]
 8007398:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800739c:	2b00      	cmp	r3, #0
 800739e:	d1f0      	bne.n	8007382 <HAL_RCC_OscConfig+0x63a>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80073a0:	4b4b      	ldr	r3, [pc, #300]	; (80074d0 <HAL_RCC_OscConfig+0x788>)
 80073a2:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80073a4:	4b4b      	ldr	r3, [pc, #300]	; (80074d4 <HAL_RCC_OscConfig+0x78c>)
 80073a6:	4013      	ands	r3, r2
 80073a8:	687a      	ldr	r2, [r7, #4]
 80073aa:	6a91      	ldr	r1, [r2, #40]	; 0x28
 80073ac:	687a      	ldr	r2, [r7, #4]
 80073ae:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 80073b0:	0112      	lsls	r2, r2, #4
 80073b2:	430a      	orrs	r2, r1
 80073b4:	4946      	ldr	r1, [pc, #280]	; (80074d0 <HAL_RCC_OscConfig+0x788>)
 80073b6:	4313      	orrs	r3, r2
 80073b8:	628b      	str	r3, [r1, #40]	; 0x28
 80073ba:	687b      	ldr	r3, [r7, #4]
 80073bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80073be:	3b01      	subs	r3, #1
 80073c0:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80073c4:	687b      	ldr	r3, [r7, #4]
 80073c6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80073c8:	3b01      	subs	r3, #1
 80073ca:	025b      	lsls	r3, r3, #9
 80073cc:	b29b      	uxth	r3, r3
 80073ce:	431a      	orrs	r2, r3
 80073d0:	687b      	ldr	r3, [r7, #4]
 80073d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80073d4:	3b01      	subs	r3, #1
 80073d6:	041b      	lsls	r3, r3, #16
 80073d8:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 80073dc:	431a      	orrs	r2, r3
 80073de:	687b      	ldr	r3, [r7, #4]
 80073e0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80073e2:	3b01      	subs	r3, #1
 80073e4:	061b      	lsls	r3, r3, #24
 80073e6:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 80073ea:	4939      	ldr	r1, [pc, #228]	; (80074d0 <HAL_RCC_OscConfig+0x788>)
 80073ec:	4313      	orrs	r3, r2
 80073ee:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

         /* Disable PLLFRACN . */
         __HAL_RCC_PLLFRACN_DISABLE();
 80073f0:	4b37      	ldr	r3, [pc, #220]	; (80074d0 <HAL_RCC_OscConfig+0x788>)
 80073f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80073f4:	4a36      	ldr	r2, [pc, #216]	; (80074d0 <HAL_RCC_OscConfig+0x788>)
 80073f6:	f023 0301 	bic.w	r3, r3, #1
 80073fa:	62d3      	str	r3, [r2, #44]	; 0x2c

         /* Configure PLL PLL1FRACN */
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 80073fc:	4b34      	ldr	r3, [pc, #208]	; (80074d0 <HAL_RCC_OscConfig+0x788>)
 80073fe:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007400:	4b35      	ldr	r3, [pc, #212]	; (80074d8 <HAL_RCC_OscConfig+0x790>)
 8007402:	4013      	ands	r3, r2
 8007404:	687a      	ldr	r2, [r7, #4]
 8007406:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8007408:	00d2      	lsls	r2, r2, #3
 800740a:	4931      	ldr	r1, [pc, #196]	; (80074d0 <HAL_RCC_OscConfig+0x788>)
 800740c:	4313      	orrs	r3, r2
 800740e:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8007410:	4b2f      	ldr	r3, [pc, #188]	; (80074d0 <HAL_RCC_OscConfig+0x788>)
 8007412:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007414:	f023 020c 	bic.w	r2, r3, #12
 8007418:	687b      	ldr	r3, [r7, #4]
 800741a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800741c:	492c      	ldr	r1, [pc, #176]	; (80074d0 <HAL_RCC_OscConfig+0x788>)
 800741e:	4313      	orrs	r3, r2
 8007420:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8007422:	4b2b      	ldr	r3, [pc, #172]	; (80074d0 <HAL_RCC_OscConfig+0x788>)
 8007424:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007426:	f023 0202 	bic.w	r2, r3, #2
 800742a:	687b      	ldr	r3, [r7, #4]
 800742c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800742e:	4928      	ldr	r1, [pc, #160]	; (80074d0 <HAL_RCC_OscConfig+0x788>)
 8007430:	4313      	orrs	r3, r2
 8007432:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8007434:	4b26      	ldr	r3, [pc, #152]	; (80074d0 <HAL_RCC_OscConfig+0x788>)
 8007436:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007438:	4a25      	ldr	r2, [pc, #148]	; (80074d0 <HAL_RCC_OscConfig+0x788>)
 800743a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800743e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007440:	4b23      	ldr	r3, [pc, #140]	; (80074d0 <HAL_RCC_OscConfig+0x788>)
 8007442:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007444:	4a22      	ldr	r2, [pc, #136]	; (80074d0 <HAL_RCC_OscConfig+0x788>)
 8007446:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800744a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 800744c:	4b20      	ldr	r3, [pc, #128]	; (80074d0 <HAL_RCC_OscConfig+0x788>)
 800744e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007450:	4a1f      	ldr	r2, [pc, #124]	; (80074d0 <HAL_RCC_OscConfig+0x788>)
 8007452:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8007456:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
         __HAL_RCC_PLLFRACN_ENABLE();
 8007458:	4b1d      	ldr	r3, [pc, #116]	; (80074d0 <HAL_RCC_OscConfig+0x788>)
 800745a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800745c:	4a1c      	ldr	r2, [pc, #112]	; (80074d0 <HAL_RCC_OscConfig+0x788>)
 800745e:	f043 0301 	orr.w	r3, r3, #1
 8007462:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8007464:	4b1a      	ldr	r3, [pc, #104]	; (80074d0 <HAL_RCC_OscConfig+0x788>)
 8007466:	681b      	ldr	r3, [r3, #0]
 8007468:	4a19      	ldr	r2, [pc, #100]	; (80074d0 <HAL_RCC_OscConfig+0x788>)
 800746a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800746e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007470:	f7fa ff98 	bl	80023a4 <HAL_GetTick>
 8007474:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8007476:	e008      	b.n	800748a <HAL_RCC_OscConfig+0x742>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8007478:	f7fa ff94 	bl	80023a4 <HAL_GetTick>
 800747c:	4602      	mov	r2, r0
 800747e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007480:	1ad3      	subs	r3, r2, r3
 8007482:	2b02      	cmp	r3, #2
 8007484:	d901      	bls.n	800748a <HAL_RCC_OscConfig+0x742>
          {
            return HAL_TIMEOUT;
 8007486:	2303      	movs	r3, #3
 8007488:	e067      	b.n	800755a <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800748a:	4b11      	ldr	r3, [pc, #68]	; (80074d0 <HAL_RCC_OscConfig+0x788>)
 800748c:	681b      	ldr	r3, [r3, #0]
 800748e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007492:	2b00      	cmp	r3, #0
 8007494:	d0f0      	beq.n	8007478 <HAL_RCC_OscConfig+0x730>
 8007496:	e05f      	b.n	8007558 <HAL_RCC_OscConfig+0x810>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007498:	4b0d      	ldr	r3, [pc, #52]	; (80074d0 <HAL_RCC_OscConfig+0x788>)
 800749a:	681b      	ldr	r3, [r3, #0]
 800749c:	4a0c      	ldr	r2, [pc, #48]	; (80074d0 <HAL_RCC_OscConfig+0x788>)
 800749e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80074a2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80074a4:	f7fa ff7e 	bl	80023a4 <HAL_GetTick>
 80074a8:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80074aa:	e008      	b.n	80074be <HAL_RCC_OscConfig+0x776>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80074ac:	f7fa ff7a 	bl	80023a4 <HAL_GetTick>
 80074b0:	4602      	mov	r2, r0
 80074b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80074b4:	1ad3      	subs	r3, r2, r3
 80074b6:	2b02      	cmp	r3, #2
 80074b8:	d901      	bls.n	80074be <HAL_RCC_OscConfig+0x776>
          {
            return HAL_TIMEOUT;
 80074ba:	2303      	movs	r3, #3
 80074bc:	e04d      	b.n	800755a <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80074be:	4b04      	ldr	r3, [pc, #16]	; (80074d0 <HAL_RCC_OscConfig+0x788>)
 80074c0:	681b      	ldr	r3, [r3, #0]
 80074c2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80074c6:	2b00      	cmp	r3, #0
 80074c8:	d1f0      	bne.n	80074ac <HAL_RCC_OscConfig+0x764>
 80074ca:	e045      	b.n	8007558 <HAL_RCC_OscConfig+0x810>
 80074cc:	58024800 	.word	0x58024800
 80074d0:	58024400 	.word	0x58024400
 80074d4:	fffffc0c 	.word	0xfffffc0c
 80074d8:	ffff0007 	.word	0xffff0007
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 80074dc:	4b21      	ldr	r3, [pc, #132]	; (8007564 <HAL_RCC_OscConfig+0x81c>)
 80074de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80074e0:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 80074e2:	4b20      	ldr	r3, [pc, #128]	; (8007564 <HAL_RCC_OscConfig+0x81c>)
 80074e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80074e6:	60fb      	str	r3, [r7, #12]
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80074e8:	687b      	ldr	r3, [r7, #4]
 80074ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80074ec:	2b01      	cmp	r3, #1
 80074ee:	d031      	beq.n	8007554 <HAL_RCC_OscConfig+0x80c>
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80074f0:	693b      	ldr	r3, [r7, #16]
 80074f2:	f003 0203 	and.w	r2, r3, #3
 80074f6:	687b      	ldr	r3, [r7, #4]
 80074f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80074fa:	429a      	cmp	r2, r3
 80074fc:	d12a      	bne.n	8007554 <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 80074fe:	693b      	ldr	r3, [r7, #16]
 8007500:	091b      	lsrs	r3, r3, #4
 8007502:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8007506:	687b      	ldr	r3, [r7, #4]
 8007508:	6adb      	ldr	r3, [r3, #44]	; 0x2c
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800750a:	429a      	cmp	r2, r3
 800750c:	d122      	bne.n	8007554 <HAL_RCC_OscConfig+0x80c>
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800750e:	68fb      	ldr	r3, [r7, #12]
 8007510:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8007514:	687b      	ldr	r3, [r7, #4]
 8007516:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007518:	3b01      	subs	r3, #1
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800751a:	429a      	cmp	r2, r3
 800751c:	d11a      	bne.n	8007554 <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800751e:	68fb      	ldr	r3, [r7, #12]
 8007520:	0a5b      	lsrs	r3, r3, #9
 8007522:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8007526:	687b      	ldr	r3, [r7, #4]
 8007528:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800752a:	3b01      	subs	r3, #1
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800752c:	429a      	cmp	r2, r3
 800752e:	d111      	bne.n	8007554 <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8007530:	68fb      	ldr	r3, [r7, #12]
 8007532:	0c1b      	lsrs	r3, r3, #16
 8007534:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8007538:	687b      	ldr	r3, [r7, #4]
 800753a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800753c:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800753e:	429a      	cmp	r2, r3
 8007540:	d108      	bne.n	8007554 <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8007542:	68fb      	ldr	r3, [r7, #12]
 8007544:	0e1b      	lsrs	r3, r3, #24
 8007546:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800754a:	687b      	ldr	r3, [r7, #4]
 800754c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800754e:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8007550:	429a      	cmp	r2, r3
 8007552:	d001      	beq.n	8007558 <HAL_RCC_OscConfig+0x810>
      {
        return HAL_ERROR;
 8007554:	2301      	movs	r3, #1
 8007556:	e000      	b.n	800755a <HAL_RCC_OscConfig+0x812>
      }
    }
  }
  return HAL_OK;
 8007558:	2300      	movs	r3, #0
}
 800755a:	4618      	mov	r0, r3
 800755c:	3730      	adds	r7, #48	; 0x30
 800755e:	46bd      	mov	sp, r7
 8007560:	bd80      	pop	{r7, pc}
 8007562:	bf00      	nop
 8007564:	58024400 	.word	0x58024400

08007568 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8007568:	b580      	push	{r7, lr}
 800756a:	b086      	sub	sp, #24
 800756c:	af00      	add	r7, sp, #0
 800756e:	6078      	str	r0, [r7, #4]
 8007570:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

   /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8007572:	687b      	ldr	r3, [r7, #4]
 8007574:	2b00      	cmp	r3, #0
 8007576:	d101      	bne.n	800757c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8007578:	2301      	movs	r3, #1
 800757a:	e19c      	b.n	80078b6 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800757c:	4b8a      	ldr	r3, [pc, #552]	; (80077a8 <HAL_RCC_ClockConfig+0x240>)
 800757e:	681b      	ldr	r3, [r3, #0]
 8007580:	f003 030f 	and.w	r3, r3, #15
 8007584:	683a      	ldr	r2, [r7, #0]
 8007586:	429a      	cmp	r2, r3
 8007588:	d910      	bls.n	80075ac <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800758a:	4b87      	ldr	r3, [pc, #540]	; (80077a8 <HAL_RCC_ClockConfig+0x240>)
 800758c:	681b      	ldr	r3, [r3, #0]
 800758e:	f023 020f 	bic.w	r2, r3, #15
 8007592:	4985      	ldr	r1, [pc, #532]	; (80077a8 <HAL_RCC_ClockConfig+0x240>)
 8007594:	683b      	ldr	r3, [r7, #0]
 8007596:	4313      	orrs	r3, r2
 8007598:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800759a:	4b83      	ldr	r3, [pc, #524]	; (80077a8 <HAL_RCC_ClockConfig+0x240>)
 800759c:	681b      	ldr	r3, [r3, #0]
 800759e:	f003 030f 	and.w	r3, r3, #15
 80075a2:	683a      	ldr	r2, [r7, #0]
 80075a4:	429a      	cmp	r2, r3
 80075a6:	d001      	beq.n	80075ac <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80075a8:	2301      	movs	r3, #1
 80075aa:	e184      	b.n	80078b6 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 80075ac:	687b      	ldr	r3, [r7, #4]
 80075ae:	681b      	ldr	r3, [r3, #0]
 80075b0:	f003 0304 	and.w	r3, r3, #4
 80075b4:	2b00      	cmp	r3, #0
 80075b6:	d010      	beq.n	80075da <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 80075b8:	687b      	ldr	r3, [r7, #4]
 80075ba:	691a      	ldr	r2, [r3, #16]
 80075bc:	4b7b      	ldr	r3, [pc, #492]	; (80077ac <HAL_RCC_ClockConfig+0x244>)
 80075be:	699b      	ldr	r3, [r3, #24]
 80075c0:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80075c4:	429a      	cmp	r2, r3
 80075c6:	d908      	bls.n	80075da <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80075c8:	4b78      	ldr	r3, [pc, #480]	; (80077ac <HAL_RCC_ClockConfig+0x244>)
 80075ca:	699b      	ldr	r3, [r3, #24]
 80075cc:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80075d0:	687b      	ldr	r3, [r7, #4]
 80075d2:	691b      	ldr	r3, [r3, #16]
 80075d4:	4975      	ldr	r1, [pc, #468]	; (80077ac <HAL_RCC_ClockConfig+0x244>)
 80075d6:	4313      	orrs	r3, r2
 80075d8:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80075da:	687b      	ldr	r3, [r7, #4]
 80075dc:	681b      	ldr	r3, [r3, #0]
 80075de:	f003 0308 	and.w	r3, r3, #8
 80075e2:	2b00      	cmp	r3, #0
 80075e4:	d010      	beq.n	8007608 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 80075e6:	687b      	ldr	r3, [r7, #4]
 80075e8:	695a      	ldr	r2, [r3, #20]
 80075ea:	4b70      	ldr	r3, [pc, #448]	; (80077ac <HAL_RCC_ClockConfig+0x244>)
 80075ec:	69db      	ldr	r3, [r3, #28]
 80075ee:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80075f2:	429a      	cmp	r2, r3
 80075f4:	d908      	bls.n	8007608 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80075f6:	4b6d      	ldr	r3, [pc, #436]	; (80077ac <HAL_RCC_ClockConfig+0x244>)
 80075f8:	69db      	ldr	r3, [r3, #28]
 80075fa:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80075fe:	687b      	ldr	r3, [r7, #4]
 8007600:	695b      	ldr	r3, [r3, #20]
 8007602:	496a      	ldr	r1, [pc, #424]	; (80077ac <HAL_RCC_ClockConfig+0x244>)
 8007604:	4313      	orrs	r3, r2
 8007606:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
  }
#endif
    }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007608:	687b      	ldr	r3, [r7, #4]
 800760a:	681b      	ldr	r3, [r3, #0]
 800760c:	f003 0310 	and.w	r3, r3, #16
 8007610:	2b00      	cmp	r3, #0
 8007612:	d010      	beq.n	8007636 <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8007614:	687b      	ldr	r3, [r7, #4]
 8007616:	699a      	ldr	r2, [r3, #24]
 8007618:	4b64      	ldr	r3, [pc, #400]	; (80077ac <HAL_RCC_ClockConfig+0x244>)
 800761a:	69db      	ldr	r3, [r3, #28]
 800761c:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8007620:	429a      	cmp	r2, r3
 8007622:	d908      	bls.n	8007636 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8007624:	4b61      	ldr	r3, [pc, #388]	; (80077ac <HAL_RCC_ClockConfig+0x244>)
 8007626:	69db      	ldr	r3, [r3, #28]
 8007628:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800762c:	687b      	ldr	r3, [r7, #4]
 800762e:	699b      	ldr	r3, [r3, #24]
 8007630:	495e      	ldr	r1, [pc, #376]	; (80077ac <HAL_RCC_ClockConfig+0x244>)
 8007632:	4313      	orrs	r3, r2
 8007634:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8007636:	687b      	ldr	r3, [r7, #4]
 8007638:	681b      	ldr	r3, [r3, #0]
 800763a:	f003 0320 	and.w	r3, r3, #32
 800763e:	2b00      	cmp	r3, #0
 8007640:	d010      	beq.n	8007664 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8007642:	687b      	ldr	r3, [r7, #4]
 8007644:	69da      	ldr	r2, [r3, #28]
 8007646:	4b59      	ldr	r3, [pc, #356]	; (80077ac <HAL_RCC_ClockConfig+0x244>)
 8007648:	6a1b      	ldr	r3, [r3, #32]
 800764a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800764e:	429a      	cmp	r2, r3
 8007650:	d908      	bls.n	8007664 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8007652:	4b56      	ldr	r3, [pc, #344]	; (80077ac <HAL_RCC_ClockConfig+0x244>)
 8007654:	6a1b      	ldr	r3, [r3, #32]
 8007656:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800765a:	687b      	ldr	r3, [r7, #4]
 800765c:	69db      	ldr	r3, [r3, #28]
 800765e:	4953      	ldr	r1, [pc, #332]	; (80077ac <HAL_RCC_ClockConfig+0x244>)
 8007660:	4313      	orrs	r3, r2
 8007662:	620b      	str	r3, [r1, #32]
    }
#endif
  }

   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8007664:	687b      	ldr	r3, [r7, #4]
 8007666:	681b      	ldr	r3, [r3, #0]
 8007668:	f003 0302 	and.w	r3, r3, #2
 800766c:	2b00      	cmp	r3, #0
 800766e:	d010      	beq.n	8007692 <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8007670:	687b      	ldr	r3, [r7, #4]
 8007672:	68da      	ldr	r2, [r3, #12]
 8007674:	4b4d      	ldr	r3, [pc, #308]	; (80077ac <HAL_RCC_ClockConfig+0x244>)
 8007676:	699b      	ldr	r3, [r3, #24]
 8007678:	f003 030f 	and.w	r3, r3, #15
 800767c:	429a      	cmp	r2, r3
 800767e:	d908      	bls.n	8007692 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8007680:	4b4a      	ldr	r3, [pc, #296]	; (80077ac <HAL_RCC_ClockConfig+0x244>)
 8007682:	699b      	ldr	r3, [r3, #24]
 8007684:	f023 020f 	bic.w	r2, r3, #15
 8007688:	687b      	ldr	r3, [r7, #4]
 800768a:	68db      	ldr	r3, [r3, #12]
 800768c:	4947      	ldr	r1, [pc, #284]	; (80077ac <HAL_RCC_ClockConfig+0x244>)
 800768e:	4313      	orrs	r3, r2
 8007690:	618b      	str	r3, [r1, #24]
    }
#endif
  }

    /*------------------------- SYSCLK Configuration -------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8007692:	687b      	ldr	r3, [r7, #4]
 8007694:	681b      	ldr	r3, [r3, #0]
 8007696:	f003 0301 	and.w	r3, r3, #1
 800769a:	2b00      	cmp	r3, #0
 800769c:	d055      	beq.n	800774a <HAL_RCC_ClockConfig+0x1e2>
    {
      assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 800769e:	4b43      	ldr	r3, [pc, #268]	; (80077ac <HAL_RCC_ClockConfig+0x244>)
 80076a0:	699b      	ldr	r3, [r3, #24]
 80076a2:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 80076a6:	687b      	ldr	r3, [r7, #4]
 80076a8:	689b      	ldr	r3, [r3, #8]
 80076aa:	4940      	ldr	r1, [pc, #256]	; (80077ac <HAL_RCC_ClockConfig+0x244>)
 80076ac:	4313      	orrs	r3, r2
 80076ae:	618b      	str	r3, [r1, #24]
#else
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80076b0:	687b      	ldr	r3, [r7, #4]
 80076b2:	685b      	ldr	r3, [r3, #4]
 80076b4:	2b02      	cmp	r3, #2
 80076b6:	d107      	bne.n	80076c8 <HAL_RCC_ClockConfig+0x160>
      {
        /* Check the HSE ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80076b8:	4b3c      	ldr	r3, [pc, #240]	; (80077ac <HAL_RCC_ClockConfig+0x244>)
 80076ba:	681b      	ldr	r3, [r3, #0]
 80076bc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80076c0:	2b00      	cmp	r3, #0
 80076c2:	d121      	bne.n	8007708 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 80076c4:	2301      	movs	r3, #1
 80076c6:	e0f6      	b.n	80078b6 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* PLL is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80076c8:	687b      	ldr	r3, [r7, #4]
 80076ca:	685b      	ldr	r3, [r3, #4]
 80076cc:	2b03      	cmp	r3, #3
 80076ce:	d107      	bne.n	80076e0 <HAL_RCC_ClockConfig+0x178>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80076d0:	4b36      	ldr	r3, [pc, #216]	; (80077ac <HAL_RCC_ClockConfig+0x244>)
 80076d2:	681b      	ldr	r3, [r3, #0]
 80076d4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80076d8:	2b00      	cmp	r3, #0
 80076da:	d115      	bne.n	8007708 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 80076dc:	2301      	movs	r3, #1
 80076de:	e0ea      	b.n	80078b6 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* CSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 80076e0:	687b      	ldr	r3, [r7, #4]
 80076e2:	685b      	ldr	r3, [r3, #4]
 80076e4:	2b01      	cmp	r3, #1
 80076e6:	d107      	bne.n	80076f8 <HAL_RCC_ClockConfig+0x190>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80076e8:	4b30      	ldr	r3, [pc, #192]	; (80077ac <HAL_RCC_ClockConfig+0x244>)
 80076ea:	681b      	ldr	r3, [r3, #0]
 80076ec:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80076f0:	2b00      	cmp	r3, #0
 80076f2:	d109      	bne.n	8007708 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 80076f4:	2301      	movs	r3, #1
 80076f6:	e0de      	b.n	80078b6 <HAL_RCC_ClockConfig+0x34e>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80076f8:	4b2c      	ldr	r3, [pc, #176]	; (80077ac <HAL_RCC_ClockConfig+0x244>)
 80076fa:	681b      	ldr	r3, [r3, #0]
 80076fc:	f003 0304 	and.w	r3, r3, #4
 8007700:	2b00      	cmp	r3, #0
 8007702:	d101      	bne.n	8007708 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8007704:	2301      	movs	r3, #1
 8007706:	e0d6      	b.n	80078b6 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8007708:	4b28      	ldr	r3, [pc, #160]	; (80077ac <HAL_RCC_ClockConfig+0x244>)
 800770a:	691b      	ldr	r3, [r3, #16]
 800770c:	f023 0207 	bic.w	r2, r3, #7
 8007710:	687b      	ldr	r3, [r7, #4]
 8007712:	685b      	ldr	r3, [r3, #4]
 8007714:	4925      	ldr	r1, [pc, #148]	; (80077ac <HAL_RCC_ClockConfig+0x244>)
 8007716:	4313      	orrs	r3, r2
 8007718:	610b      	str	r3, [r1, #16]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800771a:	f7fa fe43 	bl	80023a4 <HAL_GetTick>
 800771e:	6178      	str	r0, [r7, #20]

        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007720:	e00a      	b.n	8007738 <HAL_RCC_ClockConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8007722:	f7fa fe3f 	bl	80023a4 <HAL_GetTick>
 8007726:	4602      	mov	r2, r0
 8007728:	697b      	ldr	r3, [r7, #20]
 800772a:	1ad3      	subs	r3, r2, r3
 800772c:	f241 3288 	movw	r2, #5000	; 0x1388
 8007730:	4293      	cmp	r3, r2
 8007732:	d901      	bls.n	8007738 <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 8007734:	2303      	movs	r3, #3
 8007736:	e0be      	b.n	80078b6 <HAL_RCC_ClockConfig+0x34e>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007738:	4b1c      	ldr	r3, [pc, #112]	; (80077ac <HAL_RCC_ClockConfig+0x244>)
 800773a:	691b      	ldr	r3, [r3, #16]
 800773c:	f003 0238 	and.w	r2, r3, #56	; 0x38
 8007740:	687b      	ldr	r3, [r7, #4]
 8007742:	685b      	ldr	r3, [r3, #4]
 8007744:	00db      	lsls	r3, r3, #3
 8007746:	429a      	cmp	r2, r3
 8007748:	d1eb      	bne.n	8007722 <HAL_RCC_ClockConfig+0x1ba>

    }

    /* Decreasing the BUS frequency divider */
   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800774a:	687b      	ldr	r3, [r7, #4]
 800774c:	681b      	ldr	r3, [r3, #0]
 800774e:	f003 0302 	and.w	r3, r3, #2
 8007752:	2b00      	cmp	r3, #0
 8007754:	d010      	beq.n	8007778 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8007756:	687b      	ldr	r3, [r7, #4]
 8007758:	68da      	ldr	r2, [r3, #12]
 800775a:	4b14      	ldr	r3, [pc, #80]	; (80077ac <HAL_RCC_ClockConfig+0x244>)
 800775c:	699b      	ldr	r3, [r3, #24]
 800775e:	f003 030f 	and.w	r3, r3, #15
 8007762:	429a      	cmp	r2, r3
 8007764:	d208      	bcs.n	8007778 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8007766:	4b11      	ldr	r3, [pc, #68]	; (80077ac <HAL_RCC_ClockConfig+0x244>)
 8007768:	699b      	ldr	r3, [r3, #24]
 800776a:	f023 020f 	bic.w	r2, r3, #15
 800776e:	687b      	ldr	r3, [r7, #4]
 8007770:	68db      	ldr	r3, [r3, #12]
 8007772:	490e      	ldr	r1, [pc, #56]	; (80077ac <HAL_RCC_ClockConfig+0x244>)
 8007774:	4313      	orrs	r3, r2
 8007776:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8007778:	4b0b      	ldr	r3, [pc, #44]	; (80077a8 <HAL_RCC_ClockConfig+0x240>)
 800777a:	681b      	ldr	r3, [r3, #0]
 800777c:	f003 030f 	and.w	r3, r3, #15
 8007780:	683a      	ldr	r2, [r7, #0]
 8007782:	429a      	cmp	r2, r3
 8007784:	d214      	bcs.n	80077b0 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007786:	4b08      	ldr	r3, [pc, #32]	; (80077a8 <HAL_RCC_ClockConfig+0x240>)
 8007788:	681b      	ldr	r3, [r3, #0]
 800778a:	f023 020f 	bic.w	r2, r3, #15
 800778e:	4906      	ldr	r1, [pc, #24]	; (80077a8 <HAL_RCC_ClockConfig+0x240>)
 8007790:	683b      	ldr	r3, [r7, #0]
 8007792:	4313      	orrs	r3, r2
 8007794:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8007796:	4b04      	ldr	r3, [pc, #16]	; (80077a8 <HAL_RCC_ClockConfig+0x240>)
 8007798:	681b      	ldr	r3, [r3, #0]
 800779a:	f003 030f 	and.w	r3, r3, #15
 800779e:	683a      	ldr	r2, [r7, #0]
 80077a0:	429a      	cmp	r2, r3
 80077a2:	d005      	beq.n	80077b0 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 80077a4:	2301      	movs	r3, #1
 80077a6:	e086      	b.n	80078b6 <HAL_RCC_ClockConfig+0x34e>
 80077a8:	52002000 	.word	0x52002000
 80077ac:	58024400 	.word	0x58024400
    }
 }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 80077b0:	687b      	ldr	r3, [r7, #4]
 80077b2:	681b      	ldr	r3, [r3, #0]
 80077b4:	f003 0304 	and.w	r3, r3, #4
 80077b8:	2b00      	cmp	r3, #0
 80077ba:	d010      	beq.n	80077de <HAL_RCC_ClockConfig+0x276>
 {
#if defined(RCC_D1CFGR_D1PPRE)
   if((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 80077bc:	687b      	ldr	r3, [r7, #4]
 80077be:	691a      	ldr	r2, [r3, #16]
 80077c0:	4b3f      	ldr	r3, [pc, #252]	; (80078c0 <HAL_RCC_ClockConfig+0x358>)
 80077c2:	699b      	ldr	r3, [r3, #24]
 80077c4:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80077c8:	429a      	cmp	r2, r3
 80077ca:	d208      	bcs.n	80077de <HAL_RCC_ClockConfig+0x276>
   {
     assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
     MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80077cc:	4b3c      	ldr	r3, [pc, #240]	; (80078c0 <HAL_RCC_ClockConfig+0x358>)
 80077ce:	699b      	ldr	r3, [r3, #24]
 80077d0:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80077d4:	687b      	ldr	r3, [r7, #4]
 80077d6:	691b      	ldr	r3, [r3, #16]
 80077d8:	4939      	ldr	r1, [pc, #228]	; (80078c0 <HAL_RCC_ClockConfig+0x358>)
 80077da:	4313      	orrs	r3, r2
 80077dc:	618b      	str	r3, [r1, #24]
   }
#endif
 }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80077de:	687b      	ldr	r3, [r7, #4]
 80077e0:	681b      	ldr	r3, [r3, #0]
 80077e2:	f003 0308 	and.w	r3, r3, #8
 80077e6:	2b00      	cmp	r3, #0
 80077e8:	d010      	beq.n	800780c <HAL_RCC_ClockConfig+0x2a4>
 {
#if defined(RCC_D2CFGR_D2PPRE1)
   if((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 80077ea:	687b      	ldr	r3, [r7, #4]
 80077ec:	695a      	ldr	r2, [r3, #20]
 80077ee:	4b34      	ldr	r3, [pc, #208]	; (80078c0 <HAL_RCC_ClockConfig+0x358>)
 80077f0:	69db      	ldr	r3, [r3, #28]
 80077f2:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80077f6:	429a      	cmp	r2, r3
 80077f8:	d208      	bcs.n	800780c <HAL_RCC_ClockConfig+0x2a4>
   {
     assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80077fa:	4b31      	ldr	r3, [pc, #196]	; (80078c0 <HAL_RCC_ClockConfig+0x358>)
 80077fc:	69db      	ldr	r3, [r3, #28]
 80077fe:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8007802:	687b      	ldr	r3, [r7, #4]
 8007804:	695b      	ldr	r3, [r3, #20]
 8007806:	492e      	ldr	r1, [pc, #184]	; (80078c0 <HAL_RCC_ClockConfig+0x358>)
 8007808:	4313      	orrs	r3, r2
 800780a:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800780c:	687b      	ldr	r3, [r7, #4]
 800780e:	681b      	ldr	r3, [r3, #0]
 8007810:	f003 0310 	and.w	r3, r3, #16
 8007814:	2b00      	cmp	r3, #0
 8007816:	d010      	beq.n	800783a <HAL_RCC_ClockConfig+0x2d2>
 {
#if defined (RCC_D2CFGR_D2PPRE2)
   if((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8007818:	687b      	ldr	r3, [r7, #4]
 800781a:	699a      	ldr	r2, [r3, #24]
 800781c:	4b28      	ldr	r3, [pc, #160]	; (80078c0 <HAL_RCC_ClockConfig+0x358>)
 800781e:	69db      	ldr	r3, [r3, #28]
 8007820:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8007824:	429a      	cmp	r2, r3
 8007826:	d208      	bcs.n	800783a <HAL_RCC_ClockConfig+0x2d2>
   {
     assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8007828:	4b25      	ldr	r3, [pc, #148]	; (80078c0 <HAL_RCC_ClockConfig+0x358>)
 800782a:	69db      	ldr	r3, [r3, #28]
 800782c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8007830:	687b      	ldr	r3, [r7, #4]
 8007832:	699b      	ldr	r3, [r3, #24]
 8007834:	4922      	ldr	r1, [pc, #136]	; (80078c0 <HAL_RCC_ClockConfig+0x358>)
 8007836:	4313      	orrs	r3, r2
 8007838:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800783a:	687b      	ldr	r3, [r7, #4]
 800783c:	681b      	ldr	r3, [r3, #0]
 800783e:	f003 0320 	and.w	r3, r3, #32
 8007842:	2b00      	cmp	r3, #0
 8007844:	d010      	beq.n	8007868 <HAL_RCC_ClockConfig+0x300>
 {
#if defined(RCC_D3CFGR_D3PPRE)
   if((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8007846:	687b      	ldr	r3, [r7, #4]
 8007848:	69da      	ldr	r2, [r3, #28]
 800784a:	4b1d      	ldr	r3, [pc, #116]	; (80078c0 <HAL_RCC_ClockConfig+0x358>)
 800784c:	6a1b      	ldr	r3, [r3, #32]
 800784e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8007852:	429a      	cmp	r2, r3
 8007854:	d208      	bcs.n	8007868 <HAL_RCC_ClockConfig+0x300>
   {
     assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
     MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8007856:	4b1a      	ldr	r3, [pc, #104]	; (80078c0 <HAL_RCC_ClockConfig+0x358>)
 8007858:	6a1b      	ldr	r3, [r3, #32]
 800785a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800785e:	687b      	ldr	r3, [r7, #4]
 8007860:	69db      	ldr	r3, [r3, #28]
 8007862:	4917      	ldr	r1, [pc, #92]	; (80078c0 <HAL_RCC_ClockConfig+0x358>)
 8007864:	4313      	orrs	r3, r2
 8007866:	620b      	str	r3, [r1, #32]
#endif
 }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8007868:	f000 f834 	bl	80078d4 <HAL_RCC_GetSysClockFreq>
 800786c:	4602      	mov	r2, r0
 800786e:	4b14      	ldr	r3, [pc, #80]	; (80078c0 <HAL_RCC_ClockConfig+0x358>)
 8007870:	699b      	ldr	r3, [r3, #24]
 8007872:	0a1b      	lsrs	r3, r3, #8
 8007874:	f003 030f 	and.w	r3, r3, #15
 8007878:	4912      	ldr	r1, [pc, #72]	; (80078c4 <HAL_RCC_ClockConfig+0x35c>)
 800787a:	5ccb      	ldrb	r3, [r1, r3]
 800787c:	f003 031f 	and.w	r3, r3, #31
 8007880:	fa22 f303 	lsr.w	r3, r2, r3
 8007884:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8007886:	4b0e      	ldr	r3, [pc, #56]	; (80078c0 <HAL_RCC_ClockConfig+0x358>)
 8007888:	699b      	ldr	r3, [r3, #24]
 800788a:	f003 030f 	and.w	r3, r3, #15
 800788e:	4a0d      	ldr	r2, [pc, #52]	; (80078c4 <HAL_RCC_ClockConfig+0x35c>)
 8007890:	5cd3      	ldrb	r3, [r2, r3]
 8007892:	f003 031f 	and.w	r3, r3, #31
 8007896:	693a      	ldr	r2, [r7, #16]
 8007898:	fa22 f303 	lsr.w	r3, r2, r3
 800789c:	4a0a      	ldr	r2, [pc, #40]	; (80078c8 <HAL_RCC_ClockConfig+0x360>)
 800789e:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80078a0:	4a0a      	ldr	r2, [pc, #40]	; (80078cc <HAL_RCC_ClockConfig+0x364>)
 80078a2:	693b      	ldr	r3, [r7, #16]
 80078a4:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick (uwTickPrio);
 80078a6:	4b0a      	ldr	r3, [pc, #40]	; (80078d0 <HAL_RCC_ClockConfig+0x368>)
 80078a8:	681b      	ldr	r3, [r3, #0]
 80078aa:	4618      	mov	r0, r3
 80078ac:	f7fa fd30 	bl	8002310 <HAL_InitTick>
 80078b0:	4603      	mov	r3, r0
 80078b2:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 80078b4:	7bfb      	ldrb	r3, [r7, #15]
}
 80078b6:	4618      	mov	r0, r3
 80078b8:	3718      	adds	r7, #24
 80078ba:	46bd      	mov	sp, r7
 80078bc:	bd80      	pop	{r7, pc}
 80078be:	bf00      	nop
 80078c0:	58024400 	.word	0x58024400
 80078c4:	080166e8 	.word	0x080166e8
 80078c8:	24000004 	.word	0x24000004
 80078cc:	24000000 	.word	0x24000000
 80078d0:	24000008 	.word	0x24000008

080078d4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80078d4:	b480      	push	{r7}
 80078d6:	b089      	sub	sp, #36	; 0x24
 80078d8:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 80078da:	4bb3      	ldr	r3, [pc, #716]	; (8007ba8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80078dc:	691b      	ldr	r3, [r3, #16]
 80078de:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80078e2:	2b18      	cmp	r3, #24
 80078e4:	f200 8155 	bhi.w	8007b92 <HAL_RCC_GetSysClockFreq+0x2be>
 80078e8:	a201      	add	r2, pc, #4	; (adr r2, 80078f0 <HAL_RCC_GetSysClockFreq+0x1c>)
 80078ea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80078ee:	bf00      	nop
 80078f0:	08007955 	.word	0x08007955
 80078f4:	08007b93 	.word	0x08007b93
 80078f8:	08007b93 	.word	0x08007b93
 80078fc:	08007b93 	.word	0x08007b93
 8007900:	08007b93 	.word	0x08007b93
 8007904:	08007b93 	.word	0x08007b93
 8007908:	08007b93 	.word	0x08007b93
 800790c:	08007b93 	.word	0x08007b93
 8007910:	0800797b 	.word	0x0800797b
 8007914:	08007b93 	.word	0x08007b93
 8007918:	08007b93 	.word	0x08007b93
 800791c:	08007b93 	.word	0x08007b93
 8007920:	08007b93 	.word	0x08007b93
 8007924:	08007b93 	.word	0x08007b93
 8007928:	08007b93 	.word	0x08007b93
 800792c:	08007b93 	.word	0x08007b93
 8007930:	08007981 	.word	0x08007981
 8007934:	08007b93 	.word	0x08007b93
 8007938:	08007b93 	.word	0x08007b93
 800793c:	08007b93 	.word	0x08007b93
 8007940:	08007b93 	.word	0x08007b93
 8007944:	08007b93 	.word	0x08007b93
 8007948:	08007b93 	.word	0x08007b93
 800794c:	08007b93 	.word	0x08007b93
 8007950:	08007987 	.word	0x08007987
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8007954:	4b94      	ldr	r3, [pc, #592]	; (8007ba8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007956:	681b      	ldr	r3, [r3, #0]
 8007958:	f003 0320 	and.w	r3, r3, #32
 800795c:	2b00      	cmp	r3, #0
 800795e:	d009      	beq.n	8007974 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8007960:	4b91      	ldr	r3, [pc, #580]	; (8007ba8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007962:	681b      	ldr	r3, [r3, #0]
 8007964:	08db      	lsrs	r3, r3, #3
 8007966:	f003 0303 	and.w	r3, r3, #3
 800796a:	4a90      	ldr	r2, [pc, #576]	; (8007bac <HAL_RCC_GetSysClockFreq+0x2d8>)
 800796c:	fa22 f303 	lsr.w	r3, r2, r3
 8007970:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

    break;
 8007972:	e111      	b.n	8007b98 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8007974:	4b8d      	ldr	r3, [pc, #564]	; (8007bac <HAL_RCC_GetSysClockFreq+0x2d8>)
 8007976:	61bb      	str	r3, [r7, #24]
    break;
 8007978:	e10e      	b.n	8007b98 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 800797a:	4b8d      	ldr	r3, [pc, #564]	; (8007bb0 <HAL_RCC_GetSysClockFreq+0x2dc>)
 800797c:	61bb      	str	r3, [r7, #24]
    break;
 800797e:	e10b      	b.n	8007b98 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
 8007980:	4b8c      	ldr	r3, [pc, #560]	; (8007bb4 <HAL_RCC_GetSysClockFreq+0x2e0>)
 8007982:	61bb      	str	r3, [r7, #24]
    break;
 8007984:	e108      	b.n	8007b98 <HAL_RCC_GetSysClockFreq+0x2c4>
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8007986:	4b88      	ldr	r3, [pc, #544]	; (8007ba8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007988:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800798a:	f003 0303 	and.w	r3, r3, #3
 800798e:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 8007990:	4b85      	ldr	r3, [pc, #532]	; (8007ba8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007992:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007994:	091b      	lsrs	r3, r3, #4
 8007996:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800799a:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 800799c:	4b82      	ldr	r3, [pc, #520]	; (8007ba8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800799e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80079a0:	f003 0301 	and.w	r3, r3, #1
 80079a4:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 80079a6:	4b80      	ldr	r3, [pc, #512]	; (8007ba8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80079a8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80079aa:	08db      	lsrs	r3, r3, #3
 80079ac:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80079b0:	68fa      	ldr	r2, [r7, #12]
 80079b2:	fb02 f303 	mul.w	r3, r2, r3
 80079b6:	ee07 3a90 	vmov	s15, r3
 80079ba:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80079be:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 80079c2:	693b      	ldr	r3, [r7, #16]
 80079c4:	2b00      	cmp	r3, #0
 80079c6:	f000 80e1 	beq.w	8007b8c <HAL_RCC_GetSysClockFreq+0x2b8>
 80079ca:	697b      	ldr	r3, [r7, #20]
 80079cc:	2b02      	cmp	r3, #2
 80079ce:	f000 8083 	beq.w	8007ad8 <HAL_RCC_GetSysClockFreq+0x204>
 80079d2:	697b      	ldr	r3, [r7, #20]
 80079d4:	2b02      	cmp	r3, #2
 80079d6:	f200 80a1 	bhi.w	8007b1c <HAL_RCC_GetSysClockFreq+0x248>
 80079da:	697b      	ldr	r3, [r7, #20]
 80079dc:	2b00      	cmp	r3, #0
 80079de:	d003      	beq.n	80079e8 <HAL_RCC_GetSysClockFreq+0x114>
 80079e0:	697b      	ldr	r3, [r7, #20]
 80079e2:	2b01      	cmp	r3, #1
 80079e4:	d056      	beq.n	8007a94 <HAL_RCC_GetSysClockFreq+0x1c0>
 80079e6:	e099      	b.n	8007b1c <HAL_RCC_GetSysClockFreq+0x248>
    {
      switch (pllsource)
      {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80079e8:	4b6f      	ldr	r3, [pc, #444]	; (8007ba8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80079ea:	681b      	ldr	r3, [r3, #0]
 80079ec:	f003 0320 	and.w	r3, r3, #32
 80079f0:	2b00      	cmp	r3, #0
 80079f2:	d02d      	beq.n	8007a50 <HAL_RCC_GetSysClockFreq+0x17c>
        {
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80079f4:	4b6c      	ldr	r3, [pc, #432]	; (8007ba8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80079f6:	681b      	ldr	r3, [r3, #0]
 80079f8:	08db      	lsrs	r3, r3, #3
 80079fa:	f003 0303 	and.w	r3, r3, #3
 80079fe:	4a6b      	ldr	r2, [pc, #428]	; (8007bac <HAL_RCC_GetSysClockFreq+0x2d8>)
 8007a00:	fa22 f303 	lsr.w	r3, r2, r3
 8007a04:	607b      	str	r3, [r7, #4]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8007a06:	687b      	ldr	r3, [r7, #4]
 8007a08:	ee07 3a90 	vmov	s15, r3
 8007a0c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007a10:	693b      	ldr	r3, [r7, #16]
 8007a12:	ee07 3a90 	vmov	s15, r3
 8007a16:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007a1a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007a1e:	4b62      	ldr	r3, [pc, #392]	; (8007ba8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007a20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007a22:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007a26:	ee07 3a90 	vmov	s15, r3
 8007a2a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007a2e:	ed97 6a02 	vldr	s12, [r7, #8]
 8007a32:	eddf 5a61 	vldr	s11, [pc, #388]	; 8007bb8 <HAL_RCC_GetSysClockFreq+0x2e4>
 8007a36:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007a3a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007a3e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007a42:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007a46:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007a4a:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        }
        break;
 8007a4e:	e087      	b.n	8007b60 <HAL_RCC_GetSysClockFreq+0x28c>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8007a50:	693b      	ldr	r3, [r7, #16]
 8007a52:	ee07 3a90 	vmov	s15, r3
 8007a56:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007a5a:	eddf 6a58 	vldr	s13, [pc, #352]	; 8007bbc <HAL_RCC_GetSysClockFreq+0x2e8>
 8007a5e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007a62:	4b51      	ldr	r3, [pc, #324]	; (8007ba8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007a64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007a66:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007a6a:	ee07 3a90 	vmov	s15, r3
 8007a6e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007a72:	ed97 6a02 	vldr	s12, [r7, #8]
 8007a76:	eddf 5a50 	vldr	s11, [pc, #320]	; 8007bb8 <HAL_RCC_GetSysClockFreq+0x2e4>
 8007a7a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007a7e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007a82:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007a86:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007a8a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007a8e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8007a92:	e065      	b.n	8007b60 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8007a94:	693b      	ldr	r3, [r7, #16]
 8007a96:	ee07 3a90 	vmov	s15, r3
 8007a9a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007a9e:	eddf 6a48 	vldr	s13, [pc, #288]	; 8007bc0 <HAL_RCC_GetSysClockFreq+0x2ec>
 8007aa2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007aa6:	4b40      	ldr	r3, [pc, #256]	; (8007ba8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007aa8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007aaa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007aae:	ee07 3a90 	vmov	s15, r3
 8007ab2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007ab6:	ed97 6a02 	vldr	s12, [r7, #8]
 8007aba:	eddf 5a3f 	vldr	s11, [pc, #252]	; 8007bb8 <HAL_RCC_GetSysClockFreq+0x2e4>
 8007abe:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007ac2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007ac6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007aca:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007ace:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007ad2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8007ad6:	e043      	b.n	8007b60 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8007ad8:	693b      	ldr	r3, [r7, #16]
 8007ada:	ee07 3a90 	vmov	s15, r3
 8007ade:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007ae2:	eddf 6a38 	vldr	s13, [pc, #224]	; 8007bc4 <HAL_RCC_GetSysClockFreq+0x2f0>
 8007ae6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007aea:	4b2f      	ldr	r3, [pc, #188]	; (8007ba8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007aec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007aee:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007af2:	ee07 3a90 	vmov	s15, r3
 8007af6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007afa:	ed97 6a02 	vldr	s12, [r7, #8]
 8007afe:	eddf 5a2e 	vldr	s11, [pc, #184]	; 8007bb8 <HAL_RCC_GetSysClockFreq+0x2e4>
 8007b02:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007b06:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007b0a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007b0e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007b12:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007b16:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8007b1a:	e021      	b.n	8007b60 <HAL_RCC_GetSysClockFreq+0x28c>

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8007b1c:	693b      	ldr	r3, [r7, #16]
 8007b1e:	ee07 3a90 	vmov	s15, r3
 8007b22:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007b26:	eddf 6a26 	vldr	s13, [pc, #152]	; 8007bc0 <HAL_RCC_GetSysClockFreq+0x2ec>
 8007b2a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007b2e:	4b1e      	ldr	r3, [pc, #120]	; (8007ba8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007b30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007b32:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007b36:	ee07 3a90 	vmov	s15, r3
 8007b3a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007b3e:	ed97 6a02 	vldr	s12, [r7, #8]
 8007b42:	eddf 5a1d 	vldr	s11, [pc, #116]	; 8007bb8 <HAL_RCC_GetSysClockFreq+0x2e4>
 8007b46:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007b4a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007b4e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007b52:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007b56:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007b5a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8007b5e:	bf00      	nop
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 8007b60:	4b11      	ldr	r3, [pc, #68]	; (8007ba8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007b62:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007b64:	0a5b      	lsrs	r3, r3, #9
 8007b66:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007b6a:	3301      	adds	r3, #1
 8007b6c:	603b      	str	r3, [r7, #0]
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 8007b6e:	683b      	ldr	r3, [r7, #0]
 8007b70:	ee07 3a90 	vmov	s15, r3
 8007b74:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8007b78:	edd7 6a07 	vldr	s13, [r7, #28]
 8007b7c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007b80:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007b84:	ee17 3a90 	vmov	r3, s15
 8007b88:	61bb      	str	r3, [r7, #24]
    }
    else
    {
      sysclockfreq = 0U;
    }
    break;
 8007b8a:	e005      	b.n	8007b98 <HAL_RCC_GetSysClockFreq+0x2c4>
      sysclockfreq = 0U;
 8007b8c:	2300      	movs	r3, #0
 8007b8e:	61bb      	str	r3, [r7, #24]
    break;
 8007b90:	e002      	b.n	8007b98 <HAL_RCC_GetSysClockFreq+0x2c4>

  default:
    sysclockfreq = CSI_VALUE;
 8007b92:	4b07      	ldr	r3, [pc, #28]	; (8007bb0 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8007b94:	61bb      	str	r3, [r7, #24]
    break;
 8007b96:	bf00      	nop
  }

  return sysclockfreq;
 8007b98:	69bb      	ldr	r3, [r7, #24]
}
 8007b9a:	4618      	mov	r0, r3
 8007b9c:	3724      	adds	r7, #36	; 0x24
 8007b9e:	46bd      	mov	sp, r7
 8007ba0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ba4:	4770      	bx	lr
 8007ba6:	bf00      	nop
 8007ba8:	58024400 	.word	0x58024400
 8007bac:	03d09000 	.word	0x03d09000
 8007bb0:	003d0900 	.word	0x003d0900
 8007bb4:	017d7840 	.word	0x017d7840
 8007bb8:	46000000 	.word	0x46000000
 8007bbc:	4c742400 	.word	0x4c742400
 8007bc0:	4a742400 	.word	0x4a742400
 8007bc4:	4bbebc20 	.word	0x4bbebc20

08007bc8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8007bc8:	b580      	push	{r7, lr}
 8007bca:	b082      	sub	sp, #8
 8007bcc:	af00      	add	r7, sp, #0
uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8007bce:	f7ff fe81 	bl	80078d4 <HAL_RCC_GetSysClockFreq>
 8007bd2:	4602      	mov	r2, r0
 8007bd4:	4b10      	ldr	r3, [pc, #64]	; (8007c18 <HAL_RCC_GetHCLKFreq+0x50>)
 8007bd6:	699b      	ldr	r3, [r3, #24]
 8007bd8:	0a1b      	lsrs	r3, r3, #8
 8007bda:	f003 030f 	and.w	r3, r3, #15
 8007bde:	490f      	ldr	r1, [pc, #60]	; (8007c1c <HAL_RCC_GetHCLKFreq+0x54>)
 8007be0:	5ccb      	ldrb	r3, [r1, r3]
 8007be2:	f003 031f 	and.w	r3, r3, #31
 8007be6:	fa22 f303 	lsr.w	r3, r2, r3
 8007bea:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8007bec:	4b0a      	ldr	r3, [pc, #40]	; (8007c18 <HAL_RCC_GetHCLKFreq+0x50>)
 8007bee:	699b      	ldr	r3, [r3, #24]
 8007bf0:	f003 030f 	and.w	r3, r3, #15
 8007bf4:	4a09      	ldr	r2, [pc, #36]	; (8007c1c <HAL_RCC_GetHCLKFreq+0x54>)
 8007bf6:	5cd3      	ldrb	r3, [r2, r3]
 8007bf8:	f003 031f 	and.w	r3, r3, #31
 8007bfc:	687a      	ldr	r2, [r7, #4]
 8007bfe:	fa22 f303 	lsr.w	r3, r2, r3
 8007c02:	4a07      	ldr	r2, [pc, #28]	; (8007c20 <HAL_RCC_GetHCLKFreq+0x58>)
 8007c04:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8007c06:	4a07      	ldr	r2, [pc, #28]	; (8007c24 <HAL_RCC_GetHCLKFreq+0x5c>)
 8007c08:	687b      	ldr	r3, [r7, #4]
 8007c0a:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8007c0c:	4b04      	ldr	r3, [pc, #16]	; (8007c20 <HAL_RCC_GetHCLKFreq+0x58>)
 8007c0e:	681b      	ldr	r3, [r3, #0]
}
 8007c10:	4618      	mov	r0, r3
 8007c12:	3708      	adds	r7, #8
 8007c14:	46bd      	mov	sp, r7
 8007c16:	bd80      	pop	{r7, pc}
 8007c18:	58024400 	.word	0x58024400
 8007c1c:	080166e8 	.word	0x080166e8
 8007c20:	24000004 	.word	0x24000004
 8007c24:	24000000 	.word	0x24000000

08007c28 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8007c28:	b580      	push	{r7, lr}
 8007c2a:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1)>> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8007c2c:	f7ff ffcc 	bl	8007bc8 <HAL_RCC_GetHCLKFreq>
 8007c30:	4602      	mov	r2, r0
 8007c32:	4b06      	ldr	r3, [pc, #24]	; (8007c4c <HAL_RCC_GetPCLK1Freq+0x24>)
 8007c34:	69db      	ldr	r3, [r3, #28]
 8007c36:	091b      	lsrs	r3, r3, #4
 8007c38:	f003 0307 	and.w	r3, r3, #7
 8007c3c:	4904      	ldr	r1, [pc, #16]	; (8007c50 <HAL_RCC_GetPCLK1Freq+0x28>)
 8007c3e:	5ccb      	ldrb	r3, [r1, r3]
 8007c40:	f003 031f 	and.w	r3, r3, #31
 8007c44:	fa22 f303 	lsr.w	r3, r2, r3
#else
 /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1)>> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8007c48:	4618      	mov	r0, r3
 8007c4a:	bd80      	pop	{r7, pc}
 8007c4c:	58024400 	.word	0x58024400
 8007c50:	080166e8 	.word	0x080166e8

08007c54 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8007c54:	b580      	push	{r7, lr}
 8007c56:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2)>> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8007c58:	f7ff ffb6 	bl	8007bc8 <HAL_RCC_GetHCLKFreq>
 8007c5c:	4602      	mov	r2, r0
 8007c5e:	4b06      	ldr	r3, [pc, #24]	; (8007c78 <HAL_RCC_GetPCLK2Freq+0x24>)
 8007c60:	69db      	ldr	r3, [r3, #28]
 8007c62:	0a1b      	lsrs	r3, r3, #8
 8007c64:	f003 0307 	and.w	r3, r3, #7
 8007c68:	4904      	ldr	r1, [pc, #16]	; (8007c7c <HAL_RCC_GetPCLK2Freq+0x28>)
 8007c6a:	5ccb      	ldrb	r3, [r1, r3]
 8007c6c:	f003 031f 	and.w	r3, r3, #31
 8007c70:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2)>> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 8007c74:	4618      	mov	r0, r3
 8007c76:	bd80      	pop	{r7, pc}
 8007c78:	58024400 	.word	0x58024400
 8007c7c:	080166e8 	.word	0x080166e8

08007c80 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8007c80:	b580      	push	{r7, lr}
 8007c82:	b086      	sub	sp, #24
 8007c84:	af00      	add	r7, sp, #0
 8007c86:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8007c88:	2300      	movs	r3, #0
 8007c8a:	75fb      	strb	r3, [r7, #23]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8007c8c:	2300      	movs	r3, #0
 8007c8e:	75bb      	strb	r3, [r7, #22]

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8007c90:	687b      	ldr	r3, [r7, #4]
 8007c92:	681b      	ldr	r3, [r3, #0]
 8007c94:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007c98:	2b00      	cmp	r3, #0
 8007c9a:	d03f      	beq.n	8007d1c <HAL_RCCEx_PeriphCLKConfig+0x9c>
  {

    switch(PeriphClkInit->SpdifrxClockSelection)
 8007c9c:	687b      	ldr	r3, [r7, #4]
 8007c9e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007ca0:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8007ca4:	d02a      	beq.n	8007cfc <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8007ca6:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8007caa:	d824      	bhi.n	8007cf6 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8007cac:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8007cb0:	d018      	beq.n	8007ce4 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8007cb2:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8007cb6:	d81e      	bhi.n	8007cf6 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8007cb8:	2b00      	cmp	r3, #0
 8007cba:	d003      	beq.n	8007cc4 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8007cbc:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007cc0:	d007      	beq.n	8007cd2 <HAL_RCCEx_PeriphCLKConfig+0x52>
 8007cc2:	e018      	b.n	8007cf6 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
      /* Enable PLL1Q Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007cc4:	4bab      	ldr	r3, [pc, #684]	; (8007f74 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8007cc6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007cc8:	4aaa      	ldr	r2, [pc, #680]	; (8007f74 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8007cca:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007cce:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8007cd0:	e015      	b.n	8007cfe <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8007cd2:	687b      	ldr	r3, [r7, #4]
 8007cd4:	3304      	adds	r3, #4
 8007cd6:	2102      	movs	r1, #2
 8007cd8:	4618      	mov	r0, r3
 8007cda:	f001 fff3 	bl	8009cc4 <RCCEx_PLL2_Config>
 8007cde:	4603      	mov	r3, r0
 8007ce0:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8007ce2:	e00c      	b.n	8007cfe <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8007ce4:	687b      	ldr	r3, [r7, #4]
 8007ce6:	3324      	adds	r3, #36	; 0x24
 8007ce8:	2102      	movs	r1, #2
 8007cea:	4618      	mov	r0, r3
 8007cec:	f002 f89c 	bl	8009e28 <RCCEx_PLL3_Config>
 8007cf0:	4603      	mov	r3, r0
 8007cf2:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8007cf4:	e003      	b.n	8007cfe <HAL_RCCEx_PeriphCLKConfig+0x7e>
      /* Internal OSC clock is used as source of SPDIFRX clock*/
      /* SPDIFRX clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8007cf6:	2301      	movs	r3, #1
 8007cf8:	75fb      	strb	r3, [r7, #23]
      break;
 8007cfa:	e000      	b.n	8007cfe <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8007cfc:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007cfe:	7dfb      	ldrb	r3, [r7, #23]
 8007d00:	2b00      	cmp	r3, #0
 8007d02:	d109      	bne.n	8007d18 <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8007d04:	4b9b      	ldr	r3, [pc, #620]	; (8007f74 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8007d06:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007d08:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8007d0c:	687b      	ldr	r3, [r7, #4]
 8007d0e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007d10:	4998      	ldr	r1, [pc, #608]	; (8007f74 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8007d12:	4313      	orrs	r3, r2
 8007d14:	650b      	str	r3, [r1, #80]	; 0x50
 8007d16:	e001      	b.n	8007d1c <HAL_RCCEx_PeriphCLKConfig+0x9c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007d18:	7dfb      	ldrb	r3, [r7, #23]
 8007d1a:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8007d1c:	687b      	ldr	r3, [r7, #4]
 8007d1e:	681b      	ldr	r3, [r3, #0]
 8007d20:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007d24:	2b00      	cmp	r3, #0
 8007d26:	d03d      	beq.n	8007da4 <HAL_RCCEx_PeriphCLKConfig+0x124>
  {
    switch(PeriphClkInit->Sai1ClockSelection)
 8007d28:	687b      	ldr	r3, [r7, #4]
 8007d2a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007d2c:	2b04      	cmp	r3, #4
 8007d2e:	d826      	bhi.n	8007d7e <HAL_RCCEx_PeriphCLKConfig+0xfe>
 8007d30:	a201      	add	r2, pc, #4	; (adr r2, 8007d38 <HAL_RCCEx_PeriphCLKConfig+0xb8>)
 8007d32:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007d36:	bf00      	nop
 8007d38:	08007d4d 	.word	0x08007d4d
 8007d3c:	08007d5b 	.word	0x08007d5b
 8007d40:	08007d6d 	.word	0x08007d6d
 8007d44:	08007d85 	.word	0x08007d85
 8007d48:	08007d85 	.word	0x08007d85
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007d4c:	4b89      	ldr	r3, [pc, #548]	; (8007f74 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8007d4e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007d50:	4a88      	ldr	r2, [pc, #544]	; (8007f74 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8007d52:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007d56:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8007d58:	e015      	b.n	8007d86 <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8007d5a:	687b      	ldr	r3, [r7, #4]
 8007d5c:	3304      	adds	r3, #4
 8007d5e:	2100      	movs	r1, #0
 8007d60:	4618      	mov	r0, r3
 8007d62:	f001 ffaf 	bl	8009cc4 <RCCEx_PLL2_Config>
 8007d66:	4603      	mov	r3, r0
 8007d68:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8007d6a:	e00c      	b.n	8007d86 <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8007d6c:	687b      	ldr	r3, [r7, #4]
 8007d6e:	3324      	adds	r3, #36	; 0x24
 8007d70:	2100      	movs	r1, #0
 8007d72:	4618      	mov	r0, r3
 8007d74:	f002 f858 	bl	8009e28 <RCCEx_PLL3_Config>
 8007d78:	4603      	mov	r3, r0
 8007d7a:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8007d7c:	e003      	b.n	8007d86 <HAL_RCCEx_PeriphCLKConfig+0x106>
      /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8007d7e:	2301      	movs	r3, #1
 8007d80:	75fb      	strb	r3, [r7, #23]
      break;
 8007d82:	e000      	b.n	8007d86 <HAL_RCCEx_PeriphCLKConfig+0x106>
      break;
 8007d84:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007d86:	7dfb      	ldrb	r3, [r7, #23]
 8007d88:	2b00      	cmp	r3, #0
 8007d8a:	d109      	bne.n	8007da0 <HAL_RCCEx_PeriphCLKConfig+0x120>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8007d8c:	4b79      	ldr	r3, [pc, #484]	; (8007f74 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8007d8e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007d90:	f023 0207 	bic.w	r2, r3, #7
 8007d94:	687b      	ldr	r3, [r7, #4]
 8007d96:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007d98:	4976      	ldr	r1, [pc, #472]	; (8007f74 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8007d9a:	4313      	orrs	r3, r2
 8007d9c:	650b      	str	r3, [r1, #80]	; 0x50
 8007d9e:	e001      	b.n	8007da4 <HAL_RCCEx_PeriphCLKConfig+0x124>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007da0:	7dfb      	ldrb	r3, [r7, #23]
 8007da2:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 8007da4:	687b      	ldr	r3, [r7, #4]
 8007da6:	681b      	ldr	r3, [r3, #0]
 8007da8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8007dac:	2b00      	cmp	r3, #0
 8007dae:	d042      	beq.n	8007e36 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
  {
    switch(PeriphClkInit->Sai23ClockSelection)
 8007db0:	687b      	ldr	r3, [r7, #4]
 8007db2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007db4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007db8:	d02b      	beq.n	8007e12 <HAL_RCCEx_PeriphCLKConfig+0x192>
 8007dba:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007dbe:	d825      	bhi.n	8007e0c <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8007dc0:	2bc0      	cmp	r3, #192	; 0xc0
 8007dc2:	d028      	beq.n	8007e16 <HAL_RCCEx_PeriphCLKConfig+0x196>
 8007dc4:	2bc0      	cmp	r3, #192	; 0xc0
 8007dc6:	d821      	bhi.n	8007e0c <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8007dc8:	2b80      	cmp	r3, #128	; 0x80
 8007dca:	d016      	beq.n	8007dfa <HAL_RCCEx_PeriphCLKConfig+0x17a>
 8007dcc:	2b80      	cmp	r3, #128	; 0x80
 8007dce:	d81d      	bhi.n	8007e0c <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8007dd0:	2b00      	cmp	r3, #0
 8007dd2:	d002      	beq.n	8007dda <HAL_RCCEx_PeriphCLKConfig+0x15a>
 8007dd4:	2b40      	cmp	r3, #64	; 0x40
 8007dd6:	d007      	beq.n	8007de8 <HAL_RCCEx_PeriphCLKConfig+0x168>
 8007dd8:	e018      	b.n	8007e0c <HAL_RCCEx_PeriphCLKConfig+0x18c>
    {
    case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007dda:	4b66      	ldr	r3, [pc, #408]	; (8007f74 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8007ddc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007dde:	4a65      	ldr	r2, [pc, #404]	; (8007f74 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8007de0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007de4:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8007de6:	e017      	b.n	8007e18 <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8007de8:	687b      	ldr	r3, [r7, #4]
 8007dea:	3304      	adds	r3, #4
 8007dec:	2100      	movs	r1, #0
 8007dee:	4618      	mov	r0, r3
 8007df0:	f001 ff68 	bl	8009cc4 <RCCEx_PLL2_Config>
 8007df4:	4603      	mov	r3, r0
 8007df6:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8007df8:	e00e      	b.n	8007e18 <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8007dfa:	687b      	ldr	r3, [r7, #4]
 8007dfc:	3324      	adds	r3, #36	; 0x24
 8007dfe:	2100      	movs	r1, #0
 8007e00:	4618      	mov	r0, r3
 8007e02:	f002 f811 	bl	8009e28 <RCCEx_PLL3_Config>
 8007e06:	4603      	mov	r3, r0
 8007e08:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8007e0a:	e005      	b.n	8007e18 <HAL_RCCEx_PeriphCLKConfig+0x198>
      /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
      /* SAI2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8007e0c:	2301      	movs	r3, #1
 8007e0e:	75fb      	strb	r3, [r7, #23]
      break;
 8007e10:	e002      	b.n	8007e18 <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 8007e12:	bf00      	nop
 8007e14:	e000      	b.n	8007e18 <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 8007e16:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007e18:	7dfb      	ldrb	r3, [r7, #23]
 8007e1a:	2b00      	cmp	r3, #0
 8007e1c:	d109      	bne.n	8007e32 <HAL_RCCEx_PeriphCLKConfig+0x1b2>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 8007e1e:	4b55      	ldr	r3, [pc, #340]	; (8007f74 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8007e20:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007e22:	f423 72e0 	bic.w	r2, r3, #448	; 0x1c0
 8007e26:	687b      	ldr	r3, [r7, #4]
 8007e28:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007e2a:	4952      	ldr	r1, [pc, #328]	; (8007f74 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8007e2c:	4313      	orrs	r3, r2
 8007e2e:	650b      	str	r3, [r1, #80]	; 0x50
 8007e30:	e001      	b.n	8007e36 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007e32:	7dfb      	ldrb	r3, [r7, #23]
 8007e34:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8007e36:	687b      	ldr	r3, [r7, #4]
 8007e38:	681b      	ldr	r3, [r3, #0]
 8007e3a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007e3e:	2b00      	cmp	r3, #0
 8007e40:	d049      	beq.n	8007ed6 <HAL_RCCEx_PeriphCLKConfig+0x256>
  {
    switch(PeriphClkInit->Sai4AClockSelection)
 8007e42:	687b      	ldr	r3, [r7, #4]
 8007e44:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8007e48:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8007e4c:	d030      	beq.n	8007eb0 <HAL_RCCEx_PeriphCLKConfig+0x230>
 8007e4e:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8007e52:	d82a      	bhi.n	8007eaa <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8007e54:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8007e58:	d02c      	beq.n	8007eb4 <HAL_RCCEx_PeriphCLKConfig+0x234>
 8007e5a:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8007e5e:	d824      	bhi.n	8007eaa <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8007e60:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8007e64:	d018      	beq.n	8007e98 <HAL_RCCEx_PeriphCLKConfig+0x218>
 8007e66:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8007e6a:	d81e      	bhi.n	8007eaa <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8007e6c:	2b00      	cmp	r3, #0
 8007e6e:	d003      	beq.n	8007e78 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
 8007e70:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8007e74:	d007      	beq.n	8007e86 <HAL_RCCEx_PeriphCLKConfig+0x206>
 8007e76:	e018      	b.n	8007eaa <HAL_RCCEx_PeriphCLKConfig+0x22a>
    {
    case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007e78:	4b3e      	ldr	r3, [pc, #248]	; (8007f74 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8007e7a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007e7c:	4a3d      	ldr	r2, [pc, #244]	; (8007f74 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8007e7e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007e82:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8007e84:	e017      	b.n	8007eb6 <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8007e86:	687b      	ldr	r3, [r7, #4]
 8007e88:	3304      	adds	r3, #4
 8007e8a:	2100      	movs	r1, #0
 8007e8c:	4618      	mov	r0, r3
 8007e8e:	f001 ff19 	bl	8009cc4 <RCCEx_PLL2_Config>
 8007e92:	4603      	mov	r3, r0
 8007e94:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 8007e96:	e00e      	b.n	8007eb6 <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8007e98:	687b      	ldr	r3, [r7, #4]
 8007e9a:	3324      	adds	r3, #36	; 0x24
 8007e9c:	2100      	movs	r1, #0
 8007e9e:	4618      	mov	r0, r3
 8007ea0:	f001 ffc2 	bl	8009e28 <RCCEx_PLL3_Config>
 8007ea4:	4603      	mov	r3, r0
 8007ea6:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8007ea8:	e005      	b.n	8007eb6 <HAL_RCCEx_PeriphCLKConfig+0x236>
      /* SAI4A clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 8007eaa:	2301      	movs	r3, #1
 8007eac:	75fb      	strb	r3, [r7, #23]
      break;
 8007eae:	e002      	b.n	8007eb6 <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 8007eb0:	bf00      	nop
 8007eb2:	e000      	b.n	8007eb6 <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 8007eb4:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007eb6:	7dfb      	ldrb	r3, [r7, #23]
 8007eb8:	2b00      	cmp	r3, #0
 8007eba:	d10a      	bne.n	8007ed2 <HAL_RCCEx_PeriphCLKConfig+0x252>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8007ebc:	4b2d      	ldr	r3, [pc, #180]	; (8007f74 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8007ebe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007ec0:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 8007ec4:	687b      	ldr	r3, [r7, #4]
 8007ec6:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8007eca:	492a      	ldr	r1, [pc, #168]	; (8007f74 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8007ecc:	4313      	orrs	r3, r2
 8007ece:	658b      	str	r3, [r1, #88]	; 0x58
 8007ed0:	e001      	b.n	8007ed6 <HAL_RCCEx_PeriphCLKConfig+0x256>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007ed2:	7dfb      	ldrb	r3, [r7, #23]
 8007ed4:	75bb      	strb	r3, [r7, #22]
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8007ed6:	687b      	ldr	r3, [r7, #4]
 8007ed8:	681b      	ldr	r3, [r3, #0]
 8007eda:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007ede:	2b00      	cmp	r3, #0
 8007ee0:	d04c      	beq.n	8007f7c <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    switch(PeriphClkInit->Sai4BClockSelection)
 8007ee2:	687b      	ldr	r3, [r7, #4]
 8007ee4:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8007ee8:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8007eec:	d030      	beq.n	8007f50 <HAL_RCCEx_PeriphCLKConfig+0x2d0>
 8007eee:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8007ef2:	d82a      	bhi.n	8007f4a <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8007ef4:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8007ef8:	d02c      	beq.n	8007f54 <HAL_RCCEx_PeriphCLKConfig+0x2d4>
 8007efa:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8007efe:	d824      	bhi.n	8007f4a <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8007f00:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8007f04:	d018      	beq.n	8007f38 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
 8007f06:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8007f0a:	d81e      	bhi.n	8007f4a <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8007f0c:	2b00      	cmp	r3, #0
 8007f0e:	d003      	beq.n	8007f18 <HAL_RCCEx_PeriphCLKConfig+0x298>
 8007f10:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8007f14:	d007      	beq.n	8007f26 <HAL_RCCEx_PeriphCLKConfig+0x2a6>
 8007f16:	e018      	b.n	8007f4a <HAL_RCCEx_PeriphCLKConfig+0x2ca>
    {
    case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007f18:	4b16      	ldr	r3, [pc, #88]	; (8007f74 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8007f1a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007f1c:	4a15      	ldr	r2, [pc, #84]	; (8007f74 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8007f1e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007f22:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8007f24:	e017      	b.n	8007f56 <HAL_RCCEx_PeriphCLKConfig+0x2d6>

    case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8007f26:	687b      	ldr	r3, [r7, #4]
 8007f28:	3304      	adds	r3, #4
 8007f2a:	2100      	movs	r1, #0
 8007f2c:	4618      	mov	r0, r3
 8007f2e:	f001 fec9 	bl	8009cc4 <RCCEx_PLL2_Config>
 8007f32:	4603      	mov	r3, r0
 8007f34:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 8007f36:	e00e      	b.n	8007f56 <HAL_RCCEx_PeriphCLKConfig+0x2d6>

    case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8007f38:	687b      	ldr	r3, [r7, #4]
 8007f3a:	3324      	adds	r3, #36	; 0x24
 8007f3c:	2100      	movs	r1, #0
 8007f3e:	4618      	mov	r0, r3
 8007f40:	f001 ff72 	bl	8009e28 <RCCEx_PLL3_Config>
 8007f44:	4603      	mov	r3, r0
 8007f46:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8007f48:	e005      	b.n	8007f56 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
      /* SAI4B clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 8007f4a:	2301      	movs	r3, #1
 8007f4c:	75fb      	strb	r3, [r7, #23]
      break;
 8007f4e:	e002      	b.n	8007f56 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
      break;
 8007f50:	bf00      	nop
 8007f52:	e000      	b.n	8007f56 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
      break;
 8007f54:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007f56:	7dfb      	ldrb	r3, [r7, #23]
 8007f58:	2b00      	cmp	r3, #0
 8007f5a:	d10d      	bne.n	8007f78 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8007f5c:	4b05      	ldr	r3, [pc, #20]	; (8007f74 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8007f5e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007f60:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 8007f64:	687b      	ldr	r3, [r7, #4]
 8007f66:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8007f6a:	4902      	ldr	r1, [pc, #8]	; (8007f74 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8007f6c:	4313      	orrs	r3, r2
 8007f6e:	658b      	str	r3, [r1, #88]	; 0x58
 8007f70:	e004      	b.n	8007f7c <HAL_RCCEx_PeriphCLKConfig+0x2fc>
 8007f72:	bf00      	nop
 8007f74:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007f78:	7dfb      	ldrb	r3, [r7, #23]
 8007f7a:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8007f7c:	687b      	ldr	r3, [r7, #4]
 8007f7e:	681b      	ldr	r3, [r3, #0]
 8007f80:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007f84:	2b00      	cmp	r3, #0
 8007f86:	d032      	beq.n	8007fee <HAL_RCCEx_PeriphCLKConfig+0x36e>
  {
    switch(PeriphClkInit->QspiClockSelection)
 8007f88:	687b      	ldr	r3, [r7, #4]
 8007f8a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007f8c:	2b30      	cmp	r3, #48	; 0x30
 8007f8e:	d01c      	beq.n	8007fca <HAL_RCCEx_PeriphCLKConfig+0x34a>
 8007f90:	2b30      	cmp	r3, #48	; 0x30
 8007f92:	d817      	bhi.n	8007fc4 <HAL_RCCEx_PeriphCLKConfig+0x344>
 8007f94:	2b20      	cmp	r3, #32
 8007f96:	d00c      	beq.n	8007fb2 <HAL_RCCEx_PeriphCLKConfig+0x332>
 8007f98:	2b20      	cmp	r3, #32
 8007f9a:	d813      	bhi.n	8007fc4 <HAL_RCCEx_PeriphCLKConfig+0x344>
 8007f9c:	2b00      	cmp	r3, #0
 8007f9e:	d016      	beq.n	8007fce <HAL_RCCEx_PeriphCLKConfig+0x34e>
 8007fa0:	2b10      	cmp	r3, #16
 8007fa2:	d10f      	bne.n	8007fc4 <HAL_RCCEx_PeriphCLKConfig+0x344>
    {
    case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
      /* Enable QSPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007fa4:	4baf      	ldr	r3, [pc, #700]	; (8008264 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8007fa6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007fa8:	4aae      	ldr	r2, [pc, #696]	; (8008264 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8007faa:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007fae:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* QSPI clock source configuration done later after clock selection check */
      break;
 8007fb0:	e00e      	b.n	8007fd0 <HAL_RCCEx_PeriphCLKConfig+0x350>

    case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8007fb2:	687b      	ldr	r3, [r7, #4]
 8007fb4:	3304      	adds	r3, #4
 8007fb6:	2102      	movs	r1, #2
 8007fb8:	4618      	mov	r0, r3
 8007fba:	f001 fe83 	bl	8009cc4 <RCCEx_PLL2_Config>
 8007fbe:	4603      	mov	r3, r0
 8007fc0:	75fb      	strb	r3, [r7, #23]

      /* QSPI clock source configuration done later after clock selection check */
      break;
 8007fc2:	e005      	b.n	8007fd0 <HAL_RCCEx_PeriphCLKConfig+0x350>
    case RCC_QSPICLKSOURCE_D1HCLK:
      /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8007fc4:	2301      	movs	r3, #1
 8007fc6:	75fb      	strb	r3, [r7, #23]
      break;
 8007fc8:	e002      	b.n	8007fd0 <HAL_RCCEx_PeriphCLKConfig+0x350>
      break;
 8007fca:	bf00      	nop
 8007fcc:	e000      	b.n	8007fd0 <HAL_RCCEx_PeriphCLKConfig+0x350>
      break;
 8007fce:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007fd0:	7dfb      	ldrb	r3, [r7, #23]
 8007fd2:	2b00      	cmp	r3, #0
 8007fd4:	d109      	bne.n	8007fea <HAL_RCCEx_PeriphCLKConfig+0x36a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8007fd6:	4ba3      	ldr	r3, [pc, #652]	; (8008264 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8007fd8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007fda:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8007fde:	687b      	ldr	r3, [r7, #4]
 8007fe0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007fe2:	49a0      	ldr	r1, [pc, #640]	; (8008264 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8007fe4:	4313      	orrs	r3, r2
 8007fe6:	64cb      	str	r3, [r1, #76]	; 0x4c
 8007fe8:	e001      	b.n	8007fee <HAL_RCCEx_PeriphCLKConfig+0x36e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007fea:	7dfb      	ldrb	r3, [r7, #23]
 8007fec:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8007fee:	687b      	ldr	r3, [r7, #4]
 8007ff0:	681b      	ldr	r3, [r3, #0]
 8007ff2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8007ff6:	2b00      	cmp	r3, #0
 8007ff8:	d047      	beq.n	800808a <HAL_RCCEx_PeriphCLKConfig+0x40a>
  {
    switch(PeriphClkInit->Spi123ClockSelection)
 8007ffa:	687b      	ldr	r3, [r7, #4]
 8007ffc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007ffe:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8008002:	d030      	beq.n	8008066 <HAL_RCCEx_PeriphCLKConfig+0x3e6>
 8008004:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8008008:	d82a      	bhi.n	8008060 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
 800800a:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800800e:	d02c      	beq.n	800806a <HAL_RCCEx_PeriphCLKConfig+0x3ea>
 8008010:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8008014:	d824      	bhi.n	8008060 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
 8008016:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800801a:	d018      	beq.n	800804e <HAL_RCCEx_PeriphCLKConfig+0x3ce>
 800801c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008020:	d81e      	bhi.n	8008060 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
 8008022:	2b00      	cmp	r3, #0
 8008024:	d003      	beq.n	800802e <HAL_RCCEx_PeriphCLKConfig+0x3ae>
 8008026:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800802a:	d007      	beq.n	800803c <HAL_RCCEx_PeriphCLKConfig+0x3bc>
 800802c:	e018      	b.n	8008060 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
    {
    case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
      /* Enable SPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800802e:	4b8d      	ldr	r3, [pc, #564]	; (8008264 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8008030:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008032:	4a8c      	ldr	r2, [pc, #560]	; (8008264 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8008034:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008038:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 800803a:	e017      	b.n	800806c <HAL_RCCEx_PeriphCLKConfig+0x3ec>

    case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800803c:	687b      	ldr	r3, [r7, #4]
 800803e:	3304      	adds	r3, #4
 8008040:	2100      	movs	r1, #0
 8008042:	4618      	mov	r0, r3
 8008044:	f001 fe3e 	bl	8009cc4 <RCCEx_PLL2_Config>
 8008048:	4603      	mov	r3, r0
 800804a:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 800804c:	e00e      	b.n	800806c <HAL_RCCEx_PeriphCLKConfig+0x3ec>

    case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 800804e:	687b      	ldr	r3, [r7, #4]
 8008050:	3324      	adds	r3, #36	; 0x24
 8008052:	2100      	movs	r1, #0
 8008054:	4618      	mov	r0, r3
 8008056:	f001 fee7 	bl	8009e28 <RCCEx_PLL3_Config>
 800805a:	4603      	mov	r3, r0
 800805c:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 800805e:	e005      	b.n	800806c <HAL_RCCEx_PeriphCLKConfig+0x3ec>
      /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8008060:	2301      	movs	r3, #1
 8008062:	75fb      	strb	r3, [r7, #23]
      break;
 8008064:	e002      	b.n	800806c <HAL_RCCEx_PeriphCLKConfig+0x3ec>
      break;
 8008066:	bf00      	nop
 8008068:	e000      	b.n	800806c <HAL_RCCEx_PeriphCLKConfig+0x3ec>
      break;
 800806a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800806c:	7dfb      	ldrb	r3, [r7, #23]
 800806e:	2b00      	cmp	r3, #0
 8008070:	d109      	bne.n	8008086 <HAL_RCCEx_PeriphCLKConfig+0x406>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8008072:	4b7c      	ldr	r3, [pc, #496]	; (8008264 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8008074:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008076:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 800807a:	687b      	ldr	r3, [r7, #4]
 800807c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800807e:	4979      	ldr	r1, [pc, #484]	; (8008264 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8008080:	4313      	orrs	r3, r2
 8008082:	650b      	str	r3, [r1, #80]	; 0x50
 8008084:	e001      	b.n	800808a <HAL_RCCEx_PeriphCLKConfig+0x40a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008086:	7dfb      	ldrb	r3, [r7, #23]
 8008088:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 800808a:	687b      	ldr	r3, [r7, #4]
 800808c:	681b      	ldr	r3, [r3, #0]
 800808e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8008092:	2b00      	cmp	r3, #0
 8008094:	d049      	beq.n	800812a <HAL_RCCEx_PeriphCLKConfig+0x4aa>
  {
    switch(PeriphClkInit->Spi45ClockSelection)
 8008096:	687b      	ldr	r3, [r7, #4]
 8008098:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800809a:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800809e:	d02e      	beq.n	80080fe <HAL_RCCEx_PeriphCLKConfig+0x47e>
 80080a0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80080a4:	d828      	bhi.n	80080f8 <HAL_RCCEx_PeriphCLKConfig+0x478>
 80080a6:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80080aa:	d02a      	beq.n	8008102 <HAL_RCCEx_PeriphCLKConfig+0x482>
 80080ac:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80080b0:	d822      	bhi.n	80080f8 <HAL_RCCEx_PeriphCLKConfig+0x478>
 80080b2:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80080b6:	d026      	beq.n	8008106 <HAL_RCCEx_PeriphCLKConfig+0x486>
 80080b8:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80080bc:	d81c      	bhi.n	80080f8 <HAL_RCCEx_PeriphCLKConfig+0x478>
 80080be:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80080c2:	d010      	beq.n	80080e6 <HAL_RCCEx_PeriphCLKConfig+0x466>
 80080c4:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80080c8:	d816      	bhi.n	80080f8 <HAL_RCCEx_PeriphCLKConfig+0x478>
 80080ca:	2b00      	cmp	r3, #0
 80080cc:	d01d      	beq.n	800810a <HAL_RCCEx_PeriphCLKConfig+0x48a>
 80080ce:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80080d2:	d111      	bne.n	80080f8 <HAL_RCCEx_PeriphCLKConfig+0x478>
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80080d4:	687b      	ldr	r3, [r7, #4]
 80080d6:	3304      	adds	r3, #4
 80080d8:	2101      	movs	r1, #1
 80080da:	4618      	mov	r0, r3
 80080dc:	f001 fdf2 	bl	8009cc4 <RCCEx_PLL2_Config>
 80080e0:	4603      	mov	r3, r0
 80080e2:	75fb      	strb	r3, [r7, #23]

      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 80080e4:	e012      	b.n	800810c <HAL_RCCEx_PeriphCLKConfig+0x48c>
    case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80080e6:	687b      	ldr	r3, [r7, #4]
 80080e8:	3324      	adds	r3, #36	; 0x24
 80080ea:	2101      	movs	r1, #1
 80080ec:	4618      	mov	r0, r3
 80080ee:	f001 fe9b 	bl	8009e28 <RCCEx_PLL3_Config>
 80080f2:	4603      	mov	r3, r0
 80080f4:	75fb      	strb	r3, [r7, #23]
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 80080f6:	e009      	b.n	800810c <HAL_RCCEx_PeriphCLKConfig+0x48c>
      /* HSE,  oscillator is used as source of SPI4/5 clock */
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80080f8:	2301      	movs	r3, #1
 80080fa:	75fb      	strb	r3, [r7, #23]
      break;
 80080fc:	e006      	b.n	800810c <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 80080fe:	bf00      	nop
 8008100:	e004      	b.n	800810c <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 8008102:	bf00      	nop
 8008104:	e002      	b.n	800810c <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 8008106:	bf00      	nop
 8008108:	e000      	b.n	800810c <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 800810a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800810c:	7dfb      	ldrb	r3, [r7, #23]
 800810e:	2b00      	cmp	r3, #0
 8008110:	d109      	bne.n	8008126 <HAL_RCCEx_PeriphCLKConfig+0x4a6>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8008112:	4b54      	ldr	r3, [pc, #336]	; (8008264 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8008114:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008116:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 800811a:	687b      	ldr	r3, [r7, #4]
 800811c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800811e:	4951      	ldr	r1, [pc, #324]	; (8008264 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8008120:	4313      	orrs	r3, r2
 8008122:	650b      	str	r3, [r1, #80]	; 0x50
 8008124:	e001      	b.n	800812a <HAL_RCCEx_PeriphCLKConfig+0x4aa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008126:	7dfb      	ldrb	r3, [r7, #23]
 8008128:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 800812a:	687b      	ldr	r3, [r7, #4]
 800812c:	681b      	ldr	r3, [r3, #0]
 800812e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8008132:	2b00      	cmp	r3, #0
 8008134:	d04b      	beq.n	80081ce <HAL_RCCEx_PeriphCLKConfig+0x54e>
  {
    switch(PeriphClkInit->Spi6ClockSelection)
 8008136:	687b      	ldr	r3, [r7, #4]
 8008138:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800813c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8008140:	d02e      	beq.n	80081a0 <HAL_RCCEx_PeriphCLKConfig+0x520>
 8008142:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8008146:	d828      	bhi.n	800819a <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8008148:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800814c:	d02a      	beq.n	80081a4 <HAL_RCCEx_PeriphCLKConfig+0x524>
 800814e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008152:	d822      	bhi.n	800819a <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8008154:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8008158:	d026      	beq.n	80081a8 <HAL_RCCEx_PeriphCLKConfig+0x528>
 800815a:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800815e:	d81c      	bhi.n	800819a <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8008160:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008164:	d010      	beq.n	8008188 <HAL_RCCEx_PeriphCLKConfig+0x508>
 8008166:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800816a:	d816      	bhi.n	800819a <HAL_RCCEx_PeriphCLKConfig+0x51a>
 800816c:	2b00      	cmp	r3, #0
 800816e:	d01d      	beq.n	80081ac <HAL_RCCEx_PeriphCLKConfig+0x52c>
 8008170:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8008174:	d111      	bne.n	800819a <HAL_RCCEx_PeriphCLKConfig+0x51a>
      /* SPI6 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8008176:	687b      	ldr	r3, [r7, #4]
 8008178:	3304      	adds	r3, #4
 800817a:	2101      	movs	r1, #1
 800817c:	4618      	mov	r0, r3
 800817e:	f001 fda1 	bl	8009cc4 <RCCEx_PLL2_Config>
 8008182:	4603      	mov	r3, r0
 8008184:	75fb      	strb	r3, [r7, #23]

      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8008186:	e012      	b.n	80081ae <HAL_RCCEx_PeriphCLKConfig+0x52e>
    case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8008188:	687b      	ldr	r3, [r7, #4]
 800818a:	3324      	adds	r3, #36	; 0x24
 800818c:	2101      	movs	r1, #1
 800818e:	4618      	mov	r0, r3
 8008190:	f001 fe4a 	bl	8009e28 <RCCEx_PLL3_Config>
 8008194:	4603      	mov	r3, r0
 8008196:	75fb      	strb	r3, [r7, #23]
      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8008198:	e009      	b.n	80081ae <HAL_RCCEx_PeriphCLKConfig+0x52e>
      /* SPI6 clock source configuration done later after clock selection check */
      break;
#endif

    default:
      ret = HAL_ERROR;
 800819a:	2301      	movs	r3, #1
 800819c:	75fb      	strb	r3, [r7, #23]
      break;
 800819e:	e006      	b.n	80081ae <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 80081a0:	bf00      	nop
 80081a2:	e004      	b.n	80081ae <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 80081a4:	bf00      	nop
 80081a6:	e002      	b.n	80081ae <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 80081a8:	bf00      	nop
 80081aa:	e000      	b.n	80081ae <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 80081ac:	bf00      	nop
    }

    if(ret == HAL_OK)
 80081ae:	7dfb      	ldrb	r3, [r7, #23]
 80081b0:	2b00      	cmp	r3, #0
 80081b2:	d10a      	bne.n	80081ca <HAL_RCCEx_PeriphCLKConfig+0x54a>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 80081b4:	4b2b      	ldr	r3, [pc, #172]	; (8008264 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 80081b6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80081b8:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 80081bc:	687b      	ldr	r3, [r7, #4]
 80081be:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 80081c2:	4928      	ldr	r1, [pc, #160]	; (8008264 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 80081c4:	4313      	orrs	r3, r2
 80081c6:	658b      	str	r3, [r1, #88]	; 0x58
 80081c8:	e001      	b.n	80081ce <HAL_RCCEx_PeriphCLKConfig+0x54e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80081ca:	7dfb      	ldrb	r3, [r7, #23]
 80081cc:	75bb      	strb	r3, [r7, #22]
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 80081ce:	687b      	ldr	r3, [r7, #4]
 80081d0:	681b      	ldr	r3, [r3, #0]
 80081d2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80081d6:	2b00      	cmp	r3, #0
 80081d8:	d02f      	beq.n	800823a <HAL_RCCEx_PeriphCLKConfig+0x5ba>
  {
    switch(PeriphClkInit->FdcanClockSelection)
 80081da:	687b      	ldr	r3, [r7, #4]
 80081dc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80081de:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80081e2:	d00e      	beq.n	8008202 <HAL_RCCEx_PeriphCLKConfig+0x582>
 80081e4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80081e8:	d814      	bhi.n	8008214 <HAL_RCCEx_PeriphCLKConfig+0x594>
 80081ea:	2b00      	cmp	r3, #0
 80081ec:	d015      	beq.n	800821a <HAL_RCCEx_PeriphCLKConfig+0x59a>
 80081ee:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80081f2:	d10f      	bne.n	8008214 <HAL_RCCEx_PeriphCLKConfig+0x594>
    {
    case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
      /* Enable FDCAN Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80081f4:	4b1b      	ldr	r3, [pc, #108]	; (8008264 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 80081f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80081f8:	4a1a      	ldr	r2, [pc, #104]	; (8008264 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 80081fa:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80081fe:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8008200:	e00c      	b.n	800821c <HAL_RCCEx_PeriphCLKConfig+0x59c>

    case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8008202:	687b      	ldr	r3, [r7, #4]
 8008204:	3304      	adds	r3, #4
 8008206:	2101      	movs	r1, #1
 8008208:	4618      	mov	r0, r3
 800820a:	f001 fd5b 	bl	8009cc4 <RCCEx_PLL2_Config>
 800820e:	4603      	mov	r3, r0
 8008210:	75fb      	strb	r3, [r7, #23]

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8008212:	e003      	b.n	800821c <HAL_RCCEx_PeriphCLKConfig+0x59c>
      /* HSE is used as clock source for FDCAN*/
      /* FDCAN clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8008214:	2301      	movs	r3, #1
 8008216:	75fb      	strb	r3, [r7, #23]
      break;
 8008218:	e000      	b.n	800821c <HAL_RCCEx_PeriphCLKConfig+0x59c>
      break;
 800821a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800821c:	7dfb      	ldrb	r3, [r7, #23]
 800821e:	2b00      	cmp	r3, #0
 8008220:	d109      	bne.n	8008236 <HAL_RCCEx_PeriphCLKConfig+0x5b6>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8008222:	4b10      	ldr	r3, [pc, #64]	; (8008264 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8008224:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008226:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800822a:	687b      	ldr	r3, [r7, #4]
 800822c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800822e:	490d      	ldr	r1, [pc, #52]	; (8008264 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8008230:	4313      	orrs	r3, r2
 8008232:	650b      	str	r3, [r1, #80]	; 0x50
 8008234:	e001      	b.n	800823a <HAL_RCCEx_PeriphCLKConfig+0x5ba>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008236:	7dfb      	ldrb	r3, [r7, #23]
 8008238:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 800823a:	687b      	ldr	r3, [r7, #4]
 800823c:	681b      	ldr	r3, [r3, #0]
 800823e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8008242:	2b00      	cmp	r3, #0
 8008244:	d033      	beq.n	80082ae <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    switch(PeriphClkInit->FmcClockSelection)
 8008246:	687b      	ldr	r3, [r7, #4]
 8008248:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800824a:	2b03      	cmp	r3, #3
 800824c:	d81c      	bhi.n	8008288 <HAL_RCCEx_PeriphCLKConfig+0x608>
 800824e:	a201      	add	r2, pc, #4	; (adr r2, 8008254 <HAL_RCCEx_PeriphCLKConfig+0x5d4>)
 8008250:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008254:	0800828f 	.word	0x0800828f
 8008258:	08008269 	.word	0x08008269
 800825c:	08008277 	.word	0x08008277
 8008260:	0800828f 	.word	0x0800828f
 8008264:	58024400 	.word	0x58024400
    {
    case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
      /* Enable FMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008268:	4bb8      	ldr	r3, [pc, #736]	; (800854c <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800826a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800826c:	4ab7      	ldr	r2, [pc, #732]	; (800854c <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800826e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008272:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FMC clock source configuration done later after clock selection check */
      break;
 8008274:	e00c      	b.n	8008290 <HAL_RCCEx_PeriphCLKConfig+0x610>

    case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8008276:	687b      	ldr	r3, [r7, #4]
 8008278:	3304      	adds	r3, #4
 800827a:	2102      	movs	r1, #2
 800827c:	4618      	mov	r0, r3
 800827e:	f001 fd21 	bl	8009cc4 <RCCEx_PLL2_Config>
 8008282:	4603      	mov	r3, r0
 8008284:	75fb      	strb	r3, [r7, #23]

      /* FMC clock source configuration done later after clock selection check */
      break;
 8008286:	e003      	b.n	8008290 <HAL_RCCEx_PeriphCLKConfig+0x610>
    case RCC_FMCCLKSOURCE_HCLK:
      /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8008288:	2301      	movs	r3, #1
 800828a:	75fb      	strb	r3, [r7, #23]
      break;
 800828c:	e000      	b.n	8008290 <HAL_RCCEx_PeriphCLKConfig+0x610>
      break;
 800828e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8008290:	7dfb      	ldrb	r3, [r7, #23]
 8008292:	2b00      	cmp	r3, #0
 8008294:	d109      	bne.n	80082aa <HAL_RCCEx_PeriphCLKConfig+0x62a>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8008296:	4bad      	ldr	r3, [pc, #692]	; (800854c <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8008298:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800829a:	f023 0203 	bic.w	r2, r3, #3
 800829e:	687b      	ldr	r3, [r7, #4]
 80082a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80082a2:	49aa      	ldr	r1, [pc, #680]	; (800854c <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 80082a4:	4313      	orrs	r3, r2
 80082a6:	64cb      	str	r3, [r1, #76]	; 0x4c
 80082a8:	e001      	b.n	80082ae <HAL_RCCEx_PeriphCLKConfig+0x62e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80082aa:	7dfb      	ldrb	r3, [r7, #23]
 80082ac:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80082ae:	687b      	ldr	r3, [r7, #4]
 80082b0:	681b      	ldr	r3, [r3, #0]
 80082b2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80082b6:	2b00      	cmp	r3, #0
 80082b8:	f000 8086 	beq.w	80083c8 <HAL_RCCEx_PeriphCLKConfig+0x748>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80082bc:	4ba4      	ldr	r3, [pc, #656]	; (8008550 <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 80082be:	681b      	ldr	r3, [r3, #0]
 80082c0:	4aa3      	ldr	r2, [pc, #652]	; (8008550 <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 80082c2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80082c6:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80082c8:	f7fa f86c 	bl	80023a4 <HAL_GetTick>
 80082cc:	6138      	str	r0, [r7, #16]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80082ce:	e009      	b.n	80082e4 <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80082d0:	f7fa f868 	bl	80023a4 <HAL_GetTick>
 80082d4:	4602      	mov	r2, r0
 80082d6:	693b      	ldr	r3, [r7, #16]
 80082d8:	1ad3      	subs	r3, r2, r3
 80082da:	2b64      	cmp	r3, #100	; 0x64
 80082dc:	d902      	bls.n	80082e4 <HAL_RCCEx_PeriphCLKConfig+0x664>
      {
        ret = HAL_TIMEOUT;
 80082de:	2303      	movs	r3, #3
 80082e0:	75fb      	strb	r3, [r7, #23]
        break;
 80082e2:	e005      	b.n	80082f0 <HAL_RCCEx_PeriphCLKConfig+0x670>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80082e4:	4b9a      	ldr	r3, [pc, #616]	; (8008550 <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 80082e6:	681b      	ldr	r3, [r3, #0]
 80082e8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80082ec:	2b00      	cmp	r3, #0
 80082ee:	d0ef      	beq.n	80082d0 <HAL_RCCEx_PeriphCLKConfig+0x650>
      }
    }

    if(ret == HAL_OK)
 80082f0:	7dfb      	ldrb	r3, [r7, #23]
 80082f2:	2b00      	cmp	r3, #0
 80082f4:	d166      	bne.n	80083c4 <HAL_RCCEx_PeriphCLKConfig+0x744>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 80082f6:	4b95      	ldr	r3, [pc, #596]	; (800854c <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 80082f8:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80082fa:	687b      	ldr	r3, [r7, #4]
 80082fc:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8008300:	4053      	eors	r3, r2
 8008302:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008306:	2b00      	cmp	r3, #0
 8008308:	d013      	beq.n	8008332 <HAL_RCCEx_PeriphCLKConfig+0x6b2>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800830a:	4b90      	ldr	r3, [pc, #576]	; (800854c <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800830c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800830e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008312:	60fb      	str	r3, [r7, #12]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8008314:	4b8d      	ldr	r3, [pc, #564]	; (800854c <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8008316:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008318:	4a8c      	ldr	r2, [pc, #560]	; (800854c <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800831a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800831e:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8008320:	4b8a      	ldr	r3, [pc, #552]	; (800854c <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8008322:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008324:	4a89      	ldr	r2, [pc, #548]	; (800854c <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8008326:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800832a:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 800832c:	4a87      	ldr	r2, [pc, #540]	; (800854c <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800832e:	68fb      	ldr	r3, [r7, #12]
 8008330:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if(PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8008332:	687b      	ldr	r3, [r7, #4]
 8008334:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8008338:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800833c:	d115      	bne.n	800836a <HAL_RCCEx_PeriphCLKConfig+0x6ea>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800833e:	f7fa f831 	bl	80023a4 <HAL_GetTick>
 8008342:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8008344:	e00b      	b.n	800835e <HAL_RCCEx_PeriphCLKConfig+0x6de>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8008346:	f7fa f82d 	bl	80023a4 <HAL_GetTick>
 800834a:	4602      	mov	r2, r0
 800834c:	693b      	ldr	r3, [r7, #16]
 800834e:	1ad3      	subs	r3, r2, r3
 8008350:	f241 3288 	movw	r2, #5000	; 0x1388
 8008354:	4293      	cmp	r3, r2
 8008356:	d902      	bls.n	800835e <HAL_RCCEx_PeriphCLKConfig+0x6de>
          {
            ret = HAL_TIMEOUT;
 8008358:	2303      	movs	r3, #3
 800835a:	75fb      	strb	r3, [r7, #23]
            break;
 800835c:	e005      	b.n	800836a <HAL_RCCEx_PeriphCLKConfig+0x6ea>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800835e:	4b7b      	ldr	r3, [pc, #492]	; (800854c <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8008360:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008362:	f003 0302 	and.w	r3, r3, #2
 8008366:	2b00      	cmp	r3, #0
 8008368:	d0ed      	beq.n	8008346 <HAL_RCCEx_PeriphCLKConfig+0x6c6>
          }
        }
      }

      if(ret == HAL_OK)
 800836a:	7dfb      	ldrb	r3, [r7, #23]
 800836c:	2b00      	cmp	r3, #0
 800836e:	d126      	bne.n	80083be <HAL_RCCEx_PeriphCLKConfig+0x73e>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8008370:	687b      	ldr	r3, [r7, #4]
 8008372:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8008376:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800837a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800837e:	d10d      	bne.n	800839c <HAL_RCCEx_PeriphCLKConfig+0x71c>
 8008380:	4b72      	ldr	r3, [pc, #456]	; (800854c <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8008382:	691b      	ldr	r3, [r3, #16]
 8008384:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 8008388:	687b      	ldr	r3, [r7, #4]
 800838a:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800838e:	0919      	lsrs	r1, r3, #4
 8008390:	4b70      	ldr	r3, [pc, #448]	; (8008554 <HAL_RCCEx_PeriphCLKConfig+0x8d4>)
 8008392:	400b      	ands	r3, r1
 8008394:	496d      	ldr	r1, [pc, #436]	; (800854c <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8008396:	4313      	orrs	r3, r2
 8008398:	610b      	str	r3, [r1, #16]
 800839a:	e005      	b.n	80083a8 <HAL_RCCEx_PeriphCLKConfig+0x728>
 800839c:	4b6b      	ldr	r3, [pc, #428]	; (800854c <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800839e:	691b      	ldr	r3, [r3, #16]
 80083a0:	4a6a      	ldr	r2, [pc, #424]	; (800854c <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 80083a2:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 80083a6:	6113      	str	r3, [r2, #16]
 80083a8:	4b68      	ldr	r3, [pc, #416]	; (800854c <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 80083aa:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80083ac:	687b      	ldr	r3, [r7, #4]
 80083ae:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80083b2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80083b6:	4965      	ldr	r1, [pc, #404]	; (800854c <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 80083b8:	4313      	orrs	r3, r2
 80083ba:	670b      	str	r3, [r1, #112]	; 0x70
 80083bc:	e004      	b.n	80083c8 <HAL_RCCEx_PeriphCLKConfig+0x748>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80083be:	7dfb      	ldrb	r3, [r7, #23]
 80083c0:	75bb      	strb	r3, [r7, #22]
 80083c2:	e001      	b.n	80083c8 <HAL_RCCEx_PeriphCLKConfig+0x748>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80083c4:	7dfb      	ldrb	r3, [r7, #23]
 80083c6:	75bb      	strb	r3, [r7, #22]
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 80083c8:	687b      	ldr	r3, [r7, #4]
 80083ca:	681b      	ldr	r3, [r3, #0]
 80083cc:	f003 0301 	and.w	r3, r3, #1
 80083d0:	2b00      	cmp	r3, #0
 80083d2:	d07e      	beq.n	80084d2 <HAL_RCCEx_PeriphCLKConfig+0x852>
  {
    switch(PeriphClkInit->Usart16ClockSelection)
 80083d4:	687b      	ldr	r3, [r7, #4]
 80083d6:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80083d8:	2b28      	cmp	r3, #40	; 0x28
 80083da:	d867      	bhi.n	80084ac <HAL_RCCEx_PeriphCLKConfig+0x82c>
 80083dc:	a201      	add	r2, pc, #4	; (adr r2, 80083e4 <HAL_RCCEx_PeriphCLKConfig+0x764>)
 80083de:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80083e2:	bf00      	nop
 80083e4:	080084b3 	.word	0x080084b3
 80083e8:	080084ad 	.word	0x080084ad
 80083ec:	080084ad 	.word	0x080084ad
 80083f0:	080084ad 	.word	0x080084ad
 80083f4:	080084ad 	.word	0x080084ad
 80083f8:	080084ad 	.word	0x080084ad
 80083fc:	080084ad 	.word	0x080084ad
 8008400:	080084ad 	.word	0x080084ad
 8008404:	08008489 	.word	0x08008489
 8008408:	080084ad 	.word	0x080084ad
 800840c:	080084ad 	.word	0x080084ad
 8008410:	080084ad 	.word	0x080084ad
 8008414:	080084ad 	.word	0x080084ad
 8008418:	080084ad 	.word	0x080084ad
 800841c:	080084ad 	.word	0x080084ad
 8008420:	080084ad 	.word	0x080084ad
 8008424:	0800849b 	.word	0x0800849b
 8008428:	080084ad 	.word	0x080084ad
 800842c:	080084ad 	.word	0x080084ad
 8008430:	080084ad 	.word	0x080084ad
 8008434:	080084ad 	.word	0x080084ad
 8008438:	080084ad 	.word	0x080084ad
 800843c:	080084ad 	.word	0x080084ad
 8008440:	080084ad 	.word	0x080084ad
 8008444:	080084b3 	.word	0x080084b3
 8008448:	080084ad 	.word	0x080084ad
 800844c:	080084ad 	.word	0x080084ad
 8008450:	080084ad 	.word	0x080084ad
 8008454:	080084ad 	.word	0x080084ad
 8008458:	080084ad 	.word	0x080084ad
 800845c:	080084ad 	.word	0x080084ad
 8008460:	080084ad 	.word	0x080084ad
 8008464:	080084b3 	.word	0x080084b3
 8008468:	080084ad 	.word	0x080084ad
 800846c:	080084ad 	.word	0x080084ad
 8008470:	080084ad 	.word	0x080084ad
 8008474:	080084ad 	.word	0x080084ad
 8008478:	080084ad 	.word	0x080084ad
 800847c:	080084ad 	.word	0x080084ad
 8008480:	080084ad 	.word	0x080084ad
 8008484:	080084b3 	.word	0x080084b3
    case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8008488:	687b      	ldr	r3, [r7, #4]
 800848a:	3304      	adds	r3, #4
 800848c:	2101      	movs	r1, #1
 800848e:	4618      	mov	r0, r3
 8008490:	f001 fc18 	bl	8009cc4 <RCCEx_PLL2_Config>
 8008494:	4603      	mov	r3, r0
 8008496:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8008498:	e00c      	b.n	80084b4 <HAL_RCCEx_PeriphCLKConfig+0x834>

    case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800849a:	687b      	ldr	r3, [r7, #4]
 800849c:	3324      	adds	r3, #36	; 0x24
 800849e:	2101      	movs	r1, #1
 80084a0:	4618      	mov	r0, r3
 80084a2:	f001 fcc1 	bl	8009e28 <RCCEx_PLL3_Config>
 80084a6:	4603      	mov	r3, r0
 80084a8:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 80084aa:	e003      	b.n	80084b4 <HAL_RCCEx_PeriphCLKConfig+0x834>
      /* LSE,  oscillator is used as source of USART1/6 clock */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80084ac:	2301      	movs	r3, #1
 80084ae:	75fb      	strb	r3, [r7, #23]
      break;
 80084b0:	e000      	b.n	80084b4 <HAL_RCCEx_PeriphCLKConfig+0x834>
      break;
 80084b2:	bf00      	nop
    }

    if(ret == HAL_OK)
 80084b4:	7dfb      	ldrb	r3, [r7, #23]
 80084b6:	2b00      	cmp	r3, #0
 80084b8:	d109      	bne.n	80084ce <HAL_RCCEx_PeriphCLKConfig+0x84e>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 80084ba:	4b24      	ldr	r3, [pc, #144]	; (800854c <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 80084bc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80084be:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 80084c2:	687b      	ldr	r3, [r7, #4]
 80084c4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80084c6:	4921      	ldr	r1, [pc, #132]	; (800854c <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 80084c8:	4313      	orrs	r3, r2
 80084ca:	654b      	str	r3, [r1, #84]	; 0x54
 80084cc:	e001      	b.n	80084d2 <HAL_RCCEx_PeriphCLKConfig+0x852>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80084ce:	7dfb      	ldrb	r3, [r7, #23]
 80084d0:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 80084d2:	687b      	ldr	r3, [r7, #4]
 80084d4:	681b      	ldr	r3, [r3, #0]
 80084d6:	f003 0302 	and.w	r3, r3, #2
 80084da:	2b00      	cmp	r3, #0
 80084dc:	d03e      	beq.n	800855c <HAL_RCCEx_PeriphCLKConfig+0x8dc>
  {
    switch(PeriphClkInit->Usart234578ClockSelection)
 80084de:	687b      	ldr	r3, [r7, #4]
 80084e0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80084e2:	2b05      	cmp	r3, #5
 80084e4:	d820      	bhi.n	8008528 <HAL_RCCEx_PeriphCLKConfig+0x8a8>
 80084e6:	a201      	add	r2, pc, #4	; (adr r2, 80084ec <HAL_RCCEx_PeriphCLKConfig+0x86c>)
 80084e8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80084ec:	0800852f 	.word	0x0800852f
 80084f0:	08008505 	.word	0x08008505
 80084f4:	08008517 	.word	0x08008517
 80084f8:	0800852f 	.word	0x0800852f
 80084fc:	0800852f 	.word	0x0800852f
 8008500:	0800852f 	.word	0x0800852f
    case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8008504:	687b      	ldr	r3, [r7, #4]
 8008506:	3304      	adds	r3, #4
 8008508:	2101      	movs	r1, #1
 800850a:	4618      	mov	r0, r3
 800850c:	f001 fbda 	bl	8009cc4 <RCCEx_PLL2_Config>
 8008510:	4603      	mov	r3, r0
 8008512:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8008514:	e00c      	b.n	8008530 <HAL_RCCEx_PeriphCLKConfig+0x8b0>

    case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8008516:	687b      	ldr	r3, [r7, #4]
 8008518:	3324      	adds	r3, #36	; 0x24
 800851a:	2101      	movs	r1, #1
 800851c:	4618      	mov	r0, r3
 800851e:	f001 fc83 	bl	8009e28 <RCCEx_PLL3_Config>
 8008522:	4603      	mov	r3, r0
 8008524:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8008526:	e003      	b.n	8008530 <HAL_RCCEx_PeriphCLKConfig+0x8b0>
      /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8008528:	2301      	movs	r3, #1
 800852a:	75fb      	strb	r3, [r7, #23]
      break;
 800852c:	e000      	b.n	8008530 <HAL_RCCEx_PeriphCLKConfig+0x8b0>
      break;
 800852e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8008530:	7dfb      	ldrb	r3, [r7, #23]
 8008532:	2b00      	cmp	r3, #0
 8008534:	d110      	bne.n	8008558 <HAL_RCCEx_PeriphCLKConfig+0x8d8>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8008536:	4b05      	ldr	r3, [pc, #20]	; (800854c <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8008538:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800853a:	f023 0207 	bic.w	r2, r3, #7
 800853e:	687b      	ldr	r3, [r7, #4]
 8008540:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008542:	4902      	ldr	r1, [pc, #8]	; (800854c <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8008544:	4313      	orrs	r3, r2
 8008546:	654b      	str	r3, [r1, #84]	; 0x54
 8008548:	e008      	b.n	800855c <HAL_RCCEx_PeriphCLKConfig+0x8dc>
 800854a:	bf00      	nop
 800854c:	58024400 	.word	0x58024400
 8008550:	58024800 	.word	0x58024800
 8008554:	00ffffcf 	.word	0x00ffffcf
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008558:	7dfb      	ldrb	r3, [r7, #23]
 800855a:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800855c:	687b      	ldr	r3, [r7, #4]
 800855e:	681b      	ldr	r3, [r3, #0]
 8008560:	f003 0304 	and.w	r3, r3, #4
 8008564:	2b00      	cmp	r3, #0
 8008566:	d039      	beq.n	80085dc <HAL_RCCEx_PeriphCLKConfig+0x95c>
  {
    switch(PeriphClkInit->Lpuart1ClockSelection)
 8008568:	687b      	ldr	r3, [r7, #4]
 800856a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800856e:	2b05      	cmp	r3, #5
 8008570:	d820      	bhi.n	80085b4 <HAL_RCCEx_PeriphCLKConfig+0x934>
 8008572:	a201      	add	r2, pc, #4	; (adr r2, 8008578 <HAL_RCCEx_PeriphCLKConfig+0x8f8>)
 8008574:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008578:	080085bb 	.word	0x080085bb
 800857c:	08008591 	.word	0x08008591
 8008580:	080085a3 	.word	0x080085a3
 8008584:	080085bb 	.word	0x080085bb
 8008588:	080085bb 	.word	0x080085bb
 800858c:	080085bb 	.word	0x080085bb
    case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8008590:	687b      	ldr	r3, [r7, #4]
 8008592:	3304      	adds	r3, #4
 8008594:	2101      	movs	r1, #1
 8008596:	4618      	mov	r0, r3
 8008598:	f001 fb94 	bl	8009cc4 <RCCEx_PLL2_Config>
 800859c:	4603      	mov	r3, r0
 800859e:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 80085a0:	e00c      	b.n	80085bc <HAL_RCCEx_PeriphCLKConfig+0x93c>

    case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80085a2:	687b      	ldr	r3, [r7, #4]
 80085a4:	3324      	adds	r3, #36	; 0x24
 80085a6:	2101      	movs	r1, #1
 80085a8:	4618      	mov	r0, r3
 80085aa:	f001 fc3d 	bl	8009e28 <RCCEx_PLL3_Config>
 80085ae:	4603      	mov	r3, r0
 80085b0:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 80085b2:	e003      	b.n	80085bc <HAL_RCCEx_PeriphCLKConfig+0x93c>
      /* LSE,  oscillator is used as source of LPUART1 clock */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80085b4:	2301      	movs	r3, #1
 80085b6:	75fb      	strb	r3, [r7, #23]
      break;
 80085b8:	e000      	b.n	80085bc <HAL_RCCEx_PeriphCLKConfig+0x93c>
      break;
 80085ba:	bf00      	nop
    }

    if(ret == HAL_OK)
 80085bc:	7dfb      	ldrb	r3, [r7, #23]
 80085be:	2b00      	cmp	r3, #0
 80085c0:	d10a      	bne.n	80085d8 <HAL_RCCEx_PeriphCLKConfig+0x958>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80085c2:	4bb7      	ldr	r3, [pc, #732]	; (80088a0 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 80085c4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80085c6:	f023 0207 	bic.w	r2, r3, #7
 80085ca:	687b      	ldr	r3, [r7, #4]
 80085cc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80085d0:	49b3      	ldr	r1, [pc, #716]	; (80088a0 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 80085d2:	4313      	orrs	r3, r2
 80085d4:	658b      	str	r3, [r1, #88]	; 0x58
 80085d6:	e001      	b.n	80085dc <HAL_RCCEx_PeriphCLKConfig+0x95c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80085d8:	7dfb      	ldrb	r3, [r7, #23]
 80085da:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80085dc:	687b      	ldr	r3, [r7, #4]
 80085de:	681b      	ldr	r3, [r3, #0]
 80085e0:	f003 0320 	and.w	r3, r3, #32
 80085e4:	2b00      	cmp	r3, #0
 80085e6:	d04b      	beq.n	8008680 <HAL_RCCEx_PeriphCLKConfig+0xa00>
  {
    switch(PeriphClkInit->Lptim1ClockSelection)
 80085e8:	687b      	ldr	r3, [r7, #4]
 80085ea:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80085ee:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80085f2:	d02e      	beq.n	8008652 <HAL_RCCEx_PeriphCLKConfig+0x9d2>
 80085f4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80085f8:	d828      	bhi.n	800864c <HAL_RCCEx_PeriphCLKConfig+0x9cc>
 80085fa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80085fe:	d02a      	beq.n	8008656 <HAL_RCCEx_PeriphCLKConfig+0x9d6>
 8008600:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008604:	d822      	bhi.n	800864c <HAL_RCCEx_PeriphCLKConfig+0x9cc>
 8008606:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800860a:	d026      	beq.n	800865a <HAL_RCCEx_PeriphCLKConfig+0x9da>
 800860c:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8008610:	d81c      	bhi.n	800864c <HAL_RCCEx_PeriphCLKConfig+0x9cc>
 8008612:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008616:	d010      	beq.n	800863a <HAL_RCCEx_PeriphCLKConfig+0x9ba>
 8008618:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800861c:	d816      	bhi.n	800864c <HAL_RCCEx_PeriphCLKConfig+0x9cc>
 800861e:	2b00      	cmp	r3, #0
 8008620:	d01d      	beq.n	800865e <HAL_RCCEx_PeriphCLKConfig+0x9de>
 8008622:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8008626:	d111      	bne.n	800864c <HAL_RCCEx_PeriphCLKConfig+0x9cc>
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8008628:	687b      	ldr	r3, [r7, #4]
 800862a:	3304      	adds	r3, #4
 800862c:	2100      	movs	r1, #0
 800862e:	4618      	mov	r0, r3
 8008630:	f001 fb48 	bl	8009cc4 <RCCEx_PLL2_Config>
 8008634:	4603      	mov	r3, r0
 8008636:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 8008638:	e012      	b.n	8008660 <HAL_RCCEx_PeriphCLKConfig+0x9e0>

    case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800863a:	687b      	ldr	r3, [r7, #4]
 800863c:	3324      	adds	r3, #36	; 0x24
 800863e:	2102      	movs	r1, #2
 8008640:	4618      	mov	r0, r3
 8008642:	f001 fbf1 	bl	8009e28 <RCCEx_PLL3_Config>
 8008646:	4603      	mov	r3, r0
 8008648:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 800864a:	e009      	b.n	8008660 <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800864c:	2301      	movs	r3, #1
 800864e:	75fb      	strb	r3, [r7, #23]
      break;
 8008650:	e006      	b.n	8008660 <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      break;
 8008652:	bf00      	nop
 8008654:	e004      	b.n	8008660 <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      break;
 8008656:	bf00      	nop
 8008658:	e002      	b.n	8008660 <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      break;
 800865a:	bf00      	nop
 800865c:	e000      	b.n	8008660 <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      break;
 800865e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8008660:	7dfb      	ldrb	r3, [r7, #23]
 8008662:	2b00      	cmp	r3, #0
 8008664:	d10a      	bne.n	800867c <HAL_RCCEx_PeriphCLKConfig+0x9fc>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8008666:	4b8e      	ldr	r3, [pc, #568]	; (80088a0 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8008668:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800866a:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 800866e:	687b      	ldr	r3, [r7, #4]
 8008670:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008674:	498a      	ldr	r1, [pc, #552]	; (80088a0 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8008676:	4313      	orrs	r3, r2
 8008678:	654b      	str	r3, [r1, #84]	; 0x54
 800867a:	e001      	b.n	8008680 <HAL_RCCEx_PeriphCLKConfig+0xa00>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800867c:	7dfb      	ldrb	r3, [r7, #23]
 800867e:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8008680:	687b      	ldr	r3, [r7, #4]
 8008682:	681b      	ldr	r3, [r3, #0]
 8008684:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008688:	2b00      	cmp	r3, #0
 800868a:	d04b      	beq.n	8008724 <HAL_RCCEx_PeriphCLKConfig+0xaa4>
  {
    switch(PeriphClkInit->Lptim2ClockSelection)
 800868c:	687b      	ldr	r3, [r7, #4]
 800868e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8008692:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8008696:	d02e      	beq.n	80086f6 <HAL_RCCEx_PeriphCLKConfig+0xa76>
 8008698:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 800869c:	d828      	bhi.n	80086f0 <HAL_RCCEx_PeriphCLKConfig+0xa70>
 800869e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80086a2:	d02a      	beq.n	80086fa <HAL_RCCEx_PeriphCLKConfig+0xa7a>
 80086a4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80086a8:	d822      	bhi.n	80086f0 <HAL_RCCEx_PeriphCLKConfig+0xa70>
 80086aa:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80086ae:	d026      	beq.n	80086fe <HAL_RCCEx_PeriphCLKConfig+0xa7e>
 80086b0:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80086b4:	d81c      	bhi.n	80086f0 <HAL_RCCEx_PeriphCLKConfig+0xa70>
 80086b6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80086ba:	d010      	beq.n	80086de <HAL_RCCEx_PeriphCLKConfig+0xa5e>
 80086bc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80086c0:	d816      	bhi.n	80086f0 <HAL_RCCEx_PeriphCLKConfig+0xa70>
 80086c2:	2b00      	cmp	r3, #0
 80086c4:	d01d      	beq.n	8008702 <HAL_RCCEx_PeriphCLKConfig+0xa82>
 80086c6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80086ca:	d111      	bne.n	80086f0 <HAL_RCCEx_PeriphCLKConfig+0xa70>
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80086cc:	687b      	ldr	r3, [r7, #4]
 80086ce:	3304      	adds	r3, #4
 80086d0:	2100      	movs	r1, #0
 80086d2:	4618      	mov	r0, r3
 80086d4:	f001 faf6 	bl	8009cc4 <RCCEx_PLL2_Config>
 80086d8:	4603      	mov	r3, r0
 80086da:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 80086dc:	e012      	b.n	8008704 <HAL_RCCEx_PeriphCLKConfig+0xa84>

    case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80086de:	687b      	ldr	r3, [r7, #4]
 80086e0:	3324      	adds	r3, #36	; 0x24
 80086e2:	2102      	movs	r1, #2
 80086e4:	4618      	mov	r0, r3
 80086e6:	f001 fb9f 	bl	8009e28 <RCCEx_PLL3_Config>
 80086ea:	4603      	mov	r3, r0
 80086ec:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 80086ee:	e009      	b.n	8008704 <HAL_RCCEx_PeriphCLKConfig+0xa84>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80086f0:	2301      	movs	r3, #1
 80086f2:	75fb      	strb	r3, [r7, #23]
      break;
 80086f4:	e006      	b.n	8008704 <HAL_RCCEx_PeriphCLKConfig+0xa84>
      break;
 80086f6:	bf00      	nop
 80086f8:	e004      	b.n	8008704 <HAL_RCCEx_PeriphCLKConfig+0xa84>
      break;
 80086fa:	bf00      	nop
 80086fc:	e002      	b.n	8008704 <HAL_RCCEx_PeriphCLKConfig+0xa84>
      break;
 80086fe:	bf00      	nop
 8008700:	e000      	b.n	8008704 <HAL_RCCEx_PeriphCLKConfig+0xa84>
      break;
 8008702:	bf00      	nop
    }

    if(ret == HAL_OK)
 8008704:	7dfb      	ldrb	r3, [r7, #23]
 8008706:	2b00      	cmp	r3, #0
 8008708:	d10a      	bne.n	8008720 <HAL_RCCEx_PeriphCLKConfig+0xaa0>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800870a:	4b65      	ldr	r3, [pc, #404]	; (80088a0 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 800870c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800870e:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8008712:	687b      	ldr	r3, [r7, #4]
 8008714:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8008718:	4961      	ldr	r1, [pc, #388]	; (80088a0 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 800871a:	4313      	orrs	r3, r2
 800871c:	658b      	str	r3, [r1, #88]	; 0x58
 800871e:	e001      	b.n	8008724 <HAL_RCCEx_PeriphCLKConfig+0xaa4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008720:	7dfb      	ldrb	r3, [r7, #23]
 8008722:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8008724:	687b      	ldr	r3, [r7, #4]
 8008726:	681b      	ldr	r3, [r3, #0]
 8008728:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800872c:	2b00      	cmp	r3, #0
 800872e:	d04b      	beq.n	80087c8 <HAL_RCCEx_PeriphCLKConfig+0xb48>
  {
    switch(PeriphClkInit->Lptim345ClockSelection)
 8008730:	687b      	ldr	r3, [r7, #4]
 8008732:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8008736:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 800873a:	d02e      	beq.n	800879a <HAL_RCCEx_PeriphCLKConfig+0xb1a>
 800873c:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8008740:	d828      	bhi.n	8008794 <HAL_RCCEx_PeriphCLKConfig+0xb14>
 8008742:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008746:	d02a      	beq.n	800879e <HAL_RCCEx_PeriphCLKConfig+0xb1e>
 8008748:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800874c:	d822      	bhi.n	8008794 <HAL_RCCEx_PeriphCLKConfig+0xb14>
 800874e:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8008752:	d026      	beq.n	80087a2 <HAL_RCCEx_PeriphCLKConfig+0xb22>
 8008754:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8008758:	d81c      	bhi.n	8008794 <HAL_RCCEx_PeriphCLKConfig+0xb14>
 800875a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800875e:	d010      	beq.n	8008782 <HAL_RCCEx_PeriphCLKConfig+0xb02>
 8008760:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8008764:	d816      	bhi.n	8008794 <HAL_RCCEx_PeriphCLKConfig+0xb14>
 8008766:	2b00      	cmp	r3, #0
 8008768:	d01d      	beq.n	80087a6 <HAL_RCCEx_PeriphCLKConfig+0xb26>
 800876a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800876e:	d111      	bne.n	8008794 <HAL_RCCEx_PeriphCLKConfig+0xb14>
    case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8008770:	687b      	ldr	r3, [r7, #4]
 8008772:	3304      	adds	r3, #4
 8008774:	2100      	movs	r1, #0
 8008776:	4618      	mov	r0, r3
 8008778:	f001 faa4 	bl	8009cc4 <RCCEx_PLL2_Config>
 800877c:	4603      	mov	r3, r0
 800877e:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 8008780:	e012      	b.n	80087a8 <HAL_RCCEx_PeriphCLKConfig+0xb28>

    case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8008782:	687b      	ldr	r3, [r7, #4]
 8008784:	3324      	adds	r3, #36	; 0x24
 8008786:	2102      	movs	r1, #2
 8008788:	4618      	mov	r0, r3
 800878a:	f001 fb4d 	bl	8009e28 <RCCEx_PLL3_Config>
 800878e:	4603      	mov	r3, r0
 8008790:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 8008792:	e009      	b.n	80087a8 <HAL_RCCEx_PeriphCLKConfig+0xb28>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8008794:	2301      	movs	r3, #1
 8008796:	75fb      	strb	r3, [r7, #23]
      break;
 8008798:	e006      	b.n	80087a8 <HAL_RCCEx_PeriphCLKConfig+0xb28>
      break;
 800879a:	bf00      	nop
 800879c:	e004      	b.n	80087a8 <HAL_RCCEx_PeriphCLKConfig+0xb28>
      break;
 800879e:	bf00      	nop
 80087a0:	e002      	b.n	80087a8 <HAL_RCCEx_PeriphCLKConfig+0xb28>
      break;
 80087a2:	bf00      	nop
 80087a4:	e000      	b.n	80087a8 <HAL_RCCEx_PeriphCLKConfig+0xb28>
      break;
 80087a6:	bf00      	nop
    }

    if(ret == HAL_OK)
 80087a8:	7dfb      	ldrb	r3, [r7, #23]
 80087aa:	2b00      	cmp	r3, #0
 80087ac:	d10a      	bne.n	80087c4 <HAL_RCCEx_PeriphCLKConfig+0xb44>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 80087ae:	4b3c      	ldr	r3, [pc, #240]	; (80088a0 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 80087b0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80087b2:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80087b6:	687b      	ldr	r3, [r7, #4]
 80087b8:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80087bc:	4938      	ldr	r1, [pc, #224]	; (80088a0 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 80087be:	4313      	orrs	r3, r2
 80087c0:	658b      	str	r3, [r1, #88]	; 0x58
 80087c2:	e001      	b.n	80087c8 <HAL_RCCEx_PeriphCLKConfig+0xb48>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80087c4:	7dfb      	ldrb	r3, [r7, #23]
 80087c6:	75bb      	strb	r3, [r7, #22]

      __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 80087c8:	687b      	ldr	r3, [r7, #4]
 80087ca:	681b      	ldr	r3, [r3, #0]
 80087cc:	f003 0308 	and.w	r3, r3, #8
 80087d0:	2b00      	cmp	r3, #0
 80087d2:	d01a      	beq.n	800880a <HAL_RCCEx_PeriphCLKConfig+0xb8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection )== RCC_I2C123CLKSOURCE_PLL3 )
 80087d4:	687b      	ldr	r3, [r7, #4]
 80087d6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80087da:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80087de:	d10a      	bne.n	80087f6 <HAL_RCCEx_PeriphCLKConfig+0xb76>
    {
        if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 80087e0:	687b      	ldr	r3, [r7, #4]
 80087e2:	3324      	adds	r3, #36	; 0x24
 80087e4:	2102      	movs	r1, #2
 80087e6:	4618      	mov	r0, r3
 80087e8:	f001 fb1e 	bl	8009e28 <RCCEx_PLL3_Config>
 80087ec:	4603      	mov	r3, r0
 80087ee:	2b00      	cmp	r3, #0
 80087f0:	d001      	beq.n	80087f6 <HAL_RCCEx_PeriphCLKConfig+0xb76>
        {
          status = HAL_ERROR;
 80087f2:	2301      	movs	r3, #1
 80087f4:	75bb      	strb	r3, [r7, #22]
        }
    }

      __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 80087f6:	4b2a      	ldr	r3, [pc, #168]	; (80088a0 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 80087f8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80087fa:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80087fe:	687b      	ldr	r3, [r7, #4]
 8008800:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008804:	4926      	ldr	r1, [pc, #152]	; (80088a0 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8008806:	4313      	orrs	r3, r2
 8008808:	654b      	str	r3, [r1, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800880a:	687b      	ldr	r3, [r7, #4]
 800880c:	681b      	ldr	r3, [r3, #0]
 800880e:	f003 0310 	and.w	r3, r3, #16
 8008812:	2b00      	cmp	r3, #0
 8008814:	d01a      	beq.n	800884c <HAL_RCCEx_PeriphCLKConfig+0xbcc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3 )
 8008816:	687b      	ldr	r3, [r7, #4]
 8008818:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800881c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008820:	d10a      	bne.n	8008838 <HAL_RCCEx_PeriphCLKConfig+0xbb8>
    {
      if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8008822:	687b      	ldr	r3, [r7, #4]
 8008824:	3324      	adds	r3, #36	; 0x24
 8008826:	2102      	movs	r1, #2
 8008828:	4618      	mov	r0, r3
 800882a:	f001 fafd 	bl	8009e28 <RCCEx_PLL3_Config>
 800882e:	4603      	mov	r3, r0
 8008830:	2b00      	cmp	r3, #0
 8008832:	d001      	beq.n	8008838 <HAL_RCCEx_PeriphCLKConfig+0xbb8>
      {
        status = HAL_ERROR;
 8008834:	2301      	movs	r3, #1
 8008836:	75bb      	strb	r3, [r7, #22]
      }
    }

      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8008838:	4b19      	ldr	r3, [pc, #100]	; (80088a0 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 800883a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800883c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8008840:	687b      	ldr	r3, [r7, #4]
 8008842:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8008846:	4916      	ldr	r1, [pc, #88]	; (80088a0 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8008848:	4313      	orrs	r3, r2
 800884a:	658b      	str	r3, [r1, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800884c:	687b      	ldr	r3, [r7, #4]
 800884e:	681b      	ldr	r3, [r3, #0]
 8008850:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8008854:	2b00      	cmp	r3, #0
 8008856:	d036      	beq.n	80088c6 <HAL_RCCEx_PeriphCLKConfig+0xc46>
  {
    switch(PeriphClkInit->AdcClockSelection)
 8008858:	687b      	ldr	r3, [r7, #4]
 800885a:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800885e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8008862:	d01f      	beq.n	80088a4 <HAL_RCCEx_PeriphCLKConfig+0xc24>
 8008864:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8008868:	d817      	bhi.n	800889a <HAL_RCCEx_PeriphCLKConfig+0xc1a>
 800886a:	2b00      	cmp	r3, #0
 800886c:	d003      	beq.n	8008876 <HAL_RCCEx_PeriphCLKConfig+0xbf6>
 800886e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008872:	d009      	beq.n	8008888 <HAL_RCCEx_PeriphCLKConfig+0xc08>
 8008874:	e011      	b.n	800889a <HAL_RCCEx_PeriphCLKConfig+0xc1a>
    {

    case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8008876:	687b      	ldr	r3, [r7, #4]
 8008878:	3304      	adds	r3, #4
 800887a:	2100      	movs	r1, #0
 800887c:	4618      	mov	r0, r3
 800887e:	f001 fa21 	bl	8009cc4 <RCCEx_PLL2_Config>
 8008882:	4603      	mov	r3, r0
 8008884:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 8008886:	e00e      	b.n	80088a6 <HAL_RCCEx_PeriphCLKConfig+0xc26>

    case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8008888:	687b      	ldr	r3, [r7, #4]
 800888a:	3324      	adds	r3, #36	; 0x24
 800888c:	2102      	movs	r1, #2
 800888e:	4618      	mov	r0, r3
 8008890:	f001 faca 	bl	8009e28 <RCCEx_PLL3_Config>
 8008894:	4603      	mov	r3, r0
 8008896:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 8008898:	e005      	b.n	80088a6 <HAL_RCCEx_PeriphCLKConfig+0xc26>
      /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
      /* ADC clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800889a:	2301      	movs	r3, #1
 800889c:	75fb      	strb	r3, [r7, #23]
      break;
 800889e:	e002      	b.n	80088a6 <HAL_RCCEx_PeriphCLKConfig+0xc26>
 80088a0:	58024400 	.word	0x58024400
      break;
 80088a4:	bf00      	nop
    }

    if(ret == HAL_OK)
 80088a6:	7dfb      	ldrb	r3, [r7, #23]
 80088a8:	2b00      	cmp	r3, #0
 80088aa:	d10a      	bne.n	80088c2 <HAL_RCCEx_PeriphCLKConfig+0xc42>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80088ac:	4b93      	ldr	r3, [pc, #588]	; (8008afc <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80088ae:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80088b0:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80088b4:	687b      	ldr	r3, [r7, #4]
 80088b6:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 80088ba:	4990      	ldr	r1, [pc, #576]	; (8008afc <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80088bc:	4313      	orrs	r3, r2
 80088be:	658b      	str	r3, [r1, #88]	; 0x58
 80088c0:	e001      	b.n	80088c6 <HAL_RCCEx_PeriphCLKConfig+0xc46>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80088c2:	7dfb      	ldrb	r3, [r7, #23]
 80088c4:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80088c6:	687b      	ldr	r3, [r7, #4]
 80088c8:	681b      	ldr	r3, [r3, #0]
 80088ca:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80088ce:	2b00      	cmp	r3, #0
 80088d0:	d033      	beq.n	800893a <HAL_RCCEx_PeriphCLKConfig+0xcba>
  {

    switch(PeriphClkInit->UsbClockSelection)
 80088d2:	687b      	ldr	r3, [r7, #4]
 80088d4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80088d8:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80088dc:	d01c      	beq.n	8008918 <HAL_RCCEx_PeriphCLKConfig+0xc98>
 80088de:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80088e2:	d816      	bhi.n	8008912 <HAL_RCCEx_PeriphCLKConfig+0xc92>
 80088e4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80088e8:	d003      	beq.n	80088f2 <HAL_RCCEx_PeriphCLKConfig+0xc72>
 80088ea:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80088ee:	d007      	beq.n	8008900 <HAL_RCCEx_PeriphCLKConfig+0xc80>
 80088f0:	e00f      	b.n	8008912 <HAL_RCCEx_PeriphCLKConfig+0xc92>
    {
    case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
      /* Enable USB Clock output generated form System USB . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80088f2:	4b82      	ldr	r3, [pc, #520]	; (8008afc <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80088f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80088f6:	4a81      	ldr	r2, [pc, #516]	; (8008afc <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80088f8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80088fc:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* USB clock source configuration done later after clock selection check */
      break;
 80088fe:	e00c      	b.n	800891a <HAL_RCCEx_PeriphCLKConfig+0xc9a>

    case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8008900:	687b      	ldr	r3, [r7, #4]
 8008902:	3324      	adds	r3, #36	; 0x24
 8008904:	2101      	movs	r1, #1
 8008906:	4618      	mov	r0, r3
 8008908:	f001 fa8e 	bl	8009e28 <RCCEx_PLL3_Config>
 800890c:	4603      	mov	r3, r0
 800890e:	75fb      	strb	r3, [r7, #23]

      /* USB clock source configuration done later after clock selection check */
      break;
 8008910:	e003      	b.n	800891a <HAL_RCCEx_PeriphCLKConfig+0xc9a>
      /* HSI48 oscillator is used as source of USB clock */
      /* USB clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8008912:	2301      	movs	r3, #1
 8008914:	75fb      	strb	r3, [r7, #23]
      break;
 8008916:	e000      	b.n	800891a <HAL_RCCEx_PeriphCLKConfig+0xc9a>
      break;
 8008918:	bf00      	nop
    }

    if(ret == HAL_OK)
 800891a:	7dfb      	ldrb	r3, [r7, #23]
 800891c:	2b00      	cmp	r3, #0
 800891e:	d10a      	bne.n	8008936 <HAL_RCCEx_PeriphCLKConfig+0xcb6>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8008920:	4b76      	ldr	r3, [pc, #472]	; (8008afc <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8008922:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008924:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8008928:	687b      	ldr	r3, [r7, #4]
 800892a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800892e:	4973      	ldr	r1, [pc, #460]	; (8008afc <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8008930:	4313      	orrs	r3, r2
 8008932:	654b      	str	r3, [r1, #84]	; 0x54
 8008934:	e001      	b.n	800893a <HAL_RCCEx_PeriphCLKConfig+0xcba>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008936:	7dfb      	ldrb	r3, [r7, #23]
 8008938:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 800893a:	687b      	ldr	r3, [r7, #4]
 800893c:	681b      	ldr	r3, [r3, #0]
 800893e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8008942:	2b00      	cmp	r3, #0
 8008944:	d029      	beq.n	800899a <HAL_RCCEx_PeriphCLKConfig+0xd1a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch(PeriphClkInit->SdmmcClockSelection)
 8008946:	687b      	ldr	r3, [r7, #4]
 8008948:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800894a:	2b00      	cmp	r3, #0
 800894c:	d003      	beq.n	8008956 <HAL_RCCEx_PeriphCLKConfig+0xcd6>
 800894e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008952:	d007      	beq.n	8008964 <HAL_RCCEx_PeriphCLKConfig+0xce4>
 8008954:	e00f      	b.n	8008976 <HAL_RCCEx_PeriphCLKConfig+0xcf6>
    {
    case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
      /* Enable SDMMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008956:	4b69      	ldr	r3, [pc, #420]	; (8008afc <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8008958:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800895a:	4a68      	ldr	r2, [pc, #416]	; (8008afc <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800895c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008960:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 8008962:	e00b      	b.n	800897c <HAL_RCCEx_PeriphCLKConfig+0xcfc>

    case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8008964:	687b      	ldr	r3, [r7, #4]
 8008966:	3304      	adds	r3, #4
 8008968:	2102      	movs	r1, #2
 800896a:	4618      	mov	r0, r3
 800896c:	f001 f9aa 	bl	8009cc4 <RCCEx_PLL2_Config>
 8008970:	4603      	mov	r3, r0
 8008972:	75fb      	strb	r3, [r7, #23]

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 8008974:	e002      	b.n	800897c <HAL_RCCEx_PeriphCLKConfig+0xcfc>

    default:
      ret = HAL_ERROR;
 8008976:	2301      	movs	r3, #1
 8008978:	75fb      	strb	r3, [r7, #23]
      break;
 800897a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800897c:	7dfb      	ldrb	r3, [r7, #23]
 800897e:	2b00      	cmp	r3, #0
 8008980:	d109      	bne.n	8008996 <HAL_RCCEx_PeriphCLKConfig+0xd16>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8008982:	4b5e      	ldr	r3, [pc, #376]	; (8008afc <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8008984:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008986:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800898a:	687b      	ldr	r3, [r7, #4]
 800898c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800898e:	495b      	ldr	r1, [pc, #364]	; (8008afc <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8008990:	4313      	orrs	r3, r2
 8008992:	64cb      	str	r3, [r1, #76]	; 0x4c
 8008994:	e001      	b.n	800899a <HAL_RCCEx_PeriphCLKConfig+0xd1a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008996:	7dfb      	ldrb	r3, [r7, #23]
 8008998:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800899a:	687b      	ldr	r3, [r7, #4]
 800899c:	681b      	ldr	r3, [r3, #0]
 800899e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80089a2:	2b00      	cmp	r3, #0
 80089a4:	d00a      	beq.n	80089bc <HAL_RCCEx_PeriphCLKConfig+0xd3c>
  {
    if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!=HAL_OK)
 80089a6:	687b      	ldr	r3, [r7, #4]
 80089a8:	3324      	adds	r3, #36	; 0x24
 80089aa:	2102      	movs	r1, #2
 80089ac:	4618      	mov	r0, r3
 80089ae:	f001 fa3b 	bl	8009e28 <RCCEx_PLL3_Config>
 80089b2:	4603      	mov	r3, r0
 80089b4:	2b00      	cmp	r3, #0
 80089b6:	d001      	beq.n	80089bc <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    {
      status=HAL_ERROR;
 80089b8:	2301      	movs	r3, #1
 80089ba:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 80089bc:	687b      	ldr	r3, [r7, #4]
 80089be:	681b      	ldr	r3, [r3, #0]
 80089c0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80089c4:	2b00      	cmp	r3, #0
 80089c6:	d030      	beq.n	8008a2a <HAL_RCCEx_PeriphCLKConfig+0xdaa>
  {

    switch(PeriphClkInit->RngClockSelection)
 80089c8:	687b      	ldr	r3, [r7, #4]
 80089ca:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80089cc:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80089d0:	d017      	beq.n	8008a02 <HAL_RCCEx_PeriphCLKConfig+0xd82>
 80089d2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80089d6:	d811      	bhi.n	80089fc <HAL_RCCEx_PeriphCLKConfig+0xd7c>
 80089d8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80089dc:	d013      	beq.n	8008a06 <HAL_RCCEx_PeriphCLKConfig+0xd86>
 80089de:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80089e2:	d80b      	bhi.n	80089fc <HAL_RCCEx_PeriphCLKConfig+0xd7c>
 80089e4:	2b00      	cmp	r3, #0
 80089e6:	d010      	beq.n	8008a0a <HAL_RCCEx_PeriphCLKConfig+0xd8a>
 80089e8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80089ec:	d106      	bne.n	80089fc <HAL_RCCEx_PeriphCLKConfig+0xd7c>
    {
    case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
      /* Enable RNG Clock output generated form System RNG . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80089ee:	4b43      	ldr	r3, [pc, #268]	; (8008afc <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80089f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80089f2:	4a42      	ldr	r2, [pc, #264]	; (8008afc <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80089f4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80089f8:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* RNG clock source configuration done later after clock selection check */
      break;
 80089fa:	e007      	b.n	8008a0c <HAL_RCCEx_PeriphCLKConfig+0xd8c>
      /* HSI48 oscillator is used as source of RNG clock */
      /* RNG clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80089fc:	2301      	movs	r3, #1
 80089fe:	75fb      	strb	r3, [r7, #23]
      break;
 8008a00:	e004      	b.n	8008a0c <HAL_RCCEx_PeriphCLKConfig+0xd8c>
      break;
 8008a02:	bf00      	nop
 8008a04:	e002      	b.n	8008a0c <HAL_RCCEx_PeriphCLKConfig+0xd8c>
      break;
 8008a06:	bf00      	nop
 8008a08:	e000      	b.n	8008a0c <HAL_RCCEx_PeriphCLKConfig+0xd8c>
      break;
 8008a0a:	bf00      	nop
    }

    if(ret == HAL_OK)
 8008a0c:	7dfb      	ldrb	r3, [r7, #23]
 8008a0e:	2b00      	cmp	r3, #0
 8008a10:	d109      	bne.n	8008a26 <HAL_RCCEx_PeriphCLKConfig+0xda6>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8008a12:	4b3a      	ldr	r3, [pc, #232]	; (8008afc <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8008a14:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008a16:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8008a1a:	687b      	ldr	r3, [r7, #4]
 8008a1c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008a1e:	4937      	ldr	r1, [pc, #220]	; (8008afc <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8008a20:	4313      	orrs	r3, r2
 8008a22:	654b      	str	r3, [r1, #84]	; 0x54
 8008a24:	e001      	b.n	8008a2a <HAL_RCCEx_PeriphCLKConfig+0xdaa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008a26:	7dfb      	ldrb	r3, [r7, #23]
 8008a28:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8008a2a:	687b      	ldr	r3, [r7, #4]
 8008a2c:	681b      	ldr	r3, [r3, #0]
 8008a2e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8008a32:	2b00      	cmp	r3, #0
 8008a34:	d008      	beq.n	8008a48 <HAL_RCCEx_PeriphCLKConfig+0xdc8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8008a36:	4b31      	ldr	r3, [pc, #196]	; (8008afc <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8008a38:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008a3a:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8008a3e:	687b      	ldr	r3, [r7, #4]
 8008a40:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008a42:	492e      	ldr	r1, [pc, #184]	; (8008afc <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8008a44:	4313      	orrs	r3, r2
 8008a46:	650b      	str	r3, [r1, #80]	; 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 8008a48:	687b      	ldr	r3, [r7, #4]
 8008a4a:	681b      	ldr	r3, [r3, #0]
 8008a4c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008a50:	2b00      	cmp	r3, #0
 8008a52:	d009      	beq.n	8008a68 <HAL_RCCEx_PeriphCLKConfig+0xde8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 8008a54:	4b29      	ldr	r3, [pc, #164]	; (8008afc <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8008a56:	691b      	ldr	r3, [r3, #16]
 8008a58:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8008a5c:	687b      	ldr	r3, [r7, #4]
 8008a5e:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8008a62:	4926      	ldr	r1, [pc, #152]	; (8008afc <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8008a64:	4313      	orrs	r3, r2
 8008a66:	610b      	str	r3, [r1, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8008a68:	687b      	ldr	r3, [r7, #4]
 8008a6a:	681b      	ldr	r3, [r3, #0]
 8008a6c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8008a70:	2b00      	cmp	r3, #0
 8008a72:	d008      	beq.n	8008a86 <HAL_RCCEx_PeriphCLKConfig+0xe06>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8008a74:	4b21      	ldr	r3, [pc, #132]	; (8008afc <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8008a76:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008a78:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8008a7c:	687b      	ldr	r3, [r7, #4]
 8008a7e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8008a80:	491e      	ldr	r1, [pc, #120]	; (8008afc <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8008a82:	4313      	orrs	r3, r2
 8008a84:	650b      	str	r3, [r1, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8008a86:	687b      	ldr	r3, [r7, #4]
 8008a88:	681b      	ldr	r3, [r3, #0]
 8008a8a:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8008a8e:	2b00      	cmp	r3, #0
 8008a90:	d00d      	beq.n	8008aae <HAL_RCCEx_PeriphCLKConfig+0xe2e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8008a92:	4b1a      	ldr	r3, [pc, #104]	; (8008afc <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8008a94:	691b      	ldr	r3, [r3, #16]
 8008a96:	4a19      	ldr	r2, [pc, #100]	; (8008afc <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8008a98:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8008a9c:	6113      	str	r3, [r2, #16]
 8008a9e:	4b17      	ldr	r3, [pc, #92]	; (8008afc <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8008aa0:	691a      	ldr	r2, [r3, #16]
 8008aa2:	687b      	ldr	r3, [r7, #4]
 8008aa4:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8008aa8:	4914      	ldr	r1, [pc, #80]	; (8008afc <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8008aaa:	4313      	orrs	r3, r2
 8008aac:	610b      	str	r3, [r1, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8008aae:	687b      	ldr	r3, [r7, #4]
 8008ab0:	681b      	ldr	r3, [r3, #0]
 8008ab2:	2b00      	cmp	r3, #0
 8008ab4:	da08      	bge.n	8008ac8 <HAL_RCCEx_PeriphCLKConfig+0xe48>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8008ab6:	4b11      	ldr	r3, [pc, #68]	; (8008afc <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8008ab8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008aba:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8008abe:	687b      	ldr	r3, [r7, #4]
 8008ac0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008ac2:	490e      	ldr	r1, [pc, #56]	; (8008afc <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8008ac4:	4313      	orrs	r3, r2
 8008ac6:	64cb      	str	r3, [r1, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8008ac8:	687b      	ldr	r3, [r7, #4]
 8008aca:	681b      	ldr	r3, [r3, #0]
 8008acc:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8008ad0:	2b00      	cmp	r3, #0
 8008ad2:	d009      	beq.n	8008ae8 <HAL_RCCEx_PeriphCLKConfig+0xe68>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8008ad4:	4b09      	ldr	r3, [pc, #36]	; (8008afc <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8008ad6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008ad8:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8008adc:	687b      	ldr	r3, [r7, #4]
 8008ade:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008ae2:	4906      	ldr	r1, [pc, #24]	; (8008afc <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8008ae4:	4313      	orrs	r3, r2
 8008ae6:	654b      	str	r3, [r1, #84]	; 0x54
  }

  if (status == HAL_OK)
 8008ae8:	7dbb      	ldrb	r3, [r7, #22]
 8008aea:	2b00      	cmp	r3, #0
 8008aec:	d101      	bne.n	8008af2 <HAL_RCCEx_PeriphCLKConfig+0xe72>
  {
    return HAL_OK;
 8008aee:	2300      	movs	r3, #0
 8008af0:	e000      	b.n	8008af4 <HAL_RCCEx_PeriphCLKConfig+0xe74>
  }
  return HAL_ERROR;
 8008af2:	2301      	movs	r3, #1
}
 8008af4:	4618      	mov	r0, r3
 8008af6:	3718      	adds	r7, #24
 8008af8:	46bd      	mov	sp, r7
 8008afa:	bd80      	pop	{r7, pc}
 8008afc:	58024400 	.word	0x58024400

08008b00 <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in KHz
  *
  *  (*) : Available on some STM32H7 lines only.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8008b00:	b580      	push	{r7, lr}
 8008b02:	b090      	sub	sp, #64	; 0x40
 8008b04:	af00      	add	r7, sp, #0
 8008b06:	6078      	str	r0, [r7, #4]
  /* This variable is used to store the SAI and CKP clock source */
  uint32_t saiclocksource;
  uint32_t ckpclocksource;
  uint32_t srcclk;

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 8008b08:	687b      	ldr	r3, [r7, #4]
 8008b0a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008b0e:	f040 8095 	bne.w	8008c3c <HAL_RCCEx_GetPeriphCLKFreq+0x13c>
    {

      saiclocksource= __HAL_RCC_GET_SAI1_SOURCE();
 8008b12:	4bae      	ldr	r3, [pc, #696]	; (8008dcc <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 8008b14:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008b16:	f003 0307 	and.w	r3, r3, #7
 8008b1a:	633b      	str	r3, [r7, #48]	; 0x30
 8008b1c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008b1e:	2b04      	cmp	r3, #4
 8008b20:	f200 8088 	bhi.w	8008c34 <HAL_RCCEx_GetPeriphCLKFreq+0x134>
 8008b24:	a201      	add	r2, pc, #4	; (adr r2, 8008b2c <HAL_RCCEx_GetPeriphCLKFreq+0x2c>)
 8008b26:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008b2a:	bf00      	nop
 8008b2c:	08008b41 	.word	0x08008b41
 8008b30:	08008b69 	.word	0x08008b69
 8008b34:	08008b91 	.word	0x08008b91
 8008b38:	08008c2d 	.word	0x08008c2d
 8008b3c:	08008bb9 	.word	0x08008bb9

      switch (saiclocksource)
      {
      case RCC_SAI1CLKSOURCE_PLL: /* PLL1 is the clock source for SAI1 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8008b40:	4ba2      	ldr	r3, [pc, #648]	; (8008dcc <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 8008b42:	681b      	ldr	r3, [r3, #0]
 8008b44:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008b48:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8008b4c:	d108      	bne.n	8008b60 <HAL_RCCEx_GetPeriphCLKFreq+0x60>
         {
           HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8008b4e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8008b52:	4618      	mov	r0, r3
 8008b54:	f000 ff64 	bl	8009a20 <HAL_RCCEx_GetPLL1ClockFreq>
           frequency = pll1_clocks.PLL1_Q_Frequency;
 8008b58:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008b5a:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8008b5c:	f000 bc95 	b.w	800948a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 8008b60:	2300      	movs	r3, #0
 8008b62:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008b64:	f000 bc91 	b.w	800948a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI1 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8008b68:	4b98      	ldr	r3, [pc, #608]	; (8008dcc <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 8008b6a:	681b      	ldr	r3, [r3, #0]
 8008b6c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008b70:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8008b74:	d108      	bne.n	8008b88 <HAL_RCCEx_GetPeriphCLKFreq+0x88>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008b76:	f107 0318 	add.w	r3, r7, #24
 8008b7a:	4618      	mov	r0, r3
 8008b7c:	f000 fca8 	bl	80094d0 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8008b80:	69bb      	ldr	r3, [r7, #24]
 8008b82:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8008b84:	f000 bc81 	b.w	800948a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 8008b88:	2300      	movs	r3, #0
 8008b8a:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008b8c:	f000 bc7d 	b.w	800948a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case RCC_SAI1CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI1 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8008b90:	4b8e      	ldr	r3, [pc, #568]	; (8008dcc <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 8008b92:	681b      	ldr	r3, [r3, #0]
 8008b94:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8008b98:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008b9c:	d108      	bne.n	8008bb0 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008b9e:	f107 030c 	add.w	r3, r7, #12
 8008ba2:	4618      	mov	r0, r3
 8008ba4:	f000 fde8 	bl	8009778 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8008ba8:	68fb      	ldr	r3, [r7, #12]
 8008baa:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8008bac:	f000 bc6d 	b.w	800948a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 8008bb0:	2300      	movs	r3, #0
 8008bb2:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008bb4:	f000 bc69 	b.w	800948a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case RCC_SAI1CLKSOURCE_CLKP: /* CKPER is the clock source for SAI1*/
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8008bb8:	4b84      	ldr	r3, [pc, #528]	; (8008dcc <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 8008bba:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008bbc:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8008bc0:	637b      	str	r3, [r7, #52]	; 0x34

          if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8008bc2:	4b82      	ldr	r3, [pc, #520]	; (8008dcc <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 8008bc4:	681b      	ldr	r3, [r3, #0]
 8008bc6:	f003 0304 	and.w	r3, r3, #4
 8008bca:	2b04      	cmp	r3, #4
 8008bcc:	d10c      	bne.n	8008be8 <HAL_RCCEx_GetPeriphCLKFreq+0xe8>
 8008bce:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008bd0:	2b00      	cmp	r3, #0
 8008bd2:	d109      	bne.n	8008be8 <HAL_RCCEx_GetPeriphCLKFreq+0xe8>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8008bd4:	4b7d      	ldr	r3, [pc, #500]	; (8008dcc <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 8008bd6:	681b      	ldr	r3, [r3, #0]
 8008bd8:	08db      	lsrs	r3, r3, #3
 8008bda:	f003 0303 	and.w	r3, r3, #3
 8008bde:	4a7c      	ldr	r2, [pc, #496]	; (8008dd0 <HAL_RCCEx_GetPeriphCLKFreq+0x2d0>)
 8008be0:	fa22 f303 	lsr.w	r3, r2, r3
 8008be4:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008be6:	e01f      	b.n	8008c28 <HAL_RCCEx_GetPeriphCLKFreq+0x128>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8008be8:	4b78      	ldr	r3, [pc, #480]	; (8008dcc <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 8008bea:	681b      	ldr	r3, [r3, #0]
 8008bec:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008bf0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008bf4:	d106      	bne.n	8008c04 <HAL_RCCEx_GetPeriphCLKFreq+0x104>
 8008bf6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008bf8:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8008bfc:	d102      	bne.n	8008c04 <HAL_RCCEx_GetPeriphCLKFreq+0x104>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 8008bfe:	4b75      	ldr	r3, [pc, #468]	; (8008dd4 <HAL_RCCEx_GetPeriphCLKFreq+0x2d4>)
 8008c00:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008c02:	e011      	b.n	8008c28 <HAL_RCCEx_GetPeriphCLKFreq+0x128>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8008c04:	4b71      	ldr	r3, [pc, #452]	; (8008dcc <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 8008c06:	681b      	ldr	r3, [r3, #0]
 8008c08:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008c0c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8008c10:	d106      	bne.n	8008c20 <HAL_RCCEx_GetPeriphCLKFreq+0x120>
 8008c12:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008c14:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008c18:	d102      	bne.n	8008c20 <HAL_RCCEx_GetPeriphCLKFreq+0x120>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 8008c1a:	4b6f      	ldr	r3, [pc, #444]	; (8008dd8 <HAL_RCCEx_GetPeriphCLKFreq+0x2d8>)
 8008c1c:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008c1e:	e003      	b.n	8008c28 <HAL_RCCEx_GetPeriphCLKFreq+0x128>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 8008c20:	2300      	movs	r3, #0
 8008c22:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 8008c24:	f000 bc31 	b.w	800948a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 8008c28:	f000 bc2f 	b.w	800948a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case (RCC_SAI1CLKSOURCE_PIN): /* External clock is the clock source for SAI1 */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 8008c2c:	4b6b      	ldr	r3, [pc, #428]	; (8008ddc <HAL_RCCEx_GetPeriphCLKFreq+0x2dc>)
 8008c2e:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008c30:	f000 bc2b 	b.w	800948a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      default :
        {
          frequency = 0;
 8008c34:	2300      	movs	r3, #0
 8008c36:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008c38:	f000 bc27 	b.w	800948a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      }
    }

#if defined(SAI3)
  else if (PeriphClk == RCC_PERIPHCLK_SAI23)
 8008c3c:	687b      	ldr	r3, [r7, #4]
 8008c3e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008c42:	f040 8095 	bne.w	8008d70 <HAL_RCCEx_GetPeriphCLKFreq+0x270>
    {

      saiclocksource= __HAL_RCC_GET_SAI23_SOURCE();
 8008c46:	4b61      	ldr	r3, [pc, #388]	; (8008dcc <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 8008c48:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008c4a:	f403 73e0 	and.w	r3, r3, #448	; 0x1c0
 8008c4e:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
 8008c50:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008c52:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008c56:	d04d      	beq.n	8008cf4 <HAL_RCCEx_GetPeriphCLKFreq+0x1f4>
 8008c58:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008c5a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008c5e:	f200 8084 	bhi.w	8008d6a <HAL_RCCEx_GetPeriphCLKFreq+0x26a>
 8008c62:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008c64:	2bc0      	cmp	r3, #192	; 0xc0
 8008c66:	d07d      	beq.n	8008d64 <HAL_RCCEx_GetPeriphCLKFreq+0x264>
 8008c68:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008c6a:	2bc0      	cmp	r3, #192	; 0xc0
 8008c6c:	d87d      	bhi.n	8008d6a <HAL_RCCEx_GetPeriphCLKFreq+0x26a>
 8008c6e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008c70:	2b80      	cmp	r3, #128	; 0x80
 8008c72:	d02d      	beq.n	8008cd0 <HAL_RCCEx_GetPeriphCLKFreq+0x1d0>
 8008c74:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008c76:	2b80      	cmp	r3, #128	; 0x80
 8008c78:	d877      	bhi.n	8008d6a <HAL_RCCEx_GetPeriphCLKFreq+0x26a>
 8008c7a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008c7c:	2b00      	cmp	r3, #0
 8008c7e:	d003      	beq.n	8008c88 <HAL_RCCEx_GetPeriphCLKFreq+0x188>
 8008c80:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008c82:	2b40      	cmp	r3, #64	; 0x40
 8008c84:	d012      	beq.n	8008cac <HAL_RCCEx_GetPeriphCLKFreq+0x1ac>
 8008c86:	e070      	b.n	8008d6a <HAL_RCCEx_GetPeriphCLKFreq+0x26a>
      {
      case RCC_SAI23CLKSOURCE_PLL: /* PLL1 is the clock source for SAI2/3 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8008c88:	4b50      	ldr	r3, [pc, #320]	; (8008dcc <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 8008c8a:	681b      	ldr	r3, [r3, #0]
 8008c8c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008c90:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8008c94:	d107      	bne.n	8008ca6 <HAL_RCCEx_GetPeriphCLKFreq+0x1a6>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8008c96:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8008c9a:	4618      	mov	r0, r3
 8008c9c:	f000 fec0 	bl	8009a20 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8008ca0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008ca2:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8008ca4:	e3f1      	b.n	800948a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 8008ca6:	2300      	movs	r3, #0
 8008ca8:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008caa:	e3ee      	b.n	800948a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI2/3 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8008cac:	4b47      	ldr	r3, [pc, #284]	; (8008dcc <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 8008cae:	681b      	ldr	r3, [r3, #0]
 8008cb0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008cb4:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8008cb8:	d107      	bne.n	8008cca <HAL_RCCEx_GetPeriphCLKFreq+0x1ca>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008cba:	f107 0318 	add.w	r3, r7, #24
 8008cbe:	4618      	mov	r0, r3
 8008cc0:	f000 fc06 	bl	80094d0 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8008cc4:	69bb      	ldr	r3, [r7, #24]
 8008cc6:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8008cc8:	e3df      	b.n	800948a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 8008cca:	2300      	movs	r3, #0
 8008ccc:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008cce:	e3dc      	b.n	800948a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case RCC_SAI23CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI2/3 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8008cd0:	4b3e      	ldr	r3, [pc, #248]	; (8008dcc <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 8008cd2:	681b      	ldr	r3, [r3, #0]
 8008cd4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8008cd8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008cdc:	d107      	bne.n	8008cee <HAL_RCCEx_GetPeriphCLKFreq+0x1ee>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008cde:	f107 030c 	add.w	r3, r7, #12
 8008ce2:	4618      	mov	r0, r3
 8008ce4:	f000 fd48 	bl	8009778 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8008ce8:	68fb      	ldr	r3, [r7, #12]
 8008cea:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8008cec:	e3cd      	b.n	800948a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 8008cee:	2300      	movs	r3, #0
 8008cf0:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008cf2:	e3ca      	b.n	800948a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case RCC_SAI23CLKSOURCE_CLKP: /* CKPER is the clock source for SAI2/3 */
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8008cf4:	4b35      	ldr	r3, [pc, #212]	; (8008dcc <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 8008cf6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008cf8:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8008cfc:	637b      	str	r3, [r7, #52]	; 0x34

          if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8008cfe:	4b33      	ldr	r3, [pc, #204]	; (8008dcc <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 8008d00:	681b      	ldr	r3, [r3, #0]
 8008d02:	f003 0304 	and.w	r3, r3, #4
 8008d06:	2b04      	cmp	r3, #4
 8008d08:	d10c      	bne.n	8008d24 <HAL_RCCEx_GetPeriphCLKFreq+0x224>
 8008d0a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008d0c:	2b00      	cmp	r3, #0
 8008d0e:	d109      	bne.n	8008d24 <HAL_RCCEx_GetPeriphCLKFreq+0x224>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8008d10:	4b2e      	ldr	r3, [pc, #184]	; (8008dcc <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 8008d12:	681b      	ldr	r3, [r3, #0]
 8008d14:	08db      	lsrs	r3, r3, #3
 8008d16:	f003 0303 	and.w	r3, r3, #3
 8008d1a:	4a2d      	ldr	r2, [pc, #180]	; (8008dd0 <HAL_RCCEx_GetPeriphCLKFreq+0x2d0>)
 8008d1c:	fa22 f303 	lsr.w	r3, r2, r3
 8008d20:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008d22:	e01e      	b.n	8008d62 <HAL_RCCEx_GetPeriphCLKFreq+0x262>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8008d24:	4b29      	ldr	r3, [pc, #164]	; (8008dcc <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 8008d26:	681b      	ldr	r3, [r3, #0]
 8008d28:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008d2c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008d30:	d106      	bne.n	8008d40 <HAL_RCCEx_GetPeriphCLKFreq+0x240>
 8008d32:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008d34:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8008d38:	d102      	bne.n	8008d40 <HAL_RCCEx_GetPeriphCLKFreq+0x240>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 8008d3a:	4b26      	ldr	r3, [pc, #152]	; (8008dd4 <HAL_RCCEx_GetPeriphCLKFreq+0x2d4>)
 8008d3c:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008d3e:	e010      	b.n	8008d62 <HAL_RCCEx_GetPeriphCLKFreq+0x262>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8008d40:	4b22      	ldr	r3, [pc, #136]	; (8008dcc <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 8008d42:	681b      	ldr	r3, [r3, #0]
 8008d44:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008d48:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8008d4c:	d106      	bne.n	8008d5c <HAL_RCCEx_GetPeriphCLKFreq+0x25c>
 8008d4e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008d50:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008d54:	d102      	bne.n	8008d5c <HAL_RCCEx_GetPeriphCLKFreq+0x25c>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 8008d56:	4b20      	ldr	r3, [pc, #128]	; (8008dd8 <HAL_RCCEx_GetPeriphCLKFreq+0x2d8>)
 8008d58:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008d5a:	e002      	b.n	8008d62 <HAL_RCCEx_GetPeriphCLKFreq+0x262>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 8008d5c:	2300      	movs	r3, #0
 8008d5e:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 8008d60:	e393      	b.n	800948a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 8008d62:	e392      	b.n	800948a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case (RCC_SAI23CLKSOURCE_PIN): /* External clock is the clock source for SAI2/3 */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 8008d64:	4b1d      	ldr	r3, [pc, #116]	; (8008ddc <HAL_RCCEx_GetPeriphCLKFreq+0x2dc>)
 8008d66:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008d68:	e38f      	b.n	800948a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      default :
        {
          frequency = 0;
 8008d6a:	2300      	movs	r3, #0
 8008d6c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008d6e:	e38c      	b.n	800948a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
#endif

#if defined(SAI4)
  else if (PeriphClk == RCC_PERIPHCLK_SAI4A)
 8008d70:	687b      	ldr	r3, [r7, #4]
 8008d72:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008d76:	f040 80a7 	bne.w	8008ec8 <HAL_RCCEx_GetPeriphCLKFreq+0x3c8>
    {

      saiclocksource= __HAL_RCC_GET_SAI4A_SOURCE();
 8008d7a:	4b14      	ldr	r3, [pc, #80]	; (8008dcc <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 8008d7c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008d7e:	f403 0360 	and.w	r3, r3, #14680064	; 0xe00000
 8008d82:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
 8008d84:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008d86:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8008d8a:	d05f      	beq.n	8008e4c <HAL_RCCEx_GetPeriphCLKFreq+0x34c>
 8008d8c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008d8e:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8008d92:	f200 8096 	bhi.w	8008ec2 <HAL_RCCEx_GetPeriphCLKFreq+0x3c2>
 8008d96:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008d98:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8008d9c:	f000 808e 	beq.w	8008ebc <HAL_RCCEx_GetPeriphCLKFreq+0x3bc>
 8008da0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008da2:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8008da6:	f200 808c 	bhi.w	8008ec2 <HAL_RCCEx_GetPeriphCLKFreq+0x3c2>
 8008daa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008dac:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8008db0:	d03a      	beq.n	8008e28 <HAL_RCCEx_GetPeriphCLKFreq+0x328>
 8008db2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008db4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8008db8:	f200 8083 	bhi.w	8008ec2 <HAL_RCCEx_GetPeriphCLKFreq+0x3c2>
 8008dbc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008dbe:	2b00      	cmp	r3, #0
 8008dc0:	d00e      	beq.n	8008de0 <HAL_RCCEx_GetPeriphCLKFreq+0x2e0>
 8008dc2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008dc4:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8008dc8:	d01c      	beq.n	8008e04 <HAL_RCCEx_GetPeriphCLKFreq+0x304>
 8008dca:	e07a      	b.n	8008ec2 <HAL_RCCEx_GetPeriphCLKFreq+0x3c2>
 8008dcc:	58024400 	.word	0x58024400
 8008dd0:	03d09000 	.word	0x03d09000
 8008dd4:	003d0900 	.word	0x003d0900
 8008dd8:	017d7840 	.word	0x017d7840
 8008ddc:	00bb8000 	.word	0x00bb8000
      {
      case RCC_SAI4ACLKSOURCE_PLL: /* PLL1 is the clock source for SAI4A */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8008de0:	4baa      	ldr	r3, [pc, #680]	; (800908c <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8008de2:	681b      	ldr	r3, [r3, #0]
 8008de4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008de8:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8008dec:	d107      	bne.n	8008dfe <HAL_RCCEx_GetPeriphCLKFreq+0x2fe>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8008dee:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8008df2:	4618      	mov	r0, r3
 8008df4:	f000 fe14 	bl	8009a20 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8008df8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008dfa:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8008dfc:	e345      	b.n	800948a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 8008dfe:	2300      	movs	r3, #0
 8008e00:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008e02:	e342      	b.n	800948a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      case RCC_SAI4ACLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4A */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8008e04:	4ba1      	ldr	r3, [pc, #644]	; (800908c <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8008e06:	681b      	ldr	r3, [r3, #0]
 8008e08:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008e0c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8008e10:	d107      	bne.n	8008e22 <HAL_RCCEx_GetPeriphCLKFreq+0x322>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008e12:	f107 0318 	add.w	r3, r7, #24
 8008e16:	4618      	mov	r0, r3
 8008e18:	f000 fb5a 	bl	80094d0 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8008e1c:	69bb      	ldr	r3, [r7, #24]
 8008e1e:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8008e20:	e333      	b.n	800948a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 8008e22:	2300      	movs	r3, #0
 8008e24:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008e26:	e330      	b.n	800948a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case RCC_SAI4ACLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4A */
        {
          if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8008e28:	4b98      	ldr	r3, [pc, #608]	; (800908c <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8008e2a:	681b      	ldr	r3, [r3, #0]
 8008e2c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8008e30:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008e34:	d107      	bne.n	8008e46 <HAL_RCCEx_GetPeriphCLKFreq+0x346>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008e36:	f107 030c 	add.w	r3, r7, #12
 8008e3a:	4618      	mov	r0, r3
 8008e3c:	f000 fc9c 	bl	8009778 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8008e40:	68fb      	ldr	r3, [r7, #12]
 8008e42:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8008e44:	e321      	b.n	800948a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 8008e46:	2300      	movs	r3, #0
 8008e48:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008e4a:	e31e      	b.n	800948a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case RCC_SAI4ACLKSOURCE_CLKP: /* CKPER is the clock source for SAI4A*/
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8008e4c:	4b8f      	ldr	r3, [pc, #572]	; (800908c <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8008e4e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008e50:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8008e54:	637b      	str	r3, [r7, #52]	; 0x34

          if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8008e56:	4b8d      	ldr	r3, [pc, #564]	; (800908c <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8008e58:	681b      	ldr	r3, [r3, #0]
 8008e5a:	f003 0304 	and.w	r3, r3, #4
 8008e5e:	2b04      	cmp	r3, #4
 8008e60:	d10c      	bne.n	8008e7c <HAL_RCCEx_GetPeriphCLKFreq+0x37c>
 8008e62:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008e64:	2b00      	cmp	r3, #0
 8008e66:	d109      	bne.n	8008e7c <HAL_RCCEx_GetPeriphCLKFreq+0x37c>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8008e68:	4b88      	ldr	r3, [pc, #544]	; (800908c <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8008e6a:	681b      	ldr	r3, [r3, #0]
 8008e6c:	08db      	lsrs	r3, r3, #3
 8008e6e:	f003 0303 	and.w	r3, r3, #3
 8008e72:	4a87      	ldr	r2, [pc, #540]	; (8009090 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 8008e74:	fa22 f303 	lsr.w	r3, r2, r3
 8008e78:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008e7a:	e01e      	b.n	8008eba <HAL_RCCEx_GetPeriphCLKFreq+0x3ba>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8008e7c:	4b83      	ldr	r3, [pc, #524]	; (800908c <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8008e7e:	681b      	ldr	r3, [r3, #0]
 8008e80:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008e84:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008e88:	d106      	bne.n	8008e98 <HAL_RCCEx_GetPeriphCLKFreq+0x398>
 8008e8a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008e8c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8008e90:	d102      	bne.n	8008e98 <HAL_RCCEx_GetPeriphCLKFreq+0x398>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 8008e92:	4b80      	ldr	r3, [pc, #512]	; (8009094 <HAL_RCCEx_GetPeriphCLKFreq+0x594>)
 8008e94:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008e96:	e010      	b.n	8008eba <HAL_RCCEx_GetPeriphCLKFreq+0x3ba>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8008e98:	4b7c      	ldr	r3, [pc, #496]	; (800908c <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8008e9a:	681b      	ldr	r3, [r3, #0]
 8008e9c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008ea0:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8008ea4:	d106      	bne.n	8008eb4 <HAL_RCCEx_GetPeriphCLKFreq+0x3b4>
 8008ea6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008ea8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008eac:	d102      	bne.n	8008eb4 <HAL_RCCEx_GetPeriphCLKFreq+0x3b4>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 8008eae:	4b7a      	ldr	r3, [pc, #488]	; (8009098 <HAL_RCCEx_GetPeriphCLKFreq+0x598>)
 8008eb0:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008eb2:	e002      	b.n	8008eba <HAL_RCCEx_GetPeriphCLKFreq+0x3ba>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 8008eb4:	2300      	movs	r3, #0
 8008eb6:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 8008eb8:	e2e7      	b.n	800948a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 8008eba:	e2e6      	b.n	800948a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case RCC_SAI4ACLKSOURCE_PIN: /* External clock is the clock source for SAI4A */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 8008ebc:	4b77      	ldr	r3, [pc, #476]	; (800909c <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 8008ebe:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008ec0:	e2e3      	b.n	800948a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      default :
        {
          frequency = 0;
 8008ec2:	2300      	movs	r3, #0
 8008ec4:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008ec6:	e2e0      	b.n	800948a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      }
    }

  else if (PeriphClk == RCC_PERIPHCLK_SAI4B)
 8008ec8:	687b      	ldr	r3, [r7, #4]
 8008eca:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008ece:	f040 809c 	bne.w	800900a <HAL_RCCEx_GetPeriphCLKFreq+0x50a>
    {

      saiclocksource= __HAL_RCC_GET_SAI4B_SOURCE();
 8008ed2:	4b6e      	ldr	r3, [pc, #440]	; (800908c <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8008ed4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008ed6:	f003 63e0 	and.w	r3, r3, #117440512	; 0x7000000
 8008eda:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
 8008edc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008ede:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8008ee2:	d054      	beq.n	8008f8e <HAL_RCCEx_GetPeriphCLKFreq+0x48e>
 8008ee4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008ee6:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8008eea:	f200 808b 	bhi.w	8009004 <HAL_RCCEx_GetPeriphCLKFreq+0x504>
 8008eee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008ef0:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8008ef4:	f000 8083 	beq.w	8008ffe <HAL_RCCEx_GetPeriphCLKFreq+0x4fe>
 8008ef8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008efa:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8008efe:	f200 8081 	bhi.w	8009004 <HAL_RCCEx_GetPeriphCLKFreq+0x504>
 8008f02:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008f04:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8008f08:	d02f      	beq.n	8008f6a <HAL_RCCEx_GetPeriphCLKFreq+0x46a>
 8008f0a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008f0c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8008f10:	d878      	bhi.n	8009004 <HAL_RCCEx_GetPeriphCLKFreq+0x504>
 8008f12:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008f14:	2b00      	cmp	r3, #0
 8008f16:	d004      	beq.n	8008f22 <HAL_RCCEx_GetPeriphCLKFreq+0x422>
 8008f18:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008f1a:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8008f1e:	d012      	beq.n	8008f46 <HAL_RCCEx_GetPeriphCLKFreq+0x446>
 8008f20:	e070      	b.n	8009004 <HAL_RCCEx_GetPeriphCLKFreq+0x504>
      {
      case RCC_SAI4BCLKSOURCE_PLL: /* PLL1 is the clock source for SAI4B */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8008f22:	4b5a      	ldr	r3, [pc, #360]	; (800908c <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8008f24:	681b      	ldr	r3, [r3, #0]
 8008f26:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008f2a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8008f2e:	d107      	bne.n	8008f40 <HAL_RCCEx_GetPeriphCLKFreq+0x440>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8008f30:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8008f34:	4618      	mov	r0, r3
 8008f36:	f000 fd73 	bl	8009a20 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8008f3a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008f3c:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8008f3e:	e2a4      	b.n	800948a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 8008f40:	2300      	movs	r3, #0
 8008f42:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008f44:	e2a1      	b.n	800948a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      case RCC_SAI4BCLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4B */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8008f46:	4b51      	ldr	r3, [pc, #324]	; (800908c <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8008f48:	681b      	ldr	r3, [r3, #0]
 8008f4a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008f4e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8008f52:	d107      	bne.n	8008f64 <HAL_RCCEx_GetPeriphCLKFreq+0x464>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008f54:	f107 0318 	add.w	r3, r7, #24
 8008f58:	4618      	mov	r0, r3
 8008f5a:	f000 fab9 	bl	80094d0 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8008f5e:	69bb      	ldr	r3, [r7, #24]
 8008f60:	63fb      	str	r3, [r7, #60]	; 0x3c
          }
         else
         {
           frequency = 0;
         }
          break;
 8008f62:	e292      	b.n	800948a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 8008f64:	2300      	movs	r3, #0
 8008f66:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008f68:	e28f      	b.n	800948a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case RCC_SAI4BCLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4B */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8008f6a:	4b48      	ldr	r3, [pc, #288]	; (800908c <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8008f6c:	681b      	ldr	r3, [r3, #0]
 8008f6e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8008f72:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008f76:	d107      	bne.n	8008f88 <HAL_RCCEx_GetPeriphCLKFreq+0x488>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008f78:	f107 030c 	add.w	r3, r7, #12
 8008f7c:	4618      	mov	r0, r3
 8008f7e:	f000 fbfb 	bl	8009778 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8008f82:	68fb      	ldr	r3, [r7, #12]
 8008f84:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8008f86:	e280      	b.n	800948a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 8008f88:	2300      	movs	r3, #0
 8008f8a:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008f8c:	e27d      	b.n	800948a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case RCC_SAI4BCLKSOURCE_CLKP: /* CKPER is the clock source for SAI4B*/
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8008f8e:	4b3f      	ldr	r3, [pc, #252]	; (800908c <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8008f90:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008f92:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8008f96:	637b      	str	r3, [r7, #52]	; 0x34

         if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8008f98:	4b3c      	ldr	r3, [pc, #240]	; (800908c <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8008f9a:	681b      	ldr	r3, [r3, #0]
 8008f9c:	f003 0304 	and.w	r3, r3, #4
 8008fa0:	2b04      	cmp	r3, #4
 8008fa2:	d10c      	bne.n	8008fbe <HAL_RCCEx_GetPeriphCLKFreq+0x4be>
 8008fa4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008fa6:	2b00      	cmp	r3, #0
 8008fa8:	d109      	bne.n	8008fbe <HAL_RCCEx_GetPeriphCLKFreq+0x4be>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8008faa:	4b38      	ldr	r3, [pc, #224]	; (800908c <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8008fac:	681b      	ldr	r3, [r3, #0]
 8008fae:	08db      	lsrs	r3, r3, #3
 8008fb0:	f003 0303 	and.w	r3, r3, #3
 8008fb4:	4a36      	ldr	r2, [pc, #216]	; (8009090 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 8008fb6:	fa22 f303 	lsr.w	r3, r2, r3
 8008fba:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008fbc:	e01e      	b.n	8008ffc <HAL_RCCEx_GetPeriphCLKFreq+0x4fc>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8008fbe:	4b33      	ldr	r3, [pc, #204]	; (800908c <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8008fc0:	681b      	ldr	r3, [r3, #0]
 8008fc2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008fc6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008fca:	d106      	bne.n	8008fda <HAL_RCCEx_GetPeriphCLKFreq+0x4da>
 8008fcc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008fce:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8008fd2:	d102      	bne.n	8008fda <HAL_RCCEx_GetPeriphCLKFreq+0x4da>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 8008fd4:	4b2f      	ldr	r3, [pc, #188]	; (8009094 <HAL_RCCEx_GetPeriphCLKFreq+0x594>)
 8008fd6:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008fd8:	e010      	b.n	8008ffc <HAL_RCCEx_GetPeriphCLKFreq+0x4fc>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8008fda:	4b2c      	ldr	r3, [pc, #176]	; (800908c <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8008fdc:	681b      	ldr	r3, [r3, #0]
 8008fde:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008fe2:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8008fe6:	d106      	bne.n	8008ff6 <HAL_RCCEx_GetPeriphCLKFreq+0x4f6>
 8008fe8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008fea:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008fee:	d102      	bne.n	8008ff6 <HAL_RCCEx_GetPeriphCLKFreq+0x4f6>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 8008ff0:	4b29      	ldr	r3, [pc, #164]	; (8009098 <HAL_RCCEx_GetPeriphCLKFreq+0x598>)
 8008ff2:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008ff4:	e002      	b.n	8008ffc <HAL_RCCEx_GetPeriphCLKFreq+0x4fc>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 8008ff6:	2300      	movs	r3, #0
 8008ff8:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 8008ffa:	e246      	b.n	800948a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 8008ffc:	e245      	b.n	800948a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case RCC_SAI4BCLKSOURCE_PIN: /* External clock is the clock source for SAI4B */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 8008ffe:	4b27      	ldr	r3, [pc, #156]	; (800909c <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 8009000:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8009002:	e242      	b.n	800948a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      default :
        {
          frequency = 0;
 8009004:	2300      	movs	r3, #0
 8009006:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8009008:	e23f      	b.n	800948a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      }
    }
#endif /*SAI4*/
  else if (PeriphClk == RCC_PERIPHCLK_SPI123)
 800900a:	687b      	ldr	r3, [r7, #4]
 800900c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009010:	f040 80a8 	bne.w	8009164 <HAL_RCCEx_GetPeriphCLKFreq+0x664>
    {
      /* Get SPI1/2/3 clock source */
      srcclk= __HAL_RCC_GET_SPI123_SOURCE();
 8009014:	4b1d      	ldr	r3, [pc, #116]	; (800908c <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8009016:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009018:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
 800901c:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 800901e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009020:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8009024:	d060      	beq.n	80090e8 <HAL_RCCEx_GetPeriphCLKFreq+0x5e8>
 8009026:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009028:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800902c:	f200 8097 	bhi.w	800915e <HAL_RCCEx_GetPeriphCLKFreq+0x65e>
 8009030:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009032:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8009036:	f000 808f 	beq.w	8009158 <HAL_RCCEx_GetPeriphCLKFreq+0x658>
 800903a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800903c:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8009040:	f200 808d 	bhi.w	800915e <HAL_RCCEx_GetPeriphCLKFreq+0x65e>
 8009044:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009046:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800904a:	d03b      	beq.n	80090c4 <HAL_RCCEx_GetPeriphCLKFreq+0x5c4>
 800904c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800904e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009052:	f200 8084 	bhi.w	800915e <HAL_RCCEx_GetPeriphCLKFreq+0x65e>
 8009056:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009058:	2b00      	cmp	r3, #0
 800905a:	d004      	beq.n	8009066 <HAL_RCCEx_GetPeriphCLKFreq+0x566>
 800905c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800905e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009062:	d01d      	beq.n	80090a0 <HAL_RCCEx_GetPeriphCLKFreq+0x5a0>
 8009064:	e07b      	b.n	800915e <HAL_RCCEx_GetPeriphCLKFreq+0x65e>
      {
      case RCC_SPI123CLKSOURCE_PLL: /* PLL1 is the clock source for SPI123 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8009066:	4b09      	ldr	r3, [pc, #36]	; (800908c <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8009068:	681b      	ldr	r3, [r3, #0]
 800906a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800906e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8009072:	d107      	bne.n	8009084 <HAL_RCCEx_GetPeriphCLKFreq+0x584>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8009074:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8009078:	4618      	mov	r0, r3
 800907a:	f000 fcd1 	bl	8009a20 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800907e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009080:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8009082:	e202      	b.n	800948a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 8009084:	2300      	movs	r3, #0
 8009086:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8009088:	e1ff      	b.n	800948a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800908a:	bf00      	nop
 800908c:	58024400 	.word	0x58024400
 8009090:	03d09000 	.word	0x03d09000
 8009094:	003d0900 	.word	0x003d0900
 8009098:	017d7840 	.word	0x017d7840
 800909c:	00bb8000 	.word	0x00bb8000
        }
      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI123 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80090a0:	4ba3      	ldr	r3, [pc, #652]	; (8009330 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 80090a2:	681b      	ldr	r3, [r3, #0]
 80090a4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80090a8:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80090ac:	d107      	bne.n	80090be <HAL_RCCEx_GetPeriphCLKFreq+0x5be>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80090ae:	f107 0318 	add.w	r3, r7, #24
 80090b2:	4618      	mov	r0, r3
 80090b4:	f000 fa0c 	bl	80094d0 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 80090b8:	69bb      	ldr	r3, [r7, #24]
 80090ba:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 80090bc:	e1e5      	b.n	800948a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 80090be:	2300      	movs	r3, #0
 80090c0:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80090c2:	e1e2      	b.n	800948a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case RCC_SPI123CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI123 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 80090c4:	4b9a      	ldr	r3, [pc, #616]	; (8009330 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 80090c6:	681b      	ldr	r3, [r3, #0]
 80090c8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80090cc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80090d0:	d107      	bne.n	80090e2 <HAL_RCCEx_GetPeriphCLKFreq+0x5e2>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80090d2:	f107 030c 	add.w	r3, r7, #12
 80090d6:	4618      	mov	r0, r3
 80090d8:	f000 fb4e 	bl	8009778 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 80090dc:	68fb      	ldr	r3, [r7, #12]
 80090de:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 80090e0:	e1d3      	b.n	800948a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 80090e2:	2300      	movs	r3, #0
 80090e4:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80090e6:	e1d0      	b.n	800948a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case RCC_SPI123CLKSOURCE_CLKP: /* CKPER is the clock source for SPI123 */
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 80090e8:	4b91      	ldr	r3, [pc, #580]	; (8009330 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 80090ea:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80090ec:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80090f0:	637b      	str	r3, [r7, #52]	; 0x34

         if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 80090f2:	4b8f      	ldr	r3, [pc, #572]	; (8009330 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 80090f4:	681b      	ldr	r3, [r3, #0]
 80090f6:	f003 0304 	and.w	r3, r3, #4
 80090fa:	2b04      	cmp	r3, #4
 80090fc:	d10c      	bne.n	8009118 <HAL_RCCEx_GetPeriphCLKFreq+0x618>
 80090fe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009100:	2b00      	cmp	r3, #0
 8009102:	d109      	bne.n	8009118 <HAL_RCCEx_GetPeriphCLKFreq+0x618>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8009104:	4b8a      	ldr	r3, [pc, #552]	; (8009330 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 8009106:	681b      	ldr	r3, [r3, #0]
 8009108:	08db      	lsrs	r3, r3, #3
 800910a:	f003 0303 	and.w	r3, r3, #3
 800910e:	4a89      	ldr	r2, [pc, #548]	; (8009334 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 8009110:	fa22 f303 	lsr.w	r3, r2, r3
 8009114:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009116:	e01e      	b.n	8009156 <HAL_RCCEx_GetPeriphCLKFreq+0x656>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8009118:	4b85      	ldr	r3, [pc, #532]	; (8009330 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 800911a:	681b      	ldr	r3, [r3, #0]
 800911c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009120:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009124:	d106      	bne.n	8009134 <HAL_RCCEx_GetPeriphCLKFreq+0x634>
 8009126:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009128:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800912c:	d102      	bne.n	8009134 <HAL_RCCEx_GetPeriphCLKFreq+0x634>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 800912e:	4b82      	ldr	r3, [pc, #520]	; (8009338 <HAL_RCCEx_GetPeriphCLKFreq+0x838>)
 8009130:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009132:	e010      	b.n	8009156 <HAL_RCCEx_GetPeriphCLKFreq+0x656>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8009134:	4b7e      	ldr	r3, [pc, #504]	; (8009330 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 8009136:	681b      	ldr	r3, [r3, #0]
 8009138:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800913c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8009140:	d106      	bne.n	8009150 <HAL_RCCEx_GetPeriphCLKFreq+0x650>
 8009142:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009144:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009148:	d102      	bne.n	8009150 <HAL_RCCEx_GetPeriphCLKFreq+0x650>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 800914a:	4b7c      	ldr	r3, [pc, #496]	; (800933c <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 800914c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800914e:	e002      	b.n	8009156 <HAL_RCCEx_GetPeriphCLKFreq+0x656>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 8009150:	2300      	movs	r3, #0
 8009152:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 8009154:	e199      	b.n	800948a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 8009156:	e198      	b.n	800948a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case (RCC_SPI123CLKSOURCE_PIN): /* External clock is the clock source for I2S */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 8009158:	4b79      	ldr	r3, [pc, #484]	; (8009340 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 800915a:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800915c:	e195      	b.n	800948a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      default :
        {
          frequency = 0;
 800915e:	2300      	movs	r3, #0
 8009160:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8009162:	e192      	b.n	800948a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
 8009164:	687b      	ldr	r3, [r7, #4]
 8009166:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 800916a:	d173      	bne.n	8009254 <HAL_RCCEx_GetPeriphCLKFreq+0x754>
    {
      /* Get ADC clock source */
      srcclk= __HAL_RCC_GET_ADC_SOURCE();
 800916c:	4b70      	ldr	r3, [pc, #448]	; (8009330 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 800916e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009170:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8009174:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 8009176:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009178:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800917c:	d02f      	beq.n	80091de <HAL_RCCEx_GetPeriphCLKFreq+0x6de>
 800917e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009180:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8009184:	d863      	bhi.n	800924e <HAL_RCCEx_GetPeriphCLKFreq+0x74e>
 8009186:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009188:	2b00      	cmp	r3, #0
 800918a:	d004      	beq.n	8009196 <HAL_RCCEx_GetPeriphCLKFreq+0x696>
 800918c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800918e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009192:	d012      	beq.n	80091ba <HAL_RCCEx_GetPeriphCLKFreq+0x6ba>
 8009194:	e05b      	b.n	800924e <HAL_RCCEx_GetPeriphCLKFreq+0x74e>
      {
      case RCC_ADCCLKSOURCE_PLL2:
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8009196:	4b66      	ldr	r3, [pc, #408]	; (8009330 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 8009198:	681b      	ldr	r3, [r3, #0]
 800919a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800919e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80091a2:	d107      	bne.n	80091b4 <HAL_RCCEx_GetPeriphCLKFreq+0x6b4>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80091a4:	f107 0318 	add.w	r3, r7, #24
 80091a8:	4618      	mov	r0, r3
 80091aa:	f000 f991 	bl	80094d0 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 80091ae:	69bb      	ldr	r3, [r7, #24]
 80091b0:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 80091b2:	e16a      	b.n	800948a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 80091b4:	2300      	movs	r3, #0
 80091b6:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80091b8:	e167      	b.n	800948a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      case RCC_ADCCLKSOURCE_PLL3:
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 80091ba:	4b5d      	ldr	r3, [pc, #372]	; (8009330 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 80091bc:	681b      	ldr	r3, [r3, #0]
 80091be:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80091c2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80091c6:	d107      	bne.n	80091d8 <HAL_RCCEx_GetPeriphCLKFreq+0x6d8>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80091c8:	f107 030c 	add.w	r3, r7, #12
 80091cc:	4618      	mov	r0, r3
 80091ce:	f000 fad3 	bl	8009778 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 80091d2:	697b      	ldr	r3, [r7, #20]
 80091d4:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 80091d6:	e158      	b.n	800948a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 80091d8:	2300      	movs	r3, #0
 80091da:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80091dc:	e155      	b.n	800948a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case RCC_ADCCLKSOURCE_CLKP:
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 80091de:	4b54      	ldr	r3, [pc, #336]	; (8009330 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 80091e0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80091e2:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80091e6:	637b      	str	r3, [r7, #52]	; 0x34

         if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 80091e8:	4b51      	ldr	r3, [pc, #324]	; (8009330 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 80091ea:	681b      	ldr	r3, [r3, #0]
 80091ec:	f003 0304 	and.w	r3, r3, #4
 80091f0:	2b04      	cmp	r3, #4
 80091f2:	d10c      	bne.n	800920e <HAL_RCCEx_GetPeriphCLKFreq+0x70e>
 80091f4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80091f6:	2b00      	cmp	r3, #0
 80091f8:	d109      	bne.n	800920e <HAL_RCCEx_GetPeriphCLKFreq+0x70e>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80091fa:	4b4d      	ldr	r3, [pc, #308]	; (8009330 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 80091fc:	681b      	ldr	r3, [r3, #0]
 80091fe:	08db      	lsrs	r3, r3, #3
 8009200:	f003 0303 	and.w	r3, r3, #3
 8009204:	4a4b      	ldr	r2, [pc, #300]	; (8009334 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 8009206:	fa22 f303 	lsr.w	r3, r2, r3
 800920a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800920c:	e01e      	b.n	800924c <HAL_RCCEx_GetPeriphCLKFreq+0x74c>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800920e:	4b48      	ldr	r3, [pc, #288]	; (8009330 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 8009210:	681b      	ldr	r3, [r3, #0]
 8009212:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009216:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800921a:	d106      	bne.n	800922a <HAL_RCCEx_GetPeriphCLKFreq+0x72a>
 800921c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800921e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8009222:	d102      	bne.n	800922a <HAL_RCCEx_GetPeriphCLKFreq+0x72a>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 8009224:	4b44      	ldr	r3, [pc, #272]	; (8009338 <HAL_RCCEx_GetPeriphCLKFreq+0x838>)
 8009226:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009228:	e010      	b.n	800924c <HAL_RCCEx_GetPeriphCLKFreq+0x74c>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800922a:	4b41      	ldr	r3, [pc, #260]	; (8009330 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 800922c:	681b      	ldr	r3, [r3, #0]
 800922e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009232:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8009236:	d106      	bne.n	8009246 <HAL_RCCEx_GetPeriphCLKFreq+0x746>
 8009238:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800923a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800923e:	d102      	bne.n	8009246 <HAL_RCCEx_GetPeriphCLKFreq+0x746>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 8009240:	4b3e      	ldr	r3, [pc, #248]	; (800933c <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8009242:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009244:	e002      	b.n	800924c <HAL_RCCEx_GetPeriphCLKFreq+0x74c>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 8009246:	2300      	movs	r3, #0
 8009248:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 800924a:	e11e      	b.n	800948a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800924c:	e11d      	b.n	800948a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      default :
        {
          frequency = 0;
 800924e:	2300      	movs	r3, #0
 8009250:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8009252:	e11a      	b.n	800948a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 8009254:	687b      	ldr	r3, [r7, #4]
 8009256:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800925a:	d133      	bne.n	80092c4 <HAL_RCCEx_GetPeriphCLKFreq+0x7c4>
    {
      /* Get SDMMC clock source */
      srcclk= __HAL_RCC_GET_SDMMC_SOURCE();
 800925c:	4b34      	ldr	r3, [pc, #208]	; (8009330 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 800925e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009260:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8009264:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 8009266:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009268:	2b00      	cmp	r3, #0
 800926a:	d004      	beq.n	8009276 <HAL_RCCEx_GetPeriphCLKFreq+0x776>
 800926c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800926e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009272:	d012      	beq.n	800929a <HAL_RCCEx_GetPeriphCLKFreq+0x79a>
 8009274:	e023      	b.n	80092be <HAL_RCCEx_GetPeriphCLKFreq+0x7be>
      {
      case RCC_SDMMCCLKSOURCE_PLL: /* PLL1 is the clock source for SDMMC */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8009276:	4b2e      	ldr	r3, [pc, #184]	; (8009330 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 8009278:	681b      	ldr	r3, [r3, #0]
 800927a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800927e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8009282:	d107      	bne.n	8009294 <HAL_RCCEx_GetPeriphCLKFreq+0x794>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8009284:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8009288:	4618      	mov	r0, r3
 800928a:	f000 fbc9 	bl	8009a20 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800928e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009290:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 8009292:	e0fa      	b.n	800948a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8009294:	2300      	movs	r3, #0
 8009296:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8009298:	e0f7      	b.n	800948a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is the clock source for SDMMC */
        {
          if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800929a:	4b25      	ldr	r3, [pc, #148]	; (8009330 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 800929c:	681b      	ldr	r3, [r3, #0]
 800929e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80092a2:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80092a6:	d107      	bne.n	80092b8 <HAL_RCCEx_GetPeriphCLKFreq+0x7b8>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80092a8:	f107 0318 	add.w	r3, r7, #24
 80092ac:	4618      	mov	r0, r3
 80092ae:	f000 f90f 	bl	80094d0 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 80092b2:	6a3b      	ldr	r3, [r7, #32]
 80092b4:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 80092b6:	e0e8      	b.n	800948a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 80092b8:	2300      	movs	r3, #0
 80092ba:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80092bc:	e0e5      	b.n	800948a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      default :
        {
          frequency = 0;
 80092be:	2300      	movs	r3, #0
 80092c0:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80092c2:	e0e2      	b.n	800948a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_SPI6)
 80092c4:	687b      	ldr	r3, [r7, #4]
 80092c6:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80092ca:	f040 808f 	bne.w	80093ec <HAL_RCCEx_GetPeriphCLKFreq+0x8ec>
    {
      /* Get SPI6 clock source */
      srcclk= __HAL_RCC_GET_SPI6_SOURCE();
 80092ce:	4b18      	ldr	r3, [pc, #96]	; (8009330 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 80092d0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80092d2:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
 80092d6:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 80092d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80092da:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80092de:	d075      	beq.n	80093cc <HAL_RCCEx_GetPeriphCLKFreq+0x8cc>
 80092e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80092e2:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80092e6:	d87e      	bhi.n	80093e6 <HAL_RCCEx_GetPeriphCLKFreq+0x8e6>
 80092e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80092ea:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80092ee:	d060      	beq.n	80093b2 <HAL_RCCEx_GetPeriphCLKFreq+0x8b2>
 80092f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80092f2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80092f6:	d876      	bhi.n	80093e6 <HAL_RCCEx_GetPeriphCLKFreq+0x8e6>
 80092f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80092fa:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80092fe:	d045      	beq.n	800938c <HAL_RCCEx_GetPeriphCLKFreq+0x88c>
 8009300:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009302:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8009306:	d86e      	bhi.n	80093e6 <HAL_RCCEx_GetPeriphCLKFreq+0x8e6>
 8009308:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800930a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800930e:	d02b      	beq.n	8009368 <HAL_RCCEx_GetPeriphCLKFreq+0x868>
 8009310:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009312:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009316:	d866      	bhi.n	80093e6 <HAL_RCCEx_GetPeriphCLKFreq+0x8e6>
 8009318:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800931a:	2b00      	cmp	r3, #0
 800931c:	d004      	beq.n	8009328 <HAL_RCCEx_GetPeriphCLKFreq+0x828>
 800931e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009320:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8009324:	d00e      	beq.n	8009344 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
 8009326:	e05e      	b.n	80093e6 <HAL_RCCEx_GetPeriphCLKFreq+0x8e6>
      {
      case RCC_SPI6CLKSOURCE_D3PCLK1: /* D3PCLK1 (PCLK4) is the clock source for SPI6 */
        {
          frequency = HAL_RCCEx_GetD3PCLK1Freq();
 8009328:	f000 f8bc 	bl	80094a4 <HAL_RCCEx_GetD3PCLK1Freq>
 800932c:	63f8      	str	r0, [r7, #60]	; 0x3c
          break;
 800932e:	e0ac      	b.n	800948a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 8009330:	58024400 	.word	0x58024400
 8009334:	03d09000 	.word	0x03d09000
 8009338:	003d0900 	.word	0x003d0900
 800933c:	017d7840 	.word	0x017d7840
 8009340:	00bb8000 	.word	0x00bb8000
        }
      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8009344:	4b53      	ldr	r3, [pc, #332]	; (8009494 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8009346:	681b      	ldr	r3, [r3, #0]
 8009348:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800934c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8009350:	d107      	bne.n	8009362 <HAL_RCCEx_GetPeriphCLKFreq+0x862>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009352:	f107 0318 	add.w	r3, r7, #24
 8009356:	4618      	mov	r0, r3
 8009358:	f000 f8ba 	bl	80094d0 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800935c:	69fb      	ldr	r3, [r7, #28]
 800935e:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 8009360:	e093      	b.n	800948a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8009362:	2300      	movs	r3, #0
 8009364:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8009366:	e090      	b.n	800948a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      case RCC_SPI6CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8009368:	4b4a      	ldr	r3, [pc, #296]	; (8009494 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800936a:	681b      	ldr	r3, [r3, #0]
 800936c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8009370:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009374:	d107      	bne.n	8009386 <HAL_RCCEx_GetPeriphCLKFreq+0x886>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8009376:	f107 030c 	add.w	r3, r7, #12
 800937a:	4618      	mov	r0, r3
 800937c:	f000 f9fc 	bl	8009778 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8009380:	693b      	ldr	r3, [r7, #16]
 8009382:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 8009384:	e081      	b.n	800948a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8009386:	2300      	movs	r3, #0
 8009388:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800938a:	e07e      	b.n	800948a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      case RCC_SPI6CLKSOURCE_HSI: /* HSI is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800938c:	4b41      	ldr	r3, [pc, #260]	; (8009494 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800938e:	681b      	ldr	r3, [r3, #0]
 8009390:	f003 0304 	and.w	r3, r3, #4
 8009394:	2b04      	cmp	r3, #4
 8009396:	d109      	bne.n	80093ac <HAL_RCCEx_GetPeriphCLKFreq+0x8ac>
         {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8009398:	4b3e      	ldr	r3, [pc, #248]	; (8009494 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800939a:	681b      	ldr	r3, [r3, #0]
 800939c:	08db      	lsrs	r3, r3, #3
 800939e:	f003 0303 	and.w	r3, r3, #3
 80093a2:	4a3d      	ldr	r2, [pc, #244]	; (8009498 <HAL_RCCEx_GetPeriphCLKFreq+0x998>)
 80093a4:	fa22 f303 	lsr.w	r3, r2, r3
 80093a8:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 80093aa:	e06e      	b.n	800948a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 80093ac:	2300      	movs	r3, #0
 80093ae:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80093b0:	e06b      	b.n	800948a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      case RCC_SPI6CLKSOURCE_CSI: /* CSI is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 80093b2:	4b38      	ldr	r3, [pc, #224]	; (8009494 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 80093b4:	681b      	ldr	r3, [r3, #0]
 80093b6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80093ba:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80093be:	d102      	bne.n	80093c6 <HAL_RCCEx_GetPeriphCLKFreq+0x8c6>
         {
          frequency = CSI_VALUE;
 80093c0:	4b36      	ldr	r3, [pc, #216]	; (800949c <HAL_RCCEx_GetPeriphCLKFreq+0x99c>)
 80093c2:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 80093c4:	e061      	b.n	800948a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 80093c6:	2300      	movs	r3, #0
 80093c8:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80093ca:	e05e      	b.n	800948a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      case RCC_SPI6CLKSOURCE_HSE: /* HSE is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 80093cc:	4b31      	ldr	r3, [pc, #196]	; (8009494 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 80093ce:	681b      	ldr	r3, [r3, #0]
 80093d0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80093d4:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80093d8:	d102      	bne.n	80093e0 <HAL_RCCEx_GetPeriphCLKFreq+0x8e0>
         {
          frequency = HSE_VALUE;
 80093da:	4b31      	ldr	r3, [pc, #196]	; (80094a0 <HAL_RCCEx_GetPeriphCLKFreq+0x9a0>)
 80093dc:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 80093de:	e054      	b.n	800948a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 80093e0:	2300      	movs	r3, #0
 80093e2:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80093e4:	e051      	b.n	800948a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          break;
        }
#endif /* RCC_SPI6CLKSOURCE_PIN */
      default :
        {
          frequency = 0;
 80093e6:	2300      	movs	r3, #0
 80093e8:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80093ea:	e04e      	b.n	800948a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN)
 80093ec:	687b      	ldr	r3, [r7, #4]
 80093ee:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80093f2:	d148      	bne.n	8009486 <HAL_RCCEx_GetPeriphCLKFreq+0x986>
    {
      /* Get FDCAN clock source */
      srcclk= __HAL_RCC_GET_FDCAN_SOURCE();
 80093f4:	4b27      	ldr	r3, [pc, #156]	; (8009494 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 80093f6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80093f8:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80093fc:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 80093fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009400:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009404:	d02a      	beq.n	800945c <HAL_RCCEx_GetPeriphCLKFreq+0x95c>
 8009406:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009408:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800940c:	d838      	bhi.n	8009480 <HAL_RCCEx_GetPeriphCLKFreq+0x980>
 800940e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009410:	2b00      	cmp	r3, #0
 8009412:	d004      	beq.n	800941e <HAL_RCCEx_GetPeriphCLKFreq+0x91e>
 8009414:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009416:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800941a:	d00d      	beq.n	8009438 <HAL_RCCEx_GetPeriphCLKFreq+0x938>
 800941c:	e030      	b.n	8009480 <HAL_RCCEx_GetPeriphCLKFreq+0x980>
      {
      case RCC_FDCANCLKSOURCE_HSE: /* HSE is the clock source for FDCAN */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800941e:	4b1d      	ldr	r3, [pc, #116]	; (8009494 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8009420:	681b      	ldr	r3, [r3, #0]
 8009422:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009426:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800942a:	d102      	bne.n	8009432 <HAL_RCCEx_GetPeriphCLKFreq+0x932>
         {
          frequency = HSE_VALUE;
 800942c:	4b1c      	ldr	r3, [pc, #112]	; (80094a0 <HAL_RCCEx_GetPeriphCLKFreq+0x9a0>)
 800942e:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 8009430:	e02b      	b.n	800948a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8009432:	2300      	movs	r3, #0
 8009434:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8009436:	e028      	b.n	800948a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      case RCC_FDCANCLKSOURCE_PLL: /* PLL is the clock source for FDCAN */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8009438:	4b16      	ldr	r3, [pc, #88]	; (8009494 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800943a:	681b      	ldr	r3, [r3, #0]
 800943c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009440:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8009444:	d107      	bne.n	8009456 <HAL_RCCEx_GetPeriphCLKFreq+0x956>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8009446:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800944a:	4618      	mov	r0, r3
 800944c:	f000 fae8 	bl	8009a20 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8009450:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009452:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 8009454:	e019      	b.n	800948a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8009456:	2300      	movs	r3, #0
 8009458:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800945a:	e016      	b.n	800948a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is the clock source for FDCAN */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800945c:	4b0d      	ldr	r3, [pc, #52]	; (8009494 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800945e:	681b      	ldr	r3, [r3, #0]
 8009460:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8009464:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8009468:	d107      	bne.n	800947a <HAL_RCCEx_GetPeriphCLKFreq+0x97a>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800946a:	f107 0318 	add.w	r3, r7, #24
 800946e:	4618      	mov	r0, r3
 8009470:	f000 f82e 	bl	80094d0 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8009474:	69fb      	ldr	r3, [r7, #28]
 8009476:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 8009478:	e007      	b.n	800948a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800947a:	2300      	movs	r3, #0
 800947c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800947e:	e004      	b.n	800948a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      default :
        {
          frequency = 0;
 8009480:	2300      	movs	r3, #0
 8009482:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8009484:	e001      	b.n	800948a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      }
    }
  else
    {
      frequency = 0;
 8009486:	2300      	movs	r3, #0
 8009488:	63fb      	str	r3, [r7, #60]	; 0x3c
    }

  return frequency;
 800948a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 800948c:	4618      	mov	r0, r3
 800948e:	3740      	adds	r7, #64	; 0x40
 8009490:	46bd      	mov	sp, r7
 8009492:	bd80      	pop	{r7, pc}
 8009494:	58024400 	.word	0x58024400
 8009498:	03d09000 	.word	0x03d09000
 800949c:	003d0900 	.word	0x003d0900
 80094a0:	017d7840 	.word	0x017d7840

080094a4 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 80094a4:	b580      	push	{r7, lr}
 80094a6:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE)>> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 80094a8:	f7fe fb8e 	bl	8007bc8 <HAL_RCC_GetHCLKFreq>
 80094ac:	4602      	mov	r2, r0
 80094ae:	4b06      	ldr	r3, [pc, #24]	; (80094c8 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 80094b0:	6a1b      	ldr	r3, [r3, #32]
 80094b2:	091b      	lsrs	r3, r3, #4
 80094b4:	f003 0307 	and.w	r3, r3, #7
 80094b8:	4904      	ldr	r1, [pc, #16]	; (80094cc <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 80094ba:	5ccb      	ldrb	r3, [r1, r3]
 80094bc:	f003 031f 	and.w	r3, r3, #31
 80094c0:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE)>> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 80094c4:	4618      	mov	r0, r3
 80094c6:	bd80      	pop	{r7, pc}
 80094c8:	58024400 	.word	0x58024400
 80094cc:	080166e8 	.word	0x080166e8

080094d0 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef* PLL2_Clocks)
{
 80094d0:	b480      	push	{r7}
 80094d2:	b089      	sub	sp, #36	; 0x24
 80094d4:	af00      	add	r7, sp, #0
 80094d6:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80094d8:	4ba1      	ldr	r3, [pc, #644]	; (8009760 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80094da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80094dc:	f003 0303 	and.w	r3, r3, #3
 80094e0:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2)>> 12);
 80094e2:	4b9f      	ldr	r3, [pc, #636]	; (8009760 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80094e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80094e6:	0b1b      	lsrs	r3, r3, #12
 80094e8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80094ec:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 80094ee:	4b9c      	ldr	r3, [pc, #624]	; (8009760 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80094f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80094f2:	091b      	lsrs	r3, r3, #4
 80094f4:	f003 0301 	and.w	r3, r3, #1
 80094f8:	613b      	str	r3, [r7, #16]
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 80094fa:	4b99      	ldr	r3, [pc, #612]	; (8009760 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80094fc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80094fe:	08db      	lsrs	r3, r3, #3
 8009500:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8009504:	693a      	ldr	r2, [r7, #16]
 8009506:	fb02 f303 	mul.w	r3, r2, r3
 800950a:	ee07 3a90 	vmov	s15, r3
 800950e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009512:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 8009516:	697b      	ldr	r3, [r7, #20]
 8009518:	2b00      	cmp	r3, #0
 800951a:	f000 8111 	beq.w	8009740 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 800951e:	69bb      	ldr	r3, [r7, #24]
 8009520:	2b02      	cmp	r3, #2
 8009522:	f000 8083 	beq.w	800962c <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 8009526:	69bb      	ldr	r3, [r7, #24]
 8009528:	2b02      	cmp	r3, #2
 800952a:	f200 80a1 	bhi.w	8009670 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 800952e:	69bb      	ldr	r3, [r7, #24]
 8009530:	2b00      	cmp	r3, #0
 8009532:	d003      	beq.n	800953c <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 8009534:	69bb      	ldr	r3, [r7, #24]
 8009536:	2b01      	cmp	r3, #1
 8009538:	d056      	beq.n	80095e8 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 800953a:	e099      	b.n	8009670 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800953c:	4b88      	ldr	r3, [pc, #544]	; (8009760 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800953e:	681b      	ldr	r3, [r3, #0]
 8009540:	f003 0320 	and.w	r3, r3, #32
 8009544:	2b00      	cmp	r3, #0
 8009546:	d02d      	beq.n	80095a4 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8009548:	4b85      	ldr	r3, [pc, #532]	; (8009760 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800954a:	681b      	ldr	r3, [r3, #0]
 800954c:	08db      	lsrs	r3, r3, #3
 800954e:	f003 0303 	and.w	r3, r3, #3
 8009552:	4a84      	ldr	r2, [pc, #528]	; (8009764 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 8009554:	fa22 f303 	lsr.w	r3, r2, r3
 8009558:	60bb      	str	r3, [r7, #8]
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800955a:	68bb      	ldr	r3, [r7, #8]
 800955c:	ee07 3a90 	vmov	s15, r3
 8009560:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009564:	697b      	ldr	r3, [r7, #20]
 8009566:	ee07 3a90 	vmov	s15, r3
 800956a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800956e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009572:	4b7b      	ldr	r3, [pc, #492]	; (8009760 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009574:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009576:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800957a:	ee07 3a90 	vmov	s15, r3
 800957e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009582:	ed97 6a03 	vldr	s12, [r7, #12]
 8009586:	eddf 5a78 	vldr	s11, [pc, #480]	; 8009768 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800958a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800958e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009592:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009596:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800959a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800959e:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
      }
      break;
 80095a2:	e087      	b.n	80096b4 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 80095a4:	697b      	ldr	r3, [r7, #20]
 80095a6:	ee07 3a90 	vmov	s15, r3
 80095aa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80095ae:	eddf 6a6f 	vldr	s13, [pc, #444]	; 800976c <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 80095b2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80095b6:	4b6a      	ldr	r3, [pc, #424]	; (8009760 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80095b8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80095ba:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80095be:	ee07 3a90 	vmov	s15, r3
 80095c2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80095c6:	ed97 6a03 	vldr	s12, [r7, #12]
 80095ca:	eddf 5a67 	vldr	s11, [pc, #412]	; 8009768 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80095ce:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80095d2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80095d6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80095da:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80095de:	ee67 7a27 	vmul.f32	s15, s14, s15
 80095e2:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80095e6:	e065      	b.n	80096b4 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 80095e8:	697b      	ldr	r3, [r7, #20]
 80095ea:	ee07 3a90 	vmov	s15, r3
 80095ee:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80095f2:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8009770 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 80095f6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80095fa:	4b59      	ldr	r3, [pc, #356]	; (8009760 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80095fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80095fe:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009602:	ee07 3a90 	vmov	s15, r3
 8009606:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800960a:	ed97 6a03 	vldr	s12, [r7, #12]
 800960e:	eddf 5a56 	vldr	s11, [pc, #344]	; 8009768 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8009612:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009616:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800961a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800961e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009622:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009626:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800962a:	e043      	b.n	80096b4 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800962c:	697b      	ldr	r3, [r7, #20]
 800962e:	ee07 3a90 	vmov	s15, r3
 8009632:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009636:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8009774 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 800963a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800963e:	4b48      	ldr	r3, [pc, #288]	; (8009760 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009640:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009642:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009646:	ee07 3a90 	vmov	s15, r3
 800964a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800964e:	ed97 6a03 	vldr	s12, [r7, #12]
 8009652:	eddf 5a45 	vldr	s11, [pc, #276]	; 8009768 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8009656:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800965a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800965e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009662:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009666:	ee67 7a27 	vmul.f32	s15, s14, s15
 800966a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800966e:	e021      	b.n	80096b4 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    default:
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8009670:	697b      	ldr	r3, [r7, #20]
 8009672:	ee07 3a90 	vmov	s15, r3
 8009676:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800967a:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8009770 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800967e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009682:	4b37      	ldr	r3, [pc, #220]	; (8009760 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009684:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009686:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800968a:	ee07 3a90 	vmov	s15, r3
 800968e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009692:	ed97 6a03 	vldr	s12, [r7, #12]
 8009696:	eddf 5a34 	vldr	s11, [pc, #208]	; 8009768 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800969a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800969e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80096a2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80096a6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80096aa:	ee67 7a27 	vmul.f32	s15, s14, s15
 80096ae:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80096b2:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >>9)  + (float_t)1 )) ;
 80096b4:	4b2a      	ldr	r3, [pc, #168]	; (8009760 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80096b6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80096b8:	0a5b      	lsrs	r3, r3, #9
 80096ba:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80096be:	ee07 3a90 	vmov	s15, r3
 80096c2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80096c6:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80096ca:	ee37 7a87 	vadd.f32	s14, s15, s14
 80096ce:	edd7 6a07 	vldr	s13, [r7, #28]
 80096d2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80096d6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80096da:	ee17 2a90 	vmov	r2, s15
 80096de:	687b      	ldr	r3, [r7, #4]
 80096e0:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >>16) + (float_t)1 )) ;
 80096e2:	4b1f      	ldr	r3, [pc, #124]	; (8009760 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80096e4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80096e6:	0c1b      	lsrs	r3, r3, #16
 80096e8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80096ec:	ee07 3a90 	vmov	s15, r3
 80096f0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80096f4:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80096f8:	ee37 7a87 	vadd.f32	s14, s15, s14
 80096fc:	edd7 6a07 	vldr	s13, [r7, #28]
 8009700:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009704:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009708:	ee17 2a90 	vmov	r2, s15
 800970c:	687b      	ldr	r3, [r7, #4]
 800970e:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >>24) + (float_t)1 )) ;
 8009710:	4b13      	ldr	r3, [pc, #76]	; (8009760 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009712:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009714:	0e1b      	lsrs	r3, r3, #24
 8009716:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800971a:	ee07 3a90 	vmov	s15, r3
 800971e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009722:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8009726:	ee37 7a87 	vadd.f32	s14, s15, s14
 800972a:	edd7 6a07 	vldr	s13, [r7, #28]
 800972e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009732:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009736:	ee17 2a90 	vmov	r2, s15
 800973a:	687b      	ldr	r3, [r7, #4]
 800973c:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 800973e:	e008      	b.n	8009752 <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8009740:	687b      	ldr	r3, [r7, #4]
 8009742:	2200      	movs	r2, #0
 8009744:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8009746:	687b      	ldr	r3, [r7, #4]
 8009748:	2200      	movs	r2, #0
 800974a:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 800974c:	687b      	ldr	r3, [r7, #4]
 800974e:	2200      	movs	r2, #0
 8009750:	609a      	str	r2, [r3, #8]
}
 8009752:	bf00      	nop
 8009754:	3724      	adds	r7, #36	; 0x24
 8009756:	46bd      	mov	sp, r7
 8009758:	f85d 7b04 	ldr.w	r7, [sp], #4
 800975c:	4770      	bx	lr
 800975e:	bf00      	nop
 8009760:	58024400 	.word	0x58024400
 8009764:	03d09000 	.word	0x03d09000
 8009768:	46000000 	.word	0x46000000
 800976c:	4c742400 	.word	0x4c742400
 8009770:	4a742400 	.word	0x4a742400
 8009774:	4bbebc20 	.word	0x4bbebc20

08009778 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef* PLL3_Clocks)
{
 8009778:	b480      	push	{r7}
 800977a:	b089      	sub	sp, #36	; 0x24
 800977c:	af00      	add	r7, sp, #0
 800977e:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8009780:	4ba1      	ldr	r3, [pc, #644]	; (8009a08 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009782:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009784:	f003 0303 	and.w	r3, r3, #3
 8009788:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3)>> 20)  ;
 800978a:	4b9f      	ldr	r3, [pc, #636]	; (8009a08 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800978c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800978e:	0d1b      	lsrs	r3, r3, #20
 8009790:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8009794:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8009796:	4b9c      	ldr	r3, [pc, #624]	; (8009a08 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009798:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800979a:	0a1b      	lsrs	r3, r3, #8
 800979c:	f003 0301 	and.w	r3, r3, #1
 80097a0:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 80097a2:	4b99      	ldr	r3, [pc, #612]	; (8009a08 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80097a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80097a6:	08db      	lsrs	r3, r3, #3
 80097a8:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80097ac:	693a      	ldr	r2, [r7, #16]
 80097ae:	fb02 f303 	mul.w	r3, r2, r3
 80097b2:	ee07 3a90 	vmov	s15, r3
 80097b6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80097ba:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 80097be:	697b      	ldr	r3, [r7, #20]
 80097c0:	2b00      	cmp	r3, #0
 80097c2:	f000 8111 	beq.w	80099e8 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 80097c6:	69bb      	ldr	r3, [r7, #24]
 80097c8:	2b02      	cmp	r3, #2
 80097ca:	f000 8083 	beq.w	80098d4 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 80097ce:	69bb      	ldr	r3, [r7, #24]
 80097d0:	2b02      	cmp	r3, #2
 80097d2:	f200 80a1 	bhi.w	8009918 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 80097d6:	69bb      	ldr	r3, [r7, #24]
 80097d8:	2b00      	cmp	r3, #0
 80097da:	d003      	beq.n	80097e4 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 80097dc:	69bb      	ldr	r3, [r7, #24]
 80097de:	2b01      	cmp	r3, #1
 80097e0:	d056      	beq.n	8009890 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 80097e2:	e099      	b.n	8009918 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80097e4:	4b88      	ldr	r3, [pc, #544]	; (8009a08 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80097e6:	681b      	ldr	r3, [r3, #0]
 80097e8:	f003 0320 	and.w	r3, r3, #32
 80097ec:	2b00      	cmp	r3, #0
 80097ee:	d02d      	beq.n	800984c <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80097f0:	4b85      	ldr	r3, [pc, #532]	; (8009a08 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80097f2:	681b      	ldr	r3, [r3, #0]
 80097f4:	08db      	lsrs	r3, r3, #3
 80097f6:	f003 0303 	and.w	r3, r3, #3
 80097fa:	4a84      	ldr	r2, [pc, #528]	; (8009a0c <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 80097fc:	fa22 f303 	lsr.w	r3, r2, r3
 8009800:	60bb      	str	r3, [r7, #8]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8009802:	68bb      	ldr	r3, [r7, #8]
 8009804:	ee07 3a90 	vmov	s15, r3
 8009808:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800980c:	697b      	ldr	r3, [r7, #20]
 800980e:	ee07 3a90 	vmov	s15, r3
 8009812:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009816:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800981a:	4b7b      	ldr	r3, [pc, #492]	; (8009a08 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800981c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800981e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009822:	ee07 3a90 	vmov	s15, r3
 8009826:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800982a:	ed97 6a03 	vldr	s12, [r7, #12]
 800982e:	eddf 5a78 	vldr	s11, [pc, #480]	; 8009a10 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8009832:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009836:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800983a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800983e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009842:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009846:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
      }
      break;
 800984a:	e087      	b.n	800995c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800984c:	697b      	ldr	r3, [r7, #20]
 800984e:	ee07 3a90 	vmov	s15, r3
 8009852:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009856:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8009a14 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 800985a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800985e:	4b6a      	ldr	r3, [pc, #424]	; (8009a08 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009860:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009862:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009866:	ee07 3a90 	vmov	s15, r3
 800986a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800986e:	ed97 6a03 	vldr	s12, [r7, #12]
 8009872:	eddf 5a67 	vldr	s11, [pc, #412]	; 8009a10 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8009876:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800987a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800987e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009882:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009886:	ee67 7a27 	vmul.f32	s15, s14, s15
 800988a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800988e:	e065      	b.n	800995c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8009890:	697b      	ldr	r3, [r7, #20]
 8009892:	ee07 3a90 	vmov	s15, r3
 8009896:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800989a:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8009a18 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800989e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80098a2:	4b59      	ldr	r3, [pc, #356]	; (8009a08 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80098a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80098a6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80098aa:	ee07 3a90 	vmov	s15, r3
 80098ae:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80098b2:	ed97 6a03 	vldr	s12, [r7, #12]
 80098b6:	eddf 5a56 	vldr	s11, [pc, #344]	; 8009a10 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80098ba:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80098be:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80098c2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80098c6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80098ca:	ee67 7a27 	vmul.f32	s15, s14, s15
 80098ce:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80098d2:	e043      	b.n	800995c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 80098d4:	697b      	ldr	r3, [r7, #20]
 80098d6:	ee07 3a90 	vmov	s15, r3
 80098da:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80098de:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8009a1c <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 80098e2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80098e6:	4b48      	ldr	r3, [pc, #288]	; (8009a08 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80098e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80098ea:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80098ee:	ee07 3a90 	vmov	s15, r3
 80098f2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80098f6:	ed97 6a03 	vldr	s12, [r7, #12]
 80098fa:	eddf 5a45 	vldr	s11, [pc, #276]	; 8009a10 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80098fe:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009902:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009906:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800990a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800990e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009912:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8009916:	e021      	b.n	800995c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    default:
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8009918:	697b      	ldr	r3, [r7, #20]
 800991a:	ee07 3a90 	vmov	s15, r3
 800991e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009922:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8009a18 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8009926:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800992a:	4b37      	ldr	r3, [pc, #220]	; (8009a08 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800992c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800992e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009932:	ee07 3a90 	vmov	s15, r3
 8009936:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800993a:	ed97 6a03 	vldr	s12, [r7, #12]
 800993e:	eddf 5a34 	vldr	s11, [pc, #208]	; 8009a10 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8009942:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009946:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800994a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800994e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009952:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009956:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800995a:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >>9)  + (float_t)1 )) ;
 800995c:	4b2a      	ldr	r3, [pc, #168]	; (8009a08 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800995e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009960:	0a5b      	lsrs	r3, r3, #9
 8009962:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009966:	ee07 3a90 	vmov	s15, r3
 800996a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800996e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8009972:	ee37 7a87 	vadd.f32	s14, s15, s14
 8009976:	edd7 6a07 	vldr	s13, [r7, #28]
 800997a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800997e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009982:	ee17 2a90 	vmov	r2, s15
 8009986:	687b      	ldr	r3, [r7, #4]
 8009988:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >>16) + (float_t)1 )) ;
 800998a:	4b1f      	ldr	r3, [pc, #124]	; (8009a08 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800998c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800998e:	0c1b      	lsrs	r3, r3, #16
 8009990:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009994:	ee07 3a90 	vmov	s15, r3
 8009998:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800999c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80099a0:	ee37 7a87 	vadd.f32	s14, s15, s14
 80099a4:	edd7 6a07 	vldr	s13, [r7, #28]
 80099a8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80099ac:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80099b0:	ee17 2a90 	vmov	r2, s15
 80099b4:	687b      	ldr	r3, [r7, #4]
 80099b6:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >>24) + (float_t)1 )) ;
 80099b8:	4b13      	ldr	r3, [pc, #76]	; (8009a08 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80099ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80099bc:	0e1b      	lsrs	r3, r3, #24
 80099be:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80099c2:	ee07 3a90 	vmov	s15, r3
 80099c6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80099ca:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80099ce:	ee37 7a87 	vadd.f32	s14, s15, s14
 80099d2:	edd7 6a07 	vldr	s13, [r7, #28]
 80099d6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80099da:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80099de:	ee17 2a90 	vmov	r2, s15
 80099e2:	687b      	ldr	r3, [r7, #4]
 80099e4:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 80099e6:	e008      	b.n	80099fa <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 80099e8:	687b      	ldr	r3, [r7, #4]
 80099ea:	2200      	movs	r2, #0
 80099ec:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 80099ee:	687b      	ldr	r3, [r7, #4]
 80099f0:	2200      	movs	r2, #0
 80099f2:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 80099f4:	687b      	ldr	r3, [r7, #4]
 80099f6:	2200      	movs	r2, #0
 80099f8:	609a      	str	r2, [r3, #8]
}
 80099fa:	bf00      	nop
 80099fc:	3724      	adds	r7, #36	; 0x24
 80099fe:	46bd      	mov	sp, r7
 8009a00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a04:	4770      	bx	lr
 8009a06:	bf00      	nop
 8009a08:	58024400 	.word	0x58024400
 8009a0c:	03d09000 	.word	0x03d09000
 8009a10:	46000000 	.word	0x46000000
 8009a14:	4c742400 	.word	0x4c742400
 8009a18:	4a742400 	.word	0x4a742400
 8009a1c:	4bbebc20 	.word	0x4bbebc20

08009a20 <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef* PLL1_Clocks)
{
 8009a20:	b480      	push	{r7}
 8009a22:	b089      	sub	sp, #36	; 0x24
 8009a24:	af00      	add	r7, sp, #0
 8009a26:	6078      	str	r0, [r7, #4]
  uint32_t pllsource, pll1m, pll1fracen, hsivalue;
  float_t fracn1, pll1vco;

  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8009a28:	4ba0      	ldr	r3, [pc, #640]	; (8009cac <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8009a2a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009a2c:	f003 0303 	and.w	r3, r3, #3
 8009a30:	61bb      	str	r3, [r7, #24]
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4);
 8009a32:	4b9e      	ldr	r3, [pc, #632]	; (8009cac <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8009a34:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009a36:	091b      	lsrs	r3, r3, #4
 8009a38:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8009a3c:	617b      	str	r3, [r7, #20]
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 8009a3e:	4b9b      	ldr	r3, [pc, #620]	; (8009cac <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8009a40:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009a42:	f003 0301 	and.w	r3, r3, #1
 8009a46:	613b      	str	r3, [r7, #16]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 8009a48:	4b98      	ldr	r3, [pc, #608]	; (8009cac <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8009a4a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009a4c:	08db      	lsrs	r3, r3, #3
 8009a4e:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8009a52:	693a      	ldr	r2, [r7, #16]
 8009a54:	fb02 f303 	mul.w	r3, r2, r3
 8009a58:	ee07 3a90 	vmov	s15, r3
 8009a5c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009a60:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll1m != 0U)
 8009a64:	697b      	ldr	r3, [r7, #20]
 8009a66:	2b00      	cmp	r3, #0
 8009a68:	f000 8111 	beq.w	8009c8e <HAL_RCCEx_GetPLL1ClockFreq+0x26e>
  {
    switch (pllsource)
 8009a6c:	69bb      	ldr	r3, [r7, #24]
 8009a6e:	2b02      	cmp	r3, #2
 8009a70:	f000 8083 	beq.w	8009b7a <HAL_RCCEx_GetPLL1ClockFreq+0x15a>
 8009a74:	69bb      	ldr	r3, [r7, #24]
 8009a76:	2b02      	cmp	r3, #2
 8009a78:	f200 80a1 	bhi.w	8009bbe <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
 8009a7c:	69bb      	ldr	r3, [r7, #24]
 8009a7e:	2b00      	cmp	r3, #0
 8009a80:	d003      	beq.n	8009a8a <HAL_RCCEx_GetPLL1ClockFreq+0x6a>
 8009a82:	69bb      	ldr	r3, [r7, #24]
 8009a84:	2b01      	cmp	r3, #1
 8009a86:	d056      	beq.n	8009b36 <HAL_RCCEx_GetPLL1ClockFreq+0x116>
 8009a88:	e099      	b.n	8009bbe <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8009a8a:	4b88      	ldr	r3, [pc, #544]	; (8009cac <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8009a8c:	681b      	ldr	r3, [r3, #0]
 8009a8e:	f003 0320 	and.w	r3, r3, #32
 8009a92:	2b00      	cmp	r3, #0
 8009a94:	d02d      	beq.n	8009af2 <HAL_RCCEx_GetPLL1ClockFreq+0xd2>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8009a96:	4b85      	ldr	r3, [pc, #532]	; (8009cac <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8009a98:	681b      	ldr	r3, [r3, #0]
 8009a9a:	08db      	lsrs	r3, r3, #3
 8009a9c:	f003 0303 	and.w	r3, r3, #3
 8009aa0:	4a83      	ldr	r2, [pc, #524]	; (8009cb0 <HAL_RCCEx_GetPLL1ClockFreq+0x290>)
 8009aa2:	fa22 f303 	lsr.w	r3, r2, r3
 8009aa6:	60bb      	str	r3, [r7, #8]
        pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8009aa8:	68bb      	ldr	r3, [r7, #8]
 8009aaa:	ee07 3a90 	vmov	s15, r3
 8009aae:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009ab2:	697b      	ldr	r3, [r7, #20]
 8009ab4:	ee07 3a90 	vmov	s15, r3
 8009ab8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009abc:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009ac0:	4b7a      	ldr	r3, [pc, #488]	; (8009cac <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8009ac2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009ac4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009ac8:	ee07 3a90 	vmov	s15, r3
 8009acc:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009ad0:	ed97 6a03 	vldr	s12, [r7, #12]
 8009ad4:	eddf 5a77 	vldr	s11, [pc, #476]	; 8009cb4 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8009ad8:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009adc:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009ae0:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009ae4:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009ae8:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009aec:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
      }
      break;
 8009af0:	e087      	b.n	8009c02 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8009af2:	697b      	ldr	r3, [r7, #20]
 8009af4:	ee07 3a90 	vmov	s15, r3
 8009af8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009afc:	eddf 6a6e 	vldr	s13, [pc, #440]	; 8009cb8 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 8009b00:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009b04:	4b69      	ldr	r3, [pc, #420]	; (8009cac <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8009b06:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009b08:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009b0c:	ee07 3a90 	vmov	s15, r3
 8009b10:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009b14:	ed97 6a03 	vldr	s12, [r7, #12]
 8009b18:	eddf 5a66 	vldr	s11, [pc, #408]	; 8009cb4 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8009b1c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009b20:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009b24:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009b28:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009b2c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009b30:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8009b34:	e065      	b.n	8009c02 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8009b36:	697b      	ldr	r3, [r7, #20]
 8009b38:	ee07 3a90 	vmov	s15, r3
 8009b3c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009b40:	eddf 6a5e 	vldr	s13, [pc, #376]	; 8009cbc <HAL_RCCEx_GetPLL1ClockFreq+0x29c>
 8009b44:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009b48:	4b58      	ldr	r3, [pc, #352]	; (8009cac <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8009b4a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009b4c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009b50:	ee07 3a90 	vmov	s15, r3
 8009b54:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009b58:	ed97 6a03 	vldr	s12, [r7, #12]
 8009b5c:	eddf 5a55 	vldr	s11, [pc, #340]	; 8009cb4 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8009b60:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009b64:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009b68:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009b6c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009b70:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009b74:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8009b78:	e043      	b.n	8009c02 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8009b7a:	697b      	ldr	r3, [r7, #20]
 8009b7c:	ee07 3a90 	vmov	s15, r3
 8009b80:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009b84:	eddf 6a4e 	vldr	s13, [pc, #312]	; 8009cc0 <HAL_RCCEx_GetPLL1ClockFreq+0x2a0>
 8009b88:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009b8c:	4b47      	ldr	r3, [pc, #284]	; (8009cac <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8009b8e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009b90:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009b94:	ee07 3a90 	vmov	s15, r3
 8009b98:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009b9c:	ed97 6a03 	vldr	s12, [r7, #12]
 8009ba0:	eddf 5a44 	vldr	s11, [pc, #272]	; 8009cb4 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8009ba4:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009ba8:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009bac:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009bb0:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009bb4:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009bb8:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8009bbc:	e021      	b.n	8009c02 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

    default:
      pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8009bbe:	697b      	ldr	r3, [r7, #20]
 8009bc0:	ee07 3a90 	vmov	s15, r3
 8009bc4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009bc8:	eddf 6a3b 	vldr	s13, [pc, #236]	; 8009cb8 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 8009bcc:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009bd0:	4b36      	ldr	r3, [pc, #216]	; (8009cac <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8009bd2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009bd4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009bd8:	ee07 3a90 	vmov	s15, r3
 8009bdc:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009be0:	ed97 6a03 	vldr	s12, [r7, #12]
 8009be4:	eddf 5a33 	vldr	s11, [pc, #204]	; 8009cb4 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8009be8:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009bec:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009bf0:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009bf4:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009bf8:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009bfc:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8009c00:	bf00      	nop
    }

    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9)  + (float_t)1 )) ;
 8009c02:	4b2a      	ldr	r3, [pc, #168]	; (8009cac <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8009c04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009c06:	0a5b      	lsrs	r3, r3, #9
 8009c08:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009c0c:	ee07 3a90 	vmov	s15, r3
 8009c10:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009c14:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8009c18:	ee37 7a87 	vadd.f32	s14, s15, s14
 8009c1c:	edd7 6a07 	vldr	s13, [r7, #28]
 8009c20:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009c24:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009c28:	ee17 2a90 	vmov	r2, s15
 8009c2c:	687b      	ldr	r3, [r7, #4]
 8009c2e:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >>16) + (float_t)1 )) ;
 8009c30:	4b1e      	ldr	r3, [pc, #120]	; (8009cac <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8009c32:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009c34:	0c1b      	lsrs	r3, r3, #16
 8009c36:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009c3a:	ee07 3a90 	vmov	s15, r3
 8009c3e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009c42:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8009c46:	ee37 7a87 	vadd.f32	s14, s15, s14
 8009c4a:	edd7 6a07 	vldr	s13, [r7, #28]
 8009c4e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009c52:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009c56:	ee17 2a90 	vmov	r2, s15
 8009c5a:	687b      	ldr	r3, [r7, #4]
 8009c5c:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >>24) + (float_t)1 )) ;
 8009c5e:	4b13      	ldr	r3, [pc, #76]	; (8009cac <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8009c60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009c62:	0e1b      	lsrs	r3, r3, #24
 8009c64:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009c68:	ee07 3a90 	vmov	s15, r3
 8009c6c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009c70:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8009c74:	ee37 7a87 	vadd.f32	s14, s15, s14
 8009c78:	edd7 6a07 	vldr	s13, [r7, #28]
 8009c7c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009c80:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009c84:	ee17 2a90 	vmov	r2, s15
 8009c88:	687b      	ldr	r3, [r7, #4]
 8009c8a:	609a      	str	r2, [r3, #8]
    PLL1_Clocks->PLL1_P_Frequency = 0U;
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 8009c8c:	e008      	b.n	8009ca0 <HAL_RCCEx_GetPLL1ClockFreq+0x280>
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 8009c8e:	687b      	ldr	r3, [r7, #4]
 8009c90:	2200      	movs	r2, #0
 8009c92:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 8009c94:	687b      	ldr	r3, [r7, #4]
 8009c96:	2200      	movs	r2, #0
 8009c98:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 8009c9a:	687b      	ldr	r3, [r7, #4]
 8009c9c:	2200      	movs	r2, #0
 8009c9e:	609a      	str	r2, [r3, #8]
}
 8009ca0:	bf00      	nop
 8009ca2:	3724      	adds	r7, #36	; 0x24
 8009ca4:	46bd      	mov	sp, r7
 8009ca6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009caa:	4770      	bx	lr
 8009cac:	58024400 	.word	0x58024400
 8009cb0:	03d09000 	.word	0x03d09000
 8009cb4:	46000000 	.word	0x46000000
 8009cb8:	4c742400 	.word	0x4c742400
 8009cbc:	4a742400 	.word	0x4a742400
 8009cc0:	4bbebc20 	.word	0x4bbebc20

08009cc4 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8009cc4:	b580      	push	{r7, lr}
 8009cc6:	b084      	sub	sp, #16
 8009cc8:	af00      	add	r7, sp, #0
 8009cca:	6078      	str	r0, [r7, #4]
 8009ccc:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8009cce:	2300      	movs	r3, #0
 8009cd0:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8009cd2:	4b53      	ldr	r3, [pc, #332]	; (8009e20 <RCCEx_PLL2_Config+0x15c>)
 8009cd4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009cd6:	f003 0303 	and.w	r3, r3, #3
 8009cda:	2b03      	cmp	r3, #3
 8009cdc:	d101      	bne.n	8009ce2 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 8009cde:	2301      	movs	r3, #1
 8009ce0:	e099      	b.n	8009e16 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8009ce2:	4b4f      	ldr	r3, [pc, #316]	; (8009e20 <RCCEx_PLL2_Config+0x15c>)
 8009ce4:	681b      	ldr	r3, [r3, #0]
 8009ce6:	4a4e      	ldr	r2, [pc, #312]	; (8009e20 <RCCEx_PLL2_Config+0x15c>)
 8009ce8:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8009cec:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8009cee:	f7f8 fb59 	bl	80023a4 <HAL_GetTick>
 8009cf2:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8009cf4:	e008      	b.n	8009d08 <RCCEx_PLL2_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 8009cf6:	f7f8 fb55 	bl	80023a4 <HAL_GetTick>
 8009cfa:	4602      	mov	r2, r0
 8009cfc:	68bb      	ldr	r3, [r7, #8]
 8009cfe:	1ad3      	subs	r3, r2, r3
 8009d00:	2b02      	cmp	r3, #2
 8009d02:	d901      	bls.n	8009d08 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8009d04:	2303      	movs	r3, #3
 8009d06:	e086      	b.n	8009e16 <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8009d08:	4b45      	ldr	r3, [pc, #276]	; (8009e20 <RCCEx_PLL2_Config+0x15c>)
 8009d0a:	681b      	ldr	r3, [r3, #0]
 8009d0c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8009d10:	2b00      	cmp	r3, #0
 8009d12:	d1f0      	bne.n	8009cf6 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8009d14:	4b42      	ldr	r3, [pc, #264]	; (8009e20 <RCCEx_PLL2_Config+0x15c>)
 8009d16:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009d18:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8009d1c:	687b      	ldr	r3, [r7, #4]
 8009d1e:	681b      	ldr	r3, [r3, #0]
 8009d20:	031b      	lsls	r3, r3, #12
 8009d22:	493f      	ldr	r1, [pc, #252]	; (8009e20 <RCCEx_PLL2_Config+0x15c>)
 8009d24:	4313      	orrs	r3, r2
 8009d26:	628b      	str	r3, [r1, #40]	; 0x28
 8009d28:	687b      	ldr	r3, [r7, #4]
 8009d2a:	685b      	ldr	r3, [r3, #4]
 8009d2c:	3b01      	subs	r3, #1
 8009d2e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8009d32:	687b      	ldr	r3, [r7, #4]
 8009d34:	689b      	ldr	r3, [r3, #8]
 8009d36:	3b01      	subs	r3, #1
 8009d38:	025b      	lsls	r3, r3, #9
 8009d3a:	b29b      	uxth	r3, r3
 8009d3c:	431a      	orrs	r2, r3
 8009d3e:	687b      	ldr	r3, [r7, #4]
 8009d40:	68db      	ldr	r3, [r3, #12]
 8009d42:	3b01      	subs	r3, #1
 8009d44:	041b      	lsls	r3, r3, #16
 8009d46:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8009d4a:	431a      	orrs	r2, r3
 8009d4c:	687b      	ldr	r3, [r7, #4]
 8009d4e:	691b      	ldr	r3, [r3, #16]
 8009d50:	3b01      	subs	r3, #1
 8009d52:	061b      	lsls	r3, r3, #24
 8009d54:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8009d58:	4931      	ldr	r1, [pc, #196]	; (8009e20 <RCCEx_PLL2_Config+0x15c>)
 8009d5a:	4313      	orrs	r3, r2
 8009d5c:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8009d5e:	4b30      	ldr	r3, [pc, #192]	; (8009e20 <RCCEx_PLL2_Config+0x15c>)
 8009d60:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009d62:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8009d66:	687b      	ldr	r3, [r7, #4]
 8009d68:	695b      	ldr	r3, [r3, #20]
 8009d6a:	492d      	ldr	r1, [pc, #180]	; (8009e20 <RCCEx_PLL2_Config+0x15c>)
 8009d6c:	4313      	orrs	r3, r2
 8009d6e:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8009d70:	4b2b      	ldr	r3, [pc, #172]	; (8009e20 <RCCEx_PLL2_Config+0x15c>)
 8009d72:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009d74:	f023 0220 	bic.w	r2, r3, #32
 8009d78:	687b      	ldr	r3, [r7, #4]
 8009d7a:	699b      	ldr	r3, [r3, #24]
 8009d7c:	4928      	ldr	r1, [pc, #160]	; (8009e20 <RCCEx_PLL2_Config+0x15c>)
 8009d7e:	4313      	orrs	r3, r2
 8009d80:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8009d82:	4b27      	ldr	r3, [pc, #156]	; (8009e20 <RCCEx_PLL2_Config+0x15c>)
 8009d84:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009d86:	4a26      	ldr	r2, [pc, #152]	; (8009e20 <RCCEx_PLL2_Config+0x15c>)
 8009d88:	f023 0310 	bic.w	r3, r3, #16
 8009d8c:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8009d8e:	4b24      	ldr	r3, [pc, #144]	; (8009e20 <RCCEx_PLL2_Config+0x15c>)
 8009d90:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8009d92:	4b24      	ldr	r3, [pc, #144]	; (8009e24 <RCCEx_PLL2_Config+0x160>)
 8009d94:	4013      	ands	r3, r2
 8009d96:	687a      	ldr	r2, [r7, #4]
 8009d98:	69d2      	ldr	r2, [r2, #28]
 8009d9a:	00d2      	lsls	r2, r2, #3
 8009d9c:	4920      	ldr	r1, [pc, #128]	; (8009e20 <RCCEx_PLL2_Config+0x15c>)
 8009d9e:	4313      	orrs	r3, r2
 8009da0:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8009da2:	4b1f      	ldr	r3, [pc, #124]	; (8009e20 <RCCEx_PLL2_Config+0x15c>)
 8009da4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009da6:	4a1e      	ldr	r2, [pc, #120]	; (8009e20 <RCCEx_PLL2_Config+0x15c>)
 8009da8:	f043 0310 	orr.w	r3, r3, #16
 8009dac:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 8009dae:	683b      	ldr	r3, [r7, #0]
 8009db0:	2b00      	cmp	r3, #0
 8009db2:	d106      	bne.n	8009dc2 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8009db4:	4b1a      	ldr	r3, [pc, #104]	; (8009e20 <RCCEx_PLL2_Config+0x15c>)
 8009db6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009db8:	4a19      	ldr	r2, [pc, #100]	; (8009e20 <RCCEx_PLL2_Config+0x15c>)
 8009dba:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8009dbe:	62d3      	str	r3, [r2, #44]	; 0x2c
 8009dc0:	e00f      	b.n	8009de2 <RCCEx_PLL2_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 8009dc2:	683b      	ldr	r3, [r7, #0]
 8009dc4:	2b01      	cmp	r3, #1
 8009dc6:	d106      	bne.n	8009dd6 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8009dc8:	4b15      	ldr	r3, [pc, #84]	; (8009e20 <RCCEx_PLL2_Config+0x15c>)
 8009dca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009dcc:	4a14      	ldr	r2, [pc, #80]	; (8009e20 <RCCEx_PLL2_Config+0x15c>)
 8009dce:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8009dd2:	62d3      	str	r3, [r2, #44]	; 0x2c
 8009dd4:	e005      	b.n	8009de2 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8009dd6:	4b12      	ldr	r3, [pc, #72]	; (8009e20 <RCCEx_PLL2_Config+0x15c>)
 8009dd8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009dda:	4a11      	ldr	r2, [pc, #68]	; (8009e20 <RCCEx_PLL2_Config+0x15c>)
 8009ddc:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8009de0:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8009de2:	4b0f      	ldr	r3, [pc, #60]	; (8009e20 <RCCEx_PLL2_Config+0x15c>)
 8009de4:	681b      	ldr	r3, [r3, #0]
 8009de6:	4a0e      	ldr	r2, [pc, #56]	; (8009e20 <RCCEx_PLL2_Config+0x15c>)
 8009de8:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8009dec:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8009dee:	f7f8 fad9 	bl	80023a4 <HAL_GetTick>
 8009df2:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8009df4:	e008      	b.n	8009e08 <RCCEx_PLL2_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 8009df6:	f7f8 fad5 	bl	80023a4 <HAL_GetTick>
 8009dfa:	4602      	mov	r2, r0
 8009dfc:	68bb      	ldr	r3, [r7, #8]
 8009dfe:	1ad3      	subs	r3, r2, r3
 8009e00:	2b02      	cmp	r3, #2
 8009e02:	d901      	bls.n	8009e08 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8009e04:	2303      	movs	r3, #3
 8009e06:	e006      	b.n	8009e16 <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8009e08:	4b05      	ldr	r3, [pc, #20]	; (8009e20 <RCCEx_PLL2_Config+0x15c>)
 8009e0a:	681b      	ldr	r3, [r3, #0]
 8009e0c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8009e10:	2b00      	cmp	r3, #0
 8009e12:	d0f0      	beq.n	8009df6 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8009e14:	7bfb      	ldrb	r3, [r7, #15]
}
 8009e16:	4618      	mov	r0, r3
 8009e18:	3710      	adds	r7, #16
 8009e1a:	46bd      	mov	sp, r7
 8009e1c:	bd80      	pop	{r7, pc}
 8009e1e:	bf00      	nop
 8009e20:	58024400 	.word	0x58024400
 8009e24:	ffff0007 	.word	0xffff0007

08009e28 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8009e28:	b580      	push	{r7, lr}
 8009e2a:	b084      	sub	sp, #16
 8009e2c:	af00      	add	r7, sp, #0
 8009e2e:	6078      	str	r0, [r7, #4]
 8009e30:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8009e32:	2300      	movs	r3, #0
 8009e34:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8009e36:	4b53      	ldr	r3, [pc, #332]	; (8009f84 <RCCEx_PLL3_Config+0x15c>)
 8009e38:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009e3a:	f003 0303 	and.w	r3, r3, #3
 8009e3e:	2b03      	cmp	r3, #3
 8009e40:	d101      	bne.n	8009e46 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 8009e42:	2301      	movs	r3, #1
 8009e44:	e099      	b.n	8009f7a <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8009e46:	4b4f      	ldr	r3, [pc, #316]	; (8009f84 <RCCEx_PLL3_Config+0x15c>)
 8009e48:	681b      	ldr	r3, [r3, #0]
 8009e4a:	4a4e      	ldr	r2, [pc, #312]	; (8009f84 <RCCEx_PLL3_Config+0x15c>)
 8009e4c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8009e50:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8009e52:	f7f8 faa7 	bl	80023a4 <HAL_GetTick>
 8009e56:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8009e58:	e008      	b.n	8009e6c <RCCEx_PLL3_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 8009e5a:	f7f8 faa3 	bl	80023a4 <HAL_GetTick>
 8009e5e:	4602      	mov	r2, r0
 8009e60:	68bb      	ldr	r3, [r7, #8]
 8009e62:	1ad3      	subs	r3, r2, r3
 8009e64:	2b02      	cmp	r3, #2
 8009e66:	d901      	bls.n	8009e6c <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8009e68:	2303      	movs	r3, #3
 8009e6a:	e086      	b.n	8009f7a <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8009e6c:	4b45      	ldr	r3, [pc, #276]	; (8009f84 <RCCEx_PLL3_Config+0x15c>)
 8009e6e:	681b      	ldr	r3, [r3, #0]
 8009e70:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8009e74:	2b00      	cmp	r3, #0
 8009e76:	d1f0      	bne.n	8009e5a <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8009e78:	4b42      	ldr	r3, [pc, #264]	; (8009f84 <RCCEx_PLL3_Config+0x15c>)
 8009e7a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009e7c:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 8009e80:	687b      	ldr	r3, [r7, #4]
 8009e82:	681b      	ldr	r3, [r3, #0]
 8009e84:	051b      	lsls	r3, r3, #20
 8009e86:	493f      	ldr	r1, [pc, #252]	; (8009f84 <RCCEx_PLL3_Config+0x15c>)
 8009e88:	4313      	orrs	r3, r2
 8009e8a:	628b      	str	r3, [r1, #40]	; 0x28
 8009e8c:	687b      	ldr	r3, [r7, #4]
 8009e8e:	685b      	ldr	r3, [r3, #4]
 8009e90:	3b01      	subs	r3, #1
 8009e92:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8009e96:	687b      	ldr	r3, [r7, #4]
 8009e98:	689b      	ldr	r3, [r3, #8]
 8009e9a:	3b01      	subs	r3, #1
 8009e9c:	025b      	lsls	r3, r3, #9
 8009e9e:	b29b      	uxth	r3, r3
 8009ea0:	431a      	orrs	r2, r3
 8009ea2:	687b      	ldr	r3, [r7, #4]
 8009ea4:	68db      	ldr	r3, [r3, #12]
 8009ea6:	3b01      	subs	r3, #1
 8009ea8:	041b      	lsls	r3, r3, #16
 8009eaa:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8009eae:	431a      	orrs	r2, r3
 8009eb0:	687b      	ldr	r3, [r7, #4]
 8009eb2:	691b      	ldr	r3, [r3, #16]
 8009eb4:	3b01      	subs	r3, #1
 8009eb6:	061b      	lsls	r3, r3, #24
 8009eb8:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8009ebc:	4931      	ldr	r1, [pc, #196]	; (8009f84 <RCCEx_PLL3_Config+0x15c>)
 8009ebe:	4313      	orrs	r3, r2
 8009ec0:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8009ec2:	4b30      	ldr	r3, [pc, #192]	; (8009f84 <RCCEx_PLL3_Config+0x15c>)
 8009ec4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009ec6:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8009eca:	687b      	ldr	r3, [r7, #4]
 8009ecc:	695b      	ldr	r3, [r3, #20]
 8009ece:	492d      	ldr	r1, [pc, #180]	; (8009f84 <RCCEx_PLL3_Config+0x15c>)
 8009ed0:	4313      	orrs	r3, r2
 8009ed2:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8009ed4:	4b2b      	ldr	r3, [pc, #172]	; (8009f84 <RCCEx_PLL3_Config+0x15c>)
 8009ed6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009ed8:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8009edc:	687b      	ldr	r3, [r7, #4]
 8009ede:	699b      	ldr	r3, [r3, #24]
 8009ee0:	4928      	ldr	r1, [pc, #160]	; (8009f84 <RCCEx_PLL3_Config+0x15c>)
 8009ee2:	4313      	orrs	r3, r2
 8009ee4:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8009ee6:	4b27      	ldr	r3, [pc, #156]	; (8009f84 <RCCEx_PLL3_Config+0x15c>)
 8009ee8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009eea:	4a26      	ldr	r2, [pc, #152]	; (8009f84 <RCCEx_PLL3_Config+0x15c>)
 8009eec:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8009ef0:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8009ef2:	4b24      	ldr	r3, [pc, #144]	; (8009f84 <RCCEx_PLL3_Config+0x15c>)
 8009ef4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8009ef6:	4b24      	ldr	r3, [pc, #144]	; (8009f88 <RCCEx_PLL3_Config+0x160>)
 8009ef8:	4013      	ands	r3, r2
 8009efa:	687a      	ldr	r2, [r7, #4]
 8009efc:	69d2      	ldr	r2, [r2, #28]
 8009efe:	00d2      	lsls	r2, r2, #3
 8009f00:	4920      	ldr	r1, [pc, #128]	; (8009f84 <RCCEx_PLL3_Config+0x15c>)
 8009f02:	4313      	orrs	r3, r2
 8009f04:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8009f06:	4b1f      	ldr	r3, [pc, #124]	; (8009f84 <RCCEx_PLL3_Config+0x15c>)
 8009f08:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009f0a:	4a1e      	ldr	r2, [pc, #120]	; (8009f84 <RCCEx_PLL3_Config+0x15c>)
 8009f0c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8009f10:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 8009f12:	683b      	ldr	r3, [r7, #0]
 8009f14:	2b00      	cmp	r3, #0
 8009f16:	d106      	bne.n	8009f26 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8009f18:	4b1a      	ldr	r3, [pc, #104]	; (8009f84 <RCCEx_PLL3_Config+0x15c>)
 8009f1a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009f1c:	4a19      	ldr	r2, [pc, #100]	; (8009f84 <RCCEx_PLL3_Config+0x15c>)
 8009f1e:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8009f22:	62d3      	str	r3, [r2, #44]	; 0x2c
 8009f24:	e00f      	b.n	8009f46 <RCCEx_PLL3_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 8009f26:	683b      	ldr	r3, [r7, #0]
 8009f28:	2b01      	cmp	r3, #1
 8009f2a:	d106      	bne.n	8009f3a <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8009f2c:	4b15      	ldr	r3, [pc, #84]	; (8009f84 <RCCEx_PLL3_Config+0x15c>)
 8009f2e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009f30:	4a14      	ldr	r2, [pc, #80]	; (8009f84 <RCCEx_PLL3_Config+0x15c>)
 8009f32:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8009f36:	62d3      	str	r3, [r2, #44]	; 0x2c
 8009f38:	e005      	b.n	8009f46 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8009f3a:	4b12      	ldr	r3, [pc, #72]	; (8009f84 <RCCEx_PLL3_Config+0x15c>)
 8009f3c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009f3e:	4a11      	ldr	r2, [pc, #68]	; (8009f84 <RCCEx_PLL3_Config+0x15c>)
 8009f40:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8009f44:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8009f46:	4b0f      	ldr	r3, [pc, #60]	; (8009f84 <RCCEx_PLL3_Config+0x15c>)
 8009f48:	681b      	ldr	r3, [r3, #0]
 8009f4a:	4a0e      	ldr	r2, [pc, #56]	; (8009f84 <RCCEx_PLL3_Config+0x15c>)
 8009f4c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8009f50:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8009f52:	f7f8 fa27 	bl	80023a4 <HAL_GetTick>
 8009f56:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8009f58:	e008      	b.n	8009f6c <RCCEx_PLL3_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 8009f5a:	f7f8 fa23 	bl	80023a4 <HAL_GetTick>
 8009f5e:	4602      	mov	r2, r0
 8009f60:	68bb      	ldr	r3, [r7, #8]
 8009f62:	1ad3      	subs	r3, r2, r3
 8009f64:	2b02      	cmp	r3, #2
 8009f66:	d901      	bls.n	8009f6c <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8009f68:	2303      	movs	r3, #3
 8009f6a:	e006      	b.n	8009f7a <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8009f6c:	4b05      	ldr	r3, [pc, #20]	; (8009f84 <RCCEx_PLL3_Config+0x15c>)
 8009f6e:	681b      	ldr	r3, [r3, #0]
 8009f70:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8009f74:	2b00      	cmp	r3, #0
 8009f76:	d0f0      	beq.n	8009f5a <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8009f78:	7bfb      	ldrb	r3, [r7, #15]
}
 8009f7a:	4618      	mov	r0, r3
 8009f7c:	3710      	adds	r7, #16
 8009f7e:	46bd      	mov	sp, r7
 8009f80:	bd80      	pop	{r7, pc}
 8009f82:	bf00      	nop
 8009f84:	58024400 	.word	0x58024400
 8009f88:	ffff0007 	.word	0xffff0007

08009f8c <HAL_SD_Init>:
            SD_HandleTypeDef and create the associated handle.
  * @param  hsd: Pointer to the SD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_Init(SD_HandleTypeDef *hsd)
{
 8009f8c:	b580      	push	{r7, lr}
 8009f8e:	b08a      	sub	sp, #40	; 0x28
 8009f90:	af00      	add	r7, sp, #0
 8009f92:	6078      	str	r0, [r7, #4]
  uint32_t speedgrade;
  uint32_t unitsize;
  uint32_t tickstart;

  /* Check the SD handle allocation */
  if (hsd == NULL)
 8009f94:	687b      	ldr	r3, [r7, #4]
 8009f96:	2b00      	cmp	r3, #0
 8009f98:	d101      	bne.n	8009f9e <HAL_SD_Init+0x12>
  {
    return HAL_ERROR;
 8009f9a:	2301      	movs	r3, #1
 8009f9c:	e075      	b.n	800a08a <HAL_SD_Init+0xfe>
  assert_param(IS_SDMMC_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
  assert_param(IS_SDMMC_BUS_WIDE(hsd->Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(hsd->Init.ClockDiv));

  if (hsd->State == HAL_SD_STATE_RESET)
 8009f9e:	687b      	ldr	r3, [r7, #4]
 8009fa0:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8009fa4:	b2db      	uxtb	r3, r3
 8009fa6:	2b00      	cmp	r3, #0
 8009fa8:	d105      	bne.n	8009fb6 <HAL_SD_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hsd->Lock = HAL_UNLOCKED;
 8009faa:	687b      	ldr	r3, [r7, #4]
 8009fac:	2200      	movs	r2, #0
 8009fae:	761a      	strb	r2, [r3, #24]

    /* Init the low level hardware */
    hsd->MspInitCallback(hsd);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SD_MspInit(hsd);
 8009fb0:	6878      	ldr	r0, [r7, #4]
 8009fb2:	f7f7 fcd9 	bl	8001968 <HAL_SD_MspInit>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
  }

  hsd->State = HAL_SD_STATE_BUSY;
 8009fb6:	687b      	ldr	r3, [r7, #4]
 8009fb8:	2203      	movs	r2, #3
 8009fba:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

  /* Initialize the Card parameters */
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 8009fbe:	6878      	ldr	r0, [r7, #4]
 8009fc0:	f000 f868 	bl	800a094 <HAL_SD_InitCard>
 8009fc4:	4603      	mov	r3, r0
 8009fc6:	2b00      	cmp	r3, #0
 8009fc8:	d001      	beq.n	8009fce <HAL_SD_Init+0x42>
  {
    return HAL_ERROR;
 8009fca:	2301      	movs	r3, #1
 8009fcc:	e05d      	b.n	800a08a <HAL_SD_Init+0xfe>
  }

  if (HAL_SD_GetCardStatus(hsd, &CardStatus) != HAL_OK)
 8009fce:	f107 0308 	add.w	r3, r7, #8
 8009fd2:	4619      	mov	r1, r3
 8009fd4:	6878      	ldr	r0, [r7, #4]
 8009fd6:	f000 fda5 	bl	800ab24 <HAL_SD_GetCardStatus>
 8009fda:	4603      	mov	r3, r0
 8009fdc:	2b00      	cmp	r3, #0
 8009fde:	d001      	beq.n	8009fe4 <HAL_SD_Init+0x58>
  {
    return HAL_ERROR;
 8009fe0:	2301      	movs	r3, #1
 8009fe2:	e052      	b.n	800a08a <HAL_SD_Init+0xfe>
  }
  /* Get Initial Card Speed from Card Status*/
  speedgrade = CardStatus.UhsSpeedGrade;
 8009fe4:	7e3b      	ldrb	r3, [r7, #24]
 8009fe6:	b2db      	uxtb	r3, r3
 8009fe8:	627b      	str	r3, [r7, #36]	; 0x24
  unitsize = CardStatus.UhsAllocationUnitSize;
 8009fea:	7e7b      	ldrb	r3, [r7, #25]
 8009fec:	b2db      	uxtb	r3, r3
 8009fee:	623b      	str	r3, [r7, #32]
  if ((hsd->SdCard.CardType == CARD_SDHC_SDXC) && ((speedgrade != 0U) || (unitsize != 0U)))
 8009ff0:	687b      	ldr	r3, [r7, #4]
 8009ff2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009ff4:	2b01      	cmp	r3, #1
 8009ff6:	d10a      	bne.n	800a00e <HAL_SD_Init+0x82>
 8009ff8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009ffa:	2b00      	cmp	r3, #0
 8009ffc:	d102      	bne.n	800a004 <HAL_SD_Init+0x78>
 8009ffe:	6a3b      	ldr	r3, [r7, #32]
 800a000:	2b00      	cmp	r3, #0
 800a002:	d004      	beq.n	800a00e <HAL_SD_Init+0x82>
  {
    hsd->SdCard.CardSpeed = CARD_ULTRA_HIGH_SPEED;
 800a004:	687b      	ldr	r3, [r7, #4]
 800a006:	f44f 7200 	mov.w	r2, #512	; 0x200
 800a00a:	659a      	str	r2, [r3, #88]	; 0x58
 800a00c:	e00b      	b.n	800a026 <HAL_SD_Init+0x9a>
  }
  else
  {
    if (hsd->SdCard.CardType == CARD_SDHC_SDXC)
 800a00e:	687b      	ldr	r3, [r7, #4]
 800a010:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a012:	2b01      	cmp	r3, #1
 800a014:	d104      	bne.n	800a020 <HAL_SD_Init+0x94>
    {
      hsd->SdCard.CardSpeed  = CARD_HIGH_SPEED;
 800a016:	687b      	ldr	r3, [r7, #4]
 800a018:	f44f 7280 	mov.w	r2, #256	; 0x100
 800a01c:	659a      	str	r2, [r3, #88]	; 0x58
 800a01e:	e002      	b.n	800a026 <HAL_SD_Init+0x9a>
    }
    else
    {
      hsd->SdCard.CardSpeed  = CARD_NORMAL_SPEED;
 800a020:	687b      	ldr	r3, [r7, #4]
 800a022:	2200      	movs	r2, #0
 800a024:	659a      	str	r2, [r3, #88]	; 0x58
    }

  }
  /* Configure the bus wide */
  if (HAL_SD_ConfigWideBusOperation(hsd, hsd->Init.BusWide) != HAL_OK)
 800a026:	687b      	ldr	r3, [r7, #4]
 800a028:	68db      	ldr	r3, [r3, #12]
 800a02a:	4619      	mov	r1, r3
 800a02c:	6878      	ldr	r0, [r7, #4]
 800a02e:	f000 fe5b 	bl	800ace8 <HAL_SD_ConfigWideBusOperation>
 800a032:	4603      	mov	r3, r0
 800a034:	2b00      	cmp	r3, #0
 800a036:	d001      	beq.n	800a03c <HAL_SD_Init+0xb0>
  {
    return HAL_ERROR;
 800a038:	2301      	movs	r3, #1
 800a03a:	e026      	b.n	800a08a <HAL_SD_Init+0xfe>
  }

  /* Verify that SD card is ready to use after Initialization */
  tickstart = HAL_GetTick();
 800a03c:	f7f8 f9b2 	bl	80023a4 <HAL_GetTick>
 800a040:	61f8      	str	r0, [r7, #28]
  while ((HAL_SD_GetCardState(hsd) != HAL_SD_CARD_TRANSFER))
 800a042:	e011      	b.n	800a068 <HAL_SD_Init+0xdc>
  {
    if ((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 800a044:	f7f8 f9ae 	bl	80023a4 <HAL_GetTick>
 800a048:	4602      	mov	r2, r0
 800a04a:	69fb      	ldr	r3, [r7, #28]
 800a04c:	1ad3      	subs	r3, r2, r3
 800a04e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a052:	d109      	bne.n	800a068 <HAL_SD_Init+0xdc>
    {
      hsd->ErrorCode = HAL_SD_ERROR_TIMEOUT;
 800a054:	687b      	ldr	r3, [r7, #4]
 800a056:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800a05a:	635a      	str	r2, [r3, #52]	; 0x34
      hsd->State = HAL_SD_STATE_READY;
 800a05c:	687b      	ldr	r3, [r7, #4]
 800a05e:	2201      	movs	r2, #1
 800a060:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      return HAL_TIMEOUT;
 800a064:	2303      	movs	r3, #3
 800a066:	e010      	b.n	800a08a <HAL_SD_Init+0xfe>
  while ((HAL_SD_GetCardState(hsd) != HAL_SD_CARD_TRANSFER))
 800a068:	6878      	ldr	r0, [r7, #4]
 800a06a:	f000 ff4d 	bl	800af08 <HAL_SD_GetCardState>
 800a06e:	4603      	mov	r3, r0
 800a070:	2b04      	cmp	r3, #4
 800a072:	d1e7      	bne.n	800a044 <HAL_SD_Init+0xb8>
    }
  }

  /* Initialize the error code */
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800a074:	687b      	ldr	r3, [r7, #4]
 800a076:	2200      	movs	r2, #0
 800a078:	635a      	str	r2, [r3, #52]	; 0x34

  /* Initialize the SD operation */
  hsd->Context = SD_CONTEXT_NONE;
 800a07a:	687b      	ldr	r3, [r7, #4]
 800a07c:	2200      	movs	r2, #0
 800a07e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Initialize the SD state */
  hsd->State = HAL_SD_STATE_READY;
 800a080:	687b      	ldr	r3, [r7, #4]
 800a082:	2201      	movs	r2, #1
 800a084:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

  return HAL_OK;
 800a088:	2300      	movs	r3, #0
}
 800a08a:	4618      	mov	r0, r3
 800a08c:	3728      	adds	r7, #40	; 0x28
 800a08e:	46bd      	mov	sp, r7
 800a090:	bd80      	pop	{r7, pc}
	...

0800a094 <HAL_SD_InitCard>:
  * @note   This function initializes the SD card. It could be used when a card
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_InitCard(SD_HandleTypeDef *hsd)
{
 800a094:	b590      	push	{r4, r7, lr}
 800a096:	b08d      	sub	sp, #52	; 0x34
 800a098:	af02      	add	r7, sp, #8
 800a09a:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  SD_InitTypeDef Init;
  uint32_t sdmmc_clk;

  /* Default SDMMC peripheral configuration for SD card initialization */
  Init.ClockEdge           = SDMMC_CLOCK_EDGE_RISING;
 800a09c:	2300      	movs	r3, #0
 800a09e:	60fb      	str	r3, [r7, #12]
  Init.ClockPowerSave      = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 800a0a0:	2300      	movs	r3, #0
 800a0a2:	613b      	str	r3, [r7, #16]
  Init.BusWide             = SDMMC_BUS_WIDE_1B;
 800a0a4:	2300      	movs	r3, #0
 800a0a6:	617b      	str	r3, [r7, #20]
  Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 800a0a8:	2300      	movs	r3, #0
 800a0aa:	61bb      	str	r3, [r7, #24]

  /* Init Clock should be less or equal to 400Khz*/
  sdmmc_clk     = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SDMMC);
 800a0ac:	f44f 3080 	mov.w	r0, #65536	; 0x10000
 800a0b0:	f7fe fd26 	bl	8008b00 <HAL_RCCEx_GetPeriphCLKFreq>
 800a0b4:	6278      	str	r0, [r7, #36]	; 0x24
  if (sdmmc_clk == 0U)
 800a0b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a0b8:	2b00      	cmp	r3, #0
 800a0ba:	d109      	bne.n	800a0d0 <HAL_SD_InitCard+0x3c>
  {
    hsd->State = HAL_SD_STATE_READY;
 800a0bc:	687b      	ldr	r3, [r7, #4]
 800a0be:	2201      	movs	r2, #1
 800a0c0:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    hsd->ErrorCode = SDMMC_ERROR_INVALID_PARAMETER;
 800a0c4:	687b      	ldr	r3, [r7, #4]
 800a0c6:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800a0ca:	635a      	str	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 800a0cc:	2301      	movs	r3, #1
 800a0ce:	e06a      	b.n	800a1a6 <HAL_SD_InitCard+0x112>
  }
  Init.ClockDiv = sdmmc_clk / (2U * SD_INIT_FREQ);
 800a0d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a0d2:	0a1b      	lsrs	r3, r3, #8
 800a0d4:	4a36      	ldr	r2, [pc, #216]	; (800a1b0 <HAL_SD_InitCard+0x11c>)
 800a0d6:	fba2 2303 	umull	r2, r3, r2, r3
 800a0da:	091b      	lsrs	r3, r3, #4
 800a0dc:	61fb      	str	r3, [r7, #28]
  /* Set Transceiver polarity */
  hsd->Instance->POWER |= SDMMC_POWER_DIRPOL;
#endif /* USE_SD_TRANSCEIVER  */

  /* Initialize SDMMC peripheral interface with default configuration */
  (void)SDMMC_Init(hsd->Instance, Init);
 800a0de:	687b      	ldr	r3, [r7, #4]
 800a0e0:	681c      	ldr	r4, [r3, #0]
 800a0e2:	466a      	mov	r2, sp
 800a0e4:	f107 0318 	add.w	r3, r7, #24
 800a0e8:	e893 0003 	ldmia.w	r3, {r0, r1}
 800a0ec:	e882 0003 	stmia.w	r2, {r0, r1}
 800a0f0:	f107 030c 	add.w	r3, r7, #12
 800a0f4:	cb0e      	ldmia	r3, {r1, r2, r3}
 800a0f6:	4620      	mov	r0, r4
 800a0f8:	f003 fcd6 	bl	800daa8 <SDMMC_Init>

  /* Set Power State to ON */
  (void)SDMMC_PowerState_ON(hsd->Instance);
 800a0fc:	687b      	ldr	r3, [r7, #4]
 800a0fe:	681b      	ldr	r3, [r3, #0]
 800a100:	4618      	mov	r0, r3
 800a102:	f003 fd19 	bl	800db38 <SDMMC_PowerState_ON>

  /* wait 74 Cycles: required power up waiting time before starting
     the SD initialization sequence */
  sdmmc_clk = sdmmc_clk / (2U * Init.ClockDiv);
 800a106:	69fb      	ldr	r3, [r7, #28]
 800a108:	005b      	lsls	r3, r3, #1
 800a10a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a10c:	fbb2 f3f3 	udiv	r3, r2, r3
 800a110:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_Delay(1U + (74U * 1000U / (sdmmc_clk)));
 800a112:	4a28      	ldr	r2, [pc, #160]	; (800a1b4 <HAL_SD_InitCard+0x120>)
 800a114:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a116:	fbb2 f3f3 	udiv	r3, r2, r3
 800a11a:	3301      	adds	r3, #1
 800a11c:	4618      	mov	r0, r3
 800a11e:	f7f8 f94d 	bl	80023bc <HAL_Delay>

  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd);
 800a122:	6878      	ldr	r0, [r7, #4]
 800a124:	f000 ffcc 	bl	800b0c0 <SD_PowerON>
 800a128:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 800a12a:	6a3b      	ldr	r3, [r7, #32]
 800a12c:	2b00      	cmp	r3, #0
 800a12e:	d00b      	beq.n	800a148 <HAL_SD_InitCard+0xb4>
  {
    hsd->State = HAL_SD_STATE_READY;
 800a130:	687b      	ldr	r3, [r7, #4]
 800a132:	2201      	movs	r2, #1
 800a134:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    hsd->ErrorCode |= errorstate;
 800a138:	687b      	ldr	r3, [r7, #4]
 800a13a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800a13c:	6a3b      	ldr	r3, [r7, #32]
 800a13e:	431a      	orrs	r2, r3
 800a140:	687b      	ldr	r3, [r7, #4]
 800a142:	635a      	str	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 800a144:	2301      	movs	r3, #1
 800a146:	e02e      	b.n	800a1a6 <HAL_SD_InitCard+0x112>
  }

  /* Card initialization */
  errorstate = SD_InitCard(hsd);
 800a148:	6878      	ldr	r0, [r7, #4]
 800a14a:	f000 fefd 	bl	800af48 <SD_InitCard>
 800a14e:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 800a150:	6a3b      	ldr	r3, [r7, #32]
 800a152:	2b00      	cmp	r3, #0
 800a154:	d00b      	beq.n	800a16e <HAL_SD_InitCard+0xda>
  {
    hsd->State = HAL_SD_STATE_READY;
 800a156:	687b      	ldr	r3, [r7, #4]
 800a158:	2201      	movs	r2, #1
 800a15a:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    hsd->ErrorCode |= errorstate;
 800a15e:	687b      	ldr	r3, [r7, #4]
 800a160:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800a162:	6a3b      	ldr	r3, [r7, #32]
 800a164:	431a      	orrs	r2, r3
 800a166:	687b      	ldr	r3, [r7, #4]
 800a168:	635a      	str	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 800a16a:	2301      	movs	r3, #1
 800a16c:	e01b      	b.n	800a1a6 <HAL_SD_InitCard+0x112>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 800a16e:	687b      	ldr	r3, [r7, #4]
 800a170:	681b      	ldr	r3, [r3, #0]
 800a172:	f44f 7100 	mov.w	r1, #512	; 0x200
 800a176:	4618      	mov	r0, r3
 800a178:	f003 fd74 	bl	800dc64 <SDMMC_CmdBlockLength>
 800a17c:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 800a17e:	6a3b      	ldr	r3, [r7, #32]
 800a180:	2b00      	cmp	r3, #0
 800a182:	d00f      	beq.n	800a1a4 <HAL_SD_InitCard+0x110>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800a184:	687b      	ldr	r3, [r7, #4]
 800a186:	681b      	ldr	r3, [r3, #0]
 800a188:	4a0b      	ldr	r2, [pc, #44]	; (800a1b8 <HAL_SD_InitCard+0x124>)
 800a18a:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 800a18c:	687b      	ldr	r3, [r7, #4]
 800a18e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800a190:	6a3b      	ldr	r3, [r7, #32]
 800a192:	431a      	orrs	r2, r3
 800a194:	687b      	ldr	r3, [r7, #4]
 800a196:	635a      	str	r2, [r3, #52]	; 0x34
    hsd->State = HAL_SD_STATE_READY;
 800a198:	687b      	ldr	r3, [r7, #4]
 800a19a:	2201      	movs	r2, #1
 800a19c:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    return HAL_ERROR;
 800a1a0:	2301      	movs	r3, #1
 800a1a2:	e000      	b.n	800a1a6 <HAL_SD_InitCard+0x112>
  }

  return HAL_OK;
 800a1a4:	2300      	movs	r3, #0
}
 800a1a6:	4618      	mov	r0, r3
 800a1a8:	372c      	adds	r7, #44	; 0x2c
 800a1aa:	46bd      	mov	sp, r7
 800a1ac:	bd90      	pop	{r4, r7, pc}
 800a1ae:	bf00      	nop
 800a1b0:	014f8b59 	.word	0x014f8b59
 800a1b4:	00012110 	.word	0x00012110
 800a1b8:	1fe00fff 	.word	0x1fe00fff

0800a1bc <HAL_SD_ReadBlocks_DMA>:
  * @param  NumberOfBlocks: Number of blocks to read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ReadBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd,
                                        uint32_t NumberOfBlocks)
{
 800a1bc:	b580      	push	{r7, lr}
 800a1be:	b08c      	sub	sp, #48	; 0x30
 800a1c0:	af00      	add	r7, sp, #0
 800a1c2:	60f8      	str	r0, [r7, #12]
 800a1c4:	60b9      	str	r1, [r7, #8]
 800a1c6:	607a      	str	r2, [r7, #4]
 800a1c8:	603b      	str	r3, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 800a1ca:	687b      	ldr	r3, [r7, #4]
 800a1cc:	62bb      	str	r3, [r7, #40]	; 0x28

  if (NULL == pData)
 800a1ce:	68bb      	ldr	r3, [r7, #8]
 800a1d0:	2b00      	cmp	r3, #0
 800a1d2:	d107      	bne.n	800a1e4 <HAL_SD_ReadBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800a1d4:	68fb      	ldr	r3, [r7, #12]
 800a1d6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a1d8:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800a1dc:	68fb      	ldr	r3, [r7, #12]
 800a1de:	635a      	str	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 800a1e0:	2301      	movs	r3, #1
 800a1e2:	e08d      	b.n	800a300 <HAL_SD_ReadBlocks_DMA+0x144>
  }

  if (hsd->State == HAL_SD_STATE_READY)
 800a1e4:	68fb      	ldr	r3, [r7, #12]
 800a1e6:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800a1ea:	b2db      	uxtb	r3, r3
 800a1ec:	2b01      	cmp	r3, #1
 800a1ee:	f040 8086 	bne.w	800a2fe <HAL_SD_ReadBlocks_DMA+0x142>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800a1f2:	68fb      	ldr	r3, [r7, #12]
 800a1f4:	2200      	movs	r2, #0
 800a1f6:	635a      	str	r2, [r3, #52]	; 0x34

    if ((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 800a1f8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800a1fa:	683b      	ldr	r3, [r7, #0]
 800a1fc:	441a      	add	r2, r3
 800a1fe:	68fb      	ldr	r3, [r7, #12]
 800a200:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a202:	429a      	cmp	r2, r3
 800a204:	d907      	bls.n	800a216 <HAL_SD_ReadBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 800a206:	68fb      	ldr	r3, [r7, #12]
 800a208:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a20a:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 800a20e:	68fb      	ldr	r3, [r7, #12]
 800a210:	635a      	str	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 800a212:	2301      	movs	r3, #1
 800a214:	e074      	b.n	800a300 <HAL_SD_ReadBlocks_DMA+0x144>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 800a216:	68fb      	ldr	r3, [r7, #12]
 800a218:	2203      	movs	r2, #3
 800a21a:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 800a21e:	68fb      	ldr	r3, [r7, #12]
 800a220:	681b      	ldr	r3, [r3, #0]
 800a222:	2200      	movs	r2, #0
 800a224:	62da      	str	r2, [r3, #44]	; 0x2c

    hsd->pRxBuffPtr = pData;
 800a226:	68fb      	ldr	r3, [r7, #12]
 800a228:	68ba      	ldr	r2, [r7, #8]
 800a22a:	625a      	str	r2, [r3, #36]	; 0x24
    hsd->RxXferSize = BLOCKSIZE * NumberOfBlocks;
 800a22c:	683b      	ldr	r3, [r7, #0]
 800a22e:	025a      	lsls	r2, r3, #9
 800a230:	68fb      	ldr	r3, [r7, #12]
 800a232:	629a      	str	r2, [r3, #40]	; 0x28

    if (hsd->SdCard.CardType != CARD_SDHC_SDXC)
 800a234:	68fb      	ldr	r3, [r7, #12]
 800a236:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a238:	2b01      	cmp	r3, #1
 800a23a:	d002      	beq.n	800a242 <HAL_SD_ReadBlocks_DMA+0x86>
    {
      add *= 512U;
 800a23c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a23e:	025b      	lsls	r3, r3, #9
 800a240:	62bb      	str	r3, [r7, #40]	; 0x28
    }

    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800a242:	f04f 33ff 	mov.w	r3, #4294967295
 800a246:	613b      	str	r3, [r7, #16]
    config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 800a248:	683b      	ldr	r3, [r7, #0]
 800a24a:	025b      	lsls	r3, r3, #9
 800a24c:	617b      	str	r3, [r7, #20]
    config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 800a24e:	2390      	movs	r3, #144	; 0x90
 800a250:	61bb      	str	r3, [r7, #24]
    config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 800a252:	2302      	movs	r3, #2
 800a254:	61fb      	str	r3, [r7, #28]
    config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 800a256:	2300      	movs	r3, #0
 800a258:	623b      	str	r3, [r7, #32]
    config.DPSM          = SDMMC_DPSM_DISABLE;
 800a25a:	2300      	movs	r3, #0
 800a25c:	627b      	str	r3, [r7, #36]	; 0x24
    (void)SDMMC_ConfigData(hsd->Instance, &config);
 800a25e:	68fb      	ldr	r3, [r7, #12]
 800a260:	681b      	ldr	r3, [r3, #0]
 800a262:	f107 0210 	add.w	r2, r7, #16
 800a266:	4611      	mov	r1, r2
 800a268:	4618      	mov	r0, r3
 800a26a:	f003 fccf 	bl	800dc0c <SDMMC_ConfigData>

    __SDMMC_CMDTRANS_ENABLE(hsd->Instance);
 800a26e:	68fb      	ldr	r3, [r7, #12]
 800a270:	681b      	ldr	r3, [r3, #0]
 800a272:	68da      	ldr	r2, [r3, #12]
 800a274:	68fb      	ldr	r3, [r7, #12]
 800a276:	681b      	ldr	r3, [r3, #0]
 800a278:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800a27c:	60da      	str	r2, [r3, #12]
    hsd->Instance->IDMABASE0 = (uint32_t) pData ;
 800a27e:	68fb      	ldr	r3, [r7, #12]
 800a280:	681b      	ldr	r3, [r3, #0]
 800a282:	68ba      	ldr	r2, [r7, #8]
 800a284:	659a      	str	r2, [r3, #88]	; 0x58
    hsd->Instance->IDMACTRL  = SDMMC_ENABLE_IDMA_SINGLE_BUFF;
 800a286:	68fb      	ldr	r3, [r7, #12]
 800a288:	681b      	ldr	r3, [r3, #0]
 800a28a:	2201      	movs	r2, #1
 800a28c:	651a      	str	r2, [r3, #80]	; 0x50

    /* Read Blocks in DMA mode */
    if (NumberOfBlocks > 1U)
 800a28e:	683b      	ldr	r3, [r7, #0]
 800a290:	2b01      	cmp	r3, #1
 800a292:	d90a      	bls.n	800a2aa <HAL_SD_ReadBlocks_DMA+0xee>
    {
      hsd->Context = (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 800a294:	68fb      	ldr	r3, [r7, #12]
 800a296:	2282      	movs	r2, #130	; 0x82
 800a298:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Read Multi Block command */
      errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, add);
 800a29a:	68fb      	ldr	r3, [r7, #12]
 800a29c:	681b      	ldr	r3, [r3, #0]
 800a29e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800a2a0:	4618      	mov	r0, r3
 800a2a2:	f003 fd25 	bl	800dcf0 <SDMMC_CmdReadMultiBlock>
 800a2a6:	62f8      	str	r0, [r7, #44]	; 0x2c
 800a2a8:	e009      	b.n	800a2be <HAL_SD_ReadBlocks_DMA+0x102>
    }
    else
    {
      hsd->Context = (SD_CONTEXT_READ_SINGLE_BLOCK | SD_CONTEXT_DMA);
 800a2aa:	68fb      	ldr	r3, [r7, #12]
 800a2ac:	2281      	movs	r2, #129	; 0x81
 800a2ae:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Read Single Block command */
      errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, add);
 800a2b0:	68fb      	ldr	r3, [r7, #12]
 800a2b2:	681b      	ldr	r3, [r3, #0]
 800a2b4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800a2b6:	4618      	mov	r0, r3
 800a2b8:	f003 fcf7 	bl	800dcaa <SDMMC_CmdReadSingleBlock>
 800a2bc:	62f8      	str	r0, [r7, #44]	; 0x2c
    }
    if (errorstate != HAL_SD_ERROR_NONE)
 800a2be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a2c0:	2b00      	cmp	r3, #0
 800a2c2:	d012      	beq.n	800a2ea <HAL_SD_ReadBlocks_DMA+0x12e>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800a2c4:	68fb      	ldr	r3, [r7, #12]
 800a2c6:	681b      	ldr	r3, [r3, #0]
 800a2c8:	4a0f      	ldr	r2, [pc, #60]	; (800a308 <HAL_SD_ReadBlocks_DMA+0x14c>)
 800a2ca:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 800a2cc:	68fb      	ldr	r3, [r7, #12]
 800a2ce:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800a2d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a2d2:	431a      	orrs	r2, r3
 800a2d4:	68fb      	ldr	r3, [r7, #12]
 800a2d6:	635a      	str	r2, [r3, #52]	; 0x34
      hsd->State = HAL_SD_STATE_READY;
 800a2d8:	68fb      	ldr	r3, [r7, #12]
 800a2da:	2201      	movs	r2, #1
 800a2dc:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      hsd->Context = SD_CONTEXT_NONE;
 800a2e0:	68fb      	ldr	r3, [r7, #12]
 800a2e2:	2200      	movs	r2, #0
 800a2e4:	62da      	str	r2, [r3, #44]	; 0x2c
      return HAL_ERROR;
 800a2e6:	2301      	movs	r3, #1
 800a2e8:	e00a      	b.n	800a300 <HAL_SD_ReadBlocks_DMA+0x144>
    }

    /* Enable transfer interrupts */
    __HAL_SD_ENABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_RXOVERR | SDMMC_IT_DATAEND));
 800a2ea:	68fb      	ldr	r3, [r7, #12]
 800a2ec:	681b      	ldr	r3, [r3, #0]
 800a2ee:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800a2f0:	68fb      	ldr	r3, [r7, #12]
 800a2f2:	681b      	ldr	r3, [r3, #0]
 800a2f4:	f442 7295 	orr.w	r2, r2, #298	; 0x12a
 800a2f8:	63da      	str	r2, [r3, #60]	; 0x3c


    return HAL_OK;
 800a2fa:	2300      	movs	r3, #0
 800a2fc:	e000      	b.n	800a300 <HAL_SD_ReadBlocks_DMA+0x144>
  }
  else
  {
    return HAL_BUSY;
 800a2fe:	2302      	movs	r3, #2
  }
}
 800a300:	4618      	mov	r0, r3
 800a302:	3730      	adds	r7, #48	; 0x30
 800a304:	46bd      	mov	sp, r7
 800a306:	bd80      	pop	{r7, pc}
 800a308:	1fe00fff 	.word	0x1fe00fff

0800a30c <HAL_SD_WriteBlocks_DMA>:
  * @param  NumberOfBlocks: Number of blocks to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_WriteBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd,
                                         uint32_t NumberOfBlocks)
{
 800a30c:	b580      	push	{r7, lr}
 800a30e:	b08c      	sub	sp, #48	; 0x30
 800a310:	af00      	add	r7, sp, #0
 800a312:	60f8      	str	r0, [r7, #12]
 800a314:	60b9      	str	r1, [r7, #8]
 800a316:	607a      	str	r2, [r7, #4]
 800a318:	603b      	str	r3, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 800a31a:	687b      	ldr	r3, [r7, #4]
 800a31c:	62bb      	str	r3, [r7, #40]	; 0x28

  if (NULL == pData)
 800a31e:	68bb      	ldr	r3, [r7, #8]
 800a320:	2b00      	cmp	r3, #0
 800a322:	d107      	bne.n	800a334 <HAL_SD_WriteBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800a324:	68fb      	ldr	r3, [r7, #12]
 800a326:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a328:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800a32c:	68fb      	ldr	r3, [r7, #12]
 800a32e:	635a      	str	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 800a330:	2301      	movs	r3, #1
 800a332:	e08d      	b.n	800a450 <HAL_SD_WriteBlocks_DMA+0x144>
  }

  if (hsd->State == HAL_SD_STATE_READY)
 800a334:	68fb      	ldr	r3, [r7, #12]
 800a336:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800a33a:	b2db      	uxtb	r3, r3
 800a33c:	2b01      	cmp	r3, #1
 800a33e:	f040 8086 	bne.w	800a44e <HAL_SD_WriteBlocks_DMA+0x142>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800a342:	68fb      	ldr	r3, [r7, #12]
 800a344:	2200      	movs	r2, #0
 800a346:	635a      	str	r2, [r3, #52]	; 0x34

    if ((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 800a348:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800a34a:	683b      	ldr	r3, [r7, #0]
 800a34c:	441a      	add	r2, r3
 800a34e:	68fb      	ldr	r3, [r7, #12]
 800a350:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a352:	429a      	cmp	r2, r3
 800a354:	d907      	bls.n	800a366 <HAL_SD_WriteBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 800a356:	68fb      	ldr	r3, [r7, #12]
 800a358:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a35a:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 800a35e:	68fb      	ldr	r3, [r7, #12]
 800a360:	635a      	str	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 800a362:	2301      	movs	r3, #1
 800a364:	e074      	b.n	800a450 <HAL_SD_WriteBlocks_DMA+0x144>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 800a366:	68fb      	ldr	r3, [r7, #12]
 800a368:	2203      	movs	r2, #3
 800a36a:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 800a36e:	68fb      	ldr	r3, [r7, #12]
 800a370:	681b      	ldr	r3, [r3, #0]
 800a372:	2200      	movs	r2, #0
 800a374:	62da      	str	r2, [r3, #44]	; 0x2c

    hsd->pTxBuffPtr = pData;
 800a376:	68fb      	ldr	r3, [r7, #12]
 800a378:	68ba      	ldr	r2, [r7, #8]
 800a37a:	61da      	str	r2, [r3, #28]
    hsd->TxXferSize = BLOCKSIZE * NumberOfBlocks;
 800a37c:	683b      	ldr	r3, [r7, #0]
 800a37e:	025a      	lsls	r2, r3, #9
 800a380:	68fb      	ldr	r3, [r7, #12]
 800a382:	621a      	str	r2, [r3, #32]

    if (hsd->SdCard.CardType != CARD_SDHC_SDXC)
 800a384:	68fb      	ldr	r3, [r7, #12]
 800a386:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a388:	2b01      	cmp	r3, #1
 800a38a:	d002      	beq.n	800a392 <HAL_SD_WriteBlocks_DMA+0x86>
    {
      add *= 512U;
 800a38c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a38e:	025b      	lsls	r3, r3, #9
 800a390:	62bb      	str	r3, [r7, #40]	; 0x28
    }

    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800a392:	f04f 33ff 	mov.w	r3, #4294967295
 800a396:	613b      	str	r3, [r7, #16]
    config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 800a398:	683b      	ldr	r3, [r7, #0]
 800a39a:	025b      	lsls	r3, r3, #9
 800a39c:	617b      	str	r3, [r7, #20]
    config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 800a39e:	2390      	movs	r3, #144	; 0x90
 800a3a0:	61bb      	str	r3, [r7, #24]
    config.TransferDir   = SDMMC_TRANSFER_DIR_TO_CARD;
 800a3a2:	2300      	movs	r3, #0
 800a3a4:	61fb      	str	r3, [r7, #28]
    config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 800a3a6:	2300      	movs	r3, #0
 800a3a8:	623b      	str	r3, [r7, #32]
    config.DPSM          = SDMMC_DPSM_DISABLE;
 800a3aa:	2300      	movs	r3, #0
 800a3ac:	627b      	str	r3, [r7, #36]	; 0x24
    (void)SDMMC_ConfigData(hsd->Instance, &config);
 800a3ae:	68fb      	ldr	r3, [r7, #12]
 800a3b0:	681b      	ldr	r3, [r3, #0]
 800a3b2:	f107 0210 	add.w	r2, r7, #16
 800a3b6:	4611      	mov	r1, r2
 800a3b8:	4618      	mov	r0, r3
 800a3ba:	f003 fc27 	bl	800dc0c <SDMMC_ConfigData>


    __SDMMC_CMDTRANS_ENABLE(hsd->Instance);
 800a3be:	68fb      	ldr	r3, [r7, #12]
 800a3c0:	681b      	ldr	r3, [r3, #0]
 800a3c2:	68da      	ldr	r2, [r3, #12]
 800a3c4:	68fb      	ldr	r3, [r7, #12]
 800a3c6:	681b      	ldr	r3, [r3, #0]
 800a3c8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800a3cc:	60da      	str	r2, [r3, #12]

    hsd->Instance->IDMABASE0 = (uint32_t) pData ;
 800a3ce:	68fb      	ldr	r3, [r7, #12]
 800a3d0:	681b      	ldr	r3, [r3, #0]
 800a3d2:	68ba      	ldr	r2, [r7, #8]
 800a3d4:	659a      	str	r2, [r3, #88]	; 0x58
    hsd->Instance->IDMACTRL  = SDMMC_ENABLE_IDMA_SINGLE_BUFF;
 800a3d6:	68fb      	ldr	r3, [r7, #12]
 800a3d8:	681b      	ldr	r3, [r3, #0]
 800a3da:	2201      	movs	r2, #1
 800a3dc:	651a      	str	r2, [r3, #80]	; 0x50

    /* Write Blocks in Polling mode */
    if (NumberOfBlocks > 1U)
 800a3de:	683b      	ldr	r3, [r7, #0]
 800a3e0:	2b01      	cmp	r3, #1
 800a3e2:	d90a      	bls.n	800a3fa <HAL_SD_WriteBlocks_DMA+0xee>
    {
      hsd->Context = (SD_CONTEXT_WRITE_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 800a3e4:	68fb      	ldr	r3, [r7, #12]
 800a3e6:	22a0      	movs	r2, #160	; 0xa0
 800a3e8:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Write Multi Block command */
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
 800a3ea:	68fb      	ldr	r3, [r7, #12]
 800a3ec:	681b      	ldr	r3, [r3, #0]
 800a3ee:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800a3f0:	4618      	mov	r0, r3
 800a3f2:	f003 fcc3 	bl	800dd7c <SDMMC_CmdWriteMultiBlock>
 800a3f6:	62f8      	str	r0, [r7, #44]	; 0x2c
 800a3f8:	e009      	b.n	800a40e <HAL_SD_WriteBlocks_DMA+0x102>
    }
    else
    {
      hsd->Context = (SD_CONTEXT_WRITE_SINGLE_BLOCK | SD_CONTEXT_DMA);
 800a3fa:	68fb      	ldr	r3, [r7, #12]
 800a3fc:	2290      	movs	r2, #144	; 0x90
 800a3fe:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Write Single Block command */
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, add);
 800a400:	68fb      	ldr	r3, [r7, #12]
 800a402:	681b      	ldr	r3, [r3, #0]
 800a404:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800a406:	4618      	mov	r0, r3
 800a408:	f003 fc95 	bl	800dd36 <SDMMC_CmdWriteSingleBlock>
 800a40c:	62f8      	str	r0, [r7, #44]	; 0x2c
    }
    if (errorstate != HAL_SD_ERROR_NONE)
 800a40e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a410:	2b00      	cmp	r3, #0
 800a412:	d012      	beq.n	800a43a <HAL_SD_WriteBlocks_DMA+0x12e>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800a414:	68fb      	ldr	r3, [r7, #12]
 800a416:	681b      	ldr	r3, [r3, #0]
 800a418:	4a0f      	ldr	r2, [pc, #60]	; (800a458 <HAL_SD_WriteBlocks_DMA+0x14c>)
 800a41a:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 800a41c:	68fb      	ldr	r3, [r7, #12]
 800a41e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800a420:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a422:	431a      	orrs	r2, r3
 800a424:	68fb      	ldr	r3, [r7, #12]
 800a426:	635a      	str	r2, [r3, #52]	; 0x34
      hsd->State = HAL_SD_STATE_READY;
 800a428:	68fb      	ldr	r3, [r7, #12]
 800a42a:	2201      	movs	r2, #1
 800a42c:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      hsd->Context = SD_CONTEXT_NONE;
 800a430:	68fb      	ldr	r3, [r7, #12]
 800a432:	2200      	movs	r2, #0
 800a434:	62da      	str	r2, [r3, #44]	; 0x2c
      return HAL_ERROR;
 800a436:	2301      	movs	r3, #1
 800a438:	e00a      	b.n	800a450 <HAL_SD_WriteBlocks_DMA+0x144>
    }

    /* Enable transfer interrupts */
    __HAL_SD_ENABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_TXUNDERR | SDMMC_IT_DATAEND));
 800a43a:	68fb      	ldr	r3, [r7, #12]
 800a43c:	681b      	ldr	r3, [r3, #0]
 800a43e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800a440:	68fb      	ldr	r3, [r7, #12]
 800a442:	681b      	ldr	r3, [r3, #0]
 800a444:	f442 728d 	orr.w	r2, r2, #282	; 0x11a
 800a448:	63da      	str	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800a44a:	2300      	movs	r3, #0
 800a44c:	e000      	b.n	800a450 <HAL_SD_WriteBlocks_DMA+0x144>
  }
  else
  {
    return HAL_BUSY;
 800a44e:	2302      	movs	r3, #2
  }
}
 800a450:	4618      	mov	r0, r3
 800a452:	3730      	adds	r7, #48	; 0x30
 800a454:	46bd      	mov	sp, r7
 800a456:	bd80      	pop	{r7, pc}
 800a458:	1fe00fff 	.word	0x1fe00fff

0800a45c <HAL_SD_IRQHandler>:
  * @brief  This function handles SD card interrupt request.
  * @param  hsd: Pointer to SD handle
  * @retval None
  */
void HAL_SD_IRQHandler(SD_HandleTypeDef *hsd)
{
 800a45c:	b580      	push	{r7, lr}
 800a45e:	b084      	sub	sp, #16
 800a460:	af00      	add	r7, sp, #0
 800a462:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  uint32_t context = hsd->Context;
 800a464:	687b      	ldr	r3, [r7, #4]
 800a466:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a468:	60fb      	str	r3, [r7, #12]

  /* Check for SDMMC interrupt flags */
  if ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOHF) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 800a46a:	687b      	ldr	r3, [r7, #4]
 800a46c:	681b      	ldr	r3, [r3, #0]
 800a46e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a470:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800a474:	2b00      	cmp	r3, #0
 800a476:	d008      	beq.n	800a48a <HAL_SD_IRQHandler+0x2e>
 800a478:	68fb      	ldr	r3, [r7, #12]
 800a47a:	f003 0308 	and.w	r3, r3, #8
 800a47e:	2b00      	cmp	r3, #0
 800a480:	d003      	beq.n	800a48a <HAL_SD_IRQHandler+0x2e>
  {
    SD_Read_IT(hsd);
 800a482:	6878      	ldr	r0, [r7, #4]
 800a484:	f001 f904 	bl	800b690 <SD_Read_IT>
 800a488:	e19a      	b.n	800a7c0 <HAL_SD_IRQHandler+0x364>
  }

  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DATAEND) != RESET)
 800a48a:	687b      	ldr	r3, [r7, #4]
 800a48c:	681b      	ldr	r3, [r3, #0]
 800a48e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a490:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a494:	2b00      	cmp	r3, #0
 800a496:	f000 80ac 	beq.w	800a5f2 <HAL_SD_IRQHandler+0x196>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DATAEND);
 800a49a:	687b      	ldr	r3, [r7, #4]
 800a49c:	681b      	ldr	r3, [r3, #0]
 800a49e:	f44f 7280 	mov.w	r2, #256	; 0x100
 800a4a2:	639a      	str	r2, [r3, #56]	; 0x38

    __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_DATAEND  | SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | \
 800a4a4:	687b      	ldr	r3, [r7, #4]
 800a4a6:	681b      	ldr	r3, [r3, #0]
 800a4a8:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 800a4aa:	687b      	ldr	r3, [r7, #4]
 800a4ac:	681a      	ldr	r2, [r3, #0]
 800a4ae:	4b9d      	ldr	r3, [pc, #628]	; (800a724 <HAL_SD_IRQHandler+0x2c8>)
 800a4b0:	400b      	ands	r3, r1
 800a4b2:	63d3      	str	r3, [r2, #60]	; 0x3c
                        SDMMC_IT_TXUNDERR | SDMMC_IT_RXOVERR  | SDMMC_IT_TXFIFOHE | \
                        SDMMC_IT_RXFIFOHF);

    __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_IDMABTC);
 800a4b4:	687b      	ldr	r3, [r7, #4]
 800a4b6:	681b      	ldr	r3, [r3, #0]
 800a4b8:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800a4ba:	687b      	ldr	r3, [r7, #4]
 800a4bc:	681b      	ldr	r3, [r3, #0]
 800a4be:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
 800a4c2:	63da      	str	r2, [r3, #60]	; 0x3c
    __SDMMC_CMDTRANS_DISABLE(hsd->Instance);
 800a4c4:	687b      	ldr	r3, [r7, #4]
 800a4c6:	681b      	ldr	r3, [r3, #0]
 800a4c8:	68da      	ldr	r2, [r3, #12]
 800a4ca:	687b      	ldr	r3, [r7, #4]
 800a4cc:	681b      	ldr	r3, [r3, #0]
 800a4ce:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800a4d2:	60da      	str	r2, [r3, #12]

    if ((context & SD_CONTEXT_IT) != 0U)
 800a4d4:	68fb      	ldr	r3, [r7, #12]
 800a4d6:	f003 0308 	and.w	r3, r3, #8
 800a4da:	2b00      	cmp	r3, #0
 800a4dc:	d038      	beq.n	800a550 <HAL_SD_IRQHandler+0xf4>
    {
      if (((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 800a4de:	68fb      	ldr	r3, [r7, #12]
 800a4e0:	f003 0302 	and.w	r3, r3, #2
 800a4e4:	2b00      	cmp	r3, #0
 800a4e6:	d104      	bne.n	800a4f2 <HAL_SD_IRQHandler+0x96>
 800a4e8:	68fb      	ldr	r3, [r7, #12]
 800a4ea:	f003 0320 	and.w	r3, r3, #32
 800a4ee:	2b00      	cmp	r3, #0
 800a4f0:	d011      	beq.n	800a516 <HAL_SD_IRQHandler+0xba>
      {
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 800a4f2:	687b      	ldr	r3, [r7, #4]
 800a4f4:	681b      	ldr	r3, [r3, #0]
 800a4f6:	4618      	mov	r0, r3
 800a4f8:	f003 fc64 	bl	800ddc4 <SDMMC_CmdStopTransfer>
 800a4fc:	60b8      	str	r0, [r7, #8]
        if (errorstate != HAL_SD_ERROR_NONE)
 800a4fe:	68bb      	ldr	r3, [r7, #8]
 800a500:	2b00      	cmp	r3, #0
 800a502:	d008      	beq.n	800a516 <HAL_SD_IRQHandler+0xba>
        {
          hsd->ErrorCode |= errorstate;
 800a504:	687b      	ldr	r3, [r7, #4]
 800a506:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800a508:	68bb      	ldr	r3, [r7, #8]
 800a50a:	431a      	orrs	r2, r3
 800a50c:	687b      	ldr	r3, [r7, #4]
 800a50e:	635a      	str	r2, [r3, #52]	; 0x34
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
          hsd->ErrorCallback(hsd);
#else
          HAL_SD_ErrorCallback(hsd);
 800a510:	6878      	ldr	r0, [r7, #4]
 800a512:	f000 f959 	bl	800a7c8 <HAL_SD_ErrorCallback>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
        }
      }

      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 800a516:	687b      	ldr	r3, [r7, #4]
 800a518:	681b      	ldr	r3, [r3, #0]
 800a51a:	4a83      	ldr	r2, [pc, #524]	; (800a728 <HAL_SD_IRQHandler+0x2cc>)
 800a51c:	639a      	str	r2, [r3, #56]	; 0x38

      hsd->State = HAL_SD_STATE_READY;
 800a51e:	687b      	ldr	r3, [r7, #4]
 800a520:	2201      	movs	r2, #1
 800a522:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      hsd->Context = SD_CONTEXT_NONE;
 800a526:	687b      	ldr	r3, [r7, #4]
 800a528:	2200      	movs	r2, #0
 800a52a:	62da      	str	r2, [r3, #44]	; 0x2c
      if (((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 800a52c:	68fb      	ldr	r3, [r7, #12]
 800a52e:	f003 0301 	and.w	r3, r3, #1
 800a532:	2b00      	cmp	r3, #0
 800a534:	d104      	bne.n	800a540 <HAL_SD_IRQHandler+0xe4>
 800a536:	68fb      	ldr	r3, [r7, #12]
 800a538:	f003 0302 	and.w	r3, r3, #2
 800a53c:	2b00      	cmp	r3, #0
 800a53e:	d003      	beq.n	800a548 <HAL_SD_IRQHandler+0xec>
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->RxCpltCallback(hsd);
#else
        HAL_SD_RxCpltCallback(hsd);
 800a540:	6878      	ldr	r0, [r7, #4]
 800a542:	f005 fc81 	bl	800fe48 <HAL_SD_RxCpltCallback>
 800a546:	e13b      	b.n	800a7c0 <HAL_SD_IRQHandler+0x364>
      else
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->TxCpltCallback(hsd);
#else
        HAL_SD_TxCpltCallback(hsd);
 800a548:	6878      	ldr	r0, [r7, #4]
 800a54a:	f005 fc73 	bl	800fe34 <HAL_SD_TxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 800a54e:	e137      	b.n	800a7c0 <HAL_SD_IRQHandler+0x364>
    else if ((context & SD_CONTEXT_DMA) != 0U)
 800a550:	68fb      	ldr	r3, [r7, #12]
 800a552:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a556:	2b00      	cmp	r3, #0
 800a558:	f000 8132 	beq.w	800a7c0 <HAL_SD_IRQHandler+0x364>
      hsd->Instance->DLEN = 0;
 800a55c:	687b      	ldr	r3, [r7, #4]
 800a55e:	681b      	ldr	r3, [r3, #0]
 800a560:	2200      	movs	r2, #0
 800a562:	629a      	str	r2, [r3, #40]	; 0x28
      hsd->Instance->DCTRL = 0;
 800a564:	687b      	ldr	r3, [r7, #4]
 800a566:	681b      	ldr	r3, [r3, #0]
 800a568:	2200      	movs	r2, #0
 800a56a:	62da      	str	r2, [r3, #44]	; 0x2c
      hsd->Instance->IDMACTRL = SDMMC_DISABLE_IDMA;
 800a56c:	687b      	ldr	r3, [r7, #4]
 800a56e:	681b      	ldr	r3, [r3, #0]
 800a570:	2200      	movs	r2, #0
 800a572:	651a      	str	r2, [r3, #80]	; 0x50
      if (((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 800a574:	68fb      	ldr	r3, [r7, #12]
 800a576:	f003 0302 	and.w	r3, r3, #2
 800a57a:	2b00      	cmp	r3, #0
 800a57c:	d104      	bne.n	800a588 <HAL_SD_IRQHandler+0x12c>
 800a57e:	68fb      	ldr	r3, [r7, #12]
 800a580:	f003 0320 	and.w	r3, r3, #32
 800a584:	2b00      	cmp	r3, #0
 800a586:	d011      	beq.n	800a5ac <HAL_SD_IRQHandler+0x150>
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 800a588:	687b      	ldr	r3, [r7, #4]
 800a58a:	681b      	ldr	r3, [r3, #0]
 800a58c:	4618      	mov	r0, r3
 800a58e:	f003 fc19 	bl	800ddc4 <SDMMC_CmdStopTransfer>
 800a592:	60b8      	str	r0, [r7, #8]
        if (errorstate != HAL_SD_ERROR_NONE)
 800a594:	68bb      	ldr	r3, [r7, #8]
 800a596:	2b00      	cmp	r3, #0
 800a598:	d008      	beq.n	800a5ac <HAL_SD_IRQHandler+0x150>
          hsd->ErrorCode |= errorstate;
 800a59a:	687b      	ldr	r3, [r7, #4]
 800a59c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800a59e:	68bb      	ldr	r3, [r7, #8]
 800a5a0:	431a      	orrs	r2, r3
 800a5a2:	687b      	ldr	r3, [r7, #4]
 800a5a4:	635a      	str	r2, [r3, #52]	; 0x34
          HAL_SD_ErrorCallback(hsd);
 800a5a6:	6878      	ldr	r0, [r7, #4]
 800a5a8:	f000 f90e 	bl	800a7c8 <HAL_SD_ErrorCallback>
      hsd->State = HAL_SD_STATE_READY;
 800a5ac:	687b      	ldr	r3, [r7, #4]
 800a5ae:	2201      	movs	r2, #1
 800a5b0:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      hsd->Context = SD_CONTEXT_NONE;
 800a5b4:	687b      	ldr	r3, [r7, #4]
 800a5b6:	2200      	movs	r2, #0
 800a5b8:	62da      	str	r2, [r3, #44]	; 0x2c
      if (((context & SD_CONTEXT_WRITE_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 800a5ba:	68fb      	ldr	r3, [r7, #12]
 800a5bc:	f003 0310 	and.w	r3, r3, #16
 800a5c0:	2b00      	cmp	r3, #0
 800a5c2:	d104      	bne.n	800a5ce <HAL_SD_IRQHandler+0x172>
 800a5c4:	68fb      	ldr	r3, [r7, #12]
 800a5c6:	f003 0320 	and.w	r3, r3, #32
 800a5ca:	2b00      	cmp	r3, #0
 800a5cc:	d002      	beq.n	800a5d4 <HAL_SD_IRQHandler+0x178>
        HAL_SD_TxCpltCallback(hsd);
 800a5ce:	6878      	ldr	r0, [r7, #4]
 800a5d0:	f005 fc30 	bl	800fe34 <HAL_SD_TxCpltCallback>
      if (((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 800a5d4:	68fb      	ldr	r3, [r7, #12]
 800a5d6:	f003 0301 	and.w	r3, r3, #1
 800a5da:	2b00      	cmp	r3, #0
 800a5dc:	d105      	bne.n	800a5ea <HAL_SD_IRQHandler+0x18e>
 800a5de:	68fb      	ldr	r3, [r7, #12]
 800a5e0:	f003 0302 	and.w	r3, r3, #2
 800a5e4:	2b00      	cmp	r3, #0
 800a5e6:	f000 80eb 	beq.w	800a7c0 <HAL_SD_IRQHandler+0x364>
        HAL_SD_RxCpltCallback(hsd);
 800a5ea:	6878      	ldr	r0, [r7, #4]
 800a5ec:	f005 fc2c 	bl	800fe48 <HAL_SD_RxCpltCallback>
}
 800a5f0:	e0e6      	b.n	800a7c0 <HAL_SD_IRQHandler+0x364>
  else if ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXFIFOHE) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 800a5f2:	687b      	ldr	r3, [r7, #4]
 800a5f4:	681b      	ldr	r3, [r3, #0]
 800a5f6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a5f8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800a5fc:	2b00      	cmp	r3, #0
 800a5fe:	d008      	beq.n	800a612 <HAL_SD_IRQHandler+0x1b6>
 800a600:	68fb      	ldr	r3, [r7, #12]
 800a602:	f003 0308 	and.w	r3, r3, #8
 800a606:	2b00      	cmp	r3, #0
 800a608:	d003      	beq.n	800a612 <HAL_SD_IRQHandler+0x1b6>
    SD_Write_IT(hsd);
 800a60a:	6878      	ldr	r0, [r7, #4]
 800a60c:	f001 f886 	bl	800b71c <SD_Write_IT>
 800a610:	e0d6      	b.n	800a7c0 <HAL_SD_IRQHandler+0x364>
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_RXOVERR |
 800a612:	687b      	ldr	r3, [r7, #4]
 800a614:	681b      	ldr	r3, [r3, #0]
 800a616:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a618:	f003 033a 	and.w	r3, r3, #58	; 0x3a
 800a61c:	2b00      	cmp	r3, #0
 800a61e:	f000 80a2 	beq.w	800a766 <HAL_SD_IRQHandler+0x30a>
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_IT_DCRCFAIL) != RESET)
 800a622:	687b      	ldr	r3, [r7, #4]
 800a624:	681b      	ldr	r3, [r3, #0]
 800a626:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a628:	f003 0302 	and.w	r3, r3, #2
 800a62c:	2b00      	cmp	r3, #0
 800a62e:	d005      	beq.n	800a63c <HAL_SD_IRQHandler+0x1e0>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 800a630:	687b      	ldr	r3, [r7, #4]
 800a632:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a634:	f043 0202 	orr.w	r2, r3, #2
 800a638:	687b      	ldr	r3, [r7, #4]
 800a63a:	635a      	str	r2, [r3, #52]	; 0x34
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_IT_DTIMEOUT) != RESET)
 800a63c:	687b      	ldr	r3, [r7, #4]
 800a63e:	681b      	ldr	r3, [r3, #0]
 800a640:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a642:	f003 0308 	and.w	r3, r3, #8
 800a646:	2b00      	cmp	r3, #0
 800a648:	d005      	beq.n	800a656 <HAL_SD_IRQHandler+0x1fa>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 800a64a:	687b      	ldr	r3, [r7, #4]
 800a64c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a64e:	f043 0208 	orr.w	r2, r3, #8
 800a652:	687b      	ldr	r3, [r7, #4]
 800a654:	635a      	str	r2, [r3, #52]	; 0x34
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_IT_RXOVERR) != RESET)
 800a656:	687b      	ldr	r3, [r7, #4]
 800a658:	681b      	ldr	r3, [r3, #0]
 800a65a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a65c:	f003 0320 	and.w	r3, r3, #32
 800a660:	2b00      	cmp	r3, #0
 800a662:	d005      	beq.n	800a670 <HAL_SD_IRQHandler+0x214>
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
 800a664:	687b      	ldr	r3, [r7, #4]
 800a666:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a668:	f043 0220 	orr.w	r2, r3, #32
 800a66c:	687b      	ldr	r3, [r7, #4]
 800a66e:	635a      	str	r2, [r3, #52]	; 0x34
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_IT_TXUNDERR) != RESET)
 800a670:	687b      	ldr	r3, [r7, #4]
 800a672:	681b      	ldr	r3, [r3, #0]
 800a674:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a676:	f003 0310 	and.w	r3, r3, #16
 800a67a:	2b00      	cmp	r3, #0
 800a67c:	d005      	beq.n	800a68a <HAL_SD_IRQHandler+0x22e>
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
 800a67e:	687b      	ldr	r3, [r7, #4]
 800a680:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a682:	f043 0210 	orr.w	r2, r3, #16
 800a686:	687b      	ldr	r3, [r7, #4]
 800a688:	635a      	str	r2, [r3, #52]	; 0x34
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 800a68a:	687b      	ldr	r3, [r7, #4]
 800a68c:	681b      	ldr	r3, [r3, #0]
 800a68e:	4a26      	ldr	r2, [pc, #152]	; (800a728 <HAL_SD_IRQHandler+0x2cc>)
 800a690:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_DATAEND | SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | \
 800a692:	687b      	ldr	r3, [r7, #4]
 800a694:	681b      	ldr	r3, [r3, #0]
 800a696:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800a698:	687b      	ldr	r3, [r7, #4]
 800a69a:	681b      	ldr	r3, [r3, #0]
 800a69c:	f422 729d 	bic.w	r2, r2, #314	; 0x13a
 800a6a0:	63da      	str	r2, [r3, #60]	; 0x3c
    __SDMMC_CMDTRANS_DISABLE(hsd->Instance);
 800a6a2:	687b      	ldr	r3, [r7, #4]
 800a6a4:	681b      	ldr	r3, [r3, #0]
 800a6a6:	68da      	ldr	r2, [r3, #12]
 800a6a8:	687b      	ldr	r3, [r7, #4]
 800a6aa:	681b      	ldr	r3, [r3, #0]
 800a6ac:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800a6b0:	60da      	str	r2, [r3, #12]
    hsd->Instance->DCTRL |= SDMMC_DCTRL_FIFORST;
 800a6b2:	687b      	ldr	r3, [r7, #4]
 800a6b4:	681b      	ldr	r3, [r3, #0]
 800a6b6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a6b8:	687b      	ldr	r3, [r7, #4]
 800a6ba:	681b      	ldr	r3, [r3, #0]
 800a6bc:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800a6c0:	62da      	str	r2, [r3, #44]	; 0x2c
    hsd->Instance->CMD |= SDMMC_CMD_CMDSTOP;
 800a6c2:	687b      	ldr	r3, [r7, #4]
 800a6c4:	681b      	ldr	r3, [r3, #0]
 800a6c6:	68da      	ldr	r2, [r3, #12]
 800a6c8:	687b      	ldr	r3, [r7, #4]
 800a6ca:	681b      	ldr	r3, [r3, #0]
 800a6cc:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800a6d0:	60da      	str	r2, [r3, #12]
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 800a6d2:	687b      	ldr	r3, [r7, #4]
 800a6d4:	681b      	ldr	r3, [r3, #0]
 800a6d6:	4618      	mov	r0, r3
 800a6d8:	f003 fb74 	bl	800ddc4 <SDMMC_CmdStopTransfer>
 800a6dc:	4602      	mov	r2, r0
 800a6de:	687b      	ldr	r3, [r7, #4]
 800a6e0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a6e2:	431a      	orrs	r2, r3
 800a6e4:	687b      	ldr	r3, [r7, #4]
 800a6e6:	635a      	str	r2, [r3, #52]	; 0x34
    hsd->Instance->CMD &= ~(SDMMC_CMD_CMDSTOP);
 800a6e8:	687b      	ldr	r3, [r7, #4]
 800a6ea:	681b      	ldr	r3, [r3, #0]
 800a6ec:	68da      	ldr	r2, [r3, #12]
 800a6ee:	687b      	ldr	r3, [r7, #4]
 800a6f0:	681b      	ldr	r3, [r3, #0]
 800a6f2:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800a6f6:	60da      	str	r2, [r3, #12]
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DABORT);
 800a6f8:	687b      	ldr	r3, [r7, #4]
 800a6fa:	681b      	ldr	r3, [r3, #0]
 800a6fc:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800a700:	639a      	str	r2, [r3, #56]	; 0x38
    if ((context & SD_CONTEXT_IT) != 0U)
 800a702:	68fb      	ldr	r3, [r7, #12]
 800a704:	f003 0308 	and.w	r3, r3, #8
 800a708:	2b00      	cmp	r3, #0
 800a70a:	d00f      	beq.n	800a72c <HAL_SD_IRQHandler+0x2d0>
      hsd->State = HAL_SD_STATE_READY;
 800a70c:	687b      	ldr	r3, [r7, #4]
 800a70e:	2201      	movs	r2, #1
 800a710:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      hsd->Context = SD_CONTEXT_NONE;
 800a714:	687b      	ldr	r3, [r7, #4]
 800a716:	2200      	movs	r2, #0
 800a718:	62da      	str	r2, [r3, #44]	; 0x2c
      HAL_SD_ErrorCallback(hsd);
 800a71a:	6878      	ldr	r0, [r7, #4]
 800a71c:	f000 f854 	bl	800a7c8 <HAL_SD_ErrorCallback>
}
 800a720:	e04e      	b.n	800a7c0 <HAL_SD_IRQHandler+0x364>
 800a722:	bf00      	nop
 800a724:	ffff3ec5 	.word	0xffff3ec5
 800a728:	18000f3a 	.word	0x18000f3a
    else if ((context & SD_CONTEXT_DMA) != 0U)
 800a72c:	68fb      	ldr	r3, [r7, #12]
 800a72e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a732:	2b00      	cmp	r3, #0
 800a734:	d044      	beq.n	800a7c0 <HAL_SD_IRQHandler+0x364>
      if (hsd->ErrorCode != HAL_SD_ERROR_NONE)
 800a736:	687b      	ldr	r3, [r7, #4]
 800a738:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a73a:	2b00      	cmp	r3, #0
 800a73c:	d040      	beq.n	800a7c0 <HAL_SD_IRQHandler+0x364>
        __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_IDMABTC);
 800a73e:	687b      	ldr	r3, [r7, #4]
 800a740:	681b      	ldr	r3, [r3, #0]
 800a742:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800a744:	687b      	ldr	r3, [r7, #4]
 800a746:	681b      	ldr	r3, [r3, #0]
 800a748:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
 800a74c:	63da      	str	r2, [r3, #60]	; 0x3c
        hsd->Instance->IDMACTRL = SDMMC_DISABLE_IDMA;
 800a74e:	687b      	ldr	r3, [r7, #4]
 800a750:	681b      	ldr	r3, [r3, #0]
 800a752:	2200      	movs	r2, #0
 800a754:	651a      	str	r2, [r3, #80]	; 0x50
        hsd->State = HAL_SD_STATE_READY;
 800a756:	687b      	ldr	r3, [r7, #4]
 800a758:	2201      	movs	r2, #1
 800a75a:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
        HAL_SD_ErrorCallback(hsd);
 800a75e:	6878      	ldr	r0, [r7, #4]
 800a760:	f000 f832 	bl	800a7c8 <HAL_SD_ErrorCallback>
}
 800a764:	e02c      	b.n	800a7c0 <HAL_SD_IRQHandler+0x364>
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_IDMABTC) != RESET)
 800a766:	687b      	ldr	r3, [r7, #4]
 800a768:	681b      	ldr	r3, [r3, #0]
 800a76a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a76c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800a770:	2b00      	cmp	r3, #0
 800a772:	d025      	beq.n	800a7c0 <HAL_SD_IRQHandler+0x364>
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_IDMABTC);
 800a774:	687b      	ldr	r3, [r7, #4]
 800a776:	681b      	ldr	r3, [r3, #0]
 800a778:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a77c:	639a      	str	r2, [r3, #56]	; 0x38
    if (READ_BIT(hsd->Instance->IDMACTRL, SDMMC_IDMA_IDMABACT) == 0U)
 800a77e:	687b      	ldr	r3, [r7, #4]
 800a780:	681b      	ldr	r3, [r3, #0]
 800a782:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a784:	f003 0304 	and.w	r3, r3, #4
 800a788:	2b00      	cmp	r3, #0
 800a78a:	d10c      	bne.n	800a7a6 <HAL_SD_IRQHandler+0x34a>
      if ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U)
 800a78c:	68fb      	ldr	r3, [r7, #12]
 800a78e:	f003 0320 	and.w	r3, r3, #32
 800a792:	2b00      	cmp	r3, #0
 800a794:	d003      	beq.n	800a79e <HAL_SD_IRQHandler+0x342>
        HAL_SDEx_Write_DMADoubleBuf1CpltCallback(hsd);
 800a796:	6878      	ldr	r0, [r7, #4]
 800a798:	f001 f828 	bl	800b7ec <HAL_SDEx_Write_DMADoubleBuf1CpltCallback>
}
 800a79c:	e010      	b.n	800a7c0 <HAL_SD_IRQHandler+0x364>
        HAL_SDEx_Read_DMADoubleBuf1CpltCallback(hsd);
 800a79e:	6878      	ldr	r0, [r7, #4]
 800a7a0:	f001 f810 	bl	800b7c4 <HAL_SDEx_Read_DMADoubleBuf1CpltCallback>
}
 800a7a4:	e00c      	b.n	800a7c0 <HAL_SD_IRQHandler+0x364>
      if ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U)
 800a7a6:	68fb      	ldr	r3, [r7, #12]
 800a7a8:	f003 0320 	and.w	r3, r3, #32
 800a7ac:	2b00      	cmp	r3, #0
 800a7ae:	d003      	beq.n	800a7b8 <HAL_SD_IRQHandler+0x35c>
        HAL_SDEx_Write_DMADoubleBuf0CpltCallback(hsd);
 800a7b0:	6878      	ldr	r0, [r7, #4]
 800a7b2:	f001 f811 	bl	800b7d8 <HAL_SDEx_Write_DMADoubleBuf0CpltCallback>
}
 800a7b6:	e003      	b.n	800a7c0 <HAL_SD_IRQHandler+0x364>
        HAL_SDEx_Read_DMADoubleBuf0CpltCallback(hsd);
 800a7b8:	6878      	ldr	r0, [r7, #4]
 800a7ba:	f000 fff9 	bl	800b7b0 <HAL_SDEx_Read_DMADoubleBuf0CpltCallback>
}
 800a7be:	e7ff      	b.n	800a7c0 <HAL_SD_IRQHandler+0x364>
 800a7c0:	bf00      	nop
 800a7c2:	3710      	adds	r7, #16
 800a7c4:	46bd      	mov	sp, r7
 800a7c6:	bd80      	pop	{r7, pc}

0800a7c8 <HAL_SD_ErrorCallback>:
  * @brief SD error callbacks
  * @param hsd: Pointer SD handle
  * @retval None
  */
__weak void HAL_SD_ErrorCallback(SD_HandleTypeDef *hsd)
{
 800a7c8:	b480      	push	{r7}
 800a7ca:	b083      	sub	sp, #12
 800a7cc:	af00      	add	r7, sp, #0
 800a7ce:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SD_ErrorCallback can be implemented in the user file
   */
}
 800a7d0:	bf00      	nop
 800a7d2:	370c      	adds	r7, #12
 800a7d4:	46bd      	mov	sp, r7
 800a7d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7da:	4770      	bx	lr

0800a7dc <HAL_SD_GetCardCSD>:
  * @param  pCSD: Pointer to a HAL_SD_CardCSDTypeDef structure that
  *         contains all CSD register parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
 800a7dc:	b480      	push	{r7}
 800a7de:	b083      	sub	sp, #12
 800a7e0:	af00      	add	r7, sp, #0
 800a7e2:	6078      	str	r0, [r7, #4]
 800a7e4:	6039      	str	r1, [r7, #0]
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 800a7e6:	687b      	ldr	r3, [r7, #4]
 800a7e8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a7ea:	0f9b      	lsrs	r3, r3, #30
 800a7ec:	b2da      	uxtb	r2, r3
 800a7ee:	683b      	ldr	r3, [r7, #0]
 800a7f0:	701a      	strb	r2, [r3, #0]

  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 800a7f2:	687b      	ldr	r3, [r7, #4]
 800a7f4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a7f6:	0e9b      	lsrs	r3, r3, #26
 800a7f8:	b2db      	uxtb	r3, r3
 800a7fa:	f003 030f 	and.w	r3, r3, #15
 800a7fe:	b2da      	uxtb	r2, r3
 800a800:	683b      	ldr	r3, [r7, #0]
 800a802:	705a      	strb	r2, [r3, #1]

  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 800a804:	687b      	ldr	r3, [r7, #4]
 800a806:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a808:	0e1b      	lsrs	r3, r3, #24
 800a80a:	b2db      	uxtb	r3, r3
 800a80c:	f003 0303 	and.w	r3, r3, #3
 800a810:	b2da      	uxtb	r2, r3
 800a812:	683b      	ldr	r3, [r7, #0]
 800a814:	709a      	strb	r2, [r3, #2]

  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 800a816:	687b      	ldr	r3, [r7, #4]
 800a818:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a81a:	0c1b      	lsrs	r3, r3, #16
 800a81c:	b2da      	uxtb	r2, r3
 800a81e:	683b      	ldr	r3, [r7, #0]
 800a820:	70da      	strb	r2, [r3, #3]

  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 800a822:	687b      	ldr	r3, [r7, #4]
 800a824:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a826:	0a1b      	lsrs	r3, r3, #8
 800a828:	b2da      	uxtb	r2, r3
 800a82a:	683b      	ldr	r3, [r7, #0]
 800a82c:	711a      	strb	r2, [r3, #4]

  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 800a82e:	687b      	ldr	r3, [r7, #4]
 800a830:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a832:	b2da      	uxtb	r2, r3
 800a834:	683b      	ldr	r3, [r7, #0]
 800a836:	715a      	strb	r2, [r3, #5]

  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 800a838:	687b      	ldr	r3, [r7, #4]
 800a83a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800a83c:	0d1b      	lsrs	r3, r3, #20
 800a83e:	b29a      	uxth	r2, r3
 800a840:	683b      	ldr	r3, [r7, #0]
 800a842:	80da      	strh	r2, [r3, #6]

  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 800a844:	687b      	ldr	r3, [r7, #4]
 800a846:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800a848:	0c1b      	lsrs	r3, r3, #16
 800a84a:	b2db      	uxtb	r3, r3
 800a84c:	f003 030f 	and.w	r3, r3, #15
 800a850:	b2da      	uxtb	r2, r3
 800a852:	683b      	ldr	r3, [r7, #0]
 800a854:	721a      	strb	r2, [r3, #8]

  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 800a856:	687b      	ldr	r3, [r7, #4]
 800a858:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800a85a:	0bdb      	lsrs	r3, r3, #15
 800a85c:	b2db      	uxtb	r3, r3
 800a85e:	f003 0301 	and.w	r3, r3, #1
 800a862:	b2da      	uxtb	r2, r3
 800a864:	683b      	ldr	r3, [r7, #0]
 800a866:	725a      	strb	r2, [r3, #9]

  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 800a868:	687b      	ldr	r3, [r7, #4]
 800a86a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800a86c:	0b9b      	lsrs	r3, r3, #14
 800a86e:	b2db      	uxtb	r3, r3
 800a870:	f003 0301 	and.w	r3, r3, #1
 800a874:	b2da      	uxtb	r2, r3
 800a876:	683b      	ldr	r3, [r7, #0]
 800a878:	729a      	strb	r2, [r3, #10]

  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 800a87a:	687b      	ldr	r3, [r7, #4]
 800a87c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800a87e:	0b5b      	lsrs	r3, r3, #13
 800a880:	b2db      	uxtb	r3, r3
 800a882:	f003 0301 	and.w	r3, r3, #1
 800a886:	b2da      	uxtb	r2, r3
 800a888:	683b      	ldr	r3, [r7, #0]
 800a88a:	72da      	strb	r2, [r3, #11]

  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 800a88c:	687b      	ldr	r3, [r7, #4]
 800a88e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800a890:	0b1b      	lsrs	r3, r3, #12
 800a892:	b2db      	uxtb	r3, r3
 800a894:	f003 0301 	and.w	r3, r3, #1
 800a898:	b2da      	uxtb	r2, r3
 800a89a:	683b      	ldr	r3, [r7, #0]
 800a89c:	731a      	strb	r2, [r3, #12]

  pCSD->Reserved2 = 0U; /*!< Reserved */
 800a89e:	683b      	ldr	r3, [r7, #0]
 800a8a0:	2200      	movs	r2, #0
 800a8a2:	735a      	strb	r2, [r3, #13]

  if (hsd->SdCard.CardType == CARD_SDSC)
 800a8a4:	687b      	ldr	r3, [r7, #4]
 800a8a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a8a8:	2b00      	cmp	r3, #0
 800a8aa:	d163      	bne.n	800a974 <HAL_SD_GetCardCSD+0x198>
  {
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 800a8ac:	687b      	ldr	r3, [r7, #4]
 800a8ae:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800a8b0:	009a      	lsls	r2, r3, #2
 800a8b2:	f640 73fc 	movw	r3, #4092	; 0xffc
 800a8b6:	4013      	ands	r3, r2
 800a8b8:	687a      	ldr	r2, [r7, #4]
 800a8ba:	6e52      	ldr	r2, [r2, #100]	; 0x64
 800a8bc:	0f92      	lsrs	r2, r2, #30
 800a8be:	431a      	orrs	r2, r3
 800a8c0:	683b      	ldr	r3, [r7, #0]
 800a8c2:	611a      	str	r2, [r3, #16]

    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 800a8c4:	687b      	ldr	r3, [r7, #4]
 800a8c6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800a8c8:	0edb      	lsrs	r3, r3, #27
 800a8ca:	b2db      	uxtb	r3, r3
 800a8cc:	f003 0307 	and.w	r3, r3, #7
 800a8d0:	b2da      	uxtb	r2, r3
 800a8d2:	683b      	ldr	r3, [r7, #0]
 800a8d4:	751a      	strb	r2, [r3, #20]

    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 800a8d6:	687b      	ldr	r3, [r7, #4]
 800a8d8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800a8da:	0e1b      	lsrs	r3, r3, #24
 800a8dc:	b2db      	uxtb	r3, r3
 800a8de:	f003 0307 	and.w	r3, r3, #7
 800a8e2:	b2da      	uxtb	r2, r3
 800a8e4:	683b      	ldr	r3, [r7, #0]
 800a8e6:	755a      	strb	r2, [r3, #21]

    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 800a8e8:	687b      	ldr	r3, [r7, #4]
 800a8ea:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800a8ec:	0d5b      	lsrs	r3, r3, #21
 800a8ee:	b2db      	uxtb	r3, r3
 800a8f0:	f003 0307 	and.w	r3, r3, #7
 800a8f4:	b2da      	uxtb	r2, r3
 800a8f6:	683b      	ldr	r3, [r7, #0]
 800a8f8:	759a      	strb	r2, [r3, #22]

    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 800a8fa:	687b      	ldr	r3, [r7, #4]
 800a8fc:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800a8fe:	0c9b      	lsrs	r3, r3, #18
 800a900:	b2db      	uxtb	r3, r3
 800a902:	f003 0307 	and.w	r3, r3, #7
 800a906:	b2da      	uxtb	r2, r3
 800a908:	683b      	ldr	r3, [r7, #0]
 800a90a:	75da      	strb	r2, [r3, #23]

    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 800a90c:	687b      	ldr	r3, [r7, #4]
 800a90e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800a910:	0bdb      	lsrs	r3, r3, #15
 800a912:	b2db      	uxtb	r3, r3
 800a914:	f003 0307 	and.w	r3, r3, #7
 800a918:	b2da      	uxtb	r2, r3
 800a91a:	683b      	ldr	r3, [r7, #0]
 800a91c:	761a      	strb	r2, [r3, #24]

    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 800a91e:	683b      	ldr	r3, [r7, #0]
 800a920:	691b      	ldr	r3, [r3, #16]
 800a922:	1c5a      	adds	r2, r3, #1
 800a924:	687b      	ldr	r3, [r7, #4]
 800a926:	649a      	str	r2, [r3, #72]	; 0x48
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 800a928:	683b      	ldr	r3, [r7, #0]
 800a92a:	7e1b      	ldrb	r3, [r3, #24]
 800a92c:	b2db      	uxtb	r3, r3
 800a92e:	f003 0307 	and.w	r3, r3, #7
 800a932:	3302      	adds	r3, #2
 800a934:	2201      	movs	r2, #1
 800a936:	fa02 f303 	lsl.w	r3, r2, r3
 800a93a:	687a      	ldr	r2, [r7, #4]
 800a93c:	6c92      	ldr	r2, [r2, #72]	; 0x48
 800a93e:	fb02 f203 	mul.w	r2, r2, r3
 800a942:	687b      	ldr	r3, [r7, #4]
 800a944:	649a      	str	r2, [r3, #72]	; 0x48
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 800a946:	683b      	ldr	r3, [r7, #0]
 800a948:	7a1b      	ldrb	r3, [r3, #8]
 800a94a:	b2db      	uxtb	r3, r3
 800a94c:	f003 030f 	and.w	r3, r3, #15
 800a950:	2201      	movs	r2, #1
 800a952:	409a      	lsls	r2, r3
 800a954:	687b      	ldr	r3, [r7, #4]
 800a956:	64da      	str	r2, [r3, #76]	; 0x4c

    hsd->SdCard.LogBlockNbr = (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 800a958:	687b      	ldr	r3, [r7, #4]
 800a95a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800a95c:	687a      	ldr	r2, [r7, #4]
 800a95e:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 800a960:	0a52      	lsrs	r2, r2, #9
 800a962:	fb02 f203 	mul.w	r2, r2, r3
 800a966:	687b      	ldr	r3, [r7, #4]
 800a968:	651a      	str	r2, [r3, #80]	; 0x50
    hsd->SdCard.LogBlockSize = 512U;
 800a96a:	687b      	ldr	r3, [r7, #4]
 800a96c:	f44f 7200 	mov.w	r2, #512	; 0x200
 800a970:	655a      	str	r2, [r3, #84]	; 0x54
 800a972:	e031      	b.n	800a9d8 <HAL_SD_GetCardCSD+0x1fc>
  }
  else if (hsd->SdCard.CardType == CARD_SDHC_SDXC)
 800a974:	687b      	ldr	r3, [r7, #4]
 800a976:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a978:	2b01      	cmp	r3, #1
 800a97a:	d11d      	bne.n	800a9b8 <HAL_SD_GetCardCSD+0x1dc>
  {
    /* Byte 7 */
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 800a97c:	687b      	ldr	r3, [r7, #4]
 800a97e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800a980:	041b      	lsls	r3, r3, #16
 800a982:	f403 127c 	and.w	r2, r3, #4128768	; 0x3f0000
 800a986:	687b      	ldr	r3, [r7, #4]
 800a988:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800a98a:	0c1b      	lsrs	r3, r3, #16
 800a98c:	431a      	orrs	r2, r3
 800a98e:	683b      	ldr	r3, [r7, #0]
 800a990:	611a      	str	r2, [r3, #16]

    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 800a992:	683b      	ldr	r3, [r7, #0]
 800a994:	691b      	ldr	r3, [r3, #16]
 800a996:	3301      	adds	r3, #1
 800a998:	029a      	lsls	r2, r3, #10
 800a99a:	687b      	ldr	r3, [r7, #4]
 800a99c:	649a      	str	r2, [r3, #72]	; 0x48
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 800a99e:	687b      	ldr	r3, [r7, #4]
 800a9a0:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800a9a2:	687b      	ldr	r3, [r7, #4]
 800a9a4:	651a      	str	r2, [r3, #80]	; 0x50
    hsd->SdCard.BlockSize = 512U;
 800a9a6:	687b      	ldr	r3, [r7, #4]
 800a9a8:	f44f 7200 	mov.w	r2, #512	; 0x200
 800a9ac:	64da      	str	r2, [r3, #76]	; 0x4c
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 800a9ae:	687b      	ldr	r3, [r7, #4]
 800a9b0:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800a9b2:	687b      	ldr	r3, [r7, #4]
 800a9b4:	655a      	str	r2, [r3, #84]	; 0x54
 800a9b6:	e00f      	b.n	800a9d8 <HAL_SD_GetCardCSD+0x1fc>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800a9b8:	687b      	ldr	r3, [r7, #4]
 800a9ba:	681b      	ldr	r3, [r3, #0]
 800a9bc:	4a58      	ldr	r2, [pc, #352]	; (800ab20 <HAL_SD_GetCardCSD+0x344>)
 800a9be:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800a9c0:	687b      	ldr	r3, [r7, #4]
 800a9c2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a9c4:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800a9c8:	687b      	ldr	r3, [r7, #4]
 800a9ca:	635a      	str	r2, [r3, #52]	; 0x34
    hsd->State = HAL_SD_STATE_READY;
 800a9cc:	687b      	ldr	r3, [r7, #4]
 800a9ce:	2201      	movs	r2, #1
 800a9d0:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    return HAL_ERROR;
 800a9d4:	2301      	movs	r3, #1
 800a9d6:	e09d      	b.n	800ab14 <HAL_SD_GetCardCSD+0x338>
  }

  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 800a9d8:	687b      	ldr	r3, [r7, #4]
 800a9da:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800a9dc:	0b9b      	lsrs	r3, r3, #14
 800a9de:	b2db      	uxtb	r3, r3
 800a9e0:	f003 0301 	and.w	r3, r3, #1
 800a9e4:	b2da      	uxtb	r2, r3
 800a9e6:	683b      	ldr	r3, [r7, #0]
 800a9e8:	765a      	strb	r2, [r3, #25]

  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 800a9ea:	687b      	ldr	r3, [r7, #4]
 800a9ec:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800a9ee:	09db      	lsrs	r3, r3, #7
 800a9f0:	b2db      	uxtb	r3, r3
 800a9f2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a9f6:	b2da      	uxtb	r2, r3
 800a9f8:	683b      	ldr	r3, [r7, #0]
 800a9fa:	769a      	strb	r2, [r3, #26]

  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 800a9fc:	687b      	ldr	r3, [r7, #4]
 800a9fe:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800aa00:	b2db      	uxtb	r3, r3
 800aa02:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800aa06:	b2da      	uxtb	r2, r3
 800aa08:	683b      	ldr	r3, [r7, #0]
 800aa0a:	76da      	strb	r2, [r3, #27]

  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 800aa0c:	687b      	ldr	r3, [r7, #4]
 800aa0e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800aa10:	0fdb      	lsrs	r3, r3, #31
 800aa12:	b2da      	uxtb	r2, r3
 800aa14:	683b      	ldr	r3, [r7, #0]
 800aa16:	771a      	strb	r2, [r3, #28]

  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 800aa18:	687b      	ldr	r3, [r7, #4]
 800aa1a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800aa1c:	0f5b      	lsrs	r3, r3, #29
 800aa1e:	b2db      	uxtb	r3, r3
 800aa20:	f003 0303 	and.w	r3, r3, #3
 800aa24:	b2da      	uxtb	r2, r3
 800aa26:	683b      	ldr	r3, [r7, #0]
 800aa28:	775a      	strb	r2, [r3, #29]

  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 800aa2a:	687b      	ldr	r3, [r7, #4]
 800aa2c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800aa2e:	0e9b      	lsrs	r3, r3, #26
 800aa30:	b2db      	uxtb	r3, r3
 800aa32:	f003 0307 	and.w	r3, r3, #7
 800aa36:	b2da      	uxtb	r2, r3
 800aa38:	683b      	ldr	r3, [r7, #0]
 800aa3a:	779a      	strb	r2, [r3, #30]

  pCSD->MaxWrBlockLen = (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 800aa3c:	687b      	ldr	r3, [r7, #4]
 800aa3e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800aa40:	0d9b      	lsrs	r3, r3, #22
 800aa42:	b2db      	uxtb	r3, r3
 800aa44:	f003 030f 	and.w	r3, r3, #15
 800aa48:	b2da      	uxtb	r2, r3
 800aa4a:	683b      	ldr	r3, [r7, #0]
 800aa4c:	77da      	strb	r2, [r3, #31]

  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 800aa4e:	687b      	ldr	r3, [r7, #4]
 800aa50:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800aa52:	0d5b      	lsrs	r3, r3, #21
 800aa54:	b2db      	uxtb	r3, r3
 800aa56:	f003 0301 	and.w	r3, r3, #1
 800aa5a:	b2da      	uxtb	r2, r3
 800aa5c:	683b      	ldr	r3, [r7, #0]
 800aa5e:	f883 2020 	strb.w	r2, [r3, #32]

  pCSD->Reserved3 = 0;
 800aa62:	683b      	ldr	r3, [r7, #0]
 800aa64:	2200      	movs	r2, #0
 800aa66:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 800aa6a:	687b      	ldr	r3, [r7, #4]
 800aa6c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800aa6e:	0c1b      	lsrs	r3, r3, #16
 800aa70:	b2db      	uxtb	r3, r3
 800aa72:	f003 0301 	and.w	r3, r3, #1
 800aa76:	b2da      	uxtb	r2, r3
 800aa78:	683b      	ldr	r3, [r7, #0]
 800aa7a:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22

  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 800aa7e:	687b      	ldr	r3, [r7, #4]
 800aa80:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800aa82:	0bdb      	lsrs	r3, r3, #15
 800aa84:	b2db      	uxtb	r3, r3
 800aa86:	f003 0301 	and.w	r3, r3, #1
 800aa8a:	b2da      	uxtb	r2, r3
 800aa8c:	683b      	ldr	r3, [r7, #0]
 800aa8e:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23

  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 800aa92:	687b      	ldr	r3, [r7, #4]
 800aa94:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800aa96:	0b9b      	lsrs	r3, r3, #14
 800aa98:	b2db      	uxtb	r3, r3
 800aa9a:	f003 0301 	and.w	r3, r3, #1
 800aa9e:	b2da      	uxtb	r2, r3
 800aaa0:	683b      	ldr	r3, [r7, #0]
 800aaa2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 800aaa6:	687b      	ldr	r3, [r7, #4]
 800aaa8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800aaaa:	0b5b      	lsrs	r3, r3, #13
 800aaac:	b2db      	uxtb	r3, r3
 800aaae:	f003 0301 	and.w	r3, r3, #1
 800aab2:	b2da      	uxtb	r2, r3
 800aab4:	683b      	ldr	r3, [r7, #0]
 800aab6:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 800aaba:	687b      	ldr	r3, [r7, #4]
 800aabc:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800aabe:	0b1b      	lsrs	r3, r3, #12
 800aac0:	b2db      	uxtb	r3, r3
 800aac2:	f003 0301 	and.w	r3, r3, #1
 800aac6:	b2da      	uxtb	r2, r3
 800aac8:	683b      	ldr	r3, [r7, #0]
 800aaca:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26

  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 800aace:	687b      	ldr	r3, [r7, #4]
 800aad0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800aad2:	0a9b      	lsrs	r3, r3, #10
 800aad4:	b2db      	uxtb	r3, r3
 800aad6:	f003 0303 	and.w	r3, r3, #3
 800aada:	b2da      	uxtb	r2, r3
 800aadc:	683b      	ldr	r3, [r7, #0]
 800aade:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27

  pCSD->ECC = (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 800aae2:	687b      	ldr	r3, [r7, #4]
 800aae4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800aae6:	0a1b      	lsrs	r3, r3, #8
 800aae8:	b2db      	uxtb	r3, r3
 800aaea:	f003 0303 	and.w	r3, r3, #3
 800aaee:	b2da      	uxtb	r2, r3
 800aaf0:	683b      	ldr	r3, [r7, #0]
 800aaf2:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 800aaf6:	687b      	ldr	r3, [r7, #4]
 800aaf8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800aafa:	085b      	lsrs	r3, r3, #1
 800aafc:	b2db      	uxtb	r3, r3
 800aafe:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800ab02:	b2da      	uxtb	r2, r3
 800ab04:	683b      	ldr	r3, [r7, #0]
 800ab06:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  pCSD->Reserved4 = 1;
 800ab0a:	683b      	ldr	r3, [r7, #0]
 800ab0c:	2201      	movs	r2, #1
 800ab0e:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a

  return HAL_OK;
 800ab12:	2300      	movs	r3, #0
}
 800ab14:	4618      	mov	r0, r3
 800ab16:	370c      	adds	r7, #12
 800ab18:	46bd      	mov	sp, r7
 800ab1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab1e:	4770      	bx	lr
 800ab20:	1fe00fff 	.word	0x1fe00fff

0800ab24 <HAL_SD_GetCardStatus>:
  * @param  pStatus: Pointer to the HAL_SD_CardStatusTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardStatus(SD_HandleTypeDef *hsd, HAL_SD_CardStatusTypeDef *pStatus)
{
 800ab24:	b580      	push	{r7, lr}
 800ab26:	b094      	sub	sp, #80	; 0x50
 800ab28:	af00      	add	r7, sp, #0
 800ab2a:	6078      	str	r0, [r7, #4]
 800ab2c:	6039      	str	r1, [r7, #0]
  uint32_t sd_status[16];
  uint32_t errorstate;
  HAL_StatusTypeDef status = HAL_OK;
 800ab2e:	2300      	movs	r3, #0
 800ab30:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f

  errorstate = SD_SendSDStatus(hsd, sd_status);
 800ab34:	f107 0308 	add.w	r3, r7, #8
 800ab38:	4619      	mov	r1, r3
 800ab3a:	6878      	ldr	r0, [r7, #4]
 800ab3c:	f000 fb4a 	bl	800b1d4 <SD_SendSDStatus>
 800ab40:	64b8      	str	r0, [r7, #72]	; 0x48
  if (errorstate != HAL_SD_ERROR_NONE)
 800ab42:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800ab44:	2b00      	cmp	r3, #0
 800ab46:	d011      	beq.n	800ab6c <HAL_SD_GetCardStatus+0x48>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800ab48:	687b      	ldr	r3, [r7, #4]
 800ab4a:	681b      	ldr	r3, [r3, #0]
 800ab4c:	4a4f      	ldr	r2, [pc, #316]	; (800ac8c <HAL_SD_GetCardStatus+0x168>)
 800ab4e:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 800ab50:	687b      	ldr	r3, [r7, #4]
 800ab52:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800ab54:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800ab56:	431a      	orrs	r2, r3
 800ab58:	687b      	ldr	r3, [r7, #4]
 800ab5a:	635a      	str	r2, [r3, #52]	; 0x34
    hsd->State = HAL_SD_STATE_READY;
 800ab5c:	687b      	ldr	r3, [r7, #4]
 800ab5e:	2201      	movs	r2, #1
 800ab60:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    status = HAL_ERROR;
 800ab64:	2301      	movs	r3, #1
 800ab66:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
 800ab6a:	e070      	b.n	800ac4e <HAL_SD_GetCardStatus+0x12a>
  }
  else
  {
    pStatus->DataBusWidth = (uint8_t)((sd_status[0] & 0xC0U) >> 6U);
 800ab6c:	68bb      	ldr	r3, [r7, #8]
 800ab6e:	099b      	lsrs	r3, r3, #6
 800ab70:	b2db      	uxtb	r3, r3
 800ab72:	f003 0303 	and.w	r3, r3, #3
 800ab76:	b2da      	uxtb	r2, r3
 800ab78:	683b      	ldr	r3, [r7, #0]
 800ab7a:	701a      	strb	r2, [r3, #0]

    pStatus->SecuredMode = (uint8_t)((sd_status[0] & 0x20U) >> 5U);
 800ab7c:	68bb      	ldr	r3, [r7, #8]
 800ab7e:	095b      	lsrs	r3, r3, #5
 800ab80:	b2db      	uxtb	r3, r3
 800ab82:	f003 0301 	and.w	r3, r3, #1
 800ab86:	b2da      	uxtb	r2, r3
 800ab88:	683b      	ldr	r3, [r7, #0]
 800ab8a:	705a      	strb	r2, [r3, #1]

    pStatus->CardType = (uint16_t)(((sd_status[0] & 0x00FF0000U) >> 8U) | ((sd_status[0] & 0xFF000000U) >> 24U));
 800ab8c:	68bb      	ldr	r3, [r7, #8]
 800ab8e:	0a1b      	lsrs	r3, r3, #8
 800ab90:	b29b      	uxth	r3, r3
 800ab92:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800ab96:	b29a      	uxth	r2, r3
 800ab98:	68bb      	ldr	r3, [r7, #8]
 800ab9a:	0e1b      	lsrs	r3, r3, #24
 800ab9c:	b29b      	uxth	r3, r3
 800ab9e:	4313      	orrs	r3, r2
 800aba0:	b29a      	uxth	r2, r3
 800aba2:	683b      	ldr	r3, [r7, #0]
 800aba4:	805a      	strh	r2, [r3, #2]

    pStatus->ProtectedAreaSize = (((sd_status[1] & 0xFFU) << 24U)    | ((sd_status[1] & 0xFF00U) << 8U) |
 800aba6:	68fb      	ldr	r3, [r7, #12]
 800aba8:	061a      	lsls	r2, r3, #24
 800abaa:	68fb      	ldr	r3, [r7, #12]
 800abac:	021b      	lsls	r3, r3, #8
 800abae:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800abb2:	431a      	orrs	r2, r3
                                  ((sd_status[1] & 0xFF0000U) >> 8U) | ((sd_status[1] & 0xFF000000U) >> 24U));
 800abb4:	68fb      	ldr	r3, [r7, #12]
 800abb6:	0a1b      	lsrs	r3, r3, #8
 800abb8:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    pStatus->ProtectedAreaSize = (((sd_status[1] & 0xFFU) << 24U)    | ((sd_status[1] & 0xFF00U) << 8U) |
 800abbc:	431a      	orrs	r2, r3
                                  ((sd_status[1] & 0xFF0000U) >> 8U) | ((sd_status[1] & 0xFF000000U) >> 24U));
 800abbe:	68fb      	ldr	r3, [r7, #12]
 800abc0:	0e1b      	lsrs	r3, r3, #24
 800abc2:	431a      	orrs	r2, r3
    pStatus->ProtectedAreaSize = (((sd_status[1] & 0xFFU) << 24U)    | ((sd_status[1] & 0xFF00U) << 8U) |
 800abc4:	683b      	ldr	r3, [r7, #0]
 800abc6:	605a      	str	r2, [r3, #4]

    pStatus->SpeedClass = (uint8_t)(sd_status[2] & 0xFFU);
 800abc8:	693b      	ldr	r3, [r7, #16]
 800abca:	b2da      	uxtb	r2, r3
 800abcc:	683b      	ldr	r3, [r7, #0]
 800abce:	721a      	strb	r2, [r3, #8]

    pStatus->PerformanceMove = (uint8_t)((sd_status[2] & 0xFF00U) >> 8U);
 800abd0:	693b      	ldr	r3, [r7, #16]
 800abd2:	0a1b      	lsrs	r3, r3, #8
 800abd4:	b2da      	uxtb	r2, r3
 800abd6:	683b      	ldr	r3, [r7, #0]
 800abd8:	725a      	strb	r2, [r3, #9]

    pStatus->AllocationUnitSize = (uint8_t)((sd_status[2] & 0xF00000U) >> 20U);
 800abda:	693b      	ldr	r3, [r7, #16]
 800abdc:	0d1b      	lsrs	r3, r3, #20
 800abde:	b2db      	uxtb	r3, r3
 800abe0:	f003 030f 	and.w	r3, r3, #15
 800abe4:	b2da      	uxtb	r2, r3
 800abe6:	683b      	ldr	r3, [r7, #0]
 800abe8:	729a      	strb	r2, [r3, #10]

    pStatus->EraseSize = (uint16_t)(((sd_status[2] & 0xFF000000U) >> 16U) | (sd_status[3] & 0xFFU));
 800abea:	693b      	ldr	r3, [r7, #16]
 800abec:	0c1b      	lsrs	r3, r3, #16
 800abee:	b29b      	uxth	r3, r3
 800abf0:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800abf4:	b29a      	uxth	r2, r3
 800abf6:	697b      	ldr	r3, [r7, #20]
 800abf8:	b29b      	uxth	r3, r3
 800abfa:	b2db      	uxtb	r3, r3
 800abfc:	b29b      	uxth	r3, r3
 800abfe:	4313      	orrs	r3, r2
 800ac00:	b29a      	uxth	r2, r3
 800ac02:	683b      	ldr	r3, [r7, #0]
 800ac04:	819a      	strh	r2, [r3, #12]

    pStatus->EraseTimeout = (uint8_t)((sd_status[3] & 0xFC00U) >> 10U);
 800ac06:	697b      	ldr	r3, [r7, #20]
 800ac08:	0a9b      	lsrs	r3, r3, #10
 800ac0a:	b2db      	uxtb	r3, r3
 800ac0c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800ac10:	b2da      	uxtb	r2, r3
 800ac12:	683b      	ldr	r3, [r7, #0]
 800ac14:	739a      	strb	r2, [r3, #14]

    pStatus->EraseOffset = (uint8_t)((sd_status[3] & 0x0300U) >> 8U);
 800ac16:	697b      	ldr	r3, [r7, #20]
 800ac18:	0a1b      	lsrs	r3, r3, #8
 800ac1a:	b2db      	uxtb	r3, r3
 800ac1c:	f003 0303 	and.w	r3, r3, #3
 800ac20:	b2da      	uxtb	r2, r3
 800ac22:	683b      	ldr	r3, [r7, #0]
 800ac24:	73da      	strb	r2, [r3, #15]

    pStatus->UhsSpeedGrade = (uint8_t)((sd_status[3] & 0x00F0U) >> 4U);
 800ac26:	697b      	ldr	r3, [r7, #20]
 800ac28:	091b      	lsrs	r3, r3, #4
 800ac2a:	b2db      	uxtb	r3, r3
 800ac2c:	f003 030f 	and.w	r3, r3, #15
 800ac30:	b2da      	uxtb	r2, r3
 800ac32:	683b      	ldr	r3, [r7, #0]
 800ac34:	741a      	strb	r2, [r3, #16]
    pStatus->UhsAllocationUnitSize = (uint8_t)(sd_status[3] & 0x000FU) ;
 800ac36:	697b      	ldr	r3, [r7, #20]
 800ac38:	b2db      	uxtb	r3, r3
 800ac3a:	f003 030f 	and.w	r3, r3, #15
 800ac3e:	b2da      	uxtb	r2, r3
 800ac40:	683b      	ldr	r3, [r7, #0]
 800ac42:	745a      	strb	r2, [r3, #17]
    pStatus->VideoSpeedClass = (uint8_t)((sd_status[4] & 0xFF000000U) >> 24U);
 800ac44:	69bb      	ldr	r3, [r7, #24]
 800ac46:	0e1b      	lsrs	r3, r3, #24
 800ac48:	b2da      	uxtb	r2, r3
 800ac4a:	683b      	ldr	r3, [r7, #0]
 800ac4c:	749a      	strb	r2, [r3, #18]
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 800ac4e:	687b      	ldr	r3, [r7, #4]
 800ac50:	681b      	ldr	r3, [r3, #0]
 800ac52:	f44f 7100 	mov.w	r1, #512	; 0x200
 800ac56:	4618      	mov	r0, r3
 800ac58:	f003 f804 	bl	800dc64 <SDMMC_CmdBlockLength>
 800ac5c:	64b8      	str	r0, [r7, #72]	; 0x48
  if (errorstate != HAL_SD_ERROR_NONE)
 800ac5e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800ac60:	2b00      	cmp	r3, #0
 800ac62:	d00d      	beq.n	800ac80 <HAL_SD_GetCardStatus+0x15c>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800ac64:	687b      	ldr	r3, [r7, #4]
 800ac66:	681b      	ldr	r3, [r3, #0]
 800ac68:	4a08      	ldr	r2, [pc, #32]	; (800ac8c <HAL_SD_GetCardStatus+0x168>)
 800ac6a:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode = errorstate;
 800ac6c:	687b      	ldr	r3, [r7, #4]
 800ac6e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800ac70:	635a      	str	r2, [r3, #52]	; 0x34
    hsd->State = HAL_SD_STATE_READY;
 800ac72:	687b      	ldr	r3, [r7, #4]
 800ac74:	2201      	movs	r2, #1
 800ac76:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    status = HAL_ERROR;
 800ac7a:	2301      	movs	r3, #1
 800ac7c:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
  }

  return status;
 800ac80:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
}
 800ac84:	4618      	mov	r0, r3
 800ac86:	3750      	adds	r7, #80	; 0x50
 800ac88:	46bd      	mov	sp, r7
 800ac8a:	bd80      	pop	{r7, pc}
 800ac8c:	1fe00fff 	.word	0x1fe00fff

0800ac90 <HAL_SD_GetCardInfo>:
  * @param  pCardInfo: Pointer to the HAL_SD_CardInfoTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardInfo(SD_HandleTypeDef *hsd, HAL_SD_CardInfoTypeDef *pCardInfo)
{
 800ac90:	b480      	push	{r7}
 800ac92:	b083      	sub	sp, #12
 800ac94:	af00      	add	r7, sp, #0
 800ac96:	6078      	str	r0, [r7, #4]
 800ac98:	6039      	str	r1, [r7, #0]
  pCardInfo->CardType     = (uint32_t)(hsd->SdCard.CardType);
 800ac9a:	687b      	ldr	r3, [r7, #4]
 800ac9c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800ac9e:	683b      	ldr	r3, [r7, #0]
 800aca0:	601a      	str	r2, [r3, #0]
  pCardInfo->CardVersion  = (uint32_t)(hsd->SdCard.CardVersion);
 800aca2:	687b      	ldr	r3, [r7, #4]
 800aca4:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800aca6:	683b      	ldr	r3, [r7, #0]
 800aca8:	605a      	str	r2, [r3, #4]
  pCardInfo->Class        = (uint32_t)(hsd->SdCard.Class);
 800acaa:	687b      	ldr	r3, [r7, #4]
 800acac:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800acae:	683b      	ldr	r3, [r7, #0]
 800acb0:	609a      	str	r2, [r3, #8]
  pCardInfo->RelCardAdd   = (uint32_t)(hsd->SdCard.RelCardAdd);
 800acb2:	687b      	ldr	r3, [r7, #4]
 800acb4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800acb6:	683b      	ldr	r3, [r7, #0]
 800acb8:	60da      	str	r2, [r3, #12]
  pCardInfo->BlockNbr     = (uint32_t)(hsd->SdCard.BlockNbr);
 800acba:	687b      	ldr	r3, [r7, #4]
 800acbc:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800acbe:	683b      	ldr	r3, [r7, #0]
 800acc0:	611a      	str	r2, [r3, #16]
  pCardInfo->BlockSize    = (uint32_t)(hsd->SdCard.BlockSize);
 800acc2:	687b      	ldr	r3, [r7, #4]
 800acc4:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800acc6:	683b      	ldr	r3, [r7, #0]
 800acc8:	615a      	str	r2, [r3, #20]
  pCardInfo->LogBlockNbr  = (uint32_t)(hsd->SdCard.LogBlockNbr);
 800acca:	687b      	ldr	r3, [r7, #4]
 800accc:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800acce:	683b      	ldr	r3, [r7, #0]
 800acd0:	619a      	str	r2, [r3, #24]
  pCardInfo->LogBlockSize = (uint32_t)(hsd->SdCard.LogBlockSize);
 800acd2:	687b      	ldr	r3, [r7, #4]
 800acd4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800acd6:	683b      	ldr	r3, [r7, #0]
 800acd8:	61da      	str	r2, [r3, #28]

  return HAL_OK;
 800acda:	2300      	movs	r3, #0
}
 800acdc:	4618      	mov	r0, r3
 800acde:	370c      	adds	r7, #12
 800ace0:	46bd      	mov	sp, r7
 800ace2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ace6:	4770      	bx	lr

0800ace8 <HAL_SD_ConfigWideBusOperation>:
  *            @arg SDMMC_BUS_WIDE_4B: 4-bit data transfer
  *            @arg SDMMC_BUS_WIDE_1B: 1-bit data transfer
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ConfigWideBusOperation(SD_HandleTypeDef *hsd, uint32_t WideMode)
{
 800ace8:	b590      	push	{r4, r7, lr}
 800acea:	b08d      	sub	sp, #52	; 0x34
 800acec:	af02      	add	r7, sp, #8
 800acee:	6078      	str	r0, [r7, #4]
 800acf0:	6039      	str	r1, [r7, #0]
  SDMMC_InitTypeDef Init;
  uint32_t errorstate;
  uint32_t sdmmc_clk;
  HAL_StatusTypeDef status = HAL_OK;
 800acf2:	2300      	movs	r3, #0
 800acf4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  /* Check the parameters */
  assert_param(IS_SDMMC_BUS_WIDE(WideMode));

  /* Change State */
  hsd->State = HAL_SD_STATE_BUSY;
 800acf8:	687b      	ldr	r3, [r7, #4]
 800acfa:	2203      	movs	r2, #3
 800acfc:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

  if (hsd->SdCard.CardType != CARD_SECURED)
 800ad00:	687b      	ldr	r3, [r7, #4]
 800ad02:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ad04:	2b03      	cmp	r3, #3
 800ad06:	d02e      	beq.n	800ad66 <HAL_SD_ConfigWideBusOperation+0x7e>
  {
    if (WideMode == SDMMC_BUS_WIDE_8B)
 800ad08:	683b      	ldr	r3, [r7, #0]
 800ad0a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800ad0e:	d106      	bne.n	800ad1e <HAL_SD_ConfigWideBusOperation+0x36>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800ad10:	687b      	ldr	r3, [r7, #4]
 800ad12:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ad14:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800ad18:	687b      	ldr	r3, [r7, #4]
 800ad1a:	635a      	str	r2, [r3, #52]	; 0x34
 800ad1c:	e029      	b.n	800ad72 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if (WideMode == SDMMC_BUS_WIDE_4B)
 800ad1e:	683b      	ldr	r3, [r7, #0]
 800ad20:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800ad24:	d10a      	bne.n	800ad3c <HAL_SD_ConfigWideBusOperation+0x54>
    {
      errorstate = SD_WideBus_Enable(hsd);
 800ad26:	6878      	ldr	r0, [r7, #4]
 800ad28:	f000 fb4c 	bl	800b3c4 <SD_WideBus_Enable>
 800ad2c:	6238      	str	r0, [r7, #32]

      hsd->ErrorCode |= errorstate;
 800ad2e:	687b      	ldr	r3, [r7, #4]
 800ad30:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800ad32:	6a3b      	ldr	r3, [r7, #32]
 800ad34:	431a      	orrs	r2, r3
 800ad36:	687b      	ldr	r3, [r7, #4]
 800ad38:	635a      	str	r2, [r3, #52]	; 0x34
 800ad3a:	e01a      	b.n	800ad72 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if (WideMode == SDMMC_BUS_WIDE_1B)
 800ad3c:	683b      	ldr	r3, [r7, #0]
 800ad3e:	2b00      	cmp	r3, #0
 800ad40:	d10a      	bne.n	800ad58 <HAL_SD_ConfigWideBusOperation+0x70>
    {
      errorstate = SD_WideBus_Disable(hsd);
 800ad42:	6878      	ldr	r0, [r7, #4]
 800ad44:	f000 fb89 	bl	800b45a <SD_WideBus_Disable>
 800ad48:	6238      	str	r0, [r7, #32]

      hsd->ErrorCode |= errorstate;
 800ad4a:	687b      	ldr	r3, [r7, #4]
 800ad4c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800ad4e:	6a3b      	ldr	r3, [r7, #32]
 800ad50:	431a      	orrs	r2, r3
 800ad52:	687b      	ldr	r3, [r7, #4]
 800ad54:	635a      	str	r2, [r3, #52]	; 0x34
 800ad56:	e00c      	b.n	800ad72 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else
    {
      /* WideMode is not a valid argument*/
      hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800ad58:	687b      	ldr	r3, [r7, #4]
 800ad5a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ad5c:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800ad60:	687b      	ldr	r3, [r7, #4]
 800ad62:	635a      	str	r2, [r3, #52]	; 0x34
 800ad64:	e005      	b.n	800ad72 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
  }
  else
  {
    /* MMC Card does not support this feature */
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800ad66:	687b      	ldr	r3, [r7, #4]
 800ad68:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ad6a:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800ad6e:	687b      	ldr	r3, [r7, #4]
 800ad70:	635a      	str	r2, [r3, #52]	; 0x34
  }

  if (hsd->ErrorCode != HAL_SD_ERROR_NONE)
 800ad72:	687b      	ldr	r3, [r7, #4]
 800ad74:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ad76:	2b00      	cmp	r3, #0
 800ad78:	d007      	beq.n	800ad8a <HAL_SD_ConfigWideBusOperation+0xa2>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800ad7a:	687b      	ldr	r3, [r7, #4]
 800ad7c:	681b      	ldr	r3, [r3, #0]
 800ad7e:	4a5e      	ldr	r2, [pc, #376]	; (800aef8 <HAL_SD_ConfigWideBusOperation+0x210>)
 800ad80:	639a      	str	r2, [r3, #56]	; 0x38
    status = HAL_ERROR;
 800ad82:	2301      	movs	r3, #1
 800ad84:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800ad88:	e094      	b.n	800aeb4 <HAL_SD_ConfigWideBusOperation+0x1cc>
  }
  else
  {
    sdmmc_clk     = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SDMMC);
 800ad8a:	f44f 3080 	mov.w	r0, #65536	; 0x10000
 800ad8e:	f7fd feb7 	bl	8008b00 <HAL_RCCEx_GetPeriphCLKFreq>
 800ad92:	61f8      	str	r0, [r7, #28]
    if (sdmmc_clk != 0U)
 800ad94:	69fb      	ldr	r3, [r7, #28]
 800ad96:	2b00      	cmp	r3, #0
 800ad98:	f000 8083 	beq.w	800aea2 <HAL_SD_ConfigWideBusOperation+0x1ba>
    {
      /* Configure the SDMMC peripheral */
      Init.ClockEdge           = hsd->Init.ClockEdge;
 800ad9c:	687b      	ldr	r3, [r7, #4]
 800ad9e:	685b      	ldr	r3, [r3, #4]
 800ada0:	60bb      	str	r3, [r7, #8]
      Init.ClockPowerSave      = hsd->Init.ClockPowerSave;
 800ada2:	687b      	ldr	r3, [r7, #4]
 800ada4:	689b      	ldr	r3, [r3, #8]
 800ada6:	60fb      	str	r3, [r7, #12]
      Init.BusWide             = WideMode;
 800ada8:	683b      	ldr	r3, [r7, #0]
 800adaa:	613b      	str	r3, [r7, #16]
      Init.HardwareFlowControl = hsd->Init.HardwareFlowControl;
 800adac:	687b      	ldr	r3, [r7, #4]
 800adae:	691b      	ldr	r3, [r3, #16]
 800adb0:	617b      	str	r3, [r7, #20]

      /* Check if user Clock div < Normal speed 25Mhz, no change in Clockdiv */
      if (hsd->Init.ClockDiv >= (sdmmc_clk / (2U * SD_NORMAL_SPEED_FREQ)))
 800adb2:	687b      	ldr	r3, [r7, #4]
 800adb4:	695a      	ldr	r2, [r3, #20]
 800adb6:	69fb      	ldr	r3, [r7, #28]
 800adb8:	4950      	ldr	r1, [pc, #320]	; (800aefc <HAL_SD_ConfigWideBusOperation+0x214>)
 800adba:	fba1 1303 	umull	r1, r3, r1, r3
 800adbe:	0e1b      	lsrs	r3, r3, #24
 800adc0:	429a      	cmp	r2, r3
 800adc2:	d303      	bcc.n	800adcc <HAL_SD_ConfigWideBusOperation+0xe4>
      {
        Init.ClockDiv = hsd->Init.ClockDiv;
 800adc4:	687b      	ldr	r3, [r7, #4]
 800adc6:	695b      	ldr	r3, [r3, #20]
 800adc8:	61bb      	str	r3, [r7, #24]
 800adca:	e05a      	b.n	800ae82 <HAL_SD_ConfigWideBusOperation+0x19a>
      }
      else if (hsd->SdCard.CardSpeed == CARD_ULTRA_HIGH_SPEED)
 800adcc:	687b      	ldr	r3, [r7, #4]
 800adce:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800add0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800add4:	d103      	bne.n	800adde <HAL_SD_ConfigWideBusOperation+0xf6>
      {
        /* UltraHigh speed SD card,user Clock div */
        Init.ClockDiv = hsd->Init.ClockDiv;
 800add6:	687b      	ldr	r3, [r7, #4]
 800add8:	695b      	ldr	r3, [r3, #20]
 800adda:	61bb      	str	r3, [r7, #24]
 800addc:	e051      	b.n	800ae82 <HAL_SD_ConfigWideBusOperation+0x19a>
      }
      else if (hsd->SdCard.CardSpeed == CARD_HIGH_SPEED)
 800adde:	687b      	ldr	r3, [r7, #4]
 800ade0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800ade2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800ade6:	d126      	bne.n	800ae36 <HAL_SD_ConfigWideBusOperation+0x14e>
      {
        /* High speed SD card, Max Frequency = 50Mhz */
        if (hsd->Init.ClockDiv == 0U)
 800ade8:	687b      	ldr	r3, [r7, #4]
 800adea:	695b      	ldr	r3, [r3, #20]
 800adec:	2b00      	cmp	r3, #0
 800adee:	d10e      	bne.n	800ae0e <HAL_SD_ConfigWideBusOperation+0x126>
        {
          if (sdmmc_clk > SD_HIGH_SPEED_FREQ)
 800adf0:	69fb      	ldr	r3, [r7, #28]
 800adf2:	4a43      	ldr	r2, [pc, #268]	; (800af00 <HAL_SD_ConfigWideBusOperation+0x218>)
 800adf4:	4293      	cmp	r3, r2
 800adf6:	d906      	bls.n	800ae06 <HAL_SD_ConfigWideBusOperation+0x11e>
          {
            Init.ClockDiv = sdmmc_clk / (2U * SD_HIGH_SPEED_FREQ);
 800adf8:	69fb      	ldr	r3, [r7, #28]
 800adfa:	4a40      	ldr	r2, [pc, #256]	; (800aefc <HAL_SD_ConfigWideBusOperation+0x214>)
 800adfc:	fba2 2303 	umull	r2, r3, r2, r3
 800ae00:	0e5b      	lsrs	r3, r3, #25
 800ae02:	61bb      	str	r3, [r7, #24]
 800ae04:	e03d      	b.n	800ae82 <HAL_SD_ConfigWideBusOperation+0x19a>
          }
          else
          {
            Init.ClockDiv = hsd->Init.ClockDiv;
 800ae06:	687b      	ldr	r3, [r7, #4]
 800ae08:	695b      	ldr	r3, [r3, #20]
 800ae0a:	61bb      	str	r3, [r7, #24]
 800ae0c:	e039      	b.n	800ae82 <HAL_SD_ConfigWideBusOperation+0x19a>
          }
        }
        else
        {
          if ((sdmmc_clk/(2U * hsd->Init.ClockDiv)) > SD_HIGH_SPEED_FREQ)
 800ae0e:	687b      	ldr	r3, [r7, #4]
 800ae10:	695b      	ldr	r3, [r3, #20]
 800ae12:	005b      	lsls	r3, r3, #1
 800ae14:	69fa      	ldr	r2, [r7, #28]
 800ae16:	fbb2 f3f3 	udiv	r3, r2, r3
 800ae1a:	4a39      	ldr	r2, [pc, #228]	; (800af00 <HAL_SD_ConfigWideBusOperation+0x218>)
 800ae1c:	4293      	cmp	r3, r2
 800ae1e:	d906      	bls.n	800ae2e <HAL_SD_ConfigWideBusOperation+0x146>
          {
            Init.ClockDiv = sdmmc_clk / (2U * SD_HIGH_SPEED_FREQ);
 800ae20:	69fb      	ldr	r3, [r7, #28]
 800ae22:	4a36      	ldr	r2, [pc, #216]	; (800aefc <HAL_SD_ConfigWideBusOperation+0x214>)
 800ae24:	fba2 2303 	umull	r2, r3, r2, r3
 800ae28:	0e5b      	lsrs	r3, r3, #25
 800ae2a:	61bb      	str	r3, [r7, #24]
 800ae2c:	e029      	b.n	800ae82 <HAL_SD_ConfigWideBusOperation+0x19a>
          }
          else
          {
            Init.ClockDiv = hsd->Init.ClockDiv;
 800ae2e:	687b      	ldr	r3, [r7, #4]
 800ae30:	695b      	ldr	r3, [r3, #20]
 800ae32:	61bb      	str	r3, [r7, #24]
 800ae34:	e025      	b.n	800ae82 <HAL_SD_ConfigWideBusOperation+0x19a>
        }
      }
      else
      {
        /* No High speed SD card, Max Frequency = 25Mhz */
        if (hsd->Init.ClockDiv == 0U)
 800ae36:	687b      	ldr	r3, [r7, #4]
 800ae38:	695b      	ldr	r3, [r3, #20]
 800ae3a:	2b00      	cmp	r3, #0
 800ae3c:	d10e      	bne.n	800ae5c <HAL_SD_ConfigWideBusOperation+0x174>
        {
          if (sdmmc_clk > SD_NORMAL_SPEED_FREQ)
 800ae3e:	69fb      	ldr	r3, [r7, #28]
 800ae40:	4a30      	ldr	r2, [pc, #192]	; (800af04 <HAL_SD_ConfigWideBusOperation+0x21c>)
 800ae42:	4293      	cmp	r3, r2
 800ae44:	d906      	bls.n	800ae54 <HAL_SD_ConfigWideBusOperation+0x16c>
          {
            Init.ClockDiv = sdmmc_clk / (2U * SD_NORMAL_SPEED_FREQ);
 800ae46:	69fb      	ldr	r3, [r7, #28]
 800ae48:	4a2c      	ldr	r2, [pc, #176]	; (800aefc <HAL_SD_ConfigWideBusOperation+0x214>)
 800ae4a:	fba2 2303 	umull	r2, r3, r2, r3
 800ae4e:	0e1b      	lsrs	r3, r3, #24
 800ae50:	61bb      	str	r3, [r7, #24]
 800ae52:	e016      	b.n	800ae82 <HAL_SD_ConfigWideBusOperation+0x19a>
          }
          else
          {
            Init.ClockDiv = hsd->Init.ClockDiv;
 800ae54:	687b      	ldr	r3, [r7, #4]
 800ae56:	695b      	ldr	r3, [r3, #20]
 800ae58:	61bb      	str	r3, [r7, #24]
 800ae5a:	e012      	b.n	800ae82 <HAL_SD_ConfigWideBusOperation+0x19a>
          }
        }
        else
        {
          if ((sdmmc_clk/(2U * hsd->Init.ClockDiv)) > SD_NORMAL_SPEED_FREQ)
 800ae5c:	687b      	ldr	r3, [r7, #4]
 800ae5e:	695b      	ldr	r3, [r3, #20]
 800ae60:	005b      	lsls	r3, r3, #1
 800ae62:	69fa      	ldr	r2, [r7, #28]
 800ae64:	fbb2 f3f3 	udiv	r3, r2, r3
 800ae68:	4a26      	ldr	r2, [pc, #152]	; (800af04 <HAL_SD_ConfigWideBusOperation+0x21c>)
 800ae6a:	4293      	cmp	r3, r2
 800ae6c:	d906      	bls.n	800ae7c <HAL_SD_ConfigWideBusOperation+0x194>
          {
            Init.ClockDiv = sdmmc_clk / (2U * SD_NORMAL_SPEED_FREQ);
 800ae6e:	69fb      	ldr	r3, [r7, #28]
 800ae70:	4a22      	ldr	r2, [pc, #136]	; (800aefc <HAL_SD_ConfigWideBusOperation+0x214>)
 800ae72:	fba2 2303 	umull	r2, r3, r2, r3
 800ae76:	0e1b      	lsrs	r3, r3, #24
 800ae78:	61bb      	str	r3, [r7, #24]
 800ae7a:	e002      	b.n	800ae82 <HAL_SD_ConfigWideBusOperation+0x19a>
          }
          else
          {
            Init.ClockDiv = hsd->Init.ClockDiv;
 800ae7c:	687b      	ldr	r3, [r7, #4]
 800ae7e:	695b      	ldr	r3, [r3, #20]
 800ae80:	61bb      	str	r3, [r7, #24]

#if (USE_SD_TRANSCEIVER != 0U)
      Init.TranceiverPresent = hsd->Init.TranceiverPresent;
#endif /* USE_SD_TRANSCEIVER */

      (void)SDMMC_Init(hsd->Instance, Init);
 800ae82:	687b      	ldr	r3, [r7, #4]
 800ae84:	681c      	ldr	r4, [r3, #0]
 800ae86:	466a      	mov	r2, sp
 800ae88:	f107 0314 	add.w	r3, r7, #20
 800ae8c:	e893 0003 	ldmia.w	r3, {r0, r1}
 800ae90:	e882 0003 	stmia.w	r2, {r0, r1}
 800ae94:	f107 0308 	add.w	r3, r7, #8
 800ae98:	cb0e      	ldmia	r3, {r1, r2, r3}
 800ae9a:	4620      	mov	r0, r4
 800ae9c:	f002 fe04 	bl	800daa8 <SDMMC_Init>
 800aea0:	e008      	b.n	800aeb4 <HAL_SD_ConfigWideBusOperation+0x1cc>
    }
    else
    {
      hsd->ErrorCode |= SDMMC_ERROR_INVALID_PARAMETER;
 800aea2:	687b      	ldr	r3, [r7, #4]
 800aea4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800aea6:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800aeaa:	687b      	ldr	r3, [r7, #4]
 800aeac:	635a      	str	r2, [r3, #52]	; 0x34
      status = HAL_ERROR;
 800aeae:	2301      	movs	r3, #1
 800aeb0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 800aeb4:	687b      	ldr	r3, [r7, #4]
 800aeb6:	681b      	ldr	r3, [r3, #0]
 800aeb8:	f44f 7100 	mov.w	r1, #512	; 0x200
 800aebc:	4618      	mov	r0, r3
 800aebe:	f002 fed1 	bl	800dc64 <SDMMC_CmdBlockLength>
 800aec2:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 800aec4:	6a3b      	ldr	r3, [r7, #32]
 800aec6:	2b00      	cmp	r3, #0
 800aec8:	d00c      	beq.n	800aee4 <HAL_SD_ConfigWideBusOperation+0x1fc>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800aeca:	687b      	ldr	r3, [r7, #4]
 800aecc:	681b      	ldr	r3, [r3, #0]
 800aece:	4a0a      	ldr	r2, [pc, #40]	; (800aef8 <HAL_SD_ConfigWideBusOperation+0x210>)
 800aed0:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 800aed2:	687b      	ldr	r3, [r7, #4]
 800aed4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800aed6:	6a3b      	ldr	r3, [r7, #32]
 800aed8:	431a      	orrs	r2, r3
 800aeda:	687b      	ldr	r3, [r7, #4]
 800aedc:	635a      	str	r2, [r3, #52]	; 0x34
    status = HAL_ERROR;
 800aede:	2301      	movs	r3, #1
 800aee0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Change State */
  hsd->State = HAL_SD_STATE_READY;
 800aee4:	687b      	ldr	r3, [r7, #4]
 800aee6:	2201      	movs	r2, #1
 800aee8:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

  return status;
 800aeec:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 800aef0:	4618      	mov	r0, r3
 800aef2:	372c      	adds	r7, #44	; 0x2c
 800aef4:	46bd      	mov	sp, r7
 800aef6:	bd90      	pop	{r4, r7, pc}
 800aef8:	1fe00fff 	.word	0x1fe00fff
 800aefc:	55e63b89 	.word	0x55e63b89
 800af00:	02faf080 	.word	0x02faf080
 800af04:	017d7840 	.word	0x017d7840

0800af08 <HAL_SD_GetCardState>:
  * @brief  Gets the current sd card data state.
  * @param  hsd: pointer to SD handle
  * @retval Card state
  */
HAL_SD_CardStateTypeDef HAL_SD_GetCardState(SD_HandleTypeDef *hsd)
{
 800af08:	b580      	push	{r7, lr}
 800af0a:	b086      	sub	sp, #24
 800af0c:	af00      	add	r7, sp, #0
 800af0e:	6078      	str	r0, [r7, #4]
  uint32_t cardstate;
  uint32_t errorstate;
  uint32_t resp1 = 0;
 800af10:	2300      	movs	r3, #0
 800af12:	60fb      	str	r3, [r7, #12]

  errorstate = SD_SendStatus(hsd, &resp1);
 800af14:	f107 030c 	add.w	r3, r7, #12
 800af18:	4619      	mov	r1, r3
 800af1a:	6878      	ldr	r0, [r7, #4]
 800af1c:	f000 fa2a 	bl	800b374 <SD_SendStatus>
 800af20:	6178      	str	r0, [r7, #20]
  if (errorstate != HAL_SD_ERROR_NONE)
 800af22:	697b      	ldr	r3, [r7, #20]
 800af24:	2b00      	cmp	r3, #0
 800af26:	d005      	beq.n	800af34 <HAL_SD_GetCardState+0x2c>
  {
    hsd->ErrorCode |= errorstate;
 800af28:	687b      	ldr	r3, [r7, #4]
 800af2a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800af2c:	697b      	ldr	r3, [r7, #20]
 800af2e:	431a      	orrs	r2, r3
 800af30:	687b      	ldr	r3, [r7, #4]
 800af32:	635a      	str	r2, [r3, #52]	; 0x34
  }

  cardstate = ((resp1 >> 9U) & 0x0FU);
 800af34:	68fb      	ldr	r3, [r7, #12]
 800af36:	0a5b      	lsrs	r3, r3, #9
 800af38:	f003 030f 	and.w	r3, r3, #15
 800af3c:	613b      	str	r3, [r7, #16]

  return (HAL_SD_CardStateTypeDef)cardstate;
 800af3e:	693b      	ldr	r3, [r7, #16]
}
 800af40:	4618      	mov	r0, r3
 800af42:	3718      	adds	r7, #24
 800af44:	46bd      	mov	sp, r7
 800af46:	bd80      	pop	{r7, pc}

0800af48 <SD_InitCard>:
  * @brief  Initializes the sd card.
  * @param  hsd: Pointer to SD handle
  * @retval SD Card error state
  */
static uint32_t SD_InitCard(SD_HandleTypeDef *hsd)
{
 800af48:	b580      	push	{r7, lr}
 800af4a:	b090      	sub	sp, #64	; 0x40
 800af4c:	af00      	add	r7, sp, #0
 800af4e:	6078      	str	r0, [r7, #4]
  HAL_SD_CardCSDTypeDef CSD;
  uint32_t errorstate;
  uint16_t sd_rca = 1U;
 800af50:	2301      	movs	r3, #1
 800af52:	81fb      	strh	r3, [r7, #14]

  /* Check the power State */
  if (SDMMC_GetPowerState(hsd->Instance) == 0U)
 800af54:	687b      	ldr	r3, [r7, #4]
 800af56:	681b      	ldr	r3, [r3, #0]
 800af58:	4618      	mov	r0, r3
 800af5a:	f002 fdfe 	bl	800db5a <SDMMC_GetPowerState>
 800af5e:	4603      	mov	r3, r0
 800af60:	2b00      	cmp	r3, #0
 800af62:	d102      	bne.n	800af6a <SD_InitCard+0x22>
  {
    /* Power off */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800af64:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 800af68:	e0a5      	b.n	800b0b6 <SD_InitCard+0x16e>
  }

  if (hsd->SdCard.CardType != CARD_SECURED)
 800af6a:	687b      	ldr	r3, [r7, #4]
 800af6c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800af6e:	2b03      	cmp	r3, #3
 800af70:	d02e      	beq.n	800afd0 <SD_InitCard+0x88>
  {
    /* Send CMD2 ALL_SEND_CID */
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 800af72:	687b      	ldr	r3, [r7, #4]
 800af74:	681b      	ldr	r3, [r3, #0]
 800af76:	4618      	mov	r0, r3
 800af78:	f003 f849 	bl	800e00e <SDMMC_CmdSendCID>
 800af7c:	63f8      	str	r0, [r7, #60]	; 0x3c
    if (errorstate != HAL_SD_ERROR_NONE)
 800af7e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800af80:	2b00      	cmp	r3, #0
 800af82:	d001      	beq.n	800af88 <SD_InitCard+0x40>
    {
      return errorstate;
 800af84:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800af86:	e096      	b.n	800b0b6 <SD_InitCard+0x16e>
    }
    else
    {
      /* Get Card identification number data */
      hsd->CID[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800af88:	687b      	ldr	r3, [r7, #4]
 800af8a:	681b      	ldr	r3, [r3, #0]
 800af8c:	2100      	movs	r1, #0
 800af8e:	4618      	mov	r0, r3
 800af90:	f002 fe29 	bl	800dbe6 <SDMMC_GetResponse>
 800af94:	4602      	mov	r2, r0
 800af96:	687b      	ldr	r3, [r7, #4]
 800af98:	66da      	str	r2, [r3, #108]	; 0x6c
      hsd->CID[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 800af9a:	687b      	ldr	r3, [r7, #4]
 800af9c:	681b      	ldr	r3, [r3, #0]
 800af9e:	2104      	movs	r1, #4
 800afa0:	4618      	mov	r0, r3
 800afa2:	f002 fe20 	bl	800dbe6 <SDMMC_GetResponse>
 800afa6:	4602      	mov	r2, r0
 800afa8:	687b      	ldr	r3, [r7, #4]
 800afaa:	671a      	str	r2, [r3, #112]	; 0x70
      hsd->CID[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 800afac:	687b      	ldr	r3, [r7, #4]
 800afae:	681b      	ldr	r3, [r3, #0]
 800afb0:	2108      	movs	r1, #8
 800afb2:	4618      	mov	r0, r3
 800afb4:	f002 fe17 	bl	800dbe6 <SDMMC_GetResponse>
 800afb8:	4602      	mov	r2, r0
 800afba:	687b      	ldr	r3, [r7, #4]
 800afbc:	675a      	str	r2, [r3, #116]	; 0x74
      hsd->CID[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 800afbe:	687b      	ldr	r3, [r7, #4]
 800afc0:	681b      	ldr	r3, [r3, #0]
 800afc2:	210c      	movs	r1, #12
 800afc4:	4618      	mov	r0, r3
 800afc6:	f002 fe0e 	bl	800dbe6 <SDMMC_GetResponse>
 800afca:	4602      	mov	r2, r0
 800afcc:	687b      	ldr	r3, [r7, #4]
 800afce:	679a      	str	r2, [r3, #120]	; 0x78
    }
  }

  if (hsd->SdCard.CardType != CARD_SECURED)
 800afd0:	687b      	ldr	r3, [r7, #4]
 800afd2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800afd4:	2b03      	cmp	r3, #3
 800afd6:	d00d      	beq.n	800aff4 <SD_InitCard+0xac>
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 800afd8:	687b      	ldr	r3, [r7, #4]
 800afda:	681b      	ldr	r3, [r3, #0]
 800afdc:	f107 020e 	add.w	r2, r7, #14
 800afe0:	4611      	mov	r1, r2
 800afe2:	4618      	mov	r0, r3
 800afe4:	f003 f852 	bl	800e08c <SDMMC_CmdSetRelAdd>
 800afe8:	63f8      	str	r0, [r7, #60]	; 0x3c
    if (errorstate != HAL_SD_ERROR_NONE)
 800afea:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800afec:	2b00      	cmp	r3, #0
 800afee:	d001      	beq.n	800aff4 <SD_InitCard+0xac>
    {
      return errorstate;
 800aff0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800aff2:	e060      	b.n	800b0b6 <SD_InitCard+0x16e>
    }
  }
  if (hsd->SdCard.CardType != CARD_SECURED)
 800aff4:	687b      	ldr	r3, [r7, #4]
 800aff6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800aff8:	2b03      	cmp	r3, #3
 800affa:	d036      	beq.n	800b06a <SD_InitCard+0x122>
  {
    /* Get the SD card RCA */
    hsd->SdCard.RelCardAdd = sd_rca;
 800affc:	89fb      	ldrh	r3, [r7, #14]
 800affe:	461a      	mov	r2, r3
 800b000:	687b      	ldr	r3, [r7, #4]
 800b002:	645a      	str	r2, [r3, #68]	; 0x44

    /* Send CMD9 SEND_CSD with argument as card's RCA */
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800b004:	687b      	ldr	r3, [r7, #4]
 800b006:	681a      	ldr	r2, [r3, #0]
 800b008:	687b      	ldr	r3, [r7, #4]
 800b00a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b00c:	041b      	lsls	r3, r3, #16
 800b00e:	4619      	mov	r1, r3
 800b010:	4610      	mov	r0, r2
 800b012:	f003 f81b 	bl	800e04c <SDMMC_CmdSendCSD>
 800b016:	63f8      	str	r0, [r7, #60]	; 0x3c
    if (errorstate != HAL_SD_ERROR_NONE)
 800b018:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b01a:	2b00      	cmp	r3, #0
 800b01c:	d001      	beq.n	800b022 <SD_InitCard+0xda>
    {
      return errorstate;
 800b01e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b020:	e049      	b.n	800b0b6 <SD_InitCard+0x16e>
    }
    else
    {
      /* Get Card Specific Data */
      hsd->CSD[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800b022:	687b      	ldr	r3, [r7, #4]
 800b024:	681b      	ldr	r3, [r3, #0]
 800b026:	2100      	movs	r1, #0
 800b028:	4618      	mov	r0, r3
 800b02a:	f002 fddc 	bl	800dbe6 <SDMMC_GetResponse>
 800b02e:	4602      	mov	r2, r0
 800b030:	687b      	ldr	r3, [r7, #4]
 800b032:	65da      	str	r2, [r3, #92]	; 0x5c
      hsd->CSD[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 800b034:	687b      	ldr	r3, [r7, #4]
 800b036:	681b      	ldr	r3, [r3, #0]
 800b038:	2104      	movs	r1, #4
 800b03a:	4618      	mov	r0, r3
 800b03c:	f002 fdd3 	bl	800dbe6 <SDMMC_GetResponse>
 800b040:	4602      	mov	r2, r0
 800b042:	687b      	ldr	r3, [r7, #4]
 800b044:	661a      	str	r2, [r3, #96]	; 0x60
      hsd->CSD[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 800b046:	687b      	ldr	r3, [r7, #4]
 800b048:	681b      	ldr	r3, [r3, #0]
 800b04a:	2108      	movs	r1, #8
 800b04c:	4618      	mov	r0, r3
 800b04e:	f002 fdca 	bl	800dbe6 <SDMMC_GetResponse>
 800b052:	4602      	mov	r2, r0
 800b054:	687b      	ldr	r3, [r7, #4]
 800b056:	665a      	str	r2, [r3, #100]	; 0x64
      hsd->CSD[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 800b058:	687b      	ldr	r3, [r7, #4]
 800b05a:	681b      	ldr	r3, [r3, #0]
 800b05c:	210c      	movs	r1, #12
 800b05e:	4618      	mov	r0, r3
 800b060:	f002 fdc1 	bl	800dbe6 <SDMMC_GetResponse>
 800b064:	4602      	mov	r2, r0
 800b066:	687b      	ldr	r3, [r7, #4]
 800b068:	669a      	str	r2, [r3, #104]	; 0x68
    }
  }

  /* Get the Card Class */
  hsd->SdCard.Class = (SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2) >> 20U);
 800b06a:	687b      	ldr	r3, [r7, #4]
 800b06c:	681b      	ldr	r3, [r3, #0]
 800b06e:	2104      	movs	r1, #4
 800b070:	4618      	mov	r0, r3
 800b072:	f002 fdb8 	bl	800dbe6 <SDMMC_GetResponse>
 800b076:	4603      	mov	r3, r0
 800b078:	0d1a      	lsrs	r2, r3, #20
 800b07a:	687b      	ldr	r3, [r7, #4]
 800b07c:	641a      	str	r2, [r3, #64]	; 0x40

  /* Get CSD parameters */
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 800b07e:	f107 0310 	add.w	r3, r7, #16
 800b082:	4619      	mov	r1, r3
 800b084:	6878      	ldr	r0, [r7, #4]
 800b086:	f7ff fba9 	bl	800a7dc <HAL_SD_GetCardCSD>
 800b08a:	4603      	mov	r3, r0
 800b08c:	2b00      	cmp	r3, #0
 800b08e:	d002      	beq.n	800b096 <SD_InitCard+0x14e>
  {
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800b090:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800b094:	e00f      	b.n	800b0b6 <SD_InitCard+0x16e>
  }

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 800b096:	687b      	ldr	r3, [r7, #4]
 800b098:	681a      	ldr	r2, [r3, #0]
 800b09a:	687b      	ldr	r3, [r7, #4]
 800b09c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b09e:	041b      	lsls	r3, r3, #16
 800b0a0:	4619      	mov	r1, r3
 800b0a2:	4610      	mov	r0, r2
 800b0a4:	f002 feca 	bl	800de3c <SDMMC_CmdSelDesel>
 800b0a8:	63f8      	str	r0, [r7, #60]	; 0x3c
  if (errorstate != HAL_SD_ERROR_NONE)
 800b0aa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b0ac:	2b00      	cmp	r3, #0
 800b0ae:	d001      	beq.n	800b0b4 <SD_InitCard+0x16c>
  {
    return errorstate;
 800b0b0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b0b2:	e000      	b.n	800b0b6 <SD_InitCard+0x16e>
  }

  /* All cards are initialized */
  return HAL_SD_ERROR_NONE;
 800b0b4:	2300      	movs	r3, #0
}
 800b0b6:	4618      	mov	r0, r3
 800b0b8:	3740      	adds	r7, #64	; 0x40
 800b0ba:	46bd      	mov	sp, r7
 800b0bc:	bd80      	pop	{r7, pc}
	...

0800b0c0 <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 800b0c0:	b580      	push	{r7, lr}
 800b0c2:	b086      	sub	sp, #24
 800b0c4:	af00      	add	r7, sp, #0
 800b0c6:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800b0c8:	2300      	movs	r3, #0
 800b0ca:	60bb      	str	r3, [r7, #8]
  uint32_t response = 0U;
 800b0cc:	2300      	movs	r3, #0
 800b0ce:	617b      	str	r3, [r7, #20]
  uint32_t validvoltage = 0U;
 800b0d0:	2300      	movs	r3, #0
 800b0d2:	613b      	str	r3, [r7, #16]
#if (USE_SD_TRANSCEIVER != 0U)
  uint32_t tickstart = HAL_GetTick();
#endif /* USE_SD_TRANSCEIVER  */

  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 800b0d4:	687b      	ldr	r3, [r7, #4]
 800b0d6:	681b      	ldr	r3, [r3, #0]
 800b0d8:	4618      	mov	r0, r3
 800b0da:	f002 fed2 	bl	800de82 <SDMMC_CmdGoIdleState>
 800b0de:	60f8      	str	r0, [r7, #12]
  if (errorstate != HAL_SD_ERROR_NONE)
 800b0e0:	68fb      	ldr	r3, [r7, #12]
 800b0e2:	2b00      	cmp	r3, #0
 800b0e4:	d001      	beq.n	800b0ea <SD_PowerON+0x2a>
  {
    return errorstate;
 800b0e6:	68fb      	ldr	r3, [r7, #12]
 800b0e8:	e06e      	b.n	800b1c8 <SD_PowerON+0x108>
  }

  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 800b0ea:	687b      	ldr	r3, [r7, #4]
 800b0ec:	681b      	ldr	r3, [r3, #0]
 800b0ee:	4618      	mov	r0, r3
 800b0f0:	f002 fee5 	bl	800debe <SDMMC_CmdOperCond>
 800b0f4:	60f8      	str	r0, [r7, #12]
  if (errorstate != HAL_SD_ERROR_NONE)
 800b0f6:	68fb      	ldr	r3, [r7, #12]
 800b0f8:	2b00      	cmp	r3, #0
 800b0fa:	d00d      	beq.n	800b118 <SD_PowerON+0x58>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 800b0fc:	687b      	ldr	r3, [r7, #4]
 800b0fe:	2200      	movs	r2, #0
 800b100:	63da      	str	r2, [r3, #60]	; 0x3c
    /* CMD0: GO_IDLE_STATE */
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 800b102:	687b      	ldr	r3, [r7, #4]
 800b104:	681b      	ldr	r3, [r3, #0]
 800b106:	4618      	mov	r0, r3
 800b108:	f002 febb 	bl	800de82 <SDMMC_CmdGoIdleState>
 800b10c:	60f8      	str	r0, [r7, #12]
    if (errorstate != HAL_SD_ERROR_NONE)
 800b10e:	68fb      	ldr	r3, [r7, #12]
 800b110:	2b00      	cmp	r3, #0
 800b112:	d004      	beq.n	800b11e <SD_PowerON+0x5e>
    {
      return errorstate;
 800b114:	68fb      	ldr	r3, [r7, #12]
 800b116:	e057      	b.n	800b1c8 <SD_PowerON+0x108>
    }

  }
  else
  {
    hsd->SdCard.CardVersion = CARD_V2_X;
 800b118:	687b      	ldr	r3, [r7, #4]
 800b11a:	2201      	movs	r2, #1
 800b11c:	63da      	str	r2, [r3, #60]	; 0x3c
  }

  if (hsd->SdCard.CardVersion == CARD_V2_X)
 800b11e:	687b      	ldr	r3, [r7, #4]
 800b120:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b122:	2b01      	cmp	r3, #1
 800b124:	d137      	bne.n	800b196 <SD_PowerON+0xd6>
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 800b126:	687b      	ldr	r3, [r7, #4]
 800b128:	681b      	ldr	r3, [r3, #0]
 800b12a:	2100      	movs	r1, #0
 800b12c:	4618      	mov	r0, r3
 800b12e:	f002 fee6 	bl	800defe <SDMMC_CmdAppCommand>
 800b132:	60f8      	str	r0, [r7, #12]
    if (errorstate != HAL_SD_ERROR_NONE)
 800b134:	68fb      	ldr	r3, [r7, #12]
 800b136:	2b00      	cmp	r3, #0
 800b138:	d02d      	beq.n	800b196 <SD_PowerON+0xd6>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800b13a:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800b13e:	e043      	b.n	800b1c8 <SD_PowerON+0x108>
  /* SD CARD */
  /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
  while ((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 800b140:	687b      	ldr	r3, [r7, #4]
 800b142:	681b      	ldr	r3, [r3, #0]
 800b144:	2100      	movs	r1, #0
 800b146:	4618      	mov	r0, r3
 800b148:	f002 fed9 	bl	800defe <SDMMC_CmdAppCommand>
 800b14c:	60f8      	str	r0, [r7, #12]
    if (errorstate != HAL_SD_ERROR_NONE)
 800b14e:	68fb      	ldr	r3, [r7, #12]
 800b150:	2b00      	cmp	r3, #0
 800b152:	d001      	beq.n	800b158 <SD_PowerON+0x98>
    {
      return errorstate;
 800b154:	68fb      	ldr	r3, [r7, #12]
 800b156:	e037      	b.n	800b1c8 <SD_PowerON+0x108>
    }

    /* Send CMD41 */
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY |
 800b158:	687b      	ldr	r3, [r7, #4]
 800b15a:	681b      	ldr	r3, [r3, #0]
 800b15c:	491c      	ldr	r1, [pc, #112]	; (800b1d0 <SD_PowerON+0x110>)
 800b15e:	4618      	mov	r0, r3
 800b160:	f002 fef0 	bl	800df44 <SDMMC_CmdAppOperCommand>
 800b164:	60f8      	str	r0, [r7, #12]
                                         SD_SWITCH_1_8V_CAPACITY);
    if (errorstate != HAL_SD_ERROR_NONE)
 800b166:	68fb      	ldr	r3, [r7, #12]
 800b168:	2b00      	cmp	r3, #0
 800b16a:	d002      	beq.n	800b172 <SD_PowerON+0xb2>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800b16c:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800b170:	e02a      	b.n	800b1c8 <SD_PowerON+0x108>
    }

    /* Get command response */
    response = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800b172:	687b      	ldr	r3, [r7, #4]
 800b174:	681b      	ldr	r3, [r3, #0]
 800b176:	2100      	movs	r1, #0
 800b178:	4618      	mov	r0, r3
 800b17a:	f002 fd34 	bl	800dbe6 <SDMMC_GetResponse>
 800b17e:	6178      	str	r0, [r7, #20]

    /* Get operating voltage*/
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 800b180:	697b      	ldr	r3, [r7, #20]
 800b182:	0fdb      	lsrs	r3, r3, #31
 800b184:	2b01      	cmp	r3, #1
 800b186:	d101      	bne.n	800b18c <SD_PowerON+0xcc>
 800b188:	2301      	movs	r3, #1
 800b18a:	e000      	b.n	800b18e <SD_PowerON+0xce>
 800b18c:	2300      	movs	r3, #0
 800b18e:	613b      	str	r3, [r7, #16]

    count++;
 800b190:	68bb      	ldr	r3, [r7, #8]
 800b192:	3301      	adds	r3, #1
 800b194:	60bb      	str	r3, [r7, #8]
  while ((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 800b196:	68bb      	ldr	r3, [r7, #8]
 800b198:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 800b19c:	4293      	cmp	r3, r2
 800b19e:	d802      	bhi.n	800b1a6 <SD_PowerON+0xe6>
 800b1a0:	693b      	ldr	r3, [r7, #16]
 800b1a2:	2b00      	cmp	r3, #0
 800b1a4:	d0cc      	beq.n	800b140 <SD_PowerON+0x80>
  }

  if (count >= SDMMC_MAX_VOLT_TRIAL)
 800b1a6:	68bb      	ldr	r3, [r7, #8]
 800b1a8:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 800b1ac:	4293      	cmp	r3, r2
 800b1ae:	d902      	bls.n	800b1b6 <SD_PowerON+0xf6>
  {
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 800b1b0:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800b1b4:	e008      	b.n	800b1c8 <SD_PowerON+0x108>
  }

  if ((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY) /* (response &= SD_HIGH_CAPACITY) */
 800b1b6:	697b      	ldr	r3, [r7, #20]
 800b1b8:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800b1bc:	2b00      	cmp	r3, #0
 800b1be:	d002      	beq.n	800b1c6 <SD_PowerON+0x106>
  {
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 800b1c0:	687b      	ldr	r3, [r7, #4]
 800b1c2:	2201      	movs	r2, #1
 800b1c4:	639a      	str	r2, [r3, #56]	; 0x38
      }
    }
#endif /* USE_SD_TRANSCEIVER  */
  }

  return HAL_SD_ERROR_NONE;
 800b1c6:	2300      	movs	r3, #0
}
 800b1c8:	4618      	mov	r0, r3
 800b1ca:	3718      	adds	r7, #24
 800b1cc:	46bd      	mov	sp, r7
 800b1ce:	bd80      	pop	{r7, pc}
 800b1d0:	c1100000 	.word	0xc1100000

0800b1d4 <SD_SendSDStatus>:
  * @param  pSDstatus: Pointer to the buffer that will contain the SD card status
  *         SD Status register)
  * @retval error state
  */
static uint32_t SD_SendSDStatus(SD_HandleTypeDef *hsd, uint32_t *pSDstatus)
{
 800b1d4:	b580      	push	{r7, lr}
 800b1d6:	b08c      	sub	sp, #48	; 0x30
 800b1d8:	af00      	add	r7, sp, #0
 800b1da:	6078      	str	r0, [r7, #4]
 800b1dc:	6039      	str	r1, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 800b1de:	f7f7 f8e1 	bl	80023a4 <HAL_GetTick>
 800b1e2:	6278      	str	r0, [r7, #36]	; 0x24
  uint32_t count;
  uint32_t *pData = pSDstatus;
 800b1e4:	683b      	ldr	r3, [r7, #0]
 800b1e6:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Check SD response */
  if ((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 800b1e8:	687b      	ldr	r3, [r7, #4]
 800b1ea:	681b      	ldr	r3, [r3, #0]
 800b1ec:	2100      	movs	r1, #0
 800b1ee:	4618      	mov	r0, r3
 800b1f0:	f002 fcf9 	bl	800dbe6 <SDMMC_GetResponse>
 800b1f4:	4603      	mov	r3, r0
 800b1f6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800b1fa:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800b1fe:	d102      	bne.n	800b206 <SD_SendSDStatus+0x32>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 800b200:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800b204:	e0b0      	b.n	800b368 <SD_SendSDStatus+0x194>
  }

  /* Set block size for card if it is not equal to current block size for card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 64U);
 800b206:	687b      	ldr	r3, [r7, #4]
 800b208:	681b      	ldr	r3, [r3, #0]
 800b20a:	2140      	movs	r1, #64	; 0x40
 800b20c:	4618      	mov	r0, r3
 800b20e:	f002 fd29 	bl	800dc64 <SDMMC_CmdBlockLength>
 800b212:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 800b214:	6a3b      	ldr	r3, [r7, #32]
 800b216:	2b00      	cmp	r3, #0
 800b218:	d005      	beq.n	800b226 <SD_SendSDStatus+0x52>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_NONE;
 800b21a:	687b      	ldr	r3, [r7, #4]
 800b21c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800b21e:	687b      	ldr	r3, [r7, #4]
 800b220:	635a      	str	r2, [r3, #52]	; 0x34
    return errorstate;
 800b222:	6a3b      	ldr	r3, [r7, #32]
 800b224:	e0a0      	b.n	800b368 <SD_SendSDStatus+0x194>
  }

  /* Send CMD55 */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800b226:	687b      	ldr	r3, [r7, #4]
 800b228:	681a      	ldr	r2, [r3, #0]
 800b22a:	687b      	ldr	r3, [r7, #4]
 800b22c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b22e:	041b      	lsls	r3, r3, #16
 800b230:	4619      	mov	r1, r3
 800b232:	4610      	mov	r0, r2
 800b234:	f002 fe63 	bl	800defe <SDMMC_CmdAppCommand>
 800b238:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 800b23a:	6a3b      	ldr	r3, [r7, #32]
 800b23c:	2b00      	cmp	r3, #0
 800b23e:	d005      	beq.n	800b24c <SD_SendSDStatus+0x78>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_NONE;
 800b240:	687b      	ldr	r3, [r7, #4]
 800b242:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800b244:	687b      	ldr	r3, [r7, #4]
 800b246:	635a      	str	r2, [r3, #52]	; 0x34
    return errorstate;
 800b248:	6a3b      	ldr	r3, [r7, #32]
 800b24a:	e08d      	b.n	800b368 <SD_SendSDStatus+0x194>
  }

  /* Configure the SD DPSM (Data Path State Machine) */
  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800b24c:	f04f 33ff 	mov.w	r3, #4294967295
 800b250:	60bb      	str	r3, [r7, #8]
  config.DataLength    = 64U;
 800b252:	2340      	movs	r3, #64	; 0x40
 800b254:	60fb      	str	r3, [r7, #12]
  config.DataBlockSize = SDMMC_DATABLOCK_SIZE_64B;
 800b256:	2360      	movs	r3, #96	; 0x60
 800b258:	613b      	str	r3, [r7, #16]
  config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 800b25a:	2302      	movs	r3, #2
 800b25c:	617b      	str	r3, [r7, #20]
  config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 800b25e:	2300      	movs	r3, #0
 800b260:	61bb      	str	r3, [r7, #24]
  config.DPSM          = SDMMC_DPSM_ENABLE;
 800b262:	2301      	movs	r3, #1
 800b264:	61fb      	str	r3, [r7, #28]
  (void)SDMMC_ConfigData(hsd->Instance, &config);
 800b266:	687b      	ldr	r3, [r7, #4]
 800b268:	681b      	ldr	r3, [r3, #0]
 800b26a:	f107 0208 	add.w	r2, r7, #8
 800b26e:	4611      	mov	r1, r2
 800b270:	4618      	mov	r0, r3
 800b272:	f002 fccb 	bl	800dc0c <SDMMC_ConfigData>

  /* Send ACMD13 (SD_APP_STAUS)  with argument as card's RCA */
  errorstate = SDMMC_CmdStatusRegister(hsd->Instance);
 800b276:	687b      	ldr	r3, [r7, #4]
 800b278:	681b      	ldr	r3, [r3, #0]
 800b27a:	4618      	mov	r0, r3
 800b27c:	f002 ff4b 	bl	800e116 <SDMMC_CmdStatusRegister>
 800b280:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 800b282:	6a3b      	ldr	r3, [r7, #32]
 800b284:	2b00      	cmp	r3, #0
 800b286:	d02b      	beq.n	800b2e0 <SD_SendSDStatus+0x10c>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_NONE;
 800b288:	687b      	ldr	r3, [r7, #4]
 800b28a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800b28c:	687b      	ldr	r3, [r7, #4]
 800b28e:	635a      	str	r2, [r3, #52]	; 0x34
    return errorstate;
 800b290:	6a3b      	ldr	r3, [r7, #32]
 800b292:	e069      	b.n	800b368 <SD_SendSDStatus+0x194>
  }

  /* Get status data */
  while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
  {
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOHF))
 800b294:	687b      	ldr	r3, [r7, #4]
 800b296:	681b      	ldr	r3, [r3, #0]
 800b298:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b29a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800b29e:	2b00      	cmp	r3, #0
 800b2a0:	d013      	beq.n	800b2ca <SD_SendSDStatus+0xf6>
    {
      for (count = 0U; count < 8U; count++)
 800b2a2:	2300      	movs	r3, #0
 800b2a4:	62fb      	str	r3, [r7, #44]	; 0x2c
 800b2a6:	e00d      	b.n	800b2c4 <SD_SendSDStatus+0xf0>
      {
        *pData = SDMMC_ReadFIFO(hsd->Instance);
 800b2a8:	687b      	ldr	r3, [r7, #4]
 800b2aa:	681b      	ldr	r3, [r3, #0]
 800b2ac:	4618      	mov	r0, r3
 800b2ae:	f002 fc25 	bl	800dafc <SDMMC_ReadFIFO>
 800b2b2:	4602      	mov	r2, r0
 800b2b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b2b6:	601a      	str	r2, [r3, #0]
        pData++;
 800b2b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b2ba:	3304      	adds	r3, #4
 800b2bc:	62bb      	str	r3, [r7, #40]	; 0x28
      for (count = 0U; count < 8U; count++)
 800b2be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b2c0:	3301      	adds	r3, #1
 800b2c2:	62fb      	str	r3, [r7, #44]	; 0x2c
 800b2c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b2c6:	2b07      	cmp	r3, #7
 800b2c8:	d9ee      	bls.n	800b2a8 <SD_SendSDStatus+0xd4>
      }
    }

    if ((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 800b2ca:	f7f7 f86b 	bl	80023a4 <HAL_GetTick>
 800b2ce:	4602      	mov	r2, r0
 800b2d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b2d2:	1ad3      	subs	r3, r2, r3
 800b2d4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b2d8:	d102      	bne.n	800b2e0 <SD_SendSDStatus+0x10c>
    {
      return HAL_SD_ERROR_TIMEOUT;
 800b2da:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800b2de:	e043      	b.n	800b368 <SD_SendSDStatus+0x194>
  while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 800b2e0:	687b      	ldr	r3, [r7, #4]
 800b2e2:	681b      	ldr	r3, [r3, #0]
 800b2e4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b2e6:	f403 7395 	and.w	r3, r3, #298	; 0x12a
 800b2ea:	2b00      	cmp	r3, #0
 800b2ec:	d0d2      	beq.n	800b294 <SD_SendSDStatus+0xc0>
    }
  }

  if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 800b2ee:	687b      	ldr	r3, [r7, #4]
 800b2f0:	681b      	ldr	r3, [r3, #0]
 800b2f2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b2f4:	f003 0308 	and.w	r3, r3, #8
 800b2f8:	2b00      	cmp	r3, #0
 800b2fa:	d001      	beq.n	800b300 <SD_SendSDStatus+0x12c>
  {
    return HAL_SD_ERROR_DATA_TIMEOUT;
 800b2fc:	2308      	movs	r3, #8
 800b2fe:	e033      	b.n	800b368 <SD_SendSDStatus+0x194>
  }
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 800b300:	687b      	ldr	r3, [r7, #4]
 800b302:	681b      	ldr	r3, [r3, #0]
 800b304:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b306:	f003 0302 	and.w	r3, r3, #2
 800b30a:	2b00      	cmp	r3, #0
 800b30c:	d001      	beq.n	800b312 <SD_SendSDStatus+0x13e>
  {
    return HAL_SD_ERROR_DATA_CRC_FAIL;
 800b30e:	2302      	movs	r3, #2
 800b310:	e02a      	b.n	800b368 <SD_SendSDStatus+0x194>
  }
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 800b312:	687b      	ldr	r3, [r7, #4]
 800b314:	681b      	ldr	r3, [r3, #0]
 800b316:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b318:	f003 0320 	and.w	r3, r3, #32
 800b31c:	2b00      	cmp	r3, #0
 800b31e:	d017      	beq.n	800b350 <SD_SendSDStatus+0x17c>
  {
    return HAL_SD_ERROR_RX_OVERRUN;
 800b320:	2320      	movs	r3, #32
 800b322:	e021      	b.n	800b368 <SD_SendSDStatus+0x194>
    /* Nothing to do */
  }

  while ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DPSMACT)))
  {
    *pData = SDMMC_ReadFIFO(hsd->Instance);
 800b324:	687b      	ldr	r3, [r7, #4]
 800b326:	681b      	ldr	r3, [r3, #0]
 800b328:	4618      	mov	r0, r3
 800b32a:	f002 fbe7 	bl	800dafc <SDMMC_ReadFIFO>
 800b32e:	4602      	mov	r2, r0
 800b330:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b332:	601a      	str	r2, [r3, #0]
    pData++;
 800b334:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b336:	3304      	adds	r3, #4
 800b338:	62bb      	str	r3, [r7, #40]	; 0x28

    if ((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 800b33a:	f7f7 f833 	bl	80023a4 <HAL_GetTick>
 800b33e:	4602      	mov	r2, r0
 800b340:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b342:	1ad3      	subs	r3, r2, r3
 800b344:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b348:	d102      	bne.n	800b350 <SD_SendSDStatus+0x17c>
    {
      return HAL_SD_ERROR_TIMEOUT;
 800b34a:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800b34e:	e00b      	b.n	800b368 <SD_SendSDStatus+0x194>
  while ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DPSMACT)))
 800b350:	687b      	ldr	r3, [r7, #4]
 800b352:	681b      	ldr	r3, [r3, #0]
 800b354:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b356:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800b35a:	2b00      	cmp	r3, #0
 800b35c:	d1e2      	bne.n	800b324 <SD_SendSDStatus+0x150>
    }
  }

  /* Clear all the static status flags*/
  __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 800b35e:	687b      	ldr	r3, [r7, #4]
 800b360:	681b      	ldr	r3, [r3, #0]
 800b362:	4a03      	ldr	r2, [pc, #12]	; (800b370 <SD_SendSDStatus+0x19c>)
 800b364:	639a      	str	r2, [r3, #56]	; 0x38

  return HAL_SD_ERROR_NONE;
 800b366:	2300      	movs	r3, #0
}
 800b368:	4618      	mov	r0, r3
 800b36a:	3730      	adds	r7, #48	; 0x30
 800b36c:	46bd      	mov	sp, r7
 800b36e:	bd80      	pop	{r7, pc}
 800b370:	18000f3a 	.word	0x18000f3a

0800b374 <SD_SendStatus>:
  * @param  pCardStatus: pointer to the buffer that will contain the SD card
  *         status (Card Status register)
  * @retval error state
  */
static uint32_t SD_SendStatus(SD_HandleTypeDef *hsd, uint32_t *pCardStatus)
{
 800b374:	b580      	push	{r7, lr}
 800b376:	b084      	sub	sp, #16
 800b378:	af00      	add	r7, sp, #0
 800b37a:	6078      	str	r0, [r7, #4]
 800b37c:	6039      	str	r1, [r7, #0]
  uint32_t errorstate;

  if (pCardStatus == NULL)
 800b37e:	683b      	ldr	r3, [r7, #0]
 800b380:	2b00      	cmp	r3, #0
 800b382:	d102      	bne.n	800b38a <SD_SendStatus+0x16>
  {
    return HAL_SD_ERROR_PARAM;
 800b384:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800b388:	e018      	b.n	800b3bc <SD_SendStatus+0x48>
  }

  /* Send Status command */
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800b38a:	687b      	ldr	r3, [r7, #4]
 800b38c:	681a      	ldr	r2, [r3, #0]
 800b38e:	687b      	ldr	r3, [r7, #4]
 800b390:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b392:	041b      	lsls	r3, r3, #16
 800b394:	4619      	mov	r1, r3
 800b396:	4610      	mov	r0, r2
 800b398:	f002 fe9a 	bl	800e0d0 <SDMMC_CmdSendStatus>
 800b39c:	60f8      	str	r0, [r7, #12]
  if (errorstate != HAL_SD_ERROR_NONE)
 800b39e:	68fb      	ldr	r3, [r7, #12]
 800b3a0:	2b00      	cmp	r3, #0
 800b3a2:	d001      	beq.n	800b3a8 <SD_SendStatus+0x34>
  {
    return errorstate;
 800b3a4:	68fb      	ldr	r3, [r7, #12]
 800b3a6:	e009      	b.n	800b3bc <SD_SendStatus+0x48>
  }

  /* Get SD card status */
  *pCardStatus = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800b3a8:	687b      	ldr	r3, [r7, #4]
 800b3aa:	681b      	ldr	r3, [r3, #0]
 800b3ac:	2100      	movs	r1, #0
 800b3ae:	4618      	mov	r0, r3
 800b3b0:	f002 fc19 	bl	800dbe6 <SDMMC_GetResponse>
 800b3b4:	4602      	mov	r2, r0
 800b3b6:	683b      	ldr	r3, [r7, #0]
 800b3b8:	601a      	str	r2, [r3, #0]

  return HAL_SD_ERROR_NONE;
 800b3ba:	2300      	movs	r3, #0
}
 800b3bc:	4618      	mov	r0, r3
 800b3be:	3710      	adds	r7, #16
 800b3c0:	46bd      	mov	sp, r7
 800b3c2:	bd80      	pop	{r7, pc}

0800b3c4 <SD_WideBus_Enable>:
  * @brief  Enables the SDMMC wide bus mode.
  * @param  hsd: pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Enable(SD_HandleTypeDef *hsd)
{
 800b3c4:	b580      	push	{r7, lr}
 800b3c6:	b086      	sub	sp, #24
 800b3c8:	af00      	add	r7, sp, #0
 800b3ca:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0UL, 0UL};
 800b3cc:	2300      	movs	r3, #0
 800b3ce:	60fb      	str	r3, [r7, #12]
 800b3d0:	2300      	movs	r3, #0
 800b3d2:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if ((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 800b3d4:	687b      	ldr	r3, [r7, #4]
 800b3d6:	681b      	ldr	r3, [r3, #0]
 800b3d8:	2100      	movs	r1, #0
 800b3da:	4618      	mov	r0, r3
 800b3dc:	f002 fc03 	bl	800dbe6 <SDMMC_GetResponse>
 800b3e0:	4603      	mov	r3, r0
 800b3e2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800b3e6:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800b3ea:	d102      	bne.n	800b3f2 <SD_WideBus_Enable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 800b3ec:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800b3f0:	e02f      	b.n	800b452 <SD_WideBus_Enable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 800b3f2:	f107 030c 	add.w	r3, r7, #12
 800b3f6:	4619      	mov	r1, r3
 800b3f8:	6878      	ldr	r0, [r7, #4]
 800b3fa:	f000 f879 	bl	800b4f0 <SD_FindSCR>
 800b3fe:	6178      	str	r0, [r7, #20]
  if (errorstate != HAL_SD_ERROR_NONE)
 800b400:	697b      	ldr	r3, [r7, #20]
 800b402:	2b00      	cmp	r3, #0
 800b404:	d001      	beq.n	800b40a <SD_WideBus_Enable+0x46>
  {
    return errorstate;
 800b406:	697b      	ldr	r3, [r7, #20]
 800b408:	e023      	b.n	800b452 <SD_WideBus_Enable+0x8e>
  }

  /* If requested card supports wide bus operation */
  if ((scr[1U] & SDMMC_WIDE_BUS_SUPPORT) != SDMMC_ALLZERO)
 800b40a:	693b      	ldr	r3, [r7, #16]
 800b40c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800b410:	2b00      	cmp	r3, #0
 800b412:	d01c      	beq.n	800b44e <SD_WideBus_Enable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA.*/
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800b414:	687b      	ldr	r3, [r7, #4]
 800b416:	681a      	ldr	r2, [r3, #0]
 800b418:	687b      	ldr	r3, [r7, #4]
 800b41a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b41c:	041b      	lsls	r3, r3, #16
 800b41e:	4619      	mov	r1, r3
 800b420:	4610      	mov	r0, r2
 800b422:	f002 fd6c 	bl	800defe <SDMMC_CmdAppCommand>
 800b426:	6178      	str	r0, [r7, #20]
    if (errorstate != HAL_SD_ERROR_NONE)
 800b428:	697b      	ldr	r3, [r7, #20]
 800b42a:	2b00      	cmp	r3, #0
 800b42c:	d001      	beq.n	800b432 <SD_WideBus_Enable+0x6e>
    {
      return errorstate;
 800b42e:	697b      	ldr	r3, [r7, #20]
 800b430:	e00f      	b.n	800b452 <SD_WideBus_Enable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 2 for wide bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 2U);
 800b432:	687b      	ldr	r3, [r7, #4]
 800b434:	681b      	ldr	r3, [r3, #0]
 800b436:	2102      	movs	r1, #2
 800b438:	4618      	mov	r0, r3
 800b43a:	f002 fda3 	bl	800df84 <SDMMC_CmdBusWidth>
 800b43e:	6178      	str	r0, [r7, #20]
    if (errorstate != HAL_SD_ERROR_NONE)
 800b440:	697b      	ldr	r3, [r7, #20]
 800b442:	2b00      	cmp	r3, #0
 800b444:	d001      	beq.n	800b44a <SD_WideBus_Enable+0x86>
    {
      return errorstate;
 800b446:	697b      	ldr	r3, [r7, #20]
 800b448:	e003      	b.n	800b452 <SD_WideBus_Enable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 800b44a:	2300      	movs	r3, #0
 800b44c:	e001      	b.n	800b452 <SD_WideBus_Enable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800b44e:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 800b452:	4618      	mov	r0, r3
 800b454:	3718      	adds	r7, #24
 800b456:	46bd      	mov	sp, r7
 800b458:	bd80      	pop	{r7, pc}

0800b45a <SD_WideBus_Disable>:
  * @brief  Disables the SDMMC wide bus mode.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Disable(SD_HandleTypeDef *hsd)
{
 800b45a:	b580      	push	{r7, lr}
 800b45c:	b086      	sub	sp, #24
 800b45e:	af00      	add	r7, sp, #0
 800b460:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0UL, 0UL};
 800b462:	2300      	movs	r3, #0
 800b464:	60fb      	str	r3, [r7, #12]
 800b466:	2300      	movs	r3, #0
 800b468:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if ((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 800b46a:	687b      	ldr	r3, [r7, #4]
 800b46c:	681b      	ldr	r3, [r3, #0]
 800b46e:	2100      	movs	r1, #0
 800b470:	4618      	mov	r0, r3
 800b472:	f002 fbb8 	bl	800dbe6 <SDMMC_GetResponse>
 800b476:	4603      	mov	r3, r0
 800b478:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800b47c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800b480:	d102      	bne.n	800b488 <SD_WideBus_Disable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 800b482:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800b486:	e02f      	b.n	800b4e8 <SD_WideBus_Disable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 800b488:	f107 030c 	add.w	r3, r7, #12
 800b48c:	4619      	mov	r1, r3
 800b48e:	6878      	ldr	r0, [r7, #4]
 800b490:	f000 f82e 	bl	800b4f0 <SD_FindSCR>
 800b494:	6178      	str	r0, [r7, #20]
  if (errorstate != HAL_SD_ERROR_NONE)
 800b496:	697b      	ldr	r3, [r7, #20]
 800b498:	2b00      	cmp	r3, #0
 800b49a:	d001      	beq.n	800b4a0 <SD_WideBus_Disable+0x46>
  {
    return errorstate;
 800b49c:	697b      	ldr	r3, [r7, #20]
 800b49e:	e023      	b.n	800b4e8 <SD_WideBus_Disable+0x8e>
  }

  /* If requested card supports 1 bit mode operation */
  if ((scr[1U] & SDMMC_SINGLE_BUS_SUPPORT) != SDMMC_ALLZERO)
 800b4a0:	693b      	ldr	r3, [r7, #16]
 800b4a2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800b4a6:	2b00      	cmp	r3, #0
 800b4a8:	d01c      	beq.n	800b4e4 <SD_WideBus_Disable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800b4aa:	687b      	ldr	r3, [r7, #4]
 800b4ac:	681a      	ldr	r2, [r3, #0]
 800b4ae:	687b      	ldr	r3, [r7, #4]
 800b4b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b4b2:	041b      	lsls	r3, r3, #16
 800b4b4:	4619      	mov	r1, r3
 800b4b6:	4610      	mov	r0, r2
 800b4b8:	f002 fd21 	bl	800defe <SDMMC_CmdAppCommand>
 800b4bc:	6178      	str	r0, [r7, #20]
    if (errorstate != HAL_SD_ERROR_NONE)
 800b4be:	697b      	ldr	r3, [r7, #20]
 800b4c0:	2b00      	cmp	r3, #0
 800b4c2:	d001      	beq.n	800b4c8 <SD_WideBus_Disable+0x6e>
    {
      return errorstate;
 800b4c4:	697b      	ldr	r3, [r7, #20]
 800b4c6:	e00f      	b.n	800b4e8 <SD_WideBus_Disable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 0 for single bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 0U);
 800b4c8:	687b      	ldr	r3, [r7, #4]
 800b4ca:	681b      	ldr	r3, [r3, #0]
 800b4cc:	2100      	movs	r1, #0
 800b4ce:	4618      	mov	r0, r3
 800b4d0:	f002 fd58 	bl	800df84 <SDMMC_CmdBusWidth>
 800b4d4:	6178      	str	r0, [r7, #20]
    if (errorstate != HAL_SD_ERROR_NONE)
 800b4d6:	697b      	ldr	r3, [r7, #20]
 800b4d8:	2b00      	cmp	r3, #0
 800b4da:	d001      	beq.n	800b4e0 <SD_WideBus_Disable+0x86>
    {
      return errorstate;
 800b4dc:	697b      	ldr	r3, [r7, #20]
 800b4de:	e003      	b.n	800b4e8 <SD_WideBus_Disable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 800b4e0:	2300      	movs	r3, #0
 800b4e2:	e001      	b.n	800b4e8 <SD_WideBus_Disable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800b4e4:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 800b4e8:	4618      	mov	r0, r3
 800b4ea:	3718      	adds	r7, #24
 800b4ec:	46bd      	mov	sp, r7
 800b4ee:	bd80      	pop	{r7, pc}

0800b4f0 <SD_FindSCR>:
  * @param  hsd: Pointer to SD handle
  * @param  pSCR: pointer to the buffer that will contain the SCR value
  * @retval error state
  */
static uint32_t SD_FindSCR(SD_HandleTypeDef *hsd, uint32_t *pSCR)
{
 800b4f0:	b580      	push	{r7, lr}
 800b4f2:	b08e      	sub	sp, #56	; 0x38
 800b4f4:	af00      	add	r7, sp, #0
 800b4f6:	6078      	str	r0, [r7, #4]
 800b4f8:	6039      	str	r1, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 800b4fa:	f7f6 ff53 	bl	80023a4 <HAL_GetTick>
 800b4fe:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t index = 0U;
 800b500:	2300      	movs	r3, #0
 800b502:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t tempscr[2U] = {0UL, 0UL};
 800b504:	2300      	movs	r3, #0
 800b506:	60bb      	str	r3, [r7, #8]
 800b508:	2300      	movs	r3, #0
 800b50a:	60fb      	str	r3, [r7, #12]
  uint32_t *scr = pSCR;
 800b50c:	683b      	ldr	r3, [r7, #0]
 800b50e:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Set Block Size To 8 Bytes */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 8U);
 800b510:	687b      	ldr	r3, [r7, #4]
 800b512:	681b      	ldr	r3, [r3, #0]
 800b514:	2108      	movs	r1, #8
 800b516:	4618      	mov	r0, r3
 800b518:	f002 fba4 	bl	800dc64 <SDMMC_CmdBlockLength>
 800b51c:	62b8      	str	r0, [r7, #40]	; 0x28
  if (errorstate != HAL_SD_ERROR_NONE)
 800b51e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b520:	2b00      	cmp	r3, #0
 800b522:	d001      	beq.n	800b528 <SD_FindSCR+0x38>
  {
    return errorstate;
 800b524:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b526:	e0ad      	b.n	800b684 <SD_FindSCR+0x194>
  }

  /* Send CMD55 APP_CMD with argument as card's RCA */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)((hsd->SdCard.RelCardAdd) << 16U));
 800b528:	687b      	ldr	r3, [r7, #4]
 800b52a:	681a      	ldr	r2, [r3, #0]
 800b52c:	687b      	ldr	r3, [r7, #4]
 800b52e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b530:	041b      	lsls	r3, r3, #16
 800b532:	4619      	mov	r1, r3
 800b534:	4610      	mov	r0, r2
 800b536:	f002 fce2 	bl	800defe <SDMMC_CmdAppCommand>
 800b53a:	62b8      	str	r0, [r7, #40]	; 0x28
  if (errorstate != HAL_SD_ERROR_NONE)
 800b53c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b53e:	2b00      	cmp	r3, #0
 800b540:	d001      	beq.n	800b546 <SD_FindSCR+0x56>
  {
    return errorstate;
 800b542:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b544:	e09e      	b.n	800b684 <SD_FindSCR+0x194>
  }

  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800b546:	f04f 33ff 	mov.w	r3, #4294967295
 800b54a:	613b      	str	r3, [r7, #16]
  config.DataLength    = 8U;
 800b54c:	2308      	movs	r3, #8
 800b54e:	617b      	str	r3, [r7, #20]
  config.DataBlockSize = SDMMC_DATABLOCK_SIZE_8B;
 800b550:	2330      	movs	r3, #48	; 0x30
 800b552:	61bb      	str	r3, [r7, #24]
  config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 800b554:	2302      	movs	r3, #2
 800b556:	61fb      	str	r3, [r7, #28]
  config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 800b558:	2300      	movs	r3, #0
 800b55a:	623b      	str	r3, [r7, #32]
  config.DPSM          = SDMMC_DPSM_ENABLE;
 800b55c:	2301      	movs	r3, #1
 800b55e:	627b      	str	r3, [r7, #36]	; 0x24
  (void)SDMMC_ConfigData(hsd->Instance, &config);
 800b560:	687b      	ldr	r3, [r7, #4]
 800b562:	681b      	ldr	r3, [r3, #0]
 800b564:	f107 0210 	add.w	r2, r7, #16
 800b568:	4611      	mov	r1, r2
 800b56a:	4618      	mov	r0, r3
 800b56c:	f002 fb4e 	bl	800dc0c <SDMMC_ConfigData>

  /* Send ACMD51 SD_APP_SEND_SCR with argument as 0 */
  errorstate = SDMMC_CmdSendSCR(hsd->Instance);
 800b570:	687b      	ldr	r3, [r7, #4]
 800b572:	681b      	ldr	r3, [r3, #0]
 800b574:	4618      	mov	r0, r3
 800b576:	f002 fd28 	bl	800dfca <SDMMC_CmdSendSCR>
 800b57a:	62b8      	str	r0, [r7, #40]	; 0x28
  if (errorstate != HAL_SD_ERROR_NONE)
 800b57c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b57e:	2b00      	cmp	r3, #0
 800b580:	d027      	beq.n	800b5d2 <SD_FindSCR+0xe2>
  {
    return errorstate;
 800b582:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b584:	e07e      	b.n	800b684 <SD_FindSCR+0x194>
  }

  while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND |
                            SDMMC_FLAG_DATAEND))
  {
    if ((!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOE)) && (index == 0U))
 800b586:	687b      	ldr	r3, [r7, #4]
 800b588:	681b      	ldr	r3, [r3, #0]
 800b58a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b58c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800b590:	2b00      	cmp	r3, #0
 800b592:	d113      	bne.n	800b5bc <SD_FindSCR+0xcc>
 800b594:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b596:	2b00      	cmp	r3, #0
 800b598:	d110      	bne.n	800b5bc <SD_FindSCR+0xcc>
    {
      tempscr[0] = SDMMC_ReadFIFO(hsd->Instance);
 800b59a:	687b      	ldr	r3, [r7, #4]
 800b59c:	681b      	ldr	r3, [r3, #0]
 800b59e:	4618      	mov	r0, r3
 800b5a0:	f002 faac 	bl	800dafc <SDMMC_ReadFIFO>
 800b5a4:	4603      	mov	r3, r0
 800b5a6:	60bb      	str	r3, [r7, #8]
      tempscr[1] = SDMMC_ReadFIFO(hsd->Instance);
 800b5a8:	687b      	ldr	r3, [r7, #4]
 800b5aa:	681b      	ldr	r3, [r3, #0]
 800b5ac:	4618      	mov	r0, r3
 800b5ae:	f002 faa5 	bl	800dafc <SDMMC_ReadFIFO>
 800b5b2:	4603      	mov	r3, r0
 800b5b4:	60fb      	str	r3, [r7, #12]
      index++;
 800b5b6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b5b8:	3301      	adds	r3, #1
 800b5ba:	637b      	str	r3, [r7, #52]	; 0x34
    }


    if ((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 800b5bc:	f7f6 fef2 	bl	80023a4 <HAL_GetTick>
 800b5c0:	4602      	mov	r2, r0
 800b5c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b5c4:	1ad3      	subs	r3, r2, r3
 800b5c6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b5ca:	d102      	bne.n	800b5d2 <SD_FindSCR+0xe2>
    {
      return HAL_SD_ERROR_TIMEOUT;
 800b5cc:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800b5d0:	e058      	b.n	800b684 <SD_FindSCR+0x194>
  while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND |
 800b5d2:	687b      	ldr	r3, [r7, #4]
 800b5d4:	681b      	ldr	r3, [r3, #0]
 800b5d6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800b5d8:	f240 532a 	movw	r3, #1322	; 0x52a
 800b5dc:	4013      	ands	r3, r2
 800b5de:	2b00      	cmp	r3, #0
 800b5e0:	d0d1      	beq.n	800b586 <SD_FindSCR+0x96>
    }
  }

  if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 800b5e2:	687b      	ldr	r3, [r7, #4]
 800b5e4:	681b      	ldr	r3, [r3, #0]
 800b5e6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b5e8:	f003 0308 	and.w	r3, r3, #8
 800b5ec:	2b00      	cmp	r3, #0
 800b5ee:	d005      	beq.n	800b5fc <SD_FindSCR+0x10c>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DTIMEOUT);
 800b5f0:	687b      	ldr	r3, [r7, #4]
 800b5f2:	681b      	ldr	r3, [r3, #0]
 800b5f4:	2208      	movs	r2, #8
 800b5f6:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_TIMEOUT;
 800b5f8:	2308      	movs	r3, #8
 800b5fa:	e043      	b.n	800b684 <SD_FindSCR+0x194>
  }
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 800b5fc:	687b      	ldr	r3, [r7, #4]
 800b5fe:	681b      	ldr	r3, [r3, #0]
 800b600:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b602:	f003 0302 	and.w	r3, r3, #2
 800b606:	2b00      	cmp	r3, #0
 800b608:	d005      	beq.n	800b616 <SD_FindSCR+0x126>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DCRCFAIL);
 800b60a:	687b      	ldr	r3, [r7, #4]
 800b60c:	681b      	ldr	r3, [r3, #0]
 800b60e:	2202      	movs	r2, #2
 800b610:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_CRC_FAIL;
 800b612:	2302      	movs	r3, #2
 800b614:	e036      	b.n	800b684 <SD_FindSCR+0x194>
  }
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 800b616:	687b      	ldr	r3, [r7, #4]
 800b618:	681b      	ldr	r3, [r3, #0]
 800b61a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b61c:	f003 0320 	and.w	r3, r3, #32
 800b620:	2b00      	cmp	r3, #0
 800b622:	d005      	beq.n	800b630 <SD_FindSCR+0x140>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_RXOVERR);
 800b624:	687b      	ldr	r3, [r7, #4]
 800b626:	681b      	ldr	r3, [r3, #0]
 800b628:	2220      	movs	r2, #32
 800b62a:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_RX_OVERRUN;
 800b62c:	2320      	movs	r3, #32
 800b62e:	e029      	b.n	800b684 <SD_FindSCR+0x194>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 800b630:	687b      	ldr	r3, [r7, #4]
 800b632:	681b      	ldr	r3, [r3, #0]
 800b634:	4a15      	ldr	r2, [pc, #84]	; (800b68c <SD_FindSCR+0x19c>)
 800b636:	639a      	str	r2, [r3, #56]	; 0x38

    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) | \
 800b638:	68fb      	ldr	r3, [r7, #12]
 800b63a:	061a      	lsls	r2, r3, #24
 800b63c:	68fb      	ldr	r3, [r7, #12]
 800b63e:	021b      	lsls	r3, r3, #8
 800b640:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800b644:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 800b646:	68fb      	ldr	r3, [r7, #12]
 800b648:	0a1b      	lsrs	r3, r3, #8
 800b64a:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) | \
 800b64e:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 800b650:	68fb      	ldr	r3, [r7, #12]
 800b652:	0e1b      	lsrs	r3, r3, #24
 800b654:	431a      	orrs	r2, r3
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) | \
 800b656:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b658:	601a      	str	r2, [r3, #0]
    scr++;
 800b65a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b65c:	3304      	adds	r3, #4
 800b65e:	62fb      	str	r3, [r7, #44]	; 0x2c
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) | \
 800b660:	68bb      	ldr	r3, [r7, #8]
 800b662:	061a      	lsls	r2, r3, #24
 800b664:	68bb      	ldr	r3, [r7, #8]
 800b666:	021b      	lsls	r3, r3, #8
 800b668:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800b66c:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 800b66e:	68bb      	ldr	r3, [r7, #8]
 800b670:	0a1b      	lsrs	r3, r3, #8
 800b672:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) | \
 800b676:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 800b678:	68bb      	ldr	r3, [r7, #8]
 800b67a:	0e1b      	lsrs	r3, r3, #24
 800b67c:	431a      	orrs	r2, r3
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) | \
 800b67e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b680:	601a      	str	r2, [r3, #0]

  }

  return HAL_SD_ERROR_NONE;
 800b682:	2300      	movs	r3, #0
}
 800b684:	4618      	mov	r0, r3
 800b686:	3738      	adds	r7, #56	; 0x38
 800b688:	46bd      	mov	sp, r7
 800b68a:	bd80      	pop	{r7, pc}
 800b68c:	18000f3a 	.word	0x18000f3a

0800b690 <SD_Read_IT>:
  * @param  hsd: pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Read_IT(SD_HandleTypeDef *hsd)
{
 800b690:	b580      	push	{r7, lr}
 800b692:	b086      	sub	sp, #24
 800b694:	af00      	add	r7, sp, #0
 800b696:	6078      	str	r0, [r7, #4]
  uint32_t count;
  uint32_t data;
  uint8_t *tmp;

  tmp = hsd->pRxBuffPtr;
 800b698:	687b      	ldr	r3, [r7, #4]
 800b69a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b69c:	613b      	str	r3, [r7, #16]

  if (hsd->RxXferSize >= 32U)
 800b69e:	687b      	ldr	r3, [r7, #4]
 800b6a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b6a2:	2b1f      	cmp	r3, #31
 800b6a4:	d936      	bls.n	800b714 <SD_Read_IT+0x84>
  {
    /* Read data from SDMMC Rx FIFO */
    for (count = 0U; count < 8U; count++)
 800b6a6:	2300      	movs	r3, #0
 800b6a8:	617b      	str	r3, [r7, #20]
 800b6aa:	e027      	b.n	800b6fc <SD_Read_IT+0x6c>
    {
      data = SDMMC_ReadFIFO(hsd->Instance);
 800b6ac:	687b      	ldr	r3, [r7, #4]
 800b6ae:	681b      	ldr	r3, [r3, #0]
 800b6b0:	4618      	mov	r0, r3
 800b6b2:	f002 fa23 	bl	800dafc <SDMMC_ReadFIFO>
 800b6b6:	60f8      	str	r0, [r7, #12]
      *tmp = (uint8_t)(data & 0xFFU);
 800b6b8:	68fb      	ldr	r3, [r7, #12]
 800b6ba:	b2da      	uxtb	r2, r3
 800b6bc:	693b      	ldr	r3, [r7, #16]
 800b6be:	701a      	strb	r2, [r3, #0]
      tmp++;
 800b6c0:	693b      	ldr	r3, [r7, #16]
 800b6c2:	3301      	adds	r3, #1
 800b6c4:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 8U) & 0xFFU);
 800b6c6:	68fb      	ldr	r3, [r7, #12]
 800b6c8:	0a1b      	lsrs	r3, r3, #8
 800b6ca:	b2da      	uxtb	r2, r3
 800b6cc:	693b      	ldr	r3, [r7, #16]
 800b6ce:	701a      	strb	r2, [r3, #0]
      tmp++;
 800b6d0:	693b      	ldr	r3, [r7, #16]
 800b6d2:	3301      	adds	r3, #1
 800b6d4:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 16U) & 0xFFU);
 800b6d6:	68fb      	ldr	r3, [r7, #12]
 800b6d8:	0c1b      	lsrs	r3, r3, #16
 800b6da:	b2da      	uxtb	r2, r3
 800b6dc:	693b      	ldr	r3, [r7, #16]
 800b6de:	701a      	strb	r2, [r3, #0]
      tmp++;
 800b6e0:	693b      	ldr	r3, [r7, #16]
 800b6e2:	3301      	adds	r3, #1
 800b6e4:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 24U) & 0xFFU);
 800b6e6:	68fb      	ldr	r3, [r7, #12]
 800b6e8:	0e1b      	lsrs	r3, r3, #24
 800b6ea:	b2da      	uxtb	r2, r3
 800b6ec:	693b      	ldr	r3, [r7, #16]
 800b6ee:	701a      	strb	r2, [r3, #0]
      tmp++;
 800b6f0:	693b      	ldr	r3, [r7, #16]
 800b6f2:	3301      	adds	r3, #1
 800b6f4:	613b      	str	r3, [r7, #16]
    for (count = 0U; count < 8U; count++)
 800b6f6:	697b      	ldr	r3, [r7, #20]
 800b6f8:	3301      	adds	r3, #1
 800b6fa:	617b      	str	r3, [r7, #20]
 800b6fc:	697b      	ldr	r3, [r7, #20]
 800b6fe:	2b07      	cmp	r3, #7
 800b700:	d9d4      	bls.n	800b6ac <SD_Read_IT+0x1c>
    }

    hsd->pRxBuffPtr = tmp;
 800b702:	687b      	ldr	r3, [r7, #4]
 800b704:	693a      	ldr	r2, [r7, #16]
 800b706:	625a      	str	r2, [r3, #36]	; 0x24
    hsd->RxXferSize -= 32U;
 800b708:	687b      	ldr	r3, [r7, #4]
 800b70a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b70c:	f1a3 0220 	sub.w	r2, r3, #32
 800b710:	687b      	ldr	r3, [r7, #4]
 800b712:	629a      	str	r2, [r3, #40]	; 0x28
  }
}
 800b714:	bf00      	nop
 800b716:	3718      	adds	r7, #24
 800b718:	46bd      	mov	sp, r7
 800b71a:	bd80      	pop	{r7, pc}

0800b71c <SD_Write_IT>:
  * @param  hsd: pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Write_IT(SD_HandleTypeDef *hsd)
{
 800b71c:	b580      	push	{r7, lr}
 800b71e:	b086      	sub	sp, #24
 800b720:	af00      	add	r7, sp, #0
 800b722:	6078      	str	r0, [r7, #4]
  uint32_t count;
  uint32_t data;
  uint8_t *tmp;

  tmp = hsd->pTxBuffPtr;
 800b724:	687b      	ldr	r3, [r7, #4]
 800b726:	69db      	ldr	r3, [r3, #28]
 800b728:	613b      	str	r3, [r7, #16]

  if (hsd->TxXferSize >= 32U)
 800b72a:	687b      	ldr	r3, [r7, #4]
 800b72c:	6a1b      	ldr	r3, [r3, #32]
 800b72e:	2b1f      	cmp	r3, #31
 800b730:	d93a      	bls.n	800b7a8 <SD_Write_IT+0x8c>
  {
    /* Write data to SDMMC Tx FIFO */
    for (count = 0U; count < 8U; count++)
 800b732:	2300      	movs	r3, #0
 800b734:	617b      	str	r3, [r7, #20]
 800b736:	e02b      	b.n	800b790 <SD_Write_IT+0x74>
    {
      data = (uint32_t)(*tmp);
 800b738:	693b      	ldr	r3, [r7, #16]
 800b73a:	781b      	ldrb	r3, [r3, #0]
 800b73c:	60fb      	str	r3, [r7, #12]
      tmp++;
 800b73e:	693b      	ldr	r3, [r7, #16]
 800b740:	3301      	adds	r3, #1
 800b742:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 8U);
 800b744:	693b      	ldr	r3, [r7, #16]
 800b746:	781b      	ldrb	r3, [r3, #0]
 800b748:	021a      	lsls	r2, r3, #8
 800b74a:	68fb      	ldr	r3, [r7, #12]
 800b74c:	4313      	orrs	r3, r2
 800b74e:	60fb      	str	r3, [r7, #12]
      tmp++;
 800b750:	693b      	ldr	r3, [r7, #16]
 800b752:	3301      	adds	r3, #1
 800b754:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 16U);
 800b756:	693b      	ldr	r3, [r7, #16]
 800b758:	781b      	ldrb	r3, [r3, #0]
 800b75a:	041a      	lsls	r2, r3, #16
 800b75c:	68fb      	ldr	r3, [r7, #12]
 800b75e:	4313      	orrs	r3, r2
 800b760:	60fb      	str	r3, [r7, #12]
      tmp++;
 800b762:	693b      	ldr	r3, [r7, #16]
 800b764:	3301      	adds	r3, #1
 800b766:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 24U);
 800b768:	693b      	ldr	r3, [r7, #16]
 800b76a:	781b      	ldrb	r3, [r3, #0]
 800b76c:	061a      	lsls	r2, r3, #24
 800b76e:	68fb      	ldr	r3, [r7, #12]
 800b770:	4313      	orrs	r3, r2
 800b772:	60fb      	str	r3, [r7, #12]
      tmp++;
 800b774:	693b      	ldr	r3, [r7, #16]
 800b776:	3301      	adds	r3, #1
 800b778:	613b      	str	r3, [r7, #16]
      (void)SDMMC_WriteFIFO(hsd->Instance, &data);
 800b77a:	687b      	ldr	r3, [r7, #4]
 800b77c:	681b      	ldr	r3, [r3, #0]
 800b77e:	f107 020c 	add.w	r2, r7, #12
 800b782:	4611      	mov	r1, r2
 800b784:	4618      	mov	r0, r3
 800b786:	f002 f9c6 	bl	800db16 <SDMMC_WriteFIFO>
    for (count = 0U; count < 8U; count++)
 800b78a:	697b      	ldr	r3, [r7, #20]
 800b78c:	3301      	adds	r3, #1
 800b78e:	617b      	str	r3, [r7, #20]
 800b790:	697b      	ldr	r3, [r7, #20]
 800b792:	2b07      	cmp	r3, #7
 800b794:	d9d0      	bls.n	800b738 <SD_Write_IT+0x1c>
    }

    hsd->pTxBuffPtr = tmp;
 800b796:	687b      	ldr	r3, [r7, #4]
 800b798:	693a      	ldr	r2, [r7, #16]
 800b79a:	61da      	str	r2, [r3, #28]
    hsd->TxXferSize -= 32U;
 800b79c:	687b      	ldr	r3, [r7, #4]
 800b79e:	6a1b      	ldr	r3, [r3, #32]
 800b7a0:	f1a3 0220 	sub.w	r2, r3, #32
 800b7a4:	687b      	ldr	r3, [r7, #4]
 800b7a6:	621a      	str	r2, [r3, #32]
  }
}
 800b7a8:	bf00      	nop
 800b7aa:	3718      	adds	r7, #24
 800b7ac:	46bd      	mov	sp, r7
 800b7ae:	bd80      	pop	{r7, pc}

0800b7b0 <HAL_SDEx_Read_DMADoubleBuf0CpltCallback>:
  * @brief Read DMA Buffer 0 Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
__weak void HAL_SDEx_Read_DMADoubleBuf0CpltCallback(SD_HandleTypeDef *hsd)
{
 800b7b0:	b480      	push	{r7}
 800b7b2:	b083      	sub	sp, #12
 800b7b4:	af00      	add	r7, sp, #0
 800b7b6:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SDEx_Read_DMADoubleBuf0CpltCallback can be implemented in the user file
   */
}
 800b7b8:	bf00      	nop
 800b7ba:	370c      	adds	r7, #12
 800b7bc:	46bd      	mov	sp, r7
 800b7be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b7c2:	4770      	bx	lr

0800b7c4 <HAL_SDEx_Read_DMADoubleBuf1CpltCallback>:
  * @brief Read DMA Buffer 1 Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
__weak void HAL_SDEx_Read_DMADoubleBuf1CpltCallback(SD_HandleTypeDef *hsd)
{
 800b7c4:	b480      	push	{r7}
 800b7c6:	b083      	sub	sp, #12
 800b7c8:	af00      	add	r7, sp, #0
 800b7ca:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SDEx_Read_DMADoubleBuf1CpltCallback can be implemented in the user file
   */
}
 800b7cc:	bf00      	nop
 800b7ce:	370c      	adds	r7, #12
 800b7d0:	46bd      	mov	sp, r7
 800b7d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b7d6:	4770      	bx	lr

0800b7d8 <HAL_SDEx_Write_DMADoubleBuf0CpltCallback>:
  * @brief Write DMA Buffer 0 Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
__weak void HAL_SDEx_Write_DMADoubleBuf0CpltCallback(SD_HandleTypeDef *hsd)
{
 800b7d8:	b480      	push	{r7}
 800b7da:	b083      	sub	sp, #12
 800b7dc:	af00      	add	r7, sp, #0
 800b7de:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SDEx_Write_DMADoubleBuf0CpltCallback can be implemented in the user file
   */
}
 800b7e0:	bf00      	nop
 800b7e2:	370c      	adds	r7, #12
 800b7e4:	46bd      	mov	sp, r7
 800b7e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b7ea:	4770      	bx	lr

0800b7ec <HAL_SDEx_Write_DMADoubleBuf1CpltCallback>:
  * @brief Write DMA Buffer 1 Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
__weak void HAL_SDEx_Write_DMADoubleBuf1CpltCallback(SD_HandleTypeDef *hsd)
{
 800b7ec:	b480      	push	{r7}
 800b7ee:	b083      	sub	sp, #12
 800b7f0:	af00      	add	r7, sp, #0
 800b7f2:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SDEx_Write_DMADoubleBuf1CpltCallback can be implemented in the user file
   */
}
 800b7f4:	bf00      	nop
 800b7f6:	370c      	adds	r7, #12
 800b7f8:	46bd      	mov	sp, r7
 800b7fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b7fe:	4770      	bx	lr

0800b800 <HAL_SDRAM_Init>:
  *                the configuration information for SDRAM module.
  * @param  Timing Pointer to SDRAM control timing structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_Init(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_TimingTypeDef *Timing)
{
 800b800:	b580      	push	{r7, lr}
 800b802:	b082      	sub	sp, #8
 800b804:	af00      	add	r7, sp, #0
 800b806:	6078      	str	r0, [r7, #4]
 800b808:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM handle parameter */
  if (hsdram == NULL)
 800b80a:	687b      	ldr	r3, [r7, #4]
 800b80c:	2b00      	cmp	r3, #0
 800b80e:	d101      	bne.n	800b814 <HAL_SDRAM_Init+0x14>
  {
    return HAL_ERROR;
 800b810:	2301      	movs	r3, #1
 800b812:	e02b      	b.n	800b86c <HAL_SDRAM_Init+0x6c>
  }

  if (hsdram->State == HAL_SDRAM_STATE_RESET)
 800b814:	687b      	ldr	r3, [r7, #4]
 800b816:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800b81a:	b2db      	uxtb	r3, r3
 800b81c:	2b00      	cmp	r3, #0
 800b81e:	d106      	bne.n	800b82e <HAL_SDRAM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hsdram->Lock = HAL_UNLOCKED;
 800b820:	687b      	ldr	r3, [r7, #4]
 800b822:	2200      	movs	r2, #0
 800b824:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

    /* Init the low level hardware */
    hsdram->MspInitCallback(hsdram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SDRAM_MspInit(hsdram);
 800b828:	6878      	ldr	r0, [r7, #4]
 800b82a:	f7f5 fd4b 	bl	80012c4 <HAL_SDRAM_MspInit>
#endif /* USE_HAL_SDRAM_REGISTER_CALLBACKS */
  }

  /* Initialize the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 800b82e:	687b      	ldr	r3, [r7, #4]
 800b830:	2202      	movs	r2, #2
 800b832:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  /* Initialize SDRAM control Interface */
  (void)FMC_SDRAM_Init(hsdram->Instance, &(hsdram->Init));
 800b836:	687b      	ldr	r3, [r7, #4]
 800b838:	681a      	ldr	r2, [r3, #0]
 800b83a:	687b      	ldr	r3, [r7, #4]
 800b83c:	3304      	adds	r3, #4
 800b83e:	4619      	mov	r1, r3
 800b840:	4610      	mov	r0, r2
 800b842:	f002 f86b 	bl	800d91c <FMC_SDRAM_Init>

  /* Initialize SDRAM timing Interface */
  (void)FMC_SDRAM_Timing_Init(hsdram->Instance, Timing, hsdram->Init.SDBank);
 800b846:	687b      	ldr	r3, [r7, #4]
 800b848:	6818      	ldr	r0, [r3, #0]
 800b84a:	687b      	ldr	r3, [r7, #4]
 800b84c:	685b      	ldr	r3, [r3, #4]
 800b84e:	461a      	mov	r2, r3
 800b850:	6839      	ldr	r1, [r7, #0]
 800b852:	f002 f8bf 	bl	800d9d4 <FMC_SDRAM_Timing_Init>

  /* Enable FMC Peripheral */
  __FMC_ENABLE();
 800b856:	4b07      	ldr	r3, [pc, #28]	; (800b874 <HAL_SDRAM_Init+0x74>)
 800b858:	681b      	ldr	r3, [r3, #0]
 800b85a:	4a06      	ldr	r2, [pc, #24]	; (800b874 <HAL_SDRAM_Init+0x74>)
 800b85c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800b860:	6013      	str	r3, [r2, #0]
  /* Update the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_READY;
 800b862:	687b      	ldr	r3, [r7, #4]
 800b864:	2201      	movs	r2, #1
 800b866:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 800b86a:	2300      	movs	r3, #0
}
 800b86c:	4618      	mov	r0, r3
 800b86e:	3708      	adds	r7, #8
 800b870:	46bd      	mov	sp, r7
 800b872:	bd80      	pop	{r7, pc}
 800b874:	52004000 	.word	0x52004000

0800b878 <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800b878:	b580      	push	{r7, lr}
 800b87a:	b084      	sub	sp, #16
 800b87c:	af00      	add	r7, sp, #0
 800b87e:	6078      	str	r0, [r7, #4]
#if (USE_SPI_CRC != 0UL)
  uint32_t crc_length;
#else
  uint32_t crc_length = 0UL;
 800b880:	2300      	movs	r3, #0
 800b882:	60fb      	str	r3, [r7, #12]
#endif
  uint32_t packet_length;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800b884:	687b      	ldr	r3, [r7, #4]
 800b886:	2b00      	cmp	r3, #0
 800b888:	d101      	bne.n	800b88e <HAL_SPI_Init+0x16>
  {
    return HAL_ERROR;
 800b88a:	2301      	movs	r3, #1
 800b88c:	e0eb      	b.n	800ba66 <HAL_SPI_Init+0x1ee>
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.TxCRCInitializationPattern));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.RxCRCInitializationPattern));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800b88e:	687b      	ldr	r3, [r7, #4]
 800b890:	2200      	movs	r2, #0
 800b892:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  /* Verify that the SPI instance supports Data Size higher than 16bits */
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 800b894:	687b      	ldr	r3, [r7, #4]
 800b896:	681b      	ldr	r3, [r3, #0]
 800b898:	4a75      	ldr	r2, [pc, #468]	; (800ba70 <HAL_SPI_Init+0x1f8>)
 800b89a:	4293      	cmp	r3, r2
 800b89c:	d00f      	beq.n	800b8be <HAL_SPI_Init+0x46>
 800b89e:	687b      	ldr	r3, [r7, #4]
 800b8a0:	681b      	ldr	r3, [r3, #0]
 800b8a2:	4a74      	ldr	r2, [pc, #464]	; (800ba74 <HAL_SPI_Init+0x1fc>)
 800b8a4:	4293      	cmp	r3, r2
 800b8a6:	d00a      	beq.n	800b8be <HAL_SPI_Init+0x46>
 800b8a8:	687b      	ldr	r3, [r7, #4]
 800b8aa:	681b      	ldr	r3, [r3, #0]
 800b8ac:	4a72      	ldr	r2, [pc, #456]	; (800ba78 <HAL_SPI_Init+0x200>)
 800b8ae:	4293      	cmp	r3, r2
 800b8b0:	d005      	beq.n	800b8be <HAL_SPI_Init+0x46>
 800b8b2:	687b      	ldr	r3, [r7, #4]
 800b8b4:	68db      	ldr	r3, [r3, #12]
 800b8b6:	2b0f      	cmp	r3, #15
 800b8b8:	d901      	bls.n	800b8be <HAL_SPI_Init+0x46>
  {
    return HAL_ERROR;
 800b8ba:	2301      	movs	r3, #1
 800b8bc:	e0d3      	b.n	800ba66 <HAL_SPI_Init+0x1ee>
  }

  /* Verify that the SPI instance supports requested data packing */
  packet_length = SPI_GetPacketSize(hspi);
 800b8be:	6878      	ldr	r0, [r7, #4]
 800b8c0:	f000 fe88 	bl	800c5d4 <SPI_GetPacketSize>
 800b8c4:	60b8      	str	r0, [r7, #8]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 800b8c6:	687b      	ldr	r3, [r7, #4]
 800b8c8:	681b      	ldr	r3, [r3, #0]
 800b8ca:	4a69      	ldr	r2, [pc, #420]	; (800ba70 <HAL_SPI_Init+0x1f8>)
 800b8cc:	4293      	cmp	r3, r2
 800b8ce:	d00c      	beq.n	800b8ea <HAL_SPI_Init+0x72>
 800b8d0:	687b      	ldr	r3, [r7, #4]
 800b8d2:	681b      	ldr	r3, [r3, #0]
 800b8d4:	4a67      	ldr	r2, [pc, #412]	; (800ba74 <HAL_SPI_Init+0x1fc>)
 800b8d6:	4293      	cmp	r3, r2
 800b8d8:	d007      	beq.n	800b8ea <HAL_SPI_Init+0x72>
 800b8da:	687b      	ldr	r3, [r7, #4]
 800b8dc:	681b      	ldr	r3, [r3, #0]
 800b8de:	4a66      	ldr	r2, [pc, #408]	; (800ba78 <HAL_SPI_Init+0x200>)
 800b8e0:	4293      	cmp	r3, r2
 800b8e2:	d002      	beq.n	800b8ea <HAL_SPI_Init+0x72>
 800b8e4:	68bb      	ldr	r3, [r7, #8]
 800b8e6:	2b08      	cmp	r3, #8
 800b8e8:	d811      	bhi.n	800b90e <HAL_SPI_Init+0x96>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 800b8ea:	687b      	ldr	r3, [r7, #4]
 800b8ec:	681b      	ldr	r3, [r3, #0]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 800b8ee:	4a60      	ldr	r2, [pc, #384]	; (800ba70 <HAL_SPI_Init+0x1f8>)
 800b8f0:	4293      	cmp	r3, r2
 800b8f2:	d009      	beq.n	800b908 <HAL_SPI_Init+0x90>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 800b8f4:	687b      	ldr	r3, [r7, #4]
 800b8f6:	681b      	ldr	r3, [r3, #0]
 800b8f8:	4a5e      	ldr	r2, [pc, #376]	; (800ba74 <HAL_SPI_Init+0x1fc>)
 800b8fa:	4293      	cmp	r3, r2
 800b8fc:	d004      	beq.n	800b908 <HAL_SPI_Init+0x90>
 800b8fe:	687b      	ldr	r3, [r7, #4]
 800b900:	681b      	ldr	r3, [r3, #0]
 800b902:	4a5d      	ldr	r2, [pc, #372]	; (800ba78 <HAL_SPI_Init+0x200>)
 800b904:	4293      	cmp	r3, r2
 800b906:	d104      	bne.n	800b912 <HAL_SPI_Init+0x9a>
 800b908:	68bb      	ldr	r3, [r7, #8]
 800b90a:	2b10      	cmp	r3, #16
 800b90c:	d901      	bls.n	800b912 <HAL_SPI_Init+0x9a>
  {
    return HAL_ERROR;
 800b90e:	2301      	movs	r3, #1
 800b910:	e0a9      	b.n	800ba66 <HAL_SPI_Init+0x1ee>
  {
    crc_length = hspi->Init.DataSize << SPI_CFG1_CRCSIZE_Pos;
  }
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800b912:	687b      	ldr	r3, [r7, #4]
 800b914:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800b918:	b2db      	uxtb	r3, r3
 800b91a:	2b00      	cmp	r3, #0
 800b91c:	d106      	bne.n	800b92c <HAL_SPI_Init+0xb4>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800b91e:	687b      	ldr	r3, [r7, #4]
 800b920:	2200      	movs	r2, #0
 800b922:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800b926:	6878      	ldr	r0, [r7, #4]
 800b928:	f7f6 f974 	bl	8001c14 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800b92c:	687b      	ldr	r3, [r7, #4]
 800b92e:	2202      	movs	r2, #2
 800b930:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800b934:	687b      	ldr	r3, [r7, #4]
 800b936:	681b      	ldr	r3, [r3, #0]
 800b938:	681a      	ldr	r2, [r3, #0]
 800b93a:	687b      	ldr	r3, [r7, #4]
 800b93c:	681b      	ldr	r3, [r3, #0]
 800b93e:	f022 0201 	bic.w	r2, r2, #1
 800b942:	601a      	str	r2, [r3, #0]
  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */

  /* SPIx NSS Software Management Configuration */
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 800b944:	687b      	ldr	r3, [r7, #4]
 800b946:	699b      	ldr	r3, [r3, #24]
 800b948:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800b94c:	d119      	bne.n	800b982 <HAL_SPI_Init+0x10a>
 800b94e:	687b      	ldr	r3, [r7, #4]
 800b950:	685b      	ldr	r3, [r3, #4]
 800b952:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800b956:	d103      	bne.n	800b960 <HAL_SPI_Init+0xe8>
 800b958:	687b      	ldr	r3, [r7, #4]
 800b95a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b95c:	2b00      	cmp	r3, #0
 800b95e:	d008      	beq.n	800b972 <HAL_SPI_Init+0xfa>
     ((hspi->Init.Mode == SPI_MODE_SLAVE) && (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 800b960:	687b      	ldr	r3, [r7, #4]
 800b962:	685b      	ldr	r3, [r3, #4]
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 800b964:	2b00      	cmp	r3, #0
 800b966:	d10c      	bne.n	800b982 <HAL_SPI_Init+0x10a>
     ((hspi->Init.Mode == SPI_MODE_SLAVE) && (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 800b968:	687b      	ldr	r3, [r7, #4]
 800b96a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b96c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800b970:	d107      	bne.n	800b982 <HAL_SPI_Init+0x10a>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 800b972:	687b      	ldr	r3, [r7, #4]
 800b974:	681b      	ldr	r3, [r3, #0]
 800b976:	681a      	ldr	r2, [r3, #0]
 800b978:	687b      	ldr	r3, [r7, #4]
 800b97a:	681b      	ldr	r3, [r3, #0]
 800b97c:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800b980:	601a      	str	r2, [r3, #0]
  }

  /* SPIx CFG1 Configuration */
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 800b982:	687b      	ldr	r3, [r7, #4]
 800b984:	69da      	ldr	r2, [r3, #28]
 800b986:	687b      	ldr	r3, [r7, #4]
 800b988:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b98a:	431a      	orrs	r2, r3
 800b98c:	68fb      	ldr	r3, [r7, #12]
 800b98e:	431a      	orrs	r2, r3
 800b990:	687b      	ldr	r3, [r7, #4]
 800b992:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b994:	ea42 0103 	orr.w	r1, r2, r3
 800b998:	687b      	ldr	r3, [r7, #4]
 800b99a:	68da      	ldr	r2, [r3, #12]
 800b99c:	687b      	ldr	r3, [r7, #4]
 800b99e:	681b      	ldr	r3, [r3, #0]
 800b9a0:	430a      	orrs	r2, r1
 800b9a2:	609a      	str	r2, [r3, #8]
                                   hspi->Init.FifoThreshold     | hspi->Init.DataSize));

  /* SPIx CFG2 Configuration */
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode     | hspi->Init.TIMode           | hspi->Init.NSSPolarity             |
 800b9a4:	687b      	ldr	r3, [r7, #4]
 800b9a6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800b9a8:	687b      	ldr	r3, [r7, #4]
 800b9aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b9ac:	431a      	orrs	r2, r3
 800b9ae:	687b      	ldr	r3, [r7, #4]
 800b9b0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b9b2:	431a      	orrs	r2, r3
 800b9b4:	687b      	ldr	r3, [r7, #4]
 800b9b6:	699b      	ldr	r3, [r3, #24]
 800b9b8:	431a      	orrs	r2, r3
 800b9ba:	687b      	ldr	r3, [r7, #4]
 800b9bc:	691b      	ldr	r3, [r3, #16]
 800b9be:	431a      	orrs	r2, r3
 800b9c0:	687b      	ldr	r3, [r7, #4]
 800b9c2:	695b      	ldr	r3, [r3, #20]
 800b9c4:	431a      	orrs	r2, r3
 800b9c6:	687b      	ldr	r3, [r7, #4]
 800b9c8:	6a1b      	ldr	r3, [r3, #32]
 800b9ca:	431a      	orrs	r2, r3
 800b9cc:	687b      	ldr	r3, [r7, #4]
 800b9ce:	685b      	ldr	r3, [r3, #4]
 800b9d0:	431a      	orrs	r2, r3
 800b9d2:	687b      	ldr	r3, [r7, #4]
 800b9d4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b9d6:	431a      	orrs	r2, r3
 800b9d8:	687b      	ldr	r3, [r7, #4]
 800b9da:	689b      	ldr	r3, [r3, #8]
 800b9dc:	431a      	orrs	r2, r3
 800b9de:	687b      	ldr	r3, [r7, #4]
 800b9e0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800b9e2:	ea42 0103 	orr.w	r1, r2, r3
 800b9e6:	687b      	ldr	r3, [r7, #4]
 800b9e8:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800b9ea:	687b      	ldr	r3, [r7, #4]
 800b9ec:	681b      	ldr	r3, [r3, #0]
 800b9ee:	430a      	orrs	r2, r1
 800b9f0:	60da      	str	r2, [r3, #12]
    WRITE_REG(hspi->Instance->CRCPOLY, hspi->Init.CRCPolynomial);
  }
#endif /* USE_SPI_CRC */

  /* Insure that Underrun configuration is managed only by Salve */
  if (hspi->Init.Mode == SPI_MODE_SLAVE)
 800b9f2:	687b      	ldr	r3, [r7, #4]
 800b9f4:	685b      	ldr	r3, [r3, #4]
 800b9f6:	2b00      	cmp	r3, #0
 800b9f8:	d113      	bne.n	800ba22 <HAL_SPI_Init+0x1aa>
    /* Set Default Underrun configuration */
#if (USE_SPI_CRC != 0UL)
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_DISABLE)
#endif
    {
      MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRDET, SPI_CFG1_UDRDET_0);
 800b9fa:	687b      	ldr	r3, [r7, #4]
 800b9fc:	681b      	ldr	r3, [r3, #0]
 800b9fe:	689b      	ldr	r3, [r3, #8]
 800ba00:	f423 52c0 	bic.w	r2, r3, #6144	; 0x1800
 800ba04:	687b      	ldr	r3, [r7, #4]
 800ba06:	681b      	ldr	r3, [r3, #0]
 800ba08:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800ba0c:	609a      	str	r2, [r3, #8]
    }
    MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRCFG, SPI_CFG1_UDRCFG_1);
 800ba0e:	687b      	ldr	r3, [r7, #4]
 800ba10:	681b      	ldr	r3, [r3, #0]
 800ba12:	689b      	ldr	r3, [r3, #8]
 800ba14:	f423 62c0 	bic.w	r2, r3, #1536	; 0x600
 800ba18:	687b      	ldr	r3, [r7, #4]
 800ba1a:	681b      	ldr	r3, [r3, #0]
 800ba1c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800ba20:	609a      	str	r2, [r3, #8]
  }

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800ba22:	687b      	ldr	r3, [r7, #4]
 800ba24:	681b      	ldr	r3, [r3, #0]
 800ba26:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800ba28:	687b      	ldr	r3, [r7, #4]
 800ba2a:	681b      	ldr	r3, [r3, #0]
 800ba2c:	f022 0201 	bic.w	r2, r2, #1
 800ba30:	651a      	str	r2, [r3, #80]	; 0x50
#endif /* SPI_I2SCFGR_I2SMOD */

  /* Insure that AFCNTR is managed only by Master */
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 800ba32:	687b      	ldr	r3, [r7, #4]
 800ba34:	685b      	ldr	r3, [r3, #4]
 800ba36:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800ba3a:	2b00      	cmp	r3, #0
 800ba3c:	d00a      	beq.n	800ba54 <HAL_SPI_Init+0x1dc>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 800ba3e:	687b      	ldr	r3, [r7, #4]
 800ba40:	681b      	ldr	r3, [r3, #0]
 800ba42:	68db      	ldr	r3, [r3, #12]
 800ba44:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 800ba48:	687b      	ldr	r3, [r7, #4]
 800ba4a:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800ba4c:	687b      	ldr	r3, [r7, #4]
 800ba4e:	681b      	ldr	r3, [r3, #0]
 800ba50:	430a      	orrs	r2, r1
 800ba52:	60da      	str	r2, [r3, #12]
  }

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800ba54:	687b      	ldr	r3, [r7, #4]
 800ba56:	2200      	movs	r2, #0
 800ba58:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->State     = HAL_SPI_STATE_READY;
 800ba5c:	687b      	ldr	r3, [r7, #4]
 800ba5e:	2201      	movs	r2, #1
 800ba60:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  return HAL_OK;
 800ba64:	2300      	movs	r3, #0
}
 800ba66:	4618      	mov	r0, r3
 800ba68:	3710      	adds	r7, #16
 800ba6a:	46bd      	mov	sp, r7
 800ba6c:	bd80      	pop	{r7, pc}
 800ba6e:	bf00      	nop
 800ba70:	40013000 	.word	0x40013000
 800ba74:	40003800 	.word	0x40003800
 800ba78:	40003c00 	.word	0x40003c00

0800ba7c <HAL_SPI_Transmit>:
  * @param  Size   : amount of data to be sent
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800ba7c:	b580      	push	{r7, lr}
 800ba7e:	b08a      	sub	sp, #40	; 0x28
 800ba80:	af02      	add	r7, sp, #8
 800ba82:	60f8      	str	r0, [r7, #12]
 800ba84:	60b9      	str	r1, [r7, #8]
 800ba86:	603b      	str	r3, [r7, #0]
 800ba88:	4613      	mov	r3, r2
 800ba8a:	80fb      	strh	r3, [r7, #6]
#if defined (__GNUC__)
  __IO uint16_t *ptxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->TXDR));
 800ba8c:	68fb      	ldr	r3, [r7, #12]
 800ba8e:	681b      	ldr	r3, [r3, #0]
 800ba90:	3320      	adds	r3, #32
 800ba92:	61fb      	str	r3, [r7, #28]
#endif /* __GNUC__ */

  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800ba94:	2300      	movs	r3, #0
 800ba96:	76fb      	strb	r3, [r7, #27]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE_2LINES_TXONLY(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800ba98:	68fb      	ldr	r3, [r7, #12]
 800ba9a:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800ba9e:	2b01      	cmp	r3, #1
 800baa0:	d101      	bne.n	800baa6 <HAL_SPI_Transmit+0x2a>
 800baa2:	2302      	movs	r3, #2
 800baa4:	e1d7      	b.n	800be56 <HAL_SPI_Transmit+0x3da>
 800baa6:	68fb      	ldr	r3, [r7, #12]
 800baa8:	2201      	movs	r2, #1
 800baaa:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800baae:	f7f6 fc79 	bl	80023a4 <HAL_GetTick>
 800bab2:	6178      	str	r0, [r7, #20]

  if (hspi->State != HAL_SPI_STATE_READY)
 800bab4:	68fb      	ldr	r3, [r7, #12]
 800bab6:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800baba:	b2db      	uxtb	r3, r3
 800babc:	2b01      	cmp	r3, #1
 800babe:	d007      	beq.n	800bad0 <HAL_SPI_Transmit+0x54>
  {
    errorcode = HAL_BUSY;
 800bac0:	2302      	movs	r3, #2
 800bac2:	76fb      	strb	r3, [r7, #27]
    __HAL_UNLOCK(hspi);
 800bac4:	68fb      	ldr	r3, [r7, #12]
 800bac6:	2200      	movs	r2, #0
 800bac8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 800bacc:	7efb      	ldrb	r3, [r7, #27]
 800bace:	e1c2      	b.n	800be56 <HAL_SPI_Transmit+0x3da>
  }

  if ((pData == NULL) || (Size == 0UL))
 800bad0:	68bb      	ldr	r3, [r7, #8]
 800bad2:	2b00      	cmp	r3, #0
 800bad4:	d002      	beq.n	800badc <HAL_SPI_Transmit+0x60>
 800bad6:	88fb      	ldrh	r3, [r7, #6]
 800bad8:	2b00      	cmp	r3, #0
 800bada:	d107      	bne.n	800baec <HAL_SPI_Transmit+0x70>
  {
    errorcode = HAL_ERROR;
 800badc:	2301      	movs	r3, #1
 800bade:	76fb      	strb	r3, [r7, #27]
    __HAL_UNLOCK(hspi);
 800bae0:	68fb      	ldr	r3, [r7, #12]
 800bae2:	2200      	movs	r2, #0
 800bae4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 800bae8:	7efb      	ldrb	r3, [r7, #27]
 800baea:	e1b4      	b.n	800be56 <HAL_SPI_Transmit+0x3da>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800baec:	68fb      	ldr	r3, [r7, #12]
 800baee:	2203      	movs	r2, #3
 800baf0:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800baf4:	68fb      	ldr	r3, [r7, #12]
 800baf6:	2200      	movs	r2, #0
 800baf8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 800bafc:	68fb      	ldr	r3, [r7, #12]
 800bafe:	68ba      	ldr	r2, [r7, #8]
 800bb00:	65da      	str	r2, [r3, #92]	; 0x5c
  hspi->TxXferSize  = Size;
 800bb02:	68fb      	ldr	r3, [r7, #12]
 800bb04:	88fa      	ldrh	r2, [r7, #6]
 800bb06:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
  hspi->TxXferCount = Size;
 800bb0a:	68fb      	ldr	r3, [r7, #12]
 800bb0c:	88fa      	ldrh	r2, [r7, #6]
 800bb0e:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = NULL;
 800bb12:	68fb      	ldr	r3, [r7, #12]
 800bb14:	2200      	movs	r2, #0
 800bb16:	665a      	str	r2, [r3, #100]	; 0x64
  hspi->RxXferSize  = (uint16_t) 0UL;
 800bb18:	68fb      	ldr	r3, [r7, #12]
 800bb1a:	2200      	movs	r2, #0
 800bb1c:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  hspi->RxXferCount = (uint16_t) 0UL;
 800bb20:	68fb      	ldr	r3, [r7, #12]
 800bb22:	2200      	movs	r2, #0
 800bb24:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  hspi->TxISR       = NULL;
 800bb28:	68fb      	ldr	r3, [r7, #12]
 800bb2a:	2200      	movs	r2, #0
 800bb2c:	675a      	str	r2, [r3, #116]	; 0x74
  hspi->RxISR       = NULL;
 800bb2e:	68fb      	ldr	r3, [r7, #12]
 800bb30:	2200      	movs	r2, #0
 800bb32:	671a      	str	r2, [r3, #112]	; 0x70

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800bb34:	68fb      	ldr	r3, [r7, #12]
 800bb36:	689b      	ldr	r3, [r3, #8]
 800bb38:	f5b3 2fc0 	cmp.w	r3, #393216	; 0x60000
 800bb3c:	d107      	bne.n	800bb4e <HAL_SPI_Transmit+0xd2>
  {
    SPI_1LINE_TX(hspi);
 800bb3e:	68fb      	ldr	r3, [r7, #12]
 800bb40:	681b      	ldr	r3, [r3, #0]
 800bb42:	681a      	ldr	r2, [r3, #0]
 800bb44:	68fb      	ldr	r3, [r7, #12]
 800bb46:	681b      	ldr	r3, [r3, #0]
 800bb48:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800bb4c:	601a      	str	r2, [r3, #0]
  }

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 800bb4e:	68fb      	ldr	r3, [r7, #12]
 800bb50:	681b      	ldr	r3, [r3, #0]
 800bb52:	685a      	ldr	r2, [r3, #4]
 800bb54:	4b96      	ldr	r3, [pc, #600]	; (800bdb0 <HAL_SPI_Transmit+0x334>)
 800bb56:	4013      	ands	r3, r2
 800bb58:	88f9      	ldrh	r1, [r7, #6]
 800bb5a:	68fa      	ldr	r2, [r7, #12]
 800bb5c:	6812      	ldr	r2, [r2, #0]
 800bb5e:	430b      	orrs	r3, r1
 800bb60:	6053      	str	r3, [r2, #4]

  /* Enable SPI peripheral */
  __HAL_SPI_ENABLE(hspi);
 800bb62:	68fb      	ldr	r3, [r7, #12]
 800bb64:	681b      	ldr	r3, [r3, #0]
 800bb66:	681a      	ldr	r2, [r3, #0]
 800bb68:	68fb      	ldr	r3, [r7, #12]
 800bb6a:	681b      	ldr	r3, [r3, #0]
 800bb6c:	f042 0201 	orr.w	r2, r2, #1
 800bb70:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800bb72:	68fb      	ldr	r3, [r7, #12]
 800bb74:	685b      	ldr	r3, [r3, #4]
 800bb76:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800bb7a:	d107      	bne.n	800bb8c <HAL_SPI_Transmit+0x110>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 800bb7c:	68fb      	ldr	r3, [r7, #12]
 800bb7e:	681b      	ldr	r3, [r3, #0]
 800bb80:	681a      	ldr	r2, [r3, #0]
 800bb82:	68fb      	ldr	r3, [r7, #12]
 800bb84:	681b      	ldr	r3, [r3, #0]
 800bb86:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800bb8a:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 32 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 800bb8c:	68fb      	ldr	r3, [r7, #12]
 800bb8e:	68db      	ldr	r3, [r3, #12]
 800bb90:	2b0f      	cmp	r3, #15
 800bb92:	d947      	bls.n	800bc24 <HAL_SPI_Transmit+0x1a8>
  {
    /* Transmit data in 32 Bit mode */
    while (hspi->TxXferCount > 0UL)
 800bb94:	e03f      	b.n	800bc16 <HAL_SPI_Transmit+0x19a>
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 800bb96:	68fb      	ldr	r3, [r7, #12]
 800bb98:	681b      	ldr	r3, [r3, #0]
 800bb9a:	695b      	ldr	r3, [r3, #20]
 800bb9c:	f003 0302 	and.w	r3, r3, #2
 800bba0:	2b02      	cmp	r3, #2
 800bba2:	d114      	bne.n	800bbce <HAL_SPI_Transmit+0x152>
      {
        *((__IO uint32_t *)&hspi->Instance->TXDR) = *((uint32_t *)hspi->pTxBuffPtr);
 800bba4:	68fb      	ldr	r3, [r7, #12]
 800bba6:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800bba8:	68fb      	ldr	r3, [r7, #12]
 800bbaa:	681b      	ldr	r3, [r3, #0]
 800bbac:	6812      	ldr	r2, [r2, #0]
 800bbae:	621a      	str	r2, [r3, #32]
        hspi->pTxBuffPtr += sizeof(uint32_t);
 800bbb0:	68fb      	ldr	r3, [r7, #12]
 800bbb2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800bbb4:	1d1a      	adds	r2, r3, #4
 800bbb6:	68fb      	ldr	r3, [r7, #12]
 800bbb8:	65da      	str	r2, [r3, #92]	; 0x5c
        hspi->TxXferCount--;
 800bbba:	68fb      	ldr	r3, [r7, #12]
 800bbbc:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800bbc0:	b29b      	uxth	r3, r3
 800bbc2:	3b01      	subs	r3, #1
 800bbc4:	b29a      	uxth	r2, r3
 800bbc6:	68fb      	ldr	r3, [r7, #12]
 800bbc8:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 800bbcc:	e023      	b.n	800bc16 <HAL_SPI_Transmit+0x19a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800bbce:	f7f6 fbe9 	bl	80023a4 <HAL_GetTick>
 800bbd2:	4602      	mov	r2, r0
 800bbd4:	697b      	ldr	r3, [r7, #20]
 800bbd6:	1ad3      	subs	r3, r2, r3
 800bbd8:	683a      	ldr	r2, [r7, #0]
 800bbda:	429a      	cmp	r2, r3
 800bbdc:	d803      	bhi.n	800bbe6 <HAL_SPI_Transmit+0x16a>
 800bbde:	683b      	ldr	r3, [r7, #0]
 800bbe0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bbe4:	d102      	bne.n	800bbec <HAL_SPI_Transmit+0x170>
 800bbe6:	683b      	ldr	r3, [r7, #0]
 800bbe8:	2b00      	cmp	r3, #0
 800bbea:	d114      	bne.n	800bc16 <HAL_SPI_Transmit+0x19a>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800bbec:	68f8      	ldr	r0, [r7, #12]
 800bbee:	f000 fc23 	bl	800c438 <SPI_CloseTransfer>

          /* Process Unlocked */
          __HAL_UNLOCK(hspi);
 800bbf2:	68fb      	ldr	r3, [r7, #12]
 800bbf4:	2200      	movs	r2, #0
 800bbf6:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800bbfa:	68fb      	ldr	r3, [r7, #12]
 800bbfc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800bc00:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800bc04:	68fb      	ldr	r3, [r7, #12]
 800bc06:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 800bc0a:	68fb      	ldr	r3, [r7, #12]
 800bc0c:	2201      	movs	r2, #1
 800bc0e:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_ERROR;
 800bc12:	2301      	movs	r3, #1
 800bc14:	e11f      	b.n	800be56 <HAL_SPI_Transmit+0x3da>
    while (hspi->TxXferCount > 0UL)
 800bc16:	68fb      	ldr	r3, [r7, #12]
 800bc18:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800bc1c:	b29b      	uxth	r3, r3
 800bc1e:	2b00      	cmp	r3, #0
 800bc20:	d1b9      	bne.n	800bb96 <HAL_SPI_Transmit+0x11a>
 800bc22:	e0f2      	b.n	800be0a <HAL_SPI_Transmit+0x38e>
        }
      }
    }
  }
  /* Transmit data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800bc24:	68fb      	ldr	r3, [r7, #12]
 800bc26:	68db      	ldr	r3, [r3, #12]
 800bc28:	2b07      	cmp	r3, #7
 800bc2a:	f240 80e7 	bls.w	800bdfc <HAL_SPI_Transmit+0x380>
  {
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0UL)
 800bc2e:	e05d      	b.n	800bcec <HAL_SPI_Transmit+0x270>
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 800bc30:	68fb      	ldr	r3, [r7, #12]
 800bc32:	681b      	ldr	r3, [r3, #0]
 800bc34:	695b      	ldr	r3, [r3, #20]
 800bc36:	f003 0302 	and.w	r3, r3, #2
 800bc3a:	2b02      	cmp	r3, #2
 800bc3c:	d132      	bne.n	800bca4 <HAL_SPI_Transmit+0x228>
      {
        if ((hspi->TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 800bc3e:	68fb      	ldr	r3, [r7, #12]
 800bc40:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800bc44:	b29b      	uxth	r3, r3
 800bc46:	2b01      	cmp	r3, #1
 800bc48:	d918      	bls.n	800bc7c <HAL_SPI_Transmit+0x200>
 800bc4a:	68fb      	ldr	r3, [r7, #12]
 800bc4c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800bc4e:	2b00      	cmp	r3, #0
 800bc50:	d014      	beq.n	800bc7c <HAL_SPI_Transmit+0x200>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((uint32_t *)hspi->pTxBuffPtr);
 800bc52:	68fb      	ldr	r3, [r7, #12]
 800bc54:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800bc56:	68fb      	ldr	r3, [r7, #12]
 800bc58:	681b      	ldr	r3, [r3, #0]
 800bc5a:	6812      	ldr	r2, [r2, #0]
 800bc5c:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 800bc5e:	68fb      	ldr	r3, [r7, #12]
 800bc60:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800bc62:	1d1a      	adds	r2, r3, #4
 800bc64:	68fb      	ldr	r3, [r7, #12]
 800bc66:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount -= (uint16_t)2UL;
 800bc68:	68fb      	ldr	r3, [r7, #12]
 800bc6a:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800bc6e:	b29b      	uxth	r3, r3
 800bc70:	3b02      	subs	r3, #2
 800bc72:	b29a      	uxth	r2, r3
 800bc74:	68fb      	ldr	r3, [r7, #12]
 800bc76:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 800bc7a:	e037      	b.n	800bcec <HAL_SPI_Transmit+0x270>
        }
        else
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((uint16_t *)hspi->pTxBuffPtr);
 800bc7c:	68fb      	ldr	r3, [r7, #12]
 800bc7e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800bc80:	881a      	ldrh	r2, [r3, #0]
 800bc82:	69fb      	ldr	r3, [r7, #28]
 800bc84:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800bc86:	68fb      	ldr	r3, [r7, #12]
 800bc88:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800bc8a:	1c9a      	adds	r2, r3, #2
 800bc8c:	68fb      	ldr	r3, [r7, #12]
 800bc8e:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount--;
 800bc90:	68fb      	ldr	r3, [r7, #12]
 800bc92:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800bc96:	b29b      	uxth	r3, r3
 800bc98:	3b01      	subs	r3, #1
 800bc9a:	b29a      	uxth	r2, r3
 800bc9c:	68fb      	ldr	r3, [r7, #12]
 800bc9e:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 800bca2:	e023      	b.n	800bcec <HAL_SPI_Transmit+0x270>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800bca4:	f7f6 fb7e 	bl	80023a4 <HAL_GetTick>
 800bca8:	4602      	mov	r2, r0
 800bcaa:	697b      	ldr	r3, [r7, #20]
 800bcac:	1ad3      	subs	r3, r2, r3
 800bcae:	683a      	ldr	r2, [r7, #0]
 800bcb0:	429a      	cmp	r2, r3
 800bcb2:	d803      	bhi.n	800bcbc <HAL_SPI_Transmit+0x240>
 800bcb4:	683b      	ldr	r3, [r7, #0]
 800bcb6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bcba:	d102      	bne.n	800bcc2 <HAL_SPI_Transmit+0x246>
 800bcbc:	683b      	ldr	r3, [r7, #0]
 800bcbe:	2b00      	cmp	r3, #0
 800bcc0:	d114      	bne.n	800bcec <HAL_SPI_Transmit+0x270>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800bcc2:	68f8      	ldr	r0, [r7, #12]
 800bcc4:	f000 fbb8 	bl	800c438 <SPI_CloseTransfer>

          /* Process Unlocked */
          __HAL_UNLOCK(hspi);
 800bcc8:	68fb      	ldr	r3, [r7, #12]
 800bcca:	2200      	movs	r2, #0
 800bccc:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800bcd0:	68fb      	ldr	r3, [r7, #12]
 800bcd2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800bcd6:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800bcda:	68fb      	ldr	r3, [r7, #12]
 800bcdc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 800bce0:	68fb      	ldr	r3, [r7, #12]
 800bce2:	2201      	movs	r2, #1
 800bce4:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_ERROR;
 800bce8:	2301      	movs	r3, #1
 800bcea:	e0b4      	b.n	800be56 <HAL_SPI_Transmit+0x3da>
    while (hspi->TxXferCount > 0UL)
 800bcec:	68fb      	ldr	r3, [r7, #12]
 800bcee:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800bcf2:	b29b      	uxth	r3, r3
 800bcf4:	2b00      	cmp	r3, #0
 800bcf6:	d19b      	bne.n	800bc30 <HAL_SPI_Transmit+0x1b4>
 800bcf8:	e087      	b.n	800be0a <HAL_SPI_Transmit+0x38e>
  else
  {
    while (hspi->TxXferCount > 0UL)
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 800bcfa:	68fb      	ldr	r3, [r7, #12]
 800bcfc:	681b      	ldr	r3, [r3, #0]
 800bcfe:	695b      	ldr	r3, [r3, #20]
 800bd00:	f003 0302 	and.w	r3, r3, #2
 800bd04:	2b02      	cmp	r3, #2
 800bd06:	d155      	bne.n	800bdb4 <HAL_SPI_Transmit+0x338>
      {
        if ((hspi->TxXferCount > 3UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_03DATA))
 800bd08:	68fb      	ldr	r3, [r7, #12]
 800bd0a:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800bd0e:	b29b      	uxth	r3, r3
 800bd10:	2b03      	cmp	r3, #3
 800bd12:	d918      	bls.n	800bd46 <HAL_SPI_Transmit+0x2ca>
 800bd14:	68fb      	ldr	r3, [r7, #12]
 800bd16:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800bd18:	2b40      	cmp	r3, #64	; 0x40
 800bd1a:	d914      	bls.n	800bd46 <HAL_SPI_Transmit+0x2ca>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((uint32_t *)hspi->pTxBuffPtr);
 800bd1c:	68fb      	ldr	r3, [r7, #12]
 800bd1e:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800bd20:	68fb      	ldr	r3, [r7, #12]
 800bd22:	681b      	ldr	r3, [r3, #0]
 800bd24:	6812      	ldr	r2, [r2, #0]
 800bd26:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 800bd28:	68fb      	ldr	r3, [r7, #12]
 800bd2a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800bd2c:	1d1a      	adds	r2, r3, #4
 800bd2e:	68fb      	ldr	r3, [r7, #12]
 800bd30:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount -= (uint16_t)4UL;
 800bd32:	68fb      	ldr	r3, [r7, #12]
 800bd34:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800bd38:	b29b      	uxth	r3, r3
 800bd3a:	3b04      	subs	r3, #4
 800bd3c:	b29a      	uxth	r2, r3
 800bd3e:	68fb      	ldr	r3, [r7, #12]
 800bd40:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 800bd44:	e05a      	b.n	800bdfc <HAL_SPI_Transmit+0x380>
        }
        else if ((hspi->TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 800bd46:	68fb      	ldr	r3, [r7, #12]
 800bd48:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800bd4c:	b29b      	uxth	r3, r3
 800bd4e:	2b01      	cmp	r3, #1
 800bd50:	d917      	bls.n	800bd82 <HAL_SPI_Transmit+0x306>
 800bd52:	68fb      	ldr	r3, [r7, #12]
 800bd54:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800bd56:	2b00      	cmp	r3, #0
 800bd58:	d013      	beq.n	800bd82 <HAL_SPI_Transmit+0x306>
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((uint16_t *)hspi->pTxBuffPtr);
 800bd5a:	68fb      	ldr	r3, [r7, #12]
 800bd5c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800bd5e:	881a      	ldrh	r2, [r3, #0]
 800bd60:	69fb      	ldr	r3, [r7, #28]
 800bd62:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800bd64:	68fb      	ldr	r3, [r7, #12]
 800bd66:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800bd68:	1c9a      	adds	r2, r3, #2
 800bd6a:	68fb      	ldr	r3, [r7, #12]
 800bd6c:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount -= (uint16_t)2UL;
 800bd6e:	68fb      	ldr	r3, [r7, #12]
 800bd70:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800bd74:	b29b      	uxth	r3, r3
 800bd76:	3b02      	subs	r3, #2
 800bd78:	b29a      	uxth	r2, r3
 800bd7a:	68fb      	ldr	r3, [r7, #12]
 800bd7c:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 800bd80:	e03c      	b.n	800bdfc <HAL_SPI_Transmit+0x380>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->TXDR) = *((uint8_t *)hspi->pTxBuffPtr);
 800bd82:	68fb      	ldr	r3, [r7, #12]
 800bd84:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800bd86:	68fb      	ldr	r3, [r7, #12]
 800bd88:	681b      	ldr	r3, [r3, #0]
 800bd8a:	3320      	adds	r3, #32
 800bd8c:	7812      	ldrb	r2, [r2, #0]
 800bd8e:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr += sizeof(uint8_t);
 800bd90:	68fb      	ldr	r3, [r7, #12]
 800bd92:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800bd94:	1c5a      	adds	r2, r3, #1
 800bd96:	68fb      	ldr	r3, [r7, #12]
 800bd98:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount--;
 800bd9a:	68fb      	ldr	r3, [r7, #12]
 800bd9c:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800bda0:	b29b      	uxth	r3, r3
 800bda2:	3b01      	subs	r3, #1
 800bda4:	b29a      	uxth	r2, r3
 800bda6:	68fb      	ldr	r3, [r7, #12]
 800bda8:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 800bdac:	e026      	b.n	800bdfc <HAL_SPI_Transmit+0x380>
 800bdae:	bf00      	nop
 800bdb0:	ffff0000 	.word	0xffff0000
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800bdb4:	f7f6 faf6 	bl	80023a4 <HAL_GetTick>
 800bdb8:	4602      	mov	r2, r0
 800bdba:	697b      	ldr	r3, [r7, #20]
 800bdbc:	1ad3      	subs	r3, r2, r3
 800bdbe:	683a      	ldr	r2, [r7, #0]
 800bdc0:	429a      	cmp	r2, r3
 800bdc2:	d803      	bhi.n	800bdcc <HAL_SPI_Transmit+0x350>
 800bdc4:	683b      	ldr	r3, [r7, #0]
 800bdc6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bdca:	d102      	bne.n	800bdd2 <HAL_SPI_Transmit+0x356>
 800bdcc:	683b      	ldr	r3, [r7, #0]
 800bdce:	2b00      	cmp	r3, #0
 800bdd0:	d114      	bne.n	800bdfc <HAL_SPI_Transmit+0x380>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800bdd2:	68f8      	ldr	r0, [r7, #12]
 800bdd4:	f000 fb30 	bl	800c438 <SPI_CloseTransfer>

          /* Process Unlocked */
          __HAL_UNLOCK(hspi);
 800bdd8:	68fb      	ldr	r3, [r7, #12]
 800bdda:	2200      	movs	r2, #0
 800bddc:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800bde0:	68fb      	ldr	r3, [r7, #12]
 800bde2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800bde6:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800bdea:	68fb      	ldr	r3, [r7, #12]
 800bdec:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 800bdf0:	68fb      	ldr	r3, [r7, #12]
 800bdf2:	2201      	movs	r2, #1
 800bdf4:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_ERROR;
 800bdf8:	2301      	movs	r3, #1
 800bdfa:	e02c      	b.n	800be56 <HAL_SPI_Transmit+0x3da>
    while (hspi->TxXferCount > 0UL)
 800bdfc:	68fb      	ldr	r3, [r7, #12]
 800bdfe:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800be02:	b29b      	uxth	r3, r3
 800be04:	2b00      	cmp	r3, #0
 800be06:	f47f af78 	bne.w	800bcfa <HAL_SPI_Transmit+0x27e>
      }
    }
  }

  /* Wait for Tx (and CRC) data to be sent */
  if (SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_EOT, RESET, tickstart, Timeout) != HAL_OK)
 800be0a:	683b      	ldr	r3, [r7, #0]
 800be0c:	9300      	str	r3, [sp, #0]
 800be0e:	697b      	ldr	r3, [r7, #20]
 800be10:	2200      	movs	r2, #0
 800be12:	2108      	movs	r1, #8
 800be14:	68f8      	ldr	r0, [r7, #12]
 800be16:	f000 fbaf 	bl	800c578 <SPI_WaitOnFlagUntilTimeout>
 800be1a:	4603      	mov	r3, r0
 800be1c:	2b00      	cmp	r3, #0
 800be1e:	d007      	beq.n	800be30 <HAL_SPI_Transmit+0x3b4>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800be20:	68fb      	ldr	r3, [r7, #12]
 800be22:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800be26:	f043 0220 	orr.w	r2, r3, #32
 800be2a:	68fb      	ldr	r3, [r7, #12]
 800be2c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  }

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 800be30:	68f8      	ldr	r0, [r7, #12]
 800be32:	f000 fb01 	bl	800c438 <SPI_CloseTransfer>

  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800be36:	68fb      	ldr	r3, [r7, #12]
 800be38:	2200      	movs	r2, #0
 800be3a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  hspi->State = HAL_SPI_STATE_READY;
 800be3e:	68fb      	ldr	r3, [r7, #12]
 800be40:	2201      	movs	r2, #1
 800be42:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800be46:	68fb      	ldr	r3, [r7, #12]
 800be48:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800be4c:	2b00      	cmp	r3, #0
 800be4e:	d001      	beq.n	800be54 <HAL_SPI_Transmit+0x3d8>
  {
    return HAL_ERROR;
 800be50:	2301      	movs	r3, #1
 800be52:	e000      	b.n	800be56 <HAL_SPI_Transmit+0x3da>
  }
  return errorcode;
 800be54:	7efb      	ldrb	r3, [r7, #27]
}
 800be56:	4618      	mov	r0, r3
 800be58:	3720      	adds	r7, #32
 800be5a:	46bd      	mov	sp, r7
 800be5c:	bd80      	pop	{r7, pc}
 800be5e:	bf00      	nop

0800be60 <HAL_SPI_TransmitReceive>:
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 800be60:	b580      	push	{r7, lr}
 800be62:	b08e      	sub	sp, #56	; 0x38
 800be64:	af02      	add	r7, sp, #8
 800be66:	60f8      	str	r0, [r7, #12]
 800be68:	60b9      	str	r1, [r7, #8]
 800be6a:	607a      	str	r2, [r7, #4]
 800be6c:	807b      	strh	r3, [r7, #2]
  HAL_SPI_StateTypeDef tmp_state;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800be6e:	2300      	movs	r3, #0
 800be70:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
#if defined (__GNUC__)
  __IO uint16_t *ptxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->TXDR));
 800be74:	68fb      	ldr	r3, [r7, #12]
 800be76:	681b      	ldr	r3, [r3, #0]
 800be78:	3320      	adds	r3, #32
 800be7a:	627b      	str	r3, [r7, #36]	; 0x24
  __IO uint16_t *prxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->RXDR));
 800be7c:	68fb      	ldr	r3, [r7, #12]
 800be7e:	681b      	ldr	r3, [r3, #0]
 800be80:	3330      	adds	r3, #48	; 0x30
 800be82:	623b      	str	r3, [r7, #32]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800be84:	68fb      	ldr	r3, [r7, #12]
 800be86:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800be8a:	2b01      	cmp	r3, #1
 800be8c:	d101      	bne.n	800be92 <HAL_SPI_TransmitReceive+0x32>
 800be8e:	2302      	movs	r3, #2
 800be90:	e2ce      	b.n	800c430 <HAL_SPI_TransmitReceive+0x5d0>
 800be92:	68fb      	ldr	r3, [r7, #12]
 800be94:	2201      	movs	r2, #1
 800be96:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800be9a:	f7f6 fa83 	bl	80023a4 <HAL_GetTick>
 800be9e:	61f8      	str	r0, [r7, #28]

  initial_TxXferCount = Size;
 800bea0:	887b      	ldrh	r3, [r7, #2]
 800bea2:	85fb      	strh	r3, [r7, #46]	; 0x2e
  initial_RxXferCount = Size;
 800bea4:	887b      	ldrh	r3, [r7, #2]
 800bea6:	85bb      	strh	r3, [r7, #44]	; 0x2c
  tmp_state           = hspi->State;
 800bea8:	68fb      	ldr	r3, [r7, #12]
 800beaa:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800beae:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 800beb0:	68fb      	ldr	r3, [r7, #12]
 800beb2:	685b      	ldr	r3, [r3, #4]
 800beb4:	617b      	str	r3, [r7, #20]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 800beb6:	7efb      	ldrb	r3, [r7, #27]
 800beb8:	2b01      	cmp	r3, #1
 800beba:	d014      	beq.n	800bee6 <HAL_SPI_TransmitReceive+0x86>
 800bebc:	697b      	ldr	r3, [r7, #20]
 800bebe:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800bec2:	d106      	bne.n	800bed2 <HAL_SPI_TransmitReceive+0x72>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 800bec4:	68fb      	ldr	r3, [r7, #12]
 800bec6:	689b      	ldr	r3, [r3, #8]
 800bec8:	2b00      	cmp	r3, #0
 800beca:	d102      	bne.n	800bed2 <HAL_SPI_TransmitReceive+0x72>
 800becc:	7efb      	ldrb	r3, [r7, #27]
 800bece:	2b04      	cmp	r3, #4
 800bed0:	d009      	beq.n	800bee6 <HAL_SPI_TransmitReceive+0x86>
  {
    errorcode = HAL_BUSY;
 800bed2:	2302      	movs	r3, #2
 800bed4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    __HAL_UNLOCK(hspi);
 800bed8:	68fb      	ldr	r3, [r7, #12]
 800beda:	2200      	movs	r2, #0
 800bedc:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 800bee0:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800bee4:	e2a4      	b.n	800c430 <HAL_SPI_TransmitReceive+0x5d0>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0UL))
 800bee6:	68bb      	ldr	r3, [r7, #8]
 800bee8:	2b00      	cmp	r3, #0
 800beea:	d005      	beq.n	800bef8 <HAL_SPI_TransmitReceive+0x98>
 800beec:	687b      	ldr	r3, [r7, #4]
 800beee:	2b00      	cmp	r3, #0
 800bef0:	d002      	beq.n	800bef8 <HAL_SPI_TransmitReceive+0x98>
 800bef2:	887b      	ldrh	r3, [r7, #2]
 800bef4:	2b00      	cmp	r3, #0
 800bef6:	d109      	bne.n	800bf0c <HAL_SPI_TransmitReceive+0xac>
  {
    errorcode = HAL_ERROR;
 800bef8:	2301      	movs	r3, #1
 800befa:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    __HAL_UNLOCK(hspi);
 800befe:	68fb      	ldr	r3, [r7, #12]
 800bf00:	2200      	movs	r2, #0
 800bf02:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 800bf06:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800bf0a:	e291      	b.n	800c430 <HAL_SPI_TransmitReceive+0x5d0>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800bf0c:	68fb      	ldr	r3, [r7, #12]
 800bf0e:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800bf12:	b2db      	uxtb	r3, r3
 800bf14:	2b04      	cmp	r3, #4
 800bf16:	d003      	beq.n	800bf20 <HAL_SPI_TransmitReceive+0xc0>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800bf18:	68fb      	ldr	r3, [r7, #12]
 800bf1a:	2205      	movs	r2, #5
 800bf1c:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800bf20:	68fb      	ldr	r3, [r7, #12]
 800bf22:	2200      	movs	r2, #0
 800bf24:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800bf28:	68fb      	ldr	r3, [r7, #12]
 800bf2a:	687a      	ldr	r2, [r7, #4]
 800bf2c:	665a      	str	r2, [r3, #100]	; 0x64
  hspi->RxXferCount = Size;
 800bf2e:	68fb      	ldr	r3, [r7, #12]
 800bf30:	887a      	ldrh	r2, [r7, #2]
 800bf32:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  hspi->RxXferSize  = Size;
 800bf36:	68fb      	ldr	r3, [r7, #12]
 800bf38:	887a      	ldrh	r2, [r7, #2]
 800bf3a:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800bf3e:	68fb      	ldr	r3, [r7, #12]
 800bf40:	68ba      	ldr	r2, [r7, #8]
 800bf42:	65da      	str	r2, [r3, #92]	; 0x5c
  hspi->TxXferCount = Size;
 800bf44:	68fb      	ldr	r3, [r7, #12]
 800bf46:	887a      	ldrh	r2, [r7, #2]
 800bf48:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
  hspi->TxXferSize  = Size;
 800bf4c:	68fb      	ldr	r3, [r7, #12]
 800bf4e:	887a      	ldrh	r2, [r7, #2]
 800bf50:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800bf54:	68fb      	ldr	r3, [r7, #12]
 800bf56:	2200      	movs	r2, #0
 800bf58:	671a      	str	r2, [r3, #112]	; 0x70
  hspi->TxISR       = NULL;
 800bf5a:	68fb      	ldr	r3, [r7, #12]
 800bf5c:	2200      	movs	r2, #0
 800bf5e:	675a      	str	r2, [r3, #116]	; 0x74

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 800bf60:	68fb      	ldr	r3, [r7, #12]
 800bf62:	681b      	ldr	r3, [r3, #0]
 800bf64:	685a      	ldr	r2, [r3, #4]
 800bf66:	4b9f      	ldr	r3, [pc, #636]	; (800c1e4 <HAL_SPI_TransmitReceive+0x384>)
 800bf68:	4013      	ands	r3, r2
 800bf6a:	8879      	ldrh	r1, [r7, #2]
 800bf6c:	68fa      	ldr	r2, [r7, #12]
 800bf6e:	6812      	ldr	r2, [r2, #0]
 800bf70:	430b      	orrs	r3, r1
 800bf72:	6053      	str	r3, [r2, #4]

  __HAL_SPI_ENABLE(hspi);
 800bf74:	68fb      	ldr	r3, [r7, #12]
 800bf76:	681b      	ldr	r3, [r3, #0]
 800bf78:	681a      	ldr	r2, [r3, #0]
 800bf7a:	68fb      	ldr	r3, [r7, #12]
 800bf7c:	681b      	ldr	r3, [r3, #0]
 800bf7e:	f042 0201 	orr.w	r2, r2, #1
 800bf82:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800bf84:	68fb      	ldr	r3, [r7, #12]
 800bf86:	685b      	ldr	r3, [r3, #4]
 800bf88:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800bf8c:	d107      	bne.n	800bf9e <HAL_SPI_TransmitReceive+0x13e>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 800bf8e:	68fb      	ldr	r3, [r7, #12]
 800bf90:	681b      	ldr	r3, [r3, #0]
 800bf92:	681a      	ldr	r2, [r3, #0]
 800bf94:	68fb      	ldr	r3, [r7, #12]
 800bf96:	681b      	ldr	r3, [r3, #0]
 800bf98:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800bf9c:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 32 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 800bf9e:	68fb      	ldr	r3, [r7, #12]
 800bfa0:	68db      	ldr	r3, [r3, #12]
 800bfa2:	2b0f      	cmp	r3, #15
 800bfa4:	d970      	bls.n	800c088 <HAL_SPI_TransmitReceive+0x228>
  {
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 800bfa6:	e068      	b.n	800c07a <HAL_SPI_TransmitReceive+0x21a>
    {
      /* Check TXP flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (initial_TxXferCount > 0UL))
 800bfa8:	68fb      	ldr	r3, [r7, #12]
 800bfaa:	681b      	ldr	r3, [r3, #0]
 800bfac:	695b      	ldr	r3, [r3, #20]
 800bfae:	f003 0302 	and.w	r3, r3, #2
 800bfb2:	2b02      	cmp	r3, #2
 800bfb4:	d11a      	bne.n	800bfec <HAL_SPI_TransmitReceive+0x18c>
 800bfb6:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800bfb8:	2b00      	cmp	r3, #0
 800bfba:	d017      	beq.n	800bfec <HAL_SPI_TransmitReceive+0x18c>
      {
        *((__IO uint32_t *)&hspi->Instance->TXDR) = *((uint32_t *)hspi->pTxBuffPtr);
 800bfbc:	68fb      	ldr	r3, [r7, #12]
 800bfbe:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800bfc0:	68fb      	ldr	r3, [r7, #12]
 800bfc2:	681b      	ldr	r3, [r3, #0]
 800bfc4:	6812      	ldr	r2, [r2, #0]
 800bfc6:	621a      	str	r2, [r3, #32]
        hspi->pTxBuffPtr += sizeof(uint32_t);
 800bfc8:	68fb      	ldr	r3, [r7, #12]
 800bfca:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800bfcc:	1d1a      	adds	r2, r3, #4
 800bfce:	68fb      	ldr	r3, [r7, #12]
 800bfd0:	65da      	str	r2, [r3, #92]	; 0x5c
        hspi->TxXferCount --;
 800bfd2:	68fb      	ldr	r3, [r7, #12]
 800bfd4:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800bfd8:	b29b      	uxth	r3, r3
 800bfda:	3b01      	subs	r3, #1
 800bfdc:	b29a      	uxth	r2, r3
 800bfde:	68fb      	ldr	r3, [r7, #12]
 800bfe0:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
        initial_TxXferCount = hspi->TxXferCount;
 800bfe4:	68fb      	ldr	r3, [r7, #12]
 800bfe6:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800bfea:	85fb      	strh	r3, [r7, #46]	; 0x2e
      }

      /* Check RXWNE/EOT flag */
      if (((hspi->Instance->SR & (SPI_FLAG_RXWNE | SPI_FLAG_EOT)) != 0UL) && (initial_RxXferCount > 0UL))
 800bfec:	68fb      	ldr	r3, [r7, #12]
 800bfee:	681b      	ldr	r3, [r3, #0]
 800bff0:	695a      	ldr	r2, [r3, #20]
 800bff2:	f248 0308 	movw	r3, #32776	; 0x8008
 800bff6:	4013      	ands	r3, r2
 800bff8:	2b00      	cmp	r3, #0
 800bffa:	d01a      	beq.n	800c032 <HAL_SPI_TransmitReceive+0x1d2>
 800bffc:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800bffe:	2b00      	cmp	r3, #0
 800c000:	d017      	beq.n	800c032 <HAL_SPI_TransmitReceive+0x1d2>
      {
        *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 800c002:	68fb      	ldr	r3, [r7, #12]
 800c004:	681a      	ldr	r2, [r3, #0]
 800c006:	68fb      	ldr	r3, [r7, #12]
 800c008:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800c00a:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800c00c:	601a      	str	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint32_t);
 800c00e:	68fb      	ldr	r3, [r7, #12]
 800c010:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800c012:	1d1a      	adds	r2, r3, #4
 800c014:	68fb      	ldr	r3, [r7, #12]
 800c016:	665a      	str	r2, [r3, #100]	; 0x64
        hspi->RxXferCount --;
 800c018:	68fb      	ldr	r3, [r7, #12]
 800c01a:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800c01e:	b29b      	uxth	r3, r3
 800c020:	3b01      	subs	r3, #1
 800c022:	b29a      	uxth	r2, r3
 800c024:	68fb      	ldr	r3, [r7, #12]
 800c026:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
        initial_RxXferCount = hspi->RxXferCount;
 800c02a:	68fb      	ldr	r3, [r7, #12]
 800c02c:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800c030:	85bb      	strh	r3, [r7, #44]	; 0x2c
      }

      /* Timeout management */
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800c032:	f7f6 f9b7 	bl	80023a4 <HAL_GetTick>
 800c036:	4602      	mov	r2, r0
 800c038:	69fb      	ldr	r3, [r7, #28]
 800c03a:	1ad3      	subs	r3, r2, r3
 800c03c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800c03e:	429a      	cmp	r2, r3
 800c040:	d803      	bhi.n	800c04a <HAL_SPI_TransmitReceive+0x1ea>
 800c042:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c044:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c048:	d102      	bne.n	800c050 <HAL_SPI_TransmitReceive+0x1f0>
 800c04a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c04c:	2b00      	cmp	r3, #0
 800c04e:	d114      	bne.n	800c07a <HAL_SPI_TransmitReceive+0x21a>
      {
        /* Call standard close procedure with error check */
        SPI_CloseTransfer(hspi);
 800c050:	68f8      	ldr	r0, [r7, #12]
 800c052:	f000 f9f1 	bl	800c438 <SPI_CloseTransfer>

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800c056:	68fb      	ldr	r3, [r7, #12]
 800c058:	2200      	movs	r2, #0
 800c05a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800c05e:	68fb      	ldr	r3, [r7, #12]
 800c060:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800c064:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800c068:	68fb      	ldr	r3, [r7, #12]
 800c06a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        hspi->State = HAL_SPI_STATE_READY;
 800c06e:	68fb      	ldr	r3, [r7, #12]
 800c070:	2201      	movs	r2, #1
 800c072:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
        return HAL_ERROR;
 800c076:	2301      	movs	r3, #1
 800c078:	e1da      	b.n	800c430 <HAL_SPI_TransmitReceive+0x5d0>
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 800c07a:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800c07c:	2b00      	cmp	r3, #0
 800c07e:	d193      	bne.n	800bfa8 <HAL_SPI_TransmitReceive+0x148>
 800c080:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800c082:	2b00      	cmp	r3, #0
 800c084:	d190      	bne.n	800bfa8 <HAL_SPI_TransmitReceive+0x148>
 800c086:	e1ac      	b.n	800c3e2 <HAL_SPI_TransmitReceive+0x582>
      }
    }
  }
  /* Transmit and Receive data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800c088:	68fb      	ldr	r3, [r7, #12]
 800c08a:	68db      	ldr	r3, [r3, #12]
 800c08c:	2b07      	cmp	r3, #7
 800c08e:	f240 81a0 	bls.w	800c3d2 <HAL_SPI_TransmitReceive+0x572>
  {
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 800c092:	e0a9      	b.n	800c1e8 <HAL_SPI_TransmitReceive+0x388>
    {
      /* Check TXP flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP) && (initial_TxXferCount > 0UL))
 800c094:	68fb      	ldr	r3, [r7, #12]
 800c096:	681b      	ldr	r3, [r3, #0]
 800c098:	695b      	ldr	r3, [r3, #20]
 800c09a:	f003 0302 	and.w	r3, r3, #2
 800c09e:	2b02      	cmp	r3, #2
 800c0a0:	d139      	bne.n	800c116 <HAL_SPI_TransmitReceive+0x2b6>
 800c0a2:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800c0a4:	2b00      	cmp	r3, #0
 800c0a6:	d036      	beq.n	800c116 <HAL_SPI_TransmitReceive+0x2b6>
      {
        if ((initial_TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 800c0a8:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800c0aa:	2b01      	cmp	r3, #1
 800c0ac:	d91c      	bls.n	800c0e8 <HAL_SPI_TransmitReceive+0x288>
 800c0ae:	68fb      	ldr	r3, [r7, #12]
 800c0b0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c0b2:	2b00      	cmp	r3, #0
 800c0b4:	d018      	beq.n	800c0e8 <HAL_SPI_TransmitReceive+0x288>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((uint32_t *)hspi->pTxBuffPtr);
 800c0b6:	68fb      	ldr	r3, [r7, #12]
 800c0b8:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800c0ba:	68fb      	ldr	r3, [r7, #12]
 800c0bc:	681b      	ldr	r3, [r3, #0]
 800c0be:	6812      	ldr	r2, [r2, #0]
 800c0c0:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 800c0c2:	68fb      	ldr	r3, [r7, #12]
 800c0c4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800c0c6:	1d1a      	adds	r2, r3, #4
 800c0c8:	68fb      	ldr	r3, [r7, #12]
 800c0ca:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount -= (uint16_t)2UL;
 800c0cc:	68fb      	ldr	r3, [r7, #12]
 800c0ce:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800c0d2:	b29b      	uxth	r3, r3
 800c0d4:	3b02      	subs	r3, #2
 800c0d6:	b29a      	uxth	r2, r3
 800c0d8:	68fb      	ldr	r3, [r7, #12]
 800c0da:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
          initial_TxXferCount = hspi->TxXferCount;
 800c0de:	68fb      	ldr	r3, [r7, #12]
 800c0e0:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800c0e4:	85fb      	strh	r3, [r7, #46]	; 0x2e
 800c0e6:	e016      	b.n	800c116 <HAL_SPI_TransmitReceive+0x2b6>
        }
        else
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((uint16_t *)hspi->pTxBuffPtr);
 800c0e8:	68fb      	ldr	r3, [r7, #12]
 800c0ea:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800c0ec:	881a      	ldrh	r2, [r3, #0]
 800c0ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c0f0:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800c0f2:	68fb      	ldr	r3, [r7, #12]
 800c0f4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800c0f6:	1c9a      	adds	r2, r3, #2
 800c0f8:	68fb      	ldr	r3, [r7, #12]
 800c0fa:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount--;
 800c0fc:	68fb      	ldr	r3, [r7, #12]
 800c0fe:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800c102:	b29b      	uxth	r3, r3
 800c104:	3b01      	subs	r3, #1
 800c106:	b29a      	uxth	r2, r3
 800c108:	68fb      	ldr	r3, [r7, #12]
 800c10a:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
          initial_TxXferCount = hspi->TxXferCount;
 800c10e:	68fb      	ldr	r3, [r7, #12]
 800c110:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800c114:	85fb      	strh	r3, [r7, #46]	; 0x2e
        }
      }

      /* Check RXWNE/FRLVL flag */
      if (((hspi->Instance->SR & (SPI_FLAG_RXWNE | SPI_FLAG_FRLVL)) != 0UL) && (initial_RxXferCount > 0UL))
 800c116:	68fb      	ldr	r3, [r7, #12]
 800c118:	681b      	ldr	r3, [r3, #0]
 800c11a:	695b      	ldr	r3, [r3, #20]
 800c11c:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 800c120:	2b00      	cmp	r3, #0
 800c122:	d03a      	beq.n	800c19a <HAL_SPI_TransmitReceive+0x33a>
 800c124:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800c126:	2b00      	cmp	r3, #0
 800c128:	d037      	beq.n	800c19a <HAL_SPI_TransmitReceive+0x33a>
      {
        if ((hspi->Instance->SR & SPI_FLAG_RXWNE) != 0UL)
 800c12a:	68fb      	ldr	r3, [r7, #12]
 800c12c:	681b      	ldr	r3, [r3, #0]
 800c12e:	695b      	ldr	r3, [r3, #20]
 800c130:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800c134:	2b00      	cmp	r3, #0
 800c136:	d018      	beq.n	800c16a <HAL_SPI_TransmitReceive+0x30a>
        {
          *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 800c138:	68fb      	ldr	r3, [r7, #12]
 800c13a:	681a      	ldr	r2, [r3, #0]
 800c13c:	68fb      	ldr	r3, [r7, #12]
 800c13e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800c140:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800c142:	601a      	str	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint32_t);
 800c144:	68fb      	ldr	r3, [r7, #12]
 800c146:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800c148:	1d1a      	adds	r2, r3, #4
 800c14a:	68fb      	ldr	r3, [r7, #12]
 800c14c:	665a      	str	r2, [r3, #100]	; 0x64
          hspi->RxXferCount -= (uint16_t)2UL;
 800c14e:	68fb      	ldr	r3, [r7, #12]
 800c150:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800c154:	b29b      	uxth	r3, r3
 800c156:	3b02      	subs	r3, #2
 800c158:	b29a      	uxth	r2, r3
 800c15a:	68fb      	ldr	r3, [r7, #12]
 800c15c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 800c160:	68fb      	ldr	r3, [r7, #12]
 800c162:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800c166:	85bb      	strh	r3, [r7, #44]	; 0x2c
 800c168:	e017      	b.n	800c19a <HAL_SPI_TransmitReceive+0x33a>
        }
        else
        {
#if defined (__GNUC__)
          *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 800c16a:	68fb      	ldr	r3, [r7, #12]
 800c16c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800c16e:	6a3a      	ldr	r2, [r7, #32]
 800c170:	8812      	ldrh	r2, [r2, #0]
 800c172:	b292      	uxth	r2, r2
 800c174:	801a      	strh	r2, [r3, #0]
#else
          *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
          hspi->pRxBuffPtr += sizeof(uint16_t);
 800c176:	68fb      	ldr	r3, [r7, #12]
 800c178:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800c17a:	1c9a      	adds	r2, r3, #2
 800c17c:	68fb      	ldr	r3, [r7, #12]
 800c17e:	665a      	str	r2, [r3, #100]	; 0x64
          hspi->RxXferCount--;
 800c180:	68fb      	ldr	r3, [r7, #12]
 800c182:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800c186:	b29b      	uxth	r3, r3
 800c188:	3b01      	subs	r3, #1
 800c18a:	b29a      	uxth	r2, r3
 800c18c:	68fb      	ldr	r3, [r7, #12]
 800c18e:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 800c192:	68fb      	ldr	r3, [r7, #12]
 800c194:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800c198:	85bb      	strh	r3, [r7, #44]	; 0x2c
        }
      }

      /* Timeout management */
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800c19a:	f7f6 f903 	bl	80023a4 <HAL_GetTick>
 800c19e:	4602      	mov	r2, r0
 800c1a0:	69fb      	ldr	r3, [r7, #28]
 800c1a2:	1ad3      	subs	r3, r2, r3
 800c1a4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800c1a6:	429a      	cmp	r2, r3
 800c1a8:	d803      	bhi.n	800c1b2 <HAL_SPI_TransmitReceive+0x352>
 800c1aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c1ac:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c1b0:	d102      	bne.n	800c1b8 <HAL_SPI_TransmitReceive+0x358>
 800c1b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c1b4:	2b00      	cmp	r3, #0
 800c1b6:	d117      	bne.n	800c1e8 <HAL_SPI_TransmitReceive+0x388>
      {
        /* Call standard close procedure with error check */
        SPI_CloseTransfer(hspi);
 800c1b8:	68f8      	ldr	r0, [r7, #12]
 800c1ba:	f000 f93d 	bl	800c438 <SPI_CloseTransfer>

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800c1be:	68fb      	ldr	r3, [r7, #12]
 800c1c0:	2200      	movs	r2, #0
 800c1c2:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800c1c6:	68fb      	ldr	r3, [r7, #12]
 800c1c8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800c1cc:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800c1d0:	68fb      	ldr	r3, [r7, #12]
 800c1d2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        hspi->State = HAL_SPI_STATE_READY;
 800c1d6:	68fb      	ldr	r3, [r7, #12]
 800c1d8:	2201      	movs	r2, #1
 800c1da:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
        return HAL_ERROR;
 800c1de:	2301      	movs	r3, #1
 800c1e0:	e126      	b.n	800c430 <HAL_SPI_TransmitReceive+0x5d0>
 800c1e2:	bf00      	nop
 800c1e4:	ffff0000 	.word	0xffff0000
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 800c1e8:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800c1ea:	2b00      	cmp	r3, #0
 800c1ec:	f47f af52 	bne.w	800c094 <HAL_SPI_TransmitReceive+0x234>
 800c1f0:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800c1f2:	2b00      	cmp	r3, #0
 800c1f4:	f47f af4e 	bne.w	800c094 <HAL_SPI_TransmitReceive+0x234>
 800c1f8:	e0f3      	b.n	800c3e2 <HAL_SPI_TransmitReceive+0x582>
  else
  {
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
    {
      /* check TXP flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (initial_TxXferCount > 0UL))
 800c1fa:	68fb      	ldr	r3, [r7, #12]
 800c1fc:	681b      	ldr	r3, [r3, #0]
 800c1fe:	695b      	ldr	r3, [r3, #20]
 800c200:	f003 0302 	and.w	r3, r3, #2
 800c204:	2b02      	cmp	r3, #2
 800c206:	d15a      	bne.n	800c2be <HAL_SPI_TransmitReceive+0x45e>
 800c208:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800c20a:	2b00      	cmp	r3, #0
 800c20c:	d057      	beq.n	800c2be <HAL_SPI_TransmitReceive+0x45e>
      {
        if ((initial_TxXferCount > 3UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_03DATA))
 800c20e:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800c210:	2b03      	cmp	r3, #3
 800c212:	d91c      	bls.n	800c24e <HAL_SPI_TransmitReceive+0x3ee>
 800c214:	68fb      	ldr	r3, [r7, #12]
 800c216:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c218:	2b40      	cmp	r3, #64	; 0x40
 800c21a:	d918      	bls.n	800c24e <HAL_SPI_TransmitReceive+0x3ee>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((uint32_t *)hspi->pTxBuffPtr);
 800c21c:	68fb      	ldr	r3, [r7, #12]
 800c21e:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800c220:	68fb      	ldr	r3, [r7, #12]
 800c222:	681b      	ldr	r3, [r3, #0]
 800c224:	6812      	ldr	r2, [r2, #0]
 800c226:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 800c228:	68fb      	ldr	r3, [r7, #12]
 800c22a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800c22c:	1d1a      	adds	r2, r3, #4
 800c22e:	68fb      	ldr	r3, [r7, #12]
 800c230:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount -= (uint16_t)4UL;
 800c232:	68fb      	ldr	r3, [r7, #12]
 800c234:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800c238:	b29b      	uxth	r3, r3
 800c23a:	3b04      	subs	r3, #4
 800c23c:	b29a      	uxth	r2, r3
 800c23e:	68fb      	ldr	r3, [r7, #12]
 800c240:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
          initial_TxXferCount = hspi->TxXferCount;
 800c244:	68fb      	ldr	r3, [r7, #12]
 800c246:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800c24a:	85fb      	strh	r3, [r7, #46]	; 0x2e
 800c24c:	e037      	b.n	800c2be <HAL_SPI_TransmitReceive+0x45e>
        }
        else if ((initial_TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 800c24e:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800c250:	2b01      	cmp	r3, #1
 800c252:	d91b      	bls.n	800c28c <HAL_SPI_TransmitReceive+0x42c>
 800c254:	68fb      	ldr	r3, [r7, #12]
 800c256:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c258:	2b00      	cmp	r3, #0
 800c25a:	d017      	beq.n	800c28c <HAL_SPI_TransmitReceive+0x42c>
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((uint16_t *)hspi->pTxBuffPtr);
 800c25c:	68fb      	ldr	r3, [r7, #12]
 800c25e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800c260:	881a      	ldrh	r2, [r3, #0]
 800c262:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c264:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800c266:	68fb      	ldr	r3, [r7, #12]
 800c268:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800c26a:	1c9a      	adds	r2, r3, #2
 800c26c:	68fb      	ldr	r3, [r7, #12]
 800c26e:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount -= (uint16_t)2UL;
 800c270:	68fb      	ldr	r3, [r7, #12]
 800c272:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800c276:	b29b      	uxth	r3, r3
 800c278:	3b02      	subs	r3, #2
 800c27a:	b29a      	uxth	r2, r3
 800c27c:	68fb      	ldr	r3, [r7, #12]
 800c27e:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
          initial_TxXferCount = hspi->TxXferCount;
 800c282:	68fb      	ldr	r3, [r7, #12]
 800c284:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800c288:	85fb      	strh	r3, [r7, #46]	; 0x2e
 800c28a:	e018      	b.n	800c2be <HAL_SPI_TransmitReceive+0x45e>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->TXDR) = *((uint8_t *)hspi->pTxBuffPtr);
 800c28c:	68fb      	ldr	r3, [r7, #12]
 800c28e:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800c290:	68fb      	ldr	r3, [r7, #12]
 800c292:	681b      	ldr	r3, [r3, #0]
 800c294:	3320      	adds	r3, #32
 800c296:	7812      	ldrb	r2, [r2, #0]
 800c298:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr += sizeof(uint8_t);
 800c29a:	68fb      	ldr	r3, [r7, #12]
 800c29c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800c29e:	1c5a      	adds	r2, r3, #1
 800c2a0:	68fb      	ldr	r3, [r7, #12]
 800c2a2:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount--;
 800c2a4:	68fb      	ldr	r3, [r7, #12]
 800c2a6:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800c2aa:	b29b      	uxth	r3, r3
 800c2ac:	3b01      	subs	r3, #1
 800c2ae:	b29a      	uxth	r2, r3
 800c2b0:	68fb      	ldr	r3, [r7, #12]
 800c2b2:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
          initial_TxXferCount = hspi->TxXferCount;
 800c2b6:	68fb      	ldr	r3, [r7, #12]
 800c2b8:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800c2bc:	85fb      	strh	r3, [r7, #46]	; 0x2e
        }
      }

      /* Wait until RXWNE/FRLVL flag is reset */
      if (((hspi->Instance->SR & (SPI_FLAG_RXWNE | SPI_FLAG_FRLVL)) != 0UL) && (initial_RxXferCount > 0UL))
 800c2be:	68fb      	ldr	r3, [r7, #12]
 800c2c0:	681b      	ldr	r3, [r3, #0]
 800c2c2:	695b      	ldr	r3, [r3, #20]
 800c2c4:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 800c2c8:	2b00      	cmp	r3, #0
 800c2ca:	d05e      	beq.n	800c38a <HAL_SPI_TransmitReceive+0x52a>
 800c2cc:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800c2ce:	2b00      	cmp	r3, #0
 800c2d0:	d05b      	beq.n	800c38a <HAL_SPI_TransmitReceive+0x52a>
      {
        if ((hspi->Instance->SR & SPI_FLAG_RXWNE) != 0UL)
 800c2d2:	68fb      	ldr	r3, [r7, #12]
 800c2d4:	681b      	ldr	r3, [r3, #0]
 800c2d6:	695b      	ldr	r3, [r3, #20]
 800c2d8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800c2dc:	2b00      	cmp	r3, #0
 800c2de:	d018      	beq.n	800c312 <HAL_SPI_TransmitReceive+0x4b2>
        {
          *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 800c2e0:	68fb      	ldr	r3, [r7, #12]
 800c2e2:	681a      	ldr	r2, [r3, #0]
 800c2e4:	68fb      	ldr	r3, [r7, #12]
 800c2e6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800c2e8:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800c2ea:	601a      	str	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint32_t);
 800c2ec:	68fb      	ldr	r3, [r7, #12]
 800c2ee:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800c2f0:	1d1a      	adds	r2, r3, #4
 800c2f2:	68fb      	ldr	r3, [r7, #12]
 800c2f4:	665a      	str	r2, [r3, #100]	; 0x64
          hspi->RxXferCount -= (uint16_t)4UL;
 800c2f6:	68fb      	ldr	r3, [r7, #12]
 800c2f8:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800c2fc:	b29b      	uxth	r3, r3
 800c2fe:	3b04      	subs	r3, #4
 800c300:	b29a      	uxth	r2, r3
 800c302:	68fb      	ldr	r3, [r7, #12]
 800c304:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 800c308:	68fb      	ldr	r3, [r7, #12]
 800c30a:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800c30e:	85bb      	strh	r3, [r7, #44]	; 0x2c
 800c310:	e03b      	b.n	800c38a <HAL_SPI_TransmitReceive+0x52a>
        }
        else if ((hspi->Instance->SR & SPI_FLAG_FRLVL) > SPI_RX_FIFO_1PACKET)
 800c312:	68fb      	ldr	r3, [r7, #12]
 800c314:	681b      	ldr	r3, [r3, #0]
 800c316:	695b      	ldr	r3, [r3, #20]
 800c318:	f403 43c0 	and.w	r3, r3, #24576	; 0x6000
 800c31c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800c320:	d918      	bls.n	800c354 <HAL_SPI_TransmitReceive+0x4f4>
        {
#if defined (__GNUC__)
          *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 800c322:	68fb      	ldr	r3, [r7, #12]
 800c324:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800c326:	6a3a      	ldr	r2, [r7, #32]
 800c328:	8812      	ldrh	r2, [r2, #0]
 800c32a:	b292      	uxth	r2, r2
 800c32c:	801a      	strh	r2, [r3, #0]
#else
          *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
          hspi->pRxBuffPtr += sizeof(uint16_t);
 800c32e:	68fb      	ldr	r3, [r7, #12]
 800c330:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800c332:	1c9a      	adds	r2, r3, #2
 800c334:	68fb      	ldr	r3, [r7, #12]
 800c336:	665a      	str	r2, [r3, #100]	; 0x64
          hspi->RxXferCount -= (uint16_t)2UL;
 800c338:	68fb      	ldr	r3, [r7, #12]
 800c33a:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800c33e:	b29b      	uxth	r3, r3
 800c340:	3b02      	subs	r3, #2
 800c342:	b29a      	uxth	r2, r3
 800c344:	68fb      	ldr	r3, [r7, #12]
 800c346:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 800c34a:	68fb      	ldr	r3, [r7, #12]
 800c34c:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800c350:	85bb      	strh	r3, [r7, #44]	; 0x2c
 800c352:	e01a      	b.n	800c38a <HAL_SPI_TransmitReceive+0x52a>
        }
        else
        {
          *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 800c354:	68fb      	ldr	r3, [r7, #12]
 800c356:	681b      	ldr	r3, [r3, #0]
 800c358:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800c35c:	68fb      	ldr	r3, [r7, #12]
 800c35e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800c360:	7812      	ldrb	r2, [r2, #0]
 800c362:	b2d2      	uxtb	r2, r2
 800c364:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint8_t);
 800c366:	68fb      	ldr	r3, [r7, #12]
 800c368:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800c36a:	1c5a      	adds	r2, r3, #1
 800c36c:	68fb      	ldr	r3, [r7, #12]
 800c36e:	665a      	str	r2, [r3, #100]	; 0x64
          hspi->RxXferCount--;
 800c370:	68fb      	ldr	r3, [r7, #12]
 800c372:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800c376:	b29b      	uxth	r3, r3
 800c378:	3b01      	subs	r3, #1
 800c37a:	b29a      	uxth	r2, r3
 800c37c:	68fb      	ldr	r3, [r7, #12]
 800c37e:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 800c382:	68fb      	ldr	r3, [r7, #12]
 800c384:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800c388:	85bb      	strh	r3, [r7, #44]	; 0x2c
        }
      }

      /* Timeout management */
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800c38a:	f7f6 f80b 	bl	80023a4 <HAL_GetTick>
 800c38e:	4602      	mov	r2, r0
 800c390:	69fb      	ldr	r3, [r7, #28]
 800c392:	1ad3      	subs	r3, r2, r3
 800c394:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800c396:	429a      	cmp	r2, r3
 800c398:	d803      	bhi.n	800c3a2 <HAL_SPI_TransmitReceive+0x542>
 800c39a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c39c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c3a0:	d102      	bne.n	800c3a8 <HAL_SPI_TransmitReceive+0x548>
 800c3a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c3a4:	2b00      	cmp	r3, #0
 800c3a6:	d114      	bne.n	800c3d2 <HAL_SPI_TransmitReceive+0x572>
      {
        /* Call standard close procedure with error check */
        SPI_CloseTransfer(hspi);
 800c3a8:	68f8      	ldr	r0, [r7, #12]
 800c3aa:	f000 f845 	bl	800c438 <SPI_CloseTransfer>

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800c3ae:	68fb      	ldr	r3, [r7, #12]
 800c3b0:	2200      	movs	r2, #0
 800c3b2:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800c3b6:	68fb      	ldr	r3, [r7, #12]
 800c3b8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800c3bc:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800c3c0:	68fb      	ldr	r3, [r7, #12]
 800c3c2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        hspi->State = HAL_SPI_STATE_READY;
 800c3c6:	68fb      	ldr	r3, [r7, #12]
 800c3c8:	2201      	movs	r2, #1
 800c3ca:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
        return HAL_ERROR;
 800c3ce:	2301      	movs	r3, #1
 800c3d0:	e02e      	b.n	800c430 <HAL_SPI_TransmitReceive+0x5d0>
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 800c3d2:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800c3d4:	2b00      	cmp	r3, #0
 800c3d6:	f47f af10 	bne.w	800c1fa <HAL_SPI_TransmitReceive+0x39a>
 800c3da:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800c3dc:	2b00      	cmp	r3, #0
 800c3de:	f47f af0c 	bne.w	800c1fa <HAL_SPI_TransmitReceive+0x39a>
      }
    }
  }

  /* Wait for Tx/Rx (and CRC) data to be sent/received */
  if (SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_EOT, RESET, tickstart, Timeout) != HAL_OK)
 800c3e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c3e4:	9300      	str	r3, [sp, #0]
 800c3e6:	69fb      	ldr	r3, [r7, #28]
 800c3e8:	2200      	movs	r2, #0
 800c3ea:	2108      	movs	r1, #8
 800c3ec:	68f8      	ldr	r0, [r7, #12]
 800c3ee:	f000 f8c3 	bl	800c578 <SPI_WaitOnFlagUntilTimeout>
 800c3f2:	4603      	mov	r3, r0
 800c3f4:	2b00      	cmp	r3, #0
 800c3f6:	d007      	beq.n	800c408 <HAL_SPI_TransmitReceive+0x5a8>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800c3f8:	68fb      	ldr	r3, [r7, #12]
 800c3fa:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800c3fe:	f043 0220 	orr.w	r2, r3, #32
 800c402:	68fb      	ldr	r3, [r7, #12]
 800c404:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  }

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 800c408:	68f8      	ldr	r0, [r7, #12]
 800c40a:	f000 f815 	bl	800c438 <SPI_CloseTransfer>

  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800c40e:	68fb      	ldr	r3, [r7, #12]
 800c410:	2200      	movs	r2, #0
 800c412:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  hspi->State = HAL_SPI_STATE_READY;
 800c416:	68fb      	ldr	r3, [r7, #12]
 800c418:	2201      	movs	r2, #1
 800c41a:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800c41e:	68fb      	ldr	r3, [r7, #12]
 800c420:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800c424:	2b00      	cmp	r3, #0
 800c426:	d001      	beq.n	800c42c <HAL_SPI_TransmitReceive+0x5cc>
  {
    return HAL_ERROR;
 800c428:	2301      	movs	r3, #1
 800c42a:	e001      	b.n	800c430 <HAL_SPI_TransmitReceive+0x5d0>
  }
  return errorcode;
 800c42c:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 800c430:	4618      	mov	r0, r3
 800c432:	3730      	adds	r7, #48	; 0x30
 800c434:	46bd      	mov	sp, r7
 800c436:	bd80      	pop	{r7, pc}

0800c438 <SPI_CloseTransfer>:
  *               the configuration information for SPI module.
  * @retval HAL_ERROR: if any error detected
*         HAL_OK: if nothing detected
  */
static void SPI_CloseTransfer(SPI_HandleTypeDef *hspi)
{
 800c438:	b480      	push	{r7}
 800c43a:	b085      	sub	sp, #20
 800c43c:	af00      	add	r7, sp, #0
 800c43e:	6078      	str	r0, [r7, #4]
  uint32_t itflag = hspi->Instance->SR;
 800c440:	687b      	ldr	r3, [r7, #4]
 800c442:	681b      	ldr	r3, [r3, #0]
 800c444:	695b      	ldr	r3, [r3, #20]
 800c446:	60fb      	str	r3, [r7, #12]

  __HAL_SPI_CLEAR_EOTFLAG(hspi);
 800c448:	687b      	ldr	r3, [r7, #4]
 800c44a:	681b      	ldr	r3, [r3, #0]
 800c44c:	699a      	ldr	r2, [r3, #24]
 800c44e:	687b      	ldr	r3, [r7, #4]
 800c450:	681b      	ldr	r3, [r3, #0]
 800c452:	f042 0208 	orr.w	r2, r2, #8
 800c456:	619a      	str	r2, [r3, #24]
  __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 800c458:	687b      	ldr	r3, [r7, #4]
 800c45a:	681b      	ldr	r3, [r3, #0]
 800c45c:	699a      	ldr	r2, [r3, #24]
 800c45e:	687b      	ldr	r3, [r7, #4]
 800c460:	681b      	ldr	r3, [r3, #0]
 800c462:	f042 0210 	orr.w	r2, r2, #16
 800c466:	619a      	str	r2, [r3, #24]

  /* Disable SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800c468:	687b      	ldr	r3, [r7, #4]
 800c46a:	681b      	ldr	r3, [r3, #0]
 800c46c:	681a      	ldr	r2, [r3, #0]
 800c46e:	687b      	ldr	r3, [r7, #4]
 800c470:	681b      	ldr	r3, [r3, #0]
 800c472:	f022 0201 	bic.w	r2, r2, #1
 800c476:	601a      	str	r2, [r3, #0]

  /* Disable ITs */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_TXP | SPI_IT_RXP | SPI_IT_DXP | SPI_IT_UDR | SPI_IT_OVR | SPI_IT_FRE | SPI_IT_MODF));
 800c478:	687b      	ldr	r3, [r7, #4]
 800c47a:	681b      	ldr	r3, [r3, #0]
 800c47c:	6919      	ldr	r1, [r3, #16]
 800c47e:	687b      	ldr	r3, [r7, #4]
 800c480:	681a      	ldr	r2, [r3, #0]
 800c482:	4b3c      	ldr	r3, [pc, #240]	; (800c574 <SPI_CloseTransfer+0x13c>)
 800c484:	400b      	ands	r3, r1
 800c486:	6113      	str	r3, [r2, #16]

  /* Disable Tx DMA Request */
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 800c488:	687b      	ldr	r3, [r7, #4]
 800c48a:	681b      	ldr	r3, [r3, #0]
 800c48c:	689a      	ldr	r2, [r3, #8]
 800c48e:	687b      	ldr	r3, [r7, #4]
 800c490:	681b      	ldr	r3, [r3, #0]
 800c492:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 800c496:	609a      	str	r2, [r3, #8]

  /* Report UnderRun error for non RX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800c498:	687b      	ldr	r3, [r7, #4]
 800c49a:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800c49e:	b2db      	uxtb	r3, r3
 800c4a0:	2b04      	cmp	r3, #4
 800c4a2:	d014      	beq.n	800c4ce <SPI_CloseTransfer+0x96>
  {
    if ((itflag & SPI_FLAG_UDR) != 0UL)
 800c4a4:	68fb      	ldr	r3, [r7, #12]
 800c4a6:	f003 0320 	and.w	r3, r3, #32
 800c4aa:	2b00      	cmp	r3, #0
 800c4ac:	d00f      	beq.n	800c4ce <SPI_CloseTransfer+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 800c4ae:	687b      	ldr	r3, [r7, #4]
 800c4b0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800c4b4:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800c4b8:	687b      	ldr	r3, [r7, #4]
 800c4ba:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 800c4be:	687b      	ldr	r3, [r7, #4]
 800c4c0:	681b      	ldr	r3, [r3, #0]
 800c4c2:	699a      	ldr	r2, [r3, #24]
 800c4c4:	687b      	ldr	r3, [r7, #4]
 800c4c6:	681b      	ldr	r3, [r3, #0]
 800c4c8:	f042 0220 	orr.w	r2, r2, #32
 800c4cc:	619a      	str	r2, [r3, #24]
    }
  }

  /* Report OverRun error for non TX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 800c4ce:	687b      	ldr	r3, [r7, #4]
 800c4d0:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800c4d4:	b2db      	uxtb	r3, r3
 800c4d6:	2b03      	cmp	r3, #3
 800c4d8:	d014      	beq.n	800c504 <SPI_CloseTransfer+0xcc>
  {
    if ((itflag & SPI_FLAG_OVR) != 0UL)
 800c4da:	68fb      	ldr	r3, [r7, #12]
 800c4dc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c4e0:	2b00      	cmp	r3, #0
 800c4e2:	d00f      	beq.n	800c504 <SPI_CloseTransfer+0xcc>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 800c4e4:	687b      	ldr	r3, [r7, #4]
 800c4e6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800c4ea:	f043 0204 	orr.w	r2, r3, #4
 800c4ee:	687b      	ldr	r3, [r7, #4]
 800c4f0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800c4f4:	687b      	ldr	r3, [r7, #4]
 800c4f6:	681b      	ldr	r3, [r3, #0]
 800c4f8:	699a      	ldr	r2, [r3, #24]
 800c4fa:	687b      	ldr	r3, [r7, #4]
 800c4fc:	681b      	ldr	r3, [r3, #0]
 800c4fe:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800c502:	619a      	str	r2, [r3, #24]
    }
#endif /* USE_SPI_CRC */
  }

  /* SPI Mode Fault error interrupt occurred -------------------------------*/
  if ((itflag & SPI_FLAG_MODF) != 0UL)
 800c504:	68fb      	ldr	r3, [r7, #12]
 800c506:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800c50a:	2b00      	cmp	r3, #0
 800c50c:	d00f      	beq.n	800c52e <SPI_CloseTransfer+0xf6>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 800c50e:	687b      	ldr	r3, [r7, #4]
 800c510:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800c514:	f043 0201 	orr.w	r2, r3, #1
 800c518:	687b      	ldr	r3, [r7, #4]
 800c51a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    __HAL_SPI_CLEAR_MODFFLAG(hspi);
 800c51e:	687b      	ldr	r3, [r7, #4]
 800c520:	681b      	ldr	r3, [r3, #0]
 800c522:	699a      	ldr	r2, [r3, #24]
 800c524:	687b      	ldr	r3, [r7, #4]
 800c526:	681b      	ldr	r3, [r3, #0]
 800c528:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800c52c:	619a      	str	r2, [r3, #24]
  }

  /* SPI Frame error interrupt occurred ------------------------------------*/
  if ((itflag & SPI_FLAG_FRE) != 0UL)
 800c52e:	68fb      	ldr	r3, [r7, #12]
 800c530:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c534:	2b00      	cmp	r3, #0
 800c536:	d00f      	beq.n	800c558 <SPI_CloseTransfer+0x120>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 800c538:	687b      	ldr	r3, [r7, #4]
 800c53a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800c53e:	f043 0208 	orr.w	r2, r3, #8
 800c542:	687b      	ldr	r3, [r7, #4]
 800c544:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    __HAL_SPI_CLEAR_FREFLAG(hspi);
 800c548:	687b      	ldr	r3, [r7, #4]
 800c54a:	681b      	ldr	r3, [r3, #0]
 800c54c:	699a      	ldr	r2, [r3, #24]
 800c54e:	687b      	ldr	r3, [r7, #4]
 800c550:	681b      	ldr	r3, [r3, #0]
 800c552:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800c556:	619a      	str	r2, [r3, #24]
  }

  hspi->TxXferCount = (uint16_t)0UL;
 800c558:	687b      	ldr	r3, [r7, #4]
 800c55a:	2200      	movs	r2, #0
 800c55c:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
  hspi->RxXferCount = (uint16_t)0UL;
 800c560:	687b      	ldr	r3, [r7, #4]
 800c562:	2200      	movs	r2, #0
 800c564:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
}
 800c568:	bf00      	nop
 800c56a:	3714      	adds	r7, #20
 800c56c:	46bd      	mov	sp, r7
 800c56e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c572:	4770      	bx	lr
 800c574:	fffffc90 	.word	0xfffffc90

0800c578 <SPI_WaitOnFlagUntilTimeout>:
  * @param Tickstart: Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitOnFlagUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Tickstart, uint32_t Timeout)
{
 800c578:	b580      	push	{r7, lr}
 800c57a:	b084      	sub	sp, #16
 800c57c:	af00      	add	r7, sp, #0
 800c57e:	60f8      	str	r0, [r7, #12]
 800c580:	60b9      	str	r1, [r7, #8]
 800c582:	603b      	str	r3, [r7, #0]
 800c584:	4613      	mov	r3, r2
 800c586:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 800c588:	e010      	b.n	800c5ac <SPI_WaitOnFlagUntilTimeout+0x34>
  {
    /* Check for the Timeout */
    if ((((HAL_GetTick() - Tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800c58a:	f7f5 ff0b 	bl	80023a4 <HAL_GetTick>
 800c58e:	4602      	mov	r2, r0
 800c590:	683b      	ldr	r3, [r7, #0]
 800c592:	1ad3      	subs	r3, r2, r3
 800c594:	69ba      	ldr	r2, [r7, #24]
 800c596:	429a      	cmp	r2, r3
 800c598:	d803      	bhi.n	800c5a2 <SPI_WaitOnFlagUntilTimeout+0x2a>
 800c59a:	69bb      	ldr	r3, [r7, #24]
 800c59c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c5a0:	d102      	bne.n	800c5a8 <SPI_WaitOnFlagUntilTimeout+0x30>
 800c5a2:	69bb      	ldr	r3, [r7, #24]
 800c5a4:	2b00      	cmp	r3, #0
 800c5a6:	d101      	bne.n	800c5ac <SPI_WaitOnFlagUntilTimeout+0x34>
    {
      return HAL_TIMEOUT;
 800c5a8:	2303      	movs	r3, #3
 800c5aa:	e00f      	b.n	800c5cc <SPI_WaitOnFlagUntilTimeout+0x54>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 800c5ac:	68fb      	ldr	r3, [r7, #12]
 800c5ae:	681b      	ldr	r3, [r3, #0]
 800c5b0:	695a      	ldr	r2, [r3, #20]
 800c5b2:	68bb      	ldr	r3, [r7, #8]
 800c5b4:	4013      	ands	r3, r2
 800c5b6:	68ba      	ldr	r2, [r7, #8]
 800c5b8:	429a      	cmp	r2, r3
 800c5ba:	bf0c      	ite	eq
 800c5bc:	2301      	moveq	r3, #1
 800c5be:	2300      	movne	r3, #0
 800c5c0:	b2db      	uxtb	r3, r3
 800c5c2:	461a      	mov	r2, r3
 800c5c4:	79fb      	ldrb	r3, [r7, #7]
 800c5c6:	429a      	cmp	r2, r3
 800c5c8:	d0df      	beq.n	800c58a <SPI_WaitOnFlagUntilTimeout+0x12>
    }
  }
  return HAL_OK;
 800c5ca:	2300      	movs	r3, #0
}
 800c5cc:	4618      	mov	r0, r3
 800c5ce:	3710      	adds	r7, #16
 800c5d0:	46bd      	mov	sp, r7
 800c5d2:	bd80      	pop	{r7, pc}

0800c5d4 <SPI_GetPacketSize>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(SPI_HandleTypeDef *hspi)
{
 800c5d4:	b480      	push	{r7}
 800c5d6:	b085      	sub	sp, #20
 800c5d8:	af00      	add	r7, sp, #0
 800c5da:	6078      	str	r0, [r7, #4]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 800c5dc:	687b      	ldr	r3, [r7, #4]
 800c5de:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c5e0:	095b      	lsrs	r3, r3, #5
 800c5e2:	3301      	adds	r3, #1
 800c5e4:	60fb      	str	r3, [r7, #12]
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 800c5e6:	687b      	ldr	r3, [r7, #4]
 800c5e8:	68db      	ldr	r3, [r3, #12]
 800c5ea:	3301      	adds	r3, #1
 800c5ec:	60bb      	str	r3, [r7, #8]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 800c5ee:	68bb      	ldr	r3, [r7, #8]
 800c5f0:	3307      	adds	r3, #7
 800c5f2:	08db      	lsrs	r3, r3, #3
 800c5f4:	60bb      	str	r3, [r7, #8]

  return data_size * fifo_threashold;
 800c5f6:	68bb      	ldr	r3, [r7, #8]
 800c5f8:	68fa      	ldr	r2, [r7, #12]
 800c5fa:	fb02 f303 	mul.w	r3, r2, r3
}
 800c5fe:	4618      	mov	r0, r3
 800c600:	3714      	adds	r7, #20
 800c602:	46bd      	mov	sp, r7
 800c604:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c608:	4770      	bx	lr
	...

0800c60c <HAL_SRAM_Init>:
  * @param  ExtTiming Pointer to SRAM extended mode timing structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SRAM_Init(SRAM_HandleTypeDef *hsram, FMC_NORSRAM_TimingTypeDef *Timing,
                                FMC_NORSRAM_TimingTypeDef *ExtTiming)
{
 800c60c:	b580      	push	{r7, lr}
 800c60e:	b084      	sub	sp, #16
 800c610:	af00      	add	r7, sp, #0
 800c612:	60f8      	str	r0, [r7, #12]
 800c614:	60b9      	str	r1, [r7, #8]
 800c616:	607a      	str	r2, [r7, #4]
  /* Check the SRAM handle parameter */
  if (hsram == NULL)
 800c618:	68fb      	ldr	r3, [r7, #12]
 800c61a:	2b00      	cmp	r3, #0
 800c61c:	d101      	bne.n	800c622 <HAL_SRAM_Init+0x16>
  {
    return HAL_ERROR;
 800c61e:	2301      	movs	r3, #1
 800c620:	e03e      	b.n	800c6a0 <HAL_SRAM_Init+0x94>
  }

  if (hsram->State == HAL_SRAM_STATE_RESET)
 800c622:	68fb      	ldr	r3, [r7, #12]
 800c624:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800c628:	b2db      	uxtb	r3, r3
 800c62a:	2b00      	cmp	r3, #0
 800c62c:	d106      	bne.n	800c63c <HAL_SRAM_Init+0x30>
  {
    /* Allocate lock resource and initialize it */
    hsram->Lock = HAL_UNLOCKED;
 800c62e:	68fb      	ldr	r3, [r7, #12]
 800c630:	2200      	movs	r2, #0
 800c632:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44

    /* Init the low level hardware */
    hsram->MspInitCallback(hsram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SRAM_MspInit(hsram);
 800c636:	68f8      	ldr	r0, [r7, #12]
 800c638:	f7f4 fe3a 	bl	80012b0 <HAL_SRAM_MspInit>
#endif /* USE_HAL_SRAM_REGISTER_CALLBACKS */
  }

  /* Initialize SRAM control Interface */
  (void)FMC_NORSRAM_Init(hsram->Instance, &(hsram->Init));
 800c63c:	68fb      	ldr	r3, [r7, #12]
 800c63e:	681a      	ldr	r2, [r3, #0]
 800c640:	68fb      	ldr	r3, [r7, #12]
 800c642:	3308      	adds	r3, #8
 800c644:	4619      	mov	r1, r3
 800c646:	4610      	mov	r0, r2
 800c648:	f001 f850 	bl	800d6ec <FMC_NORSRAM_Init>

  /* Initialize SRAM timing Interface */
  (void)FMC_NORSRAM_Timing_Init(hsram->Instance, Timing, hsram->Init.NSBank);
 800c64c:	68fb      	ldr	r3, [r7, #12]
 800c64e:	6818      	ldr	r0, [r3, #0]
 800c650:	68fb      	ldr	r3, [r7, #12]
 800c652:	689b      	ldr	r3, [r3, #8]
 800c654:	461a      	mov	r2, r3
 800c656:	68b9      	ldr	r1, [r7, #8]
 800c658:	f001 f8d8 	bl	800d80c <FMC_NORSRAM_Timing_Init>

  /* Initialize SRAM extended mode timing Interface */
  (void)FMC_NORSRAM_Extended_Timing_Init(hsram->Extended, ExtTiming, hsram->Init.NSBank,
 800c65c:	68fb      	ldr	r3, [r7, #12]
 800c65e:	6858      	ldr	r0, [r3, #4]
 800c660:	68fb      	ldr	r3, [r7, #12]
 800c662:	689a      	ldr	r2, [r3, #8]
 800c664:	68fb      	ldr	r3, [r7, #12]
 800c666:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c668:	6879      	ldr	r1, [r7, #4]
 800c66a:	f001 f91f 	bl	800d8ac <FMC_NORSRAM_Extended_Timing_Init>
                                         hsram->Init.ExtendedMode);

  /* Enable the NORSRAM device */
  __FMC_NORSRAM_ENABLE(hsram->Instance, hsram->Init.NSBank);
 800c66e:	68fb      	ldr	r3, [r7, #12]
 800c670:	681b      	ldr	r3, [r3, #0]
 800c672:	68fa      	ldr	r2, [r7, #12]
 800c674:	6892      	ldr	r2, [r2, #8]
 800c676:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800c67a:	68fb      	ldr	r3, [r7, #12]
 800c67c:	681b      	ldr	r3, [r3, #0]
 800c67e:	68fa      	ldr	r2, [r7, #12]
 800c680:	6892      	ldr	r2, [r2, #8]
 800c682:	f041 0101 	orr.w	r1, r1, #1
 800c686:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

  /* Enable FMC Peripheral */
  __FMC_ENABLE();
 800c68a:	4b07      	ldr	r3, [pc, #28]	; (800c6a8 <HAL_SRAM_Init+0x9c>)
 800c68c:	681b      	ldr	r3, [r3, #0]
 800c68e:	4a06      	ldr	r2, [pc, #24]	; (800c6a8 <HAL_SRAM_Init+0x9c>)
 800c690:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800c694:	6013      	str	r3, [r2, #0]

  /* Initialize the SRAM controller state */
  hsram->State = HAL_SRAM_STATE_READY;
 800c696:	68fb      	ldr	r3, [r7, #12]
 800c698:	2201      	movs	r2, #1
 800c69a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  return HAL_OK;
 800c69e:	2300      	movs	r3, #0
}
 800c6a0:	4618      	mov	r0, r3
 800c6a2:	3710      	adds	r7, #16
 800c6a4:	46bd      	mov	sp, r7
 800c6a6:	bd80      	pop	{r7, pc}
 800c6a8:	52004000 	.word	0x52004000

0800c6ac <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800c6ac:	b580      	push	{r7, lr}
 800c6ae:	b082      	sub	sp, #8
 800c6b0:	af00      	add	r7, sp, #0
 800c6b2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800c6b4:	687b      	ldr	r3, [r7, #4]
 800c6b6:	2b00      	cmp	r3, #0
 800c6b8:	d101      	bne.n	800c6be <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800c6ba:	2301      	movs	r3, #1
 800c6bc:	e042      	b.n	800c744 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800c6be:	687b      	ldr	r3, [r7, #4]
 800c6c0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800c6c4:	2b00      	cmp	r3, #0
 800c6c6:	d106      	bne.n	800c6d6 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800c6c8:	687b      	ldr	r3, [r7, #4]
 800c6ca:	2200      	movs	r2, #0
 800c6cc:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800c6d0:	6878      	ldr	r0, [r7, #4]
 800c6d2:	f7f5 fd51 	bl	8002178 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800c6d6:	687b      	ldr	r3, [r7, #4]
 800c6d8:	2224      	movs	r2, #36	; 0x24
 800c6da:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 800c6de:	687b      	ldr	r3, [r7, #4]
 800c6e0:	681b      	ldr	r3, [r3, #0]
 800c6e2:	681a      	ldr	r2, [r3, #0]
 800c6e4:	687b      	ldr	r3, [r7, #4]
 800c6e6:	681b      	ldr	r3, [r3, #0]
 800c6e8:	f022 0201 	bic.w	r2, r2, #1
 800c6ec:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800c6ee:	6878      	ldr	r0, [r7, #4]
 800c6f0:	f000 f82c 	bl	800c74c <UART_SetConfig>
 800c6f4:	4603      	mov	r3, r0
 800c6f6:	2b01      	cmp	r3, #1
 800c6f8:	d101      	bne.n	800c6fe <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 800c6fa:	2301      	movs	r3, #1
 800c6fc:	e022      	b.n	800c744 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800c6fe:	687b      	ldr	r3, [r7, #4]
 800c700:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c702:	2b00      	cmp	r3, #0
 800c704:	d002      	beq.n	800c70c <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 800c706:	6878      	ldr	r0, [r7, #4]
 800c708:	f000 fd80 	bl	800d20c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800c70c:	687b      	ldr	r3, [r7, #4]
 800c70e:	681b      	ldr	r3, [r3, #0]
 800c710:	685a      	ldr	r2, [r3, #4]
 800c712:	687b      	ldr	r3, [r7, #4]
 800c714:	681b      	ldr	r3, [r3, #0]
 800c716:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800c71a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800c71c:	687b      	ldr	r3, [r7, #4]
 800c71e:	681b      	ldr	r3, [r3, #0]
 800c720:	689a      	ldr	r2, [r3, #8]
 800c722:	687b      	ldr	r3, [r7, #4]
 800c724:	681b      	ldr	r3, [r3, #0]
 800c726:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800c72a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800c72c:	687b      	ldr	r3, [r7, #4]
 800c72e:	681b      	ldr	r3, [r3, #0]
 800c730:	681a      	ldr	r2, [r3, #0]
 800c732:	687b      	ldr	r3, [r7, #4]
 800c734:	681b      	ldr	r3, [r3, #0]
 800c736:	f042 0201 	orr.w	r2, r2, #1
 800c73a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800c73c:	6878      	ldr	r0, [r7, #4]
 800c73e:	f000 fe07 	bl	800d350 <UART_CheckIdleState>
 800c742:	4603      	mov	r3, r0
}
 800c744:	4618      	mov	r0, r3
 800c746:	3708      	adds	r7, #8
 800c748:	46bd      	mov	sp, r7
 800c74a:	bd80      	pop	{r7, pc}

0800c74c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800c74c:	b5b0      	push	{r4, r5, r7, lr}
 800c74e:	b08e      	sub	sp, #56	; 0x38
 800c750:	af00      	add	r7, sp, #0
 800c752:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800c754:	2300      	movs	r3, #0
 800c756:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800c75a:	687b      	ldr	r3, [r7, #4]
 800c75c:	689a      	ldr	r2, [r3, #8]
 800c75e:	687b      	ldr	r3, [r7, #4]
 800c760:	691b      	ldr	r3, [r3, #16]
 800c762:	431a      	orrs	r2, r3
 800c764:	687b      	ldr	r3, [r7, #4]
 800c766:	695b      	ldr	r3, [r3, #20]
 800c768:	431a      	orrs	r2, r3
 800c76a:	687b      	ldr	r3, [r7, #4]
 800c76c:	69db      	ldr	r3, [r3, #28]
 800c76e:	4313      	orrs	r3, r2
 800c770:	637b      	str	r3, [r7, #52]	; 0x34
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800c772:	687b      	ldr	r3, [r7, #4]
 800c774:	681b      	ldr	r3, [r3, #0]
 800c776:	681a      	ldr	r2, [r3, #0]
 800c778:	4bbf      	ldr	r3, [pc, #764]	; (800ca78 <UART_SetConfig+0x32c>)
 800c77a:	4013      	ands	r3, r2
 800c77c:	687a      	ldr	r2, [r7, #4]
 800c77e:	6812      	ldr	r2, [r2, #0]
 800c780:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800c782:	430b      	orrs	r3, r1
 800c784:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800c786:	687b      	ldr	r3, [r7, #4]
 800c788:	681b      	ldr	r3, [r3, #0]
 800c78a:	685b      	ldr	r3, [r3, #4]
 800c78c:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800c790:	687b      	ldr	r3, [r7, #4]
 800c792:	68da      	ldr	r2, [r3, #12]
 800c794:	687b      	ldr	r3, [r7, #4]
 800c796:	681b      	ldr	r3, [r3, #0]
 800c798:	430a      	orrs	r2, r1
 800c79a:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800c79c:	687b      	ldr	r3, [r7, #4]
 800c79e:	699b      	ldr	r3, [r3, #24]
 800c7a0:	637b      	str	r3, [r7, #52]	; 0x34

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800c7a2:	687b      	ldr	r3, [r7, #4]
 800c7a4:	681b      	ldr	r3, [r3, #0]
 800c7a6:	4ab5      	ldr	r2, [pc, #724]	; (800ca7c <UART_SetConfig+0x330>)
 800c7a8:	4293      	cmp	r3, r2
 800c7aa:	d004      	beq.n	800c7b6 <UART_SetConfig+0x6a>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800c7ac:	687b      	ldr	r3, [r7, #4]
 800c7ae:	6a1b      	ldr	r3, [r3, #32]
 800c7b0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800c7b2:	4313      	orrs	r3, r2
 800c7b4:	637b      	str	r3, [r7, #52]	; 0x34
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800c7b6:	687b      	ldr	r3, [r7, #4]
 800c7b8:	681b      	ldr	r3, [r3, #0]
 800c7ba:	689a      	ldr	r2, [r3, #8]
 800c7bc:	4bb0      	ldr	r3, [pc, #704]	; (800ca80 <UART_SetConfig+0x334>)
 800c7be:	4013      	ands	r3, r2
 800c7c0:	687a      	ldr	r2, [r7, #4]
 800c7c2:	6812      	ldr	r2, [r2, #0]
 800c7c4:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800c7c6:	430b      	orrs	r3, r1
 800c7c8:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800c7ca:	687b      	ldr	r3, [r7, #4]
 800c7cc:	681b      	ldr	r3, [r3, #0]
 800c7ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c7d0:	f023 010f 	bic.w	r1, r3, #15
 800c7d4:	687b      	ldr	r3, [r7, #4]
 800c7d6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800c7d8:	687b      	ldr	r3, [r7, #4]
 800c7da:	681b      	ldr	r3, [r3, #0]
 800c7dc:	430a      	orrs	r2, r1
 800c7de:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800c7e0:	687b      	ldr	r3, [r7, #4]
 800c7e2:	681b      	ldr	r3, [r3, #0]
 800c7e4:	4aa7      	ldr	r2, [pc, #668]	; (800ca84 <UART_SetConfig+0x338>)
 800c7e6:	4293      	cmp	r3, r2
 800c7e8:	d176      	bne.n	800c8d8 <UART_SetConfig+0x18c>
 800c7ea:	4ba7      	ldr	r3, [pc, #668]	; (800ca88 <UART_SetConfig+0x33c>)
 800c7ec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c7ee:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800c7f2:	2b28      	cmp	r3, #40	; 0x28
 800c7f4:	d86c      	bhi.n	800c8d0 <UART_SetConfig+0x184>
 800c7f6:	a201      	add	r2, pc, #4	; (adr r2, 800c7fc <UART_SetConfig+0xb0>)
 800c7f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c7fc:	0800c8a1 	.word	0x0800c8a1
 800c800:	0800c8d1 	.word	0x0800c8d1
 800c804:	0800c8d1 	.word	0x0800c8d1
 800c808:	0800c8d1 	.word	0x0800c8d1
 800c80c:	0800c8d1 	.word	0x0800c8d1
 800c810:	0800c8d1 	.word	0x0800c8d1
 800c814:	0800c8d1 	.word	0x0800c8d1
 800c818:	0800c8d1 	.word	0x0800c8d1
 800c81c:	0800c8a9 	.word	0x0800c8a9
 800c820:	0800c8d1 	.word	0x0800c8d1
 800c824:	0800c8d1 	.word	0x0800c8d1
 800c828:	0800c8d1 	.word	0x0800c8d1
 800c82c:	0800c8d1 	.word	0x0800c8d1
 800c830:	0800c8d1 	.word	0x0800c8d1
 800c834:	0800c8d1 	.word	0x0800c8d1
 800c838:	0800c8d1 	.word	0x0800c8d1
 800c83c:	0800c8b1 	.word	0x0800c8b1
 800c840:	0800c8d1 	.word	0x0800c8d1
 800c844:	0800c8d1 	.word	0x0800c8d1
 800c848:	0800c8d1 	.word	0x0800c8d1
 800c84c:	0800c8d1 	.word	0x0800c8d1
 800c850:	0800c8d1 	.word	0x0800c8d1
 800c854:	0800c8d1 	.word	0x0800c8d1
 800c858:	0800c8d1 	.word	0x0800c8d1
 800c85c:	0800c8b9 	.word	0x0800c8b9
 800c860:	0800c8d1 	.word	0x0800c8d1
 800c864:	0800c8d1 	.word	0x0800c8d1
 800c868:	0800c8d1 	.word	0x0800c8d1
 800c86c:	0800c8d1 	.word	0x0800c8d1
 800c870:	0800c8d1 	.word	0x0800c8d1
 800c874:	0800c8d1 	.word	0x0800c8d1
 800c878:	0800c8d1 	.word	0x0800c8d1
 800c87c:	0800c8c1 	.word	0x0800c8c1
 800c880:	0800c8d1 	.word	0x0800c8d1
 800c884:	0800c8d1 	.word	0x0800c8d1
 800c888:	0800c8d1 	.word	0x0800c8d1
 800c88c:	0800c8d1 	.word	0x0800c8d1
 800c890:	0800c8d1 	.word	0x0800c8d1
 800c894:	0800c8d1 	.word	0x0800c8d1
 800c898:	0800c8d1 	.word	0x0800c8d1
 800c89c:	0800c8c9 	.word	0x0800c8c9
 800c8a0:	2301      	movs	r3, #1
 800c8a2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c8a6:	e222      	b.n	800ccee <UART_SetConfig+0x5a2>
 800c8a8:	2304      	movs	r3, #4
 800c8aa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c8ae:	e21e      	b.n	800ccee <UART_SetConfig+0x5a2>
 800c8b0:	2308      	movs	r3, #8
 800c8b2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c8b6:	e21a      	b.n	800ccee <UART_SetConfig+0x5a2>
 800c8b8:	2310      	movs	r3, #16
 800c8ba:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c8be:	e216      	b.n	800ccee <UART_SetConfig+0x5a2>
 800c8c0:	2320      	movs	r3, #32
 800c8c2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c8c6:	e212      	b.n	800ccee <UART_SetConfig+0x5a2>
 800c8c8:	2340      	movs	r3, #64	; 0x40
 800c8ca:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c8ce:	e20e      	b.n	800ccee <UART_SetConfig+0x5a2>
 800c8d0:	2380      	movs	r3, #128	; 0x80
 800c8d2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c8d6:	e20a      	b.n	800ccee <UART_SetConfig+0x5a2>
 800c8d8:	687b      	ldr	r3, [r7, #4]
 800c8da:	681b      	ldr	r3, [r3, #0]
 800c8dc:	4a6b      	ldr	r2, [pc, #428]	; (800ca8c <UART_SetConfig+0x340>)
 800c8de:	4293      	cmp	r3, r2
 800c8e0:	d130      	bne.n	800c944 <UART_SetConfig+0x1f8>
 800c8e2:	4b69      	ldr	r3, [pc, #420]	; (800ca88 <UART_SetConfig+0x33c>)
 800c8e4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c8e6:	f003 0307 	and.w	r3, r3, #7
 800c8ea:	2b05      	cmp	r3, #5
 800c8ec:	d826      	bhi.n	800c93c <UART_SetConfig+0x1f0>
 800c8ee:	a201      	add	r2, pc, #4	; (adr r2, 800c8f4 <UART_SetConfig+0x1a8>)
 800c8f0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c8f4:	0800c90d 	.word	0x0800c90d
 800c8f8:	0800c915 	.word	0x0800c915
 800c8fc:	0800c91d 	.word	0x0800c91d
 800c900:	0800c925 	.word	0x0800c925
 800c904:	0800c92d 	.word	0x0800c92d
 800c908:	0800c935 	.word	0x0800c935
 800c90c:	2300      	movs	r3, #0
 800c90e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c912:	e1ec      	b.n	800ccee <UART_SetConfig+0x5a2>
 800c914:	2304      	movs	r3, #4
 800c916:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c91a:	e1e8      	b.n	800ccee <UART_SetConfig+0x5a2>
 800c91c:	2308      	movs	r3, #8
 800c91e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c922:	e1e4      	b.n	800ccee <UART_SetConfig+0x5a2>
 800c924:	2310      	movs	r3, #16
 800c926:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c92a:	e1e0      	b.n	800ccee <UART_SetConfig+0x5a2>
 800c92c:	2320      	movs	r3, #32
 800c92e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c932:	e1dc      	b.n	800ccee <UART_SetConfig+0x5a2>
 800c934:	2340      	movs	r3, #64	; 0x40
 800c936:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c93a:	e1d8      	b.n	800ccee <UART_SetConfig+0x5a2>
 800c93c:	2380      	movs	r3, #128	; 0x80
 800c93e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c942:	e1d4      	b.n	800ccee <UART_SetConfig+0x5a2>
 800c944:	687b      	ldr	r3, [r7, #4]
 800c946:	681b      	ldr	r3, [r3, #0]
 800c948:	4a51      	ldr	r2, [pc, #324]	; (800ca90 <UART_SetConfig+0x344>)
 800c94a:	4293      	cmp	r3, r2
 800c94c:	d130      	bne.n	800c9b0 <UART_SetConfig+0x264>
 800c94e:	4b4e      	ldr	r3, [pc, #312]	; (800ca88 <UART_SetConfig+0x33c>)
 800c950:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c952:	f003 0307 	and.w	r3, r3, #7
 800c956:	2b05      	cmp	r3, #5
 800c958:	d826      	bhi.n	800c9a8 <UART_SetConfig+0x25c>
 800c95a:	a201      	add	r2, pc, #4	; (adr r2, 800c960 <UART_SetConfig+0x214>)
 800c95c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c960:	0800c979 	.word	0x0800c979
 800c964:	0800c981 	.word	0x0800c981
 800c968:	0800c989 	.word	0x0800c989
 800c96c:	0800c991 	.word	0x0800c991
 800c970:	0800c999 	.word	0x0800c999
 800c974:	0800c9a1 	.word	0x0800c9a1
 800c978:	2300      	movs	r3, #0
 800c97a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c97e:	e1b6      	b.n	800ccee <UART_SetConfig+0x5a2>
 800c980:	2304      	movs	r3, #4
 800c982:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c986:	e1b2      	b.n	800ccee <UART_SetConfig+0x5a2>
 800c988:	2308      	movs	r3, #8
 800c98a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c98e:	e1ae      	b.n	800ccee <UART_SetConfig+0x5a2>
 800c990:	2310      	movs	r3, #16
 800c992:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c996:	e1aa      	b.n	800ccee <UART_SetConfig+0x5a2>
 800c998:	2320      	movs	r3, #32
 800c99a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c99e:	e1a6      	b.n	800ccee <UART_SetConfig+0x5a2>
 800c9a0:	2340      	movs	r3, #64	; 0x40
 800c9a2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c9a6:	e1a2      	b.n	800ccee <UART_SetConfig+0x5a2>
 800c9a8:	2380      	movs	r3, #128	; 0x80
 800c9aa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c9ae:	e19e      	b.n	800ccee <UART_SetConfig+0x5a2>
 800c9b0:	687b      	ldr	r3, [r7, #4]
 800c9b2:	681b      	ldr	r3, [r3, #0]
 800c9b4:	4a37      	ldr	r2, [pc, #220]	; (800ca94 <UART_SetConfig+0x348>)
 800c9b6:	4293      	cmp	r3, r2
 800c9b8:	d130      	bne.n	800ca1c <UART_SetConfig+0x2d0>
 800c9ba:	4b33      	ldr	r3, [pc, #204]	; (800ca88 <UART_SetConfig+0x33c>)
 800c9bc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c9be:	f003 0307 	and.w	r3, r3, #7
 800c9c2:	2b05      	cmp	r3, #5
 800c9c4:	d826      	bhi.n	800ca14 <UART_SetConfig+0x2c8>
 800c9c6:	a201      	add	r2, pc, #4	; (adr r2, 800c9cc <UART_SetConfig+0x280>)
 800c9c8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c9cc:	0800c9e5 	.word	0x0800c9e5
 800c9d0:	0800c9ed 	.word	0x0800c9ed
 800c9d4:	0800c9f5 	.word	0x0800c9f5
 800c9d8:	0800c9fd 	.word	0x0800c9fd
 800c9dc:	0800ca05 	.word	0x0800ca05
 800c9e0:	0800ca0d 	.word	0x0800ca0d
 800c9e4:	2300      	movs	r3, #0
 800c9e6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c9ea:	e180      	b.n	800ccee <UART_SetConfig+0x5a2>
 800c9ec:	2304      	movs	r3, #4
 800c9ee:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c9f2:	e17c      	b.n	800ccee <UART_SetConfig+0x5a2>
 800c9f4:	2308      	movs	r3, #8
 800c9f6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c9fa:	e178      	b.n	800ccee <UART_SetConfig+0x5a2>
 800c9fc:	2310      	movs	r3, #16
 800c9fe:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ca02:	e174      	b.n	800ccee <UART_SetConfig+0x5a2>
 800ca04:	2320      	movs	r3, #32
 800ca06:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ca0a:	e170      	b.n	800ccee <UART_SetConfig+0x5a2>
 800ca0c:	2340      	movs	r3, #64	; 0x40
 800ca0e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ca12:	e16c      	b.n	800ccee <UART_SetConfig+0x5a2>
 800ca14:	2380      	movs	r3, #128	; 0x80
 800ca16:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ca1a:	e168      	b.n	800ccee <UART_SetConfig+0x5a2>
 800ca1c:	687b      	ldr	r3, [r7, #4]
 800ca1e:	681b      	ldr	r3, [r3, #0]
 800ca20:	4a1d      	ldr	r2, [pc, #116]	; (800ca98 <UART_SetConfig+0x34c>)
 800ca22:	4293      	cmp	r3, r2
 800ca24:	d142      	bne.n	800caac <UART_SetConfig+0x360>
 800ca26:	4b18      	ldr	r3, [pc, #96]	; (800ca88 <UART_SetConfig+0x33c>)
 800ca28:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ca2a:	f003 0307 	and.w	r3, r3, #7
 800ca2e:	2b05      	cmp	r3, #5
 800ca30:	d838      	bhi.n	800caa4 <UART_SetConfig+0x358>
 800ca32:	a201      	add	r2, pc, #4	; (adr r2, 800ca38 <UART_SetConfig+0x2ec>)
 800ca34:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ca38:	0800ca51 	.word	0x0800ca51
 800ca3c:	0800ca59 	.word	0x0800ca59
 800ca40:	0800ca61 	.word	0x0800ca61
 800ca44:	0800ca69 	.word	0x0800ca69
 800ca48:	0800ca71 	.word	0x0800ca71
 800ca4c:	0800ca9d 	.word	0x0800ca9d
 800ca50:	2300      	movs	r3, #0
 800ca52:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ca56:	e14a      	b.n	800ccee <UART_SetConfig+0x5a2>
 800ca58:	2304      	movs	r3, #4
 800ca5a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ca5e:	e146      	b.n	800ccee <UART_SetConfig+0x5a2>
 800ca60:	2308      	movs	r3, #8
 800ca62:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ca66:	e142      	b.n	800ccee <UART_SetConfig+0x5a2>
 800ca68:	2310      	movs	r3, #16
 800ca6a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ca6e:	e13e      	b.n	800ccee <UART_SetConfig+0x5a2>
 800ca70:	2320      	movs	r3, #32
 800ca72:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ca76:	e13a      	b.n	800ccee <UART_SetConfig+0x5a2>
 800ca78:	cfff69f3 	.word	0xcfff69f3
 800ca7c:	58000c00 	.word	0x58000c00
 800ca80:	11fff4ff 	.word	0x11fff4ff
 800ca84:	40011000 	.word	0x40011000
 800ca88:	58024400 	.word	0x58024400
 800ca8c:	40004400 	.word	0x40004400
 800ca90:	40004800 	.word	0x40004800
 800ca94:	40004c00 	.word	0x40004c00
 800ca98:	40005000 	.word	0x40005000
 800ca9c:	2340      	movs	r3, #64	; 0x40
 800ca9e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800caa2:	e124      	b.n	800ccee <UART_SetConfig+0x5a2>
 800caa4:	2380      	movs	r3, #128	; 0x80
 800caa6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800caaa:	e120      	b.n	800ccee <UART_SetConfig+0x5a2>
 800caac:	687b      	ldr	r3, [r7, #4]
 800caae:	681b      	ldr	r3, [r3, #0]
 800cab0:	4acc      	ldr	r2, [pc, #816]	; (800cde4 <UART_SetConfig+0x698>)
 800cab2:	4293      	cmp	r3, r2
 800cab4:	d176      	bne.n	800cba4 <UART_SetConfig+0x458>
 800cab6:	4bcc      	ldr	r3, [pc, #816]	; (800cde8 <UART_SetConfig+0x69c>)
 800cab8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800caba:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800cabe:	2b28      	cmp	r3, #40	; 0x28
 800cac0:	d86c      	bhi.n	800cb9c <UART_SetConfig+0x450>
 800cac2:	a201      	add	r2, pc, #4	; (adr r2, 800cac8 <UART_SetConfig+0x37c>)
 800cac4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cac8:	0800cb6d 	.word	0x0800cb6d
 800cacc:	0800cb9d 	.word	0x0800cb9d
 800cad0:	0800cb9d 	.word	0x0800cb9d
 800cad4:	0800cb9d 	.word	0x0800cb9d
 800cad8:	0800cb9d 	.word	0x0800cb9d
 800cadc:	0800cb9d 	.word	0x0800cb9d
 800cae0:	0800cb9d 	.word	0x0800cb9d
 800cae4:	0800cb9d 	.word	0x0800cb9d
 800cae8:	0800cb75 	.word	0x0800cb75
 800caec:	0800cb9d 	.word	0x0800cb9d
 800caf0:	0800cb9d 	.word	0x0800cb9d
 800caf4:	0800cb9d 	.word	0x0800cb9d
 800caf8:	0800cb9d 	.word	0x0800cb9d
 800cafc:	0800cb9d 	.word	0x0800cb9d
 800cb00:	0800cb9d 	.word	0x0800cb9d
 800cb04:	0800cb9d 	.word	0x0800cb9d
 800cb08:	0800cb7d 	.word	0x0800cb7d
 800cb0c:	0800cb9d 	.word	0x0800cb9d
 800cb10:	0800cb9d 	.word	0x0800cb9d
 800cb14:	0800cb9d 	.word	0x0800cb9d
 800cb18:	0800cb9d 	.word	0x0800cb9d
 800cb1c:	0800cb9d 	.word	0x0800cb9d
 800cb20:	0800cb9d 	.word	0x0800cb9d
 800cb24:	0800cb9d 	.word	0x0800cb9d
 800cb28:	0800cb85 	.word	0x0800cb85
 800cb2c:	0800cb9d 	.word	0x0800cb9d
 800cb30:	0800cb9d 	.word	0x0800cb9d
 800cb34:	0800cb9d 	.word	0x0800cb9d
 800cb38:	0800cb9d 	.word	0x0800cb9d
 800cb3c:	0800cb9d 	.word	0x0800cb9d
 800cb40:	0800cb9d 	.word	0x0800cb9d
 800cb44:	0800cb9d 	.word	0x0800cb9d
 800cb48:	0800cb8d 	.word	0x0800cb8d
 800cb4c:	0800cb9d 	.word	0x0800cb9d
 800cb50:	0800cb9d 	.word	0x0800cb9d
 800cb54:	0800cb9d 	.word	0x0800cb9d
 800cb58:	0800cb9d 	.word	0x0800cb9d
 800cb5c:	0800cb9d 	.word	0x0800cb9d
 800cb60:	0800cb9d 	.word	0x0800cb9d
 800cb64:	0800cb9d 	.word	0x0800cb9d
 800cb68:	0800cb95 	.word	0x0800cb95
 800cb6c:	2301      	movs	r3, #1
 800cb6e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800cb72:	e0bc      	b.n	800ccee <UART_SetConfig+0x5a2>
 800cb74:	2304      	movs	r3, #4
 800cb76:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800cb7a:	e0b8      	b.n	800ccee <UART_SetConfig+0x5a2>
 800cb7c:	2308      	movs	r3, #8
 800cb7e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800cb82:	e0b4      	b.n	800ccee <UART_SetConfig+0x5a2>
 800cb84:	2310      	movs	r3, #16
 800cb86:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800cb8a:	e0b0      	b.n	800ccee <UART_SetConfig+0x5a2>
 800cb8c:	2320      	movs	r3, #32
 800cb8e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800cb92:	e0ac      	b.n	800ccee <UART_SetConfig+0x5a2>
 800cb94:	2340      	movs	r3, #64	; 0x40
 800cb96:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800cb9a:	e0a8      	b.n	800ccee <UART_SetConfig+0x5a2>
 800cb9c:	2380      	movs	r3, #128	; 0x80
 800cb9e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800cba2:	e0a4      	b.n	800ccee <UART_SetConfig+0x5a2>
 800cba4:	687b      	ldr	r3, [r7, #4]
 800cba6:	681b      	ldr	r3, [r3, #0]
 800cba8:	4a90      	ldr	r2, [pc, #576]	; (800cdec <UART_SetConfig+0x6a0>)
 800cbaa:	4293      	cmp	r3, r2
 800cbac:	d130      	bne.n	800cc10 <UART_SetConfig+0x4c4>
 800cbae:	4b8e      	ldr	r3, [pc, #568]	; (800cde8 <UART_SetConfig+0x69c>)
 800cbb0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800cbb2:	f003 0307 	and.w	r3, r3, #7
 800cbb6:	2b05      	cmp	r3, #5
 800cbb8:	d826      	bhi.n	800cc08 <UART_SetConfig+0x4bc>
 800cbba:	a201      	add	r2, pc, #4	; (adr r2, 800cbc0 <UART_SetConfig+0x474>)
 800cbbc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cbc0:	0800cbd9 	.word	0x0800cbd9
 800cbc4:	0800cbe1 	.word	0x0800cbe1
 800cbc8:	0800cbe9 	.word	0x0800cbe9
 800cbcc:	0800cbf1 	.word	0x0800cbf1
 800cbd0:	0800cbf9 	.word	0x0800cbf9
 800cbd4:	0800cc01 	.word	0x0800cc01
 800cbd8:	2300      	movs	r3, #0
 800cbda:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800cbde:	e086      	b.n	800ccee <UART_SetConfig+0x5a2>
 800cbe0:	2304      	movs	r3, #4
 800cbe2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800cbe6:	e082      	b.n	800ccee <UART_SetConfig+0x5a2>
 800cbe8:	2308      	movs	r3, #8
 800cbea:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800cbee:	e07e      	b.n	800ccee <UART_SetConfig+0x5a2>
 800cbf0:	2310      	movs	r3, #16
 800cbf2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800cbf6:	e07a      	b.n	800ccee <UART_SetConfig+0x5a2>
 800cbf8:	2320      	movs	r3, #32
 800cbfa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800cbfe:	e076      	b.n	800ccee <UART_SetConfig+0x5a2>
 800cc00:	2340      	movs	r3, #64	; 0x40
 800cc02:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800cc06:	e072      	b.n	800ccee <UART_SetConfig+0x5a2>
 800cc08:	2380      	movs	r3, #128	; 0x80
 800cc0a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800cc0e:	e06e      	b.n	800ccee <UART_SetConfig+0x5a2>
 800cc10:	687b      	ldr	r3, [r7, #4]
 800cc12:	681b      	ldr	r3, [r3, #0]
 800cc14:	4a76      	ldr	r2, [pc, #472]	; (800cdf0 <UART_SetConfig+0x6a4>)
 800cc16:	4293      	cmp	r3, r2
 800cc18:	d130      	bne.n	800cc7c <UART_SetConfig+0x530>
 800cc1a:	4b73      	ldr	r3, [pc, #460]	; (800cde8 <UART_SetConfig+0x69c>)
 800cc1c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800cc1e:	f003 0307 	and.w	r3, r3, #7
 800cc22:	2b05      	cmp	r3, #5
 800cc24:	d826      	bhi.n	800cc74 <UART_SetConfig+0x528>
 800cc26:	a201      	add	r2, pc, #4	; (adr r2, 800cc2c <UART_SetConfig+0x4e0>)
 800cc28:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cc2c:	0800cc45 	.word	0x0800cc45
 800cc30:	0800cc4d 	.word	0x0800cc4d
 800cc34:	0800cc55 	.word	0x0800cc55
 800cc38:	0800cc5d 	.word	0x0800cc5d
 800cc3c:	0800cc65 	.word	0x0800cc65
 800cc40:	0800cc6d 	.word	0x0800cc6d
 800cc44:	2300      	movs	r3, #0
 800cc46:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800cc4a:	e050      	b.n	800ccee <UART_SetConfig+0x5a2>
 800cc4c:	2304      	movs	r3, #4
 800cc4e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800cc52:	e04c      	b.n	800ccee <UART_SetConfig+0x5a2>
 800cc54:	2308      	movs	r3, #8
 800cc56:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800cc5a:	e048      	b.n	800ccee <UART_SetConfig+0x5a2>
 800cc5c:	2310      	movs	r3, #16
 800cc5e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800cc62:	e044      	b.n	800ccee <UART_SetConfig+0x5a2>
 800cc64:	2320      	movs	r3, #32
 800cc66:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800cc6a:	e040      	b.n	800ccee <UART_SetConfig+0x5a2>
 800cc6c:	2340      	movs	r3, #64	; 0x40
 800cc6e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800cc72:	e03c      	b.n	800ccee <UART_SetConfig+0x5a2>
 800cc74:	2380      	movs	r3, #128	; 0x80
 800cc76:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800cc7a:	e038      	b.n	800ccee <UART_SetConfig+0x5a2>
 800cc7c:	687b      	ldr	r3, [r7, #4]
 800cc7e:	681b      	ldr	r3, [r3, #0]
 800cc80:	4a5c      	ldr	r2, [pc, #368]	; (800cdf4 <UART_SetConfig+0x6a8>)
 800cc82:	4293      	cmp	r3, r2
 800cc84:	d130      	bne.n	800cce8 <UART_SetConfig+0x59c>
 800cc86:	4b58      	ldr	r3, [pc, #352]	; (800cde8 <UART_SetConfig+0x69c>)
 800cc88:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800cc8a:	f003 0307 	and.w	r3, r3, #7
 800cc8e:	2b05      	cmp	r3, #5
 800cc90:	d826      	bhi.n	800cce0 <UART_SetConfig+0x594>
 800cc92:	a201      	add	r2, pc, #4	; (adr r2, 800cc98 <UART_SetConfig+0x54c>)
 800cc94:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cc98:	0800ccb1 	.word	0x0800ccb1
 800cc9c:	0800ccb9 	.word	0x0800ccb9
 800cca0:	0800ccc1 	.word	0x0800ccc1
 800cca4:	0800ccc9 	.word	0x0800ccc9
 800cca8:	0800ccd1 	.word	0x0800ccd1
 800ccac:	0800ccd9 	.word	0x0800ccd9
 800ccb0:	2302      	movs	r3, #2
 800ccb2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ccb6:	e01a      	b.n	800ccee <UART_SetConfig+0x5a2>
 800ccb8:	2304      	movs	r3, #4
 800ccba:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ccbe:	e016      	b.n	800ccee <UART_SetConfig+0x5a2>
 800ccc0:	2308      	movs	r3, #8
 800ccc2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ccc6:	e012      	b.n	800ccee <UART_SetConfig+0x5a2>
 800ccc8:	2310      	movs	r3, #16
 800ccca:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ccce:	e00e      	b.n	800ccee <UART_SetConfig+0x5a2>
 800ccd0:	2320      	movs	r3, #32
 800ccd2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ccd6:	e00a      	b.n	800ccee <UART_SetConfig+0x5a2>
 800ccd8:	2340      	movs	r3, #64	; 0x40
 800ccda:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ccde:	e006      	b.n	800ccee <UART_SetConfig+0x5a2>
 800cce0:	2380      	movs	r3, #128	; 0x80
 800cce2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800cce6:	e002      	b.n	800ccee <UART_SetConfig+0x5a2>
 800cce8:	2380      	movs	r3, #128	; 0x80
 800ccea:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800ccee:	687b      	ldr	r3, [r7, #4]
 800ccf0:	681b      	ldr	r3, [r3, #0]
 800ccf2:	4a40      	ldr	r2, [pc, #256]	; (800cdf4 <UART_SetConfig+0x6a8>)
 800ccf4:	4293      	cmp	r3, r2
 800ccf6:	f040 80ef 	bne.w	800ced8 <UART_SetConfig+0x78c>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800ccfa:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800ccfe:	2b20      	cmp	r3, #32
 800cd00:	dc46      	bgt.n	800cd90 <UART_SetConfig+0x644>
 800cd02:	2b02      	cmp	r3, #2
 800cd04:	f2c0 8081 	blt.w	800ce0a <UART_SetConfig+0x6be>
 800cd08:	3b02      	subs	r3, #2
 800cd0a:	2b1e      	cmp	r3, #30
 800cd0c:	d87d      	bhi.n	800ce0a <UART_SetConfig+0x6be>
 800cd0e:	a201      	add	r2, pc, #4	; (adr r2, 800cd14 <UART_SetConfig+0x5c8>)
 800cd10:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cd14:	0800cd97 	.word	0x0800cd97
 800cd18:	0800ce0b 	.word	0x0800ce0b
 800cd1c:	0800cd9f 	.word	0x0800cd9f
 800cd20:	0800ce0b 	.word	0x0800ce0b
 800cd24:	0800ce0b 	.word	0x0800ce0b
 800cd28:	0800ce0b 	.word	0x0800ce0b
 800cd2c:	0800cdaf 	.word	0x0800cdaf
 800cd30:	0800ce0b 	.word	0x0800ce0b
 800cd34:	0800ce0b 	.word	0x0800ce0b
 800cd38:	0800ce0b 	.word	0x0800ce0b
 800cd3c:	0800ce0b 	.word	0x0800ce0b
 800cd40:	0800ce0b 	.word	0x0800ce0b
 800cd44:	0800ce0b 	.word	0x0800ce0b
 800cd48:	0800ce0b 	.word	0x0800ce0b
 800cd4c:	0800cdbf 	.word	0x0800cdbf
 800cd50:	0800ce0b 	.word	0x0800ce0b
 800cd54:	0800ce0b 	.word	0x0800ce0b
 800cd58:	0800ce0b 	.word	0x0800ce0b
 800cd5c:	0800ce0b 	.word	0x0800ce0b
 800cd60:	0800ce0b 	.word	0x0800ce0b
 800cd64:	0800ce0b 	.word	0x0800ce0b
 800cd68:	0800ce0b 	.word	0x0800ce0b
 800cd6c:	0800ce0b 	.word	0x0800ce0b
 800cd70:	0800ce0b 	.word	0x0800ce0b
 800cd74:	0800ce0b 	.word	0x0800ce0b
 800cd78:	0800ce0b 	.word	0x0800ce0b
 800cd7c:	0800ce0b 	.word	0x0800ce0b
 800cd80:	0800ce0b 	.word	0x0800ce0b
 800cd84:	0800ce0b 	.word	0x0800ce0b
 800cd88:	0800ce0b 	.word	0x0800ce0b
 800cd8c:	0800cdfd 	.word	0x0800cdfd
 800cd90:	2b40      	cmp	r3, #64	; 0x40
 800cd92:	d036      	beq.n	800ce02 <UART_SetConfig+0x6b6>
 800cd94:	e039      	b.n	800ce0a <UART_SetConfig+0x6be>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 800cd96:	f7fc fb85 	bl	80094a4 <HAL_RCCEx_GetD3PCLK1Freq>
 800cd9a:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 800cd9c:	e03b      	b.n	800ce16 <UART_SetConfig+0x6ca>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800cd9e:	f107 0314 	add.w	r3, r7, #20
 800cda2:	4618      	mov	r0, r3
 800cda4:	f7fc fb94 	bl	80094d0 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800cda8:	69bb      	ldr	r3, [r7, #24]
 800cdaa:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800cdac:	e033      	b.n	800ce16 <UART_SetConfig+0x6ca>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800cdae:	f107 0308 	add.w	r3, r7, #8
 800cdb2:	4618      	mov	r0, r3
 800cdb4:	f7fc fce0 	bl	8009778 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800cdb8:	68fb      	ldr	r3, [r7, #12]
 800cdba:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800cdbc:	e02b      	b.n	800ce16 <UART_SetConfig+0x6ca>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800cdbe:	4b0a      	ldr	r3, [pc, #40]	; (800cde8 <UART_SetConfig+0x69c>)
 800cdc0:	681b      	ldr	r3, [r3, #0]
 800cdc2:	f003 0320 	and.w	r3, r3, #32
 800cdc6:	2b00      	cmp	r3, #0
 800cdc8:	d009      	beq.n	800cdde <UART_SetConfig+0x692>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800cdca:	4b07      	ldr	r3, [pc, #28]	; (800cde8 <UART_SetConfig+0x69c>)
 800cdcc:	681b      	ldr	r3, [r3, #0]
 800cdce:	08db      	lsrs	r3, r3, #3
 800cdd0:	f003 0303 	and.w	r3, r3, #3
 800cdd4:	4a08      	ldr	r2, [pc, #32]	; (800cdf8 <UART_SetConfig+0x6ac>)
 800cdd6:	fa22 f303 	lsr.w	r3, r2, r3
 800cdda:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800cddc:	e01b      	b.n	800ce16 <UART_SetConfig+0x6ca>
          pclk = (uint32_t) HSI_VALUE;
 800cdde:	4b06      	ldr	r3, [pc, #24]	; (800cdf8 <UART_SetConfig+0x6ac>)
 800cde0:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800cde2:	e018      	b.n	800ce16 <UART_SetConfig+0x6ca>
 800cde4:	40011400 	.word	0x40011400
 800cde8:	58024400 	.word	0x58024400
 800cdec:	40007800 	.word	0x40007800
 800cdf0:	40007c00 	.word	0x40007c00
 800cdf4:	58000c00 	.word	0x58000c00
 800cdf8:	03d09000 	.word	0x03d09000
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800cdfc:	4bc4      	ldr	r3, [pc, #784]	; (800d110 <UART_SetConfig+0x9c4>)
 800cdfe:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800ce00:	e009      	b.n	800ce16 <UART_SetConfig+0x6ca>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800ce02:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800ce06:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800ce08:	e005      	b.n	800ce16 <UART_SetConfig+0x6ca>
      default:
        pclk = 0U;
 800ce0a:	2300      	movs	r3, #0
 800ce0c:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 800ce0e:	2301      	movs	r3, #1
 800ce10:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 800ce14:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800ce16:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ce18:	2b00      	cmp	r3, #0
 800ce1a:	f000 81da 	beq.w	800d1d2 <UART_SetConfig+0xa86>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800ce1e:	687b      	ldr	r3, [r7, #4]
 800ce20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ce22:	4abc      	ldr	r2, [pc, #752]	; (800d114 <UART_SetConfig+0x9c8>)
 800ce24:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800ce28:	461a      	mov	r2, r3
 800ce2a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ce2c:	fbb3 f3f2 	udiv	r3, r3, r2
 800ce30:	623b      	str	r3, [r7, #32]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800ce32:	687b      	ldr	r3, [r7, #4]
 800ce34:	685a      	ldr	r2, [r3, #4]
 800ce36:	4613      	mov	r3, r2
 800ce38:	005b      	lsls	r3, r3, #1
 800ce3a:	4413      	add	r3, r2
 800ce3c:	6a3a      	ldr	r2, [r7, #32]
 800ce3e:	429a      	cmp	r2, r3
 800ce40:	d305      	bcc.n	800ce4e <UART_SetConfig+0x702>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800ce42:	687b      	ldr	r3, [r7, #4]
 800ce44:	685b      	ldr	r3, [r3, #4]
 800ce46:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800ce48:	6a3a      	ldr	r2, [r7, #32]
 800ce4a:	429a      	cmp	r2, r3
 800ce4c:	d903      	bls.n	800ce56 <UART_SetConfig+0x70a>
      {
        ret = HAL_ERROR;
 800ce4e:	2301      	movs	r3, #1
 800ce50:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 800ce54:	e1bd      	b.n	800d1d2 <UART_SetConfig+0xa86>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800ce56:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ce58:	4618      	mov	r0, r3
 800ce5a:	f04f 0100 	mov.w	r1, #0
 800ce5e:	687b      	ldr	r3, [r7, #4]
 800ce60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ce62:	4aac      	ldr	r2, [pc, #688]	; (800d114 <UART_SetConfig+0x9c8>)
 800ce64:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800ce68:	b29a      	uxth	r2, r3
 800ce6a:	f04f 0300 	mov.w	r3, #0
 800ce6e:	f7f3 fa8f 	bl	8000390 <__aeabi_uldivmod>
 800ce72:	4602      	mov	r2, r0
 800ce74:	460b      	mov	r3, r1
 800ce76:	4610      	mov	r0, r2
 800ce78:	4619      	mov	r1, r3
 800ce7a:	f04f 0200 	mov.w	r2, #0
 800ce7e:	f04f 0300 	mov.w	r3, #0
 800ce82:	020b      	lsls	r3, r1, #8
 800ce84:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800ce88:	0202      	lsls	r2, r0, #8
 800ce8a:	6879      	ldr	r1, [r7, #4]
 800ce8c:	6849      	ldr	r1, [r1, #4]
 800ce8e:	0849      	lsrs	r1, r1, #1
 800ce90:	4608      	mov	r0, r1
 800ce92:	f04f 0100 	mov.w	r1, #0
 800ce96:	1814      	adds	r4, r2, r0
 800ce98:	eb43 0501 	adc.w	r5, r3, r1
 800ce9c:	687b      	ldr	r3, [r7, #4]
 800ce9e:	685b      	ldr	r3, [r3, #4]
 800cea0:	461a      	mov	r2, r3
 800cea2:	f04f 0300 	mov.w	r3, #0
 800cea6:	4620      	mov	r0, r4
 800cea8:	4629      	mov	r1, r5
 800ceaa:	f7f3 fa71 	bl	8000390 <__aeabi_uldivmod>
 800ceae:	4602      	mov	r2, r0
 800ceb0:	460b      	mov	r3, r1
 800ceb2:	4613      	mov	r3, r2
 800ceb4:	62bb      	str	r3, [r7, #40]	; 0x28
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800ceb6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ceb8:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800cebc:	d308      	bcc.n	800ced0 <UART_SetConfig+0x784>
 800cebe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cec0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800cec4:	d204      	bcs.n	800ced0 <UART_SetConfig+0x784>
        {
          huart->Instance->BRR = usartdiv;
 800cec6:	687b      	ldr	r3, [r7, #4]
 800cec8:	681b      	ldr	r3, [r3, #0]
 800ceca:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800cecc:	60da      	str	r2, [r3, #12]
 800cece:	e180      	b.n	800d1d2 <UART_SetConfig+0xa86>
        }
        else
        {
          ret = HAL_ERROR;
 800ced0:	2301      	movs	r3, #1
 800ced2:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 800ced6:	e17c      	b.n	800d1d2 <UART_SetConfig+0xa86>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800ced8:	687b      	ldr	r3, [r7, #4]
 800ceda:	69db      	ldr	r3, [r3, #28]
 800cedc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800cee0:	f040 80bf 	bne.w	800d062 <UART_SetConfig+0x916>
  {
    switch (clocksource)
 800cee4:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800cee8:	2b20      	cmp	r3, #32
 800ceea:	dc49      	bgt.n	800cf80 <UART_SetConfig+0x834>
 800ceec:	2b00      	cmp	r3, #0
 800ceee:	db7c      	blt.n	800cfea <UART_SetConfig+0x89e>
 800cef0:	2b20      	cmp	r3, #32
 800cef2:	d87a      	bhi.n	800cfea <UART_SetConfig+0x89e>
 800cef4:	a201      	add	r2, pc, #4	; (adr r2, 800cefc <UART_SetConfig+0x7b0>)
 800cef6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cefa:	bf00      	nop
 800cefc:	0800cf87 	.word	0x0800cf87
 800cf00:	0800cf8f 	.word	0x0800cf8f
 800cf04:	0800cfeb 	.word	0x0800cfeb
 800cf08:	0800cfeb 	.word	0x0800cfeb
 800cf0c:	0800cf97 	.word	0x0800cf97
 800cf10:	0800cfeb 	.word	0x0800cfeb
 800cf14:	0800cfeb 	.word	0x0800cfeb
 800cf18:	0800cfeb 	.word	0x0800cfeb
 800cf1c:	0800cfa7 	.word	0x0800cfa7
 800cf20:	0800cfeb 	.word	0x0800cfeb
 800cf24:	0800cfeb 	.word	0x0800cfeb
 800cf28:	0800cfeb 	.word	0x0800cfeb
 800cf2c:	0800cfeb 	.word	0x0800cfeb
 800cf30:	0800cfeb 	.word	0x0800cfeb
 800cf34:	0800cfeb 	.word	0x0800cfeb
 800cf38:	0800cfeb 	.word	0x0800cfeb
 800cf3c:	0800cfb7 	.word	0x0800cfb7
 800cf40:	0800cfeb 	.word	0x0800cfeb
 800cf44:	0800cfeb 	.word	0x0800cfeb
 800cf48:	0800cfeb 	.word	0x0800cfeb
 800cf4c:	0800cfeb 	.word	0x0800cfeb
 800cf50:	0800cfeb 	.word	0x0800cfeb
 800cf54:	0800cfeb 	.word	0x0800cfeb
 800cf58:	0800cfeb 	.word	0x0800cfeb
 800cf5c:	0800cfeb 	.word	0x0800cfeb
 800cf60:	0800cfeb 	.word	0x0800cfeb
 800cf64:	0800cfeb 	.word	0x0800cfeb
 800cf68:	0800cfeb 	.word	0x0800cfeb
 800cf6c:	0800cfeb 	.word	0x0800cfeb
 800cf70:	0800cfeb 	.word	0x0800cfeb
 800cf74:	0800cfeb 	.word	0x0800cfeb
 800cf78:	0800cfeb 	.word	0x0800cfeb
 800cf7c:	0800cfdd 	.word	0x0800cfdd
 800cf80:	2b40      	cmp	r3, #64	; 0x40
 800cf82:	d02e      	beq.n	800cfe2 <UART_SetConfig+0x896>
 800cf84:	e031      	b.n	800cfea <UART_SetConfig+0x89e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800cf86:	f7fa fe4f 	bl	8007c28 <HAL_RCC_GetPCLK1Freq>
 800cf8a:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 800cf8c:	e033      	b.n	800cff6 <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800cf8e:	f7fa fe61 	bl	8007c54 <HAL_RCC_GetPCLK2Freq>
 800cf92:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 800cf94:	e02f      	b.n	800cff6 <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800cf96:	f107 0314 	add.w	r3, r7, #20
 800cf9a:	4618      	mov	r0, r3
 800cf9c:	f7fc fa98 	bl	80094d0 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800cfa0:	69bb      	ldr	r3, [r7, #24]
 800cfa2:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800cfa4:	e027      	b.n	800cff6 <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800cfa6:	f107 0308 	add.w	r3, r7, #8
 800cfaa:	4618      	mov	r0, r3
 800cfac:	f7fc fbe4 	bl	8009778 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800cfb0:	68fb      	ldr	r3, [r7, #12]
 800cfb2:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800cfb4:	e01f      	b.n	800cff6 <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800cfb6:	4b58      	ldr	r3, [pc, #352]	; (800d118 <UART_SetConfig+0x9cc>)
 800cfb8:	681b      	ldr	r3, [r3, #0]
 800cfba:	f003 0320 	and.w	r3, r3, #32
 800cfbe:	2b00      	cmp	r3, #0
 800cfc0:	d009      	beq.n	800cfd6 <UART_SetConfig+0x88a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800cfc2:	4b55      	ldr	r3, [pc, #340]	; (800d118 <UART_SetConfig+0x9cc>)
 800cfc4:	681b      	ldr	r3, [r3, #0]
 800cfc6:	08db      	lsrs	r3, r3, #3
 800cfc8:	f003 0303 	and.w	r3, r3, #3
 800cfcc:	4a53      	ldr	r2, [pc, #332]	; (800d11c <UART_SetConfig+0x9d0>)
 800cfce:	fa22 f303 	lsr.w	r3, r2, r3
 800cfd2:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800cfd4:	e00f      	b.n	800cff6 <UART_SetConfig+0x8aa>
          pclk = (uint32_t) HSI_VALUE;
 800cfd6:	4b51      	ldr	r3, [pc, #324]	; (800d11c <UART_SetConfig+0x9d0>)
 800cfd8:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800cfda:	e00c      	b.n	800cff6 <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800cfdc:	4b4c      	ldr	r3, [pc, #304]	; (800d110 <UART_SetConfig+0x9c4>)
 800cfde:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800cfe0:	e009      	b.n	800cff6 <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800cfe2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800cfe6:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800cfe8:	e005      	b.n	800cff6 <UART_SetConfig+0x8aa>
      default:
        pclk = 0U;
 800cfea:	2300      	movs	r3, #0
 800cfec:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 800cfee:	2301      	movs	r3, #1
 800cff0:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 800cff4:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800cff6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cff8:	2b00      	cmp	r3, #0
 800cffa:	f000 80ea 	beq.w	800d1d2 <UART_SetConfig+0xa86>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800cffe:	687b      	ldr	r3, [r7, #4]
 800d000:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d002:	4a44      	ldr	r2, [pc, #272]	; (800d114 <UART_SetConfig+0x9c8>)
 800d004:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800d008:	461a      	mov	r2, r3
 800d00a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d00c:	fbb3 f3f2 	udiv	r3, r3, r2
 800d010:	005a      	lsls	r2, r3, #1
 800d012:	687b      	ldr	r3, [r7, #4]
 800d014:	685b      	ldr	r3, [r3, #4]
 800d016:	085b      	lsrs	r3, r3, #1
 800d018:	441a      	add	r2, r3
 800d01a:	687b      	ldr	r3, [r7, #4]
 800d01c:	685b      	ldr	r3, [r3, #4]
 800d01e:	fbb2 f3f3 	udiv	r3, r2, r3
 800d022:	b29b      	uxth	r3, r3
 800d024:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800d026:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d028:	2b0f      	cmp	r3, #15
 800d02a:	d916      	bls.n	800d05a <UART_SetConfig+0x90e>
 800d02c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d02e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800d032:	d212      	bcs.n	800d05a <UART_SetConfig+0x90e>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800d034:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d036:	b29b      	uxth	r3, r3
 800d038:	f023 030f 	bic.w	r3, r3, #15
 800d03c:	84fb      	strh	r3, [r7, #38]	; 0x26
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800d03e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d040:	085b      	lsrs	r3, r3, #1
 800d042:	b29b      	uxth	r3, r3
 800d044:	f003 0307 	and.w	r3, r3, #7
 800d048:	b29a      	uxth	r2, r3
 800d04a:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800d04c:	4313      	orrs	r3, r2
 800d04e:	84fb      	strh	r3, [r7, #38]	; 0x26
        huart->Instance->BRR = brrtemp;
 800d050:	687b      	ldr	r3, [r7, #4]
 800d052:	681b      	ldr	r3, [r3, #0]
 800d054:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 800d056:	60da      	str	r2, [r3, #12]
 800d058:	e0bb      	b.n	800d1d2 <UART_SetConfig+0xa86>
      }
      else
      {
        ret = HAL_ERROR;
 800d05a:	2301      	movs	r3, #1
 800d05c:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 800d060:	e0b7      	b.n	800d1d2 <UART_SetConfig+0xa86>
      }
    }
  }
  else
  {
    switch (clocksource)
 800d062:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800d066:	2b20      	cmp	r3, #32
 800d068:	dc4a      	bgt.n	800d100 <UART_SetConfig+0x9b4>
 800d06a:	2b00      	cmp	r3, #0
 800d06c:	f2c0 8086 	blt.w	800d17c <UART_SetConfig+0xa30>
 800d070:	2b20      	cmp	r3, #32
 800d072:	f200 8083 	bhi.w	800d17c <UART_SetConfig+0xa30>
 800d076:	a201      	add	r2, pc, #4	; (adr r2, 800d07c <UART_SetConfig+0x930>)
 800d078:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d07c:	0800d107 	.word	0x0800d107
 800d080:	0800d121 	.word	0x0800d121
 800d084:	0800d17d 	.word	0x0800d17d
 800d088:	0800d17d 	.word	0x0800d17d
 800d08c:	0800d129 	.word	0x0800d129
 800d090:	0800d17d 	.word	0x0800d17d
 800d094:	0800d17d 	.word	0x0800d17d
 800d098:	0800d17d 	.word	0x0800d17d
 800d09c:	0800d139 	.word	0x0800d139
 800d0a0:	0800d17d 	.word	0x0800d17d
 800d0a4:	0800d17d 	.word	0x0800d17d
 800d0a8:	0800d17d 	.word	0x0800d17d
 800d0ac:	0800d17d 	.word	0x0800d17d
 800d0b0:	0800d17d 	.word	0x0800d17d
 800d0b4:	0800d17d 	.word	0x0800d17d
 800d0b8:	0800d17d 	.word	0x0800d17d
 800d0bc:	0800d149 	.word	0x0800d149
 800d0c0:	0800d17d 	.word	0x0800d17d
 800d0c4:	0800d17d 	.word	0x0800d17d
 800d0c8:	0800d17d 	.word	0x0800d17d
 800d0cc:	0800d17d 	.word	0x0800d17d
 800d0d0:	0800d17d 	.word	0x0800d17d
 800d0d4:	0800d17d 	.word	0x0800d17d
 800d0d8:	0800d17d 	.word	0x0800d17d
 800d0dc:	0800d17d 	.word	0x0800d17d
 800d0e0:	0800d17d 	.word	0x0800d17d
 800d0e4:	0800d17d 	.word	0x0800d17d
 800d0e8:	0800d17d 	.word	0x0800d17d
 800d0ec:	0800d17d 	.word	0x0800d17d
 800d0f0:	0800d17d 	.word	0x0800d17d
 800d0f4:	0800d17d 	.word	0x0800d17d
 800d0f8:	0800d17d 	.word	0x0800d17d
 800d0fc:	0800d16f 	.word	0x0800d16f
 800d100:	2b40      	cmp	r3, #64	; 0x40
 800d102:	d037      	beq.n	800d174 <UART_SetConfig+0xa28>
 800d104:	e03a      	b.n	800d17c <UART_SetConfig+0xa30>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800d106:	f7fa fd8f 	bl	8007c28 <HAL_RCC_GetPCLK1Freq>
 800d10a:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 800d10c:	e03c      	b.n	800d188 <UART_SetConfig+0xa3c>
 800d10e:	bf00      	nop
 800d110:	003d0900 	.word	0x003d0900
 800d114:	080166f8 	.word	0x080166f8
 800d118:	58024400 	.word	0x58024400
 800d11c:	03d09000 	.word	0x03d09000
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800d120:	f7fa fd98 	bl	8007c54 <HAL_RCC_GetPCLK2Freq>
 800d124:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 800d126:	e02f      	b.n	800d188 <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800d128:	f107 0314 	add.w	r3, r7, #20
 800d12c:	4618      	mov	r0, r3
 800d12e:	f7fc f9cf 	bl	80094d0 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800d132:	69bb      	ldr	r3, [r7, #24]
 800d134:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800d136:	e027      	b.n	800d188 <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800d138:	f107 0308 	add.w	r3, r7, #8
 800d13c:	4618      	mov	r0, r3
 800d13e:	f7fc fb1b 	bl	8009778 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800d142:	68fb      	ldr	r3, [r7, #12]
 800d144:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800d146:	e01f      	b.n	800d188 <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800d148:	4b2c      	ldr	r3, [pc, #176]	; (800d1fc <UART_SetConfig+0xab0>)
 800d14a:	681b      	ldr	r3, [r3, #0]
 800d14c:	f003 0320 	and.w	r3, r3, #32
 800d150:	2b00      	cmp	r3, #0
 800d152:	d009      	beq.n	800d168 <UART_SetConfig+0xa1c>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800d154:	4b29      	ldr	r3, [pc, #164]	; (800d1fc <UART_SetConfig+0xab0>)
 800d156:	681b      	ldr	r3, [r3, #0]
 800d158:	08db      	lsrs	r3, r3, #3
 800d15a:	f003 0303 	and.w	r3, r3, #3
 800d15e:	4a28      	ldr	r2, [pc, #160]	; (800d200 <UART_SetConfig+0xab4>)
 800d160:	fa22 f303 	lsr.w	r3, r2, r3
 800d164:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800d166:	e00f      	b.n	800d188 <UART_SetConfig+0xa3c>
          pclk = (uint32_t) HSI_VALUE;
 800d168:	4b25      	ldr	r3, [pc, #148]	; (800d200 <UART_SetConfig+0xab4>)
 800d16a:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800d16c:	e00c      	b.n	800d188 <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800d16e:	4b25      	ldr	r3, [pc, #148]	; (800d204 <UART_SetConfig+0xab8>)
 800d170:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800d172:	e009      	b.n	800d188 <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800d174:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800d178:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800d17a:	e005      	b.n	800d188 <UART_SetConfig+0xa3c>
      default:
        pclk = 0U;
 800d17c:	2300      	movs	r3, #0
 800d17e:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 800d180:	2301      	movs	r3, #1
 800d182:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 800d186:	bf00      	nop
    }

    if (pclk != 0U)
 800d188:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d18a:	2b00      	cmp	r3, #0
 800d18c:	d021      	beq.n	800d1d2 <UART_SetConfig+0xa86>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800d18e:	687b      	ldr	r3, [r7, #4]
 800d190:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d192:	4a1d      	ldr	r2, [pc, #116]	; (800d208 <UART_SetConfig+0xabc>)
 800d194:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800d198:	461a      	mov	r2, r3
 800d19a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d19c:	fbb3 f2f2 	udiv	r2, r3, r2
 800d1a0:	687b      	ldr	r3, [r7, #4]
 800d1a2:	685b      	ldr	r3, [r3, #4]
 800d1a4:	085b      	lsrs	r3, r3, #1
 800d1a6:	441a      	add	r2, r3
 800d1a8:	687b      	ldr	r3, [r7, #4]
 800d1aa:	685b      	ldr	r3, [r3, #4]
 800d1ac:	fbb2 f3f3 	udiv	r3, r2, r3
 800d1b0:	b29b      	uxth	r3, r3
 800d1b2:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800d1b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d1b6:	2b0f      	cmp	r3, #15
 800d1b8:	d908      	bls.n	800d1cc <UART_SetConfig+0xa80>
 800d1ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d1bc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800d1c0:	d204      	bcs.n	800d1cc <UART_SetConfig+0xa80>
      {
        huart->Instance->BRR = usartdiv;
 800d1c2:	687b      	ldr	r3, [r7, #4]
 800d1c4:	681b      	ldr	r3, [r3, #0]
 800d1c6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800d1c8:	60da      	str	r2, [r3, #12]
 800d1ca:	e002      	b.n	800d1d2 <UART_SetConfig+0xa86>
      }
      else
      {
        ret = HAL_ERROR;
 800d1cc:	2301      	movs	r3, #1
 800d1ce:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800d1d2:	687b      	ldr	r3, [r7, #4]
 800d1d4:	2201      	movs	r2, #1
 800d1d6:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 800d1da:	687b      	ldr	r3, [r7, #4]
 800d1dc:	2201      	movs	r2, #1
 800d1de:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800d1e2:	687b      	ldr	r3, [r7, #4]
 800d1e4:	2200      	movs	r2, #0
 800d1e6:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 800d1e8:	687b      	ldr	r3, [r7, #4]
 800d1ea:	2200      	movs	r2, #0
 800d1ec:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 800d1ee:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
}
 800d1f2:	4618      	mov	r0, r3
 800d1f4:	3738      	adds	r7, #56	; 0x38
 800d1f6:	46bd      	mov	sp, r7
 800d1f8:	bdb0      	pop	{r4, r5, r7, pc}
 800d1fa:	bf00      	nop
 800d1fc:	58024400 	.word	0x58024400
 800d200:	03d09000 	.word	0x03d09000
 800d204:	003d0900 	.word	0x003d0900
 800d208:	080166f8 	.word	0x080166f8

0800d20c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800d20c:	b480      	push	{r7}
 800d20e:	b083      	sub	sp, #12
 800d210:	af00      	add	r7, sp, #0
 800d212:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800d214:	687b      	ldr	r3, [r7, #4]
 800d216:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d218:	f003 0301 	and.w	r3, r3, #1
 800d21c:	2b00      	cmp	r3, #0
 800d21e:	d00a      	beq.n	800d236 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800d220:	687b      	ldr	r3, [r7, #4]
 800d222:	681b      	ldr	r3, [r3, #0]
 800d224:	685b      	ldr	r3, [r3, #4]
 800d226:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800d22a:	687b      	ldr	r3, [r7, #4]
 800d22c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d22e:	687b      	ldr	r3, [r7, #4]
 800d230:	681b      	ldr	r3, [r3, #0]
 800d232:	430a      	orrs	r2, r1
 800d234:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800d236:	687b      	ldr	r3, [r7, #4]
 800d238:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d23a:	f003 0302 	and.w	r3, r3, #2
 800d23e:	2b00      	cmp	r3, #0
 800d240:	d00a      	beq.n	800d258 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800d242:	687b      	ldr	r3, [r7, #4]
 800d244:	681b      	ldr	r3, [r3, #0]
 800d246:	685b      	ldr	r3, [r3, #4]
 800d248:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800d24c:	687b      	ldr	r3, [r7, #4]
 800d24e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800d250:	687b      	ldr	r3, [r7, #4]
 800d252:	681b      	ldr	r3, [r3, #0]
 800d254:	430a      	orrs	r2, r1
 800d256:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800d258:	687b      	ldr	r3, [r7, #4]
 800d25a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d25c:	f003 0304 	and.w	r3, r3, #4
 800d260:	2b00      	cmp	r3, #0
 800d262:	d00a      	beq.n	800d27a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800d264:	687b      	ldr	r3, [r7, #4]
 800d266:	681b      	ldr	r3, [r3, #0]
 800d268:	685b      	ldr	r3, [r3, #4]
 800d26a:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800d26e:	687b      	ldr	r3, [r7, #4]
 800d270:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800d272:	687b      	ldr	r3, [r7, #4]
 800d274:	681b      	ldr	r3, [r3, #0]
 800d276:	430a      	orrs	r2, r1
 800d278:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800d27a:	687b      	ldr	r3, [r7, #4]
 800d27c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d27e:	f003 0308 	and.w	r3, r3, #8
 800d282:	2b00      	cmp	r3, #0
 800d284:	d00a      	beq.n	800d29c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800d286:	687b      	ldr	r3, [r7, #4]
 800d288:	681b      	ldr	r3, [r3, #0]
 800d28a:	685b      	ldr	r3, [r3, #4]
 800d28c:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800d290:	687b      	ldr	r3, [r7, #4]
 800d292:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800d294:	687b      	ldr	r3, [r7, #4]
 800d296:	681b      	ldr	r3, [r3, #0]
 800d298:	430a      	orrs	r2, r1
 800d29a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800d29c:	687b      	ldr	r3, [r7, #4]
 800d29e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d2a0:	f003 0310 	and.w	r3, r3, #16
 800d2a4:	2b00      	cmp	r3, #0
 800d2a6:	d00a      	beq.n	800d2be <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800d2a8:	687b      	ldr	r3, [r7, #4]
 800d2aa:	681b      	ldr	r3, [r3, #0]
 800d2ac:	689b      	ldr	r3, [r3, #8]
 800d2ae:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800d2b2:	687b      	ldr	r3, [r7, #4]
 800d2b4:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800d2b6:	687b      	ldr	r3, [r7, #4]
 800d2b8:	681b      	ldr	r3, [r3, #0]
 800d2ba:	430a      	orrs	r2, r1
 800d2bc:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800d2be:	687b      	ldr	r3, [r7, #4]
 800d2c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d2c2:	f003 0320 	and.w	r3, r3, #32
 800d2c6:	2b00      	cmp	r3, #0
 800d2c8:	d00a      	beq.n	800d2e0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800d2ca:	687b      	ldr	r3, [r7, #4]
 800d2cc:	681b      	ldr	r3, [r3, #0]
 800d2ce:	689b      	ldr	r3, [r3, #8]
 800d2d0:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800d2d4:	687b      	ldr	r3, [r7, #4]
 800d2d6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800d2d8:	687b      	ldr	r3, [r7, #4]
 800d2da:	681b      	ldr	r3, [r3, #0]
 800d2dc:	430a      	orrs	r2, r1
 800d2de:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800d2e0:	687b      	ldr	r3, [r7, #4]
 800d2e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d2e4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d2e8:	2b00      	cmp	r3, #0
 800d2ea:	d01a      	beq.n	800d322 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800d2ec:	687b      	ldr	r3, [r7, #4]
 800d2ee:	681b      	ldr	r3, [r3, #0]
 800d2f0:	685b      	ldr	r3, [r3, #4]
 800d2f2:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800d2f6:	687b      	ldr	r3, [r7, #4]
 800d2f8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800d2fa:	687b      	ldr	r3, [r7, #4]
 800d2fc:	681b      	ldr	r3, [r3, #0]
 800d2fe:	430a      	orrs	r2, r1
 800d300:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800d302:	687b      	ldr	r3, [r7, #4]
 800d304:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800d306:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800d30a:	d10a      	bne.n	800d322 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800d30c:	687b      	ldr	r3, [r7, #4]
 800d30e:	681b      	ldr	r3, [r3, #0]
 800d310:	685b      	ldr	r3, [r3, #4]
 800d312:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800d316:	687b      	ldr	r3, [r7, #4]
 800d318:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800d31a:	687b      	ldr	r3, [r7, #4]
 800d31c:	681b      	ldr	r3, [r3, #0]
 800d31e:	430a      	orrs	r2, r1
 800d320:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800d322:	687b      	ldr	r3, [r7, #4]
 800d324:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d326:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800d32a:	2b00      	cmp	r3, #0
 800d32c:	d00a      	beq.n	800d344 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800d32e:	687b      	ldr	r3, [r7, #4]
 800d330:	681b      	ldr	r3, [r3, #0]
 800d332:	685b      	ldr	r3, [r3, #4]
 800d334:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800d338:	687b      	ldr	r3, [r7, #4]
 800d33a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800d33c:	687b      	ldr	r3, [r7, #4]
 800d33e:	681b      	ldr	r3, [r3, #0]
 800d340:	430a      	orrs	r2, r1
 800d342:	605a      	str	r2, [r3, #4]
  }
}
 800d344:	bf00      	nop
 800d346:	370c      	adds	r7, #12
 800d348:	46bd      	mov	sp, r7
 800d34a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d34e:	4770      	bx	lr

0800d350 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800d350:	b580      	push	{r7, lr}
 800d352:	b086      	sub	sp, #24
 800d354:	af02      	add	r7, sp, #8
 800d356:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800d358:	687b      	ldr	r3, [r7, #4]
 800d35a:	2200      	movs	r2, #0
 800d35c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800d360:	f7f5 f820 	bl	80023a4 <HAL_GetTick>
 800d364:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800d366:	687b      	ldr	r3, [r7, #4]
 800d368:	681b      	ldr	r3, [r3, #0]
 800d36a:	681b      	ldr	r3, [r3, #0]
 800d36c:	f003 0308 	and.w	r3, r3, #8
 800d370:	2b08      	cmp	r3, #8
 800d372:	d10e      	bne.n	800d392 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800d374:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800d378:	9300      	str	r3, [sp, #0]
 800d37a:	68fb      	ldr	r3, [r7, #12]
 800d37c:	2200      	movs	r2, #0
 800d37e:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800d382:	6878      	ldr	r0, [r7, #4]
 800d384:	f000 f82f 	bl	800d3e6 <UART_WaitOnFlagUntilTimeout>
 800d388:	4603      	mov	r3, r0
 800d38a:	2b00      	cmp	r3, #0
 800d38c:	d001      	beq.n	800d392 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800d38e:	2303      	movs	r3, #3
 800d390:	e025      	b.n	800d3de <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800d392:	687b      	ldr	r3, [r7, #4]
 800d394:	681b      	ldr	r3, [r3, #0]
 800d396:	681b      	ldr	r3, [r3, #0]
 800d398:	f003 0304 	and.w	r3, r3, #4
 800d39c:	2b04      	cmp	r3, #4
 800d39e:	d10e      	bne.n	800d3be <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800d3a0:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800d3a4:	9300      	str	r3, [sp, #0]
 800d3a6:	68fb      	ldr	r3, [r7, #12]
 800d3a8:	2200      	movs	r2, #0
 800d3aa:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800d3ae:	6878      	ldr	r0, [r7, #4]
 800d3b0:	f000 f819 	bl	800d3e6 <UART_WaitOnFlagUntilTimeout>
 800d3b4:	4603      	mov	r3, r0
 800d3b6:	2b00      	cmp	r3, #0
 800d3b8:	d001      	beq.n	800d3be <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800d3ba:	2303      	movs	r3, #3
 800d3bc:	e00f      	b.n	800d3de <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800d3be:	687b      	ldr	r3, [r7, #4]
 800d3c0:	2220      	movs	r2, #32
 800d3c2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 800d3c6:	687b      	ldr	r3, [r7, #4]
 800d3c8:	2220      	movs	r2, #32
 800d3ca:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800d3ce:	687b      	ldr	r3, [r7, #4]
 800d3d0:	2200      	movs	r2, #0
 800d3d2:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 800d3d4:	687b      	ldr	r3, [r7, #4]
 800d3d6:	2200      	movs	r2, #0
 800d3d8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800d3dc:	2300      	movs	r3, #0
}
 800d3de:	4618      	mov	r0, r3
 800d3e0:	3710      	adds	r7, #16
 800d3e2:	46bd      	mov	sp, r7
 800d3e4:	bd80      	pop	{r7, pc}

0800d3e6 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800d3e6:	b580      	push	{r7, lr}
 800d3e8:	b084      	sub	sp, #16
 800d3ea:	af00      	add	r7, sp, #0
 800d3ec:	60f8      	str	r0, [r7, #12]
 800d3ee:	60b9      	str	r1, [r7, #8]
 800d3f0:	603b      	str	r3, [r7, #0]
 800d3f2:	4613      	mov	r3, r2
 800d3f4:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800d3f6:	e062      	b.n	800d4be <UART_WaitOnFlagUntilTimeout+0xd8>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800d3f8:	69bb      	ldr	r3, [r7, #24]
 800d3fa:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d3fe:	d05e      	beq.n	800d4be <UART_WaitOnFlagUntilTimeout+0xd8>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800d400:	f7f4 ffd0 	bl	80023a4 <HAL_GetTick>
 800d404:	4602      	mov	r2, r0
 800d406:	683b      	ldr	r3, [r7, #0]
 800d408:	1ad3      	subs	r3, r2, r3
 800d40a:	69ba      	ldr	r2, [r7, #24]
 800d40c:	429a      	cmp	r2, r3
 800d40e:	d302      	bcc.n	800d416 <UART_WaitOnFlagUntilTimeout+0x30>
 800d410:	69bb      	ldr	r3, [r7, #24]
 800d412:	2b00      	cmp	r3, #0
 800d414:	d11d      	bne.n	800d452 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 800d416:	68fb      	ldr	r3, [r7, #12]
 800d418:	681b      	ldr	r3, [r3, #0]
 800d41a:	681a      	ldr	r2, [r3, #0]
 800d41c:	68fb      	ldr	r3, [r7, #12]
 800d41e:	681b      	ldr	r3, [r3, #0]
 800d420:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800d424:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800d426:	68fb      	ldr	r3, [r7, #12]
 800d428:	681b      	ldr	r3, [r3, #0]
 800d42a:	689a      	ldr	r2, [r3, #8]
 800d42c:	68fb      	ldr	r3, [r7, #12]
 800d42e:	681b      	ldr	r3, [r3, #0]
 800d430:	f022 0201 	bic.w	r2, r2, #1
 800d434:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 800d436:	68fb      	ldr	r3, [r7, #12]
 800d438:	2220      	movs	r2, #32
 800d43a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 800d43e:	68fb      	ldr	r3, [r7, #12]
 800d440:	2220      	movs	r2, #32
 800d442:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 800d446:	68fb      	ldr	r3, [r7, #12]
 800d448:	2200      	movs	r2, #0
 800d44a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 800d44e:	2303      	movs	r3, #3
 800d450:	e045      	b.n	800d4de <UART_WaitOnFlagUntilTimeout+0xf8>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800d452:	68fb      	ldr	r3, [r7, #12]
 800d454:	681b      	ldr	r3, [r3, #0]
 800d456:	681b      	ldr	r3, [r3, #0]
 800d458:	f003 0304 	and.w	r3, r3, #4
 800d45c:	2b00      	cmp	r3, #0
 800d45e:	d02e      	beq.n	800d4be <UART_WaitOnFlagUntilTimeout+0xd8>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800d460:	68fb      	ldr	r3, [r7, #12]
 800d462:	681b      	ldr	r3, [r3, #0]
 800d464:	69db      	ldr	r3, [r3, #28]
 800d466:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800d46a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800d46e:	d126      	bne.n	800d4be <UART_WaitOnFlagUntilTimeout+0xd8>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800d470:	68fb      	ldr	r3, [r7, #12]
 800d472:	681b      	ldr	r3, [r3, #0]
 800d474:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800d478:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 800d47a:	68fb      	ldr	r3, [r7, #12]
 800d47c:	681b      	ldr	r3, [r3, #0]
 800d47e:	681a      	ldr	r2, [r3, #0]
 800d480:	68fb      	ldr	r3, [r7, #12]
 800d482:	681b      	ldr	r3, [r3, #0]
 800d484:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800d488:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800d48a:	68fb      	ldr	r3, [r7, #12]
 800d48c:	681b      	ldr	r3, [r3, #0]
 800d48e:	689a      	ldr	r2, [r3, #8]
 800d490:	68fb      	ldr	r3, [r7, #12]
 800d492:	681b      	ldr	r3, [r3, #0]
 800d494:	f022 0201 	bic.w	r2, r2, #1
 800d498:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 800d49a:	68fb      	ldr	r3, [r7, #12]
 800d49c:	2220      	movs	r2, #32
 800d49e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 800d4a2:	68fb      	ldr	r3, [r7, #12]
 800d4a4:	2220      	movs	r2, #32
 800d4a6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800d4aa:	68fb      	ldr	r3, [r7, #12]
 800d4ac:	2220      	movs	r2, #32
 800d4ae:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800d4b2:	68fb      	ldr	r3, [r7, #12]
 800d4b4:	2200      	movs	r2, #0
 800d4b6:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 800d4ba:	2303      	movs	r3, #3
 800d4bc:	e00f      	b.n	800d4de <UART_WaitOnFlagUntilTimeout+0xf8>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800d4be:	68fb      	ldr	r3, [r7, #12]
 800d4c0:	681b      	ldr	r3, [r3, #0]
 800d4c2:	69da      	ldr	r2, [r3, #28]
 800d4c4:	68bb      	ldr	r3, [r7, #8]
 800d4c6:	4013      	ands	r3, r2
 800d4c8:	68ba      	ldr	r2, [r7, #8]
 800d4ca:	429a      	cmp	r2, r3
 800d4cc:	bf0c      	ite	eq
 800d4ce:	2301      	moveq	r3, #1
 800d4d0:	2300      	movne	r3, #0
 800d4d2:	b2db      	uxtb	r3, r3
 800d4d4:	461a      	mov	r2, r3
 800d4d6:	79fb      	ldrb	r3, [r7, #7]
 800d4d8:	429a      	cmp	r2, r3
 800d4da:	d08d      	beq.n	800d3f8 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800d4dc:	2300      	movs	r3, #0
}
 800d4de:	4618      	mov	r0, r3
 800d4e0:	3710      	adds	r7, #16
 800d4e2:	46bd      	mov	sp, r7
 800d4e4:	bd80      	pop	{r7, pc}

0800d4e6 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800d4e6:	b480      	push	{r7}
 800d4e8:	b085      	sub	sp, #20
 800d4ea:	af00      	add	r7, sp, #0
 800d4ec:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800d4ee:	687b      	ldr	r3, [r7, #4]
 800d4f0:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800d4f4:	2b01      	cmp	r3, #1
 800d4f6:	d101      	bne.n	800d4fc <HAL_UARTEx_DisableFifoMode+0x16>
 800d4f8:	2302      	movs	r3, #2
 800d4fa:	e027      	b.n	800d54c <HAL_UARTEx_DisableFifoMode+0x66>
 800d4fc:	687b      	ldr	r3, [r7, #4]
 800d4fe:	2201      	movs	r2, #1
 800d500:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800d504:	687b      	ldr	r3, [r7, #4]
 800d506:	2224      	movs	r2, #36	; 0x24
 800d508:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800d50c:	687b      	ldr	r3, [r7, #4]
 800d50e:	681b      	ldr	r3, [r3, #0]
 800d510:	681b      	ldr	r3, [r3, #0]
 800d512:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800d514:	687b      	ldr	r3, [r7, #4]
 800d516:	681b      	ldr	r3, [r3, #0]
 800d518:	681a      	ldr	r2, [r3, #0]
 800d51a:	687b      	ldr	r3, [r7, #4]
 800d51c:	681b      	ldr	r3, [r3, #0]
 800d51e:	f022 0201 	bic.w	r2, r2, #1
 800d522:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800d524:	68fb      	ldr	r3, [r7, #12]
 800d526:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800d52a:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800d52c:	687b      	ldr	r3, [r7, #4]
 800d52e:	2200      	movs	r2, #0
 800d530:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800d532:	687b      	ldr	r3, [r7, #4]
 800d534:	681b      	ldr	r3, [r3, #0]
 800d536:	68fa      	ldr	r2, [r7, #12]
 800d538:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800d53a:	687b      	ldr	r3, [r7, #4]
 800d53c:	2220      	movs	r2, #32
 800d53e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800d542:	687b      	ldr	r3, [r7, #4]
 800d544:	2200      	movs	r2, #0
 800d546:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800d54a:	2300      	movs	r3, #0
}
 800d54c:	4618      	mov	r0, r3
 800d54e:	3714      	adds	r7, #20
 800d550:	46bd      	mov	sp, r7
 800d552:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d556:	4770      	bx	lr

0800d558 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800d558:	b580      	push	{r7, lr}
 800d55a:	b084      	sub	sp, #16
 800d55c:	af00      	add	r7, sp, #0
 800d55e:	6078      	str	r0, [r7, #4]
 800d560:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800d562:	687b      	ldr	r3, [r7, #4]
 800d564:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800d568:	2b01      	cmp	r3, #1
 800d56a:	d101      	bne.n	800d570 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800d56c:	2302      	movs	r3, #2
 800d56e:	e02d      	b.n	800d5cc <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800d570:	687b      	ldr	r3, [r7, #4]
 800d572:	2201      	movs	r2, #1
 800d574:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800d578:	687b      	ldr	r3, [r7, #4]
 800d57a:	2224      	movs	r2, #36	; 0x24
 800d57c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800d580:	687b      	ldr	r3, [r7, #4]
 800d582:	681b      	ldr	r3, [r3, #0]
 800d584:	681b      	ldr	r3, [r3, #0]
 800d586:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800d588:	687b      	ldr	r3, [r7, #4]
 800d58a:	681b      	ldr	r3, [r3, #0]
 800d58c:	681a      	ldr	r2, [r3, #0]
 800d58e:	687b      	ldr	r3, [r7, #4]
 800d590:	681b      	ldr	r3, [r3, #0]
 800d592:	f022 0201 	bic.w	r2, r2, #1
 800d596:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800d598:	687b      	ldr	r3, [r7, #4]
 800d59a:	681b      	ldr	r3, [r3, #0]
 800d59c:	689b      	ldr	r3, [r3, #8]
 800d59e:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 800d5a2:	687b      	ldr	r3, [r7, #4]
 800d5a4:	681b      	ldr	r3, [r3, #0]
 800d5a6:	683a      	ldr	r2, [r7, #0]
 800d5a8:	430a      	orrs	r2, r1
 800d5aa:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800d5ac:	6878      	ldr	r0, [r7, #4]
 800d5ae:	f000 f84f 	bl	800d650 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800d5b2:	687b      	ldr	r3, [r7, #4]
 800d5b4:	681b      	ldr	r3, [r3, #0]
 800d5b6:	68fa      	ldr	r2, [r7, #12]
 800d5b8:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800d5ba:	687b      	ldr	r3, [r7, #4]
 800d5bc:	2220      	movs	r2, #32
 800d5be:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800d5c2:	687b      	ldr	r3, [r7, #4]
 800d5c4:	2200      	movs	r2, #0
 800d5c6:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800d5ca:	2300      	movs	r3, #0
}
 800d5cc:	4618      	mov	r0, r3
 800d5ce:	3710      	adds	r7, #16
 800d5d0:	46bd      	mov	sp, r7
 800d5d2:	bd80      	pop	{r7, pc}

0800d5d4 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800d5d4:	b580      	push	{r7, lr}
 800d5d6:	b084      	sub	sp, #16
 800d5d8:	af00      	add	r7, sp, #0
 800d5da:	6078      	str	r0, [r7, #4]
 800d5dc:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800d5de:	687b      	ldr	r3, [r7, #4]
 800d5e0:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800d5e4:	2b01      	cmp	r3, #1
 800d5e6:	d101      	bne.n	800d5ec <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800d5e8:	2302      	movs	r3, #2
 800d5ea:	e02d      	b.n	800d648 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800d5ec:	687b      	ldr	r3, [r7, #4]
 800d5ee:	2201      	movs	r2, #1
 800d5f0:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800d5f4:	687b      	ldr	r3, [r7, #4]
 800d5f6:	2224      	movs	r2, #36	; 0x24
 800d5f8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800d5fc:	687b      	ldr	r3, [r7, #4]
 800d5fe:	681b      	ldr	r3, [r3, #0]
 800d600:	681b      	ldr	r3, [r3, #0]
 800d602:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800d604:	687b      	ldr	r3, [r7, #4]
 800d606:	681b      	ldr	r3, [r3, #0]
 800d608:	681a      	ldr	r2, [r3, #0]
 800d60a:	687b      	ldr	r3, [r7, #4]
 800d60c:	681b      	ldr	r3, [r3, #0]
 800d60e:	f022 0201 	bic.w	r2, r2, #1
 800d612:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800d614:	687b      	ldr	r3, [r7, #4]
 800d616:	681b      	ldr	r3, [r3, #0]
 800d618:	689b      	ldr	r3, [r3, #8]
 800d61a:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 800d61e:	687b      	ldr	r3, [r7, #4]
 800d620:	681b      	ldr	r3, [r3, #0]
 800d622:	683a      	ldr	r2, [r7, #0]
 800d624:	430a      	orrs	r2, r1
 800d626:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800d628:	6878      	ldr	r0, [r7, #4]
 800d62a:	f000 f811 	bl	800d650 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800d62e:	687b      	ldr	r3, [r7, #4]
 800d630:	681b      	ldr	r3, [r3, #0]
 800d632:	68fa      	ldr	r2, [r7, #12]
 800d634:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800d636:	687b      	ldr	r3, [r7, #4]
 800d638:	2220      	movs	r2, #32
 800d63a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800d63e:	687b      	ldr	r3, [r7, #4]
 800d640:	2200      	movs	r2, #0
 800d642:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800d646:	2300      	movs	r3, #0
}
 800d648:	4618      	mov	r0, r3
 800d64a:	3710      	adds	r7, #16
 800d64c:	46bd      	mov	sp, r7
 800d64e:	bd80      	pop	{r7, pc}

0800d650 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800d650:	b480      	push	{r7}
 800d652:	b085      	sub	sp, #20
 800d654:	af00      	add	r7, sp, #0
 800d656:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800d658:	687b      	ldr	r3, [r7, #4]
 800d65a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800d65c:	2b00      	cmp	r3, #0
 800d65e:	d108      	bne.n	800d672 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800d660:	687b      	ldr	r3, [r7, #4]
 800d662:	2201      	movs	r2, #1
 800d664:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 800d668:	687b      	ldr	r3, [r7, #4]
 800d66a:	2201      	movs	r2, #1
 800d66c:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800d670:	e031      	b.n	800d6d6 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800d672:	2310      	movs	r3, #16
 800d674:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800d676:	2310      	movs	r3, #16
 800d678:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800d67a:	687b      	ldr	r3, [r7, #4]
 800d67c:	681b      	ldr	r3, [r3, #0]
 800d67e:	689b      	ldr	r3, [r3, #8]
 800d680:	0e5b      	lsrs	r3, r3, #25
 800d682:	b2db      	uxtb	r3, r3
 800d684:	f003 0307 	and.w	r3, r3, #7
 800d688:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800d68a:	687b      	ldr	r3, [r7, #4]
 800d68c:	681b      	ldr	r3, [r3, #0]
 800d68e:	689b      	ldr	r3, [r3, #8]
 800d690:	0f5b      	lsrs	r3, r3, #29
 800d692:	b2db      	uxtb	r3, r3
 800d694:	f003 0307 	and.w	r3, r3, #7
 800d698:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800d69a:	7bbb      	ldrb	r3, [r7, #14]
 800d69c:	7b3a      	ldrb	r2, [r7, #12]
 800d69e:	4911      	ldr	r1, [pc, #68]	; (800d6e4 <UARTEx_SetNbDataToProcess+0x94>)
 800d6a0:	5c8a      	ldrb	r2, [r1, r2]
 800d6a2:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800d6a6:	7b3a      	ldrb	r2, [r7, #12]
 800d6a8:	490f      	ldr	r1, [pc, #60]	; (800d6e8 <UARTEx_SetNbDataToProcess+0x98>)
 800d6aa:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800d6ac:	fb93 f3f2 	sdiv	r3, r3, r2
 800d6b0:	b29a      	uxth	r2, r3
 800d6b2:	687b      	ldr	r3, [r7, #4]
 800d6b4:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800d6b8:	7bfb      	ldrb	r3, [r7, #15]
 800d6ba:	7b7a      	ldrb	r2, [r7, #13]
 800d6bc:	4909      	ldr	r1, [pc, #36]	; (800d6e4 <UARTEx_SetNbDataToProcess+0x94>)
 800d6be:	5c8a      	ldrb	r2, [r1, r2]
 800d6c0:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800d6c4:	7b7a      	ldrb	r2, [r7, #13]
 800d6c6:	4908      	ldr	r1, [pc, #32]	; (800d6e8 <UARTEx_SetNbDataToProcess+0x98>)
 800d6c8:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800d6ca:	fb93 f3f2 	sdiv	r3, r3, r2
 800d6ce:	b29a      	uxth	r2, r3
 800d6d0:	687b      	ldr	r3, [r7, #4]
 800d6d2:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 800d6d6:	bf00      	nop
 800d6d8:	3714      	adds	r7, #20
 800d6da:	46bd      	mov	sp, r7
 800d6dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d6e0:	4770      	bx	lr
 800d6e2:	bf00      	nop
 800d6e4:	08016710 	.word	0x08016710
 800d6e8:	08016718 	.word	0x08016718

0800d6ec <FMC_NORSRAM_Init>:
  * @param  Init Pointer to NORSRAM Initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef  FMC_NORSRAM_Init(FMC_NORSRAM_TypeDef *Device,
                                    FMC_NORSRAM_InitTypeDef *Init)
{
 800d6ec:	b480      	push	{r7}
 800d6ee:	b087      	sub	sp, #28
 800d6f0:	af00      	add	r7, sp, #0
 800d6f2:	6078      	str	r0, [r7, #4]
 800d6f4:	6039      	str	r1, [r7, #0]
  assert_param(IS_FMC_CONTINOUS_CLOCK(Init->ContinuousClock));
  assert_param(IS_FMC_WRITE_FIFO(Init->WriteFifo));
  assert_param(IS_FMC_PAGESIZE(Init->PageSize));

  /* Disable NORSRAM Device */
  __FMC_NORSRAM_DISABLE(Device, Init->NSBank);
 800d6f6:	683b      	ldr	r3, [r7, #0]
 800d6f8:	681a      	ldr	r2, [r3, #0]
 800d6fa:	687b      	ldr	r3, [r7, #4]
 800d6fc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d700:	683a      	ldr	r2, [r7, #0]
 800d702:	6812      	ldr	r2, [r2, #0]
 800d704:	f023 0101 	bic.w	r1, r3, #1
 800d708:	687b      	ldr	r3, [r7, #4]
 800d70a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

  /* Set NORSRAM device control parameters */
  if (Init->MemoryType == FMC_MEMORY_TYPE_NOR)
 800d70e:	683b      	ldr	r3, [r7, #0]
 800d710:	689b      	ldr	r3, [r3, #8]
 800d712:	2b08      	cmp	r3, #8
 800d714:	d102      	bne.n	800d71c <FMC_NORSRAM_Init+0x30>
  {
    flashaccess = FMC_NORSRAM_FLASH_ACCESS_ENABLE;
 800d716:	2340      	movs	r3, #64	; 0x40
 800d718:	617b      	str	r3, [r7, #20]
 800d71a:	e001      	b.n	800d720 <FMC_NORSRAM_Init+0x34>
  }
  else
  {
    flashaccess = FMC_NORSRAM_FLASH_ACCESS_DISABLE;
 800d71c:	2300      	movs	r3, #0
 800d71e:	617b      	str	r3, [r7, #20]
  }

  btcr_reg = (flashaccess                   | \
              Init->DataAddressMux          | \
 800d720:	683b      	ldr	r3, [r7, #0]
 800d722:	685a      	ldr	r2, [r3, #4]
  btcr_reg = (flashaccess                   | \
 800d724:	697b      	ldr	r3, [r7, #20]
 800d726:	431a      	orrs	r2, r3
              Init->MemoryType              | \
 800d728:	683b      	ldr	r3, [r7, #0]
 800d72a:	689b      	ldr	r3, [r3, #8]
              Init->DataAddressMux          | \
 800d72c:	431a      	orrs	r2, r3
              Init->MemoryDataWidth         | \
 800d72e:	683b      	ldr	r3, [r7, #0]
 800d730:	68db      	ldr	r3, [r3, #12]
              Init->MemoryType              | \
 800d732:	431a      	orrs	r2, r3
              Init->BurstAccessMode         | \
 800d734:	683b      	ldr	r3, [r7, #0]
 800d736:	691b      	ldr	r3, [r3, #16]
              Init->MemoryDataWidth         | \
 800d738:	431a      	orrs	r2, r3
              Init->WaitSignalPolarity      | \
 800d73a:	683b      	ldr	r3, [r7, #0]
 800d73c:	695b      	ldr	r3, [r3, #20]
              Init->BurstAccessMode         | \
 800d73e:	431a      	orrs	r2, r3
              Init->WaitSignalActive        | \
 800d740:	683b      	ldr	r3, [r7, #0]
 800d742:	699b      	ldr	r3, [r3, #24]
              Init->WaitSignalPolarity      | \
 800d744:	431a      	orrs	r2, r3
              Init->WriteOperation          | \
 800d746:	683b      	ldr	r3, [r7, #0]
 800d748:	69db      	ldr	r3, [r3, #28]
              Init->WaitSignalActive        | \
 800d74a:	431a      	orrs	r2, r3
              Init->WaitSignal              | \
 800d74c:	683b      	ldr	r3, [r7, #0]
 800d74e:	6a1b      	ldr	r3, [r3, #32]
              Init->WriteOperation          | \
 800d750:	431a      	orrs	r2, r3
              Init->ExtendedMode            | \
 800d752:	683b      	ldr	r3, [r7, #0]
 800d754:	6a5b      	ldr	r3, [r3, #36]	; 0x24
              Init->WaitSignal              | \
 800d756:	431a      	orrs	r2, r3
              Init->AsynchronousWait        | \
 800d758:	683b      	ldr	r3, [r7, #0]
 800d75a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
              Init->ExtendedMode            | \
 800d75c:	431a      	orrs	r2, r3
              Init->WriteBurst);
 800d75e:	683b      	ldr	r3, [r7, #0]
 800d760:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  btcr_reg = (flashaccess                   | \
 800d762:	4313      	orrs	r3, r2
 800d764:	613b      	str	r3, [r7, #16]

  btcr_reg |= Init->ContinuousClock;
 800d766:	683b      	ldr	r3, [r7, #0]
 800d768:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d76a:	693a      	ldr	r2, [r7, #16]
 800d76c:	4313      	orrs	r3, r2
 800d76e:	613b      	str	r3, [r7, #16]
  btcr_reg |= Init->WriteFifo;
 800d770:	683b      	ldr	r3, [r7, #0]
 800d772:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d774:	693a      	ldr	r2, [r7, #16]
 800d776:	4313      	orrs	r3, r2
 800d778:	613b      	str	r3, [r7, #16]
  btcr_reg |= Init->PageSize;
 800d77a:	683b      	ldr	r3, [r7, #0]
 800d77c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d77e:	693a      	ldr	r2, [r7, #16]
 800d780:	4313      	orrs	r3, r2
 800d782:	613b      	str	r3, [r7, #16]

  mask = (FMC_BCRx_MBKEN                |
 800d784:	4b20      	ldr	r3, [pc, #128]	; (800d808 <FMC_NORSRAM_Init+0x11c>)
 800d786:	60fb      	str	r3, [r7, #12]
          FMC_BCRx_WAITEN               |
          FMC_BCRx_EXTMOD               |
          FMC_BCRx_ASYNCWAIT            |
          FMC_BCRx_CBURSTRW);

  mask |= FMC_BCR1_CCLKEN;
 800d788:	68fb      	ldr	r3, [r7, #12]
 800d78a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800d78e:	60fb      	str	r3, [r7, #12]
  mask |= FMC_BCR1_WFDIS;
 800d790:	68fb      	ldr	r3, [r7, #12]
 800d792:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800d796:	60fb      	str	r3, [r7, #12]
  mask |= FMC_BCRx_CPSIZE;
 800d798:	68fb      	ldr	r3, [r7, #12]
 800d79a:	f443 23e0 	orr.w	r3, r3, #458752	; 0x70000
 800d79e:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(Device->BTCR[Init->NSBank], mask, btcr_reg);
 800d7a0:	683b      	ldr	r3, [r7, #0]
 800d7a2:	681a      	ldr	r2, [r3, #0]
 800d7a4:	687b      	ldr	r3, [r7, #4]
 800d7a6:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800d7aa:	68fb      	ldr	r3, [r7, #12]
 800d7ac:	43db      	mvns	r3, r3
 800d7ae:	ea02 0103 	and.w	r1, r2, r3
 800d7b2:	683b      	ldr	r3, [r7, #0]
 800d7b4:	681a      	ldr	r2, [r3, #0]
 800d7b6:	693b      	ldr	r3, [r7, #16]
 800d7b8:	4319      	orrs	r1, r3
 800d7ba:	687b      	ldr	r3, [r7, #4]
 800d7bc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

  /* Configure synchronous mode when Continuous clock is enabled for bank2..4 */
  if ((Init->ContinuousClock == FMC_CONTINUOUS_CLOCK_SYNC_ASYNC) && (Init->NSBank != FMC_NORSRAM_BANK1))
 800d7c0:	683b      	ldr	r3, [r7, #0]
 800d7c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d7c4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800d7c8:	d10c      	bne.n	800d7e4 <FMC_NORSRAM_Init+0xf8>
 800d7ca:	683b      	ldr	r3, [r7, #0]
 800d7cc:	681b      	ldr	r3, [r3, #0]
 800d7ce:	2b00      	cmp	r3, #0
 800d7d0:	d008      	beq.n	800d7e4 <FMC_NORSRAM_Init+0xf8>
  {
    MODIFY_REG(Device->BTCR[FMC_NORSRAM_BANK1], FMC_BCR1_CCLKEN, Init->ContinuousClock);
 800d7d2:	687b      	ldr	r3, [r7, #4]
 800d7d4:	681b      	ldr	r3, [r3, #0]
 800d7d6:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800d7da:	683b      	ldr	r3, [r7, #0]
 800d7dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d7de:	431a      	orrs	r2, r3
 800d7e0:	687b      	ldr	r3, [r7, #4]
 800d7e2:	601a      	str	r2, [r3, #0]
  }

  if (Init->NSBank != FMC_NORSRAM_BANK1)
 800d7e4:	683b      	ldr	r3, [r7, #0]
 800d7e6:	681b      	ldr	r3, [r3, #0]
 800d7e8:	2b00      	cmp	r3, #0
 800d7ea:	d006      	beq.n	800d7fa <FMC_NORSRAM_Init+0x10e>
  {
    /* Configure Write FIFO mode when Write Fifo is enabled for bank2..4 */
    SET_BIT(Device->BTCR[FMC_NORSRAM_BANK1], (uint32_t)(Init->WriteFifo));
 800d7ec:	687b      	ldr	r3, [r7, #4]
 800d7ee:	681a      	ldr	r2, [r3, #0]
 800d7f0:	683b      	ldr	r3, [r7, #0]
 800d7f2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d7f4:	431a      	orrs	r2, r3
 800d7f6:	687b      	ldr	r3, [r7, #4]
 800d7f8:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800d7fa:	2300      	movs	r3, #0
}
 800d7fc:	4618      	mov	r0, r3
 800d7fe:	371c      	adds	r7, #28
 800d800:	46bd      	mov	sp, r7
 800d802:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d806:	4770      	bx	lr
 800d808:	0008fb7f 	.word	0x0008fb7f

0800d80c <FMC_NORSRAM_Timing_Init>:
  * @param  Bank NORSRAM bank number
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_NORSRAM_Timing_Init(FMC_NORSRAM_TypeDef *Device,
                                          FMC_NORSRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 800d80c:	b480      	push	{r7}
 800d80e:	b087      	sub	sp, #28
 800d810:	af00      	add	r7, sp, #0
 800d812:	60f8      	str	r0, [r7, #12]
 800d814:	60b9      	str	r1, [r7, #8]
 800d816:	607a      	str	r2, [r7, #4]
  assert_param(IS_FMC_DATA_LATENCY(Timing->DataLatency));
  assert_param(IS_FMC_ACCESS_MODE(Timing->AccessMode));
  assert_param(IS_FMC_NORSRAM_BANK(Bank));

  /* Set FMC_NORSRAM device timing parameters */
  MODIFY_REG(Device->BTCR[Bank + 1U], BTR_CLEAR_MASK, (Timing->AddressSetupTime                                  |
 800d818:	687b      	ldr	r3, [r7, #4]
 800d81a:	1c5a      	adds	r2, r3, #1
 800d81c:	68fb      	ldr	r3, [r7, #12]
 800d81e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d822:	f003 4140 	and.w	r1, r3, #3221225472	; 0xc0000000
 800d826:	68bb      	ldr	r3, [r7, #8]
 800d828:	681a      	ldr	r2, [r3, #0]
 800d82a:	68bb      	ldr	r3, [r7, #8]
 800d82c:	685b      	ldr	r3, [r3, #4]
 800d82e:	011b      	lsls	r3, r3, #4
 800d830:	431a      	orrs	r2, r3
 800d832:	68bb      	ldr	r3, [r7, #8]
 800d834:	689b      	ldr	r3, [r3, #8]
 800d836:	021b      	lsls	r3, r3, #8
 800d838:	431a      	orrs	r2, r3
 800d83a:	68bb      	ldr	r3, [r7, #8]
 800d83c:	68db      	ldr	r3, [r3, #12]
 800d83e:	041b      	lsls	r3, r3, #16
 800d840:	431a      	orrs	r2, r3
 800d842:	68bb      	ldr	r3, [r7, #8]
 800d844:	691b      	ldr	r3, [r3, #16]
 800d846:	3b01      	subs	r3, #1
 800d848:	051b      	lsls	r3, r3, #20
 800d84a:	431a      	orrs	r2, r3
 800d84c:	68bb      	ldr	r3, [r7, #8]
 800d84e:	695b      	ldr	r3, [r3, #20]
 800d850:	3b02      	subs	r3, #2
 800d852:	061b      	lsls	r3, r3, #24
 800d854:	431a      	orrs	r2, r3
 800d856:	68bb      	ldr	r3, [r7, #8]
 800d858:	699b      	ldr	r3, [r3, #24]
 800d85a:	4313      	orrs	r3, r2
 800d85c:	687a      	ldr	r2, [r7, #4]
 800d85e:	3201      	adds	r2, #1
 800d860:	4319      	orrs	r1, r3
 800d862:	68fb      	ldr	r3, [r7, #12]
 800d864:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                                                       (((Timing->CLKDivision) - 1U)     << FMC_BTRx_CLKDIV_Pos)  |
                                                       (((Timing->DataLatency) - 2U)     << FMC_BTRx_DATLAT_Pos)  |
                                                       (Timing->AccessMode)));

  /* Configure Clock division value (in NORSRAM bank 1) when continuous clock is enabled */
  if (HAL_IS_BIT_SET(Device->BTCR[FMC_NORSRAM_BANK1], FMC_BCR1_CCLKEN))
 800d868:	68fb      	ldr	r3, [r7, #12]
 800d86a:	681b      	ldr	r3, [r3, #0]
 800d86c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800d870:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800d874:	d113      	bne.n	800d89e <FMC_NORSRAM_Timing_Init+0x92>
  {
    tmpr = (uint32_t)(Device->BTCR[FMC_NORSRAM_BANK1 + 1U] & ~((0x0FU) << FMC_BTRx_CLKDIV_Pos));
 800d876:	68fb      	ldr	r3, [r7, #12]
 800d878:	685b      	ldr	r3, [r3, #4]
 800d87a:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800d87e:	617b      	str	r3, [r7, #20]
    tmpr |= (uint32_t)(((Timing->CLKDivision) - 1U) << FMC_BTRx_CLKDIV_Pos);
 800d880:	68bb      	ldr	r3, [r7, #8]
 800d882:	691b      	ldr	r3, [r3, #16]
 800d884:	3b01      	subs	r3, #1
 800d886:	051b      	lsls	r3, r3, #20
 800d888:	697a      	ldr	r2, [r7, #20]
 800d88a:	4313      	orrs	r3, r2
 800d88c:	617b      	str	r3, [r7, #20]
    MODIFY_REG(Device->BTCR[FMC_NORSRAM_BANK1 + 1U], FMC_BTRx_CLKDIV, tmpr);
 800d88e:	68fb      	ldr	r3, [r7, #12]
 800d890:	685b      	ldr	r3, [r3, #4]
 800d892:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 800d896:	697b      	ldr	r3, [r7, #20]
 800d898:	431a      	orrs	r2, r3
 800d89a:	68fb      	ldr	r3, [r7, #12]
 800d89c:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 800d89e:	2300      	movs	r3, #0
}
 800d8a0:	4618      	mov	r0, r3
 800d8a2:	371c      	adds	r7, #28
 800d8a4:	46bd      	mov	sp, r7
 800d8a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d8aa:	4770      	bx	lr

0800d8ac <FMC_NORSRAM_Extended_Timing_Init>:
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_NORSRAM_Extended_Timing_Init(FMC_NORSRAM_EXTENDED_TypeDef *Device,
                                                   FMC_NORSRAM_TimingTypeDef *Timing, uint32_t Bank,
                                                   uint32_t ExtendedMode)
{
 800d8ac:	b480      	push	{r7}
 800d8ae:	b085      	sub	sp, #20
 800d8b0:	af00      	add	r7, sp, #0
 800d8b2:	60f8      	str	r0, [r7, #12]
 800d8b4:	60b9      	str	r1, [r7, #8]
 800d8b6:	607a      	str	r2, [r7, #4]
 800d8b8:	603b      	str	r3, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FMC_EXTENDED_MODE(ExtendedMode));

  /* Set NORSRAM device timing register for write configuration, if extended mode is used */
  if (ExtendedMode == FMC_EXTENDED_MODE_ENABLE)
 800d8ba:	683b      	ldr	r3, [r7, #0]
 800d8bc:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800d8c0:	d11d      	bne.n	800d8fe <FMC_NORSRAM_Extended_Timing_Init+0x52>
    assert_param(IS_FMC_TURNAROUND_TIME(Timing->BusTurnAroundDuration));
    assert_param(IS_FMC_ACCESS_MODE(Timing->AccessMode));
    assert_param(IS_FMC_NORSRAM_BANK(Bank));

    /* Set NORSRAM device timing register for write configuration, if extended mode is used */
    MODIFY_REG(Device->BWTR[Bank], BWTR_CLEAR_MASK, (Timing->AddressSetupTime                                    |
 800d8c2:	68fb      	ldr	r3, [r7, #12]
 800d8c4:	687a      	ldr	r2, [r7, #4]
 800d8c6:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800d8ca:	4b13      	ldr	r3, [pc, #76]	; (800d918 <FMC_NORSRAM_Extended_Timing_Init+0x6c>)
 800d8cc:	4013      	ands	r3, r2
 800d8ce:	68ba      	ldr	r2, [r7, #8]
 800d8d0:	6811      	ldr	r1, [r2, #0]
 800d8d2:	68ba      	ldr	r2, [r7, #8]
 800d8d4:	6852      	ldr	r2, [r2, #4]
 800d8d6:	0112      	lsls	r2, r2, #4
 800d8d8:	4311      	orrs	r1, r2
 800d8da:	68ba      	ldr	r2, [r7, #8]
 800d8dc:	6892      	ldr	r2, [r2, #8]
 800d8de:	0212      	lsls	r2, r2, #8
 800d8e0:	4311      	orrs	r1, r2
 800d8e2:	68ba      	ldr	r2, [r7, #8]
 800d8e4:	6992      	ldr	r2, [r2, #24]
 800d8e6:	4311      	orrs	r1, r2
 800d8e8:	68ba      	ldr	r2, [r7, #8]
 800d8ea:	68d2      	ldr	r2, [r2, #12]
 800d8ec:	0412      	lsls	r2, r2, #16
 800d8ee:	430a      	orrs	r2, r1
 800d8f0:	ea43 0102 	orr.w	r1, r3, r2
 800d8f4:	68fb      	ldr	r3, [r7, #12]
 800d8f6:	687a      	ldr	r2, [r7, #4]
 800d8f8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 800d8fc:	e005      	b.n	800d90a <FMC_NORSRAM_Extended_Timing_Init+0x5e>
                                                     Timing->AccessMode                                          |
                                                     ((Timing->BusTurnAroundDuration)  << FMC_BWTRx_BUSTURN_Pos)));
  }
  else
  {
    Device->BWTR[Bank] = 0x0FFFFFFFU;
 800d8fe:	68fb      	ldr	r3, [r7, #12]
 800d900:	687a      	ldr	r2, [r7, #4]
 800d902:	f06f 4170 	mvn.w	r1, #4026531840	; 0xf0000000
 800d906:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  }

  return HAL_OK;
 800d90a:	2300      	movs	r3, #0
}
 800d90c:	4618      	mov	r0, r3
 800d90e:	3714      	adds	r7, #20
 800d910:	46bd      	mov	sp, r7
 800d912:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d916:	4770      	bx	lr
 800d918:	cff00000 	.word	0xcff00000

0800d91c <FMC_SDRAM_Init>:
  * @param  Device Pointer to SDRAM device instance
  * @param  Init Pointer to SDRAM Initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_InitTypeDef *Init)
{
 800d91c:	b480      	push	{r7}
 800d91e:	b083      	sub	sp, #12
 800d920:	af00      	add	r7, sp, #0
 800d922:	6078      	str	r0, [r7, #4]
 800d924:	6039      	str	r1, [r7, #0]
  assert_param(IS_FMC_SDCLOCK_PERIOD(Init->SDClockPeriod));
  assert_param(IS_FMC_READ_BURST(Init->ReadBurst));
  assert_param(IS_FMC_READPIPE_DELAY(Init->ReadPipeDelay));

  /* Set SDRAM bank configuration parameters */
  if (Init->SDBank == FMC_SDRAM_BANK1)
 800d926:	683b      	ldr	r3, [r7, #0]
 800d928:	681b      	ldr	r3, [r3, #0]
 800d92a:	2b00      	cmp	r3, #0
 800d92c:	d121      	bne.n	800d972 <FMC_SDRAM_Init+0x56>
  {
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 800d92e:	687b      	ldr	r3, [r7, #4]
 800d930:	681a      	ldr	r2, [r3, #0]
 800d932:	4b27      	ldr	r3, [pc, #156]	; (800d9d0 <FMC_SDRAM_Init+0xb4>)
 800d934:	4013      	ands	r3, r2
 800d936:	683a      	ldr	r2, [r7, #0]
 800d938:	6851      	ldr	r1, [r2, #4]
 800d93a:	683a      	ldr	r2, [r7, #0]
 800d93c:	6892      	ldr	r2, [r2, #8]
 800d93e:	4311      	orrs	r1, r2
 800d940:	683a      	ldr	r2, [r7, #0]
 800d942:	68d2      	ldr	r2, [r2, #12]
 800d944:	4311      	orrs	r1, r2
 800d946:	683a      	ldr	r2, [r7, #0]
 800d948:	6912      	ldr	r2, [r2, #16]
 800d94a:	4311      	orrs	r1, r2
 800d94c:	683a      	ldr	r2, [r7, #0]
 800d94e:	6952      	ldr	r2, [r2, #20]
 800d950:	4311      	orrs	r1, r2
 800d952:	683a      	ldr	r2, [r7, #0]
 800d954:	6992      	ldr	r2, [r2, #24]
 800d956:	4311      	orrs	r1, r2
 800d958:	683a      	ldr	r2, [r7, #0]
 800d95a:	69d2      	ldr	r2, [r2, #28]
 800d95c:	4311      	orrs	r1, r2
 800d95e:	683a      	ldr	r2, [r7, #0]
 800d960:	6a12      	ldr	r2, [r2, #32]
 800d962:	4311      	orrs	r1, r2
 800d964:	683a      	ldr	r2, [r7, #0]
 800d966:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800d968:	430a      	orrs	r2, r1
 800d96a:	431a      	orrs	r2, r3
 800d96c:	687b      	ldr	r3, [r7, #4]
 800d96e:	601a      	str	r2, [r3, #0]
 800d970:	e026      	b.n	800d9c0 <FMC_SDRAM_Init+0xa4>
                Init->ReadBurst          |
                Init->ReadPipeDelay));
  }
  else /* FMC_Bank2_SDRAM */
  {
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 800d972:	687b      	ldr	r3, [r7, #4]
 800d974:	681b      	ldr	r3, [r3, #0]
 800d976:	f423 42f8 	bic.w	r2, r3, #31744	; 0x7c00
 800d97a:	683b      	ldr	r3, [r7, #0]
 800d97c:	69d9      	ldr	r1, [r3, #28]
 800d97e:	683b      	ldr	r3, [r7, #0]
 800d980:	6a1b      	ldr	r3, [r3, #32]
 800d982:	4319      	orrs	r1, r3
 800d984:	683b      	ldr	r3, [r7, #0]
 800d986:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d988:	430b      	orrs	r3, r1
 800d98a:	431a      	orrs	r2, r3
 800d98c:	687b      	ldr	r3, [r7, #4]
 800d98e:	601a      	str	r2, [r3, #0]
               FMC_SDCRx_RPIPE,
               (Init->SDClockPeriod      |
                Init->ReadBurst          |
                Init->ReadPipeDelay));

    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK2],
 800d990:	687b      	ldr	r3, [r7, #4]
 800d992:	685a      	ldr	r2, [r3, #4]
 800d994:	4b0e      	ldr	r3, [pc, #56]	; (800d9d0 <FMC_SDRAM_Init+0xb4>)
 800d996:	4013      	ands	r3, r2
 800d998:	683a      	ldr	r2, [r7, #0]
 800d99a:	6851      	ldr	r1, [r2, #4]
 800d99c:	683a      	ldr	r2, [r7, #0]
 800d99e:	6892      	ldr	r2, [r2, #8]
 800d9a0:	4311      	orrs	r1, r2
 800d9a2:	683a      	ldr	r2, [r7, #0]
 800d9a4:	68d2      	ldr	r2, [r2, #12]
 800d9a6:	4311      	orrs	r1, r2
 800d9a8:	683a      	ldr	r2, [r7, #0]
 800d9aa:	6912      	ldr	r2, [r2, #16]
 800d9ac:	4311      	orrs	r1, r2
 800d9ae:	683a      	ldr	r2, [r7, #0]
 800d9b0:	6952      	ldr	r2, [r2, #20]
 800d9b2:	4311      	orrs	r1, r2
 800d9b4:	683a      	ldr	r2, [r7, #0]
 800d9b6:	6992      	ldr	r2, [r2, #24]
 800d9b8:	430a      	orrs	r2, r1
 800d9ba:	431a      	orrs	r2, r3
 800d9bc:	687b      	ldr	r3, [r7, #4]
 800d9be:	605a      	str	r2, [r3, #4]
                Init->InternalBankNumber |
                Init->CASLatency         |
                Init->WriteProtection));
  }

  return HAL_OK;
 800d9c0:	2300      	movs	r3, #0
}
 800d9c2:	4618      	mov	r0, r3
 800d9c4:	370c      	adds	r7, #12
 800d9c6:	46bd      	mov	sp, r7
 800d9c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d9cc:	4770      	bx	lr
 800d9ce:	bf00      	nop
 800d9d0:	ffff8000 	.word	0xffff8000

0800d9d4 <FMC_SDRAM_Timing_Init>:
  * @param  Bank SDRAM bank number
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Timing_Init(FMC_SDRAM_TypeDef *Device,
                                        FMC_SDRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 800d9d4:	b480      	push	{r7}
 800d9d6:	b085      	sub	sp, #20
 800d9d8:	af00      	add	r7, sp, #0
 800d9da:	60f8      	str	r0, [r7, #12]
 800d9dc:	60b9      	str	r1, [r7, #8]
 800d9de:	607a      	str	r2, [r7, #4]
  assert_param(IS_FMC_RP_DELAY(Timing->RPDelay));
  assert_param(IS_FMC_RCD_DELAY(Timing->RCDDelay));
  assert_param(IS_FMC_SDRAM_BANK(Bank));

  /* Set SDRAM device timing parameters */
  if (Bank == FMC_SDRAM_BANK1)
 800d9e0:	687b      	ldr	r3, [r7, #4]
 800d9e2:	2b00      	cmp	r3, #0
 800d9e4:	d128      	bne.n	800da38 <FMC_SDRAM_Timing_Init+0x64>
  {
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 800d9e6:	68fb      	ldr	r3, [r7, #12]
 800d9e8:	689b      	ldr	r3, [r3, #8]
 800d9ea:	f003 4270 	and.w	r2, r3, #4026531840	; 0xf0000000
 800d9ee:	68bb      	ldr	r3, [r7, #8]
 800d9f0:	681b      	ldr	r3, [r3, #0]
 800d9f2:	1e59      	subs	r1, r3, #1
 800d9f4:	68bb      	ldr	r3, [r7, #8]
 800d9f6:	685b      	ldr	r3, [r3, #4]
 800d9f8:	3b01      	subs	r3, #1
 800d9fa:	011b      	lsls	r3, r3, #4
 800d9fc:	4319      	orrs	r1, r3
 800d9fe:	68bb      	ldr	r3, [r7, #8]
 800da00:	689b      	ldr	r3, [r3, #8]
 800da02:	3b01      	subs	r3, #1
 800da04:	021b      	lsls	r3, r3, #8
 800da06:	4319      	orrs	r1, r3
 800da08:	68bb      	ldr	r3, [r7, #8]
 800da0a:	68db      	ldr	r3, [r3, #12]
 800da0c:	3b01      	subs	r3, #1
 800da0e:	031b      	lsls	r3, r3, #12
 800da10:	4319      	orrs	r1, r3
 800da12:	68bb      	ldr	r3, [r7, #8]
 800da14:	691b      	ldr	r3, [r3, #16]
 800da16:	3b01      	subs	r3, #1
 800da18:	041b      	lsls	r3, r3, #16
 800da1a:	4319      	orrs	r1, r3
 800da1c:	68bb      	ldr	r3, [r7, #8]
 800da1e:	695b      	ldr	r3, [r3, #20]
 800da20:	3b01      	subs	r3, #1
 800da22:	051b      	lsls	r3, r3, #20
 800da24:	4319      	orrs	r1, r3
 800da26:	68bb      	ldr	r3, [r7, #8]
 800da28:	699b      	ldr	r3, [r3, #24]
 800da2a:	3b01      	subs	r3, #1
 800da2c:	061b      	lsls	r3, r3, #24
 800da2e:	430b      	orrs	r3, r1
 800da30:	431a      	orrs	r2, r3
 800da32:	68fb      	ldr	r3, [r7, #12]
 800da34:	609a      	str	r2, [r3, #8]
 800da36:	e02d      	b.n	800da94 <FMC_SDRAM_Timing_Init+0xc0>
                (((Timing->RPDelay) - 1U)              << FMC_SDTRx_TRP_Pos)  |
                (((Timing->RCDDelay) - 1U)             << FMC_SDTRx_TRCD_Pos)));
  }
  else /* FMC_Bank2_SDRAM */
  {
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 800da38:	68fb      	ldr	r3, [r7, #12]
 800da3a:	689a      	ldr	r2, [r3, #8]
 800da3c:	4b19      	ldr	r3, [pc, #100]	; (800daa4 <FMC_SDRAM_Timing_Init+0xd0>)
 800da3e:	4013      	ands	r3, r2
 800da40:	68ba      	ldr	r2, [r7, #8]
 800da42:	68d2      	ldr	r2, [r2, #12]
 800da44:	3a01      	subs	r2, #1
 800da46:	0311      	lsls	r1, r2, #12
 800da48:	68ba      	ldr	r2, [r7, #8]
 800da4a:	6952      	ldr	r2, [r2, #20]
 800da4c:	3a01      	subs	r2, #1
 800da4e:	0512      	lsls	r2, r2, #20
 800da50:	430a      	orrs	r2, r1
 800da52:	431a      	orrs	r2, r3
 800da54:	68fb      	ldr	r3, [r7, #12]
 800da56:	609a      	str	r2, [r3, #8]
               FMC_SDTRx_TRC |
               FMC_SDTRx_TRP,
               (((Timing->RowCycleDelay) - 1U)         << FMC_SDTRx_TRC_Pos)  |
               (((Timing->RPDelay) - 1U)               << FMC_SDTRx_TRP_Pos));

    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK2],
 800da58:	68fb      	ldr	r3, [r7, #12]
 800da5a:	68db      	ldr	r3, [r3, #12]
 800da5c:	f003 4270 	and.w	r2, r3, #4026531840	; 0xf0000000
 800da60:	68bb      	ldr	r3, [r7, #8]
 800da62:	681b      	ldr	r3, [r3, #0]
 800da64:	1e59      	subs	r1, r3, #1
 800da66:	68bb      	ldr	r3, [r7, #8]
 800da68:	685b      	ldr	r3, [r3, #4]
 800da6a:	3b01      	subs	r3, #1
 800da6c:	011b      	lsls	r3, r3, #4
 800da6e:	4319      	orrs	r1, r3
 800da70:	68bb      	ldr	r3, [r7, #8]
 800da72:	689b      	ldr	r3, [r3, #8]
 800da74:	3b01      	subs	r3, #1
 800da76:	021b      	lsls	r3, r3, #8
 800da78:	4319      	orrs	r1, r3
 800da7a:	68bb      	ldr	r3, [r7, #8]
 800da7c:	691b      	ldr	r3, [r3, #16]
 800da7e:	3b01      	subs	r3, #1
 800da80:	041b      	lsls	r3, r3, #16
 800da82:	4319      	orrs	r1, r3
 800da84:	68bb      	ldr	r3, [r7, #8]
 800da86:	699b      	ldr	r3, [r3, #24]
 800da88:	3b01      	subs	r3, #1
 800da8a:	061b      	lsls	r3, r3, #24
 800da8c:	430b      	orrs	r3, r1
 800da8e:	431a      	orrs	r2, r3
 800da90:	68fb      	ldr	r3, [r7, #12]
 800da92:	60da      	str	r2, [r3, #12]
                (((Timing->SelfRefreshTime) - 1U)      << FMC_SDTRx_TRAS_Pos) |
                (((Timing->WriteRecoveryTime) - 1U)    << FMC_SDTRx_TWR_Pos)  |
                (((Timing->RCDDelay) - 1U)             << FMC_SDTRx_TRCD_Pos)));
  }

  return HAL_OK;
 800da94:	2300      	movs	r3, #0
}
 800da96:	4618      	mov	r0, r3
 800da98:	3714      	adds	r7, #20
 800da9a:	46bd      	mov	sp, r7
 800da9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800daa0:	4770      	bx	lr
 800daa2:	bf00      	nop
 800daa4:	ff0f0fff 	.word	0xff0f0fff

0800daa8 <SDMMC_Init>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Init: SDMMC initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_Init(SDMMC_TypeDef *SDMMCx, SDMMC_InitTypeDef Init)
{
 800daa8:	b084      	sub	sp, #16
 800daaa:	b480      	push	{r7}
 800daac:	b085      	sub	sp, #20
 800daae:	af00      	add	r7, sp, #0
 800dab0:	6078      	str	r0, [r7, #4]
 800dab2:	f107 001c 	add.w	r0, r7, #28
 800dab6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0;
 800daba:	2300      	movs	r3, #0
 800dabc:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_BUS_WIDE(Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(Init.ClockDiv));

  /* Set SDMMC configuration parameters */
  tmpreg |= (Init.ClockEdge           | \
 800dabe:	69fa      	ldr	r2, [r7, #28]
             Init.ClockPowerSave      | \
 800dac0:	6a3b      	ldr	r3, [r7, #32]
  tmpreg |= (Init.ClockEdge           | \
 800dac2:	431a      	orrs	r2, r3
             Init.BusWide             | \
 800dac4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
             Init.ClockPowerSave      | \
 800dac6:	431a      	orrs	r2, r3
             Init.HardwareFlowControl | \
 800dac8:	6abb      	ldr	r3, [r7, #40]	; 0x28
             Init.BusWide             | \
 800daca:	431a      	orrs	r2, r3
             Init.ClockDiv
 800dacc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
             Init.HardwareFlowControl | \
 800dace:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           | \
 800dad0:	68fa      	ldr	r2, [r7, #12]
 800dad2:	4313      	orrs	r3, r2
 800dad4:	60fb      	str	r3, [r7, #12]
            );

  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDMMCx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);
 800dad6:	687b      	ldr	r3, [r7, #4]
 800dad8:	685a      	ldr	r2, [r3, #4]
 800dada:	4b07      	ldr	r3, [pc, #28]	; (800daf8 <SDMMC_Init+0x50>)
 800dadc:	4013      	ands	r3, r2
 800dade:	68fa      	ldr	r2, [r7, #12]
 800dae0:	431a      	orrs	r2, r3
 800dae2:	687b      	ldr	r3, [r7, #4]
 800dae4:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 800dae6:	2300      	movs	r3, #0
}
 800dae8:	4618      	mov	r0, r3
 800daea:	3714      	adds	r7, #20
 800daec:	46bd      	mov	sp, r7
 800daee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800daf2:	b004      	add	sp, #16
 800daf4:	4770      	bx	lr
 800daf6:	bf00      	nop
 800daf8:	ffc02c00 	.word	0xffc02c00

0800dafc <SDMMC_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling)
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_ReadFIFO(SDMMC_TypeDef *SDMMCx)
{
 800dafc:	b480      	push	{r7}
 800dafe:	b083      	sub	sp, #12
 800db00:	af00      	add	r7, sp, #0
 800db02:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */
  return (SDMMCx->FIFO);
 800db04:	687b      	ldr	r3, [r7, #4]
 800db06:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
}
 800db0a:	4618      	mov	r0, r3
 800db0c:	370c      	adds	r7, #12
 800db0e:	46bd      	mov	sp, r7
 800db10:	f85d 7b04 	ldr.w	r7, [sp], #4
 800db14:	4770      	bx	lr

0800db16 <SDMMC_WriteFIFO>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  pWriteData: pointer to data to write
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_WriteFIFO(SDMMC_TypeDef *SDMMCx, uint32_t *pWriteData)
{
 800db16:	b480      	push	{r7}
 800db18:	b083      	sub	sp, #12
 800db1a:	af00      	add	r7, sp, #0
 800db1c:	6078      	str	r0, [r7, #4]
 800db1e:	6039      	str	r1, [r7, #0]
  /* Write data to FIFO */
  SDMMCx->FIFO = *pWriteData;
 800db20:	683b      	ldr	r3, [r7, #0]
 800db22:	681a      	ldr	r2, [r3, #0]
 800db24:	687b      	ldr	r3, [r7, #4]
 800db26:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800db2a:	2300      	movs	r3, #0
}
 800db2c:	4618      	mov	r0, r3
 800db2e:	370c      	adds	r7, #12
 800db30:	46bd      	mov	sp, r7
 800db32:	f85d 7b04 	ldr.w	r7, [sp], #4
 800db36:	4770      	bx	lr

0800db38 <SDMMC_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_PowerState_ON(SDMMC_TypeDef *SDMMCx)
{
 800db38:	b480      	push	{r7}
 800db3a:	b083      	sub	sp, #12
 800db3c:	af00      	add	r7, sp, #0
 800db3e:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */
  SDMMCx->POWER |= SDMMC_POWER_PWRCTRL;
 800db40:	687b      	ldr	r3, [r7, #4]
 800db42:	681b      	ldr	r3, [r3, #0]
 800db44:	f043 0203 	orr.w	r2, r3, #3
 800db48:	687b      	ldr	r3, [r7, #4]
 800db4a:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 800db4c:	2300      	movs	r3, #0
}
 800db4e:	4618      	mov	r0, r3
 800db50:	370c      	adds	r7, #12
 800db52:	46bd      	mov	sp, r7
 800db54:	f85d 7b04 	ldr.w	r7, [sp], #4
 800db58:	4770      	bx	lr

0800db5a <SDMMC_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON
  */
uint32_t SDMMC_GetPowerState(SDMMC_TypeDef *SDMMCx)
{
 800db5a:	b480      	push	{r7}
 800db5c:	b083      	sub	sp, #12
 800db5e:	af00      	add	r7, sp, #0
 800db60:	6078      	str	r0, [r7, #4]
  return (SDMMCx->POWER & SDMMC_POWER_PWRCTRL);
 800db62:	687b      	ldr	r3, [r7, #4]
 800db64:	681b      	ldr	r3, [r3, #0]
 800db66:	f003 0303 	and.w	r3, r3, #3
}
 800db6a:	4618      	mov	r0, r3
 800db6c:	370c      	adds	r7, #12
 800db6e:	46bd      	mov	sp, r7
 800db70:	f85d 7b04 	ldr.w	r7, [sp], #4
 800db74:	4770      	bx	lr
	...

0800db78 <SDMMC_SendCommand>:
  * @param  Command: pointer to a SDMMC_CmdInitTypeDef structure that contains
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_SendCommand(SDMMC_TypeDef *SDMMCx, SDMMC_CmdInitTypeDef *Command)
{
 800db78:	b480      	push	{r7}
 800db7a:	b085      	sub	sp, #20
 800db7c:	af00      	add	r7, sp, #0
 800db7e:	6078      	str	r0, [r7, #4]
 800db80:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 800db82:	2300      	movs	r3, #0
 800db84:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_RESPONSE(Command->Response));
  assert_param(IS_SDMMC_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDMMC_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDMMCx->ARG = Command->Argument;
 800db86:	683b      	ldr	r3, [r7, #0]
 800db88:	681a      	ldr	r2, [r3, #0]
 800db8a:	687b      	ldr	r3, [r7, #4]
 800db8c:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         | \
 800db8e:	683b      	ldr	r3, [r7, #0]
 800db90:	685a      	ldr	r2, [r3, #4]
                       Command->Response         | \
 800db92:	683b      	ldr	r3, [r7, #0]
 800db94:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         | \
 800db96:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt | \
 800db98:	683b      	ldr	r3, [r7, #0]
 800db9a:	68db      	ldr	r3, [r3, #12]
                       Command->Response         | \
 800db9c:	431a      	orrs	r2, r3
                       Command->CPSM);
 800db9e:	683b      	ldr	r3, [r7, #0]
 800dba0:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt | \
 800dba2:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         | \
 800dba4:	68fa      	ldr	r2, [r7, #12]
 800dba6:	4313      	orrs	r3, r2
 800dba8:	60fb      	str	r3, [r7, #12]

  /* Write to SDMMC CMD register */
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800dbaa:	687b      	ldr	r3, [r7, #4]
 800dbac:	68da      	ldr	r2, [r3, #12]
 800dbae:	4b06      	ldr	r3, [pc, #24]	; (800dbc8 <SDMMC_SendCommand+0x50>)
 800dbb0:	4013      	ands	r3, r2
 800dbb2:	68fa      	ldr	r2, [r7, #12]
 800dbb4:	431a      	orrs	r2, r3
 800dbb6:	687b      	ldr	r3, [r7, #4]
 800dbb8:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800dbba:	2300      	movs	r3, #0
}
 800dbbc:	4618      	mov	r0, r3
 800dbbe:	3714      	adds	r7, #20
 800dbc0:	46bd      	mov	sp, r7
 800dbc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dbc6:	4770      	bx	lr
 800dbc8:	fffee0c0 	.word	0xfffee0c0

0800dbcc <SDMMC_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDMMC_GetCommandResponse(SDMMC_TypeDef *SDMMCx)
{
 800dbcc:	b480      	push	{r7}
 800dbce:	b083      	sub	sp, #12
 800dbd0:	af00      	add	r7, sp, #0
 800dbd2:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDMMCx->RESPCMD);
 800dbd4:	687b      	ldr	r3, [r7, #4]
 800dbd6:	691b      	ldr	r3, [r3, #16]
 800dbd8:	b2db      	uxtb	r3, r3
}
 800dbda:	4618      	mov	r0, r3
 800dbdc:	370c      	adds	r7, #12
 800dbde:	46bd      	mov	sp, r7
 800dbe0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dbe4:	4770      	bx	lr

0800dbe6 <SDMMC_GetResponse>:
  *            @arg SDMMC_RESP3: Response Register 3
  *            @arg SDMMC_RESP4: Response Register 4
  * @retval The Corresponding response register value
  */
uint32_t SDMMC_GetResponse(SDMMC_TypeDef *SDMMCx, uint32_t Response)
{
 800dbe6:	b480      	push	{r7}
 800dbe8:	b085      	sub	sp, #20
 800dbea:	af00      	add	r7, sp, #0
 800dbec:	6078      	str	r0, [r7, #4]
 800dbee:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDMMC_RESP(Response));

  /* Get the response */
  tmp = (uint32_t)(&(SDMMCx->RESP1)) + Response;
 800dbf0:	687b      	ldr	r3, [r7, #4]
 800dbf2:	3314      	adds	r3, #20
 800dbf4:	461a      	mov	r2, r3
 800dbf6:	683b      	ldr	r3, [r7, #0]
 800dbf8:	4413      	add	r3, r2
 800dbfa:	60fb      	str	r3, [r7, #12]

  return (*(__IO uint32_t *) tmp);
 800dbfc:	68fb      	ldr	r3, [r7, #12]
 800dbfe:	681b      	ldr	r3, [r3, #0]
}
 800dc00:	4618      	mov	r0, r3
 800dc02:	3714      	adds	r7, #20
 800dc04:	46bd      	mov	sp, r7
 800dc06:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dc0a:	4770      	bx	lr

0800dc0c <SDMMC_ConfigData>:
  * @param  Data : pointer to a SDMMC_DataInitTypeDef structure
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_ConfigData(SDMMC_TypeDef *SDMMCx, SDMMC_DataInitTypeDef *Data)
{
 800dc0c:	b480      	push	{r7}
 800dc0e:	b085      	sub	sp, #20
 800dc10:	af00      	add	r7, sp, #0
 800dc12:	6078      	str	r0, [r7, #4]
 800dc14:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 800dc16:	2300      	movs	r3, #0
 800dc18:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDMMC_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDMMC_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDMMCx->DTIMER = Data->DataTimeOut;
 800dc1a:	683b      	ldr	r3, [r7, #0]
 800dc1c:	681a      	ldr	r2, [r3, #0]
 800dc1e:	687b      	ldr	r3, [r7, #4]
 800dc20:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set the SDMMC DataLength value */
  SDMMCx->DLEN = Data->DataLength;
 800dc22:	683b      	ldr	r3, [r7, #0]
 800dc24:	685a      	ldr	r2, [r3, #4]
 800dc26:	687b      	ldr	r3, [r7, #4]
 800dc28:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize | \
 800dc2a:	683b      	ldr	r3, [r7, #0]
 800dc2c:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   | \
 800dc2e:	683b      	ldr	r3, [r7, #0]
 800dc30:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize | \
 800dc32:	431a      	orrs	r2, r3
                       Data->TransferMode  | \
 800dc34:	683b      	ldr	r3, [r7, #0]
 800dc36:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   | \
 800dc38:	431a      	orrs	r2, r3
                       Data->DPSM);
 800dc3a:	683b      	ldr	r3, [r7, #0]
 800dc3c:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  | \
 800dc3e:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize | \
 800dc40:	68fa      	ldr	r2, [r7, #12]
 800dc42:	4313      	orrs	r3, r2
 800dc44:	60fb      	str	r3, [r7, #12]

  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDMMCx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 800dc46:	687b      	ldr	r3, [r7, #4]
 800dc48:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800dc4a:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800dc4e:	68fb      	ldr	r3, [r7, #12]
 800dc50:	431a      	orrs	r2, r3
 800dc52:	687b      	ldr	r3, [r7, #4]
 800dc54:	62da      	str	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 800dc56:	2300      	movs	r3, #0

}
 800dc58:	4618      	mov	r0, r3
 800dc5a:	3714      	adds	r7, #20
 800dc5c:	46bd      	mov	sp, r7
 800dc5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dc62:	4770      	bx	lr

0800dc64 <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Length command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDMMC_TypeDef *SDMMCx, uint32_t BlockSize)
{
 800dc64:	b580      	push	{r7, lr}
 800dc66:	b088      	sub	sp, #32
 800dc68:	af00      	add	r7, sp, #0
 800dc6a:	6078      	str	r0, [r7, #4]
 800dc6c:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 800dc6e:	683b      	ldr	r3, [r7, #0]
 800dc70:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 800dc72:	2310      	movs	r3, #16
 800dc74:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800dc76:	f44f 7380 	mov.w	r3, #256	; 0x100
 800dc7a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800dc7c:	2300      	movs	r3, #0
 800dc7e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800dc80:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800dc84:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800dc86:	f107 0308 	add.w	r3, r7, #8
 800dc8a:	4619      	mov	r1, r3
 800dc8c:	6878      	ldr	r0, [r7, #4]
 800dc8e:	f7ff ff73 	bl	800db78 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SET_BLOCKLEN, SDMMC_CMDTIMEOUT);
 800dc92:	f241 3288 	movw	r2, #5000	; 0x1388
 800dc96:	2110      	movs	r1, #16
 800dc98:	6878      	ldr	r0, [r7, #4]
 800dc9a:	f000 fa5f 	bl	800e15c <SDMMC_GetCmdResp1>
 800dc9e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800dca0:	69fb      	ldr	r3, [r7, #28]
}
 800dca2:	4618      	mov	r0, r3
 800dca4:	3720      	adds	r7, #32
 800dca6:	46bd      	mov	sp, r7
 800dca8:	bd80      	pop	{r7, pc}

0800dcaa <SDMMC_CmdReadSingleBlock>:
  * @brief  Send the Read Single Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadSingleBlock(SDMMC_TypeDef *SDMMCx, uint32_t ReadAdd)
{
 800dcaa:	b580      	push	{r7, lr}
 800dcac:	b088      	sub	sp, #32
 800dcae:	af00      	add	r7, sp, #0
 800dcb0:	6078      	str	r0, [r7, #4]
 800dcb2:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 800dcb4:	683b      	ldr	r3, [r7, #0]
 800dcb6:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_SINGLE_BLOCK;
 800dcb8:	2311      	movs	r3, #17
 800dcba:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800dcbc:	f44f 7380 	mov.w	r3, #256	; 0x100
 800dcc0:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800dcc2:	2300      	movs	r3, #0
 800dcc4:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800dcc6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800dcca:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800dccc:	f107 0308 	add.w	r3, r7, #8
 800dcd0:	4619      	mov	r1, r3
 800dcd2:	6878      	ldr	r0, [r7, #4]
 800dcd4:	f7ff ff50 	bl	800db78 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 800dcd8:	f241 3288 	movw	r2, #5000	; 0x1388
 800dcdc:	2111      	movs	r1, #17
 800dcde:	6878      	ldr	r0, [r7, #4]
 800dce0:	f000 fa3c 	bl	800e15c <SDMMC_GetCmdResp1>
 800dce4:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800dce6:	69fb      	ldr	r3, [r7, #28]
}
 800dce8:	4618      	mov	r0, r3
 800dcea:	3720      	adds	r7, #32
 800dcec:	46bd      	mov	sp, r7
 800dcee:	bd80      	pop	{r7, pc}

0800dcf0 <SDMMC_CmdReadMultiBlock>:
  * @brief  Send the Read Multi Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadMultiBlock(SDMMC_TypeDef *SDMMCx, uint32_t ReadAdd)
{
 800dcf0:	b580      	push	{r7, lr}
 800dcf2:	b088      	sub	sp, #32
 800dcf4:	af00      	add	r7, sp, #0
 800dcf6:	6078      	str	r0, [r7, #4]
 800dcf8:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 800dcfa:	683b      	ldr	r3, [r7, #0]
 800dcfc:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_MULT_BLOCK;
 800dcfe:	2312      	movs	r3, #18
 800dd00:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800dd02:	f44f 7380 	mov.w	r3, #256	; 0x100
 800dd06:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800dd08:	2300      	movs	r3, #0
 800dd0a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800dd0c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800dd10:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800dd12:	f107 0308 	add.w	r3, r7, #8
 800dd16:	4619      	mov	r1, r3
 800dd18:	6878      	ldr	r0, [r7, #4]
 800dd1a:	f7ff ff2d 	bl	800db78 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 800dd1e:	f241 3288 	movw	r2, #5000	; 0x1388
 800dd22:	2112      	movs	r1, #18
 800dd24:	6878      	ldr	r0, [r7, #4]
 800dd26:	f000 fa19 	bl	800e15c <SDMMC_GetCmdResp1>
 800dd2a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800dd2c:	69fb      	ldr	r3, [r7, #28]
}
 800dd2e:	4618      	mov	r0, r3
 800dd30:	3720      	adds	r7, #32
 800dd32:	46bd      	mov	sp, r7
 800dd34:	bd80      	pop	{r7, pc}

0800dd36 <SDMMC_CmdWriteSingleBlock>:
  * @brief  Send the Write Single Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteSingleBlock(SDMMC_TypeDef *SDMMCx, uint32_t WriteAdd)
{
 800dd36:	b580      	push	{r7, lr}
 800dd38:	b088      	sub	sp, #32
 800dd3a:	af00      	add	r7, sp, #0
 800dd3c:	6078      	str	r0, [r7, #4]
 800dd3e:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 800dd40:	683b      	ldr	r3, [r7, #0]
 800dd42:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_SINGLE_BLOCK;
 800dd44:	2318      	movs	r3, #24
 800dd46:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800dd48:	f44f 7380 	mov.w	r3, #256	; 0x100
 800dd4c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800dd4e:	2300      	movs	r3, #0
 800dd50:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800dd52:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800dd56:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800dd58:	f107 0308 	add.w	r3, r7, #8
 800dd5c:	4619      	mov	r1, r3
 800dd5e:	6878      	ldr	r0, [r7, #4]
 800dd60:	f7ff ff0a 	bl	800db78 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 800dd64:	f241 3288 	movw	r2, #5000	; 0x1388
 800dd68:	2118      	movs	r1, #24
 800dd6a:	6878      	ldr	r0, [r7, #4]
 800dd6c:	f000 f9f6 	bl	800e15c <SDMMC_GetCmdResp1>
 800dd70:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800dd72:	69fb      	ldr	r3, [r7, #28]
}
 800dd74:	4618      	mov	r0, r3
 800dd76:	3720      	adds	r7, #32
 800dd78:	46bd      	mov	sp, r7
 800dd7a:	bd80      	pop	{r7, pc}

0800dd7c <SDMMC_CmdWriteMultiBlock>:
  * @brief  Send the Write Multi Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteMultiBlock(SDMMC_TypeDef *SDMMCx, uint32_t WriteAdd)
{
 800dd7c:	b580      	push	{r7, lr}
 800dd7e:	b088      	sub	sp, #32
 800dd80:	af00      	add	r7, sp, #0
 800dd82:	6078      	str	r0, [r7, #4]
 800dd84:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 800dd86:	683b      	ldr	r3, [r7, #0]
 800dd88:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_MULT_BLOCK;
 800dd8a:	2319      	movs	r3, #25
 800dd8c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800dd8e:	f44f 7380 	mov.w	r3, #256	; 0x100
 800dd92:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800dd94:	2300      	movs	r3, #0
 800dd96:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800dd98:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800dd9c:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800dd9e:	f107 0308 	add.w	r3, r7, #8
 800dda2:	4619      	mov	r1, r3
 800dda4:	6878      	ldr	r0, [r7, #4]
 800dda6:	f7ff fee7 	bl	800db78 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 800ddaa:	f241 3288 	movw	r2, #5000	; 0x1388
 800ddae:	2119      	movs	r1, #25
 800ddb0:	6878      	ldr	r0, [r7, #4]
 800ddb2:	f000 f9d3 	bl	800e15c <SDMMC_GetCmdResp1>
 800ddb6:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800ddb8:	69fb      	ldr	r3, [r7, #28]
}
 800ddba:	4618      	mov	r0, r3
 800ddbc:	3720      	adds	r7, #32
 800ddbe:	46bd      	mov	sp, r7
 800ddc0:	bd80      	pop	{r7, pc}
	...

0800ddc4 <SDMMC_CmdStopTransfer>:
  * @brief  Send the Stop Transfer command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdStopTransfer(SDMMC_TypeDef *SDMMCx)
{
 800ddc4:	b580      	push	{r7, lr}
 800ddc6:	b088      	sub	sp, #32
 800ddc8:	af00      	add	r7, sp, #0
 800ddca:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD12 STOP_TRANSMISSION  */
  sdmmc_cmdinit.Argument         = 0U;
 800ddcc:	2300      	movs	r3, #0
 800ddce:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 800ddd0:	230c      	movs	r3, #12
 800ddd2:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800ddd4:	f44f 7380 	mov.w	r3, #256	; 0x100
 800ddd8:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800ddda:	2300      	movs	r3, #0
 800dddc:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800ddde:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800dde2:	61bb      	str	r3, [r7, #24]

  __SDMMC_CMDSTOP_ENABLE(SDMMCx);
 800dde4:	687b      	ldr	r3, [r7, #4]
 800dde6:	68db      	ldr	r3, [r3, #12]
 800dde8:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800ddec:	687b      	ldr	r3, [r7, #4]
 800ddee:	60da      	str	r2, [r3, #12]
  __SDMMC_CMDTRANS_DISABLE(SDMMCx);
 800ddf0:	687b      	ldr	r3, [r7, #4]
 800ddf2:	68db      	ldr	r3, [r3, #12]
 800ddf4:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 800ddf8:	687b      	ldr	r3, [r7, #4]
 800ddfa:	60da      	str	r2, [r3, #12]

  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800ddfc:	f107 0308 	add.w	r3, r7, #8
 800de00:	4619      	mov	r1, r3
 800de02:	6878      	ldr	r0, [r7, #4]
 800de04:	f7ff feb8 	bl	800db78 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_STOP_TRANSMISSION, SDMMC_STOPTRANSFERTIMEOUT);
 800de08:	4a0b      	ldr	r2, [pc, #44]	; (800de38 <SDMMC_CmdStopTransfer+0x74>)
 800de0a:	210c      	movs	r1, #12
 800de0c:	6878      	ldr	r0, [r7, #4]
 800de0e:	f000 f9a5 	bl	800e15c <SDMMC_GetCmdResp1>
 800de12:	61f8      	str	r0, [r7, #28]

  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
 800de14:	687b      	ldr	r3, [r7, #4]
 800de16:	68db      	ldr	r3, [r3, #12]
 800de18:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800de1c:	687b      	ldr	r3, [r7, #4]
 800de1e:	60da      	str	r2, [r3, #12]

  /* Ignore Address Out Of Range Error, Not relevant at end of memory */
  if (errorstate == SDMMC_ERROR_ADDR_OUT_OF_RANGE)
 800de20:	69fb      	ldr	r3, [r7, #28]
 800de22:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800de26:	d101      	bne.n	800de2c <SDMMC_CmdStopTransfer+0x68>
  {
    errorstate = SDMMC_ERROR_NONE;
 800de28:	2300      	movs	r3, #0
 800de2a:	61fb      	str	r3, [r7, #28]
  }

  return errorstate;
 800de2c:	69fb      	ldr	r3, [r7, #28]
}
 800de2e:	4618      	mov	r0, r3
 800de30:	3720      	adds	r7, #32
 800de32:	46bd      	mov	sp, r7
 800de34:	bd80      	pop	{r7, pc}
 800de36:	bf00      	nop
 800de38:	05f5e100 	.word	0x05f5e100

0800de3c <SDMMC_CmdSelDesel>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  addr: Address of the card to be selected
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDMMC_TypeDef *SDMMCx, uint32_t Addr)
{
 800de3c:	b580      	push	{r7, lr}
 800de3e:	b088      	sub	sp, #32
 800de40:	af00      	add	r7, sp, #0
 800de42:	6078      	str	r0, [r7, #4]
 800de44:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 800de46:	683b      	ldr	r3, [r7, #0]
 800de48:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 800de4a:	2307      	movs	r3, #7
 800de4c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800de4e:	f44f 7380 	mov.w	r3, #256	; 0x100
 800de52:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800de54:	2300      	movs	r3, #0
 800de56:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800de58:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800de5c:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800de5e:	f107 0308 	add.w	r3, r7, #8
 800de62:	4619      	mov	r1, r3
 800de64:	6878      	ldr	r0, [r7, #4]
 800de66:	f7ff fe87 	bl	800db78 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEL_DESEL_CARD, SDMMC_CMDTIMEOUT);
 800de6a:	f241 3288 	movw	r2, #5000	; 0x1388
 800de6e:	2107      	movs	r1, #7
 800de70:	6878      	ldr	r0, [r7, #4]
 800de72:	f000 f973 	bl	800e15c <SDMMC_GetCmdResp1>
 800de76:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800de78:	69fb      	ldr	r3, [r7, #28]
}
 800de7a:	4618      	mov	r0, r3
 800de7c:	3720      	adds	r7, #32
 800de7e:	46bd      	mov	sp, r7
 800de80:	bd80      	pop	{r7, pc}

0800de82 <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDMMC_TypeDef *SDMMCx)
{
 800de82:	b580      	push	{r7, lr}
 800de84:	b088      	sub	sp, #32
 800de86:	af00      	add	r7, sp, #0
 800de88:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = 0U;
 800de8a:	2300      	movs	r3, #0
 800de8c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 800de8e:	2300      	movs	r3, #0
 800de90:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_NO;
 800de92:	2300      	movs	r3, #0
 800de94:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800de96:	2300      	movs	r3, #0
 800de98:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800de9a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800de9e:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800dea0:	f107 0308 	add.w	r3, r7, #8
 800dea4:	4619      	mov	r1, r3
 800dea6:	6878      	ldr	r0, [r7, #4]
 800dea8:	f7ff fe66 	bl	800db78 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDMMCx);
 800deac:	6878      	ldr	r0, [r7, #4]
 800deae:	f000 fb97 	bl	800e5e0 <SDMMC_GetCmdError>
 800deb2:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800deb4:	69fb      	ldr	r3, [r7, #28]
}
 800deb6:	4618      	mov	r0, r3
 800deb8:	3720      	adds	r7, #32
 800deba:	46bd      	mov	sp, r7
 800debc:	bd80      	pop	{r7, pc}

0800debe <SDMMC_CmdOperCond>:
  * @brief  Send the Operating Condition command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdOperCond(SDMMC_TypeDef *SDMMCx)
{
 800debe:	b580      	push	{r7, lr}
 800dec0:	b088      	sub	sp, #32
 800dec2:	af00      	add	r7, sp, #0
 800dec4:	6078      	str	r0, [r7, #4]
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 800dec6:	f44f 73d5 	mov.w	r3, #426	; 0x1aa
 800deca:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 800decc:	2308      	movs	r3, #8
 800dece:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800ded0:	f44f 7380 	mov.w	r3, #256	; 0x100
 800ded4:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800ded6:	2300      	movs	r3, #0
 800ded8:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800deda:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800dede:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800dee0:	f107 0308 	add.w	r3, r7, #8
 800dee4:	4619      	mov	r1, r3
 800dee6:	6878      	ldr	r0, [r7, #4]
 800dee8:	f7ff fe46 	bl	800db78 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp7(SDMMCx);
 800deec:	6878      	ldr	r0, [r7, #4]
 800deee:	f000 fb29 	bl	800e544 <SDMMC_GetCmdResp7>
 800def2:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800def4:	69fb      	ldr	r3, [r7, #28]
}
 800def6:	4618      	mov	r0, r3
 800def8:	3720      	adds	r7, #32
 800defa:	46bd      	mov	sp, r7
 800defc:	bd80      	pop	{r7, pc}

0800defe <SDMMC_CmdAppCommand>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800defe:	b580      	push	{r7, lr}
 800df00:	b088      	sub	sp, #32
 800df02:	af00      	add	r7, sp, #0
 800df04:	6078      	str	r0, [r7, #4]
 800df06:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 800df08:	683b      	ldr	r3, [r7, #0]
 800df0a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 800df0c:	2337      	movs	r3, #55	; 0x37
 800df0e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800df10:	f44f 7380 	mov.w	r3, #256	; 0x100
 800df14:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800df16:	2300      	movs	r3, #0
 800df18:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800df1a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800df1e:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800df20:	f107 0308 	add.w	r3, r7, #8
 800df24:	4619      	mov	r1, r3
 800df26:	6878      	ldr	r0, [r7, #4]
 800df28:	f7ff fe26 	bl	800db78 <SDMMC_SendCommand>

  /* Check for error conditions */
  /* If there is a HAL_ERROR, it is a MMC card, else
  it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_CMD, SDMMC_CMDTIMEOUT);
 800df2c:	f241 3288 	movw	r2, #5000	; 0x1388
 800df30:	2137      	movs	r1, #55	; 0x37
 800df32:	6878      	ldr	r0, [r7, #4]
 800df34:	f000 f912 	bl	800e15c <SDMMC_GetCmdResp1>
 800df38:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800df3a:	69fb      	ldr	r3, [r7, #28]
}
 800df3c:	4618      	mov	r0, r3
 800df3e:	3720      	adds	r7, #32
 800df40:	46bd      	mov	sp, r7
 800df42:	bd80      	pop	{r7, pc}

0800df44 <SDMMC_CmdAppOperCommand>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppOperCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800df44:	b580      	push	{r7, lr}
 800df46:	b088      	sub	sp, #32
 800df48:	af00      	add	r7, sp, #0
 800df4a:	6078      	str	r0, [r7, #4]
 800df4c:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = Argument;
 800df4e:	683b      	ldr	r3, [r7, #0]
 800df50:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 800df52:	2329      	movs	r3, #41	; 0x29
 800df54:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800df56:	f44f 7380 	mov.w	r3, #256	; 0x100
 800df5a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800df5c:	2300      	movs	r3, #0
 800df5e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800df60:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800df64:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800df66:	f107 0308 	add.w	r3, r7, #8
 800df6a:	4619      	mov	r1, r3
 800df6c:	6878      	ldr	r0, [r7, #4]
 800df6e:	f7ff fe03 	bl	800db78 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDMMCx);
 800df72:	6878      	ldr	r0, [r7, #4]
 800df74:	f000 fa2e 	bl	800e3d4 <SDMMC_GetCmdResp3>
 800df78:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800df7a:	69fb      	ldr	r3, [r7, #28]
}
 800df7c:	4618      	mov	r0, r3
 800df7e:	3720      	adds	r7, #32
 800df80:	46bd      	mov	sp, r7
 800df82:	bd80      	pop	{r7, pc}

0800df84 <SDMMC_CmdBusWidth>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  BusWidth: BusWidth
  * @retval HAL status
  */
uint32_t SDMMC_CmdBusWidth(SDMMC_TypeDef *SDMMCx, uint32_t BusWidth)
{
 800df84:	b580      	push	{r7, lr}
 800df86:	b088      	sub	sp, #32
 800df88:	af00      	add	r7, sp, #0
 800df8a:	6078      	str	r0, [r7, #4]
 800df8c:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = (uint32_t)BusWidth;
 800df8e:	683b      	ldr	r3, [r7, #0]
 800df90:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_SD_SET_BUSWIDTH;
 800df92:	2306      	movs	r3, #6
 800df94:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800df96:	f44f 7380 	mov.w	r3, #256	; 0x100
 800df9a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800df9c:	2300      	movs	r3, #0
 800df9e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800dfa0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800dfa4:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800dfa6:	f107 0308 	add.w	r3, r7, #8
 800dfaa:	4619      	mov	r1, r3
 800dfac:	6878      	ldr	r0, [r7, #4]
 800dfae:	f7ff fde3 	bl	800db78 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_SD_SET_BUSWIDTH, SDMMC_CMDTIMEOUT);
 800dfb2:	f241 3288 	movw	r2, #5000	; 0x1388
 800dfb6:	2106      	movs	r1, #6
 800dfb8:	6878      	ldr	r0, [r7, #4]
 800dfba:	f000 f8cf 	bl	800e15c <SDMMC_GetCmdResp1>
 800dfbe:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800dfc0:	69fb      	ldr	r3, [r7, #28]
}
 800dfc2:	4618      	mov	r0, r3
 800dfc4:	3720      	adds	r7, #32
 800dfc6:	46bd      	mov	sp, r7
 800dfc8:	bd80      	pop	{r7, pc}

0800dfca <SDMMC_CmdSendSCR>:
  * @brief  Send the Send SCR command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendSCR(SDMMC_TypeDef *SDMMCx)
{
 800dfca:	b580      	push	{r7, lr}
 800dfcc:	b088      	sub	sp, #32
 800dfce:	af00      	add	r7, sp, #0
 800dfd0:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD51 SD_APP_SEND_SCR */
  sdmmc_cmdinit.Argument         = 0U;
 800dfd2:	2300      	movs	r3, #0
 800dfd4:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_SEND_SCR;
 800dfd6:	2333      	movs	r3, #51	; 0x33
 800dfd8:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800dfda:	f44f 7380 	mov.w	r3, #256	; 0x100
 800dfde:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800dfe0:	2300      	movs	r3, #0
 800dfe2:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800dfe4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800dfe8:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800dfea:	f107 0308 	add.w	r3, r7, #8
 800dfee:	4619      	mov	r1, r3
 800dff0:	6878      	ldr	r0, [r7, #4]
 800dff2:	f7ff fdc1 	bl	800db78 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SD_APP_SEND_SCR, SDMMC_CMDTIMEOUT);
 800dff6:	f241 3288 	movw	r2, #5000	; 0x1388
 800dffa:	2133      	movs	r1, #51	; 0x33
 800dffc:	6878      	ldr	r0, [r7, #4]
 800dffe:	f000 f8ad 	bl	800e15c <SDMMC_GetCmdResp1>
 800e002:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800e004:	69fb      	ldr	r3, [r7, #28]
}
 800e006:	4618      	mov	r0, r3
 800e008:	3720      	adds	r7, #32
 800e00a:	46bd      	mov	sp, r7
 800e00c:	bd80      	pop	{r7, pc}

0800e00e <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDMMC_TypeDef *SDMMCx)
{
 800e00e:	b580      	push	{r7, lr}
 800e010:	b088      	sub	sp, #32
 800e012:	af00      	add	r7, sp, #0
 800e014:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0U;
 800e016:	2300      	movs	r3, #0
 800e018:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 800e01a:	2302      	movs	r3, #2
 800e01c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 800e01e:	f44f 7340 	mov.w	r3, #768	; 0x300
 800e022:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800e024:	2300      	movs	r3, #0
 800e026:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800e028:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800e02c:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800e02e:	f107 0308 	add.w	r3, r7, #8
 800e032:	4619      	mov	r1, r3
 800e034:	6878      	ldr	r0, [r7, #4]
 800e036:	f7ff fd9f 	bl	800db78 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 800e03a:	6878      	ldr	r0, [r7, #4]
 800e03c:	f000 f980 	bl	800e340 <SDMMC_GetCmdResp2>
 800e040:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800e042:	69fb      	ldr	r3, [r7, #28]
}
 800e044:	4618      	mov	r0, r3
 800e046:	3720      	adds	r7, #32
 800e048:	46bd      	mov	sp, r7
 800e04a:	bd80      	pop	{r7, pc}

0800e04c <SDMMC_CmdSendCSD>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800e04c:	b580      	push	{r7, lr}
 800e04e:	b088      	sub	sp, #32
 800e050:	af00      	add	r7, sp, #0
 800e052:	6078      	str	r0, [r7, #4]
 800e054:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = Argument;
 800e056:	683b      	ldr	r3, [r7, #0]
 800e058:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 800e05a:	2309      	movs	r3, #9
 800e05c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 800e05e:	f44f 7340 	mov.w	r3, #768	; 0x300
 800e062:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800e064:	2300      	movs	r3, #0
 800e066:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800e068:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800e06c:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800e06e:	f107 0308 	add.w	r3, r7, #8
 800e072:	4619      	mov	r1, r3
 800e074:	6878      	ldr	r0, [r7, #4]
 800e076:	f7ff fd7f 	bl	800db78 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 800e07a:	6878      	ldr	r0, [r7, #4]
 800e07c:	f000 f960 	bl	800e340 <SDMMC_GetCmdResp2>
 800e080:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800e082:	69fb      	ldr	r3, [r7, #28]
}
 800e084:	4618      	mov	r0, r3
 800e086:	3720      	adds	r7, #32
 800e088:	46bd      	mov	sp, r7
 800e08a:	bd80      	pop	{r7, pc}

0800e08c <SDMMC_CmdSetRelAdd>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  pRCA: Card RCA
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDMMC_TypeDef *SDMMCx, uint16_t *pRCA)
{
 800e08c:	b580      	push	{r7, lr}
 800e08e:	b088      	sub	sp, #32
 800e090:	af00      	add	r7, sp, #0
 800e092:	6078      	str	r0, [r7, #4]
 800e094:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0U;
 800e096:	2300      	movs	r3, #0
 800e098:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 800e09a:	2303      	movs	r3, #3
 800e09c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800e09e:	f44f 7380 	mov.w	r3, #256	; 0x100
 800e0a2:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800e0a4:	2300      	movs	r3, #0
 800e0a6:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800e0a8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800e0ac:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800e0ae:	f107 0308 	add.w	r3, r7, #8
 800e0b2:	4619      	mov	r1, r3
 800e0b4:	6878      	ldr	r0, [r7, #4]
 800e0b6:	f7ff fd5f 	bl	800db78 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDMMCx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 800e0ba:	683a      	ldr	r2, [r7, #0]
 800e0bc:	2103      	movs	r1, #3
 800e0be:	6878      	ldr	r0, [r7, #4]
 800e0c0:	f000 f9c8 	bl	800e454 <SDMMC_GetCmdResp6>
 800e0c4:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800e0c6:	69fb      	ldr	r3, [r7, #28]
}
 800e0c8:	4618      	mov	r0, r3
 800e0ca:	3720      	adds	r7, #32
 800e0cc:	46bd      	mov	sp, r7
 800e0ce:	bd80      	pop	{r7, pc}

0800e0d0 <SDMMC_CmdSendStatus>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendStatus(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800e0d0:	b580      	push	{r7, lr}
 800e0d2:	b088      	sub	sp, #32
 800e0d4:	af00      	add	r7, sp, #0
 800e0d6:	6078      	str	r0, [r7, #4]
 800e0d8:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = Argument;
 800e0da:	683b      	ldr	r3, [r7, #0]
 800e0dc:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 800e0de:	230d      	movs	r3, #13
 800e0e0:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800e0e2:	f44f 7380 	mov.w	r3, #256	; 0x100
 800e0e6:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800e0e8:	2300      	movs	r3, #0
 800e0ea:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800e0ec:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800e0f0:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800e0f2:	f107 0308 	add.w	r3, r7, #8
 800e0f6:	4619      	mov	r1, r3
 800e0f8:	6878      	ldr	r0, [r7, #4]
 800e0fa:	f7ff fd3d 	bl	800db78 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEND_STATUS, SDMMC_CMDTIMEOUT);
 800e0fe:	f241 3288 	movw	r2, #5000	; 0x1388
 800e102:	210d      	movs	r1, #13
 800e104:	6878      	ldr	r0, [r7, #4]
 800e106:	f000 f829 	bl	800e15c <SDMMC_GetCmdResp1>
 800e10a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800e10c:	69fb      	ldr	r3, [r7, #28]
}
 800e10e:	4618      	mov	r0, r3
 800e110:	3720      	adds	r7, #32
 800e112:	46bd      	mov	sp, r7
 800e114:	bd80      	pop	{r7, pc}

0800e116 <SDMMC_CmdStatusRegister>:
  * @brief  Send the Status register command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdStatusRegister(SDMMC_TypeDef *SDMMCx)
{
 800e116:	b580      	push	{r7, lr}
 800e118:	b088      	sub	sp, #32
 800e11a:	af00      	add	r7, sp, #0
 800e11c:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = 0U;
 800e11e:	2300      	movs	r3, #0
 800e120:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_STATUS;
 800e122:	230d      	movs	r3, #13
 800e124:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800e126:	f44f 7380 	mov.w	r3, #256	; 0x100
 800e12a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800e12c:	2300      	movs	r3, #0
 800e12e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800e130:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800e134:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800e136:	f107 0308 	add.w	r3, r7, #8
 800e13a:	4619      	mov	r1, r3
 800e13c:	6878      	ldr	r0, [r7, #4]
 800e13e:	f7ff fd1b 	bl	800db78 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SD_APP_STATUS, SDMMC_CMDTIMEOUT);
 800e142:	f241 3288 	movw	r2, #5000	; 0x1388
 800e146:	210d      	movs	r1, #13
 800e148:	6878      	ldr	r0, [r7, #4]
 800e14a:	f000 f807 	bl	800e15c <SDMMC_GetCmdResp1>
 800e14e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800e150:	69fb      	ldr	r3, [r7, #28]
}
 800e152:	4618      	mov	r0, r3
 800e154:	3720      	adds	r7, #32
 800e156:	46bd      	mov	sp, r7
 800e158:	bd80      	pop	{r7, pc}
	...

0800e15c <SDMMC_GetCmdResp1>:
  * @param  hsd: SD handle
  * @param  SD_CMD: The sent command index
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp1(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint32_t Timeout)
{
 800e15c:	b580      	push	{r7, lr}
 800e15e:	b088      	sub	sp, #32
 800e160:	af00      	add	r7, sp, #0
 800e162:	60f8      	str	r0, [r7, #12]
 800e164:	460b      	mov	r3, r1
 800e166:	607a      	str	r2, [r7, #4]
 800e168:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 800e16a:	4b70      	ldr	r3, [pc, #448]	; (800e32c <SDMMC_GetCmdResp1+0x1d0>)
 800e16c:	681b      	ldr	r3, [r3, #0]
 800e16e:	4a70      	ldr	r2, [pc, #448]	; (800e330 <SDMMC_GetCmdResp1+0x1d4>)
 800e170:	fba2 2303 	umull	r2, r3, r2, r3
 800e174:	0a5a      	lsrs	r2, r3, #9
 800e176:	687b      	ldr	r3, [r7, #4]
 800e178:	fb02 f303 	mul.w	r3, r2, r3
 800e17c:	61fb      	str	r3, [r7, #28]

  do
  {
    if (count-- == 0U)
 800e17e:	69fb      	ldr	r3, [r7, #28]
 800e180:	1e5a      	subs	r2, r3, #1
 800e182:	61fa      	str	r2, [r7, #28]
 800e184:	2b00      	cmp	r3, #0
 800e186:	d102      	bne.n	800e18e <SDMMC_GetCmdResp1+0x32>
    {
      return SDMMC_ERROR_TIMEOUT;
 800e188:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800e18c:	e0c9      	b.n	800e322 <SDMMC_GetCmdResp1+0x1c6>
    }
    sta_reg = SDMMCx->STA;
 800e18e:	68fb      	ldr	r3, [r7, #12]
 800e190:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e192:	61bb      	str	r3, [r7, #24]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT |
 800e194:	69ba      	ldr	r2, [r7, #24]
 800e196:	4b67      	ldr	r3, [pc, #412]	; (800e334 <SDMMC_GetCmdResp1+0x1d8>)
 800e198:	4013      	ands	r3, r2
                        SDMMC_FLAG_BUSYD0END)) == 0U) || ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 800e19a:	2b00      	cmp	r3, #0
 800e19c:	d0ef      	beq.n	800e17e <SDMMC_GetCmdResp1+0x22>
 800e19e:	69bb      	ldr	r3, [r7, #24]
 800e1a0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800e1a4:	2b00      	cmp	r3, #0
 800e1a6:	d1ea      	bne.n	800e17e <SDMMC_GetCmdResp1+0x22>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800e1a8:	68fb      	ldr	r3, [r7, #12]
 800e1aa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e1ac:	f003 0304 	and.w	r3, r3, #4
 800e1b0:	2b00      	cmp	r3, #0
 800e1b2:	d004      	beq.n	800e1be <SDMMC_GetCmdResp1+0x62>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800e1b4:	68fb      	ldr	r3, [r7, #12]
 800e1b6:	2204      	movs	r2, #4
 800e1b8:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800e1ba:	2304      	movs	r3, #4
 800e1bc:	e0b1      	b.n	800e322 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800e1be:	68fb      	ldr	r3, [r7, #12]
 800e1c0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e1c2:	f003 0301 	and.w	r3, r3, #1
 800e1c6:	2b00      	cmp	r3, #0
 800e1c8:	d004      	beq.n	800e1d4 <SDMMC_GetCmdResp1+0x78>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800e1ca:	68fb      	ldr	r3, [r7, #12]
 800e1cc:	2201      	movs	r2, #1
 800e1ce:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 800e1d0:	2301      	movs	r3, #1
 800e1d2:	e0a6      	b.n	800e322 <SDMMC_GetCmdResp1+0x1c6>
  {
    /* Nothing to do */
  }

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800e1d4:	68fb      	ldr	r3, [r7, #12]
 800e1d6:	4a58      	ldr	r2, [pc, #352]	; (800e338 <SDMMC_GetCmdResp1+0x1dc>)
 800e1d8:	639a      	str	r2, [r3, #56]	; 0x38

  /* Check response received is of desired command */
  if (SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 800e1da:	68f8      	ldr	r0, [r7, #12]
 800e1dc:	f7ff fcf6 	bl	800dbcc <SDMMC_GetCommandResponse>
 800e1e0:	4603      	mov	r3, r0
 800e1e2:	461a      	mov	r2, r3
 800e1e4:	7afb      	ldrb	r3, [r7, #11]
 800e1e6:	4293      	cmp	r3, r2
 800e1e8:	d001      	beq.n	800e1ee <SDMMC_GetCmdResp1+0x92>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800e1ea:	2301      	movs	r3, #1
 800e1ec:	e099      	b.n	800e322 <SDMMC_GetCmdResp1+0x1c6>
  }

  /* We have received response, retrieve it for analysis  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 800e1ee:	2100      	movs	r1, #0
 800e1f0:	68f8      	ldr	r0, [r7, #12]
 800e1f2:	f7ff fcf8 	bl	800dbe6 <SDMMC_GetResponse>
 800e1f6:	6178      	str	r0, [r7, #20]

  if ((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 800e1f8:	697a      	ldr	r2, [r7, #20]
 800e1fa:	4b50      	ldr	r3, [pc, #320]	; (800e33c <SDMMC_GetCmdResp1+0x1e0>)
 800e1fc:	4013      	ands	r3, r2
 800e1fe:	2b00      	cmp	r3, #0
 800e200:	d101      	bne.n	800e206 <SDMMC_GetCmdResp1+0xaa>
  {
    return SDMMC_ERROR_NONE;
 800e202:	2300      	movs	r3, #0
 800e204:	e08d      	b.n	800e322 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 800e206:	697b      	ldr	r3, [r7, #20]
 800e208:	2b00      	cmp	r3, #0
 800e20a:	da02      	bge.n	800e212 <SDMMC_GetCmdResp1+0xb6>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 800e20c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800e210:	e087      	b.n	800e322 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 800e212:	697b      	ldr	r3, [r7, #20]
 800e214:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800e218:	2b00      	cmp	r3, #0
 800e21a:	d001      	beq.n	800e220 <SDMMC_GetCmdResp1+0xc4>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 800e21c:	2340      	movs	r3, #64	; 0x40
 800e21e:	e080      	b.n	800e322 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 800e220:	697b      	ldr	r3, [r7, #20]
 800e222:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800e226:	2b00      	cmp	r3, #0
 800e228:	d001      	beq.n	800e22e <SDMMC_GetCmdResp1+0xd2>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 800e22a:	2380      	movs	r3, #128	; 0x80
 800e22c:	e079      	b.n	800e322 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 800e22e:	697b      	ldr	r3, [r7, #20]
 800e230:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800e234:	2b00      	cmp	r3, #0
 800e236:	d002      	beq.n	800e23e <SDMMC_GetCmdResp1+0xe2>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 800e238:	f44f 7380 	mov.w	r3, #256	; 0x100
 800e23c:	e071      	b.n	800e322 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 800e23e:	697b      	ldr	r3, [r7, #20]
 800e240:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800e244:	2b00      	cmp	r3, #0
 800e246:	d002      	beq.n	800e24e <SDMMC_GetCmdResp1+0xf2>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 800e248:	f44f 7300 	mov.w	r3, #512	; 0x200
 800e24c:	e069      	b.n	800e322 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 800e24e:	697b      	ldr	r3, [r7, #20]
 800e250:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800e254:	2b00      	cmp	r3, #0
 800e256:	d002      	beq.n	800e25e <SDMMC_GetCmdResp1+0x102>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 800e258:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800e25c:	e061      	b.n	800e322 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 800e25e:	697b      	ldr	r3, [r7, #20]
 800e260:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800e264:	2b00      	cmp	r3, #0
 800e266:	d002      	beq.n	800e26e <SDMMC_GetCmdResp1+0x112>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 800e268:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800e26c:	e059      	b.n	800e322 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 800e26e:	697b      	ldr	r3, [r7, #20]
 800e270:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800e274:	2b00      	cmp	r3, #0
 800e276:	d002      	beq.n	800e27e <SDMMC_GetCmdResp1+0x122>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 800e278:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800e27c:	e051      	b.n	800e322 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 800e27e:	697b      	ldr	r3, [r7, #20]
 800e280:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800e284:	2b00      	cmp	r3, #0
 800e286:	d002      	beq.n	800e28e <SDMMC_GetCmdResp1+0x132>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 800e288:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800e28c:	e049      	b.n	800e322 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 800e28e:	697b      	ldr	r3, [r7, #20]
 800e290:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800e294:	2b00      	cmp	r3, #0
 800e296:	d002      	beq.n	800e29e <SDMMC_GetCmdResp1+0x142>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 800e298:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800e29c:	e041      	b.n	800e322 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 800e29e:	697b      	ldr	r3, [r7, #20]
 800e2a0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800e2a4:	2b00      	cmp	r3, #0
 800e2a6:	d002      	beq.n	800e2ae <SDMMC_GetCmdResp1+0x152>
  {
    return SDMMC_ERROR_CC_ERR;
 800e2a8:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800e2ac:	e039      	b.n	800e322 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 800e2ae:	697b      	ldr	r3, [r7, #20]
 800e2b0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800e2b4:	2b00      	cmp	r3, #0
 800e2b6:	d002      	beq.n	800e2be <SDMMC_GetCmdResp1+0x162>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 800e2b8:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800e2bc:	e031      	b.n	800e322 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 800e2be:	697b      	ldr	r3, [r7, #20]
 800e2c0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800e2c4:	2b00      	cmp	r3, #0
 800e2c6:	d002      	beq.n	800e2ce <SDMMC_GetCmdResp1+0x172>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 800e2c8:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 800e2cc:	e029      	b.n	800e322 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 800e2ce:	697b      	ldr	r3, [r7, #20]
 800e2d0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800e2d4:	2b00      	cmp	r3, #0
 800e2d6:	d002      	beq.n	800e2de <SDMMC_GetCmdResp1+0x182>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 800e2d8:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800e2dc:	e021      	b.n	800e322 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 800e2de:	697b      	ldr	r3, [r7, #20]
 800e2e0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800e2e4:	2b00      	cmp	r3, #0
 800e2e6:	d002      	beq.n	800e2ee <SDMMC_GetCmdResp1+0x192>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 800e2e8:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800e2ec:	e019      	b.n	800e322 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 800e2ee:	697b      	ldr	r3, [r7, #20]
 800e2f0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800e2f4:	2b00      	cmp	r3, #0
 800e2f6:	d002      	beq.n	800e2fe <SDMMC_GetCmdResp1+0x1a2>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 800e2f8:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800e2fc:	e011      	b.n	800e322 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 800e2fe:	697b      	ldr	r3, [r7, #20]
 800e300:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800e304:	2b00      	cmp	r3, #0
 800e306:	d002      	beq.n	800e30e <SDMMC_GetCmdResp1+0x1b2>
  {
    return SDMMC_ERROR_ERASE_RESET;
 800e308:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800e30c:	e009      	b.n	800e322 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 800e30e:	697b      	ldr	r3, [r7, #20]
 800e310:	f003 0308 	and.w	r3, r3, #8
 800e314:	2b00      	cmp	r3, #0
 800e316:	d002      	beq.n	800e31e <SDMMC_GetCmdResp1+0x1c2>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 800e318:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 800e31c:	e001      	b.n	800e322 <SDMMC_GetCmdResp1+0x1c6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800e31e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 800e322:	4618      	mov	r0, r3
 800e324:	3720      	adds	r7, #32
 800e326:	46bd      	mov	sp, r7
 800e328:	bd80      	pop	{r7, pc}
 800e32a:	bf00      	nop
 800e32c:	24000000 	.word	0x24000000
 800e330:	10624dd3 	.word	0x10624dd3
 800e334:	00200045 	.word	0x00200045
 800e338:	002000c5 	.word	0x002000c5
 800e33c:	fdffe008 	.word	0xfdffe008

0800e340 <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp2(SDMMC_TypeDef *SDMMCx)
{
 800e340:	b480      	push	{r7}
 800e342:	b085      	sub	sp, #20
 800e344:	af00      	add	r7, sp, #0
 800e346:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 800e348:	4b1f      	ldr	r3, [pc, #124]	; (800e3c8 <SDMMC_GetCmdResp2+0x88>)
 800e34a:	681b      	ldr	r3, [r3, #0]
 800e34c:	4a1f      	ldr	r2, [pc, #124]	; (800e3cc <SDMMC_GetCmdResp2+0x8c>)
 800e34e:	fba2 2303 	umull	r2, r3, r2, r3
 800e352:	0a5b      	lsrs	r3, r3, #9
 800e354:	f241 3288 	movw	r2, #5000	; 0x1388
 800e358:	fb02 f303 	mul.w	r3, r2, r3
 800e35c:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 800e35e:	68fb      	ldr	r3, [r7, #12]
 800e360:	1e5a      	subs	r2, r3, #1
 800e362:	60fa      	str	r2, [r7, #12]
 800e364:	2b00      	cmp	r3, #0
 800e366:	d102      	bne.n	800e36e <SDMMC_GetCmdResp2+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800e368:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800e36c:	e026      	b.n	800e3bc <SDMMC_GetCmdResp2+0x7c>
    }
    sta_reg = SDMMCx->STA;
 800e36e:	687b      	ldr	r3, [r7, #4]
 800e370:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e372:	60bb      	str	r3, [r7, #8]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800e374:	68bb      	ldr	r3, [r7, #8]
 800e376:	f003 0345 	and.w	r3, r3, #69	; 0x45
           ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 800e37a:	2b00      	cmp	r3, #0
 800e37c:	d0ef      	beq.n	800e35e <SDMMC_GetCmdResp2+0x1e>
 800e37e:	68bb      	ldr	r3, [r7, #8]
 800e380:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800e384:	2b00      	cmp	r3, #0
 800e386:	d1ea      	bne.n	800e35e <SDMMC_GetCmdResp2+0x1e>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800e388:	687b      	ldr	r3, [r7, #4]
 800e38a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e38c:	f003 0304 	and.w	r3, r3, #4
 800e390:	2b00      	cmp	r3, #0
 800e392:	d004      	beq.n	800e39e <SDMMC_GetCmdResp2+0x5e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800e394:	687b      	ldr	r3, [r7, #4]
 800e396:	2204      	movs	r2, #4
 800e398:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800e39a:	2304      	movs	r3, #4
 800e39c:	e00e      	b.n	800e3bc <SDMMC_GetCmdResp2+0x7c>
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800e39e:	687b      	ldr	r3, [r7, #4]
 800e3a0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e3a2:	f003 0301 	and.w	r3, r3, #1
 800e3a6:	2b00      	cmp	r3, #0
 800e3a8:	d004      	beq.n	800e3b4 <SDMMC_GetCmdResp2+0x74>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800e3aa:	687b      	ldr	r3, [r7, #4]
 800e3ac:	2201      	movs	r2, #1
 800e3ae:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 800e3b0:	2301      	movs	r3, #1
 800e3b2:	e003      	b.n	800e3bc <SDMMC_GetCmdResp2+0x7c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800e3b4:	687b      	ldr	r3, [r7, #4]
 800e3b6:	4a06      	ldr	r2, [pc, #24]	; (800e3d0 <SDMMC_GetCmdResp2+0x90>)
 800e3b8:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 800e3ba:	2300      	movs	r3, #0
}
 800e3bc:	4618      	mov	r0, r3
 800e3be:	3714      	adds	r7, #20
 800e3c0:	46bd      	mov	sp, r7
 800e3c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e3c6:	4770      	bx	lr
 800e3c8:	24000000 	.word	0x24000000
 800e3cc:	10624dd3 	.word	0x10624dd3
 800e3d0:	002000c5 	.word	0x002000c5

0800e3d4 <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp3(SDMMC_TypeDef *SDMMCx)
{
 800e3d4:	b480      	push	{r7}
 800e3d6:	b085      	sub	sp, #20
 800e3d8:	af00      	add	r7, sp, #0
 800e3da:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 800e3dc:	4b1a      	ldr	r3, [pc, #104]	; (800e448 <SDMMC_GetCmdResp3+0x74>)
 800e3de:	681b      	ldr	r3, [r3, #0]
 800e3e0:	4a1a      	ldr	r2, [pc, #104]	; (800e44c <SDMMC_GetCmdResp3+0x78>)
 800e3e2:	fba2 2303 	umull	r2, r3, r2, r3
 800e3e6:	0a5b      	lsrs	r3, r3, #9
 800e3e8:	f241 3288 	movw	r2, #5000	; 0x1388
 800e3ec:	fb02 f303 	mul.w	r3, r2, r3
 800e3f0:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 800e3f2:	68fb      	ldr	r3, [r7, #12]
 800e3f4:	1e5a      	subs	r2, r3, #1
 800e3f6:	60fa      	str	r2, [r7, #12]
 800e3f8:	2b00      	cmp	r3, #0
 800e3fa:	d102      	bne.n	800e402 <SDMMC_GetCmdResp3+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800e3fc:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800e400:	e01b      	b.n	800e43a <SDMMC_GetCmdResp3+0x66>
    }
    sta_reg = SDMMCx->STA;
 800e402:	687b      	ldr	r3, [r7, #4]
 800e404:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e406:	60bb      	str	r3, [r7, #8]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800e408:	68bb      	ldr	r3, [r7, #8]
 800e40a:	f003 0345 	and.w	r3, r3, #69	; 0x45
           ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 800e40e:	2b00      	cmp	r3, #0
 800e410:	d0ef      	beq.n	800e3f2 <SDMMC_GetCmdResp3+0x1e>
 800e412:	68bb      	ldr	r3, [r7, #8]
 800e414:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800e418:	2b00      	cmp	r3, #0
 800e41a:	d1ea      	bne.n	800e3f2 <SDMMC_GetCmdResp3+0x1e>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800e41c:	687b      	ldr	r3, [r7, #4]
 800e41e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e420:	f003 0304 	and.w	r3, r3, #4
 800e424:	2b00      	cmp	r3, #0
 800e426:	d004      	beq.n	800e432 <SDMMC_GetCmdResp3+0x5e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800e428:	687b      	ldr	r3, [r7, #4]
 800e42a:	2204      	movs	r2, #4
 800e42c:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800e42e:	2304      	movs	r3, #4
 800e430:	e003      	b.n	800e43a <SDMMC_GetCmdResp3+0x66>
  }
  else
  {
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800e432:	687b      	ldr	r3, [r7, #4]
 800e434:	4a06      	ldr	r2, [pc, #24]	; (800e450 <SDMMC_GetCmdResp3+0x7c>)
 800e436:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 800e438:	2300      	movs	r3, #0
}
 800e43a:	4618      	mov	r0, r3
 800e43c:	3714      	adds	r7, #20
 800e43e:	46bd      	mov	sp, r7
 800e440:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e444:	4770      	bx	lr
 800e446:	bf00      	nop
 800e448:	24000000 	.word	0x24000000
 800e44c:	10624dd3 	.word	0x10624dd3
 800e450:	002000c5 	.word	0x002000c5

0800e454 <SDMMC_GetCmdResp6>:
  * @param  pRCA: Pointer to the variable that will contain the SD card relative
  *         address RCA
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp6(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint16_t *pRCA)
{
 800e454:	b580      	push	{r7, lr}
 800e456:	b088      	sub	sp, #32
 800e458:	af00      	add	r7, sp, #0
 800e45a:	60f8      	str	r0, [r7, #12]
 800e45c:	460b      	mov	r3, r1
 800e45e:	607a      	str	r2, [r7, #4]
 800e460:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 800e462:	4b35      	ldr	r3, [pc, #212]	; (800e538 <SDMMC_GetCmdResp6+0xe4>)
 800e464:	681b      	ldr	r3, [r3, #0]
 800e466:	4a35      	ldr	r2, [pc, #212]	; (800e53c <SDMMC_GetCmdResp6+0xe8>)
 800e468:	fba2 2303 	umull	r2, r3, r2, r3
 800e46c:	0a5b      	lsrs	r3, r3, #9
 800e46e:	f241 3288 	movw	r2, #5000	; 0x1388
 800e472:	fb02 f303 	mul.w	r3, r2, r3
 800e476:	61fb      	str	r3, [r7, #28]

  do
  {
    if (count-- == 0U)
 800e478:	69fb      	ldr	r3, [r7, #28]
 800e47a:	1e5a      	subs	r2, r3, #1
 800e47c:	61fa      	str	r2, [r7, #28]
 800e47e:	2b00      	cmp	r3, #0
 800e480:	d102      	bne.n	800e488 <SDMMC_GetCmdResp6+0x34>
    {
      return SDMMC_ERROR_TIMEOUT;
 800e482:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800e486:	e052      	b.n	800e52e <SDMMC_GetCmdResp6+0xda>
    }
    sta_reg = SDMMCx->STA;
 800e488:	68fb      	ldr	r3, [r7, #12]
 800e48a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e48c:	61bb      	str	r3, [r7, #24]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800e48e:	69bb      	ldr	r3, [r7, #24]
 800e490:	f003 0345 	and.w	r3, r3, #69	; 0x45
           ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 800e494:	2b00      	cmp	r3, #0
 800e496:	d0ef      	beq.n	800e478 <SDMMC_GetCmdResp6+0x24>
 800e498:	69bb      	ldr	r3, [r7, #24]
 800e49a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800e49e:	2b00      	cmp	r3, #0
 800e4a0:	d1ea      	bne.n	800e478 <SDMMC_GetCmdResp6+0x24>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800e4a2:	68fb      	ldr	r3, [r7, #12]
 800e4a4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e4a6:	f003 0304 	and.w	r3, r3, #4
 800e4aa:	2b00      	cmp	r3, #0
 800e4ac:	d004      	beq.n	800e4b8 <SDMMC_GetCmdResp6+0x64>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800e4ae:	68fb      	ldr	r3, [r7, #12]
 800e4b0:	2204      	movs	r2, #4
 800e4b2:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800e4b4:	2304      	movs	r3, #4
 800e4b6:	e03a      	b.n	800e52e <SDMMC_GetCmdResp6+0xda>
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800e4b8:	68fb      	ldr	r3, [r7, #12]
 800e4ba:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e4bc:	f003 0301 	and.w	r3, r3, #1
 800e4c0:	2b00      	cmp	r3, #0
 800e4c2:	d004      	beq.n	800e4ce <SDMMC_GetCmdResp6+0x7a>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800e4c4:	68fb      	ldr	r3, [r7, #12]
 800e4c6:	2201      	movs	r2, #1
 800e4c8:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 800e4ca:	2301      	movs	r3, #1
 800e4cc:	e02f      	b.n	800e52e <SDMMC_GetCmdResp6+0xda>
  {
    /* Nothing to do */
  }

  /* Check response received is of desired command */
  if (SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 800e4ce:	68f8      	ldr	r0, [r7, #12]
 800e4d0:	f7ff fb7c 	bl	800dbcc <SDMMC_GetCommandResponse>
 800e4d4:	4603      	mov	r3, r0
 800e4d6:	461a      	mov	r2, r3
 800e4d8:	7afb      	ldrb	r3, [r7, #11]
 800e4da:	4293      	cmp	r3, r2
 800e4dc:	d001      	beq.n	800e4e2 <SDMMC_GetCmdResp6+0x8e>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800e4de:	2301      	movs	r3, #1
 800e4e0:	e025      	b.n	800e52e <SDMMC_GetCmdResp6+0xda>
  }

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800e4e2:	68fb      	ldr	r3, [r7, #12]
 800e4e4:	4a16      	ldr	r2, [pc, #88]	; (800e540 <SDMMC_GetCmdResp6+0xec>)
 800e4e6:	639a      	str	r2, [r3, #56]	; 0x38

  /* We have received response, retrieve it.  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 800e4e8:	2100      	movs	r1, #0
 800e4ea:	68f8      	ldr	r0, [r7, #12]
 800e4ec:	f7ff fb7b 	bl	800dbe6 <SDMMC_GetResponse>
 800e4f0:	6178      	str	r0, [r7, #20]

  if ((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD |
 800e4f2:	697b      	ldr	r3, [r7, #20]
 800e4f4:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 800e4f8:	2b00      	cmp	r3, #0
 800e4fa:	d106      	bne.n	800e50a <SDMMC_GetCmdResp6+0xb6>
                      SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
  {
    *pRCA = (uint16_t)(response_r1 >> 16);
 800e4fc:	697b      	ldr	r3, [r7, #20]
 800e4fe:	0c1b      	lsrs	r3, r3, #16
 800e500:	b29a      	uxth	r2, r3
 800e502:	687b      	ldr	r3, [r7, #4]
 800e504:	801a      	strh	r2, [r3, #0]

    return SDMMC_ERROR_NONE;
 800e506:	2300      	movs	r3, #0
 800e508:	e011      	b.n	800e52e <SDMMC_GetCmdResp6+0xda>
  }
  else if ((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 800e50a:	697b      	ldr	r3, [r7, #20]
 800e50c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800e510:	2b00      	cmp	r3, #0
 800e512:	d002      	beq.n	800e51a <SDMMC_GetCmdResp6+0xc6>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 800e514:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800e518:	e009      	b.n	800e52e <SDMMC_GetCmdResp6+0xda>
  }
  else if ((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 800e51a:	697b      	ldr	r3, [r7, #20]
 800e51c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800e520:	2b00      	cmp	r3, #0
 800e522:	d002      	beq.n	800e52a <SDMMC_GetCmdResp6+0xd6>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 800e524:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800e528:	e001      	b.n	800e52e <SDMMC_GetCmdResp6+0xda>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800e52a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 800e52e:	4618      	mov	r0, r3
 800e530:	3720      	adds	r7, #32
 800e532:	46bd      	mov	sp, r7
 800e534:	bd80      	pop	{r7, pc}
 800e536:	bf00      	nop
 800e538:	24000000 	.word	0x24000000
 800e53c:	10624dd3 	.word	0x10624dd3
 800e540:	002000c5 	.word	0x002000c5

0800e544 <SDMMC_GetCmdResp7>:
  * @brief  Checks for error conditions for R7 response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp7(SDMMC_TypeDef *SDMMCx)
{
 800e544:	b480      	push	{r7}
 800e546:	b085      	sub	sp, #20
 800e548:	af00      	add	r7, sp, #0
 800e54a:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 800e54c:	4b22      	ldr	r3, [pc, #136]	; (800e5d8 <SDMMC_GetCmdResp7+0x94>)
 800e54e:	681b      	ldr	r3, [r3, #0]
 800e550:	4a22      	ldr	r2, [pc, #136]	; (800e5dc <SDMMC_GetCmdResp7+0x98>)
 800e552:	fba2 2303 	umull	r2, r3, r2, r3
 800e556:	0a5b      	lsrs	r3, r3, #9
 800e558:	f241 3288 	movw	r2, #5000	; 0x1388
 800e55c:	fb02 f303 	mul.w	r3, r2, r3
 800e560:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 800e562:	68fb      	ldr	r3, [r7, #12]
 800e564:	1e5a      	subs	r2, r3, #1
 800e566:	60fa      	str	r2, [r7, #12]
 800e568:	2b00      	cmp	r3, #0
 800e56a:	d102      	bne.n	800e572 <SDMMC_GetCmdResp7+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800e56c:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800e570:	e02c      	b.n	800e5cc <SDMMC_GetCmdResp7+0x88>
    }
    sta_reg = SDMMCx->STA;
 800e572:	687b      	ldr	r3, [r7, #4]
 800e574:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e576:	60bb      	str	r3, [r7, #8]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800e578:	68bb      	ldr	r3, [r7, #8]
 800e57a:	f003 0345 	and.w	r3, r3, #69	; 0x45
           ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 800e57e:	2b00      	cmp	r3, #0
 800e580:	d0ef      	beq.n	800e562 <SDMMC_GetCmdResp7+0x1e>
 800e582:	68bb      	ldr	r3, [r7, #8]
 800e584:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800e588:	2b00      	cmp	r3, #0
 800e58a:	d1ea      	bne.n	800e562 <SDMMC_GetCmdResp7+0x1e>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800e58c:	687b      	ldr	r3, [r7, #4]
 800e58e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e590:	f003 0304 	and.w	r3, r3, #4
 800e594:	2b00      	cmp	r3, #0
 800e596:	d004      	beq.n	800e5a2 <SDMMC_GetCmdResp7+0x5e>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800e598:	687b      	ldr	r3, [r7, #4]
 800e59a:	2204      	movs	r2, #4
 800e59c:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800e59e:	2304      	movs	r3, #4
 800e5a0:	e014      	b.n	800e5cc <SDMMC_GetCmdResp7+0x88>
  }

  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800e5a2:	687b      	ldr	r3, [r7, #4]
 800e5a4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e5a6:	f003 0301 	and.w	r3, r3, #1
 800e5aa:	2b00      	cmp	r3, #0
 800e5ac:	d004      	beq.n	800e5b8 <SDMMC_GetCmdResp7+0x74>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800e5ae:	687b      	ldr	r3, [r7, #4]
 800e5b0:	2201      	movs	r2, #1
 800e5b2:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 800e5b4:	2301      	movs	r3, #1
 800e5b6:	e009      	b.n	800e5cc <SDMMC_GetCmdResp7+0x88>
  else
  {
    /* Nothing to do */
  }

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDREND))
 800e5b8:	687b      	ldr	r3, [r7, #4]
 800e5ba:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e5bc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e5c0:	2b00      	cmp	r3, #0
 800e5c2:	d002      	beq.n	800e5ca <SDMMC_GetCmdResp7+0x86>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CMDREND);
 800e5c4:	687b      	ldr	r3, [r7, #4]
 800e5c6:	2240      	movs	r2, #64	; 0x40
 800e5c8:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 800e5ca:	2300      	movs	r3, #0

}
 800e5cc:	4618      	mov	r0, r3
 800e5ce:	3714      	adds	r7, #20
 800e5d0:	46bd      	mov	sp, r7
 800e5d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e5d6:	4770      	bx	lr
 800e5d8:	24000000 	.word	0x24000000
 800e5dc:	10624dd3 	.word	0x10624dd3

0800e5e0 <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDMMC_TypeDef *SDMMCx)
{
 800e5e0:	b480      	push	{r7}
 800e5e2:	b085      	sub	sp, #20
 800e5e4:	af00      	add	r7, sp, #0
 800e5e6:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 800e5e8:	4b11      	ldr	r3, [pc, #68]	; (800e630 <SDMMC_GetCmdError+0x50>)
 800e5ea:	681b      	ldr	r3, [r3, #0]
 800e5ec:	4a11      	ldr	r2, [pc, #68]	; (800e634 <SDMMC_GetCmdError+0x54>)
 800e5ee:	fba2 2303 	umull	r2, r3, r2, r3
 800e5f2:	0a5b      	lsrs	r3, r3, #9
 800e5f4:	f241 3288 	movw	r2, #5000	; 0x1388
 800e5f8:	fb02 f303 	mul.w	r3, r2, r3
 800e5fc:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 800e5fe:	68fb      	ldr	r3, [r7, #12]
 800e600:	1e5a      	subs	r2, r3, #1
 800e602:	60fa      	str	r2, [r7, #12]
 800e604:	2b00      	cmp	r3, #0
 800e606:	d102      	bne.n	800e60e <SDMMC_GetCmdError+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800e608:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800e60c:	e009      	b.n	800e622 <SDMMC_GetCmdError+0x42>
    }

  } while (!__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDSENT));
 800e60e:	687b      	ldr	r3, [r7, #4]
 800e610:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e612:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800e616:	2b00      	cmp	r3, #0
 800e618:	d0f1      	beq.n	800e5fe <SDMMC_GetCmdError+0x1e>

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800e61a:	687b      	ldr	r3, [r7, #4]
 800e61c:	4a06      	ldr	r2, [pc, #24]	; (800e638 <SDMMC_GetCmdError+0x58>)
 800e61e:	639a      	str	r2, [r3, #56]	; 0x38

  return SDMMC_ERROR_NONE;
 800e620:	2300      	movs	r3, #0
}
 800e622:	4618      	mov	r0, r3
 800e624:	3714      	adds	r7, #20
 800e626:	46bd      	mov	sp, r7
 800e628:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e62c:	4770      	bx	lr
 800e62e:	bf00      	nop
 800e630:	24000000 	.word	0x24000000
 800e634:	10624dd3 	.word	0x10624dd3
 800e638:	002000c5 	.word	0x002000c5

0800e63c <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800e63c:	b084      	sub	sp, #16
 800e63e:	b580      	push	{r7, lr}
 800e640:	b084      	sub	sp, #16
 800e642:	af00      	add	r7, sp, #0
 800e644:	6078      	str	r0, [r7, #4]
 800e646:	f107 001c 	add.w	r0, r7, #28
 800e64a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800e64e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e650:	2b01      	cmp	r3, #1
 800e652:	d120      	bne.n	800e696 <USB_CoreInit+0x5a>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800e654:	687b      	ldr	r3, [r7, #4]
 800e656:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e658:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800e65c:	687b      	ldr	r3, [r7, #4]
 800e65e:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800e660:	687b      	ldr	r3, [r7, #4]
 800e662:	68da      	ldr	r2, [r3, #12]
 800e664:	4b2a      	ldr	r3, [pc, #168]	; (800e710 <USB_CoreInit+0xd4>)
 800e666:	4013      	ands	r3, r2
 800e668:	687a      	ldr	r2, [r7, #4]
 800e66a:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800e66c:	687b      	ldr	r3, [r7, #4]
 800e66e:	68db      	ldr	r3, [r3, #12]
 800e670:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800e674:	687b      	ldr	r3, [r7, #4]
 800e676:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 800e678:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800e67a:	2b01      	cmp	r3, #1
 800e67c:	d105      	bne.n	800e68a <USB_CoreInit+0x4e>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800e67e:	687b      	ldr	r3, [r7, #4]
 800e680:	68db      	ldr	r3, [r3, #12]
 800e682:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800e686:	687b      	ldr	r3, [r7, #4]
 800e688:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800e68a:	6878      	ldr	r0, [r7, #4]
 800e68c:	f001 fb14 	bl	800fcb8 <USB_CoreReset>
 800e690:	4603      	mov	r3, r0
 800e692:	73fb      	strb	r3, [r7, #15]
 800e694:	e01a      	b.n	800e6cc <USB_CoreInit+0x90>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800e696:	687b      	ldr	r3, [r7, #4]
 800e698:	68db      	ldr	r3, [r3, #12]
 800e69a:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800e69e:	687b      	ldr	r3, [r7, #4]
 800e6a0:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800e6a2:	6878      	ldr	r0, [r7, #4]
 800e6a4:	f001 fb08 	bl	800fcb8 <USB_CoreReset>
 800e6a8:	4603      	mov	r3, r0
 800e6aa:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 800e6ac:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800e6ae:	2b00      	cmp	r3, #0
 800e6b0:	d106      	bne.n	800e6c0 <USB_CoreInit+0x84>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800e6b2:	687b      	ldr	r3, [r7, #4]
 800e6b4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e6b6:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800e6ba:	687b      	ldr	r3, [r7, #4]
 800e6bc:	639a      	str	r2, [r3, #56]	; 0x38
 800e6be:	e005      	b.n	800e6cc <USB_CoreInit+0x90>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800e6c0:	687b      	ldr	r3, [r7, #4]
 800e6c2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e6c4:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800e6c8:	687b      	ldr	r3, [r7, #4]
 800e6ca:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 800e6cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e6ce:	2b01      	cmp	r3, #1
 800e6d0:	d116      	bne.n	800e700 <USB_CoreInit+0xc4>
  {
    /* make sure to reserve 18 fifo Locations for DMA buffers */
    USBx->GDFIFOCFG &= ~(0xFFFFU << 16);
 800e6d2:	687b      	ldr	r3, [r7, #4]
 800e6d4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800e6d6:	b29a      	uxth	r2, r3
 800e6d8:	687b      	ldr	r3, [r7, #4]
 800e6da:	65da      	str	r2, [r3, #92]	; 0x5c
    USBx->GDFIFOCFG |= 0x3EEU << 16;
 800e6dc:	687b      	ldr	r3, [r7, #4]
 800e6de:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800e6e0:	4b0c      	ldr	r3, [pc, #48]	; (800e714 <USB_CoreInit+0xd8>)
 800e6e2:	4313      	orrs	r3, r2
 800e6e4:	687a      	ldr	r2, [r7, #4]
 800e6e6:	65d3      	str	r3, [r2, #92]	; 0x5c

    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800e6e8:	687b      	ldr	r3, [r7, #4]
 800e6ea:	689b      	ldr	r3, [r3, #8]
 800e6ec:	f043 0206 	orr.w	r2, r3, #6
 800e6f0:	687b      	ldr	r3, [r7, #4]
 800e6f2:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800e6f4:	687b      	ldr	r3, [r7, #4]
 800e6f6:	689b      	ldr	r3, [r3, #8]
 800e6f8:	f043 0220 	orr.w	r2, r3, #32
 800e6fc:	687b      	ldr	r3, [r7, #4]
 800e6fe:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800e700:	7bfb      	ldrb	r3, [r7, #15]
}
 800e702:	4618      	mov	r0, r3
 800e704:	3710      	adds	r7, #16
 800e706:	46bd      	mov	sp, r7
 800e708:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800e70c:	b004      	add	sp, #16
 800e70e:	4770      	bx	lr
 800e710:	ffbdffbf 	.word	0xffbdffbf
 800e714:	03ee0000 	.word	0x03ee0000

0800e718 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 800e718:	b480      	push	{r7}
 800e71a:	b087      	sub	sp, #28
 800e71c:	af00      	add	r7, sp, #0
 800e71e:	60f8      	str	r0, [r7, #12]
 800e720:	60b9      	str	r1, [r7, #8]
 800e722:	4613      	mov	r3, r2
 800e724:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 800e726:	79fb      	ldrb	r3, [r7, #7]
 800e728:	2b02      	cmp	r3, #2
 800e72a:	d165      	bne.n	800e7f8 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 800e72c:	68bb      	ldr	r3, [r7, #8]
 800e72e:	4a41      	ldr	r2, [pc, #260]	; (800e834 <USB_SetTurnaroundTime+0x11c>)
 800e730:	4293      	cmp	r3, r2
 800e732:	d906      	bls.n	800e742 <USB_SetTurnaroundTime+0x2a>
 800e734:	68bb      	ldr	r3, [r7, #8]
 800e736:	4a40      	ldr	r2, [pc, #256]	; (800e838 <USB_SetTurnaroundTime+0x120>)
 800e738:	4293      	cmp	r3, r2
 800e73a:	d202      	bcs.n	800e742 <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 800e73c:	230f      	movs	r3, #15
 800e73e:	617b      	str	r3, [r7, #20]
 800e740:	e062      	b.n	800e808 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 800e742:	68bb      	ldr	r3, [r7, #8]
 800e744:	4a3c      	ldr	r2, [pc, #240]	; (800e838 <USB_SetTurnaroundTime+0x120>)
 800e746:	4293      	cmp	r3, r2
 800e748:	d306      	bcc.n	800e758 <USB_SetTurnaroundTime+0x40>
 800e74a:	68bb      	ldr	r3, [r7, #8]
 800e74c:	4a3b      	ldr	r2, [pc, #236]	; (800e83c <USB_SetTurnaroundTime+0x124>)
 800e74e:	4293      	cmp	r3, r2
 800e750:	d202      	bcs.n	800e758 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 800e752:	230e      	movs	r3, #14
 800e754:	617b      	str	r3, [r7, #20]
 800e756:	e057      	b.n	800e808 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 800e758:	68bb      	ldr	r3, [r7, #8]
 800e75a:	4a38      	ldr	r2, [pc, #224]	; (800e83c <USB_SetTurnaroundTime+0x124>)
 800e75c:	4293      	cmp	r3, r2
 800e75e:	d306      	bcc.n	800e76e <USB_SetTurnaroundTime+0x56>
 800e760:	68bb      	ldr	r3, [r7, #8]
 800e762:	4a37      	ldr	r2, [pc, #220]	; (800e840 <USB_SetTurnaroundTime+0x128>)
 800e764:	4293      	cmp	r3, r2
 800e766:	d202      	bcs.n	800e76e <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 800e768:	230d      	movs	r3, #13
 800e76a:	617b      	str	r3, [r7, #20]
 800e76c:	e04c      	b.n	800e808 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 800e76e:	68bb      	ldr	r3, [r7, #8]
 800e770:	4a33      	ldr	r2, [pc, #204]	; (800e840 <USB_SetTurnaroundTime+0x128>)
 800e772:	4293      	cmp	r3, r2
 800e774:	d306      	bcc.n	800e784 <USB_SetTurnaroundTime+0x6c>
 800e776:	68bb      	ldr	r3, [r7, #8]
 800e778:	4a32      	ldr	r2, [pc, #200]	; (800e844 <USB_SetTurnaroundTime+0x12c>)
 800e77a:	4293      	cmp	r3, r2
 800e77c:	d802      	bhi.n	800e784 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 800e77e:	230c      	movs	r3, #12
 800e780:	617b      	str	r3, [r7, #20]
 800e782:	e041      	b.n	800e808 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 800e784:	68bb      	ldr	r3, [r7, #8]
 800e786:	4a2f      	ldr	r2, [pc, #188]	; (800e844 <USB_SetTurnaroundTime+0x12c>)
 800e788:	4293      	cmp	r3, r2
 800e78a:	d906      	bls.n	800e79a <USB_SetTurnaroundTime+0x82>
 800e78c:	68bb      	ldr	r3, [r7, #8]
 800e78e:	4a2e      	ldr	r2, [pc, #184]	; (800e848 <USB_SetTurnaroundTime+0x130>)
 800e790:	4293      	cmp	r3, r2
 800e792:	d802      	bhi.n	800e79a <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 800e794:	230b      	movs	r3, #11
 800e796:	617b      	str	r3, [r7, #20]
 800e798:	e036      	b.n	800e808 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 800e79a:	68bb      	ldr	r3, [r7, #8]
 800e79c:	4a2a      	ldr	r2, [pc, #168]	; (800e848 <USB_SetTurnaroundTime+0x130>)
 800e79e:	4293      	cmp	r3, r2
 800e7a0:	d906      	bls.n	800e7b0 <USB_SetTurnaroundTime+0x98>
 800e7a2:	68bb      	ldr	r3, [r7, #8]
 800e7a4:	4a29      	ldr	r2, [pc, #164]	; (800e84c <USB_SetTurnaroundTime+0x134>)
 800e7a6:	4293      	cmp	r3, r2
 800e7a8:	d802      	bhi.n	800e7b0 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 800e7aa:	230a      	movs	r3, #10
 800e7ac:	617b      	str	r3, [r7, #20]
 800e7ae:	e02b      	b.n	800e808 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 800e7b0:	68bb      	ldr	r3, [r7, #8]
 800e7b2:	4a26      	ldr	r2, [pc, #152]	; (800e84c <USB_SetTurnaroundTime+0x134>)
 800e7b4:	4293      	cmp	r3, r2
 800e7b6:	d906      	bls.n	800e7c6 <USB_SetTurnaroundTime+0xae>
 800e7b8:	68bb      	ldr	r3, [r7, #8]
 800e7ba:	4a25      	ldr	r2, [pc, #148]	; (800e850 <USB_SetTurnaroundTime+0x138>)
 800e7bc:	4293      	cmp	r3, r2
 800e7be:	d202      	bcs.n	800e7c6 <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 800e7c0:	2309      	movs	r3, #9
 800e7c2:	617b      	str	r3, [r7, #20]
 800e7c4:	e020      	b.n	800e808 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 800e7c6:	68bb      	ldr	r3, [r7, #8]
 800e7c8:	4a21      	ldr	r2, [pc, #132]	; (800e850 <USB_SetTurnaroundTime+0x138>)
 800e7ca:	4293      	cmp	r3, r2
 800e7cc:	d306      	bcc.n	800e7dc <USB_SetTurnaroundTime+0xc4>
 800e7ce:	68bb      	ldr	r3, [r7, #8]
 800e7d0:	4a20      	ldr	r2, [pc, #128]	; (800e854 <USB_SetTurnaroundTime+0x13c>)
 800e7d2:	4293      	cmp	r3, r2
 800e7d4:	d802      	bhi.n	800e7dc <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 800e7d6:	2308      	movs	r3, #8
 800e7d8:	617b      	str	r3, [r7, #20]
 800e7da:	e015      	b.n	800e808 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 800e7dc:	68bb      	ldr	r3, [r7, #8]
 800e7de:	4a1d      	ldr	r2, [pc, #116]	; (800e854 <USB_SetTurnaroundTime+0x13c>)
 800e7e0:	4293      	cmp	r3, r2
 800e7e2:	d906      	bls.n	800e7f2 <USB_SetTurnaroundTime+0xda>
 800e7e4:	68bb      	ldr	r3, [r7, #8]
 800e7e6:	4a1c      	ldr	r2, [pc, #112]	; (800e858 <USB_SetTurnaroundTime+0x140>)
 800e7e8:	4293      	cmp	r3, r2
 800e7ea:	d202      	bcs.n	800e7f2 <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 800e7ec:	2307      	movs	r3, #7
 800e7ee:	617b      	str	r3, [r7, #20]
 800e7f0:	e00a      	b.n	800e808 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 800e7f2:	2306      	movs	r3, #6
 800e7f4:	617b      	str	r3, [r7, #20]
 800e7f6:	e007      	b.n	800e808 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 800e7f8:	79fb      	ldrb	r3, [r7, #7]
 800e7fa:	2b00      	cmp	r3, #0
 800e7fc:	d102      	bne.n	800e804 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 800e7fe:	2309      	movs	r3, #9
 800e800:	617b      	str	r3, [r7, #20]
 800e802:	e001      	b.n	800e808 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 800e804:	2309      	movs	r3, #9
 800e806:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 800e808:	68fb      	ldr	r3, [r7, #12]
 800e80a:	68db      	ldr	r3, [r3, #12]
 800e80c:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 800e810:	68fb      	ldr	r3, [r7, #12]
 800e812:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 800e814:	68fb      	ldr	r3, [r7, #12]
 800e816:	68da      	ldr	r2, [r3, #12]
 800e818:	697b      	ldr	r3, [r7, #20]
 800e81a:	029b      	lsls	r3, r3, #10
 800e81c:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 800e820:	431a      	orrs	r2, r3
 800e822:	68fb      	ldr	r3, [r7, #12]
 800e824:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800e826:	2300      	movs	r3, #0
}
 800e828:	4618      	mov	r0, r3
 800e82a:	371c      	adds	r7, #28
 800e82c:	46bd      	mov	sp, r7
 800e82e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e832:	4770      	bx	lr
 800e834:	00d8acbf 	.word	0x00d8acbf
 800e838:	00e4e1c0 	.word	0x00e4e1c0
 800e83c:	00f42400 	.word	0x00f42400
 800e840:	01067380 	.word	0x01067380
 800e844:	011a499f 	.word	0x011a499f
 800e848:	01312cff 	.word	0x01312cff
 800e84c:	014ca43f 	.word	0x014ca43f
 800e850:	016e3600 	.word	0x016e3600
 800e854:	01a6ab1f 	.word	0x01a6ab1f
 800e858:	01e84800 	.word	0x01e84800

0800e85c <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800e85c:	b480      	push	{r7}
 800e85e:	b083      	sub	sp, #12
 800e860:	af00      	add	r7, sp, #0
 800e862:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 800e864:	687b      	ldr	r3, [r7, #4]
 800e866:	689b      	ldr	r3, [r3, #8]
 800e868:	f043 0201 	orr.w	r2, r3, #1
 800e86c:	687b      	ldr	r3, [r7, #4]
 800e86e:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800e870:	2300      	movs	r3, #0
}
 800e872:	4618      	mov	r0, r3
 800e874:	370c      	adds	r7, #12
 800e876:	46bd      	mov	sp, r7
 800e878:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e87c:	4770      	bx	lr

0800e87e <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800e87e:	b480      	push	{r7}
 800e880:	b083      	sub	sp, #12
 800e882:	af00      	add	r7, sp, #0
 800e884:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800e886:	687b      	ldr	r3, [r7, #4]
 800e888:	689b      	ldr	r3, [r3, #8]
 800e88a:	f023 0201 	bic.w	r2, r3, #1
 800e88e:	687b      	ldr	r3, [r7, #4]
 800e890:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800e892:	2300      	movs	r3, #0
}
 800e894:	4618      	mov	r0, r3
 800e896:	370c      	adds	r7, #12
 800e898:	46bd      	mov	sp, r7
 800e89a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e89e:	4770      	bx	lr

0800e8a0 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 800e8a0:	b580      	push	{r7, lr}
 800e8a2:	b082      	sub	sp, #8
 800e8a4:	af00      	add	r7, sp, #0
 800e8a6:	6078      	str	r0, [r7, #4]
 800e8a8:	460b      	mov	r3, r1
 800e8aa:	70fb      	strb	r3, [r7, #3]
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800e8ac:	687b      	ldr	r3, [r7, #4]
 800e8ae:	68db      	ldr	r3, [r3, #12]
 800e8b0:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 800e8b4:	687b      	ldr	r3, [r7, #4]
 800e8b6:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800e8b8:	78fb      	ldrb	r3, [r7, #3]
 800e8ba:	2b01      	cmp	r3, #1
 800e8bc:	d106      	bne.n	800e8cc <USB_SetCurrentMode+0x2c>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800e8be:	687b      	ldr	r3, [r7, #4]
 800e8c0:	68db      	ldr	r3, [r3, #12]
 800e8c2:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800e8c6:	687b      	ldr	r3, [r7, #4]
 800e8c8:	60da      	str	r2, [r3, #12]
 800e8ca:	e00b      	b.n	800e8e4 <USB_SetCurrentMode+0x44>
  }
  else if (mode == USB_DEVICE_MODE)
 800e8cc:	78fb      	ldrb	r3, [r7, #3]
 800e8ce:	2b00      	cmp	r3, #0
 800e8d0:	d106      	bne.n	800e8e0 <USB_SetCurrentMode+0x40>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800e8d2:	687b      	ldr	r3, [r7, #4]
 800e8d4:	68db      	ldr	r3, [r3, #12]
 800e8d6:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800e8da:	687b      	ldr	r3, [r7, #4]
 800e8dc:	60da      	str	r2, [r3, #12]
 800e8de:	e001      	b.n	800e8e4 <USB_SetCurrentMode+0x44>
  }
  else
  {
    return HAL_ERROR;
 800e8e0:	2301      	movs	r3, #1
 800e8e2:	e003      	b.n	800e8ec <USB_SetCurrentMode+0x4c>
  }
  HAL_Delay(50U);
 800e8e4:	2032      	movs	r0, #50	; 0x32
 800e8e6:	f7f3 fd69 	bl	80023bc <HAL_Delay>

  return HAL_OK;
 800e8ea:	2300      	movs	r3, #0
}
 800e8ec:	4618      	mov	r0, r3
 800e8ee:	3708      	adds	r7, #8
 800e8f0:	46bd      	mov	sp, r7
 800e8f2:	bd80      	pop	{r7, pc}

0800e8f4 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800e8f4:	b084      	sub	sp, #16
 800e8f6:	b580      	push	{r7, lr}
 800e8f8:	b086      	sub	sp, #24
 800e8fa:	af00      	add	r7, sp, #0
 800e8fc:	6078      	str	r0, [r7, #4]
 800e8fe:	f107 0024 	add.w	r0, r7, #36	; 0x24
 800e902:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800e906:	2300      	movs	r3, #0
 800e908:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800e90a:	687b      	ldr	r3, [r7, #4]
 800e90c:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800e90e:	2300      	movs	r3, #0
 800e910:	613b      	str	r3, [r7, #16]
 800e912:	e009      	b.n	800e928 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 800e914:	687a      	ldr	r2, [r7, #4]
 800e916:	693b      	ldr	r3, [r7, #16]
 800e918:	3340      	adds	r3, #64	; 0x40
 800e91a:	009b      	lsls	r3, r3, #2
 800e91c:	4413      	add	r3, r2
 800e91e:	2200      	movs	r2, #0
 800e920:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800e922:	693b      	ldr	r3, [r7, #16]
 800e924:	3301      	adds	r3, #1
 800e926:	613b      	str	r3, [r7, #16]
 800e928:	693b      	ldr	r3, [r7, #16]
 800e92a:	2b0e      	cmp	r3, #14
 800e92c:	d9f2      	bls.n	800e914 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800e92e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800e930:	2b00      	cmp	r3, #0
 800e932:	d11c      	bne.n	800e96e <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800e934:	68fb      	ldr	r3, [r7, #12]
 800e936:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800e93a:	685b      	ldr	r3, [r3, #4]
 800e93c:	68fa      	ldr	r2, [r7, #12]
 800e93e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800e942:	f043 0302 	orr.w	r3, r3, #2
 800e946:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 800e948:	687b      	ldr	r3, [r7, #4]
 800e94a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e94c:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 800e950:	687b      	ldr	r3, [r7, #4]
 800e952:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 800e954:	687b      	ldr	r3, [r7, #4]
 800e956:	681b      	ldr	r3, [r3, #0]
 800e958:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800e95c:	687b      	ldr	r3, [r7, #4]
 800e95e:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 800e960:	687b      	ldr	r3, [r7, #4]
 800e962:	681b      	ldr	r3, [r3, #0]
 800e964:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800e968:	687b      	ldr	r3, [r7, #4]
 800e96a:	601a      	str	r2, [r3, #0]
 800e96c:	e005      	b.n	800e97a <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 800e96e:	687b      	ldr	r3, [r7, #4]
 800e970:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e972:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800e976:	687b      	ldr	r3, [r7, #4]
 800e978:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800e97a:	68fb      	ldr	r3, [r7, #12]
 800e97c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800e980:	461a      	mov	r2, r3
 800e982:	2300      	movs	r3, #0
 800e984:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 800e986:	68fb      	ldr	r3, [r7, #12]
 800e988:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800e98c:	4619      	mov	r1, r3
 800e98e:	68fb      	ldr	r3, [r7, #12]
 800e990:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800e994:	461a      	mov	r2, r3
 800e996:	680b      	ldr	r3, [r1, #0]
 800e998:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800e99a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e99c:	2b01      	cmp	r3, #1
 800e99e:	d10c      	bne.n	800e9ba <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 800e9a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e9a2:	2b00      	cmp	r3, #0
 800e9a4:	d104      	bne.n	800e9b0 <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 800e9a6:	2100      	movs	r1, #0
 800e9a8:	6878      	ldr	r0, [r7, #4]
 800e9aa:	f000 f949 	bl	800ec40 <USB_SetDevSpeed>
 800e9ae:	e008      	b.n	800e9c2 <USB_DevInit+0xce>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 800e9b0:	2101      	movs	r1, #1
 800e9b2:	6878      	ldr	r0, [r7, #4]
 800e9b4:	f000 f944 	bl	800ec40 <USB_SetDevSpeed>
 800e9b8:	e003      	b.n	800e9c2 <USB_DevInit+0xce>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 800e9ba:	2103      	movs	r1, #3
 800e9bc:	6878      	ldr	r0, [r7, #4]
 800e9be:	f000 f93f 	bl	800ec40 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800e9c2:	2110      	movs	r1, #16
 800e9c4:	6878      	ldr	r0, [r7, #4]
 800e9c6:	f000 f8f3 	bl	800ebb0 <USB_FlushTxFifo>
 800e9ca:	4603      	mov	r3, r0
 800e9cc:	2b00      	cmp	r3, #0
 800e9ce:	d001      	beq.n	800e9d4 <USB_DevInit+0xe0>
  {
    ret = HAL_ERROR;
 800e9d0:	2301      	movs	r3, #1
 800e9d2:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800e9d4:	6878      	ldr	r0, [r7, #4]
 800e9d6:	f000 f911 	bl	800ebfc <USB_FlushRxFifo>
 800e9da:	4603      	mov	r3, r0
 800e9dc:	2b00      	cmp	r3, #0
 800e9de:	d001      	beq.n	800e9e4 <USB_DevInit+0xf0>
  {
    ret = HAL_ERROR;
 800e9e0:	2301      	movs	r3, #1
 800e9e2:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 800e9e4:	68fb      	ldr	r3, [r7, #12]
 800e9e6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800e9ea:	461a      	mov	r2, r3
 800e9ec:	2300      	movs	r3, #0
 800e9ee:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 800e9f0:	68fb      	ldr	r3, [r7, #12]
 800e9f2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800e9f6:	461a      	mov	r2, r3
 800e9f8:	2300      	movs	r3, #0
 800e9fa:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 800e9fc:	68fb      	ldr	r3, [r7, #12]
 800e9fe:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ea02:	461a      	mov	r2, r3
 800ea04:	2300      	movs	r3, #0
 800ea06:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800ea08:	2300      	movs	r3, #0
 800ea0a:	613b      	str	r3, [r7, #16]
 800ea0c:	e043      	b.n	800ea96 <USB_DevInit+0x1a2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800ea0e:	693b      	ldr	r3, [r7, #16]
 800ea10:	015a      	lsls	r2, r3, #5
 800ea12:	68fb      	ldr	r3, [r7, #12]
 800ea14:	4413      	add	r3, r2
 800ea16:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ea1a:	681b      	ldr	r3, [r3, #0]
 800ea1c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800ea20:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800ea24:	d118      	bne.n	800ea58 <USB_DevInit+0x164>
    {
      if (i == 0U)
 800ea26:	693b      	ldr	r3, [r7, #16]
 800ea28:	2b00      	cmp	r3, #0
 800ea2a:	d10a      	bne.n	800ea42 <USB_DevInit+0x14e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 800ea2c:	693b      	ldr	r3, [r7, #16]
 800ea2e:	015a      	lsls	r2, r3, #5
 800ea30:	68fb      	ldr	r3, [r7, #12]
 800ea32:	4413      	add	r3, r2
 800ea34:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ea38:	461a      	mov	r2, r3
 800ea3a:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800ea3e:	6013      	str	r3, [r2, #0]
 800ea40:	e013      	b.n	800ea6a <USB_DevInit+0x176>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800ea42:	693b      	ldr	r3, [r7, #16]
 800ea44:	015a      	lsls	r2, r3, #5
 800ea46:	68fb      	ldr	r3, [r7, #12]
 800ea48:	4413      	add	r3, r2
 800ea4a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ea4e:	461a      	mov	r2, r3
 800ea50:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800ea54:	6013      	str	r3, [r2, #0]
 800ea56:	e008      	b.n	800ea6a <USB_DevInit+0x176>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 800ea58:	693b      	ldr	r3, [r7, #16]
 800ea5a:	015a      	lsls	r2, r3, #5
 800ea5c:	68fb      	ldr	r3, [r7, #12]
 800ea5e:	4413      	add	r3, r2
 800ea60:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ea64:	461a      	mov	r2, r3
 800ea66:	2300      	movs	r3, #0
 800ea68:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 800ea6a:	693b      	ldr	r3, [r7, #16]
 800ea6c:	015a      	lsls	r2, r3, #5
 800ea6e:	68fb      	ldr	r3, [r7, #12]
 800ea70:	4413      	add	r3, r2
 800ea72:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ea76:	461a      	mov	r2, r3
 800ea78:	2300      	movs	r3, #0
 800ea7a:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 800ea7c:	693b      	ldr	r3, [r7, #16]
 800ea7e:	015a      	lsls	r2, r3, #5
 800ea80:	68fb      	ldr	r3, [r7, #12]
 800ea82:	4413      	add	r3, r2
 800ea84:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ea88:	461a      	mov	r2, r3
 800ea8a:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800ea8e:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800ea90:	693b      	ldr	r3, [r7, #16]
 800ea92:	3301      	adds	r3, #1
 800ea94:	613b      	str	r3, [r7, #16]
 800ea96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ea98:	693a      	ldr	r2, [r7, #16]
 800ea9a:	429a      	cmp	r2, r3
 800ea9c:	d3b7      	bcc.n	800ea0e <USB_DevInit+0x11a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800ea9e:	2300      	movs	r3, #0
 800eaa0:	613b      	str	r3, [r7, #16]
 800eaa2:	e043      	b.n	800eb2c <USB_DevInit+0x238>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800eaa4:	693b      	ldr	r3, [r7, #16]
 800eaa6:	015a      	lsls	r2, r3, #5
 800eaa8:	68fb      	ldr	r3, [r7, #12]
 800eaaa:	4413      	add	r3, r2
 800eaac:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800eab0:	681b      	ldr	r3, [r3, #0]
 800eab2:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800eab6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800eaba:	d118      	bne.n	800eaee <USB_DevInit+0x1fa>
    {
      if (i == 0U)
 800eabc:	693b      	ldr	r3, [r7, #16]
 800eabe:	2b00      	cmp	r3, #0
 800eac0:	d10a      	bne.n	800ead8 <USB_DevInit+0x1e4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800eac2:	693b      	ldr	r3, [r7, #16]
 800eac4:	015a      	lsls	r2, r3, #5
 800eac6:	68fb      	ldr	r3, [r7, #12]
 800eac8:	4413      	add	r3, r2
 800eaca:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800eace:	461a      	mov	r2, r3
 800ead0:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800ead4:	6013      	str	r3, [r2, #0]
 800ead6:	e013      	b.n	800eb00 <USB_DevInit+0x20c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 800ead8:	693b      	ldr	r3, [r7, #16]
 800eada:	015a      	lsls	r2, r3, #5
 800eadc:	68fb      	ldr	r3, [r7, #12]
 800eade:	4413      	add	r3, r2
 800eae0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800eae4:	461a      	mov	r2, r3
 800eae6:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800eaea:	6013      	str	r3, [r2, #0]
 800eaec:	e008      	b.n	800eb00 <USB_DevInit+0x20c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800eaee:	693b      	ldr	r3, [r7, #16]
 800eaf0:	015a      	lsls	r2, r3, #5
 800eaf2:	68fb      	ldr	r3, [r7, #12]
 800eaf4:	4413      	add	r3, r2
 800eaf6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800eafa:	461a      	mov	r2, r3
 800eafc:	2300      	movs	r3, #0
 800eafe:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 800eb00:	693b      	ldr	r3, [r7, #16]
 800eb02:	015a      	lsls	r2, r3, #5
 800eb04:	68fb      	ldr	r3, [r7, #12]
 800eb06:	4413      	add	r3, r2
 800eb08:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800eb0c:	461a      	mov	r2, r3
 800eb0e:	2300      	movs	r3, #0
 800eb10:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800eb12:	693b      	ldr	r3, [r7, #16]
 800eb14:	015a      	lsls	r2, r3, #5
 800eb16:	68fb      	ldr	r3, [r7, #12]
 800eb18:	4413      	add	r3, r2
 800eb1a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800eb1e:	461a      	mov	r2, r3
 800eb20:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800eb24:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800eb26:	693b      	ldr	r3, [r7, #16]
 800eb28:	3301      	adds	r3, #1
 800eb2a:	613b      	str	r3, [r7, #16]
 800eb2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800eb2e:	693a      	ldr	r2, [r7, #16]
 800eb30:	429a      	cmp	r2, r3
 800eb32:	d3b7      	bcc.n	800eaa4 <USB_DevInit+0x1b0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 800eb34:	68fb      	ldr	r3, [r7, #12]
 800eb36:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800eb3a:	691b      	ldr	r3, [r3, #16]
 800eb3c:	68fa      	ldr	r2, [r7, #12]
 800eb3e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800eb42:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800eb46:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800eb48:	687b      	ldr	r3, [r7, #4]
 800eb4a:	2200      	movs	r2, #0
 800eb4c:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 800eb4e:	687b      	ldr	r3, [r7, #4]
 800eb50:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 800eb54:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800eb56:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800eb58:	2b00      	cmp	r3, #0
 800eb5a:	d105      	bne.n	800eb68 <USB_DevInit+0x274>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800eb5c:	687b      	ldr	r3, [r7, #4]
 800eb5e:	699b      	ldr	r3, [r3, #24]
 800eb60:	f043 0210 	orr.w	r2, r3, #16
 800eb64:	687b      	ldr	r3, [r7, #4]
 800eb66:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 800eb68:	687b      	ldr	r3, [r7, #4]
 800eb6a:	699a      	ldr	r2, [r3, #24]
 800eb6c:	4b0e      	ldr	r3, [pc, #56]	; (800eba8 <USB_DevInit+0x2b4>)
 800eb6e:	4313      	orrs	r3, r2
 800eb70:	687a      	ldr	r2, [r7, #4]
 800eb72:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 800eb74:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800eb76:	2b00      	cmp	r3, #0
 800eb78:	d005      	beq.n	800eb86 <USB_DevInit+0x292>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 800eb7a:	687b      	ldr	r3, [r7, #4]
 800eb7c:	699b      	ldr	r3, [r3, #24]
 800eb7e:	f043 0208 	orr.w	r2, r3, #8
 800eb82:	687b      	ldr	r3, [r7, #4]
 800eb84:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 800eb86:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800eb88:	2b01      	cmp	r3, #1
 800eb8a:	d105      	bne.n	800eb98 <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 800eb8c:	687b      	ldr	r3, [r7, #4]
 800eb8e:	699a      	ldr	r2, [r3, #24]
 800eb90:	4b06      	ldr	r3, [pc, #24]	; (800ebac <USB_DevInit+0x2b8>)
 800eb92:	4313      	orrs	r3, r2
 800eb94:	687a      	ldr	r2, [r7, #4]
 800eb96:	6193      	str	r3, [r2, #24]
  }

  return ret;
 800eb98:	7dfb      	ldrb	r3, [r7, #23]
}
 800eb9a:	4618      	mov	r0, r3
 800eb9c:	3718      	adds	r7, #24
 800eb9e:	46bd      	mov	sp, r7
 800eba0:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800eba4:	b004      	add	sp, #16
 800eba6:	4770      	bx	lr
 800eba8:	803c3800 	.word	0x803c3800
 800ebac:	40000004 	.word	0x40000004

0800ebb0 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800ebb0:	b480      	push	{r7}
 800ebb2:	b085      	sub	sp, #20
 800ebb4:	af00      	add	r7, sp, #0
 800ebb6:	6078      	str	r0, [r7, #4]
 800ebb8:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 800ebba:	2300      	movs	r3, #0
 800ebbc:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800ebbe:	683b      	ldr	r3, [r7, #0]
 800ebc0:	019b      	lsls	r3, r3, #6
 800ebc2:	f043 0220 	orr.w	r2, r3, #32
 800ebc6:	687b      	ldr	r3, [r7, #4]
 800ebc8:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800ebca:	68fb      	ldr	r3, [r7, #12]
 800ebcc:	3301      	adds	r3, #1
 800ebce:	60fb      	str	r3, [r7, #12]
 800ebd0:	68fb      	ldr	r3, [r7, #12]
 800ebd2:	4a09      	ldr	r2, [pc, #36]	; (800ebf8 <USB_FlushTxFifo+0x48>)
 800ebd4:	4293      	cmp	r3, r2
 800ebd6:	d901      	bls.n	800ebdc <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 800ebd8:	2303      	movs	r3, #3
 800ebda:	e006      	b.n	800ebea <USB_FlushTxFifo+0x3a>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800ebdc:	687b      	ldr	r3, [r7, #4]
 800ebde:	691b      	ldr	r3, [r3, #16]
 800ebe0:	f003 0320 	and.w	r3, r3, #32
 800ebe4:	2b20      	cmp	r3, #32
 800ebe6:	d0f0      	beq.n	800ebca <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 800ebe8:	2300      	movs	r3, #0
}
 800ebea:	4618      	mov	r0, r3
 800ebec:	3714      	adds	r7, #20
 800ebee:	46bd      	mov	sp, r7
 800ebf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ebf4:	4770      	bx	lr
 800ebf6:	bf00      	nop
 800ebf8:	00030d40 	.word	0x00030d40

0800ebfc <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800ebfc:	b480      	push	{r7}
 800ebfe:	b085      	sub	sp, #20
 800ec00:	af00      	add	r7, sp, #0
 800ec02:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 800ec04:	2300      	movs	r3, #0
 800ec06:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800ec08:	687b      	ldr	r3, [r7, #4]
 800ec0a:	2210      	movs	r2, #16
 800ec0c:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800ec0e:	68fb      	ldr	r3, [r7, #12]
 800ec10:	3301      	adds	r3, #1
 800ec12:	60fb      	str	r3, [r7, #12]
 800ec14:	68fb      	ldr	r3, [r7, #12]
 800ec16:	4a09      	ldr	r2, [pc, #36]	; (800ec3c <USB_FlushRxFifo+0x40>)
 800ec18:	4293      	cmp	r3, r2
 800ec1a:	d901      	bls.n	800ec20 <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 800ec1c:	2303      	movs	r3, #3
 800ec1e:	e006      	b.n	800ec2e <USB_FlushRxFifo+0x32>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800ec20:	687b      	ldr	r3, [r7, #4]
 800ec22:	691b      	ldr	r3, [r3, #16]
 800ec24:	f003 0310 	and.w	r3, r3, #16
 800ec28:	2b10      	cmp	r3, #16
 800ec2a:	d0f0      	beq.n	800ec0e <USB_FlushRxFifo+0x12>

  return HAL_OK;
 800ec2c:	2300      	movs	r3, #0
}
 800ec2e:	4618      	mov	r0, r3
 800ec30:	3714      	adds	r7, #20
 800ec32:	46bd      	mov	sp, r7
 800ec34:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ec38:	4770      	bx	lr
 800ec3a:	bf00      	nop
 800ec3c:	00030d40 	.word	0x00030d40

0800ec40 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 800ec40:	b480      	push	{r7}
 800ec42:	b085      	sub	sp, #20
 800ec44:	af00      	add	r7, sp, #0
 800ec46:	6078      	str	r0, [r7, #4]
 800ec48:	460b      	mov	r3, r1
 800ec4a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ec4c:	687b      	ldr	r3, [r7, #4]
 800ec4e:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 800ec50:	68fb      	ldr	r3, [r7, #12]
 800ec52:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ec56:	681a      	ldr	r2, [r3, #0]
 800ec58:	78fb      	ldrb	r3, [r7, #3]
 800ec5a:	68f9      	ldr	r1, [r7, #12]
 800ec5c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800ec60:	4313      	orrs	r3, r2
 800ec62:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 800ec64:	2300      	movs	r3, #0
}
 800ec66:	4618      	mov	r0, r3
 800ec68:	3714      	adds	r7, #20
 800ec6a:	46bd      	mov	sp, r7
 800ec6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ec70:	4770      	bx	lr

0800ec72 <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 800ec72:	b480      	push	{r7}
 800ec74:	b087      	sub	sp, #28
 800ec76:	af00      	add	r7, sp, #0
 800ec78:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ec7a:	687b      	ldr	r3, [r7, #4]
 800ec7c:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 800ec7e:	693b      	ldr	r3, [r7, #16]
 800ec80:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ec84:	689b      	ldr	r3, [r3, #8]
 800ec86:	f003 0306 	and.w	r3, r3, #6
 800ec8a:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 800ec8c:	68fb      	ldr	r3, [r7, #12]
 800ec8e:	2b00      	cmp	r3, #0
 800ec90:	d102      	bne.n	800ec98 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 800ec92:	2300      	movs	r3, #0
 800ec94:	75fb      	strb	r3, [r7, #23]
 800ec96:	e00a      	b.n	800ecae <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 800ec98:	68fb      	ldr	r3, [r7, #12]
 800ec9a:	2b02      	cmp	r3, #2
 800ec9c:	d002      	beq.n	800eca4 <USB_GetDevSpeed+0x32>
 800ec9e:	68fb      	ldr	r3, [r7, #12]
 800eca0:	2b06      	cmp	r3, #6
 800eca2:	d102      	bne.n	800ecaa <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 800eca4:	2302      	movs	r3, #2
 800eca6:	75fb      	strb	r3, [r7, #23]
 800eca8:	e001      	b.n	800ecae <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 800ecaa:	230f      	movs	r3, #15
 800ecac:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 800ecae:	7dfb      	ldrb	r3, [r7, #23]
}
 800ecb0:	4618      	mov	r0, r3
 800ecb2:	371c      	adds	r7, #28
 800ecb4:	46bd      	mov	sp, r7
 800ecb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ecba:	4770      	bx	lr

0800ecbc <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800ecbc:	b480      	push	{r7}
 800ecbe:	b085      	sub	sp, #20
 800ecc0:	af00      	add	r7, sp, #0
 800ecc2:	6078      	str	r0, [r7, #4]
 800ecc4:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ecc6:	687b      	ldr	r3, [r7, #4]
 800ecc8:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800ecca:	683b      	ldr	r3, [r7, #0]
 800eccc:	781b      	ldrb	r3, [r3, #0]
 800ecce:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800ecd0:	683b      	ldr	r3, [r7, #0]
 800ecd2:	785b      	ldrb	r3, [r3, #1]
 800ecd4:	2b01      	cmp	r3, #1
 800ecd6:	d139      	bne.n	800ed4c <USB_ActivateEndpoint+0x90>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 800ecd8:	68fb      	ldr	r3, [r7, #12]
 800ecda:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ecde:	69da      	ldr	r2, [r3, #28]
 800ece0:	683b      	ldr	r3, [r7, #0]
 800ece2:	781b      	ldrb	r3, [r3, #0]
 800ece4:	f003 030f 	and.w	r3, r3, #15
 800ece8:	2101      	movs	r1, #1
 800ecea:	fa01 f303 	lsl.w	r3, r1, r3
 800ecee:	b29b      	uxth	r3, r3
 800ecf0:	68f9      	ldr	r1, [r7, #12]
 800ecf2:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800ecf6:	4313      	orrs	r3, r2
 800ecf8:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 800ecfa:	68bb      	ldr	r3, [r7, #8]
 800ecfc:	015a      	lsls	r2, r3, #5
 800ecfe:	68fb      	ldr	r3, [r7, #12]
 800ed00:	4413      	add	r3, r2
 800ed02:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ed06:	681b      	ldr	r3, [r3, #0]
 800ed08:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800ed0c:	2b00      	cmp	r3, #0
 800ed0e:	d153      	bne.n	800edb8 <USB_ActivateEndpoint+0xfc>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800ed10:	68bb      	ldr	r3, [r7, #8]
 800ed12:	015a      	lsls	r2, r3, #5
 800ed14:	68fb      	ldr	r3, [r7, #12]
 800ed16:	4413      	add	r3, r2
 800ed18:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ed1c:	681a      	ldr	r2, [r3, #0]
 800ed1e:	683b      	ldr	r3, [r7, #0]
 800ed20:	689b      	ldr	r3, [r3, #8]
 800ed22:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800ed26:	683b      	ldr	r3, [r7, #0]
 800ed28:	78db      	ldrb	r3, [r3, #3]
 800ed2a:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800ed2c:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800ed2e:	68bb      	ldr	r3, [r7, #8]
 800ed30:	059b      	lsls	r3, r3, #22
 800ed32:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800ed34:	431a      	orrs	r2, r3
 800ed36:	68bb      	ldr	r3, [r7, #8]
 800ed38:	0159      	lsls	r1, r3, #5
 800ed3a:	68fb      	ldr	r3, [r7, #12]
 800ed3c:	440b      	add	r3, r1
 800ed3e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ed42:	4619      	mov	r1, r3
 800ed44:	4b20      	ldr	r3, [pc, #128]	; (800edc8 <USB_ActivateEndpoint+0x10c>)
 800ed46:	4313      	orrs	r3, r2
 800ed48:	600b      	str	r3, [r1, #0]
 800ed4a:	e035      	b.n	800edb8 <USB_ActivateEndpoint+0xfc>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 800ed4c:	68fb      	ldr	r3, [r7, #12]
 800ed4e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ed52:	69da      	ldr	r2, [r3, #28]
 800ed54:	683b      	ldr	r3, [r7, #0]
 800ed56:	781b      	ldrb	r3, [r3, #0]
 800ed58:	f003 030f 	and.w	r3, r3, #15
 800ed5c:	2101      	movs	r1, #1
 800ed5e:	fa01 f303 	lsl.w	r3, r1, r3
 800ed62:	041b      	lsls	r3, r3, #16
 800ed64:	68f9      	ldr	r1, [r7, #12]
 800ed66:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800ed6a:	4313      	orrs	r3, r2
 800ed6c:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 800ed6e:	68bb      	ldr	r3, [r7, #8]
 800ed70:	015a      	lsls	r2, r3, #5
 800ed72:	68fb      	ldr	r3, [r7, #12]
 800ed74:	4413      	add	r3, r2
 800ed76:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ed7a:	681b      	ldr	r3, [r3, #0]
 800ed7c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800ed80:	2b00      	cmp	r3, #0
 800ed82:	d119      	bne.n	800edb8 <USB_ActivateEndpoint+0xfc>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800ed84:	68bb      	ldr	r3, [r7, #8]
 800ed86:	015a      	lsls	r2, r3, #5
 800ed88:	68fb      	ldr	r3, [r7, #12]
 800ed8a:	4413      	add	r3, r2
 800ed8c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ed90:	681a      	ldr	r2, [r3, #0]
 800ed92:	683b      	ldr	r3, [r7, #0]
 800ed94:	689b      	ldr	r3, [r3, #8]
 800ed96:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 800ed9a:	683b      	ldr	r3, [r7, #0]
 800ed9c:	78db      	ldrb	r3, [r3, #3]
 800ed9e:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800eda0:	430b      	orrs	r3, r1
 800eda2:	431a      	orrs	r2, r3
 800eda4:	68bb      	ldr	r3, [r7, #8]
 800eda6:	0159      	lsls	r1, r3, #5
 800eda8:	68fb      	ldr	r3, [r7, #12]
 800edaa:	440b      	add	r3, r1
 800edac:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800edb0:	4619      	mov	r1, r3
 800edb2:	4b05      	ldr	r3, [pc, #20]	; (800edc8 <USB_ActivateEndpoint+0x10c>)
 800edb4:	4313      	orrs	r3, r2
 800edb6:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 800edb8:	2300      	movs	r3, #0
}
 800edba:	4618      	mov	r0, r3
 800edbc:	3714      	adds	r7, #20
 800edbe:	46bd      	mov	sp, r7
 800edc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800edc4:	4770      	bx	lr
 800edc6:	bf00      	nop
 800edc8:	10008000 	.word	0x10008000

0800edcc <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800edcc:	b480      	push	{r7}
 800edce:	b085      	sub	sp, #20
 800edd0:	af00      	add	r7, sp, #0
 800edd2:	6078      	str	r0, [r7, #4]
 800edd4:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800edd6:	687b      	ldr	r3, [r7, #4]
 800edd8:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800edda:	683b      	ldr	r3, [r7, #0]
 800eddc:	781b      	ldrb	r3, [r3, #0]
 800edde:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 800ede0:	683b      	ldr	r3, [r7, #0]
 800ede2:	785b      	ldrb	r3, [r3, #1]
 800ede4:	2b01      	cmp	r3, #1
 800ede6:	d161      	bne.n	800eeac <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800ede8:	68bb      	ldr	r3, [r7, #8]
 800edea:	015a      	lsls	r2, r3, #5
 800edec:	68fb      	ldr	r3, [r7, #12]
 800edee:	4413      	add	r3, r2
 800edf0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800edf4:	681b      	ldr	r3, [r3, #0]
 800edf6:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800edfa:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800edfe:	d11f      	bne.n	800ee40 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 800ee00:	68bb      	ldr	r3, [r7, #8]
 800ee02:	015a      	lsls	r2, r3, #5
 800ee04:	68fb      	ldr	r3, [r7, #12]
 800ee06:	4413      	add	r3, r2
 800ee08:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ee0c:	681b      	ldr	r3, [r3, #0]
 800ee0e:	68ba      	ldr	r2, [r7, #8]
 800ee10:	0151      	lsls	r1, r2, #5
 800ee12:	68fa      	ldr	r2, [r7, #12]
 800ee14:	440a      	add	r2, r1
 800ee16:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800ee1a:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800ee1e:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 800ee20:	68bb      	ldr	r3, [r7, #8]
 800ee22:	015a      	lsls	r2, r3, #5
 800ee24:	68fb      	ldr	r3, [r7, #12]
 800ee26:	4413      	add	r3, r2
 800ee28:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ee2c:	681b      	ldr	r3, [r3, #0]
 800ee2e:	68ba      	ldr	r2, [r7, #8]
 800ee30:	0151      	lsls	r1, r2, #5
 800ee32:	68fa      	ldr	r2, [r7, #12]
 800ee34:	440a      	add	r2, r1
 800ee36:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800ee3a:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800ee3e:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800ee40:	68fb      	ldr	r3, [r7, #12]
 800ee42:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ee46:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800ee48:	683b      	ldr	r3, [r7, #0]
 800ee4a:	781b      	ldrb	r3, [r3, #0]
 800ee4c:	f003 030f 	and.w	r3, r3, #15
 800ee50:	2101      	movs	r1, #1
 800ee52:	fa01 f303 	lsl.w	r3, r1, r3
 800ee56:	b29b      	uxth	r3, r3
 800ee58:	43db      	mvns	r3, r3
 800ee5a:	68f9      	ldr	r1, [r7, #12]
 800ee5c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800ee60:	4013      	ands	r3, r2
 800ee62:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800ee64:	68fb      	ldr	r3, [r7, #12]
 800ee66:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ee6a:	69da      	ldr	r2, [r3, #28]
 800ee6c:	683b      	ldr	r3, [r7, #0]
 800ee6e:	781b      	ldrb	r3, [r3, #0]
 800ee70:	f003 030f 	and.w	r3, r3, #15
 800ee74:	2101      	movs	r1, #1
 800ee76:	fa01 f303 	lsl.w	r3, r1, r3
 800ee7a:	b29b      	uxth	r3, r3
 800ee7c:	43db      	mvns	r3, r3
 800ee7e:	68f9      	ldr	r1, [r7, #12]
 800ee80:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800ee84:	4013      	ands	r3, r2
 800ee86:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 800ee88:	68bb      	ldr	r3, [r7, #8]
 800ee8a:	015a      	lsls	r2, r3, #5
 800ee8c:	68fb      	ldr	r3, [r7, #12]
 800ee8e:	4413      	add	r3, r2
 800ee90:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ee94:	681a      	ldr	r2, [r3, #0]
 800ee96:	68bb      	ldr	r3, [r7, #8]
 800ee98:	0159      	lsls	r1, r3, #5
 800ee9a:	68fb      	ldr	r3, [r7, #12]
 800ee9c:	440b      	add	r3, r1
 800ee9e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800eea2:	4619      	mov	r1, r3
 800eea4:	4b35      	ldr	r3, [pc, #212]	; (800ef7c <USB_DeactivateEndpoint+0x1b0>)
 800eea6:	4013      	ands	r3, r2
 800eea8:	600b      	str	r3, [r1, #0]
 800eeaa:	e060      	b.n	800ef6e <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800eeac:	68bb      	ldr	r3, [r7, #8]
 800eeae:	015a      	lsls	r2, r3, #5
 800eeb0:	68fb      	ldr	r3, [r7, #12]
 800eeb2:	4413      	add	r3, r2
 800eeb4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800eeb8:	681b      	ldr	r3, [r3, #0]
 800eeba:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800eebe:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800eec2:	d11f      	bne.n	800ef04 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 800eec4:	68bb      	ldr	r3, [r7, #8]
 800eec6:	015a      	lsls	r2, r3, #5
 800eec8:	68fb      	ldr	r3, [r7, #12]
 800eeca:	4413      	add	r3, r2
 800eecc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800eed0:	681b      	ldr	r3, [r3, #0]
 800eed2:	68ba      	ldr	r2, [r7, #8]
 800eed4:	0151      	lsls	r1, r2, #5
 800eed6:	68fa      	ldr	r2, [r7, #12]
 800eed8:	440a      	add	r2, r1
 800eeda:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800eede:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800eee2:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 800eee4:	68bb      	ldr	r3, [r7, #8]
 800eee6:	015a      	lsls	r2, r3, #5
 800eee8:	68fb      	ldr	r3, [r7, #12]
 800eeea:	4413      	add	r3, r2
 800eeec:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800eef0:	681b      	ldr	r3, [r3, #0]
 800eef2:	68ba      	ldr	r2, [r7, #8]
 800eef4:	0151      	lsls	r1, r2, #5
 800eef6:	68fa      	ldr	r2, [r7, #12]
 800eef8:	440a      	add	r2, r1
 800eefa:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800eefe:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800ef02:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800ef04:	68fb      	ldr	r3, [r7, #12]
 800ef06:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ef0a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800ef0c:	683b      	ldr	r3, [r7, #0]
 800ef0e:	781b      	ldrb	r3, [r3, #0]
 800ef10:	f003 030f 	and.w	r3, r3, #15
 800ef14:	2101      	movs	r1, #1
 800ef16:	fa01 f303 	lsl.w	r3, r1, r3
 800ef1a:	041b      	lsls	r3, r3, #16
 800ef1c:	43db      	mvns	r3, r3
 800ef1e:	68f9      	ldr	r1, [r7, #12]
 800ef20:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800ef24:	4013      	ands	r3, r2
 800ef26:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800ef28:	68fb      	ldr	r3, [r7, #12]
 800ef2a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ef2e:	69da      	ldr	r2, [r3, #28]
 800ef30:	683b      	ldr	r3, [r7, #0]
 800ef32:	781b      	ldrb	r3, [r3, #0]
 800ef34:	f003 030f 	and.w	r3, r3, #15
 800ef38:	2101      	movs	r1, #1
 800ef3a:	fa01 f303 	lsl.w	r3, r1, r3
 800ef3e:	041b      	lsls	r3, r3, #16
 800ef40:	43db      	mvns	r3, r3
 800ef42:	68f9      	ldr	r1, [r7, #12]
 800ef44:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800ef48:	4013      	ands	r3, r2
 800ef4a:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 800ef4c:	68bb      	ldr	r3, [r7, #8]
 800ef4e:	015a      	lsls	r2, r3, #5
 800ef50:	68fb      	ldr	r3, [r7, #12]
 800ef52:	4413      	add	r3, r2
 800ef54:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ef58:	681a      	ldr	r2, [r3, #0]
 800ef5a:	68bb      	ldr	r3, [r7, #8]
 800ef5c:	0159      	lsls	r1, r3, #5
 800ef5e:	68fb      	ldr	r3, [r7, #12]
 800ef60:	440b      	add	r3, r1
 800ef62:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ef66:	4619      	mov	r1, r3
 800ef68:	4b05      	ldr	r3, [pc, #20]	; (800ef80 <USB_DeactivateEndpoint+0x1b4>)
 800ef6a:	4013      	ands	r3, r2
 800ef6c:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 800ef6e:	2300      	movs	r3, #0
}
 800ef70:	4618      	mov	r0, r3
 800ef72:	3714      	adds	r7, #20
 800ef74:	46bd      	mov	sp, r7
 800ef76:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ef7a:	4770      	bx	lr
 800ef7c:	ec337800 	.word	0xec337800
 800ef80:	eff37800 	.word	0xeff37800

0800ef84 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 800ef84:	b580      	push	{r7, lr}
 800ef86:	b08a      	sub	sp, #40	; 0x28
 800ef88:	af02      	add	r7, sp, #8
 800ef8a:	60f8      	str	r0, [r7, #12]
 800ef8c:	60b9      	str	r1, [r7, #8]
 800ef8e:	4613      	mov	r3, r2
 800ef90:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ef92:	68fb      	ldr	r3, [r7, #12]
 800ef94:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 800ef96:	68bb      	ldr	r3, [r7, #8]
 800ef98:	781b      	ldrb	r3, [r3, #0]
 800ef9a:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 800ef9c:	68bb      	ldr	r3, [r7, #8]
 800ef9e:	785b      	ldrb	r3, [r3, #1]
 800efa0:	2b01      	cmp	r3, #1
 800efa2:	f040 8163 	bne.w	800f26c <USB_EPStartXfer+0x2e8>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800efa6:	68bb      	ldr	r3, [r7, #8]
 800efa8:	695b      	ldr	r3, [r3, #20]
 800efaa:	2b00      	cmp	r3, #0
 800efac:	d132      	bne.n	800f014 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800efae:	69bb      	ldr	r3, [r7, #24]
 800efb0:	015a      	lsls	r2, r3, #5
 800efb2:	69fb      	ldr	r3, [r7, #28]
 800efb4:	4413      	add	r3, r2
 800efb6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800efba:	691a      	ldr	r2, [r3, #16]
 800efbc:	69bb      	ldr	r3, [r7, #24]
 800efbe:	0159      	lsls	r1, r3, #5
 800efc0:	69fb      	ldr	r3, [r7, #28]
 800efc2:	440b      	add	r3, r1
 800efc4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800efc8:	4619      	mov	r1, r3
 800efca:	4ba5      	ldr	r3, [pc, #660]	; (800f260 <USB_EPStartXfer+0x2dc>)
 800efcc:	4013      	ands	r3, r2
 800efce:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800efd0:	69bb      	ldr	r3, [r7, #24]
 800efd2:	015a      	lsls	r2, r3, #5
 800efd4:	69fb      	ldr	r3, [r7, #28]
 800efd6:	4413      	add	r3, r2
 800efd8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800efdc:	691b      	ldr	r3, [r3, #16]
 800efde:	69ba      	ldr	r2, [r7, #24]
 800efe0:	0151      	lsls	r1, r2, #5
 800efe2:	69fa      	ldr	r2, [r7, #28]
 800efe4:	440a      	add	r2, r1
 800efe6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800efea:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800efee:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800eff0:	69bb      	ldr	r3, [r7, #24]
 800eff2:	015a      	lsls	r2, r3, #5
 800eff4:	69fb      	ldr	r3, [r7, #28]
 800eff6:	4413      	add	r3, r2
 800eff8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800effc:	691a      	ldr	r2, [r3, #16]
 800effe:	69bb      	ldr	r3, [r7, #24]
 800f000:	0159      	lsls	r1, r3, #5
 800f002:	69fb      	ldr	r3, [r7, #28]
 800f004:	440b      	add	r3, r1
 800f006:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800f00a:	4619      	mov	r1, r3
 800f00c:	4b95      	ldr	r3, [pc, #596]	; (800f264 <USB_EPStartXfer+0x2e0>)
 800f00e:	4013      	ands	r3, r2
 800f010:	610b      	str	r3, [r1, #16]
 800f012:	e074      	b.n	800f0fe <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800f014:	69bb      	ldr	r3, [r7, #24]
 800f016:	015a      	lsls	r2, r3, #5
 800f018:	69fb      	ldr	r3, [r7, #28]
 800f01a:	4413      	add	r3, r2
 800f01c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800f020:	691a      	ldr	r2, [r3, #16]
 800f022:	69bb      	ldr	r3, [r7, #24]
 800f024:	0159      	lsls	r1, r3, #5
 800f026:	69fb      	ldr	r3, [r7, #28]
 800f028:	440b      	add	r3, r1
 800f02a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800f02e:	4619      	mov	r1, r3
 800f030:	4b8c      	ldr	r3, [pc, #560]	; (800f264 <USB_EPStartXfer+0x2e0>)
 800f032:	4013      	ands	r3, r2
 800f034:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800f036:	69bb      	ldr	r3, [r7, #24]
 800f038:	015a      	lsls	r2, r3, #5
 800f03a:	69fb      	ldr	r3, [r7, #28]
 800f03c:	4413      	add	r3, r2
 800f03e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800f042:	691a      	ldr	r2, [r3, #16]
 800f044:	69bb      	ldr	r3, [r7, #24]
 800f046:	0159      	lsls	r1, r3, #5
 800f048:	69fb      	ldr	r3, [r7, #28]
 800f04a:	440b      	add	r3, r1
 800f04c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800f050:	4619      	mov	r1, r3
 800f052:	4b83      	ldr	r3, [pc, #524]	; (800f260 <USB_EPStartXfer+0x2dc>)
 800f054:	4013      	ands	r3, r2
 800f056:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 800f058:	69bb      	ldr	r3, [r7, #24]
 800f05a:	015a      	lsls	r2, r3, #5
 800f05c:	69fb      	ldr	r3, [r7, #28]
 800f05e:	4413      	add	r3, r2
 800f060:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800f064:	691a      	ldr	r2, [r3, #16]
 800f066:	68bb      	ldr	r3, [r7, #8]
 800f068:	6959      	ldr	r1, [r3, #20]
 800f06a:	68bb      	ldr	r3, [r7, #8]
 800f06c:	689b      	ldr	r3, [r3, #8]
 800f06e:	440b      	add	r3, r1
 800f070:	1e59      	subs	r1, r3, #1
 800f072:	68bb      	ldr	r3, [r7, #8]
 800f074:	689b      	ldr	r3, [r3, #8]
 800f076:	fbb1 f3f3 	udiv	r3, r1, r3
 800f07a:	04d9      	lsls	r1, r3, #19
 800f07c:	4b7a      	ldr	r3, [pc, #488]	; (800f268 <USB_EPStartXfer+0x2e4>)
 800f07e:	400b      	ands	r3, r1
 800f080:	69b9      	ldr	r1, [r7, #24]
 800f082:	0148      	lsls	r0, r1, #5
 800f084:	69f9      	ldr	r1, [r7, #28]
 800f086:	4401      	add	r1, r0
 800f088:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800f08c:	4313      	orrs	r3, r2
 800f08e:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 800f090:	69bb      	ldr	r3, [r7, #24]
 800f092:	015a      	lsls	r2, r3, #5
 800f094:	69fb      	ldr	r3, [r7, #28]
 800f096:	4413      	add	r3, r2
 800f098:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800f09c:	691a      	ldr	r2, [r3, #16]
 800f09e:	68bb      	ldr	r3, [r7, #8]
 800f0a0:	695b      	ldr	r3, [r3, #20]
 800f0a2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800f0a6:	69b9      	ldr	r1, [r7, #24]
 800f0a8:	0148      	lsls	r0, r1, #5
 800f0aa:	69f9      	ldr	r1, [r7, #28]
 800f0ac:	4401      	add	r1, r0
 800f0ae:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800f0b2:	4313      	orrs	r3, r2
 800f0b4:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 800f0b6:	68bb      	ldr	r3, [r7, #8]
 800f0b8:	78db      	ldrb	r3, [r3, #3]
 800f0ba:	2b01      	cmp	r3, #1
 800f0bc:	d11f      	bne.n	800f0fe <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 800f0be:	69bb      	ldr	r3, [r7, #24]
 800f0c0:	015a      	lsls	r2, r3, #5
 800f0c2:	69fb      	ldr	r3, [r7, #28]
 800f0c4:	4413      	add	r3, r2
 800f0c6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800f0ca:	691b      	ldr	r3, [r3, #16]
 800f0cc:	69ba      	ldr	r2, [r7, #24]
 800f0ce:	0151      	lsls	r1, r2, #5
 800f0d0:	69fa      	ldr	r2, [r7, #28]
 800f0d2:	440a      	add	r2, r1
 800f0d4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800f0d8:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 800f0dc:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 800f0de:	69bb      	ldr	r3, [r7, #24]
 800f0e0:	015a      	lsls	r2, r3, #5
 800f0e2:	69fb      	ldr	r3, [r7, #28]
 800f0e4:	4413      	add	r3, r2
 800f0e6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800f0ea:	691b      	ldr	r3, [r3, #16]
 800f0ec:	69ba      	ldr	r2, [r7, #24]
 800f0ee:	0151      	lsls	r1, r2, #5
 800f0f0:	69fa      	ldr	r2, [r7, #28]
 800f0f2:	440a      	add	r2, r1
 800f0f4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800f0f8:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800f0fc:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 800f0fe:	79fb      	ldrb	r3, [r7, #7]
 800f100:	2b01      	cmp	r3, #1
 800f102:	d14b      	bne.n	800f19c <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 800f104:	68bb      	ldr	r3, [r7, #8]
 800f106:	691b      	ldr	r3, [r3, #16]
 800f108:	2b00      	cmp	r3, #0
 800f10a:	d009      	beq.n	800f120 <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 800f10c:	69bb      	ldr	r3, [r7, #24]
 800f10e:	015a      	lsls	r2, r3, #5
 800f110:	69fb      	ldr	r3, [r7, #28]
 800f112:	4413      	add	r3, r2
 800f114:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800f118:	461a      	mov	r2, r3
 800f11a:	68bb      	ldr	r3, [r7, #8]
 800f11c:	691b      	ldr	r3, [r3, #16]
 800f11e:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 800f120:	68bb      	ldr	r3, [r7, #8]
 800f122:	78db      	ldrb	r3, [r3, #3]
 800f124:	2b01      	cmp	r3, #1
 800f126:	d128      	bne.n	800f17a <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800f128:	69fb      	ldr	r3, [r7, #28]
 800f12a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800f12e:	689b      	ldr	r3, [r3, #8]
 800f130:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800f134:	2b00      	cmp	r3, #0
 800f136:	d110      	bne.n	800f15a <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800f138:	69bb      	ldr	r3, [r7, #24]
 800f13a:	015a      	lsls	r2, r3, #5
 800f13c:	69fb      	ldr	r3, [r7, #28]
 800f13e:	4413      	add	r3, r2
 800f140:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800f144:	681b      	ldr	r3, [r3, #0]
 800f146:	69ba      	ldr	r2, [r7, #24]
 800f148:	0151      	lsls	r1, r2, #5
 800f14a:	69fa      	ldr	r2, [r7, #28]
 800f14c:	440a      	add	r2, r1
 800f14e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800f152:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800f156:	6013      	str	r3, [r2, #0]
 800f158:	e00f      	b.n	800f17a <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800f15a:	69bb      	ldr	r3, [r7, #24]
 800f15c:	015a      	lsls	r2, r3, #5
 800f15e:	69fb      	ldr	r3, [r7, #28]
 800f160:	4413      	add	r3, r2
 800f162:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800f166:	681b      	ldr	r3, [r3, #0]
 800f168:	69ba      	ldr	r2, [r7, #24]
 800f16a:	0151      	lsls	r1, r2, #5
 800f16c:	69fa      	ldr	r2, [r7, #28]
 800f16e:	440a      	add	r2, r1
 800f170:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800f174:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800f178:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800f17a:	69bb      	ldr	r3, [r7, #24]
 800f17c:	015a      	lsls	r2, r3, #5
 800f17e:	69fb      	ldr	r3, [r7, #28]
 800f180:	4413      	add	r3, r2
 800f182:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800f186:	681b      	ldr	r3, [r3, #0]
 800f188:	69ba      	ldr	r2, [r7, #24]
 800f18a:	0151      	lsls	r1, r2, #5
 800f18c:	69fa      	ldr	r2, [r7, #28]
 800f18e:	440a      	add	r2, r1
 800f190:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800f194:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800f198:	6013      	str	r3, [r2, #0]
 800f19a:	e133      	b.n	800f404 <USB_EPStartXfer+0x480>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800f19c:	69bb      	ldr	r3, [r7, #24]
 800f19e:	015a      	lsls	r2, r3, #5
 800f1a0:	69fb      	ldr	r3, [r7, #28]
 800f1a2:	4413      	add	r3, r2
 800f1a4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800f1a8:	681b      	ldr	r3, [r3, #0]
 800f1aa:	69ba      	ldr	r2, [r7, #24]
 800f1ac:	0151      	lsls	r1, r2, #5
 800f1ae:	69fa      	ldr	r2, [r7, #28]
 800f1b0:	440a      	add	r2, r1
 800f1b2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800f1b6:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800f1ba:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800f1bc:	68bb      	ldr	r3, [r7, #8]
 800f1be:	78db      	ldrb	r3, [r3, #3]
 800f1c0:	2b01      	cmp	r3, #1
 800f1c2:	d015      	beq.n	800f1f0 <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 800f1c4:	68bb      	ldr	r3, [r7, #8]
 800f1c6:	695b      	ldr	r3, [r3, #20]
 800f1c8:	2b00      	cmp	r3, #0
 800f1ca:	f000 811b 	beq.w	800f404 <USB_EPStartXfer+0x480>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800f1ce:	69fb      	ldr	r3, [r7, #28]
 800f1d0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800f1d4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800f1d6:	68bb      	ldr	r3, [r7, #8]
 800f1d8:	781b      	ldrb	r3, [r3, #0]
 800f1da:	f003 030f 	and.w	r3, r3, #15
 800f1de:	2101      	movs	r1, #1
 800f1e0:	fa01 f303 	lsl.w	r3, r1, r3
 800f1e4:	69f9      	ldr	r1, [r7, #28]
 800f1e6:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800f1ea:	4313      	orrs	r3, r2
 800f1ec:	634b      	str	r3, [r1, #52]	; 0x34
 800f1ee:	e109      	b.n	800f404 <USB_EPStartXfer+0x480>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800f1f0:	69fb      	ldr	r3, [r7, #28]
 800f1f2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800f1f6:	689b      	ldr	r3, [r3, #8]
 800f1f8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800f1fc:	2b00      	cmp	r3, #0
 800f1fe:	d110      	bne.n	800f222 <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800f200:	69bb      	ldr	r3, [r7, #24]
 800f202:	015a      	lsls	r2, r3, #5
 800f204:	69fb      	ldr	r3, [r7, #28]
 800f206:	4413      	add	r3, r2
 800f208:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800f20c:	681b      	ldr	r3, [r3, #0]
 800f20e:	69ba      	ldr	r2, [r7, #24]
 800f210:	0151      	lsls	r1, r2, #5
 800f212:	69fa      	ldr	r2, [r7, #28]
 800f214:	440a      	add	r2, r1
 800f216:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800f21a:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800f21e:	6013      	str	r3, [r2, #0]
 800f220:	e00f      	b.n	800f242 <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800f222:	69bb      	ldr	r3, [r7, #24]
 800f224:	015a      	lsls	r2, r3, #5
 800f226:	69fb      	ldr	r3, [r7, #28]
 800f228:	4413      	add	r3, r2
 800f22a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800f22e:	681b      	ldr	r3, [r3, #0]
 800f230:	69ba      	ldr	r2, [r7, #24]
 800f232:	0151      	lsls	r1, r2, #5
 800f234:	69fa      	ldr	r2, [r7, #28]
 800f236:	440a      	add	r2, r1
 800f238:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800f23c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800f240:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 800f242:	68bb      	ldr	r3, [r7, #8]
 800f244:	68d9      	ldr	r1, [r3, #12]
 800f246:	68bb      	ldr	r3, [r7, #8]
 800f248:	781a      	ldrb	r2, [r3, #0]
 800f24a:	68bb      	ldr	r3, [r7, #8]
 800f24c:	695b      	ldr	r3, [r3, #20]
 800f24e:	b298      	uxth	r0, r3
 800f250:	79fb      	ldrb	r3, [r7, #7]
 800f252:	9300      	str	r3, [sp, #0]
 800f254:	4603      	mov	r3, r0
 800f256:	68f8      	ldr	r0, [r7, #12]
 800f258:	f000 fa38 	bl	800f6cc <USB_WritePacket>
 800f25c:	e0d2      	b.n	800f404 <USB_EPStartXfer+0x480>
 800f25e:	bf00      	nop
 800f260:	e007ffff 	.word	0xe007ffff
 800f264:	fff80000 	.word	0xfff80000
 800f268:	1ff80000 	.word	0x1ff80000
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800f26c:	69bb      	ldr	r3, [r7, #24]
 800f26e:	015a      	lsls	r2, r3, #5
 800f270:	69fb      	ldr	r3, [r7, #28]
 800f272:	4413      	add	r3, r2
 800f274:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800f278:	691a      	ldr	r2, [r3, #16]
 800f27a:	69bb      	ldr	r3, [r7, #24]
 800f27c:	0159      	lsls	r1, r3, #5
 800f27e:	69fb      	ldr	r3, [r7, #28]
 800f280:	440b      	add	r3, r1
 800f282:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800f286:	4619      	mov	r1, r3
 800f288:	4b61      	ldr	r3, [pc, #388]	; (800f410 <USB_EPStartXfer+0x48c>)
 800f28a:	4013      	ands	r3, r2
 800f28c:	610b      	str	r3, [r1, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800f28e:	69bb      	ldr	r3, [r7, #24]
 800f290:	015a      	lsls	r2, r3, #5
 800f292:	69fb      	ldr	r3, [r7, #28]
 800f294:	4413      	add	r3, r2
 800f296:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800f29a:	691a      	ldr	r2, [r3, #16]
 800f29c:	69bb      	ldr	r3, [r7, #24]
 800f29e:	0159      	lsls	r1, r3, #5
 800f2a0:	69fb      	ldr	r3, [r7, #28]
 800f2a2:	440b      	add	r3, r1
 800f2a4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800f2a8:	4619      	mov	r1, r3
 800f2aa:	4b5a      	ldr	r3, [pc, #360]	; (800f414 <USB_EPStartXfer+0x490>)
 800f2ac:	4013      	ands	r3, r2
 800f2ae:	610b      	str	r3, [r1, #16]

    if (ep->xfer_len == 0U)
 800f2b0:	68bb      	ldr	r3, [r7, #8]
 800f2b2:	695b      	ldr	r3, [r3, #20]
 800f2b4:	2b00      	cmp	r3, #0
 800f2b6:	d123      	bne.n	800f300 <USB_EPStartXfer+0x37c>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 800f2b8:	69bb      	ldr	r3, [r7, #24]
 800f2ba:	015a      	lsls	r2, r3, #5
 800f2bc:	69fb      	ldr	r3, [r7, #28]
 800f2be:	4413      	add	r3, r2
 800f2c0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800f2c4:	691a      	ldr	r2, [r3, #16]
 800f2c6:	68bb      	ldr	r3, [r7, #8]
 800f2c8:	689b      	ldr	r3, [r3, #8]
 800f2ca:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800f2ce:	69b9      	ldr	r1, [r7, #24]
 800f2d0:	0148      	lsls	r0, r1, #5
 800f2d2:	69f9      	ldr	r1, [r7, #28]
 800f2d4:	4401      	add	r1, r0
 800f2d6:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800f2da:	4313      	orrs	r3, r2
 800f2dc:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800f2de:	69bb      	ldr	r3, [r7, #24]
 800f2e0:	015a      	lsls	r2, r3, #5
 800f2e2:	69fb      	ldr	r3, [r7, #28]
 800f2e4:	4413      	add	r3, r2
 800f2e6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800f2ea:	691b      	ldr	r3, [r3, #16]
 800f2ec:	69ba      	ldr	r2, [r7, #24]
 800f2ee:	0151      	lsls	r1, r2, #5
 800f2f0:	69fa      	ldr	r2, [r7, #28]
 800f2f2:	440a      	add	r2, r1
 800f2f4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800f2f8:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800f2fc:	6113      	str	r3, [r2, #16]
 800f2fe:	e033      	b.n	800f368 <USB_EPStartXfer+0x3e4>
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 800f300:	68bb      	ldr	r3, [r7, #8]
 800f302:	695a      	ldr	r2, [r3, #20]
 800f304:	68bb      	ldr	r3, [r7, #8]
 800f306:	689b      	ldr	r3, [r3, #8]
 800f308:	4413      	add	r3, r2
 800f30a:	1e5a      	subs	r2, r3, #1
 800f30c:	68bb      	ldr	r3, [r7, #8]
 800f30e:	689b      	ldr	r3, [r3, #8]
 800f310:	fbb2 f3f3 	udiv	r3, r2, r3
 800f314:	82fb      	strh	r3, [r7, #22]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 800f316:	69bb      	ldr	r3, [r7, #24]
 800f318:	015a      	lsls	r2, r3, #5
 800f31a:	69fb      	ldr	r3, [r7, #28]
 800f31c:	4413      	add	r3, r2
 800f31e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800f322:	691a      	ldr	r2, [r3, #16]
 800f324:	8afb      	ldrh	r3, [r7, #22]
 800f326:	04d9      	lsls	r1, r3, #19
 800f328:	4b3b      	ldr	r3, [pc, #236]	; (800f418 <USB_EPStartXfer+0x494>)
 800f32a:	400b      	ands	r3, r1
 800f32c:	69b9      	ldr	r1, [r7, #24]
 800f32e:	0148      	lsls	r0, r1, #5
 800f330:	69f9      	ldr	r1, [r7, #28]
 800f332:	4401      	add	r1, r0
 800f334:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800f338:	4313      	orrs	r3, r2
 800f33a:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket * pktcnt);
 800f33c:	69bb      	ldr	r3, [r7, #24]
 800f33e:	015a      	lsls	r2, r3, #5
 800f340:	69fb      	ldr	r3, [r7, #28]
 800f342:	4413      	add	r3, r2
 800f344:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800f348:	691a      	ldr	r2, [r3, #16]
 800f34a:	68bb      	ldr	r3, [r7, #8]
 800f34c:	689b      	ldr	r3, [r3, #8]
 800f34e:	8af9      	ldrh	r1, [r7, #22]
 800f350:	fb01 f303 	mul.w	r3, r1, r3
 800f354:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800f358:	69b9      	ldr	r1, [r7, #24]
 800f35a:	0148      	lsls	r0, r1, #5
 800f35c:	69f9      	ldr	r1, [r7, #28]
 800f35e:	4401      	add	r1, r0
 800f360:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800f364:	4313      	orrs	r3, r2
 800f366:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 800f368:	79fb      	ldrb	r3, [r7, #7]
 800f36a:	2b01      	cmp	r3, #1
 800f36c:	d10d      	bne.n	800f38a <USB_EPStartXfer+0x406>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 800f36e:	68bb      	ldr	r3, [r7, #8]
 800f370:	68db      	ldr	r3, [r3, #12]
 800f372:	2b00      	cmp	r3, #0
 800f374:	d009      	beq.n	800f38a <USB_EPStartXfer+0x406>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 800f376:	68bb      	ldr	r3, [r7, #8]
 800f378:	68d9      	ldr	r1, [r3, #12]
 800f37a:	69bb      	ldr	r3, [r7, #24]
 800f37c:	015a      	lsls	r2, r3, #5
 800f37e:	69fb      	ldr	r3, [r7, #28]
 800f380:	4413      	add	r3, r2
 800f382:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800f386:	460a      	mov	r2, r1
 800f388:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 800f38a:	68bb      	ldr	r3, [r7, #8]
 800f38c:	78db      	ldrb	r3, [r3, #3]
 800f38e:	2b01      	cmp	r3, #1
 800f390:	d128      	bne.n	800f3e4 <USB_EPStartXfer+0x460>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800f392:	69fb      	ldr	r3, [r7, #28]
 800f394:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800f398:	689b      	ldr	r3, [r3, #8]
 800f39a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800f39e:	2b00      	cmp	r3, #0
 800f3a0:	d110      	bne.n	800f3c4 <USB_EPStartXfer+0x440>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 800f3a2:	69bb      	ldr	r3, [r7, #24]
 800f3a4:	015a      	lsls	r2, r3, #5
 800f3a6:	69fb      	ldr	r3, [r7, #28]
 800f3a8:	4413      	add	r3, r2
 800f3aa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800f3ae:	681b      	ldr	r3, [r3, #0]
 800f3b0:	69ba      	ldr	r2, [r7, #24]
 800f3b2:	0151      	lsls	r1, r2, #5
 800f3b4:	69fa      	ldr	r2, [r7, #28]
 800f3b6:	440a      	add	r2, r1
 800f3b8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800f3bc:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800f3c0:	6013      	str	r3, [r2, #0]
 800f3c2:	e00f      	b.n	800f3e4 <USB_EPStartXfer+0x460>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 800f3c4:	69bb      	ldr	r3, [r7, #24]
 800f3c6:	015a      	lsls	r2, r3, #5
 800f3c8:	69fb      	ldr	r3, [r7, #28]
 800f3ca:	4413      	add	r3, r2
 800f3cc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800f3d0:	681b      	ldr	r3, [r3, #0]
 800f3d2:	69ba      	ldr	r2, [r7, #24]
 800f3d4:	0151      	lsls	r1, r2, #5
 800f3d6:	69fa      	ldr	r2, [r7, #28]
 800f3d8:	440a      	add	r2, r1
 800f3da:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800f3de:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800f3e2:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 800f3e4:	69bb      	ldr	r3, [r7, #24]
 800f3e6:	015a      	lsls	r2, r3, #5
 800f3e8:	69fb      	ldr	r3, [r7, #28]
 800f3ea:	4413      	add	r3, r2
 800f3ec:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800f3f0:	681b      	ldr	r3, [r3, #0]
 800f3f2:	69ba      	ldr	r2, [r7, #24]
 800f3f4:	0151      	lsls	r1, r2, #5
 800f3f6:	69fa      	ldr	r2, [r7, #28]
 800f3f8:	440a      	add	r2, r1
 800f3fa:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800f3fe:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800f402:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800f404:	2300      	movs	r3, #0
}
 800f406:	4618      	mov	r0, r3
 800f408:	3720      	adds	r7, #32
 800f40a:	46bd      	mov	sp, r7
 800f40c:	bd80      	pop	{r7, pc}
 800f40e:	bf00      	nop
 800f410:	fff80000 	.word	0xfff80000
 800f414:	e007ffff 	.word	0xe007ffff
 800f418:	1ff80000 	.word	0x1ff80000

0800f41c <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 800f41c:	b480      	push	{r7}
 800f41e:	b087      	sub	sp, #28
 800f420:	af00      	add	r7, sp, #0
 800f422:	60f8      	str	r0, [r7, #12]
 800f424:	60b9      	str	r1, [r7, #8]
 800f426:	4613      	mov	r3, r2
 800f428:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800f42a:	68fb      	ldr	r3, [r7, #12]
 800f42c:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 800f42e:	68bb      	ldr	r3, [r7, #8]
 800f430:	781b      	ldrb	r3, [r3, #0]
 800f432:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 800f434:	68bb      	ldr	r3, [r7, #8]
 800f436:	785b      	ldrb	r3, [r3, #1]
 800f438:	2b01      	cmp	r3, #1
 800f43a:	f040 80cd 	bne.w	800f5d8 <USB_EP0StartXfer+0x1bc>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800f43e:	68bb      	ldr	r3, [r7, #8]
 800f440:	695b      	ldr	r3, [r3, #20]
 800f442:	2b00      	cmp	r3, #0
 800f444:	d132      	bne.n	800f4ac <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800f446:	693b      	ldr	r3, [r7, #16]
 800f448:	015a      	lsls	r2, r3, #5
 800f44a:	697b      	ldr	r3, [r7, #20]
 800f44c:	4413      	add	r3, r2
 800f44e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800f452:	691a      	ldr	r2, [r3, #16]
 800f454:	693b      	ldr	r3, [r7, #16]
 800f456:	0159      	lsls	r1, r3, #5
 800f458:	697b      	ldr	r3, [r7, #20]
 800f45a:	440b      	add	r3, r1
 800f45c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800f460:	4619      	mov	r1, r3
 800f462:	4b98      	ldr	r3, [pc, #608]	; (800f6c4 <USB_EP0StartXfer+0x2a8>)
 800f464:	4013      	ands	r3, r2
 800f466:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800f468:	693b      	ldr	r3, [r7, #16]
 800f46a:	015a      	lsls	r2, r3, #5
 800f46c:	697b      	ldr	r3, [r7, #20]
 800f46e:	4413      	add	r3, r2
 800f470:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800f474:	691b      	ldr	r3, [r3, #16]
 800f476:	693a      	ldr	r2, [r7, #16]
 800f478:	0151      	lsls	r1, r2, #5
 800f47a:	697a      	ldr	r2, [r7, #20]
 800f47c:	440a      	add	r2, r1
 800f47e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800f482:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800f486:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800f488:	693b      	ldr	r3, [r7, #16]
 800f48a:	015a      	lsls	r2, r3, #5
 800f48c:	697b      	ldr	r3, [r7, #20]
 800f48e:	4413      	add	r3, r2
 800f490:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800f494:	691a      	ldr	r2, [r3, #16]
 800f496:	693b      	ldr	r3, [r7, #16]
 800f498:	0159      	lsls	r1, r3, #5
 800f49a:	697b      	ldr	r3, [r7, #20]
 800f49c:	440b      	add	r3, r1
 800f49e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800f4a2:	4619      	mov	r1, r3
 800f4a4:	4b88      	ldr	r3, [pc, #544]	; (800f6c8 <USB_EP0StartXfer+0x2ac>)
 800f4a6:	4013      	ands	r3, r2
 800f4a8:	610b      	str	r3, [r1, #16]
 800f4aa:	e04e      	b.n	800f54a <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800f4ac:	693b      	ldr	r3, [r7, #16]
 800f4ae:	015a      	lsls	r2, r3, #5
 800f4b0:	697b      	ldr	r3, [r7, #20]
 800f4b2:	4413      	add	r3, r2
 800f4b4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800f4b8:	691a      	ldr	r2, [r3, #16]
 800f4ba:	693b      	ldr	r3, [r7, #16]
 800f4bc:	0159      	lsls	r1, r3, #5
 800f4be:	697b      	ldr	r3, [r7, #20]
 800f4c0:	440b      	add	r3, r1
 800f4c2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800f4c6:	4619      	mov	r1, r3
 800f4c8:	4b7f      	ldr	r3, [pc, #508]	; (800f6c8 <USB_EP0StartXfer+0x2ac>)
 800f4ca:	4013      	ands	r3, r2
 800f4cc:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800f4ce:	693b      	ldr	r3, [r7, #16]
 800f4d0:	015a      	lsls	r2, r3, #5
 800f4d2:	697b      	ldr	r3, [r7, #20]
 800f4d4:	4413      	add	r3, r2
 800f4d6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800f4da:	691a      	ldr	r2, [r3, #16]
 800f4dc:	693b      	ldr	r3, [r7, #16]
 800f4de:	0159      	lsls	r1, r3, #5
 800f4e0:	697b      	ldr	r3, [r7, #20]
 800f4e2:	440b      	add	r3, r1
 800f4e4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800f4e8:	4619      	mov	r1, r3
 800f4ea:	4b76      	ldr	r3, [pc, #472]	; (800f6c4 <USB_EP0StartXfer+0x2a8>)
 800f4ec:	4013      	ands	r3, r2
 800f4ee:	610b      	str	r3, [r1, #16]

      if (ep->xfer_len > ep->maxpacket)
 800f4f0:	68bb      	ldr	r3, [r7, #8]
 800f4f2:	695a      	ldr	r2, [r3, #20]
 800f4f4:	68bb      	ldr	r3, [r7, #8]
 800f4f6:	689b      	ldr	r3, [r3, #8]
 800f4f8:	429a      	cmp	r2, r3
 800f4fa:	d903      	bls.n	800f504 <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 800f4fc:	68bb      	ldr	r3, [r7, #8]
 800f4fe:	689a      	ldr	r2, [r3, #8]
 800f500:	68bb      	ldr	r3, [r7, #8]
 800f502:	615a      	str	r2, [r3, #20]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800f504:	693b      	ldr	r3, [r7, #16]
 800f506:	015a      	lsls	r2, r3, #5
 800f508:	697b      	ldr	r3, [r7, #20]
 800f50a:	4413      	add	r3, r2
 800f50c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800f510:	691b      	ldr	r3, [r3, #16]
 800f512:	693a      	ldr	r2, [r7, #16]
 800f514:	0151      	lsls	r1, r2, #5
 800f516:	697a      	ldr	r2, [r7, #20]
 800f518:	440a      	add	r2, r1
 800f51a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800f51e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800f522:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 800f524:	693b      	ldr	r3, [r7, #16]
 800f526:	015a      	lsls	r2, r3, #5
 800f528:	697b      	ldr	r3, [r7, #20]
 800f52a:	4413      	add	r3, r2
 800f52c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800f530:	691a      	ldr	r2, [r3, #16]
 800f532:	68bb      	ldr	r3, [r7, #8]
 800f534:	695b      	ldr	r3, [r3, #20]
 800f536:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800f53a:	6939      	ldr	r1, [r7, #16]
 800f53c:	0148      	lsls	r0, r1, #5
 800f53e:	6979      	ldr	r1, [r7, #20]
 800f540:	4401      	add	r1, r0
 800f542:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800f546:	4313      	orrs	r3, r2
 800f548:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 800f54a:	79fb      	ldrb	r3, [r7, #7]
 800f54c:	2b01      	cmp	r3, #1
 800f54e:	d11e      	bne.n	800f58e <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 800f550:	68bb      	ldr	r3, [r7, #8]
 800f552:	691b      	ldr	r3, [r3, #16]
 800f554:	2b00      	cmp	r3, #0
 800f556:	d009      	beq.n	800f56c <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 800f558:	693b      	ldr	r3, [r7, #16]
 800f55a:	015a      	lsls	r2, r3, #5
 800f55c:	697b      	ldr	r3, [r7, #20]
 800f55e:	4413      	add	r3, r2
 800f560:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800f564:	461a      	mov	r2, r3
 800f566:	68bb      	ldr	r3, [r7, #8]
 800f568:	691b      	ldr	r3, [r3, #16]
 800f56a:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800f56c:	693b      	ldr	r3, [r7, #16]
 800f56e:	015a      	lsls	r2, r3, #5
 800f570:	697b      	ldr	r3, [r7, #20]
 800f572:	4413      	add	r3, r2
 800f574:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800f578:	681b      	ldr	r3, [r3, #0]
 800f57a:	693a      	ldr	r2, [r7, #16]
 800f57c:	0151      	lsls	r1, r2, #5
 800f57e:	697a      	ldr	r2, [r7, #20]
 800f580:	440a      	add	r2, r1
 800f582:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800f586:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800f58a:	6013      	str	r3, [r2, #0]
 800f58c:	e092      	b.n	800f6b4 <USB_EP0StartXfer+0x298>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800f58e:	693b      	ldr	r3, [r7, #16]
 800f590:	015a      	lsls	r2, r3, #5
 800f592:	697b      	ldr	r3, [r7, #20]
 800f594:	4413      	add	r3, r2
 800f596:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800f59a:	681b      	ldr	r3, [r3, #0]
 800f59c:	693a      	ldr	r2, [r7, #16]
 800f59e:	0151      	lsls	r1, r2, #5
 800f5a0:	697a      	ldr	r2, [r7, #20]
 800f5a2:	440a      	add	r2, r1
 800f5a4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800f5a8:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800f5ac:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 800f5ae:	68bb      	ldr	r3, [r7, #8]
 800f5b0:	695b      	ldr	r3, [r3, #20]
 800f5b2:	2b00      	cmp	r3, #0
 800f5b4:	d07e      	beq.n	800f6b4 <USB_EP0StartXfer+0x298>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800f5b6:	697b      	ldr	r3, [r7, #20]
 800f5b8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800f5bc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800f5be:	68bb      	ldr	r3, [r7, #8]
 800f5c0:	781b      	ldrb	r3, [r3, #0]
 800f5c2:	f003 030f 	and.w	r3, r3, #15
 800f5c6:	2101      	movs	r1, #1
 800f5c8:	fa01 f303 	lsl.w	r3, r1, r3
 800f5cc:	6979      	ldr	r1, [r7, #20]
 800f5ce:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800f5d2:	4313      	orrs	r3, r2
 800f5d4:	634b      	str	r3, [r1, #52]	; 0x34
 800f5d6:	e06d      	b.n	800f6b4 <USB_EP0StartXfer+0x298>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800f5d8:	693b      	ldr	r3, [r7, #16]
 800f5da:	015a      	lsls	r2, r3, #5
 800f5dc:	697b      	ldr	r3, [r7, #20]
 800f5de:	4413      	add	r3, r2
 800f5e0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800f5e4:	691a      	ldr	r2, [r3, #16]
 800f5e6:	693b      	ldr	r3, [r7, #16]
 800f5e8:	0159      	lsls	r1, r3, #5
 800f5ea:	697b      	ldr	r3, [r7, #20]
 800f5ec:	440b      	add	r3, r1
 800f5ee:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800f5f2:	4619      	mov	r1, r3
 800f5f4:	4b34      	ldr	r3, [pc, #208]	; (800f6c8 <USB_EP0StartXfer+0x2ac>)
 800f5f6:	4013      	ands	r3, r2
 800f5f8:	610b      	str	r3, [r1, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800f5fa:	693b      	ldr	r3, [r7, #16]
 800f5fc:	015a      	lsls	r2, r3, #5
 800f5fe:	697b      	ldr	r3, [r7, #20]
 800f600:	4413      	add	r3, r2
 800f602:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800f606:	691a      	ldr	r2, [r3, #16]
 800f608:	693b      	ldr	r3, [r7, #16]
 800f60a:	0159      	lsls	r1, r3, #5
 800f60c:	697b      	ldr	r3, [r7, #20]
 800f60e:	440b      	add	r3, r1
 800f610:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800f614:	4619      	mov	r1, r3
 800f616:	4b2b      	ldr	r3, [pc, #172]	; (800f6c4 <USB_EP0StartXfer+0x2a8>)
 800f618:	4013      	ands	r3, r2
 800f61a:	610b      	str	r3, [r1, #16]

    if (ep->xfer_len > 0U)
 800f61c:	68bb      	ldr	r3, [r7, #8]
 800f61e:	695b      	ldr	r3, [r3, #20]
 800f620:	2b00      	cmp	r3, #0
 800f622:	d003      	beq.n	800f62c <USB_EP0StartXfer+0x210>
    {
      ep->xfer_len = ep->maxpacket;
 800f624:	68bb      	ldr	r3, [r7, #8]
 800f626:	689a      	ldr	r2, [r3, #8]
 800f628:	68bb      	ldr	r3, [r7, #8]
 800f62a:	615a      	str	r2, [r3, #20]
    }

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800f62c:	693b      	ldr	r3, [r7, #16]
 800f62e:	015a      	lsls	r2, r3, #5
 800f630:	697b      	ldr	r3, [r7, #20]
 800f632:	4413      	add	r3, r2
 800f634:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800f638:	691b      	ldr	r3, [r3, #16]
 800f63a:	693a      	ldr	r2, [r7, #16]
 800f63c:	0151      	lsls	r1, r2, #5
 800f63e:	697a      	ldr	r2, [r7, #20]
 800f640:	440a      	add	r2, r1
 800f642:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800f646:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800f64a:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket));
 800f64c:	693b      	ldr	r3, [r7, #16]
 800f64e:	015a      	lsls	r2, r3, #5
 800f650:	697b      	ldr	r3, [r7, #20]
 800f652:	4413      	add	r3, r2
 800f654:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800f658:	691a      	ldr	r2, [r3, #16]
 800f65a:	68bb      	ldr	r3, [r7, #8]
 800f65c:	689b      	ldr	r3, [r3, #8]
 800f65e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800f662:	6939      	ldr	r1, [r7, #16]
 800f664:	0148      	lsls	r0, r1, #5
 800f666:	6979      	ldr	r1, [r7, #20]
 800f668:	4401      	add	r1, r0
 800f66a:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800f66e:	4313      	orrs	r3, r2
 800f670:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 800f672:	79fb      	ldrb	r3, [r7, #7]
 800f674:	2b01      	cmp	r3, #1
 800f676:	d10d      	bne.n	800f694 <USB_EP0StartXfer+0x278>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 800f678:	68bb      	ldr	r3, [r7, #8]
 800f67a:	68db      	ldr	r3, [r3, #12]
 800f67c:	2b00      	cmp	r3, #0
 800f67e:	d009      	beq.n	800f694 <USB_EP0StartXfer+0x278>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 800f680:	68bb      	ldr	r3, [r7, #8]
 800f682:	68d9      	ldr	r1, [r3, #12]
 800f684:	693b      	ldr	r3, [r7, #16]
 800f686:	015a      	lsls	r2, r3, #5
 800f688:	697b      	ldr	r3, [r7, #20]
 800f68a:	4413      	add	r3, r2
 800f68c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800f690:	460a      	mov	r2, r1
 800f692:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 800f694:	693b      	ldr	r3, [r7, #16]
 800f696:	015a      	lsls	r2, r3, #5
 800f698:	697b      	ldr	r3, [r7, #20]
 800f69a:	4413      	add	r3, r2
 800f69c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800f6a0:	681b      	ldr	r3, [r3, #0]
 800f6a2:	693a      	ldr	r2, [r7, #16]
 800f6a4:	0151      	lsls	r1, r2, #5
 800f6a6:	697a      	ldr	r2, [r7, #20]
 800f6a8:	440a      	add	r2, r1
 800f6aa:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800f6ae:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800f6b2:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800f6b4:	2300      	movs	r3, #0
}
 800f6b6:	4618      	mov	r0, r3
 800f6b8:	371c      	adds	r7, #28
 800f6ba:	46bd      	mov	sp, r7
 800f6bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f6c0:	4770      	bx	lr
 800f6c2:	bf00      	nop
 800f6c4:	e007ffff 	.word	0xe007ffff
 800f6c8:	fff80000 	.word	0xfff80000

0800f6cc <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 800f6cc:	b480      	push	{r7}
 800f6ce:	b089      	sub	sp, #36	; 0x24
 800f6d0:	af00      	add	r7, sp, #0
 800f6d2:	60f8      	str	r0, [r7, #12]
 800f6d4:	60b9      	str	r1, [r7, #8]
 800f6d6:	4611      	mov	r1, r2
 800f6d8:	461a      	mov	r2, r3
 800f6da:	460b      	mov	r3, r1
 800f6dc:	71fb      	strb	r3, [r7, #7]
 800f6de:	4613      	mov	r3, r2
 800f6e0:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800f6e2:	68fb      	ldr	r3, [r7, #12]
 800f6e4:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 800f6e6:	68bb      	ldr	r3, [r7, #8]
 800f6e8:	61fb      	str	r3, [r7, #28]
  uint32_t count32b, i;

  if (dma == 0U)
 800f6ea:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800f6ee:	2b00      	cmp	r3, #0
 800f6f0:	d123      	bne.n	800f73a <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 800f6f2:	88bb      	ldrh	r3, [r7, #4]
 800f6f4:	3303      	adds	r3, #3
 800f6f6:	089b      	lsrs	r3, r3, #2
 800f6f8:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 800f6fa:	2300      	movs	r3, #0
 800f6fc:	61bb      	str	r3, [r7, #24]
 800f6fe:	e018      	b.n	800f732 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 800f700:	79fb      	ldrb	r3, [r7, #7]
 800f702:	031a      	lsls	r2, r3, #12
 800f704:	697b      	ldr	r3, [r7, #20]
 800f706:	4413      	add	r3, r2
 800f708:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800f70c:	461a      	mov	r2, r3
 800f70e:	69fb      	ldr	r3, [r7, #28]
 800f710:	681b      	ldr	r3, [r3, #0]
 800f712:	6013      	str	r3, [r2, #0]
      pSrc++;
 800f714:	69fb      	ldr	r3, [r7, #28]
 800f716:	3301      	adds	r3, #1
 800f718:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800f71a:	69fb      	ldr	r3, [r7, #28]
 800f71c:	3301      	adds	r3, #1
 800f71e:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800f720:	69fb      	ldr	r3, [r7, #28]
 800f722:	3301      	adds	r3, #1
 800f724:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800f726:	69fb      	ldr	r3, [r7, #28]
 800f728:	3301      	adds	r3, #1
 800f72a:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 800f72c:	69bb      	ldr	r3, [r7, #24]
 800f72e:	3301      	adds	r3, #1
 800f730:	61bb      	str	r3, [r7, #24]
 800f732:	69ba      	ldr	r2, [r7, #24]
 800f734:	693b      	ldr	r3, [r7, #16]
 800f736:	429a      	cmp	r2, r3
 800f738:	d3e2      	bcc.n	800f700 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 800f73a:	2300      	movs	r3, #0
}
 800f73c:	4618      	mov	r0, r3
 800f73e:	3724      	adds	r7, #36	; 0x24
 800f740:	46bd      	mov	sp, r7
 800f742:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f746:	4770      	bx	lr

0800f748 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 800f748:	b480      	push	{r7}
 800f74a:	b08b      	sub	sp, #44	; 0x2c
 800f74c:	af00      	add	r7, sp, #0
 800f74e:	60f8      	str	r0, [r7, #12]
 800f750:	60b9      	str	r1, [r7, #8]
 800f752:	4613      	mov	r3, r2
 800f754:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800f756:	68fb      	ldr	r3, [r7, #12]
 800f758:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 800f75a:	68bb      	ldr	r3, [r7, #8]
 800f75c:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 800f75e:	88fb      	ldrh	r3, [r7, #6]
 800f760:	089b      	lsrs	r3, r3, #2
 800f762:	b29b      	uxth	r3, r3
 800f764:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 800f766:	88fb      	ldrh	r3, [r7, #6]
 800f768:	f003 0303 	and.w	r3, r3, #3
 800f76c:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 800f76e:	2300      	movs	r3, #0
 800f770:	623b      	str	r3, [r7, #32]
 800f772:	e014      	b.n	800f79e <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 800f774:	69bb      	ldr	r3, [r7, #24]
 800f776:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800f77a:	681a      	ldr	r2, [r3, #0]
 800f77c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f77e:	601a      	str	r2, [r3, #0]
    pDest++;
 800f780:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f782:	3301      	adds	r3, #1
 800f784:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800f786:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f788:	3301      	adds	r3, #1
 800f78a:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800f78c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f78e:	3301      	adds	r3, #1
 800f790:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800f792:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f794:	3301      	adds	r3, #1
 800f796:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 800f798:	6a3b      	ldr	r3, [r7, #32]
 800f79a:	3301      	adds	r3, #1
 800f79c:	623b      	str	r3, [r7, #32]
 800f79e:	6a3a      	ldr	r2, [r7, #32]
 800f7a0:	697b      	ldr	r3, [r7, #20]
 800f7a2:	429a      	cmp	r2, r3
 800f7a4:	d3e6      	bcc.n	800f774 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 800f7a6:	8bfb      	ldrh	r3, [r7, #30]
 800f7a8:	2b00      	cmp	r3, #0
 800f7aa:	d01e      	beq.n	800f7ea <USB_ReadPacket+0xa2>
  {
    i = 0U;
 800f7ac:	2300      	movs	r3, #0
 800f7ae:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 800f7b0:	69bb      	ldr	r3, [r7, #24]
 800f7b2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800f7b6:	461a      	mov	r2, r3
 800f7b8:	f107 0310 	add.w	r3, r7, #16
 800f7bc:	6812      	ldr	r2, [r2, #0]
 800f7be:	601a      	str	r2, [r3, #0]
	
    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 800f7c0:	693a      	ldr	r2, [r7, #16]
 800f7c2:	6a3b      	ldr	r3, [r7, #32]
 800f7c4:	b2db      	uxtb	r3, r3
 800f7c6:	00db      	lsls	r3, r3, #3
 800f7c8:	fa22 f303 	lsr.w	r3, r2, r3
 800f7cc:	b2da      	uxtb	r2, r3
 800f7ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f7d0:	701a      	strb	r2, [r3, #0]
      i++;
 800f7d2:	6a3b      	ldr	r3, [r7, #32]
 800f7d4:	3301      	adds	r3, #1
 800f7d6:	623b      	str	r3, [r7, #32]
      pDest++;
 800f7d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f7da:	3301      	adds	r3, #1
 800f7dc:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 800f7de:	8bfb      	ldrh	r3, [r7, #30]
 800f7e0:	3b01      	subs	r3, #1
 800f7e2:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 800f7e4:	8bfb      	ldrh	r3, [r7, #30]
 800f7e6:	2b00      	cmp	r3, #0
 800f7e8:	d1ea      	bne.n	800f7c0 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 800f7ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800f7ec:	4618      	mov	r0, r3
 800f7ee:	372c      	adds	r7, #44	; 0x2c
 800f7f0:	46bd      	mov	sp, r7
 800f7f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f7f6:	4770      	bx	lr

0800f7f8 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800f7f8:	b480      	push	{r7}
 800f7fa:	b085      	sub	sp, #20
 800f7fc:	af00      	add	r7, sp, #0
 800f7fe:	6078      	str	r0, [r7, #4]
 800f800:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800f802:	687b      	ldr	r3, [r7, #4]
 800f804:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800f806:	683b      	ldr	r3, [r7, #0]
 800f808:	781b      	ldrb	r3, [r3, #0]
 800f80a:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800f80c:	683b      	ldr	r3, [r7, #0]
 800f80e:	785b      	ldrb	r3, [r3, #1]
 800f810:	2b01      	cmp	r3, #1
 800f812:	d12c      	bne.n	800f86e <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 800f814:	68bb      	ldr	r3, [r7, #8]
 800f816:	015a      	lsls	r2, r3, #5
 800f818:	68fb      	ldr	r3, [r7, #12]
 800f81a:	4413      	add	r3, r2
 800f81c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800f820:	681b      	ldr	r3, [r3, #0]
 800f822:	2b00      	cmp	r3, #0
 800f824:	db12      	blt.n	800f84c <USB_EPSetStall+0x54>
 800f826:	68bb      	ldr	r3, [r7, #8]
 800f828:	2b00      	cmp	r3, #0
 800f82a:	d00f      	beq.n	800f84c <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 800f82c:	68bb      	ldr	r3, [r7, #8]
 800f82e:	015a      	lsls	r2, r3, #5
 800f830:	68fb      	ldr	r3, [r7, #12]
 800f832:	4413      	add	r3, r2
 800f834:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800f838:	681b      	ldr	r3, [r3, #0]
 800f83a:	68ba      	ldr	r2, [r7, #8]
 800f83c:	0151      	lsls	r1, r2, #5
 800f83e:	68fa      	ldr	r2, [r7, #12]
 800f840:	440a      	add	r2, r1
 800f842:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800f846:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800f84a:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 800f84c:	68bb      	ldr	r3, [r7, #8]
 800f84e:	015a      	lsls	r2, r3, #5
 800f850:	68fb      	ldr	r3, [r7, #12]
 800f852:	4413      	add	r3, r2
 800f854:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800f858:	681b      	ldr	r3, [r3, #0]
 800f85a:	68ba      	ldr	r2, [r7, #8]
 800f85c:	0151      	lsls	r1, r2, #5
 800f85e:	68fa      	ldr	r2, [r7, #12]
 800f860:	440a      	add	r2, r1
 800f862:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800f866:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800f86a:	6013      	str	r3, [r2, #0]
 800f86c:	e02b      	b.n	800f8c6 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 800f86e:	68bb      	ldr	r3, [r7, #8]
 800f870:	015a      	lsls	r2, r3, #5
 800f872:	68fb      	ldr	r3, [r7, #12]
 800f874:	4413      	add	r3, r2
 800f876:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800f87a:	681b      	ldr	r3, [r3, #0]
 800f87c:	2b00      	cmp	r3, #0
 800f87e:	db12      	blt.n	800f8a6 <USB_EPSetStall+0xae>
 800f880:	68bb      	ldr	r3, [r7, #8]
 800f882:	2b00      	cmp	r3, #0
 800f884:	d00f      	beq.n	800f8a6 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 800f886:	68bb      	ldr	r3, [r7, #8]
 800f888:	015a      	lsls	r2, r3, #5
 800f88a:	68fb      	ldr	r3, [r7, #12]
 800f88c:	4413      	add	r3, r2
 800f88e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800f892:	681b      	ldr	r3, [r3, #0]
 800f894:	68ba      	ldr	r2, [r7, #8]
 800f896:	0151      	lsls	r1, r2, #5
 800f898:	68fa      	ldr	r2, [r7, #12]
 800f89a:	440a      	add	r2, r1
 800f89c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800f8a0:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800f8a4:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 800f8a6:	68bb      	ldr	r3, [r7, #8]
 800f8a8:	015a      	lsls	r2, r3, #5
 800f8aa:	68fb      	ldr	r3, [r7, #12]
 800f8ac:	4413      	add	r3, r2
 800f8ae:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800f8b2:	681b      	ldr	r3, [r3, #0]
 800f8b4:	68ba      	ldr	r2, [r7, #8]
 800f8b6:	0151      	lsls	r1, r2, #5
 800f8b8:	68fa      	ldr	r2, [r7, #12]
 800f8ba:	440a      	add	r2, r1
 800f8bc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800f8c0:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800f8c4:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800f8c6:	2300      	movs	r3, #0
}
 800f8c8:	4618      	mov	r0, r3
 800f8ca:	3714      	adds	r7, #20
 800f8cc:	46bd      	mov	sp, r7
 800f8ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f8d2:	4770      	bx	lr

0800f8d4 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800f8d4:	b480      	push	{r7}
 800f8d6:	b085      	sub	sp, #20
 800f8d8:	af00      	add	r7, sp, #0
 800f8da:	6078      	str	r0, [r7, #4]
 800f8dc:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800f8de:	687b      	ldr	r3, [r7, #4]
 800f8e0:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800f8e2:	683b      	ldr	r3, [r7, #0]
 800f8e4:	781b      	ldrb	r3, [r3, #0]
 800f8e6:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800f8e8:	683b      	ldr	r3, [r7, #0]
 800f8ea:	785b      	ldrb	r3, [r3, #1]
 800f8ec:	2b01      	cmp	r3, #1
 800f8ee:	d128      	bne.n	800f942 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800f8f0:	68bb      	ldr	r3, [r7, #8]
 800f8f2:	015a      	lsls	r2, r3, #5
 800f8f4:	68fb      	ldr	r3, [r7, #12]
 800f8f6:	4413      	add	r3, r2
 800f8f8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800f8fc:	681b      	ldr	r3, [r3, #0]
 800f8fe:	68ba      	ldr	r2, [r7, #8]
 800f900:	0151      	lsls	r1, r2, #5
 800f902:	68fa      	ldr	r2, [r7, #12]
 800f904:	440a      	add	r2, r1
 800f906:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800f90a:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800f90e:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800f910:	683b      	ldr	r3, [r7, #0]
 800f912:	78db      	ldrb	r3, [r3, #3]
 800f914:	2b03      	cmp	r3, #3
 800f916:	d003      	beq.n	800f920 <USB_EPClearStall+0x4c>
 800f918:	683b      	ldr	r3, [r7, #0]
 800f91a:	78db      	ldrb	r3, [r3, #3]
 800f91c:	2b02      	cmp	r3, #2
 800f91e:	d138      	bne.n	800f992 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800f920:	68bb      	ldr	r3, [r7, #8]
 800f922:	015a      	lsls	r2, r3, #5
 800f924:	68fb      	ldr	r3, [r7, #12]
 800f926:	4413      	add	r3, r2
 800f928:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800f92c:	681b      	ldr	r3, [r3, #0]
 800f92e:	68ba      	ldr	r2, [r7, #8]
 800f930:	0151      	lsls	r1, r2, #5
 800f932:	68fa      	ldr	r2, [r7, #12]
 800f934:	440a      	add	r2, r1
 800f936:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800f93a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800f93e:	6013      	str	r3, [r2, #0]
 800f940:	e027      	b.n	800f992 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800f942:	68bb      	ldr	r3, [r7, #8]
 800f944:	015a      	lsls	r2, r3, #5
 800f946:	68fb      	ldr	r3, [r7, #12]
 800f948:	4413      	add	r3, r2
 800f94a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800f94e:	681b      	ldr	r3, [r3, #0]
 800f950:	68ba      	ldr	r2, [r7, #8]
 800f952:	0151      	lsls	r1, r2, #5
 800f954:	68fa      	ldr	r2, [r7, #12]
 800f956:	440a      	add	r2, r1
 800f958:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800f95c:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800f960:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800f962:	683b      	ldr	r3, [r7, #0]
 800f964:	78db      	ldrb	r3, [r3, #3]
 800f966:	2b03      	cmp	r3, #3
 800f968:	d003      	beq.n	800f972 <USB_EPClearStall+0x9e>
 800f96a:	683b      	ldr	r3, [r7, #0]
 800f96c:	78db      	ldrb	r3, [r3, #3]
 800f96e:	2b02      	cmp	r3, #2
 800f970:	d10f      	bne.n	800f992 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800f972:	68bb      	ldr	r3, [r7, #8]
 800f974:	015a      	lsls	r2, r3, #5
 800f976:	68fb      	ldr	r3, [r7, #12]
 800f978:	4413      	add	r3, r2
 800f97a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800f97e:	681b      	ldr	r3, [r3, #0]
 800f980:	68ba      	ldr	r2, [r7, #8]
 800f982:	0151      	lsls	r1, r2, #5
 800f984:	68fa      	ldr	r2, [r7, #12]
 800f986:	440a      	add	r2, r1
 800f988:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800f98c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800f990:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 800f992:	2300      	movs	r3, #0
}
 800f994:	4618      	mov	r0, r3
 800f996:	3714      	adds	r7, #20
 800f998:	46bd      	mov	sp, r7
 800f99a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f99e:	4770      	bx	lr

0800f9a0 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 800f9a0:	b480      	push	{r7}
 800f9a2:	b085      	sub	sp, #20
 800f9a4:	af00      	add	r7, sp, #0
 800f9a6:	6078      	str	r0, [r7, #4]
 800f9a8:	460b      	mov	r3, r1
 800f9aa:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800f9ac:	687b      	ldr	r3, [r7, #4]
 800f9ae:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 800f9b0:	68fb      	ldr	r3, [r7, #12]
 800f9b2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800f9b6:	681b      	ldr	r3, [r3, #0]
 800f9b8:	68fa      	ldr	r2, [r7, #12]
 800f9ba:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800f9be:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 800f9c2:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 800f9c4:	68fb      	ldr	r3, [r7, #12]
 800f9c6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800f9ca:	681a      	ldr	r2, [r3, #0]
 800f9cc:	78fb      	ldrb	r3, [r7, #3]
 800f9ce:	011b      	lsls	r3, r3, #4
 800f9d0:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 800f9d4:	68f9      	ldr	r1, [r7, #12]
 800f9d6:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800f9da:	4313      	orrs	r3, r2
 800f9dc:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 800f9de:	2300      	movs	r3, #0
}
 800f9e0:	4618      	mov	r0, r3
 800f9e2:	3714      	adds	r7, #20
 800f9e4:	46bd      	mov	sp, r7
 800f9e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f9ea:	4770      	bx	lr

0800f9ec <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 800f9ec:	b480      	push	{r7}
 800f9ee:	b085      	sub	sp, #20
 800f9f0:	af00      	add	r7, sp, #0
 800f9f2:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800f9f4:	687b      	ldr	r3, [r7, #4]
 800f9f6:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800f9f8:	68fb      	ldr	r3, [r7, #12]
 800f9fa:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800f9fe:	681b      	ldr	r3, [r3, #0]
 800fa00:	68fa      	ldr	r2, [r7, #12]
 800fa02:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800fa06:	f023 0303 	bic.w	r3, r3, #3
 800fa0a:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 800fa0c:	68fb      	ldr	r3, [r7, #12]
 800fa0e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800fa12:	685b      	ldr	r3, [r3, #4]
 800fa14:	68fa      	ldr	r2, [r7, #12]
 800fa16:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800fa1a:	f023 0302 	bic.w	r3, r3, #2
 800fa1e:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800fa20:	2300      	movs	r3, #0
}
 800fa22:	4618      	mov	r0, r3
 800fa24:	3714      	adds	r7, #20
 800fa26:	46bd      	mov	sp, r7
 800fa28:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fa2c:	4770      	bx	lr

0800fa2e <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 800fa2e:	b480      	push	{r7}
 800fa30:	b085      	sub	sp, #20
 800fa32:	af00      	add	r7, sp, #0
 800fa34:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800fa36:	687b      	ldr	r3, [r7, #4]
 800fa38:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800fa3a:	68fb      	ldr	r3, [r7, #12]
 800fa3c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800fa40:	681b      	ldr	r3, [r3, #0]
 800fa42:	68fa      	ldr	r2, [r7, #12]
 800fa44:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800fa48:	f023 0303 	bic.w	r3, r3, #3
 800fa4c:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800fa4e:	68fb      	ldr	r3, [r7, #12]
 800fa50:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800fa54:	685b      	ldr	r3, [r3, #4]
 800fa56:	68fa      	ldr	r2, [r7, #12]
 800fa58:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800fa5c:	f043 0302 	orr.w	r3, r3, #2
 800fa60:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800fa62:	2300      	movs	r3, #0
}
 800fa64:	4618      	mov	r0, r3
 800fa66:	3714      	adds	r7, #20
 800fa68:	46bd      	mov	sp, r7
 800fa6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fa6e:	4770      	bx	lr

0800fa70 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 800fa70:	b480      	push	{r7}
 800fa72:	b085      	sub	sp, #20
 800fa74:	af00      	add	r7, sp, #0
 800fa76:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 800fa78:	687b      	ldr	r3, [r7, #4]
 800fa7a:	695b      	ldr	r3, [r3, #20]
 800fa7c:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 800fa7e:	687b      	ldr	r3, [r7, #4]
 800fa80:	699b      	ldr	r3, [r3, #24]
 800fa82:	68fa      	ldr	r2, [r7, #12]
 800fa84:	4013      	ands	r3, r2
 800fa86:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 800fa88:	68fb      	ldr	r3, [r7, #12]
}
 800fa8a:	4618      	mov	r0, r3
 800fa8c:	3714      	adds	r7, #20
 800fa8e:	46bd      	mov	sp, r7
 800fa90:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fa94:	4770      	bx	lr

0800fa96 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800fa96:	b480      	push	{r7}
 800fa98:	b085      	sub	sp, #20
 800fa9a:	af00      	add	r7, sp, #0
 800fa9c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800fa9e:	687b      	ldr	r3, [r7, #4]
 800faa0:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800faa2:	68fb      	ldr	r3, [r7, #12]
 800faa4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800faa8:	699b      	ldr	r3, [r3, #24]
 800faaa:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800faac:	68fb      	ldr	r3, [r7, #12]
 800faae:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800fab2:	69db      	ldr	r3, [r3, #28]
 800fab4:	68ba      	ldr	r2, [r7, #8]
 800fab6:	4013      	ands	r3, r2
 800fab8:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 800faba:	68bb      	ldr	r3, [r7, #8]
 800fabc:	0c1b      	lsrs	r3, r3, #16
}
 800fabe:	4618      	mov	r0, r3
 800fac0:	3714      	adds	r7, #20
 800fac2:	46bd      	mov	sp, r7
 800fac4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fac8:	4770      	bx	lr

0800faca <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800faca:	b480      	push	{r7}
 800facc:	b085      	sub	sp, #20
 800face:	af00      	add	r7, sp, #0
 800fad0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800fad2:	687b      	ldr	r3, [r7, #4]
 800fad4:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800fad6:	68fb      	ldr	r3, [r7, #12]
 800fad8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800fadc:	699b      	ldr	r3, [r3, #24]
 800fade:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800fae0:	68fb      	ldr	r3, [r7, #12]
 800fae2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800fae6:	69db      	ldr	r3, [r3, #28]
 800fae8:	68ba      	ldr	r2, [r7, #8]
 800faea:	4013      	ands	r3, r2
 800faec:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 800faee:	68bb      	ldr	r3, [r7, #8]
 800faf0:	b29b      	uxth	r3, r3
}
 800faf2:	4618      	mov	r0, r3
 800faf4:	3714      	adds	r7, #20
 800faf6:	46bd      	mov	sp, r7
 800faf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fafc:	4770      	bx	lr

0800fafe <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800fafe:	b480      	push	{r7}
 800fb00:	b085      	sub	sp, #20
 800fb02:	af00      	add	r7, sp, #0
 800fb04:	6078      	str	r0, [r7, #4]
 800fb06:	460b      	mov	r3, r1
 800fb08:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800fb0a:	687b      	ldr	r3, [r7, #4]
 800fb0c:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 800fb0e:	78fb      	ldrb	r3, [r7, #3]
 800fb10:	015a      	lsls	r2, r3, #5
 800fb12:	68fb      	ldr	r3, [r7, #12]
 800fb14:	4413      	add	r3, r2
 800fb16:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800fb1a:	689b      	ldr	r3, [r3, #8]
 800fb1c:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 800fb1e:	68fb      	ldr	r3, [r7, #12]
 800fb20:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800fb24:	695b      	ldr	r3, [r3, #20]
 800fb26:	68ba      	ldr	r2, [r7, #8]
 800fb28:	4013      	ands	r3, r2
 800fb2a:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800fb2c:	68bb      	ldr	r3, [r7, #8]
}
 800fb2e:	4618      	mov	r0, r3
 800fb30:	3714      	adds	r7, #20
 800fb32:	46bd      	mov	sp, r7
 800fb34:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fb38:	4770      	bx	lr

0800fb3a <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800fb3a:	b480      	push	{r7}
 800fb3c:	b087      	sub	sp, #28
 800fb3e:	af00      	add	r7, sp, #0
 800fb40:	6078      	str	r0, [r7, #4]
 800fb42:	460b      	mov	r3, r1
 800fb44:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800fb46:	687b      	ldr	r3, [r7, #4]
 800fb48:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg, msk, emp;

  msk = USBx_DEVICE->DIEPMSK;
 800fb4a:	697b      	ldr	r3, [r7, #20]
 800fb4c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800fb50:	691b      	ldr	r3, [r3, #16]
 800fb52:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 800fb54:	697b      	ldr	r3, [r7, #20]
 800fb56:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800fb5a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800fb5c:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 800fb5e:	78fb      	ldrb	r3, [r7, #3]
 800fb60:	f003 030f 	and.w	r3, r3, #15
 800fb64:	68fa      	ldr	r2, [r7, #12]
 800fb66:	fa22 f303 	lsr.w	r3, r2, r3
 800fb6a:	01db      	lsls	r3, r3, #7
 800fb6c:	b2db      	uxtb	r3, r3
 800fb6e:	693a      	ldr	r2, [r7, #16]
 800fb70:	4313      	orrs	r3, r2
 800fb72:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 800fb74:	78fb      	ldrb	r3, [r7, #3]
 800fb76:	015a      	lsls	r2, r3, #5
 800fb78:	697b      	ldr	r3, [r7, #20]
 800fb7a:	4413      	add	r3, r2
 800fb7c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800fb80:	689b      	ldr	r3, [r3, #8]
 800fb82:	693a      	ldr	r2, [r7, #16]
 800fb84:	4013      	ands	r3, r2
 800fb86:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800fb88:	68bb      	ldr	r3, [r7, #8]
}
 800fb8a:	4618      	mov	r0, r3
 800fb8c:	371c      	adds	r7, #28
 800fb8e:	46bd      	mov	sp, r7
 800fb90:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fb94:	4770      	bx	lr

0800fb96 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 800fb96:	b480      	push	{r7}
 800fb98:	b083      	sub	sp, #12
 800fb9a:	af00      	add	r7, sp, #0
 800fb9c:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800fb9e:	687b      	ldr	r3, [r7, #4]
 800fba0:	695b      	ldr	r3, [r3, #20]
 800fba2:	f003 0301 	and.w	r3, r3, #1
}
 800fba6:	4618      	mov	r0, r3
 800fba8:	370c      	adds	r7, #12
 800fbaa:	46bd      	mov	sp, r7
 800fbac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fbb0:	4770      	bx	lr
	...

0800fbb4 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 800fbb4:	b480      	push	{r7}
 800fbb6:	b085      	sub	sp, #20
 800fbb8:	af00      	add	r7, sp, #0
 800fbba:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800fbbc:	687b      	ldr	r3, [r7, #4]
 800fbbe:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 800fbc0:	68fb      	ldr	r3, [r7, #12]
 800fbc2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800fbc6:	681a      	ldr	r2, [r3, #0]
 800fbc8:	68fb      	ldr	r3, [r7, #12]
 800fbca:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800fbce:	4619      	mov	r1, r3
 800fbd0:	4b09      	ldr	r3, [pc, #36]	; (800fbf8 <USB_ActivateSetup+0x44>)
 800fbd2:	4013      	ands	r3, r2
 800fbd4:	600b      	str	r3, [r1, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 800fbd6:	68fb      	ldr	r3, [r7, #12]
 800fbd8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800fbdc:	685b      	ldr	r3, [r3, #4]
 800fbde:	68fa      	ldr	r2, [r7, #12]
 800fbe0:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800fbe4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800fbe8:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800fbea:	2300      	movs	r3, #0
}
 800fbec:	4618      	mov	r0, r3
 800fbee:	3714      	adds	r7, #20
 800fbf0:	46bd      	mov	sp, r7
 800fbf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fbf6:	4770      	bx	lr
 800fbf8:	fffff800 	.word	0xfffff800

0800fbfc <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 800fbfc:	b480      	push	{r7}
 800fbfe:	b087      	sub	sp, #28
 800fc00:	af00      	add	r7, sp, #0
 800fc02:	60f8      	str	r0, [r7, #12]
 800fc04:	460b      	mov	r3, r1
 800fc06:	607a      	str	r2, [r7, #4]
 800fc08:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800fc0a:	68fb      	ldr	r3, [r7, #12]
 800fc0c:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 800fc0e:	68fb      	ldr	r3, [r7, #12]
 800fc10:	333c      	adds	r3, #60	; 0x3c
 800fc12:	3304      	adds	r3, #4
 800fc14:	681b      	ldr	r3, [r3, #0]
 800fc16:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 800fc18:	693b      	ldr	r3, [r7, #16]
 800fc1a:	4a26      	ldr	r2, [pc, #152]	; (800fcb4 <USB_EP0_OutStart+0xb8>)
 800fc1c:	4293      	cmp	r3, r2
 800fc1e:	d90a      	bls.n	800fc36 <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800fc20:	697b      	ldr	r3, [r7, #20]
 800fc22:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800fc26:	681b      	ldr	r3, [r3, #0]
 800fc28:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800fc2c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800fc30:	d101      	bne.n	800fc36 <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 800fc32:	2300      	movs	r3, #0
 800fc34:	e037      	b.n	800fca6 <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 800fc36:	697b      	ldr	r3, [r7, #20]
 800fc38:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800fc3c:	461a      	mov	r2, r3
 800fc3e:	2300      	movs	r3, #0
 800fc40:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800fc42:	697b      	ldr	r3, [r7, #20]
 800fc44:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800fc48:	691b      	ldr	r3, [r3, #16]
 800fc4a:	697a      	ldr	r2, [r7, #20]
 800fc4c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800fc50:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800fc54:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 800fc56:	697b      	ldr	r3, [r7, #20]
 800fc58:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800fc5c:	691b      	ldr	r3, [r3, #16]
 800fc5e:	697a      	ldr	r2, [r7, #20]
 800fc60:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800fc64:	f043 0318 	orr.w	r3, r3, #24
 800fc68:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 800fc6a:	697b      	ldr	r3, [r7, #20]
 800fc6c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800fc70:	691b      	ldr	r3, [r3, #16]
 800fc72:	697a      	ldr	r2, [r7, #20]
 800fc74:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800fc78:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 800fc7c:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 800fc7e:	7afb      	ldrb	r3, [r7, #11]
 800fc80:	2b01      	cmp	r3, #1
 800fc82:	d10f      	bne.n	800fca4 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 800fc84:	697b      	ldr	r3, [r7, #20]
 800fc86:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800fc8a:	461a      	mov	r2, r3
 800fc8c:	687b      	ldr	r3, [r7, #4]
 800fc8e:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 800fc90:	697b      	ldr	r3, [r7, #20]
 800fc92:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800fc96:	681b      	ldr	r3, [r3, #0]
 800fc98:	697a      	ldr	r2, [r7, #20]
 800fc9a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800fc9e:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 800fca2:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800fca4:	2300      	movs	r3, #0
}
 800fca6:	4618      	mov	r0, r3
 800fca8:	371c      	adds	r7, #28
 800fcaa:	46bd      	mov	sp, r7
 800fcac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fcb0:	4770      	bx	lr
 800fcb2:	bf00      	nop
 800fcb4:	4f54300a 	.word	0x4f54300a

0800fcb8 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800fcb8:	b480      	push	{r7}
 800fcba:	b085      	sub	sp, #20
 800fcbc:	af00      	add	r7, sp, #0
 800fcbe:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 800fcc0:	2300      	movs	r3, #0
 800fcc2:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 800fcc4:	68fb      	ldr	r3, [r7, #12]
 800fcc6:	3301      	adds	r3, #1
 800fcc8:	60fb      	str	r3, [r7, #12]
 800fcca:	68fb      	ldr	r3, [r7, #12]
 800fccc:	4a13      	ldr	r2, [pc, #76]	; (800fd1c <USB_CoreReset+0x64>)
 800fcce:	4293      	cmp	r3, r2
 800fcd0:	d901      	bls.n	800fcd6 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800fcd2:	2303      	movs	r3, #3
 800fcd4:	e01b      	b.n	800fd0e <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800fcd6:	687b      	ldr	r3, [r7, #4]
 800fcd8:	691b      	ldr	r3, [r3, #16]
 800fcda:	2b00      	cmp	r3, #0
 800fcdc:	daf2      	bge.n	800fcc4 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800fcde:	2300      	movs	r3, #0
 800fce0:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800fce2:	687b      	ldr	r3, [r7, #4]
 800fce4:	691b      	ldr	r3, [r3, #16]
 800fce6:	f043 0201 	orr.w	r2, r3, #1
 800fcea:	687b      	ldr	r3, [r7, #4]
 800fcec:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800fcee:	68fb      	ldr	r3, [r7, #12]
 800fcf0:	3301      	adds	r3, #1
 800fcf2:	60fb      	str	r3, [r7, #12]
 800fcf4:	68fb      	ldr	r3, [r7, #12]
 800fcf6:	4a09      	ldr	r2, [pc, #36]	; (800fd1c <USB_CoreReset+0x64>)
 800fcf8:	4293      	cmp	r3, r2
 800fcfa:	d901      	bls.n	800fd00 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 800fcfc:	2303      	movs	r3, #3
 800fcfe:	e006      	b.n	800fd0e <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800fd00:	687b      	ldr	r3, [r7, #4]
 800fd02:	691b      	ldr	r3, [r3, #16]
 800fd04:	f003 0301 	and.w	r3, r3, #1
 800fd08:	2b01      	cmp	r3, #1
 800fd0a:	d0f0      	beq.n	800fcee <USB_CoreReset+0x36>

  return HAL_OK;
 800fd0c:	2300      	movs	r3, #0
}
 800fd0e:	4618      	mov	r0, r3
 800fd10:	3714      	adds	r7, #20
 800fd12:	46bd      	mov	sp, r7
 800fd14:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fd18:	4770      	bx	lr
 800fd1a:	bf00      	nop
 800fd1c:	00030d40 	.word	0x00030d40

0800fd20 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 800fd20:	b580      	push	{r7, lr}
 800fd22:	af00      	add	r7, sp, #0
  /*## FatFS: Link the SD driver ###########################*/
  retSD = FATFS_LinkDriver(&SD_Driver, SDPath);
 800fd24:	4904      	ldr	r1, [pc, #16]	; (800fd38 <MX_FATFS_Init+0x18>)
 800fd26:	4805      	ldr	r0, [pc, #20]	; (800fd3c <MX_FATFS_Init+0x1c>)
 800fd28:	f001 fe4c 	bl	80119c4 <FATFS_LinkDriver>
 800fd2c:	4603      	mov	r3, r0
 800fd2e:	461a      	mov	r2, r3
 800fd30:	4b03      	ldr	r3, [pc, #12]	; (800fd40 <MX_FATFS_Init+0x20>)
 800fd32:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 800fd34:	bf00      	nop
 800fd36:	bd80      	pop	{r7, pc}
 800fd38:	2400097c 	.word	0x2400097c
 800fd3c:	08016720 	.word	0x08016720
 800fd40:	24000978 	.word	0x24000978

0800fd44 <BSP_SD_Init>:
/**
  * @brief  Initializes the SD card device.
  * @retval SD status
  */
__weak uint8_t BSP_SD_Init(void)
{
 800fd44:	b580      	push	{r7, lr}
 800fd46:	b082      	sub	sp, #8
 800fd48:	af00      	add	r7, sp, #0
  uint8_t sd_state = MSD_OK;
 800fd4a:	2300      	movs	r3, #0
 800fd4c:	71fb      	strb	r3, [r7, #7]
  /* Check if the SD card is plugged in the slot */
  if (BSP_SD_IsDetected() != SD_PRESENT)
 800fd4e:	f000 f885 	bl	800fe5c <BSP_SD_IsDetected>
 800fd52:	4603      	mov	r3, r0
 800fd54:	2b01      	cmp	r3, #1
 800fd56:	d001      	beq.n	800fd5c <BSP_SD_Init+0x18>
  {
    return MSD_ERROR_SD_NOT_PRESENT;
 800fd58:	2302      	movs	r3, #2
 800fd5a:	e012      	b.n	800fd82 <BSP_SD_Init+0x3e>
  }
  /* HAL SD initialization */
  sd_state = HAL_SD_Init(&hsd1);
 800fd5c:	480b      	ldr	r0, [pc, #44]	; (800fd8c <BSP_SD_Init+0x48>)
 800fd5e:	f7fa f915 	bl	8009f8c <HAL_SD_Init>
 800fd62:	4603      	mov	r3, r0
 800fd64:	71fb      	strb	r3, [r7, #7]
  /* Configure SD Bus width (4 bits mode selected) */
  if (sd_state == MSD_OK)
 800fd66:	79fb      	ldrb	r3, [r7, #7]
 800fd68:	2b00      	cmp	r3, #0
 800fd6a:	d109      	bne.n	800fd80 <BSP_SD_Init+0x3c>
  {
    /* Enable wide operation */
    if (HAL_SD_ConfigWideBusOperation(&hsd1, SDMMC_BUS_WIDE_4B) != HAL_OK)
 800fd6c:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800fd70:	4806      	ldr	r0, [pc, #24]	; (800fd8c <BSP_SD_Init+0x48>)
 800fd72:	f7fa ffb9 	bl	800ace8 <HAL_SD_ConfigWideBusOperation>
 800fd76:	4603      	mov	r3, r0
 800fd78:	2b00      	cmp	r3, #0
 800fd7a:	d001      	beq.n	800fd80 <BSP_SD_Init+0x3c>
    {
      sd_state = MSD_ERROR;
 800fd7c:	2301      	movs	r3, #1
 800fd7e:	71fb      	strb	r3, [r7, #7]
    }
  }

  return sd_state;
 800fd80:	79fb      	ldrb	r3, [r7, #7]
}
 800fd82:	4618      	mov	r0, r3
 800fd84:	3708      	adds	r7, #8
 800fd86:	46bd      	mov	sp, r7
 800fd88:	bd80      	pop	{r7, pc}
 800fd8a:	bf00      	nop
 800fd8c:	24000758 	.word	0x24000758

0800fd90 <BSP_SD_ReadBlocks_DMA>:
  * @param  ReadAddr: Address from where data is to be read
  * @param  NumOfBlocks: Number of SD blocks to read
  * @retval SD status
  */
__weak uint8_t BSP_SD_ReadBlocks_DMA(uint32_t *pData, uint32_t ReadAddr, uint32_t NumOfBlocks)
{
 800fd90:	b580      	push	{r7, lr}
 800fd92:	b086      	sub	sp, #24
 800fd94:	af00      	add	r7, sp, #0
 800fd96:	60f8      	str	r0, [r7, #12]
 800fd98:	60b9      	str	r1, [r7, #8]
 800fd9a:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 800fd9c:	2300      	movs	r3, #0
 800fd9e:	75fb      	strb	r3, [r7, #23]

  /* Read block(s) in DMA transfer mode */
  if (HAL_SD_ReadBlocks_DMA(&hsd1, (uint8_t *)pData, ReadAddr, NumOfBlocks) != HAL_OK)
 800fda0:	687b      	ldr	r3, [r7, #4]
 800fda2:	68ba      	ldr	r2, [r7, #8]
 800fda4:	68f9      	ldr	r1, [r7, #12]
 800fda6:	4806      	ldr	r0, [pc, #24]	; (800fdc0 <BSP_SD_ReadBlocks_DMA+0x30>)
 800fda8:	f7fa fa08 	bl	800a1bc <HAL_SD_ReadBlocks_DMA>
 800fdac:	4603      	mov	r3, r0
 800fdae:	2b00      	cmp	r3, #0
 800fdb0:	d001      	beq.n	800fdb6 <BSP_SD_ReadBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 800fdb2:	2301      	movs	r3, #1
 800fdb4:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 800fdb6:	7dfb      	ldrb	r3, [r7, #23]
}
 800fdb8:	4618      	mov	r0, r3
 800fdba:	3718      	adds	r7, #24
 800fdbc:	46bd      	mov	sp, r7
 800fdbe:	bd80      	pop	{r7, pc}
 800fdc0:	24000758 	.word	0x24000758

0800fdc4 <BSP_SD_WriteBlocks_DMA>:
  * @param  WriteAddr: Address from where data is to be written
  * @param  NumOfBlocks: Number of SD blocks to write
  * @retval SD status
  */
__weak uint8_t BSP_SD_WriteBlocks_DMA(uint32_t *pData, uint32_t WriteAddr, uint32_t NumOfBlocks)
{
 800fdc4:	b580      	push	{r7, lr}
 800fdc6:	b086      	sub	sp, #24
 800fdc8:	af00      	add	r7, sp, #0
 800fdca:	60f8      	str	r0, [r7, #12]
 800fdcc:	60b9      	str	r1, [r7, #8]
 800fdce:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 800fdd0:	2300      	movs	r3, #0
 800fdd2:	75fb      	strb	r3, [r7, #23]

  /* Write block(s) in DMA transfer mode */
  if (HAL_SD_WriteBlocks_DMA(&hsd1, (uint8_t *)pData, WriteAddr, NumOfBlocks) != HAL_OK)
 800fdd4:	687b      	ldr	r3, [r7, #4]
 800fdd6:	68ba      	ldr	r2, [r7, #8]
 800fdd8:	68f9      	ldr	r1, [r7, #12]
 800fdda:	4806      	ldr	r0, [pc, #24]	; (800fdf4 <BSP_SD_WriteBlocks_DMA+0x30>)
 800fddc:	f7fa fa96 	bl	800a30c <HAL_SD_WriteBlocks_DMA>
 800fde0:	4603      	mov	r3, r0
 800fde2:	2b00      	cmp	r3, #0
 800fde4:	d001      	beq.n	800fdea <BSP_SD_WriteBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 800fde6:	2301      	movs	r3, #1
 800fde8:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 800fdea:	7dfb      	ldrb	r3, [r7, #23]
}
 800fdec:	4618      	mov	r0, r3
 800fdee:	3718      	adds	r7, #24
 800fdf0:	46bd      	mov	sp, r7
 800fdf2:	bd80      	pop	{r7, pc}
 800fdf4:	24000758 	.word	0x24000758

0800fdf8 <BSP_SD_GetCardState>:
  *          This value can be one of the following values:
  *            @arg  SD_TRANSFER_OK: No data transfer is acting
  *            @arg  SD_TRANSFER_BUSY: Data transfer is acting
  */
__weak uint8_t BSP_SD_GetCardState(void)
{
 800fdf8:	b580      	push	{r7, lr}
 800fdfa:	af00      	add	r7, sp, #0
  return ((HAL_SD_GetCardState(&hsd1) == HAL_SD_CARD_TRANSFER ) ? SD_TRANSFER_OK : SD_TRANSFER_BUSY);
 800fdfc:	4805      	ldr	r0, [pc, #20]	; (800fe14 <BSP_SD_GetCardState+0x1c>)
 800fdfe:	f7fb f883 	bl	800af08 <HAL_SD_GetCardState>
 800fe02:	4603      	mov	r3, r0
 800fe04:	2b04      	cmp	r3, #4
 800fe06:	bf14      	ite	ne
 800fe08:	2301      	movne	r3, #1
 800fe0a:	2300      	moveq	r3, #0
 800fe0c:	b2db      	uxtb	r3, r3
}
 800fe0e:	4618      	mov	r0, r3
 800fe10:	bd80      	pop	{r7, pc}
 800fe12:	bf00      	nop
 800fe14:	24000758 	.word	0x24000758

0800fe18 <BSP_SD_GetCardInfo>:
  * @brief  Get SD information about specific SD card.
  * @param  CardInfo: Pointer to HAL_SD_CardInfoTypedef structure
  * @retval None
  */
__weak void BSP_SD_GetCardInfo(HAL_SD_CardInfoTypeDef *CardInfo)
{
 800fe18:	b580      	push	{r7, lr}
 800fe1a:	b082      	sub	sp, #8
 800fe1c:	af00      	add	r7, sp, #0
 800fe1e:	6078      	str	r0, [r7, #4]
  /* Get SD card Information */
  HAL_SD_GetCardInfo(&hsd1, CardInfo);
 800fe20:	6879      	ldr	r1, [r7, #4]
 800fe22:	4803      	ldr	r0, [pc, #12]	; (800fe30 <BSP_SD_GetCardInfo+0x18>)
 800fe24:	f7fa ff34 	bl	800ac90 <HAL_SD_GetCardInfo>
}
 800fe28:	bf00      	nop
 800fe2a:	3708      	adds	r7, #8
 800fe2c:	46bd      	mov	sp, r7
 800fe2e:	bd80      	pop	{r7, pc}
 800fe30:	24000758 	.word	0x24000758

0800fe34 <HAL_SD_TxCpltCallback>:
  * @brief Tx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_TxCpltCallback(SD_HandleTypeDef *hsd)
{
 800fe34:	b580      	push	{r7, lr}
 800fe36:	b082      	sub	sp, #8
 800fe38:	af00      	add	r7, sp, #0
 800fe3a:	6078      	str	r0, [r7, #4]
  BSP_SD_WriteCpltCallback();
 800fe3c:	f000 f9a0 	bl	8010180 <BSP_SD_WriteCpltCallback>
}
 800fe40:	bf00      	nop
 800fe42:	3708      	adds	r7, #8
 800fe44:	46bd      	mov	sp, r7
 800fe46:	bd80      	pop	{r7, pc}

0800fe48 <HAL_SD_RxCpltCallback>:
  * @brief Rx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_RxCpltCallback(SD_HandleTypeDef *hsd)
{
 800fe48:	b580      	push	{r7, lr}
 800fe4a:	b082      	sub	sp, #8
 800fe4c:	af00      	add	r7, sp, #0
 800fe4e:	6078      	str	r0, [r7, #4]
  BSP_SD_ReadCpltCallback();
 800fe50:	f000 f9a2 	bl	8010198 <BSP_SD_ReadCpltCallback>
}
 800fe54:	bf00      	nop
 800fe56:	3708      	adds	r7, #8
 800fe58:	46bd      	mov	sp, r7
 800fe5a:	bd80      	pop	{r7, pc}

0800fe5c <BSP_SD_IsDetected>:
 * @brief  Detects if SD card is correctly plugged in the memory slot or not.
 * @param  None
 * @retval Returns if SD is detected or not
 */
__weak uint8_t BSP_SD_IsDetected(void)
{
 800fe5c:	b580      	push	{r7, lr}
 800fe5e:	b082      	sub	sp, #8
 800fe60:	af00      	add	r7, sp, #0
  __IO uint8_t status = SD_PRESENT;
 800fe62:	2301      	movs	r3, #1
 800fe64:	71fb      	strb	r3, [r7, #7]

  if (BSP_PlatformIsDetected() == 0x0)
 800fe66:	f000 f80b 	bl	800fe80 <BSP_PlatformIsDetected>
 800fe6a:	4603      	mov	r3, r0
 800fe6c:	2b00      	cmp	r3, #0
 800fe6e:	d101      	bne.n	800fe74 <BSP_SD_IsDetected+0x18>
  {
    status = SD_NOT_PRESENT;
 800fe70:	2300      	movs	r3, #0
 800fe72:	71fb      	strb	r3, [r7, #7]
  }

  return status;
 800fe74:	79fb      	ldrb	r3, [r7, #7]
 800fe76:	b2db      	uxtb	r3, r3
}
 800fe78:	4618      	mov	r0, r3
 800fe7a:	3708      	adds	r7, #8
 800fe7c:	46bd      	mov	sp, r7
 800fe7e:	bd80      	pop	{r7, pc}

0800fe80 <BSP_PlatformIsDetected>:
  *
  ******************************************************************************
*/
#include "fatfs_platform.h"

uint8_t	BSP_PlatformIsDetected(void) {
 800fe80:	b580      	push	{r7, lr}
 800fe82:	b082      	sub	sp, #8
 800fe84:	af00      	add	r7, sp, #0
    uint8_t status = SD_PRESENT;
 800fe86:	2301      	movs	r3, #1
 800fe88:	71fb      	strb	r3, [r7, #7]
    /* Check SD card detect pin */
    if(HAL_GPIO_ReadPin(SD_DETECT_GPIO_PORT, SD_DETECT_PIN) != GPIO_PIN_RESET)
 800fe8a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800fe8e:	4806      	ldr	r0, [pc, #24]	; (800fea8 <BSP_PlatformIsDetected+0x28>)
 800fe90:	f7f4 ff08 	bl	8004ca4 <HAL_GPIO_ReadPin>
 800fe94:	4603      	mov	r3, r0
 800fe96:	2b00      	cmp	r3, #0
 800fe98:	d001      	beq.n	800fe9e <BSP_PlatformIsDetected+0x1e>
    {
        status = SD_NOT_PRESENT;
 800fe9a:	2300      	movs	r3, #0
 800fe9c:	71fb      	strb	r3, [r7, #7]
    }
    /* USER CODE BEGIN 1 */
    /* user code can be inserted here */
    /* USER CODE END 1 */
    return status;
 800fe9e:	79fb      	ldrb	r3, [r7, #7]
}
 800fea0:	4618      	mov	r0, r3
 800fea2:	3708      	adds	r7, #8
 800fea4:	46bd      	mov	sp, r7
 800fea6:	bd80      	pop	{r7, pc}
 800fea8:	58020000 	.word	0x58020000

0800feac <SD_CheckStatusWithTimeout>:
/* USER CODE END beforeFunctionSection */

/* Private functions ---------------------------------------------------------*/

static int SD_CheckStatusWithTimeout(uint32_t timeout)
{
 800feac:	b580      	push	{r7, lr}
 800feae:	b084      	sub	sp, #16
 800feb0:	af00      	add	r7, sp, #0
 800feb2:	6078      	str	r0, [r7, #4]
  uint32_t timer = HAL_GetTick();
 800feb4:	f7f2 fa76 	bl	80023a4 <HAL_GetTick>
 800feb8:	60f8      	str	r0, [r7, #12]
  /* block until SDIO IP is ready again or a timeout occur */
  while(HAL_GetTick() - timer < timeout)
 800feba:	e006      	b.n	800feca <SD_CheckStatusWithTimeout+0x1e>
  {
    if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 800febc:	f7ff ff9c 	bl	800fdf8 <BSP_SD_GetCardState>
 800fec0:	4603      	mov	r3, r0
 800fec2:	2b00      	cmp	r3, #0
 800fec4:	d101      	bne.n	800feca <SD_CheckStatusWithTimeout+0x1e>
    {
      return 0;
 800fec6:	2300      	movs	r3, #0
 800fec8:	e009      	b.n	800fede <SD_CheckStatusWithTimeout+0x32>
  while(HAL_GetTick() - timer < timeout)
 800feca:	f7f2 fa6b 	bl	80023a4 <HAL_GetTick>
 800fece:	4602      	mov	r2, r0
 800fed0:	68fb      	ldr	r3, [r7, #12]
 800fed2:	1ad3      	subs	r3, r2, r3
 800fed4:	687a      	ldr	r2, [r7, #4]
 800fed6:	429a      	cmp	r2, r3
 800fed8:	d8f0      	bhi.n	800febc <SD_CheckStatusWithTimeout+0x10>
    }
  }

  return -1;
 800feda:	f04f 33ff 	mov.w	r3, #4294967295
}
 800fede:	4618      	mov	r0, r3
 800fee0:	3710      	adds	r7, #16
 800fee2:	46bd      	mov	sp, r7
 800fee4:	bd80      	pop	{r7, pc}
	...

0800fee8 <SD_CheckStatus>:

static DSTATUS SD_CheckStatus(BYTE lun)
{
 800fee8:	b580      	push	{r7, lr}
 800feea:	b082      	sub	sp, #8
 800feec:	af00      	add	r7, sp, #0
 800feee:	4603      	mov	r3, r0
 800fef0:	71fb      	strb	r3, [r7, #7]
  Stat = STA_NOINIT;
 800fef2:	4b0b      	ldr	r3, [pc, #44]	; (800ff20 <SD_CheckStatus+0x38>)
 800fef4:	2201      	movs	r2, #1
 800fef6:	701a      	strb	r2, [r3, #0]

  if(BSP_SD_GetCardState() == MSD_OK)
 800fef8:	f7ff ff7e 	bl	800fdf8 <BSP_SD_GetCardState>
 800fefc:	4603      	mov	r3, r0
 800fefe:	2b00      	cmp	r3, #0
 800ff00:	d107      	bne.n	800ff12 <SD_CheckStatus+0x2a>
  {
    Stat &= ~STA_NOINIT;
 800ff02:	4b07      	ldr	r3, [pc, #28]	; (800ff20 <SD_CheckStatus+0x38>)
 800ff04:	781b      	ldrb	r3, [r3, #0]
 800ff06:	b2db      	uxtb	r3, r3
 800ff08:	f023 0301 	bic.w	r3, r3, #1
 800ff0c:	b2da      	uxtb	r2, r3
 800ff0e:	4b04      	ldr	r3, [pc, #16]	; (800ff20 <SD_CheckStatus+0x38>)
 800ff10:	701a      	strb	r2, [r3, #0]
  }

  return Stat;
 800ff12:	4b03      	ldr	r3, [pc, #12]	; (800ff20 <SD_CheckStatus+0x38>)
 800ff14:	781b      	ldrb	r3, [r3, #0]
 800ff16:	b2db      	uxtb	r3, r3
}
 800ff18:	4618      	mov	r0, r3
 800ff1a:	3708      	adds	r7, #8
 800ff1c:	46bd      	mov	sp, r7
 800ff1e:	bd80      	pop	{r7, pc}
 800ff20:	2400000d 	.word	0x2400000d

0800ff24 <SD_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_initialize(BYTE lun)
{
 800ff24:	b580      	push	{r7, lr}
 800ff26:	b082      	sub	sp, #8
 800ff28:	af00      	add	r7, sp, #0
 800ff2a:	4603      	mov	r3, r0
 800ff2c:	71fb      	strb	r3, [r7, #7]

#if !defined(DISABLE_SD_INIT)

  if(BSP_SD_Init() == MSD_OK)
 800ff2e:	f7ff ff09 	bl	800fd44 <BSP_SD_Init>
 800ff32:	4603      	mov	r3, r0
 800ff34:	2b00      	cmp	r3, #0
 800ff36:	d107      	bne.n	800ff48 <SD_initialize+0x24>
  {
    Stat = SD_CheckStatus(lun);
 800ff38:	79fb      	ldrb	r3, [r7, #7]
 800ff3a:	4618      	mov	r0, r3
 800ff3c:	f7ff ffd4 	bl	800fee8 <SD_CheckStatus>
 800ff40:	4603      	mov	r3, r0
 800ff42:	461a      	mov	r2, r3
 800ff44:	4b04      	ldr	r3, [pc, #16]	; (800ff58 <SD_initialize+0x34>)
 800ff46:	701a      	strb	r2, [r3, #0]

#else
  Stat = SD_CheckStatus(lun);
#endif

  return Stat;
 800ff48:	4b03      	ldr	r3, [pc, #12]	; (800ff58 <SD_initialize+0x34>)
 800ff4a:	781b      	ldrb	r3, [r3, #0]
 800ff4c:	b2db      	uxtb	r3, r3
}
 800ff4e:	4618      	mov	r0, r3
 800ff50:	3708      	adds	r7, #8
 800ff52:	46bd      	mov	sp, r7
 800ff54:	bd80      	pop	{r7, pc}
 800ff56:	bf00      	nop
 800ff58:	2400000d 	.word	0x2400000d

0800ff5c <SD_status>:
  * @brief  Gets Disk Status
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_status(BYTE lun)
{
 800ff5c:	b580      	push	{r7, lr}
 800ff5e:	b082      	sub	sp, #8
 800ff60:	af00      	add	r7, sp, #0
 800ff62:	4603      	mov	r3, r0
 800ff64:	71fb      	strb	r3, [r7, #7]
  return SD_CheckStatus(lun);
 800ff66:	79fb      	ldrb	r3, [r7, #7]
 800ff68:	4618      	mov	r0, r3
 800ff6a:	f7ff ffbd 	bl	800fee8 <SD_CheckStatus>
 800ff6e:	4603      	mov	r3, r0
}
 800ff70:	4618      	mov	r0, r3
 800ff72:	3708      	adds	r7, #8
 800ff74:	46bd      	mov	sp, r7
 800ff76:	bd80      	pop	{r7, pc}

0800ff78 <SD_read>:
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */

DRESULT SD_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 800ff78:	b580      	push	{r7, lr}
 800ff7a:	b086      	sub	sp, #24
 800ff7c:	af00      	add	r7, sp, #0
 800ff7e:	60b9      	str	r1, [r7, #8]
 800ff80:	607a      	str	r2, [r7, #4]
 800ff82:	603b      	str	r3, [r7, #0]
 800ff84:	4603      	mov	r3, r0
 800ff86:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 800ff88:	2301      	movs	r3, #1
 800ff8a:	75fb      	strb	r3, [r7, #23]

  /*
  * ensure the SDCard is ready for a new operation
  */

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 800ff8c:	f247 5030 	movw	r0, #30000	; 0x7530
 800ff90:	f7ff ff8c 	bl	800feac <SD_CheckStatusWithTimeout>
 800ff94:	4603      	mov	r3, r0
 800ff96:	2b00      	cmp	r3, #0
 800ff98:	da01      	bge.n	800ff9e <SD_read+0x26>
  {
    return res;
 800ff9a:	7dfb      	ldrb	r3, [r7, #23]
 800ff9c:	e03b      	b.n	8010016 <SD_read+0x9e>

#if defined(ENABLE_SCRATCH_BUFFER)
  if (!((uint32_t)buff & 0x3))
  {
#endif
    if(BSP_SD_ReadBlocks_DMA((uint32_t*)buff,
 800ff9e:	683a      	ldr	r2, [r7, #0]
 800ffa0:	6879      	ldr	r1, [r7, #4]
 800ffa2:	68b8      	ldr	r0, [r7, #8]
 800ffa4:	f7ff fef4 	bl	800fd90 <BSP_SD_ReadBlocks_DMA>
 800ffa8:	4603      	mov	r3, r0
 800ffaa:	2b00      	cmp	r3, #0
 800ffac:	d132      	bne.n	8010014 <SD_read+0x9c>
                             (uint32_t) (sector),
                             count) == MSD_OK)
    {
      ReadStatus = 0;
 800ffae:	4b1c      	ldr	r3, [pc, #112]	; (8010020 <SD_read+0xa8>)
 800ffb0:	2200      	movs	r2, #0
 800ffb2:	601a      	str	r2, [r3, #0]
      /* Wait that the reading process is completed or a timeout occurs */
      timeout = HAL_GetTick();
 800ffb4:	f7f2 f9f6 	bl	80023a4 <HAL_GetTick>
 800ffb8:	6138      	str	r0, [r7, #16]
      while((ReadStatus == 0) && ((HAL_GetTick() - timeout) < SD_TIMEOUT))
 800ffba:	bf00      	nop
 800ffbc:	4b18      	ldr	r3, [pc, #96]	; (8010020 <SD_read+0xa8>)
 800ffbe:	681b      	ldr	r3, [r3, #0]
 800ffc0:	2b00      	cmp	r3, #0
 800ffc2:	d108      	bne.n	800ffd6 <SD_read+0x5e>
 800ffc4:	f7f2 f9ee 	bl	80023a4 <HAL_GetTick>
 800ffc8:	4602      	mov	r2, r0
 800ffca:	693b      	ldr	r3, [r7, #16]
 800ffcc:	1ad3      	subs	r3, r2, r3
 800ffce:	f247 522f 	movw	r2, #29999	; 0x752f
 800ffd2:	4293      	cmp	r3, r2
 800ffd4:	d9f2      	bls.n	800ffbc <SD_read+0x44>
      {
      }
      /* in case of a timeout return error */
      if (ReadStatus == 0)
 800ffd6:	4b12      	ldr	r3, [pc, #72]	; (8010020 <SD_read+0xa8>)
 800ffd8:	681b      	ldr	r3, [r3, #0]
 800ffda:	2b00      	cmp	r3, #0
 800ffdc:	d102      	bne.n	800ffe4 <SD_read+0x6c>
      {
        res = RES_ERROR;
 800ffde:	2301      	movs	r3, #1
 800ffe0:	75fb      	strb	r3, [r7, #23]
 800ffe2:	e017      	b.n	8010014 <SD_read+0x9c>
      }
      else
      {
        ReadStatus = 0;
 800ffe4:	4b0e      	ldr	r3, [pc, #56]	; (8010020 <SD_read+0xa8>)
 800ffe6:	2200      	movs	r2, #0
 800ffe8:	601a      	str	r2, [r3, #0]
        timeout = HAL_GetTick();
 800ffea:	f7f2 f9db 	bl	80023a4 <HAL_GetTick>
 800ffee:	6138      	str	r0, [r7, #16]

        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 800fff0:	e007      	b.n	8010002 <SD_read+0x8a>
        {
          if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 800fff2:	f7ff ff01 	bl	800fdf8 <BSP_SD_GetCardState>
 800fff6:	4603      	mov	r3, r0
 800fff8:	2b00      	cmp	r3, #0
 800fffa:	d102      	bne.n	8010002 <SD_read+0x8a>
          {
            res = RES_OK;
 800fffc:	2300      	movs	r3, #0
 800fffe:	75fb      	strb	r3, [r7, #23]
            adjust the address and the D-Cache size to invalidate accordingly.
            */
            alignedAddr = (uint32_t)buff & ~0x1F;
            SCB_InvalidateDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif
            break;
 8010000:	e008      	b.n	8010014 <SD_read+0x9c>
        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 8010002:	f7f2 f9cf 	bl	80023a4 <HAL_GetTick>
 8010006:	4602      	mov	r2, r0
 8010008:	693b      	ldr	r3, [r7, #16]
 801000a:	1ad3      	subs	r3, r2, r3
 801000c:	f247 522f 	movw	r2, #29999	; 0x752f
 8010010:	4293      	cmp	r3, r2
 8010012:	d9ee      	bls.n	800fff2 <SD_read+0x7a>
      if ((i == count) && (ret == MSD_OK))
        res = RES_OK;
    }
#endif

  return res;
 8010014:	7dfb      	ldrb	r3, [r7, #23]
}
 8010016:	4618      	mov	r0, r3
 8010018:	3718      	adds	r7, #24
 801001a:	46bd      	mov	sp, r7
 801001c:	bd80      	pop	{r7, pc}
 801001e:	bf00      	nop
 8010020:	2400035c 	.word	0x2400035c

08010024 <SD_write>:
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1

DRESULT SD_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 8010024:	b580      	push	{r7, lr}
 8010026:	b086      	sub	sp, #24
 8010028:	af00      	add	r7, sp, #0
 801002a:	60b9      	str	r1, [r7, #8]
 801002c:	607a      	str	r2, [r7, #4]
 801002e:	603b      	str	r3, [r7, #0]
 8010030:	4603      	mov	r3, r0
 8010032:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 8010034:	2301      	movs	r3, #1
 8010036:	75fb      	strb	r3, [r7, #23]
#if defined(ENABLE_SCRATCH_BUFFER)
  uint8_t ret;
  int i;
#endif

   WriteStatus = 0;
 8010038:	4b24      	ldr	r3, [pc, #144]	; (80100cc <SD_write+0xa8>)
 801003a:	2200      	movs	r2, #0
 801003c:	601a      	str	r2, [r3, #0]
#if (ENABLE_SD_DMA_CACHE_MAINTENANCE == 1)
  uint32_t alignedAddr;
#endif

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 801003e:	f247 5030 	movw	r0, #30000	; 0x7530
 8010042:	f7ff ff33 	bl	800feac <SD_CheckStatusWithTimeout>
 8010046:	4603      	mov	r3, r0
 8010048:	2b00      	cmp	r3, #0
 801004a:	da01      	bge.n	8010050 <SD_write+0x2c>
  {
    return res;
 801004c:	7dfb      	ldrb	r3, [r7, #23]
 801004e:	e038      	b.n	80100c2 <SD_write+0x9e>
    */
    alignedAddr = (uint32_t)buff &  ~0x1F;
    SCB_CleanDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif

    if(BSP_SD_WriteBlocks_DMA((uint32_t*)buff,
 8010050:	683a      	ldr	r2, [r7, #0]
 8010052:	6879      	ldr	r1, [r7, #4]
 8010054:	68b8      	ldr	r0, [r7, #8]
 8010056:	f7ff feb5 	bl	800fdc4 <BSP_SD_WriteBlocks_DMA>
 801005a:	4603      	mov	r3, r0
 801005c:	2b00      	cmp	r3, #0
 801005e:	d12f      	bne.n	80100c0 <SD_write+0x9c>
                              (uint32_t)(sector),
                              count) == MSD_OK)
    {
      /* Wait that writing process is completed or a timeout occurs */

      timeout = HAL_GetTick();
 8010060:	f7f2 f9a0 	bl	80023a4 <HAL_GetTick>
 8010064:	6138      	str	r0, [r7, #16]
      while((WriteStatus == 0) && ((HAL_GetTick() - timeout) < SD_TIMEOUT))
 8010066:	bf00      	nop
 8010068:	4b18      	ldr	r3, [pc, #96]	; (80100cc <SD_write+0xa8>)
 801006a:	681b      	ldr	r3, [r3, #0]
 801006c:	2b00      	cmp	r3, #0
 801006e:	d108      	bne.n	8010082 <SD_write+0x5e>
 8010070:	f7f2 f998 	bl	80023a4 <HAL_GetTick>
 8010074:	4602      	mov	r2, r0
 8010076:	693b      	ldr	r3, [r7, #16]
 8010078:	1ad3      	subs	r3, r2, r3
 801007a:	f247 522f 	movw	r2, #29999	; 0x752f
 801007e:	4293      	cmp	r3, r2
 8010080:	d9f2      	bls.n	8010068 <SD_write+0x44>
      {
      }
      /* in case of a timeout return error */
      if (WriteStatus == 0)
 8010082:	4b12      	ldr	r3, [pc, #72]	; (80100cc <SD_write+0xa8>)
 8010084:	681b      	ldr	r3, [r3, #0]
 8010086:	2b00      	cmp	r3, #0
 8010088:	d102      	bne.n	8010090 <SD_write+0x6c>
      {
        res = RES_ERROR;
 801008a:	2301      	movs	r3, #1
 801008c:	75fb      	strb	r3, [r7, #23]
 801008e:	e017      	b.n	80100c0 <SD_write+0x9c>
      }
      else
      {
        WriteStatus = 0;
 8010090:	4b0e      	ldr	r3, [pc, #56]	; (80100cc <SD_write+0xa8>)
 8010092:	2200      	movs	r2, #0
 8010094:	601a      	str	r2, [r3, #0]
        timeout = HAL_GetTick();
 8010096:	f7f2 f985 	bl	80023a4 <HAL_GetTick>
 801009a:	6138      	str	r0, [r7, #16]

        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 801009c:	e007      	b.n	80100ae <SD_write+0x8a>
        {
          if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 801009e:	f7ff feab 	bl	800fdf8 <BSP_SD_GetCardState>
 80100a2:	4603      	mov	r3, r0
 80100a4:	2b00      	cmp	r3, #0
 80100a6:	d102      	bne.n	80100ae <SD_write+0x8a>
          {
            res = RES_OK;
 80100a8:	2300      	movs	r3, #0
 80100aa:	75fb      	strb	r3, [r7, #23]
            break;
 80100ac:	e008      	b.n	80100c0 <SD_write+0x9c>
        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 80100ae:	f7f2 f979 	bl	80023a4 <HAL_GetTick>
 80100b2:	4602      	mov	r2, r0
 80100b4:	693b      	ldr	r3, [r7, #16]
 80100b6:	1ad3      	subs	r3, r2, r3
 80100b8:	f247 522f 	movw	r2, #29999	; 0x752f
 80100bc:	4293      	cmp	r3, r2
 80100be:	d9ee      	bls.n	801009e <SD_write+0x7a>
      }
      if ((i == count) && (ret == MSD_OK))
        res = RES_OK;
    }
#endif
  return res;
 80100c0:	7dfb      	ldrb	r3, [r7, #23]
}
 80100c2:	4618      	mov	r0, r3
 80100c4:	3718      	adds	r7, #24
 80100c6:	46bd      	mov	sp, r7
 80100c8:	bd80      	pop	{r7, pc}
 80100ca:	bf00      	nop
 80100cc:	24000358 	.word	0x24000358

080100d0 <SD_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT SD_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 80100d0:	b580      	push	{r7, lr}
 80100d2:	b08c      	sub	sp, #48	; 0x30
 80100d4:	af00      	add	r7, sp, #0
 80100d6:	4603      	mov	r3, r0
 80100d8:	603a      	str	r2, [r7, #0]
 80100da:	71fb      	strb	r3, [r7, #7]
 80100dc:	460b      	mov	r3, r1
 80100de:	71bb      	strb	r3, [r7, #6]
  DRESULT res = RES_ERROR;
 80100e0:	2301      	movs	r3, #1
 80100e2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  BSP_SD_CardInfo CardInfo;

  if (Stat & STA_NOINIT) return RES_NOTRDY;
 80100e6:	4b25      	ldr	r3, [pc, #148]	; (801017c <SD_ioctl+0xac>)
 80100e8:	781b      	ldrb	r3, [r3, #0]
 80100ea:	b2db      	uxtb	r3, r3
 80100ec:	f003 0301 	and.w	r3, r3, #1
 80100f0:	2b00      	cmp	r3, #0
 80100f2:	d001      	beq.n	80100f8 <SD_ioctl+0x28>
 80100f4:	2303      	movs	r3, #3
 80100f6:	e03c      	b.n	8010172 <SD_ioctl+0xa2>

  switch (cmd)
 80100f8:	79bb      	ldrb	r3, [r7, #6]
 80100fa:	2b03      	cmp	r3, #3
 80100fc:	d834      	bhi.n	8010168 <SD_ioctl+0x98>
 80100fe:	a201      	add	r2, pc, #4	; (adr r2, 8010104 <SD_ioctl+0x34>)
 8010100:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010104:	08010115 	.word	0x08010115
 8010108:	0801011d 	.word	0x0801011d
 801010c:	08010135 	.word	0x08010135
 8010110:	0801014f 	.word	0x0801014f
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC :
    res = RES_OK;
 8010114:	2300      	movs	r3, #0
 8010116:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 801011a:	e028      	b.n	801016e <SD_ioctl+0x9e>

  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    BSP_SD_GetCardInfo(&CardInfo);
 801011c:	f107 0308 	add.w	r3, r7, #8
 8010120:	4618      	mov	r0, r3
 8010122:	f7ff fe79 	bl	800fe18 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockNbr;
 8010126:	6a3a      	ldr	r2, [r7, #32]
 8010128:	683b      	ldr	r3, [r7, #0]
 801012a:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 801012c:	2300      	movs	r3, #0
 801012e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 8010132:	e01c      	b.n	801016e <SD_ioctl+0x9e>

  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 8010134:	f107 0308 	add.w	r3, r7, #8
 8010138:	4618      	mov	r0, r3
 801013a:	f7ff fe6d 	bl	800fe18 <BSP_SD_GetCardInfo>
    *(WORD*)buff = CardInfo.LogBlockSize;
 801013e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010140:	b29a      	uxth	r2, r3
 8010142:	683b      	ldr	r3, [r7, #0]
 8010144:	801a      	strh	r2, [r3, #0]
    res = RES_OK;
 8010146:	2300      	movs	r3, #0
 8010148:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 801014c:	e00f      	b.n	801016e <SD_ioctl+0x9e>

  /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 801014e:	f107 0308 	add.w	r3, r7, #8
 8010152:	4618      	mov	r0, r3
 8010154:	f7ff fe60 	bl	800fe18 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
 8010158:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801015a:	0a5a      	lsrs	r2, r3, #9
 801015c:	683b      	ldr	r3, [r7, #0]
 801015e:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 8010160:	2300      	movs	r3, #0
 8010162:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 8010166:	e002      	b.n	801016e <SD_ioctl+0x9e>

  default:
    res = RES_PARERR;
 8010168:	2304      	movs	r3, #4
 801016a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  }

  return res;
 801016e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8010172:	4618      	mov	r0, r3
 8010174:	3730      	adds	r7, #48	; 0x30
 8010176:	46bd      	mov	sp, r7
 8010178:	bd80      	pop	{r7, pc}
 801017a:	bf00      	nop
 801017c:	2400000d 	.word	0x2400000d

08010180 <BSP_SD_WriteCpltCallback>:
  * @brief Tx Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
void BSP_SD_WriteCpltCallback(void)
{
 8010180:	b480      	push	{r7}
 8010182:	af00      	add	r7, sp, #0

  WriteStatus = 1;
 8010184:	4b03      	ldr	r3, [pc, #12]	; (8010194 <BSP_SD_WriteCpltCallback+0x14>)
 8010186:	2201      	movs	r2, #1
 8010188:	601a      	str	r2, [r3, #0]
}
 801018a:	bf00      	nop
 801018c:	46bd      	mov	sp, r7
 801018e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010192:	4770      	bx	lr
 8010194:	24000358 	.word	0x24000358

08010198 <BSP_SD_ReadCpltCallback>:
  * @brief Rx Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
void BSP_SD_ReadCpltCallback(void)
{
 8010198:	b480      	push	{r7}
 801019a:	af00      	add	r7, sp, #0
  ReadStatus = 1;
 801019c:	4b03      	ldr	r3, [pc, #12]	; (80101ac <BSP_SD_ReadCpltCallback+0x14>)
 801019e:	2201      	movs	r2, #1
 80101a0:	601a      	str	r2, [r3, #0]
}
 80101a2:	bf00      	nop
 80101a4:	46bd      	mov	sp, r7
 80101a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80101aa:	4770      	bx	lr
 80101ac:	2400035c 	.word	0x2400035c

080101b0 <USBD_CUSTOM_HID_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CUSTOM_HID_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80101b0:	b580      	push	{r7, lr}
 80101b2:	b084      	sub	sp, #16
 80101b4:	af00      	add	r7, sp, #0
 80101b6:	6078      	str	r0, [r7, #4]
 80101b8:	460b      	mov	r3, r1
 80101ba:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CUSTOM_HID_HandleTypeDef *hhid;

  hhid = USBD_malloc(sizeof(USBD_CUSTOM_HID_HandleTypeDef));
 80101bc:	2018      	movs	r0, #24
 80101be:	f002 f855 	bl	801226c <USBD_static_malloc>
 80101c2:	60f8      	str	r0, [r7, #12]

  if (hhid == NULL)
 80101c4:	68fb      	ldr	r3, [r7, #12]
 80101c6:	2b00      	cmp	r3, #0
 80101c8:	d105      	bne.n	80101d6 <USBD_CUSTOM_HID_Init+0x26>
  {
    pdev->pClassData = NULL;
 80101ca:	687b      	ldr	r3, [r7, #4]
 80101cc:	2200      	movs	r2, #0
 80101ce:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    return (uint8_t)USBD_EMEM;
 80101d2:	2302      	movs	r3, #2
 80101d4:	e038      	b.n	8010248 <USBD_CUSTOM_HID_Init+0x98>
  }

  pdev->pClassData = (void *)hhid;
 80101d6:	687b      	ldr	r3, [r7, #4]
 80101d8:	68fa      	ldr	r2, [r7, #12]
 80101da:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80101de:	687b      	ldr	r3, [r7, #4]
 80101e0:	7c1b      	ldrb	r3, [r3, #16]
 80101e2:	2b00      	cmp	r3, #0
 80101e4:	d107      	bne.n	80101f6 <USBD_CUSTOM_HID_Init+0x46>
  {
    pdev->ep_in[CUSTOM_HID_EPIN_ADDR & 0xFU].bInterval = CUSTOM_HID_HS_BINTERVAL;
 80101e6:	687b      	ldr	r3, [r7, #4]
 80101e8:	2205      	movs	r2, #5
 80101ea:	875a      	strh	r2, [r3, #58]	; 0x3a
    pdev->ep_out[CUSTOM_HID_EPOUT_ADDR & 0xFU].bInterval = CUSTOM_HID_HS_BINTERVAL;
 80101ec:	687b      	ldr	r3, [r7, #4]
 80101ee:	2205      	movs	r2, #5
 80101f0:	f8a3 217a 	strh.w	r2, [r3, #378]	; 0x17a
 80101f4:	e006      	b.n	8010204 <USBD_CUSTOM_HID_Init+0x54>
  }
  else   /* LOW and FULL-speed endpoints */
  {
    pdev->ep_in[CUSTOM_HID_EPIN_ADDR & 0xFU].bInterval = CUSTOM_HID_FS_BINTERVAL;
 80101f6:	687b      	ldr	r3, [r7, #4]
 80101f8:	2205      	movs	r2, #5
 80101fa:	875a      	strh	r2, [r3, #58]	; 0x3a
    pdev->ep_out[CUSTOM_HID_EPOUT_ADDR & 0xFU].bInterval = CUSTOM_HID_FS_BINTERVAL;
 80101fc:	687b      	ldr	r3, [r7, #4]
 80101fe:	2205      	movs	r2, #5
 8010200:	f8a3 217a 	strh.w	r2, [r3, #378]	; 0x17a
  }

  /* Open EP IN */
  (void)USBD_LL_OpenEP(pdev, CUSTOM_HID_EPIN_ADDR, USBD_EP_TYPE_INTR,
 8010204:	2302      	movs	r3, #2
 8010206:	2203      	movs	r2, #3
 8010208:	2181      	movs	r1, #129	; 0x81
 801020a:	6878      	ldr	r0, [r7, #4]
 801020c:	f001 ff1d 	bl	801204a <USBD_LL_OpenEP>
                       CUSTOM_HID_EPIN_SIZE);

  pdev->ep_in[CUSTOM_HID_EPIN_ADDR & 0xFU].is_used = 1U;
 8010210:	687b      	ldr	r3, [r7, #4]
 8010212:	2201      	movs	r2, #1
 8010214:	871a      	strh	r2, [r3, #56]	; 0x38

  /* Open EP OUT */
  (void)USBD_LL_OpenEP(pdev, CUSTOM_HID_EPOUT_ADDR, USBD_EP_TYPE_INTR,
 8010216:	2302      	movs	r3, #2
 8010218:	2203      	movs	r2, #3
 801021a:	2101      	movs	r1, #1
 801021c:	6878      	ldr	r0, [r7, #4]
 801021e:	f001 ff14 	bl	801204a <USBD_LL_OpenEP>
                       CUSTOM_HID_EPOUT_SIZE);

  pdev->ep_out[CUSTOM_HID_EPOUT_ADDR & 0xFU].is_used = 1U;
 8010222:	687b      	ldr	r3, [r7, #4]
 8010224:	2201      	movs	r2, #1
 8010226:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

  hhid->state = CUSTOM_HID_IDLE;
 801022a:	68fb      	ldr	r3, [r7, #12]
 801022c:	2200      	movs	r2, #0
 801022e:	751a      	strb	r2, [r3, #20]

  ((USBD_CUSTOM_HID_ItfTypeDef *)pdev->pUserData)->Init();
 8010230:	687b      	ldr	r3, [r7, #4]
 8010232:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8010236:	685b      	ldr	r3, [r3, #4]
 8010238:	4798      	blx	r3

  /* Prepare Out endpoint to receive 1st packet */
  (void)USBD_LL_PrepareReceive(pdev, CUSTOM_HID_EPOUT_ADDR, hhid->Report_buf,
 801023a:	68fa      	ldr	r2, [r7, #12]
 801023c:	2302      	movs	r3, #2
 801023e:	2101      	movs	r1, #1
 8010240:	6878      	ldr	r0, [r7, #4]
 8010242:	f001 fff1 	bl	8012228 <USBD_LL_PrepareReceive>
                               USBD_CUSTOMHID_OUTREPORT_BUF_SIZE);

  return (uint8_t)USBD_OK;
 8010246:	2300      	movs	r3, #0
}
 8010248:	4618      	mov	r0, r3
 801024a:	3710      	adds	r7, #16
 801024c:	46bd      	mov	sp, r7
 801024e:	bd80      	pop	{r7, pc}

08010250 <USBD_CUSTOM_HID_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CUSTOM_HID_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8010250:	b580      	push	{r7, lr}
 8010252:	b082      	sub	sp, #8
 8010254:	af00      	add	r7, sp, #0
 8010256:	6078      	str	r0, [r7, #4]
 8010258:	460b      	mov	r3, r1
 801025a:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);

  /* Close CUSTOM_HID EP IN */
  (void)USBD_LL_CloseEP(pdev, CUSTOM_HID_EPIN_ADDR);
 801025c:	2181      	movs	r1, #129	; 0x81
 801025e:	6878      	ldr	r0, [r7, #4]
 8010260:	f001 ff19 	bl	8012096 <USBD_LL_CloseEP>
  pdev->ep_in[CUSTOM_HID_EPIN_ADDR & 0xFU].is_used = 0U;
 8010264:	687b      	ldr	r3, [r7, #4]
 8010266:	2200      	movs	r2, #0
 8010268:	871a      	strh	r2, [r3, #56]	; 0x38
  pdev->ep_in[CUSTOM_HID_EPIN_ADDR & 0xFU].bInterval = 0U;
 801026a:	687b      	ldr	r3, [r7, #4]
 801026c:	2200      	movs	r2, #0
 801026e:	875a      	strh	r2, [r3, #58]	; 0x3a

  /* Close CUSTOM_HID EP OUT */
  (void)USBD_LL_CloseEP(pdev, CUSTOM_HID_EPOUT_ADDR);
 8010270:	2101      	movs	r1, #1
 8010272:	6878      	ldr	r0, [r7, #4]
 8010274:	f001 ff0f 	bl	8012096 <USBD_LL_CloseEP>
  pdev->ep_out[CUSTOM_HID_EPOUT_ADDR & 0xFU].is_used = 0U;
 8010278:	687b      	ldr	r3, [r7, #4]
 801027a:	2200      	movs	r2, #0
 801027c:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178
  pdev->ep_out[CUSTOM_HID_EPOUT_ADDR & 0xFU].bInterval = 0U;
 8010280:	687b      	ldr	r3, [r7, #4]
 8010282:	2200      	movs	r2, #0
 8010284:	f8a3 217a 	strh.w	r2, [r3, #378]	; 0x17a

  /* Free allocated memory */
  if (pdev->pClassData != NULL)
 8010288:	687b      	ldr	r3, [r7, #4]
 801028a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 801028e:	2b00      	cmp	r3, #0
 8010290:	d00e      	beq.n	80102b0 <USBD_CUSTOM_HID_DeInit+0x60>
  {
    ((USBD_CUSTOM_HID_ItfTypeDef *)pdev->pUserData)->DeInit();
 8010292:	687b      	ldr	r3, [r7, #4]
 8010294:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8010298:	689b      	ldr	r3, [r3, #8]
 801029a:	4798      	blx	r3
    USBD_free(pdev->pClassData);
 801029c:	687b      	ldr	r3, [r7, #4]
 801029e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80102a2:	4618      	mov	r0, r3
 80102a4:	f001 fff0 	bl	8012288 <USBD_static_free>
    pdev->pClassData = NULL;
 80102a8:	687b      	ldr	r3, [r7, #4]
 80102aa:	2200      	movs	r2, #0
 80102ac:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 80102b0:	2300      	movs	r3, #0
}
 80102b2:	4618      	mov	r0, r3
 80102b4:	3708      	adds	r7, #8
 80102b6:	46bd      	mov	sp, r7
 80102b8:	bd80      	pop	{r7, pc}
	...

080102bc <USBD_CUSTOM_HID_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CUSTOM_HID_Setup(USBD_HandleTypeDef *pdev,
                                     USBD_SetupReqTypedef *req)
{
 80102bc:	b580      	push	{r7, lr}
 80102be:	b088      	sub	sp, #32
 80102c0:	af00      	add	r7, sp, #0
 80102c2:	6078      	str	r0, [r7, #4]
 80102c4:	6039      	str	r1, [r7, #0]
  USBD_CUSTOM_HID_HandleTypeDef *hhid = (USBD_CUSTOM_HID_HandleTypeDef *)pdev->pClassData;
 80102c6:	687b      	ldr	r3, [r7, #4]
 80102c8:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80102cc:	613b      	str	r3, [r7, #16]
  uint16_t len = 0U;
 80102ce:	2300      	movs	r3, #0
 80102d0:	83fb      	strh	r3, [r7, #30]
  uint8_t  *pbuf = NULL;
 80102d2:	2300      	movs	r3, #0
 80102d4:	61bb      	str	r3, [r7, #24]
  uint16_t status_info = 0U;
 80102d6:	2300      	movs	r3, #0
 80102d8:	81fb      	strh	r3, [r7, #14]
  USBD_StatusTypeDef ret = USBD_OK;
 80102da:	2300      	movs	r3, #0
 80102dc:	75fb      	strb	r3, [r7, #23]

  if (hhid == NULL)
 80102de:	693b      	ldr	r3, [r7, #16]
 80102e0:	2b00      	cmp	r3, #0
 80102e2:	d101      	bne.n	80102e8 <USBD_CUSTOM_HID_Setup+0x2c>
  {
    return (uint8_t)USBD_FAIL;
 80102e4:	2303      	movs	r3, #3
 80102e6:	e0ed      	b.n	80104c4 <USBD_CUSTOM_HID_Setup+0x208>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80102e8:	683b      	ldr	r3, [r7, #0]
 80102ea:	781b      	ldrb	r3, [r3, #0]
 80102ec:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80102f0:	2b00      	cmp	r3, #0
 80102f2:	d052      	beq.n	801039a <USBD_CUSTOM_HID_Setup+0xde>
 80102f4:	2b20      	cmp	r3, #32
 80102f6:	f040 80dd 	bne.w	80104b4 <USBD_CUSTOM_HID_Setup+0x1f8>
  {
    case USB_REQ_TYPE_CLASS:
      switch (req->bRequest)
 80102fa:	683b      	ldr	r3, [r7, #0]
 80102fc:	785b      	ldrb	r3, [r3, #1]
 80102fe:	3b02      	subs	r3, #2
 8010300:	2b09      	cmp	r3, #9
 8010302:	d842      	bhi.n	801038a <USBD_CUSTOM_HID_Setup+0xce>
 8010304:	a201      	add	r2, pc, #4	; (adr r2, 801030c <USBD_CUSTOM_HID_Setup+0x50>)
 8010306:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801030a:	bf00      	nop
 801030c:	08010365 	.word	0x08010365
 8010310:	08010343 	.word	0x08010343
 8010314:	0801038b 	.word	0x0801038b
 8010318:	0801038b 	.word	0x0801038b
 801031c:	0801038b 	.word	0x0801038b
 8010320:	0801038b 	.word	0x0801038b
 8010324:	0801038b 	.word	0x0801038b
 8010328:	08010375 	.word	0x08010375
 801032c:	08010353 	.word	0x08010353
 8010330:	08010335 	.word	0x08010335
      {
        case CUSTOM_HID_REQ_SET_PROTOCOL:
          hhid->Protocol = (uint8_t)(req->wValue);
 8010334:	683b      	ldr	r3, [r7, #0]
 8010336:	885b      	ldrh	r3, [r3, #2]
 8010338:	b2db      	uxtb	r3, r3
 801033a:	461a      	mov	r2, r3
 801033c:	693b      	ldr	r3, [r7, #16]
 801033e:	605a      	str	r2, [r3, #4]
          break;
 8010340:	e02a      	b.n	8010398 <USBD_CUSTOM_HID_Setup+0xdc>

        case CUSTOM_HID_REQ_GET_PROTOCOL:
          (void)USBD_CtlSendData(pdev, (uint8_t *)&hhid->Protocol, 1U);
 8010342:	693b      	ldr	r3, [r7, #16]
 8010344:	3304      	adds	r3, #4
 8010346:	2201      	movs	r2, #1
 8010348:	4619      	mov	r1, r3
 801034a:	6878      	ldr	r0, [r7, #4]
 801034c:	f001 fa6d 	bl	801182a <USBD_CtlSendData>
          break;
 8010350:	e022      	b.n	8010398 <USBD_CUSTOM_HID_Setup+0xdc>

        case CUSTOM_HID_REQ_SET_IDLE:
          hhid->IdleState = (uint8_t)(req->wValue >> 8);
 8010352:	683b      	ldr	r3, [r7, #0]
 8010354:	885b      	ldrh	r3, [r3, #2]
 8010356:	0a1b      	lsrs	r3, r3, #8
 8010358:	b29b      	uxth	r3, r3
 801035a:	b2db      	uxtb	r3, r3
 801035c:	461a      	mov	r2, r3
 801035e:	693b      	ldr	r3, [r7, #16]
 8010360:	609a      	str	r2, [r3, #8]
          break;
 8010362:	e019      	b.n	8010398 <USBD_CUSTOM_HID_Setup+0xdc>

        case CUSTOM_HID_REQ_GET_IDLE:
          (void)USBD_CtlSendData(pdev, (uint8_t *)&hhid->IdleState, 1U);
 8010364:	693b      	ldr	r3, [r7, #16]
 8010366:	3308      	adds	r3, #8
 8010368:	2201      	movs	r2, #1
 801036a:	4619      	mov	r1, r3
 801036c:	6878      	ldr	r0, [r7, #4]
 801036e:	f001 fa5c 	bl	801182a <USBD_CtlSendData>
          break;
 8010372:	e011      	b.n	8010398 <USBD_CUSTOM_HID_Setup+0xdc>

        case CUSTOM_HID_REQ_SET_REPORT:
          hhid->IsReportAvailable = 1U;
 8010374:	693b      	ldr	r3, [r7, #16]
 8010376:	2201      	movs	r2, #1
 8010378:	611a      	str	r2, [r3, #16]
          (void)USBD_CtlPrepareRx(pdev, hhid->Report_buf, req->wLength);
 801037a:	6939      	ldr	r1, [r7, #16]
 801037c:	683b      	ldr	r3, [r7, #0]
 801037e:	88db      	ldrh	r3, [r3, #6]
 8010380:	461a      	mov	r2, r3
 8010382:	6878      	ldr	r0, [r7, #4]
 8010384:	f001 fa7d 	bl	8011882 <USBD_CtlPrepareRx>
          break;
 8010388:	e006      	b.n	8010398 <USBD_CUSTOM_HID_Setup+0xdc>

        default:
          USBD_CtlError(pdev, req);
 801038a:	6839      	ldr	r1, [r7, #0]
 801038c:	6878      	ldr	r0, [r7, #4]
 801038e:	f001 f9db 	bl	8011748 <USBD_CtlError>
          ret = USBD_FAIL;
 8010392:	2303      	movs	r3, #3
 8010394:	75fb      	strb	r3, [r7, #23]
          break;
 8010396:	bf00      	nop
      }
      break;
 8010398:	e093      	b.n	80104c2 <USBD_CUSTOM_HID_Setup+0x206>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 801039a:	683b      	ldr	r3, [r7, #0]
 801039c:	785b      	ldrb	r3, [r3, #1]
 801039e:	2b0b      	cmp	r3, #11
 80103a0:	d87f      	bhi.n	80104a2 <USBD_CUSTOM_HID_Setup+0x1e6>
 80103a2:	a201      	add	r2, pc, #4	; (adr r2, 80103a8 <USBD_CUSTOM_HID_Setup+0xec>)
 80103a4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80103a8:	080103d9 	.word	0x080103d9
 80103ac:	080104b1 	.word	0x080104b1
 80103b0:	080104a3 	.word	0x080104a3
 80103b4:	080104a3 	.word	0x080104a3
 80103b8:	080104a3 	.word	0x080104a3
 80103bc:	080104a3 	.word	0x080104a3
 80103c0:	08010403 	.word	0x08010403
 80103c4:	080104a3 	.word	0x080104a3
 80103c8:	080104a3 	.word	0x080104a3
 80103cc:	080104a3 	.word	0x080104a3
 80103d0:	08010451 	.word	0x08010451
 80103d4:	0801047b 	.word	0x0801047b
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80103d8:	687b      	ldr	r3, [r7, #4]
 80103da:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80103de:	b2db      	uxtb	r3, r3
 80103e0:	2b03      	cmp	r3, #3
 80103e2:	d107      	bne.n	80103f4 <USBD_CUSTOM_HID_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 80103e4:	f107 030e 	add.w	r3, r7, #14
 80103e8:	2202      	movs	r2, #2
 80103ea:	4619      	mov	r1, r3
 80103ec:	6878      	ldr	r0, [r7, #4]
 80103ee:	f001 fa1c 	bl	801182a <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 80103f2:	e05e      	b.n	80104b2 <USBD_CUSTOM_HID_Setup+0x1f6>
            USBD_CtlError(pdev, req);
 80103f4:	6839      	ldr	r1, [r7, #0]
 80103f6:	6878      	ldr	r0, [r7, #4]
 80103f8:	f001 f9a6 	bl	8011748 <USBD_CtlError>
            ret = USBD_FAIL;
 80103fc:	2303      	movs	r3, #3
 80103fe:	75fb      	strb	r3, [r7, #23]
          break;
 8010400:	e057      	b.n	80104b2 <USBD_CUSTOM_HID_Setup+0x1f6>

        case USB_REQ_GET_DESCRIPTOR:
          if ((req->wValue >> 8) == CUSTOM_HID_REPORT_DESC)
 8010402:	683b      	ldr	r3, [r7, #0]
 8010404:	885b      	ldrh	r3, [r3, #2]
 8010406:	0a1b      	lsrs	r3, r3, #8
 8010408:	b29b      	uxth	r3, r3
 801040a:	2b22      	cmp	r3, #34	; 0x22
 801040c:	d10b      	bne.n	8010426 <USBD_CUSTOM_HID_Setup+0x16a>
          {
            len = MIN(USBD_CUSTOM_HID_REPORT_DESC_SIZE, req->wLength);
 801040e:	683b      	ldr	r3, [r7, #0]
 8010410:	88db      	ldrh	r3, [r3, #6]
 8010412:	2b02      	cmp	r3, #2
 8010414:	bf28      	it	cs
 8010416:	2302      	movcs	r3, #2
 8010418:	83fb      	strh	r3, [r7, #30]
            pbuf = ((USBD_CUSTOM_HID_ItfTypeDef *)pdev->pUserData)->pReport;
 801041a:	687b      	ldr	r3, [r7, #4]
 801041c:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8010420:	681b      	ldr	r3, [r3, #0]
 8010422:	61bb      	str	r3, [r7, #24]
 8010424:	e00d      	b.n	8010442 <USBD_CUSTOM_HID_Setup+0x186>
          }
          else
          {
            if ((req->wValue >> 8) == CUSTOM_HID_DESCRIPTOR_TYPE)
 8010426:	683b      	ldr	r3, [r7, #0]
 8010428:	885b      	ldrh	r3, [r3, #2]
 801042a:	0a1b      	lsrs	r3, r3, #8
 801042c:	b29b      	uxth	r3, r3
 801042e:	2b21      	cmp	r3, #33	; 0x21
 8010430:	d107      	bne.n	8010442 <USBD_CUSTOM_HID_Setup+0x186>
            {
              pbuf = USBD_CUSTOM_HID_Desc;
 8010432:	4b26      	ldr	r3, [pc, #152]	; (80104cc <USBD_CUSTOM_HID_Setup+0x210>)
 8010434:	61bb      	str	r3, [r7, #24]
              len = MIN(USB_CUSTOM_HID_DESC_SIZ, req->wLength);
 8010436:	683b      	ldr	r3, [r7, #0]
 8010438:	88db      	ldrh	r3, [r3, #6]
 801043a:	2b09      	cmp	r3, #9
 801043c:	bf28      	it	cs
 801043e:	2309      	movcs	r3, #9
 8010440:	83fb      	strh	r3, [r7, #30]
            }
          }

          (void)USBD_CtlSendData(pdev, pbuf, len);
 8010442:	8bfb      	ldrh	r3, [r7, #30]
 8010444:	461a      	mov	r2, r3
 8010446:	69b9      	ldr	r1, [r7, #24]
 8010448:	6878      	ldr	r0, [r7, #4]
 801044a:	f001 f9ee 	bl	801182a <USBD_CtlSendData>
          break;
 801044e:	e030      	b.n	80104b2 <USBD_CUSTOM_HID_Setup+0x1f6>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8010450:	687b      	ldr	r3, [r7, #4]
 8010452:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8010456:	b2db      	uxtb	r3, r3
 8010458:	2b03      	cmp	r3, #3
 801045a:	d107      	bne.n	801046c <USBD_CUSTOM_HID_Setup+0x1b0>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&hhid->AltSetting, 1U);
 801045c:	693b      	ldr	r3, [r7, #16]
 801045e:	330c      	adds	r3, #12
 8010460:	2201      	movs	r2, #1
 8010462:	4619      	mov	r1, r3
 8010464:	6878      	ldr	r0, [r7, #4]
 8010466:	f001 f9e0 	bl	801182a <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 801046a:	e022      	b.n	80104b2 <USBD_CUSTOM_HID_Setup+0x1f6>
            USBD_CtlError(pdev, req);
 801046c:	6839      	ldr	r1, [r7, #0]
 801046e:	6878      	ldr	r0, [r7, #4]
 8010470:	f001 f96a 	bl	8011748 <USBD_CtlError>
            ret = USBD_FAIL;
 8010474:	2303      	movs	r3, #3
 8010476:	75fb      	strb	r3, [r7, #23]
          break;
 8010478:	e01b      	b.n	80104b2 <USBD_CUSTOM_HID_Setup+0x1f6>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 801047a:	687b      	ldr	r3, [r7, #4]
 801047c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8010480:	b2db      	uxtb	r3, r3
 8010482:	2b03      	cmp	r3, #3
 8010484:	d106      	bne.n	8010494 <USBD_CUSTOM_HID_Setup+0x1d8>
          {
            hhid->AltSetting = (uint8_t)(req->wValue);
 8010486:	683b      	ldr	r3, [r7, #0]
 8010488:	885b      	ldrh	r3, [r3, #2]
 801048a:	b2db      	uxtb	r3, r3
 801048c:	461a      	mov	r2, r3
 801048e:	693b      	ldr	r3, [r7, #16]
 8010490:	60da      	str	r2, [r3, #12]
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8010492:	e00e      	b.n	80104b2 <USBD_CUSTOM_HID_Setup+0x1f6>
            USBD_CtlError(pdev, req);
 8010494:	6839      	ldr	r1, [r7, #0]
 8010496:	6878      	ldr	r0, [r7, #4]
 8010498:	f001 f956 	bl	8011748 <USBD_CtlError>
            ret = USBD_FAIL;
 801049c:	2303      	movs	r3, #3
 801049e:	75fb      	strb	r3, [r7, #23]
          break;
 80104a0:	e007      	b.n	80104b2 <USBD_CUSTOM_HID_Setup+0x1f6>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 80104a2:	6839      	ldr	r1, [r7, #0]
 80104a4:	6878      	ldr	r0, [r7, #4]
 80104a6:	f001 f94f 	bl	8011748 <USBD_CtlError>
          ret = USBD_FAIL;
 80104aa:	2303      	movs	r3, #3
 80104ac:	75fb      	strb	r3, [r7, #23]
          break;
 80104ae:	e000      	b.n	80104b2 <USBD_CUSTOM_HID_Setup+0x1f6>
          break;
 80104b0:	bf00      	nop
      }
      break;
 80104b2:	e006      	b.n	80104c2 <USBD_CUSTOM_HID_Setup+0x206>

    default:
      USBD_CtlError(pdev, req);
 80104b4:	6839      	ldr	r1, [r7, #0]
 80104b6:	6878      	ldr	r0, [r7, #4]
 80104b8:	f001 f946 	bl	8011748 <USBD_CtlError>
      ret = USBD_FAIL;
 80104bc:	2303      	movs	r3, #3
 80104be:	75fb      	strb	r3, [r7, #23]
      break;
 80104c0:	bf00      	nop
  }
  return (uint8_t)ret;
 80104c2:	7dfb      	ldrb	r3, [r7, #23]
}
 80104c4:	4618      	mov	r0, r3
 80104c6:	3720      	adds	r7, #32
 80104c8:	46bd      	mov	sp, r7
 80104ca:	bd80      	pop	{r7, pc}
 80104cc:	240000cc 	.word	0x240000cc

080104d0 <USBD_CUSTOM_HID_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CUSTOM_HID_GetFSCfgDesc(uint16_t *length)
{
 80104d0:	b480      	push	{r7}
 80104d2:	b083      	sub	sp, #12
 80104d4:	af00      	add	r7, sp, #0
 80104d6:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CUSTOM_HID_CfgFSDesc);
 80104d8:	687b      	ldr	r3, [r7, #4]
 80104da:	2229      	movs	r2, #41	; 0x29
 80104dc:	801a      	strh	r2, [r3, #0]

  return USBD_CUSTOM_HID_CfgFSDesc;
 80104de:	4b03      	ldr	r3, [pc, #12]	; (80104ec <USBD_CUSTOM_HID_GetFSCfgDesc+0x1c>)
}
 80104e0:	4618      	mov	r0, r3
 80104e2:	370c      	adds	r7, #12
 80104e4:	46bd      	mov	sp, r7
 80104e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80104ea:	4770      	bx	lr
 80104ec:	24000048 	.word	0x24000048

080104f0 <USBD_CUSTOM_HID_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CUSTOM_HID_GetHSCfgDesc(uint16_t *length)
{
 80104f0:	b480      	push	{r7}
 80104f2:	b083      	sub	sp, #12
 80104f4:	af00      	add	r7, sp, #0
 80104f6:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CUSTOM_HID_CfgHSDesc);
 80104f8:	687b      	ldr	r3, [r7, #4]
 80104fa:	2229      	movs	r2, #41	; 0x29
 80104fc:	801a      	strh	r2, [r3, #0]

  return USBD_CUSTOM_HID_CfgHSDesc;
 80104fe:	4b03      	ldr	r3, [pc, #12]	; (801050c <USBD_CUSTOM_HID_GetHSCfgDesc+0x1c>)
}
 8010500:	4618      	mov	r0, r3
 8010502:	370c      	adds	r7, #12
 8010504:	46bd      	mov	sp, r7
 8010506:	f85d 7b04 	ldr.w	r7, [sp], #4
 801050a:	4770      	bx	lr
 801050c:	24000074 	.word	0x24000074

08010510 <USBD_CUSTOM_HID_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CUSTOM_HID_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8010510:	b480      	push	{r7}
 8010512:	b083      	sub	sp, #12
 8010514:	af00      	add	r7, sp, #0
 8010516:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CUSTOM_HID_OtherSpeedCfgDesc);
 8010518:	687b      	ldr	r3, [r7, #4]
 801051a:	2229      	movs	r2, #41	; 0x29
 801051c:	801a      	strh	r2, [r3, #0]

  return USBD_CUSTOM_HID_OtherSpeedCfgDesc;
 801051e:	4b03      	ldr	r3, [pc, #12]	; (801052c <USBD_CUSTOM_HID_GetOtherSpeedCfgDesc+0x1c>)
}
 8010520:	4618      	mov	r0, r3
 8010522:	370c      	adds	r7, #12
 8010524:	46bd      	mov	sp, r7
 8010526:	f85d 7b04 	ldr.w	r7, [sp], #4
 801052a:	4770      	bx	lr
 801052c:	240000a0 	.word	0x240000a0

08010530 <USBD_CUSTOM_HID_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint index
  * @retval status
  */
static uint8_t USBD_CUSTOM_HID_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8010530:	b480      	push	{r7}
 8010532:	b083      	sub	sp, #12
 8010534:	af00      	add	r7, sp, #0
 8010536:	6078      	str	r0, [r7, #4]
 8010538:	460b      	mov	r3, r1
 801053a:	70fb      	strb	r3, [r7, #3]
  UNUSED(epnum);

  /* Ensure that the FIFO is empty before a new transfer, this condition could
  be caused by  a new transfer before the end of the previous transfer */
  ((USBD_CUSTOM_HID_HandleTypeDef *)pdev->pClassData)->state = CUSTOM_HID_IDLE;
 801053c:	687b      	ldr	r3, [r7, #4]
 801053e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8010542:	2200      	movs	r2, #0
 8010544:	751a      	strb	r2, [r3, #20]

  return (uint8_t)USBD_OK;
 8010546:	2300      	movs	r3, #0
}
 8010548:	4618      	mov	r0, r3
 801054a:	370c      	adds	r7, #12
 801054c:	46bd      	mov	sp, r7
 801054e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010552:	4770      	bx	lr

08010554 <USBD_CUSTOM_HID_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint index
  * @retval status
  */
static uint8_t USBD_CUSTOM_HID_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8010554:	b580      	push	{r7, lr}
 8010556:	b084      	sub	sp, #16
 8010558:	af00      	add	r7, sp, #0
 801055a:	6078      	str	r0, [r7, #4]
 801055c:	460b      	mov	r3, r1
 801055e:	70fb      	strb	r3, [r7, #3]
  UNUSED(epnum);
  USBD_CUSTOM_HID_HandleTypeDef *hhid;

  if (pdev->pClassData == NULL)
 8010560:	687b      	ldr	r3, [r7, #4]
 8010562:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8010566:	2b00      	cmp	r3, #0
 8010568:	d101      	bne.n	801056e <USBD_CUSTOM_HID_DataOut+0x1a>
  {
    return (uint8_t)USBD_FAIL;
 801056a:	2303      	movs	r3, #3
 801056c:	e00e      	b.n	801058c <USBD_CUSTOM_HID_DataOut+0x38>
  }

  hhid = (USBD_CUSTOM_HID_HandleTypeDef *)pdev->pClassData;
 801056e:	687b      	ldr	r3, [r7, #4]
 8010570:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8010574:	60fb      	str	r3, [r7, #12]

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application processing */
  ((USBD_CUSTOM_HID_ItfTypeDef *)pdev->pUserData)->OutEvent(hhid->Report_buf[0],
 8010576:	687b      	ldr	r3, [r7, #4]
 8010578:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 801057c:	68db      	ldr	r3, [r3, #12]
 801057e:	68fa      	ldr	r2, [r7, #12]
 8010580:	7810      	ldrb	r0, [r2, #0]
 8010582:	68fa      	ldr	r2, [r7, #12]
 8010584:	7852      	ldrb	r2, [r2, #1]
 8010586:	4611      	mov	r1, r2
 8010588:	4798      	blx	r3
                                                            hhid->Report_buf[1]);

  return (uint8_t)USBD_OK;
 801058a:	2300      	movs	r3, #0
}
 801058c:	4618      	mov	r0, r3
 801058e:	3710      	adds	r7, #16
 8010590:	46bd      	mov	sp, r7
 8010592:	bd80      	pop	{r7, pc}

08010594 <USBD_CUSTOM_HID_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CUSTOM_HID_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8010594:	b580      	push	{r7, lr}
 8010596:	b084      	sub	sp, #16
 8010598:	af00      	add	r7, sp, #0
 801059a:	6078      	str	r0, [r7, #4]
  USBD_CUSTOM_HID_HandleTypeDef *hhid;

  if (pdev->pClassData == NULL)
 801059c:	687b      	ldr	r3, [r7, #4]
 801059e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80105a2:	2b00      	cmp	r3, #0
 80105a4:	d101      	bne.n	80105aa <USBD_CUSTOM_HID_ReceivePacket+0x16>
  {
    return (uint8_t)USBD_FAIL;
 80105a6:	2303      	movs	r3, #3
 80105a8:	e00a      	b.n	80105c0 <USBD_CUSTOM_HID_ReceivePacket+0x2c>
  }

  hhid = (USBD_CUSTOM_HID_HandleTypeDef *)pdev->pClassData;
 80105aa:	687b      	ldr	r3, [r7, #4]
 80105ac:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80105b0:	60fb      	str	r3, [r7, #12]

  /* Resume USB Out process */
  (void)USBD_LL_PrepareReceive(pdev, CUSTOM_HID_EPOUT_ADDR, hhid->Report_buf,
 80105b2:	68fa      	ldr	r2, [r7, #12]
 80105b4:	2302      	movs	r3, #2
 80105b6:	2101      	movs	r1, #1
 80105b8:	6878      	ldr	r0, [r7, #4]
 80105ba:	f001 fe35 	bl	8012228 <USBD_LL_PrepareReceive>
                               USBD_CUSTOMHID_OUTREPORT_BUF_SIZE);

  return (uint8_t)USBD_OK;
 80105be:	2300      	movs	r3, #0
}
 80105c0:	4618      	mov	r0, r3
 80105c2:	3710      	adds	r7, #16
 80105c4:	46bd      	mov	sp, r7
 80105c6:	bd80      	pop	{r7, pc}

080105c8 <USBD_CUSTOM_HID_EP0_RxReady>:
  *         Handles control request data.
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CUSTOM_HID_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 80105c8:	b580      	push	{r7, lr}
 80105ca:	b084      	sub	sp, #16
 80105cc:	af00      	add	r7, sp, #0
 80105ce:	6078      	str	r0, [r7, #4]
  USBD_CUSTOM_HID_HandleTypeDef *hhid = (USBD_CUSTOM_HID_HandleTypeDef *)pdev->pClassData;
 80105d0:	687b      	ldr	r3, [r7, #4]
 80105d2:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80105d6:	60fb      	str	r3, [r7, #12]

  if (hhid == NULL)
 80105d8:	68fb      	ldr	r3, [r7, #12]
 80105da:	2b00      	cmp	r3, #0
 80105dc:	d101      	bne.n	80105e2 <USBD_CUSTOM_HID_EP0_RxReady+0x1a>
  {
    return (uint8_t)USBD_FAIL;
 80105de:	2303      	movs	r3, #3
 80105e0:	e011      	b.n	8010606 <USBD_CUSTOM_HID_EP0_RxReady+0x3e>
  }

  if (hhid->IsReportAvailable == 1U)
 80105e2:	68fb      	ldr	r3, [r7, #12]
 80105e4:	691b      	ldr	r3, [r3, #16]
 80105e6:	2b01      	cmp	r3, #1
 80105e8:	d10c      	bne.n	8010604 <USBD_CUSTOM_HID_EP0_RxReady+0x3c>
  {
    ((USBD_CUSTOM_HID_ItfTypeDef *)pdev->pUserData)->OutEvent(hhid->Report_buf[0],
 80105ea:	687b      	ldr	r3, [r7, #4]
 80105ec:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80105f0:	68db      	ldr	r3, [r3, #12]
 80105f2:	68fa      	ldr	r2, [r7, #12]
 80105f4:	7810      	ldrb	r0, [r2, #0]
 80105f6:	68fa      	ldr	r2, [r7, #12]
 80105f8:	7852      	ldrb	r2, [r2, #1]
 80105fa:	4611      	mov	r1, r2
 80105fc:	4798      	blx	r3
                                                              hhid->Report_buf[1]);
    hhid->IsReportAvailable = 0U;
 80105fe:	68fb      	ldr	r3, [r7, #12]
 8010600:	2200      	movs	r2, #0
 8010602:	611a      	str	r2, [r3, #16]
  }

  return (uint8_t)USBD_OK;
 8010604:	2300      	movs	r3, #0
}
 8010606:	4618      	mov	r0, r3
 8010608:	3710      	adds	r7, #16
 801060a:	46bd      	mov	sp, r7
 801060c:	bd80      	pop	{r7, pc}
	...

08010610 <USBD_CUSTOM_HID_GetDeviceQualifierDesc>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CUSTOM_HID_GetDeviceQualifierDesc(uint16_t *length)
{
 8010610:	b480      	push	{r7}
 8010612:	b083      	sub	sp, #12
 8010614:	af00      	add	r7, sp, #0
 8010616:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CUSTOM_HID_DeviceQualifierDesc);
 8010618:	687b      	ldr	r3, [r7, #4]
 801061a:	220a      	movs	r2, #10
 801061c:	801a      	strh	r2, [r3, #0]

  return USBD_CUSTOM_HID_DeviceQualifierDesc;
 801061e:	4b03      	ldr	r3, [pc, #12]	; (801062c <USBD_CUSTOM_HID_GetDeviceQualifierDesc+0x1c>)
}
 8010620:	4618      	mov	r0, r3
 8010622:	370c      	adds	r7, #12
 8010624:	46bd      	mov	sp, r7
 8010626:	f85d 7b04 	ldr.w	r7, [sp], #4
 801062a:	4770      	bx	lr
 801062c:	240000d8 	.word	0x240000d8

08010630 <USBD_CUSTOM_HID_RegisterInterface>:
  * @param  fops: CUSTOMHID Interface callback
  * @retval status
  */
uint8_t USBD_CUSTOM_HID_RegisterInterface(USBD_HandleTypeDef *pdev,
                                          USBD_CUSTOM_HID_ItfTypeDef *fops)
{
 8010630:	b480      	push	{r7}
 8010632:	b083      	sub	sp, #12
 8010634:	af00      	add	r7, sp, #0
 8010636:	6078      	str	r0, [r7, #4]
 8010638:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 801063a:	683b      	ldr	r3, [r7, #0]
 801063c:	2b00      	cmp	r3, #0
 801063e:	d101      	bne.n	8010644 <USBD_CUSTOM_HID_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 8010640:	2303      	movs	r3, #3
 8010642:	e004      	b.n	801064e <USBD_CUSTOM_HID_RegisterInterface+0x1e>
  }

  pdev->pUserData = fops;
 8010644:	687b      	ldr	r3, [r7, #4]
 8010646:	683a      	ldr	r2, [r7, #0]
 8010648:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  return (uint8_t)USBD_OK;
 801064c:	2300      	movs	r3, #0
}
 801064e:	4618      	mov	r0, r3
 8010650:	370c      	adds	r7, #12
 8010652:	46bd      	mov	sp, r7
 8010654:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010658:	4770      	bx	lr

0801065a <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 801065a:	b580      	push	{r7, lr}
 801065c:	b086      	sub	sp, #24
 801065e:	af00      	add	r7, sp, #0
 8010660:	60f8      	str	r0, [r7, #12]
 8010662:	60b9      	str	r1, [r7, #8]
 8010664:	4613      	mov	r3, r2
 8010666:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8010668:	68fb      	ldr	r3, [r7, #12]
 801066a:	2b00      	cmp	r3, #0
 801066c:	d101      	bne.n	8010672 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 801066e:	2303      	movs	r3, #3
 8010670:	e01f      	b.n	80106b2 <USBD_Init+0x58>
  }

  /* Unlink previous class resources */
  pdev->pClass = NULL;
 8010672:	68fb      	ldr	r3, [r7, #12]
 8010674:	2200      	movs	r2, #0
 8010676:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData = NULL;
 801067a:	68fb      	ldr	r3, [r7, #12]
 801067c:	2200      	movs	r2, #0
 801067e:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0
  pdev->pConfDesc = NULL;
 8010682:	68fb      	ldr	r3, [r7, #12]
 8010684:	2200      	movs	r2, #0
 8010686:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 801068a:	68bb      	ldr	r3, [r7, #8]
 801068c:	2b00      	cmp	r3, #0
 801068e:	d003      	beq.n	8010698 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 8010690:	68fb      	ldr	r3, [r7, #12]
 8010692:	68ba      	ldr	r2, [r7, #8]
 8010694:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8010698:	68fb      	ldr	r3, [r7, #12]
 801069a:	2201      	movs	r2, #1
 801069c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 80106a0:	68fb      	ldr	r3, [r7, #12]
 80106a2:	79fa      	ldrb	r2, [r7, #7]
 80106a4:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 80106a6:	68f8      	ldr	r0, [r7, #12]
 80106a8:	f001 fc64 	bl	8011f74 <USBD_LL_Init>
 80106ac:	4603      	mov	r3, r0
 80106ae:	75fb      	strb	r3, [r7, #23]

  return ret;
 80106b0:	7dfb      	ldrb	r3, [r7, #23]
}
 80106b2:	4618      	mov	r0, r3
 80106b4:	3718      	adds	r7, #24
 80106b6:	46bd      	mov	sp, r7
 80106b8:	bd80      	pop	{r7, pc}

080106ba <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 80106ba:	b580      	push	{r7, lr}
 80106bc:	b084      	sub	sp, #16
 80106be:	af00      	add	r7, sp, #0
 80106c0:	6078      	str	r0, [r7, #4]
 80106c2:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 80106c4:	2300      	movs	r3, #0
 80106c6:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 80106c8:	683b      	ldr	r3, [r7, #0]
 80106ca:	2b00      	cmp	r3, #0
 80106cc:	d101      	bne.n	80106d2 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    return USBD_FAIL;
 80106ce:	2303      	movs	r3, #3
 80106d0:	e016      	b.n	8010700 <USBD_RegisterClass+0x46>
  }

  /* link the class to the USB Device handle */
  pdev->pClass = pclass;
 80106d2:	687b      	ldr	r3, [r7, #4]
 80106d4:	683a      	ldr	r2, [r7, #0]
 80106d6:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass->GetFSConfigDescriptor != NULL)
 80106da:	687b      	ldr	r3, [r7, #4]
 80106dc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80106e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80106e2:	2b00      	cmp	r3, #0
 80106e4:	d00b      	beq.n	80106fe <USBD_RegisterClass+0x44>
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetFSConfigDescriptor(&len);
 80106e6:	687b      	ldr	r3, [r7, #4]
 80106e8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80106ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80106ee:	f107 020e 	add.w	r2, r7, #14
 80106f2:	4610      	mov	r0, r2
 80106f4:	4798      	blx	r3
 80106f6:	4602      	mov	r2, r0
 80106f8:	687b      	ldr	r3, [r7, #4]
 80106fa:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
  }
#endif /* USE_USB_FS */

  return USBD_OK;
 80106fe:	2300      	movs	r3, #0
}
 8010700:	4618      	mov	r0, r3
 8010702:	3710      	adds	r7, #16
 8010704:	46bd      	mov	sp, r7
 8010706:	bd80      	pop	{r7, pc}

08010708 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8010708:	b580      	push	{r7, lr}
 801070a:	b082      	sub	sp, #8
 801070c:	af00      	add	r7, sp, #0
 801070e:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8010710:	6878      	ldr	r0, [r7, #4]
 8010712:	f001 fc7f 	bl	8012014 <USBD_LL_Start>
 8010716:	4603      	mov	r3, r0
}
 8010718:	4618      	mov	r0, r3
 801071a:	3708      	adds	r7, #8
 801071c:	46bd      	mov	sp, r7
 801071e:	bd80      	pop	{r7, pc}

08010720 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 8010720:	b480      	push	{r7}
 8010722:	b083      	sub	sp, #12
 8010724:	af00      	add	r7, sp, #0
 8010726:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8010728:	2300      	movs	r3, #0
}
 801072a:	4618      	mov	r0, r3
 801072c:	370c      	adds	r7, #12
 801072e:	46bd      	mov	sp, r7
 8010730:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010734:	4770      	bx	lr

08010736 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8010736:	b580      	push	{r7, lr}
 8010738:	b084      	sub	sp, #16
 801073a:	af00      	add	r7, sp, #0
 801073c:	6078      	str	r0, [r7, #4]
 801073e:	460b      	mov	r3, r1
 8010740:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 8010742:	2303      	movs	r3, #3
 8010744:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 8010746:	687b      	ldr	r3, [r7, #4]
 8010748:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 801074c:	2b00      	cmp	r3, #0
 801074e:	d009      	beq.n	8010764 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass->Init(pdev, cfgidx);
 8010750:	687b      	ldr	r3, [r7, #4]
 8010752:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8010756:	681b      	ldr	r3, [r3, #0]
 8010758:	78fa      	ldrb	r2, [r7, #3]
 801075a:	4611      	mov	r1, r2
 801075c:	6878      	ldr	r0, [r7, #4]
 801075e:	4798      	blx	r3
 8010760:	4603      	mov	r3, r0
 8010762:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 8010764:	7bfb      	ldrb	r3, [r7, #15]
}
 8010766:	4618      	mov	r0, r3
 8010768:	3710      	adds	r7, #16
 801076a:	46bd      	mov	sp, r7
 801076c:	bd80      	pop	{r7, pc}

0801076e <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 801076e:	b580      	push	{r7, lr}
 8010770:	b082      	sub	sp, #8
 8010772:	af00      	add	r7, sp, #0
 8010774:	6078      	str	r0, [r7, #4]
 8010776:	460b      	mov	r3, r1
 8010778:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration and De-initialize the Class process */
  if (pdev->pClass != NULL)
 801077a:	687b      	ldr	r3, [r7, #4]
 801077c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8010780:	2b00      	cmp	r3, #0
 8010782:	d007      	beq.n	8010794 <USBD_ClrClassConfig+0x26>
  {
    pdev->pClass->DeInit(pdev, cfgidx);
 8010784:	687b      	ldr	r3, [r7, #4]
 8010786:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 801078a:	685b      	ldr	r3, [r3, #4]
 801078c:	78fa      	ldrb	r2, [r7, #3]
 801078e:	4611      	mov	r1, r2
 8010790:	6878      	ldr	r0, [r7, #4]
 8010792:	4798      	blx	r3
  }

  return USBD_OK;
 8010794:	2300      	movs	r3, #0
}
 8010796:	4618      	mov	r0, r3
 8010798:	3708      	adds	r7, #8
 801079a:	46bd      	mov	sp, r7
 801079c:	bd80      	pop	{r7, pc}

0801079e <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 801079e:	b580      	push	{r7, lr}
 80107a0:	b084      	sub	sp, #16
 80107a2:	af00      	add	r7, sp, #0
 80107a4:	6078      	str	r0, [r7, #4]
 80107a6:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 80107a8:	687b      	ldr	r3, [r7, #4]
 80107aa:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 80107ae:	6839      	ldr	r1, [r7, #0]
 80107b0:	4618      	mov	r0, r3
 80107b2:	f000 ff8f 	bl	80116d4 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 80107b6:	687b      	ldr	r3, [r7, #4]
 80107b8:	2201      	movs	r2, #1
 80107ba:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 80107be:	687b      	ldr	r3, [r7, #4]
 80107c0:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 80107c4:	461a      	mov	r2, r3
 80107c6:	687b      	ldr	r3, [r7, #4]
 80107c8:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 80107cc:	687b      	ldr	r3, [r7, #4]
 80107ce:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 80107d2:	f003 031f 	and.w	r3, r3, #31
 80107d6:	2b02      	cmp	r3, #2
 80107d8:	d01a      	beq.n	8010810 <USBD_LL_SetupStage+0x72>
 80107da:	2b02      	cmp	r3, #2
 80107dc:	d822      	bhi.n	8010824 <USBD_LL_SetupStage+0x86>
 80107de:	2b00      	cmp	r3, #0
 80107e0:	d002      	beq.n	80107e8 <USBD_LL_SetupStage+0x4a>
 80107e2:	2b01      	cmp	r3, #1
 80107e4:	d00a      	beq.n	80107fc <USBD_LL_SetupStage+0x5e>
 80107e6:	e01d      	b.n	8010824 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 80107e8:	687b      	ldr	r3, [r7, #4]
 80107ea:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 80107ee:	4619      	mov	r1, r3
 80107f0:	6878      	ldr	r0, [r7, #4]
 80107f2:	f000 fa61 	bl	8010cb8 <USBD_StdDevReq>
 80107f6:	4603      	mov	r3, r0
 80107f8:	73fb      	strb	r3, [r7, #15]
      break;
 80107fa:	e020      	b.n	801083e <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 80107fc:	687b      	ldr	r3, [r7, #4]
 80107fe:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8010802:	4619      	mov	r1, r3
 8010804:	6878      	ldr	r0, [r7, #4]
 8010806:	f000 fac5 	bl	8010d94 <USBD_StdItfReq>
 801080a:	4603      	mov	r3, r0
 801080c:	73fb      	strb	r3, [r7, #15]
      break;
 801080e:	e016      	b.n	801083e <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8010810:	687b      	ldr	r3, [r7, #4]
 8010812:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8010816:	4619      	mov	r1, r3
 8010818:	6878      	ldr	r0, [r7, #4]
 801081a:	f000 fb04 	bl	8010e26 <USBD_StdEPReq>
 801081e:	4603      	mov	r3, r0
 8010820:	73fb      	strb	r3, [r7, #15]
      break;
 8010822:	e00c      	b.n	801083e <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8010824:	687b      	ldr	r3, [r7, #4]
 8010826:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 801082a:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 801082e:	b2db      	uxtb	r3, r3
 8010830:	4619      	mov	r1, r3
 8010832:	6878      	ldr	r0, [r7, #4]
 8010834:	f001 fc4e 	bl	80120d4 <USBD_LL_StallEP>
 8010838:	4603      	mov	r3, r0
 801083a:	73fb      	strb	r3, [r7, #15]
      break;
 801083c:	bf00      	nop
  }

  return ret;
 801083e:	7bfb      	ldrb	r3, [r7, #15]
}
 8010840:	4618      	mov	r0, r3
 8010842:	3710      	adds	r7, #16
 8010844:	46bd      	mov	sp, r7
 8010846:	bd80      	pop	{r7, pc}

08010848 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8010848:	b580      	push	{r7, lr}
 801084a:	b086      	sub	sp, #24
 801084c:	af00      	add	r7, sp, #0
 801084e:	60f8      	str	r0, [r7, #12]
 8010850:	460b      	mov	r3, r1
 8010852:	607a      	str	r2, [r7, #4]
 8010854:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 8010856:	7afb      	ldrb	r3, [r7, #11]
 8010858:	2b00      	cmp	r3, #0
 801085a:	d138      	bne.n	80108ce <USBD_LL_DataOutStage+0x86>
  {
    pep = &pdev->ep_out[0];
 801085c:	68fb      	ldr	r3, [r7, #12]
 801085e:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 8010862:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8010864:	68fb      	ldr	r3, [r7, #12]
 8010866:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 801086a:	2b03      	cmp	r3, #3
 801086c:	d14a      	bne.n	8010904 <USBD_LL_DataOutStage+0xbc>
    {
      if (pep->rem_length > pep->maxpacket)
 801086e:	693b      	ldr	r3, [r7, #16]
 8010870:	689a      	ldr	r2, [r3, #8]
 8010872:	693b      	ldr	r3, [r7, #16]
 8010874:	68db      	ldr	r3, [r3, #12]
 8010876:	429a      	cmp	r2, r3
 8010878:	d913      	bls.n	80108a2 <USBD_LL_DataOutStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 801087a:	693b      	ldr	r3, [r7, #16]
 801087c:	689a      	ldr	r2, [r3, #8]
 801087e:	693b      	ldr	r3, [r7, #16]
 8010880:	68db      	ldr	r3, [r3, #12]
 8010882:	1ad2      	subs	r2, r2, r3
 8010884:	693b      	ldr	r3, [r7, #16]
 8010886:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 8010888:	693b      	ldr	r3, [r7, #16]
 801088a:	68da      	ldr	r2, [r3, #12]
 801088c:	693b      	ldr	r3, [r7, #16]
 801088e:	689b      	ldr	r3, [r3, #8]
 8010890:	4293      	cmp	r3, r2
 8010892:	bf28      	it	cs
 8010894:	4613      	movcs	r3, r2
 8010896:	461a      	mov	r2, r3
 8010898:	6879      	ldr	r1, [r7, #4]
 801089a:	68f8      	ldr	r0, [r7, #12]
 801089c:	f001 f80e 	bl	80118bc <USBD_CtlContinueRx>
 80108a0:	e030      	b.n	8010904 <USBD_LL_DataOutStage+0xbc>
      }
      else
      {
        if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80108a2:	68fb      	ldr	r3, [r7, #12]
 80108a4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80108a8:	b2db      	uxtb	r3, r3
 80108aa:	2b03      	cmp	r3, #3
 80108ac:	d10b      	bne.n	80108c6 <USBD_LL_DataOutStage+0x7e>
        {
          if (pdev->pClass->EP0_RxReady != NULL)
 80108ae:	68fb      	ldr	r3, [r7, #12]
 80108b0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80108b4:	691b      	ldr	r3, [r3, #16]
 80108b6:	2b00      	cmp	r3, #0
 80108b8:	d005      	beq.n	80108c6 <USBD_LL_DataOutStage+0x7e>
          {
            pdev->pClass->EP0_RxReady(pdev);
 80108ba:	68fb      	ldr	r3, [r7, #12]
 80108bc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80108c0:	691b      	ldr	r3, [r3, #16]
 80108c2:	68f8      	ldr	r0, [r7, #12]
 80108c4:	4798      	blx	r3
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 80108c6:	68f8      	ldr	r0, [r7, #12]
 80108c8:	f001 f809 	bl	80118de <USBD_CtlSendStatus>
 80108cc:	e01a      	b.n	8010904 <USBD_LL_DataOutStage+0xbc>
#endif
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80108ce:	68fb      	ldr	r3, [r7, #12]
 80108d0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80108d4:	b2db      	uxtb	r3, r3
 80108d6:	2b03      	cmp	r3, #3
 80108d8:	d114      	bne.n	8010904 <USBD_LL_DataOutStage+0xbc>
    {
      if (pdev->pClass->DataOut != NULL)
 80108da:	68fb      	ldr	r3, [r7, #12]
 80108dc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80108e0:	699b      	ldr	r3, [r3, #24]
 80108e2:	2b00      	cmp	r3, #0
 80108e4:	d00e      	beq.n	8010904 <USBD_LL_DataOutStage+0xbc>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataOut(pdev, epnum);
 80108e6:	68fb      	ldr	r3, [r7, #12]
 80108e8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80108ec:	699b      	ldr	r3, [r3, #24]
 80108ee:	7afa      	ldrb	r2, [r7, #11]
 80108f0:	4611      	mov	r1, r2
 80108f2:	68f8      	ldr	r0, [r7, #12]
 80108f4:	4798      	blx	r3
 80108f6:	4603      	mov	r3, r0
 80108f8:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 80108fa:	7dfb      	ldrb	r3, [r7, #23]
 80108fc:	2b00      	cmp	r3, #0
 80108fe:	d001      	beq.n	8010904 <USBD_LL_DataOutStage+0xbc>
        {
          return ret;
 8010900:	7dfb      	ldrb	r3, [r7, #23]
 8010902:	e000      	b.n	8010906 <USBD_LL_DataOutStage+0xbe>
        }
      }
    }
  }

  return USBD_OK;
 8010904:	2300      	movs	r3, #0
}
 8010906:	4618      	mov	r0, r3
 8010908:	3718      	adds	r7, #24
 801090a:	46bd      	mov	sp, r7
 801090c:	bd80      	pop	{r7, pc}

0801090e <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 801090e:	b580      	push	{r7, lr}
 8010910:	b086      	sub	sp, #24
 8010912:	af00      	add	r7, sp, #0
 8010914:	60f8      	str	r0, [r7, #12]
 8010916:	460b      	mov	r3, r1
 8010918:	607a      	str	r2, [r7, #4]
 801091a:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 801091c:	7afb      	ldrb	r3, [r7, #11]
 801091e:	2b00      	cmp	r3, #0
 8010920:	d16b      	bne.n	80109fa <USBD_LL_DataInStage+0xec>
  {
    pep = &pdev->ep_in[0];
 8010922:	68fb      	ldr	r3, [r7, #12]
 8010924:	3314      	adds	r3, #20
 8010926:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8010928:	68fb      	ldr	r3, [r7, #12]
 801092a:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 801092e:	2b02      	cmp	r3, #2
 8010930:	d156      	bne.n	80109e0 <USBD_LL_DataInStage+0xd2>
    {
      if (pep->rem_length > pep->maxpacket)
 8010932:	693b      	ldr	r3, [r7, #16]
 8010934:	689a      	ldr	r2, [r3, #8]
 8010936:	693b      	ldr	r3, [r7, #16]
 8010938:	68db      	ldr	r3, [r3, #12]
 801093a:	429a      	cmp	r2, r3
 801093c:	d914      	bls.n	8010968 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 801093e:	693b      	ldr	r3, [r7, #16]
 8010940:	689a      	ldr	r2, [r3, #8]
 8010942:	693b      	ldr	r3, [r7, #16]
 8010944:	68db      	ldr	r3, [r3, #12]
 8010946:	1ad2      	subs	r2, r2, r3
 8010948:	693b      	ldr	r3, [r7, #16]
 801094a:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 801094c:	693b      	ldr	r3, [r7, #16]
 801094e:	689b      	ldr	r3, [r3, #8]
 8010950:	461a      	mov	r2, r3
 8010952:	6879      	ldr	r1, [r7, #4]
 8010954:	68f8      	ldr	r0, [r7, #12]
 8010956:	f000 ff83 	bl	8011860 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 801095a:	2300      	movs	r3, #0
 801095c:	2200      	movs	r2, #0
 801095e:	2100      	movs	r1, #0
 8010960:	68f8      	ldr	r0, [r7, #12]
 8010962:	f001 fc61 	bl	8012228 <USBD_LL_PrepareReceive>
 8010966:	e03b      	b.n	80109e0 <USBD_LL_DataInStage+0xd2>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 8010968:	693b      	ldr	r3, [r7, #16]
 801096a:	68da      	ldr	r2, [r3, #12]
 801096c:	693b      	ldr	r3, [r7, #16]
 801096e:	689b      	ldr	r3, [r3, #8]
 8010970:	429a      	cmp	r2, r3
 8010972:	d11c      	bne.n	80109ae <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 8010974:	693b      	ldr	r3, [r7, #16]
 8010976:	685a      	ldr	r2, [r3, #4]
 8010978:	693b      	ldr	r3, [r7, #16]
 801097a:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 801097c:	429a      	cmp	r2, r3
 801097e:	d316      	bcc.n	80109ae <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 8010980:	693b      	ldr	r3, [r7, #16]
 8010982:	685a      	ldr	r2, [r3, #4]
 8010984:	68fb      	ldr	r3, [r7, #12]
 8010986:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 801098a:	429a      	cmp	r2, r3
 801098c:	d20f      	bcs.n	80109ae <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 801098e:	2200      	movs	r2, #0
 8010990:	2100      	movs	r1, #0
 8010992:	68f8      	ldr	r0, [r7, #12]
 8010994:	f000 ff64 	bl	8011860 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8010998:	68fb      	ldr	r3, [r7, #12]
 801099a:	2200      	movs	r2, #0
 801099c:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80109a0:	2300      	movs	r3, #0
 80109a2:	2200      	movs	r2, #0
 80109a4:	2100      	movs	r1, #0
 80109a6:	68f8      	ldr	r0, [r7, #12]
 80109a8:	f001 fc3e 	bl	8012228 <USBD_LL_PrepareReceive>
 80109ac:	e018      	b.n	80109e0 <USBD_LL_DataInStage+0xd2>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80109ae:	68fb      	ldr	r3, [r7, #12]
 80109b0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80109b4:	b2db      	uxtb	r3, r3
 80109b6:	2b03      	cmp	r3, #3
 80109b8:	d10b      	bne.n	80109d2 <USBD_LL_DataInStage+0xc4>
          {
            if (pdev->pClass->EP0_TxSent != NULL)
 80109ba:	68fb      	ldr	r3, [r7, #12]
 80109bc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80109c0:	68db      	ldr	r3, [r3, #12]
 80109c2:	2b00      	cmp	r3, #0
 80109c4:	d005      	beq.n	80109d2 <USBD_LL_DataInStage+0xc4>
            {
              pdev->pClass->EP0_TxSent(pdev);
 80109c6:	68fb      	ldr	r3, [r7, #12]
 80109c8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80109cc:	68db      	ldr	r3, [r3, #12]
 80109ce:	68f8      	ldr	r0, [r7, #12]
 80109d0:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 80109d2:	2180      	movs	r1, #128	; 0x80
 80109d4:	68f8      	ldr	r0, [r7, #12]
 80109d6:	f001 fb7d 	bl	80120d4 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 80109da:	68f8      	ldr	r0, [r7, #12]
 80109dc:	f000 ff92 	bl	8011904 <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode == 1U)
 80109e0:	68fb      	ldr	r3, [r7, #12]
 80109e2:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 80109e6:	2b01      	cmp	r3, #1
 80109e8:	d122      	bne.n	8010a30 <USBD_LL_DataInStage+0x122>
    {
      (void)USBD_RunTestMode(pdev);
 80109ea:	68f8      	ldr	r0, [r7, #12]
 80109ec:	f7ff fe98 	bl	8010720 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 80109f0:	68fb      	ldr	r3, [r7, #12]
 80109f2:	2200      	movs	r2, #0
 80109f4:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 80109f8:	e01a      	b.n	8010a30 <USBD_LL_DataInStage+0x122>
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80109fa:	68fb      	ldr	r3, [r7, #12]
 80109fc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8010a00:	b2db      	uxtb	r3, r3
 8010a02:	2b03      	cmp	r3, #3
 8010a04:	d114      	bne.n	8010a30 <USBD_LL_DataInStage+0x122>
    {
      if (pdev->pClass->DataIn != NULL)
 8010a06:	68fb      	ldr	r3, [r7, #12]
 8010a08:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8010a0c:	695b      	ldr	r3, [r3, #20]
 8010a0e:	2b00      	cmp	r3, #0
 8010a10:	d00e      	beq.n	8010a30 <USBD_LL_DataInStage+0x122>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataIn(pdev, epnum);
 8010a12:	68fb      	ldr	r3, [r7, #12]
 8010a14:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8010a18:	695b      	ldr	r3, [r3, #20]
 8010a1a:	7afa      	ldrb	r2, [r7, #11]
 8010a1c:	4611      	mov	r1, r2
 8010a1e:	68f8      	ldr	r0, [r7, #12]
 8010a20:	4798      	blx	r3
 8010a22:	4603      	mov	r3, r0
 8010a24:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 8010a26:	7dfb      	ldrb	r3, [r7, #23]
 8010a28:	2b00      	cmp	r3, #0
 8010a2a:	d001      	beq.n	8010a30 <USBD_LL_DataInStage+0x122>
        {
          return ret;
 8010a2c:	7dfb      	ldrb	r3, [r7, #23]
 8010a2e:	e000      	b.n	8010a32 <USBD_LL_DataInStage+0x124>
        }
      }
    }
  }

  return USBD_OK;
 8010a30:	2300      	movs	r3, #0
}
 8010a32:	4618      	mov	r0, r3
 8010a34:	3718      	adds	r7, #24
 8010a36:	46bd      	mov	sp, r7
 8010a38:	bd80      	pop	{r7, pc}

08010a3a <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8010a3a:	b580      	push	{r7, lr}
 8010a3c:	b082      	sub	sp, #8
 8010a3e:	af00      	add	r7, sp, #0
 8010a40:	6078      	str	r0, [r7, #4]
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8010a42:	687b      	ldr	r3, [r7, #4]
 8010a44:	2201      	movs	r2, #1
 8010a46:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8010a4a:	687b      	ldr	r3, [r7, #4]
 8010a4c:	2200      	movs	r2, #0
 8010a4e:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 8010a52:	687b      	ldr	r3, [r7, #4]
 8010a54:	2200      	movs	r2, #0
 8010a56:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8010a58:	687b      	ldr	r3, [r7, #4]
 8010a5a:	2200      	movs	r2, #0
 8010a5c:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClass == NULL)
 8010a60:	687b      	ldr	r3, [r7, #4]
 8010a62:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8010a66:	2b00      	cmp	r3, #0
 8010a68:	d101      	bne.n	8010a6e <USBD_LL_Reset+0x34>
  {
    return USBD_FAIL;
 8010a6a:	2303      	movs	r3, #3
 8010a6c:	e02f      	b.n	8010ace <USBD_LL_Reset+0x94>
  }

  if (pdev->pClassData != NULL)
 8010a6e:	687b      	ldr	r3, [r7, #4]
 8010a70:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8010a74:	2b00      	cmp	r3, #0
 8010a76:	d00f      	beq.n	8010a98 <USBD_LL_Reset+0x5e>
  {
    if (pdev->pClass->DeInit != NULL)
 8010a78:	687b      	ldr	r3, [r7, #4]
 8010a7a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8010a7e:	685b      	ldr	r3, [r3, #4]
 8010a80:	2b00      	cmp	r3, #0
 8010a82:	d009      	beq.n	8010a98 <USBD_LL_Reset+0x5e>
    {
      (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8010a84:	687b      	ldr	r3, [r7, #4]
 8010a86:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8010a8a:	685b      	ldr	r3, [r3, #4]
 8010a8c:	687a      	ldr	r2, [r7, #4]
 8010a8e:	6852      	ldr	r2, [r2, #4]
 8010a90:	b2d2      	uxtb	r2, r2
 8010a92:	4611      	mov	r1, r2
 8010a94:	6878      	ldr	r0, [r7, #4]
 8010a96:	4798      	blx	r3
    }
  }

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8010a98:	2340      	movs	r3, #64	; 0x40
 8010a9a:	2200      	movs	r2, #0
 8010a9c:	2100      	movs	r1, #0
 8010a9e:	6878      	ldr	r0, [r7, #4]
 8010aa0:	f001 fad3 	bl	801204a <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8010aa4:	687b      	ldr	r3, [r7, #4]
 8010aa6:	2201      	movs	r2, #1
 8010aa8:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8010aac:	687b      	ldr	r3, [r7, #4]
 8010aae:	2240      	movs	r2, #64	; 0x40
 8010ab0:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8010ab4:	2340      	movs	r3, #64	; 0x40
 8010ab6:	2200      	movs	r2, #0
 8010ab8:	2180      	movs	r1, #128	; 0x80
 8010aba:	6878      	ldr	r0, [r7, #4]
 8010abc:	f001 fac5 	bl	801204a <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8010ac0:	687b      	ldr	r3, [r7, #4]
 8010ac2:	2201      	movs	r2, #1
 8010ac4:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8010ac6:	687b      	ldr	r3, [r7, #4]
 8010ac8:	2240      	movs	r2, #64	; 0x40
 8010aca:	621a      	str	r2, [r3, #32]

  return USBD_OK;
 8010acc:	2300      	movs	r3, #0
}
 8010ace:	4618      	mov	r0, r3
 8010ad0:	3708      	adds	r7, #8
 8010ad2:	46bd      	mov	sp, r7
 8010ad4:	bd80      	pop	{r7, pc}

08010ad6 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8010ad6:	b480      	push	{r7}
 8010ad8:	b083      	sub	sp, #12
 8010ada:	af00      	add	r7, sp, #0
 8010adc:	6078      	str	r0, [r7, #4]
 8010ade:	460b      	mov	r3, r1
 8010ae0:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8010ae2:	687b      	ldr	r3, [r7, #4]
 8010ae4:	78fa      	ldrb	r2, [r7, #3]
 8010ae6:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8010ae8:	2300      	movs	r3, #0
}
 8010aea:	4618      	mov	r0, r3
 8010aec:	370c      	adds	r7, #12
 8010aee:	46bd      	mov	sp, r7
 8010af0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010af4:	4770      	bx	lr

08010af6 <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8010af6:	b480      	push	{r7}
 8010af8:	b083      	sub	sp, #12
 8010afa:	af00      	add	r7, sp, #0
 8010afc:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 8010afe:	687b      	ldr	r3, [r7, #4]
 8010b00:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8010b04:	b2da      	uxtb	r2, r3
 8010b06:	687b      	ldr	r3, [r7, #4]
 8010b08:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 8010b0c:	687b      	ldr	r3, [r7, #4]
 8010b0e:	2204      	movs	r2, #4
 8010b10:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 8010b14:	2300      	movs	r3, #0
}
 8010b16:	4618      	mov	r0, r3
 8010b18:	370c      	adds	r7, #12
 8010b1a:	46bd      	mov	sp, r7
 8010b1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010b20:	4770      	bx	lr

08010b22 <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8010b22:	b480      	push	{r7}
 8010b24:	b083      	sub	sp, #12
 8010b26:	af00      	add	r7, sp, #0
 8010b28:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8010b2a:	687b      	ldr	r3, [r7, #4]
 8010b2c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8010b30:	b2db      	uxtb	r3, r3
 8010b32:	2b04      	cmp	r3, #4
 8010b34:	d106      	bne.n	8010b44 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 8010b36:	687b      	ldr	r3, [r7, #4]
 8010b38:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 8010b3c:	b2da      	uxtb	r2, r3
 8010b3e:	687b      	ldr	r3, [r7, #4]
 8010b40:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 8010b44:	2300      	movs	r3, #0
}
 8010b46:	4618      	mov	r0, r3
 8010b48:	370c      	adds	r7, #12
 8010b4a:	46bd      	mov	sp, r7
 8010b4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010b50:	4770      	bx	lr

08010b52 <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8010b52:	b580      	push	{r7, lr}
 8010b54:	b082      	sub	sp, #8
 8010b56:	af00      	add	r7, sp, #0
 8010b58:	6078      	str	r0, [r7, #4]
  if (pdev->pClass == NULL)
 8010b5a:	687b      	ldr	r3, [r7, #4]
 8010b5c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8010b60:	2b00      	cmp	r3, #0
 8010b62:	d101      	bne.n	8010b68 <USBD_LL_SOF+0x16>
  {
    return USBD_FAIL;
 8010b64:	2303      	movs	r3, #3
 8010b66:	e012      	b.n	8010b8e <USBD_LL_SOF+0x3c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8010b68:	687b      	ldr	r3, [r7, #4]
 8010b6a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8010b6e:	b2db      	uxtb	r3, r3
 8010b70:	2b03      	cmp	r3, #3
 8010b72:	d10b      	bne.n	8010b8c <USBD_LL_SOF+0x3a>
  {
    if (pdev->pClass->SOF != NULL)
 8010b74:	687b      	ldr	r3, [r7, #4]
 8010b76:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8010b7a:	69db      	ldr	r3, [r3, #28]
 8010b7c:	2b00      	cmp	r3, #0
 8010b7e:	d005      	beq.n	8010b8c <USBD_LL_SOF+0x3a>
    {
      (void)pdev->pClass->SOF(pdev);
 8010b80:	687b      	ldr	r3, [r7, #4]
 8010b82:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8010b86:	69db      	ldr	r3, [r3, #28]
 8010b88:	6878      	ldr	r0, [r7, #4]
 8010b8a:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8010b8c:	2300      	movs	r3, #0
}
 8010b8e:	4618      	mov	r0, r3
 8010b90:	3708      	adds	r7, #8
 8010b92:	46bd      	mov	sp, r7
 8010b94:	bd80      	pop	{r7, pc}

08010b96 <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 8010b96:	b580      	push	{r7, lr}
 8010b98:	b082      	sub	sp, #8
 8010b9a:	af00      	add	r7, sp, #0
 8010b9c:	6078      	str	r0, [r7, #4]
 8010b9e:	460b      	mov	r3, r1
 8010ba0:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass == NULL)
 8010ba2:	687b      	ldr	r3, [r7, #4]
 8010ba4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8010ba8:	2b00      	cmp	r3, #0
 8010baa:	d101      	bne.n	8010bb0 <USBD_LL_IsoINIncomplete+0x1a>
  {
    return USBD_FAIL;
 8010bac:	2303      	movs	r3, #3
 8010bae:	e014      	b.n	8010bda <USBD_LL_IsoINIncomplete+0x44>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8010bb0:	687b      	ldr	r3, [r7, #4]
 8010bb2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8010bb6:	b2db      	uxtb	r3, r3
 8010bb8:	2b03      	cmp	r3, #3
 8010bba:	d10d      	bne.n	8010bd8 <USBD_LL_IsoINIncomplete+0x42>
  {
    if (pdev->pClass->IsoINIncomplete != NULL)
 8010bbc:	687b      	ldr	r3, [r7, #4]
 8010bbe:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8010bc2:	6a1b      	ldr	r3, [r3, #32]
 8010bc4:	2b00      	cmp	r3, #0
 8010bc6:	d007      	beq.n	8010bd8 <USBD_LL_IsoINIncomplete+0x42>
    {
      (void)pdev->pClass->IsoINIncomplete(pdev, epnum);
 8010bc8:	687b      	ldr	r3, [r7, #4]
 8010bca:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8010bce:	6a1b      	ldr	r3, [r3, #32]
 8010bd0:	78fa      	ldrb	r2, [r7, #3]
 8010bd2:	4611      	mov	r1, r2
 8010bd4:	6878      	ldr	r0, [r7, #4]
 8010bd6:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8010bd8:	2300      	movs	r3, #0
}
 8010bda:	4618      	mov	r0, r3
 8010bdc:	3708      	adds	r7, #8
 8010bde:	46bd      	mov	sp, r7
 8010be0:	bd80      	pop	{r7, pc}

08010be2 <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 8010be2:	b580      	push	{r7, lr}
 8010be4:	b082      	sub	sp, #8
 8010be6:	af00      	add	r7, sp, #0
 8010be8:	6078      	str	r0, [r7, #4]
 8010bea:	460b      	mov	r3, r1
 8010bec:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass == NULL)
 8010bee:	687b      	ldr	r3, [r7, #4]
 8010bf0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8010bf4:	2b00      	cmp	r3, #0
 8010bf6:	d101      	bne.n	8010bfc <USBD_LL_IsoOUTIncomplete+0x1a>
  {
    return USBD_FAIL;
 8010bf8:	2303      	movs	r3, #3
 8010bfa:	e014      	b.n	8010c26 <USBD_LL_IsoOUTIncomplete+0x44>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8010bfc:	687b      	ldr	r3, [r7, #4]
 8010bfe:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8010c02:	b2db      	uxtb	r3, r3
 8010c04:	2b03      	cmp	r3, #3
 8010c06:	d10d      	bne.n	8010c24 <USBD_LL_IsoOUTIncomplete+0x42>
  {
    if (pdev->pClass->IsoOUTIncomplete != NULL)
 8010c08:	687b      	ldr	r3, [r7, #4]
 8010c0a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8010c0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010c10:	2b00      	cmp	r3, #0
 8010c12:	d007      	beq.n	8010c24 <USBD_LL_IsoOUTIncomplete+0x42>
    {
      (void)pdev->pClass->IsoOUTIncomplete(pdev, epnum);
 8010c14:	687b      	ldr	r3, [r7, #4]
 8010c16:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8010c1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010c1c:	78fa      	ldrb	r2, [r7, #3]
 8010c1e:	4611      	mov	r1, r2
 8010c20:	6878      	ldr	r0, [r7, #4]
 8010c22:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8010c24:	2300      	movs	r3, #0
}
 8010c26:	4618      	mov	r0, r3
 8010c28:	3708      	adds	r7, #8
 8010c2a:	46bd      	mov	sp, r7
 8010c2c:	bd80      	pop	{r7, pc}

08010c2e <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 8010c2e:	b480      	push	{r7}
 8010c30:	b083      	sub	sp, #12
 8010c32:	af00      	add	r7, sp, #0
 8010c34:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8010c36:	2300      	movs	r3, #0
}
 8010c38:	4618      	mov	r0, r3
 8010c3a:	370c      	adds	r7, #12
 8010c3c:	46bd      	mov	sp, r7
 8010c3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010c42:	4770      	bx	lr

08010c44 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 8010c44:	b580      	push	{r7, lr}
 8010c46:	b082      	sub	sp, #8
 8010c48:	af00      	add	r7, sp, #0
 8010c4a:	6078      	str	r0, [r7, #4]
  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8010c4c:	687b      	ldr	r3, [r7, #4]
 8010c4e:	2201      	movs	r2, #1
 8010c50:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  if (pdev->pClass != NULL)
 8010c54:	687b      	ldr	r3, [r7, #4]
 8010c56:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8010c5a:	2b00      	cmp	r3, #0
 8010c5c:	d009      	beq.n	8010c72 <USBD_LL_DevDisconnected+0x2e>
  {
    (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8010c5e:	687b      	ldr	r3, [r7, #4]
 8010c60:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8010c64:	685b      	ldr	r3, [r3, #4]
 8010c66:	687a      	ldr	r2, [r7, #4]
 8010c68:	6852      	ldr	r2, [r2, #4]
 8010c6a:	b2d2      	uxtb	r2, r2
 8010c6c:	4611      	mov	r1, r2
 8010c6e:	6878      	ldr	r0, [r7, #4]
 8010c70:	4798      	blx	r3
  }

  return USBD_OK;
 8010c72:	2300      	movs	r3, #0
}
 8010c74:	4618      	mov	r0, r3
 8010c76:	3708      	adds	r7, #8
 8010c78:	46bd      	mov	sp, r7
 8010c7a:	bd80      	pop	{r7, pc}

08010c7c <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 8010c7c:	b480      	push	{r7}
 8010c7e:	b087      	sub	sp, #28
 8010c80:	af00      	add	r7, sp, #0
 8010c82:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 8010c84:	687b      	ldr	r3, [r7, #4]
 8010c86:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 8010c88:	697b      	ldr	r3, [r7, #20]
 8010c8a:	781b      	ldrb	r3, [r3, #0]
 8010c8c:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 8010c8e:	697b      	ldr	r3, [r7, #20]
 8010c90:	3301      	adds	r3, #1
 8010c92:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 8010c94:	697b      	ldr	r3, [r7, #20]
 8010c96:	781b      	ldrb	r3, [r3, #0]
 8010c98:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 8010c9a:	8a3b      	ldrh	r3, [r7, #16]
 8010c9c:	021b      	lsls	r3, r3, #8
 8010c9e:	b21a      	sxth	r2, r3
 8010ca0:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8010ca4:	4313      	orrs	r3, r2
 8010ca6:	b21b      	sxth	r3, r3
 8010ca8:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 8010caa:	89fb      	ldrh	r3, [r7, #14]
}
 8010cac:	4618      	mov	r0, r3
 8010cae:	371c      	adds	r7, #28
 8010cb0:	46bd      	mov	sp, r7
 8010cb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010cb6:	4770      	bx	lr

08010cb8 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8010cb8:	b580      	push	{r7, lr}
 8010cba:	b084      	sub	sp, #16
 8010cbc:	af00      	add	r7, sp, #0
 8010cbe:	6078      	str	r0, [r7, #4]
 8010cc0:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8010cc2:	2300      	movs	r3, #0
 8010cc4:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8010cc6:	683b      	ldr	r3, [r7, #0]
 8010cc8:	781b      	ldrb	r3, [r3, #0]
 8010cca:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8010cce:	2b40      	cmp	r3, #64	; 0x40
 8010cd0:	d005      	beq.n	8010cde <USBD_StdDevReq+0x26>
 8010cd2:	2b40      	cmp	r3, #64	; 0x40
 8010cd4:	d853      	bhi.n	8010d7e <USBD_StdDevReq+0xc6>
 8010cd6:	2b00      	cmp	r3, #0
 8010cd8:	d00b      	beq.n	8010cf2 <USBD_StdDevReq+0x3a>
 8010cda:	2b20      	cmp	r3, #32
 8010cdc:	d14f      	bne.n	8010d7e <USBD_StdDevReq+0xc6>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8010cde:	687b      	ldr	r3, [r7, #4]
 8010ce0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8010ce4:	689b      	ldr	r3, [r3, #8]
 8010ce6:	6839      	ldr	r1, [r7, #0]
 8010ce8:	6878      	ldr	r0, [r7, #4]
 8010cea:	4798      	blx	r3
 8010cec:	4603      	mov	r3, r0
 8010cee:	73fb      	strb	r3, [r7, #15]
      break;
 8010cf0:	e04a      	b.n	8010d88 <USBD_StdDevReq+0xd0>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8010cf2:	683b      	ldr	r3, [r7, #0]
 8010cf4:	785b      	ldrb	r3, [r3, #1]
 8010cf6:	2b09      	cmp	r3, #9
 8010cf8:	d83b      	bhi.n	8010d72 <USBD_StdDevReq+0xba>
 8010cfa:	a201      	add	r2, pc, #4	; (adr r2, 8010d00 <USBD_StdDevReq+0x48>)
 8010cfc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010d00:	08010d55 	.word	0x08010d55
 8010d04:	08010d69 	.word	0x08010d69
 8010d08:	08010d73 	.word	0x08010d73
 8010d0c:	08010d5f 	.word	0x08010d5f
 8010d10:	08010d73 	.word	0x08010d73
 8010d14:	08010d33 	.word	0x08010d33
 8010d18:	08010d29 	.word	0x08010d29
 8010d1c:	08010d73 	.word	0x08010d73
 8010d20:	08010d4b 	.word	0x08010d4b
 8010d24:	08010d3d 	.word	0x08010d3d
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8010d28:	6839      	ldr	r1, [r7, #0]
 8010d2a:	6878      	ldr	r0, [r7, #4]
 8010d2c:	f000 f9de 	bl	80110ec <USBD_GetDescriptor>
          break;
 8010d30:	e024      	b.n	8010d7c <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8010d32:	6839      	ldr	r1, [r7, #0]
 8010d34:	6878      	ldr	r0, [r7, #4]
 8010d36:	f000 fb43 	bl	80113c0 <USBD_SetAddress>
          break;
 8010d3a:	e01f      	b.n	8010d7c <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 8010d3c:	6839      	ldr	r1, [r7, #0]
 8010d3e:	6878      	ldr	r0, [r7, #4]
 8010d40:	f000 fb82 	bl	8011448 <USBD_SetConfig>
 8010d44:	4603      	mov	r3, r0
 8010d46:	73fb      	strb	r3, [r7, #15]
          break;
 8010d48:	e018      	b.n	8010d7c <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8010d4a:	6839      	ldr	r1, [r7, #0]
 8010d4c:	6878      	ldr	r0, [r7, #4]
 8010d4e:	f000 fc21 	bl	8011594 <USBD_GetConfig>
          break;
 8010d52:	e013      	b.n	8010d7c <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8010d54:	6839      	ldr	r1, [r7, #0]
 8010d56:	6878      	ldr	r0, [r7, #4]
 8010d58:	f000 fc52 	bl	8011600 <USBD_GetStatus>
          break;
 8010d5c:	e00e      	b.n	8010d7c <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8010d5e:	6839      	ldr	r1, [r7, #0]
 8010d60:	6878      	ldr	r0, [r7, #4]
 8010d62:	f000 fc81 	bl	8011668 <USBD_SetFeature>
          break;
 8010d66:	e009      	b.n	8010d7c <USBD_StdDevReq+0xc4>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8010d68:	6839      	ldr	r1, [r7, #0]
 8010d6a:	6878      	ldr	r0, [r7, #4]
 8010d6c:	f000 fc90 	bl	8011690 <USBD_ClrFeature>
          break;
 8010d70:	e004      	b.n	8010d7c <USBD_StdDevReq+0xc4>

        default:
          USBD_CtlError(pdev, req);
 8010d72:	6839      	ldr	r1, [r7, #0]
 8010d74:	6878      	ldr	r0, [r7, #4]
 8010d76:	f000 fce7 	bl	8011748 <USBD_CtlError>
          break;
 8010d7a:	bf00      	nop
      }
      break;
 8010d7c:	e004      	b.n	8010d88 <USBD_StdDevReq+0xd0>

    default:
      USBD_CtlError(pdev, req);
 8010d7e:	6839      	ldr	r1, [r7, #0]
 8010d80:	6878      	ldr	r0, [r7, #4]
 8010d82:	f000 fce1 	bl	8011748 <USBD_CtlError>
      break;
 8010d86:	bf00      	nop
  }

  return ret;
 8010d88:	7bfb      	ldrb	r3, [r7, #15]
}
 8010d8a:	4618      	mov	r0, r3
 8010d8c:	3710      	adds	r7, #16
 8010d8e:	46bd      	mov	sp, r7
 8010d90:	bd80      	pop	{r7, pc}
 8010d92:	bf00      	nop

08010d94 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8010d94:	b580      	push	{r7, lr}
 8010d96:	b084      	sub	sp, #16
 8010d98:	af00      	add	r7, sp, #0
 8010d9a:	6078      	str	r0, [r7, #4]
 8010d9c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8010d9e:	2300      	movs	r3, #0
 8010da0:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8010da2:	683b      	ldr	r3, [r7, #0]
 8010da4:	781b      	ldrb	r3, [r3, #0]
 8010da6:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8010daa:	2b40      	cmp	r3, #64	; 0x40
 8010dac:	d005      	beq.n	8010dba <USBD_StdItfReq+0x26>
 8010dae:	2b40      	cmp	r3, #64	; 0x40
 8010db0:	d82f      	bhi.n	8010e12 <USBD_StdItfReq+0x7e>
 8010db2:	2b00      	cmp	r3, #0
 8010db4:	d001      	beq.n	8010dba <USBD_StdItfReq+0x26>
 8010db6:	2b20      	cmp	r3, #32
 8010db8:	d12b      	bne.n	8010e12 <USBD_StdItfReq+0x7e>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8010dba:	687b      	ldr	r3, [r7, #4]
 8010dbc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8010dc0:	b2db      	uxtb	r3, r3
 8010dc2:	3b01      	subs	r3, #1
 8010dc4:	2b02      	cmp	r3, #2
 8010dc6:	d81d      	bhi.n	8010e04 <USBD_StdItfReq+0x70>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8010dc8:	683b      	ldr	r3, [r7, #0]
 8010dca:	889b      	ldrh	r3, [r3, #4]
 8010dcc:	b2db      	uxtb	r3, r3
 8010dce:	2b01      	cmp	r3, #1
 8010dd0:	d813      	bhi.n	8010dfa <USBD_StdItfReq+0x66>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8010dd2:	687b      	ldr	r3, [r7, #4]
 8010dd4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8010dd8:	689b      	ldr	r3, [r3, #8]
 8010dda:	6839      	ldr	r1, [r7, #0]
 8010ddc:	6878      	ldr	r0, [r7, #4]
 8010dde:	4798      	blx	r3
 8010de0:	4603      	mov	r3, r0
 8010de2:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8010de4:	683b      	ldr	r3, [r7, #0]
 8010de6:	88db      	ldrh	r3, [r3, #6]
 8010de8:	2b00      	cmp	r3, #0
 8010dea:	d110      	bne.n	8010e0e <USBD_StdItfReq+0x7a>
 8010dec:	7bfb      	ldrb	r3, [r7, #15]
 8010dee:	2b00      	cmp	r3, #0
 8010df0:	d10d      	bne.n	8010e0e <USBD_StdItfReq+0x7a>
            {
              (void)USBD_CtlSendStatus(pdev);
 8010df2:	6878      	ldr	r0, [r7, #4]
 8010df4:	f000 fd73 	bl	80118de <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8010df8:	e009      	b.n	8010e0e <USBD_StdItfReq+0x7a>
            USBD_CtlError(pdev, req);
 8010dfa:	6839      	ldr	r1, [r7, #0]
 8010dfc:	6878      	ldr	r0, [r7, #4]
 8010dfe:	f000 fca3 	bl	8011748 <USBD_CtlError>
          break;
 8010e02:	e004      	b.n	8010e0e <USBD_StdItfReq+0x7a>

        default:
          USBD_CtlError(pdev, req);
 8010e04:	6839      	ldr	r1, [r7, #0]
 8010e06:	6878      	ldr	r0, [r7, #4]
 8010e08:	f000 fc9e 	bl	8011748 <USBD_CtlError>
          break;
 8010e0c:	e000      	b.n	8010e10 <USBD_StdItfReq+0x7c>
          break;
 8010e0e:	bf00      	nop
      }
      break;
 8010e10:	e004      	b.n	8010e1c <USBD_StdItfReq+0x88>

    default:
      USBD_CtlError(pdev, req);
 8010e12:	6839      	ldr	r1, [r7, #0]
 8010e14:	6878      	ldr	r0, [r7, #4]
 8010e16:	f000 fc97 	bl	8011748 <USBD_CtlError>
      break;
 8010e1a:	bf00      	nop
  }

  return ret;
 8010e1c:	7bfb      	ldrb	r3, [r7, #15]
}
 8010e1e:	4618      	mov	r0, r3
 8010e20:	3710      	adds	r7, #16
 8010e22:	46bd      	mov	sp, r7
 8010e24:	bd80      	pop	{r7, pc}

08010e26 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8010e26:	b580      	push	{r7, lr}
 8010e28:	b084      	sub	sp, #16
 8010e2a:	af00      	add	r7, sp, #0
 8010e2c:	6078      	str	r0, [r7, #4]
 8010e2e:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 8010e30:	2300      	movs	r3, #0
 8010e32:	73fb      	strb	r3, [r7, #15]
  ep_addr = LOBYTE(req->wIndex);
 8010e34:	683b      	ldr	r3, [r7, #0]
 8010e36:	889b      	ldrh	r3, [r3, #4]
 8010e38:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8010e3a:	683b      	ldr	r3, [r7, #0]
 8010e3c:	781b      	ldrb	r3, [r3, #0]
 8010e3e:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8010e42:	2b40      	cmp	r3, #64	; 0x40
 8010e44:	d007      	beq.n	8010e56 <USBD_StdEPReq+0x30>
 8010e46:	2b40      	cmp	r3, #64	; 0x40
 8010e48:	f200 8145 	bhi.w	80110d6 <USBD_StdEPReq+0x2b0>
 8010e4c:	2b00      	cmp	r3, #0
 8010e4e:	d00c      	beq.n	8010e6a <USBD_StdEPReq+0x44>
 8010e50:	2b20      	cmp	r3, #32
 8010e52:	f040 8140 	bne.w	80110d6 <USBD_StdEPReq+0x2b0>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8010e56:	687b      	ldr	r3, [r7, #4]
 8010e58:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8010e5c:	689b      	ldr	r3, [r3, #8]
 8010e5e:	6839      	ldr	r1, [r7, #0]
 8010e60:	6878      	ldr	r0, [r7, #4]
 8010e62:	4798      	blx	r3
 8010e64:	4603      	mov	r3, r0
 8010e66:	73fb      	strb	r3, [r7, #15]
      break;
 8010e68:	e13a      	b.n	80110e0 <USBD_StdEPReq+0x2ba>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8010e6a:	683b      	ldr	r3, [r7, #0]
 8010e6c:	785b      	ldrb	r3, [r3, #1]
 8010e6e:	2b03      	cmp	r3, #3
 8010e70:	d007      	beq.n	8010e82 <USBD_StdEPReq+0x5c>
 8010e72:	2b03      	cmp	r3, #3
 8010e74:	f300 8129 	bgt.w	80110ca <USBD_StdEPReq+0x2a4>
 8010e78:	2b00      	cmp	r3, #0
 8010e7a:	d07f      	beq.n	8010f7c <USBD_StdEPReq+0x156>
 8010e7c:	2b01      	cmp	r3, #1
 8010e7e:	d03c      	beq.n	8010efa <USBD_StdEPReq+0xd4>
 8010e80:	e123      	b.n	80110ca <USBD_StdEPReq+0x2a4>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8010e82:	687b      	ldr	r3, [r7, #4]
 8010e84:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8010e88:	b2db      	uxtb	r3, r3
 8010e8a:	2b02      	cmp	r3, #2
 8010e8c:	d002      	beq.n	8010e94 <USBD_StdEPReq+0x6e>
 8010e8e:	2b03      	cmp	r3, #3
 8010e90:	d016      	beq.n	8010ec0 <USBD_StdEPReq+0x9a>
 8010e92:	e02c      	b.n	8010eee <USBD_StdEPReq+0xc8>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8010e94:	7bbb      	ldrb	r3, [r7, #14]
 8010e96:	2b00      	cmp	r3, #0
 8010e98:	d00d      	beq.n	8010eb6 <USBD_StdEPReq+0x90>
 8010e9a:	7bbb      	ldrb	r3, [r7, #14]
 8010e9c:	2b80      	cmp	r3, #128	; 0x80
 8010e9e:	d00a      	beq.n	8010eb6 <USBD_StdEPReq+0x90>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8010ea0:	7bbb      	ldrb	r3, [r7, #14]
 8010ea2:	4619      	mov	r1, r3
 8010ea4:	6878      	ldr	r0, [r7, #4]
 8010ea6:	f001 f915 	bl	80120d4 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8010eaa:	2180      	movs	r1, #128	; 0x80
 8010eac:	6878      	ldr	r0, [r7, #4]
 8010eae:	f001 f911 	bl	80120d4 <USBD_LL_StallEP>
 8010eb2:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8010eb4:	e020      	b.n	8010ef8 <USBD_StdEPReq+0xd2>
                USBD_CtlError(pdev, req);
 8010eb6:	6839      	ldr	r1, [r7, #0]
 8010eb8:	6878      	ldr	r0, [r7, #4]
 8010eba:	f000 fc45 	bl	8011748 <USBD_CtlError>
              break;
 8010ebe:	e01b      	b.n	8010ef8 <USBD_StdEPReq+0xd2>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8010ec0:	683b      	ldr	r3, [r7, #0]
 8010ec2:	885b      	ldrh	r3, [r3, #2]
 8010ec4:	2b00      	cmp	r3, #0
 8010ec6:	d10e      	bne.n	8010ee6 <USBD_StdEPReq+0xc0>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8010ec8:	7bbb      	ldrb	r3, [r7, #14]
 8010eca:	2b00      	cmp	r3, #0
 8010ecc:	d00b      	beq.n	8010ee6 <USBD_StdEPReq+0xc0>
 8010ece:	7bbb      	ldrb	r3, [r7, #14]
 8010ed0:	2b80      	cmp	r3, #128	; 0x80
 8010ed2:	d008      	beq.n	8010ee6 <USBD_StdEPReq+0xc0>
 8010ed4:	683b      	ldr	r3, [r7, #0]
 8010ed6:	88db      	ldrh	r3, [r3, #6]
 8010ed8:	2b00      	cmp	r3, #0
 8010eda:	d104      	bne.n	8010ee6 <USBD_StdEPReq+0xc0>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 8010edc:	7bbb      	ldrb	r3, [r7, #14]
 8010ede:	4619      	mov	r1, r3
 8010ee0:	6878      	ldr	r0, [r7, #4]
 8010ee2:	f001 f8f7 	bl	80120d4 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 8010ee6:	6878      	ldr	r0, [r7, #4]
 8010ee8:	f000 fcf9 	bl	80118de <USBD_CtlSendStatus>

              break;
 8010eec:	e004      	b.n	8010ef8 <USBD_StdEPReq+0xd2>

            default:
              USBD_CtlError(pdev, req);
 8010eee:	6839      	ldr	r1, [r7, #0]
 8010ef0:	6878      	ldr	r0, [r7, #4]
 8010ef2:	f000 fc29 	bl	8011748 <USBD_CtlError>
              break;
 8010ef6:	bf00      	nop
          }
          break;
 8010ef8:	e0ec      	b.n	80110d4 <USBD_StdEPReq+0x2ae>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8010efa:	687b      	ldr	r3, [r7, #4]
 8010efc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8010f00:	b2db      	uxtb	r3, r3
 8010f02:	2b02      	cmp	r3, #2
 8010f04:	d002      	beq.n	8010f0c <USBD_StdEPReq+0xe6>
 8010f06:	2b03      	cmp	r3, #3
 8010f08:	d016      	beq.n	8010f38 <USBD_StdEPReq+0x112>
 8010f0a:	e030      	b.n	8010f6e <USBD_StdEPReq+0x148>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8010f0c:	7bbb      	ldrb	r3, [r7, #14]
 8010f0e:	2b00      	cmp	r3, #0
 8010f10:	d00d      	beq.n	8010f2e <USBD_StdEPReq+0x108>
 8010f12:	7bbb      	ldrb	r3, [r7, #14]
 8010f14:	2b80      	cmp	r3, #128	; 0x80
 8010f16:	d00a      	beq.n	8010f2e <USBD_StdEPReq+0x108>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8010f18:	7bbb      	ldrb	r3, [r7, #14]
 8010f1a:	4619      	mov	r1, r3
 8010f1c:	6878      	ldr	r0, [r7, #4]
 8010f1e:	f001 f8d9 	bl	80120d4 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8010f22:	2180      	movs	r1, #128	; 0x80
 8010f24:	6878      	ldr	r0, [r7, #4]
 8010f26:	f001 f8d5 	bl	80120d4 <USBD_LL_StallEP>
 8010f2a:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8010f2c:	e025      	b.n	8010f7a <USBD_StdEPReq+0x154>
                USBD_CtlError(pdev, req);
 8010f2e:	6839      	ldr	r1, [r7, #0]
 8010f30:	6878      	ldr	r0, [r7, #4]
 8010f32:	f000 fc09 	bl	8011748 <USBD_CtlError>
              break;
 8010f36:	e020      	b.n	8010f7a <USBD_StdEPReq+0x154>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8010f38:	683b      	ldr	r3, [r7, #0]
 8010f3a:	885b      	ldrh	r3, [r3, #2]
 8010f3c:	2b00      	cmp	r3, #0
 8010f3e:	d11b      	bne.n	8010f78 <USBD_StdEPReq+0x152>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8010f40:	7bbb      	ldrb	r3, [r7, #14]
 8010f42:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8010f46:	2b00      	cmp	r3, #0
 8010f48:	d004      	beq.n	8010f54 <USBD_StdEPReq+0x12e>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 8010f4a:	7bbb      	ldrb	r3, [r7, #14]
 8010f4c:	4619      	mov	r1, r3
 8010f4e:	6878      	ldr	r0, [r7, #4]
 8010f50:	f001 f8df 	bl	8012112 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 8010f54:	6878      	ldr	r0, [r7, #4]
 8010f56:	f000 fcc2 	bl	80118de <USBD_CtlSendStatus>
                ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8010f5a:	687b      	ldr	r3, [r7, #4]
 8010f5c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8010f60:	689b      	ldr	r3, [r3, #8]
 8010f62:	6839      	ldr	r1, [r7, #0]
 8010f64:	6878      	ldr	r0, [r7, #4]
 8010f66:	4798      	blx	r3
 8010f68:	4603      	mov	r3, r0
 8010f6a:	73fb      	strb	r3, [r7, #15]
              }
              break;
 8010f6c:	e004      	b.n	8010f78 <USBD_StdEPReq+0x152>

            default:
              USBD_CtlError(pdev, req);
 8010f6e:	6839      	ldr	r1, [r7, #0]
 8010f70:	6878      	ldr	r0, [r7, #4]
 8010f72:	f000 fbe9 	bl	8011748 <USBD_CtlError>
              break;
 8010f76:	e000      	b.n	8010f7a <USBD_StdEPReq+0x154>
              break;
 8010f78:	bf00      	nop
          }
          break;
 8010f7a:	e0ab      	b.n	80110d4 <USBD_StdEPReq+0x2ae>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8010f7c:	687b      	ldr	r3, [r7, #4]
 8010f7e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8010f82:	b2db      	uxtb	r3, r3
 8010f84:	2b02      	cmp	r3, #2
 8010f86:	d002      	beq.n	8010f8e <USBD_StdEPReq+0x168>
 8010f88:	2b03      	cmp	r3, #3
 8010f8a:	d032      	beq.n	8010ff2 <USBD_StdEPReq+0x1cc>
 8010f8c:	e097      	b.n	80110be <USBD_StdEPReq+0x298>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8010f8e:	7bbb      	ldrb	r3, [r7, #14]
 8010f90:	2b00      	cmp	r3, #0
 8010f92:	d007      	beq.n	8010fa4 <USBD_StdEPReq+0x17e>
 8010f94:	7bbb      	ldrb	r3, [r7, #14]
 8010f96:	2b80      	cmp	r3, #128	; 0x80
 8010f98:	d004      	beq.n	8010fa4 <USBD_StdEPReq+0x17e>
              {
                USBD_CtlError(pdev, req);
 8010f9a:	6839      	ldr	r1, [r7, #0]
 8010f9c:	6878      	ldr	r0, [r7, #4]
 8010f9e:	f000 fbd3 	bl	8011748 <USBD_CtlError>
                break;
 8010fa2:	e091      	b.n	80110c8 <USBD_StdEPReq+0x2a2>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8010fa4:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8010fa8:	2b00      	cmp	r3, #0
 8010faa:	da0b      	bge.n	8010fc4 <USBD_StdEPReq+0x19e>
 8010fac:	7bbb      	ldrb	r3, [r7, #14]
 8010fae:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8010fb2:	4613      	mov	r3, r2
 8010fb4:	009b      	lsls	r3, r3, #2
 8010fb6:	4413      	add	r3, r2
 8010fb8:	009b      	lsls	r3, r3, #2
 8010fba:	3310      	adds	r3, #16
 8010fbc:	687a      	ldr	r2, [r7, #4]
 8010fbe:	4413      	add	r3, r2
 8010fc0:	3304      	adds	r3, #4
 8010fc2:	e00b      	b.n	8010fdc <USBD_StdEPReq+0x1b6>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8010fc4:	7bbb      	ldrb	r3, [r7, #14]
 8010fc6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8010fca:	4613      	mov	r3, r2
 8010fcc:	009b      	lsls	r3, r3, #2
 8010fce:	4413      	add	r3, r2
 8010fd0:	009b      	lsls	r3, r3, #2
 8010fd2:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8010fd6:	687a      	ldr	r2, [r7, #4]
 8010fd8:	4413      	add	r3, r2
 8010fda:	3304      	adds	r3, #4
 8010fdc:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8010fde:	68bb      	ldr	r3, [r7, #8]
 8010fe0:	2200      	movs	r2, #0
 8010fe2:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8010fe4:	68bb      	ldr	r3, [r7, #8]
 8010fe6:	2202      	movs	r2, #2
 8010fe8:	4619      	mov	r1, r3
 8010fea:	6878      	ldr	r0, [r7, #4]
 8010fec:	f000 fc1d 	bl	801182a <USBD_CtlSendData>
              break;
 8010ff0:	e06a      	b.n	80110c8 <USBD_StdEPReq+0x2a2>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8010ff2:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8010ff6:	2b00      	cmp	r3, #0
 8010ff8:	da11      	bge.n	801101e <USBD_StdEPReq+0x1f8>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8010ffa:	7bbb      	ldrb	r3, [r7, #14]
 8010ffc:	f003 020f 	and.w	r2, r3, #15
 8011000:	6879      	ldr	r1, [r7, #4]
 8011002:	4613      	mov	r3, r2
 8011004:	009b      	lsls	r3, r3, #2
 8011006:	4413      	add	r3, r2
 8011008:	009b      	lsls	r3, r3, #2
 801100a:	440b      	add	r3, r1
 801100c:	3324      	adds	r3, #36	; 0x24
 801100e:	881b      	ldrh	r3, [r3, #0]
 8011010:	2b00      	cmp	r3, #0
 8011012:	d117      	bne.n	8011044 <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 8011014:	6839      	ldr	r1, [r7, #0]
 8011016:	6878      	ldr	r0, [r7, #4]
 8011018:	f000 fb96 	bl	8011748 <USBD_CtlError>
                  break;
 801101c:	e054      	b.n	80110c8 <USBD_StdEPReq+0x2a2>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 801101e:	7bbb      	ldrb	r3, [r7, #14]
 8011020:	f003 020f 	and.w	r2, r3, #15
 8011024:	6879      	ldr	r1, [r7, #4]
 8011026:	4613      	mov	r3, r2
 8011028:	009b      	lsls	r3, r3, #2
 801102a:	4413      	add	r3, r2
 801102c:	009b      	lsls	r3, r3, #2
 801102e:	440b      	add	r3, r1
 8011030:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8011034:	881b      	ldrh	r3, [r3, #0]
 8011036:	2b00      	cmp	r3, #0
 8011038:	d104      	bne.n	8011044 <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 801103a:	6839      	ldr	r1, [r7, #0]
 801103c:	6878      	ldr	r0, [r7, #4]
 801103e:	f000 fb83 	bl	8011748 <USBD_CtlError>
                  break;
 8011042:	e041      	b.n	80110c8 <USBD_StdEPReq+0x2a2>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8011044:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8011048:	2b00      	cmp	r3, #0
 801104a:	da0b      	bge.n	8011064 <USBD_StdEPReq+0x23e>
 801104c:	7bbb      	ldrb	r3, [r7, #14]
 801104e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8011052:	4613      	mov	r3, r2
 8011054:	009b      	lsls	r3, r3, #2
 8011056:	4413      	add	r3, r2
 8011058:	009b      	lsls	r3, r3, #2
 801105a:	3310      	adds	r3, #16
 801105c:	687a      	ldr	r2, [r7, #4]
 801105e:	4413      	add	r3, r2
 8011060:	3304      	adds	r3, #4
 8011062:	e00b      	b.n	801107c <USBD_StdEPReq+0x256>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8011064:	7bbb      	ldrb	r3, [r7, #14]
 8011066:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 801106a:	4613      	mov	r3, r2
 801106c:	009b      	lsls	r3, r3, #2
 801106e:	4413      	add	r3, r2
 8011070:	009b      	lsls	r3, r3, #2
 8011072:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8011076:	687a      	ldr	r2, [r7, #4]
 8011078:	4413      	add	r3, r2
 801107a:	3304      	adds	r3, #4
 801107c:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 801107e:	7bbb      	ldrb	r3, [r7, #14]
 8011080:	2b00      	cmp	r3, #0
 8011082:	d002      	beq.n	801108a <USBD_StdEPReq+0x264>
 8011084:	7bbb      	ldrb	r3, [r7, #14]
 8011086:	2b80      	cmp	r3, #128	; 0x80
 8011088:	d103      	bne.n	8011092 <USBD_StdEPReq+0x26c>
              {
                pep->status = 0x0000U;
 801108a:	68bb      	ldr	r3, [r7, #8]
 801108c:	2200      	movs	r2, #0
 801108e:	601a      	str	r2, [r3, #0]
 8011090:	e00e      	b.n	80110b0 <USBD_StdEPReq+0x28a>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 8011092:	7bbb      	ldrb	r3, [r7, #14]
 8011094:	4619      	mov	r1, r3
 8011096:	6878      	ldr	r0, [r7, #4]
 8011098:	f001 f85a 	bl	8012150 <USBD_LL_IsStallEP>
 801109c:	4603      	mov	r3, r0
 801109e:	2b00      	cmp	r3, #0
 80110a0:	d003      	beq.n	80110aa <USBD_StdEPReq+0x284>
              {
                pep->status = 0x0001U;
 80110a2:	68bb      	ldr	r3, [r7, #8]
 80110a4:	2201      	movs	r2, #1
 80110a6:	601a      	str	r2, [r3, #0]
 80110a8:	e002      	b.n	80110b0 <USBD_StdEPReq+0x28a>
              }
              else
              {
                pep->status = 0x0000U;
 80110aa:	68bb      	ldr	r3, [r7, #8]
 80110ac:	2200      	movs	r2, #0
 80110ae:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 80110b0:	68bb      	ldr	r3, [r7, #8]
 80110b2:	2202      	movs	r2, #2
 80110b4:	4619      	mov	r1, r3
 80110b6:	6878      	ldr	r0, [r7, #4]
 80110b8:	f000 fbb7 	bl	801182a <USBD_CtlSendData>
              break;
 80110bc:	e004      	b.n	80110c8 <USBD_StdEPReq+0x2a2>

            default:
              USBD_CtlError(pdev, req);
 80110be:	6839      	ldr	r1, [r7, #0]
 80110c0:	6878      	ldr	r0, [r7, #4]
 80110c2:	f000 fb41 	bl	8011748 <USBD_CtlError>
              break;
 80110c6:	bf00      	nop
          }
          break;
 80110c8:	e004      	b.n	80110d4 <USBD_StdEPReq+0x2ae>

        default:
          USBD_CtlError(pdev, req);
 80110ca:	6839      	ldr	r1, [r7, #0]
 80110cc:	6878      	ldr	r0, [r7, #4]
 80110ce:	f000 fb3b 	bl	8011748 <USBD_CtlError>
          break;
 80110d2:	bf00      	nop
      }
      break;
 80110d4:	e004      	b.n	80110e0 <USBD_StdEPReq+0x2ba>

    default:
      USBD_CtlError(pdev, req);
 80110d6:	6839      	ldr	r1, [r7, #0]
 80110d8:	6878      	ldr	r0, [r7, #4]
 80110da:	f000 fb35 	bl	8011748 <USBD_CtlError>
      break;
 80110de:	bf00      	nop
  }

  return ret;
 80110e0:	7bfb      	ldrb	r3, [r7, #15]
}
 80110e2:	4618      	mov	r0, r3
 80110e4:	3710      	adds	r7, #16
 80110e6:	46bd      	mov	sp, r7
 80110e8:	bd80      	pop	{r7, pc}
	...

080110ec <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80110ec:	b580      	push	{r7, lr}
 80110ee:	b084      	sub	sp, #16
 80110f0:	af00      	add	r7, sp, #0
 80110f2:	6078      	str	r0, [r7, #4]
 80110f4:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 80110f6:	2300      	movs	r3, #0
 80110f8:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 80110fa:	2300      	movs	r3, #0
 80110fc:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 80110fe:	2300      	movs	r3, #0
 8011100:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8011102:	683b      	ldr	r3, [r7, #0]
 8011104:	885b      	ldrh	r3, [r3, #2]
 8011106:	0a1b      	lsrs	r3, r3, #8
 8011108:	b29b      	uxth	r3, r3
 801110a:	3b01      	subs	r3, #1
 801110c:	2b06      	cmp	r3, #6
 801110e:	f200 8128 	bhi.w	8011362 <USBD_GetDescriptor+0x276>
 8011112:	a201      	add	r2, pc, #4	; (adr r2, 8011118 <USBD_GetDescriptor+0x2c>)
 8011114:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011118:	08011135 	.word	0x08011135
 801111c:	0801114d 	.word	0x0801114d
 8011120:	0801118d 	.word	0x0801118d
 8011124:	08011363 	.word	0x08011363
 8011128:	08011363 	.word	0x08011363
 801112c:	08011303 	.word	0x08011303
 8011130:	0801132f 	.word	0x0801132f
        err++;
      }
      break;
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8011134:	687b      	ldr	r3, [r7, #4]
 8011136:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 801113a:	681b      	ldr	r3, [r3, #0]
 801113c:	687a      	ldr	r2, [r7, #4]
 801113e:	7c12      	ldrb	r2, [r2, #16]
 8011140:	f107 0108 	add.w	r1, r7, #8
 8011144:	4610      	mov	r0, r2
 8011146:	4798      	blx	r3
 8011148:	60f8      	str	r0, [r7, #12]
      break;
 801114a:	e112      	b.n	8011372 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 801114c:	687b      	ldr	r3, [r7, #4]
 801114e:	7c1b      	ldrb	r3, [r3, #16]
 8011150:	2b00      	cmp	r3, #0
 8011152:	d10d      	bne.n	8011170 <USBD_GetDescriptor+0x84>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 8011154:	687b      	ldr	r3, [r7, #4]
 8011156:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 801115a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801115c:	f107 0208 	add.w	r2, r7, #8
 8011160:	4610      	mov	r0, r2
 8011162:	4798      	blx	r3
 8011164:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8011166:	68fb      	ldr	r3, [r7, #12]
 8011168:	3301      	adds	r3, #1
 801116a:	2202      	movs	r2, #2
 801116c:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 801116e:	e100      	b.n	8011372 <USBD_GetDescriptor+0x286>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 8011170:	687b      	ldr	r3, [r7, #4]
 8011172:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8011176:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011178:	f107 0208 	add.w	r2, r7, #8
 801117c:	4610      	mov	r0, r2
 801117e:	4798      	blx	r3
 8011180:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8011182:	68fb      	ldr	r3, [r7, #12]
 8011184:	3301      	adds	r3, #1
 8011186:	2202      	movs	r2, #2
 8011188:	701a      	strb	r2, [r3, #0]
      break;
 801118a:	e0f2      	b.n	8011372 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 801118c:	683b      	ldr	r3, [r7, #0]
 801118e:	885b      	ldrh	r3, [r3, #2]
 8011190:	b2db      	uxtb	r3, r3
 8011192:	2b05      	cmp	r3, #5
 8011194:	f200 80ac 	bhi.w	80112f0 <USBD_GetDescriptor+0x204>
 8011198:	a201      	add	r2, pc, #4	; (adr r2, 80111a0 <USBD_GetDescriptor+0xb4>)
 801119a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801119e:	bf00      	nop
 80111a0:	080111b9 	.word	0x080111b9
 80111a4:	080111ed 	.word	0x080111ed
 80111a8:	08011221 	.word	0x08011221
 80111ac:	08011255 	.word	0x08011255
 80111b0:	08011289 	.word	0x08011289
 80111b4:	080112bd 	.word	0x080112bd
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 80111b8:	687b      	ldr	r3, [r7, #4]
 80111ba:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80111be:	685b      	ldr	r3, [r3, #4]
 80111c0:	2b00      	cmp	r3, #0
 80111c2:	d00b      	beq.n	80111dc <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 80111c4:	687b      	ldr	r3, [r7, #4]
 80111c6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80111ca:	685b      	ldr	r3, [r3, #4]
 80111cc:	687a      	ldr	r2, [r7, #4]
 80111ce:	7c12      	ldrb	r2, [r2, #16]
 80111d0:	f107 0108 	add.w	r1, r7, #8
 80111d4:	4610      	mov	r0, r2
 80111d6:	4798      	blx	r3
 80111d8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80111da:	e091      	b.n	8011300 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80111dc:	6839      	ldr	r1, [r7, #0]
 80111de:	6878      	ldr	r0, [r7, #4]
 80111e0:	f000 fab2 	bl	8011748 <USBD_CtlError>
            err++;
 80111e4:	7afb      	ldrb	r3, [r7, #11]
 80111e6:	3301      	adds	r3, #1
 80111e8:	72fb      	strb	r3, [r7, #11]
          break;
 80111ea:	e089      	b.n	8011300 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 80111ec:	687b      	ldr	r3, [r7, #4]
 80111ee:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80111f2:	689b      	ldr	r3, [r3, #8]
 80111f4:	2b00      	cmp	r3, #0
 80111f6:	d00b      	beq.n	8011210 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 80111f8:	687b      	ldr	r3, [r7, #4]
 80111fa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80111fe:	689b      	ldr	r3, [r3, #8]
 8011200:	687a      	ldr	r2, [r7, #4]
 8011202:	7c12      	ldrb	r2, [r2, #16]
 8011204:	f107 0108 	add.w	r1, r7, #8
 8011208:	4610      	mov	r0, r2
 801120a:	4798      	blx	r3
 801120c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 801120e:	e077      	b.n	8011300 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8011210:	6839      	ldr	r1, [r7, #0]
 8011212:	6878      	ldr	r0, [r7, #4]
 8011214:	f000 fa98 	bl	8011748 <USBD_CtlError>
            err++;
 8011218:	7afb      	ldrb	r3, [r7, #11]
 801121a:	3301      	adds	r3, #1
 801121c:	72fb      	strb	r3, [r7, #11]
          break;
 801121e:	e06f      	b.n	8011300 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8011220:	687b      	ldr	r3, [r7, #4]
 8011222:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8011226:	68db      	ldr	r3, [r3, #12]
 8011228:	2b00      	cmp	r3, #0
 801122a:	d00b      	beq.n	8011244 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 801122c:	687b      	ldr	r3, [r7, #4]
 801122e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8011232:	68db      	ldr	r3, [r3, #12]
 8011234:	687a      	ldr	r2, [r7, #4]
 8011236:	7c12      	ldrb	r2, [r2, #16]
 8011238:	f107 0108 	add.w	r1, r7, #8
 801123c:	4610      	mov	r0, r2
 801123e:	4798      	blx	r3
 8011240:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8011242:	e05d      	b.n	8011300 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8011244:	6839      	ldr	r1, [r7, #0]
 8011246:	6878      	ldr	r0, [r7, #4]
 8011248:	f000 fa7e 	bl	8011748 <USBD_CtlError>
            err++;
 801124c:	7afb      	ldrb	r3, [r7, #11]
 801124e:	3301      	adds	r3, #1
 8011250:	72fb      	strb	r3, [r7, #11]
          break;
 8011252:	e055      	b.n	8011300 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8011254:	687b      	ldr	r3, [r7, #4]
 8011256:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 801125a:	691b      	ldr	r3, [r3, #16]
 801125c:	2b00      	cmp	r3, #0
 801125e:	d00b      	beq.n	8011278 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8011260:	687b      	ldr	r3, [r7, #4]
 8011262:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8011266:	691b      	ldr	r3, [r3, #16]
 8011268:	687a      	ldr	r2, [r7, #4]
 801126a:	7c12      	ldrb	r2, [r2, #16]
 801126c:	f107 0108 	add.w	r1, r7, #8
 8011270:	4610      	mov	r0, r2
 8011272:	4798      	blx	r3
 8011274:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8011276:	e043      	b.n	8011300 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8011278:	6839      	ldr	r1, [r7, #0]
 801127a:	6878      	ldr	r0, [r7, #4]
 801127c:	f000 fa64 	bl	8011748 <USBD_CtlError>
            err++;
 8011280:	7afb      	ldrb	r3, [r7, #11]
 8011282:	3301      	adds	r3, #1
 8011284:	72fb      	strb	r3, [r7, #11]
          break;
 8011286:	e03b      	b.n	8011300 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8011288:	687b      	ldr	r3, [r7, #4]
 801128a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 801128e:	695b      	ldr	r3, [r3, #20]
 8011290:	2b00      	cmp	r3, #0
 8011292:	d00b      	beq.n	80112ac <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8011294:	687b      	ldr	r3, [r7, #4]
 8011296:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 801129a:	695b      	ldr	r3, [r3, #20]
 801129c:	687a      	ldr	r2, [r7, #4]
 801129e:	7c12      	ldrb	r2, [r2, #16]
 80112a0:	f107 0108 	add.w	r1, r7, #8
 80112a4:	4610      	mov	r0, r2
 80112a6:	4798      	blx	r3
 80112a8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80112aa:	e029      	b.n	8011300 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80112ac:	6839      	ldr	r1, [r7, #0]
 80112ae:	6878      	ldr	r0, [r7, #4]
 80112b0:	f000 fa4a 	bl	8011748 <USBD_CtlError>
            err++;
 80112b4:	7afb      	ldrb	r3, [r7, #11]
 80112b6:	3301      	adds	r3, #1
 80112b8:	72fb      	strb	r3, [r7, #11]
          break;
 80112ba:	e021      	b.n	8011300 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 80112bc:	687b      	ldr	r3, [r7, #4]
 80112be:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80112c2:	699b      	ldr	r3, [r3, #24]
 80112c4:	2b00      	cmp	r3, #0
 80112c6:	d00b      	beq.n	80112e0 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 80112c8:	687b      	ldr	r3, [r7, #4]
 80112ca:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80112ce:	699b      	ldr	r3, [r3, #24]
 80112d0:	687a      	ldr	r2, [r7, #4]
 80112d2:	7c12      	ldrb	r2, [r2, #16]
 80112d4:	f107 0108 	add.w	r1, r7, #8
 80112d8:	4610      	mov	r0, r2
 80112da:	4798      	blx	r3
 80112dc:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80112de:	e00f      	b.n	8011300 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80112e0:	6839      	ldr	r1, [r7, #0]
 80112e2:	6878      	ldr	r0, [r7, #4]
 80112e4:	f000 fa30 	bl	8011748 <USBD_CtlError>
            err++;
 80112e8:	7afb      	ldrb	r3, [r7, #11]
 80112ea:	3301      	adds	r3, #1
 80112ec:	72fb      	strb	r3, [r7, #11]
          break;
 80112ee:	e007      	b.n	8011300 <USBD_GetDescriptor+0x214>
            err++;
          }
#endif

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 80112f0:	6839      	ldr	r1, [r7, #0]
 80112f2:	6878      	ldr	r0, [r7, #4]
 80112f4:	f000 fa28 	bl	8011748 <USBD_CtlError>
          err++;
 80112f8:	7afb      	ldrb	r3, [r7, #11]
 80112fa:	3301      	adds	r3, #1
 80112fc:	72fb      	strb	r3, [r7, #11]
#endif
          break;
 80112fe:	bf00      	nop
      }
      break;
 8011300:	e037      	b.n	8011372 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8011302:	687b      	ldr	r3, [r7, #4]
 8011304:	7c1b      	ldrb	r3, [r3, #16]
 8011306:	2b00      	cmp	r3, #0
 8011308:	d109      	bne.n	801131e <USBD_GetDescriptor+0x232>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 801130a:	687b      	ldr	r3, [r7, #4]
 801130c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8011310:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8011312:	f107 0208 	add.w	r2, r7, #8
 8011316:	4610      	mov	r0, r2
 8011318:	4798      	blx	r3
 801131a:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 801131c:	e029      	b.n	8011372 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 801131e:	6839      	ldr	r1, [r7, #0]
 8011320:	6878      	ldr	r0, [r7, #4]
 8011322:	f000 fa11 	bl	8011748 <USBD_CtlError>
        err++;
 8011326:	7afb      	ldrb	r3, [r7, #11]
 8011328:	3301      	adds	r3, #1
 801132a:	72fb      	strb	r3, [r7, #11]
      break;
 801132c:	e021      	b.n	8011372 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 801132e:	687b      	ldr	r3, [r7, #4]
 8011330:	7c1b      	ldrb	r3, [r3, #16]
 8011332:	2b00      	cmp	r3, #0
 8011334:	d10d      	bne.n	8011352 <USBD_GetDescriptor+0x266>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 8011336:	687b      	ldr	r3, [r7, #4]
 8011338:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 801133c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801133e:	f107 0208 	add.w	r2, r7, #8
 8011342:	4610      	mov	r0, r2
 8011344:	4798      	blx	r3
 8011346:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8011348:	68fb      	ldr	r3, [r7, #12]
 801134a:	3301      	adds	r3, #1
 801134c:	2207      	movs	r2, #7
 801134e:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8011350:	e00f      	b.n	8011372 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8011352:	6839      	ldr	r1, [r7, #0]
 8011354:	6878      	ldr	r0, [r7, #4]
 8011356:	f000 f9f7 	bl	8011748 <USBD_CtlError>
        err++;
 801135a:	7afb      	ldrb	r3, [r7, #11]
 801135c:	3301      	adds	r3, #1
 801135e:	72fb      	strb	r3, [r7, #11]
      break;
 8011360:	e007      	b.n	8011372 <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 8011362:	6839      	ldr	r1, [r7, #0]
 8011364:	6878      	ldr	r0, [r7, #4]
 8011366:	f000 f9ef 	bl	8011748 <USBD_CtlError>
      err++;
 801136a:	7afb      	ldrb	r3, [r7, #11]
 801136c:	3301      	adds	r3, #1
 801136e:	72fb      	strb	r3, [r7, #11]
      break;
 8011370:	bf00      	nop
  }

  if (err != 0U)
 8011372:	7afb      	ldrb	r3, [r7, #11]
 8011374:	2b00      	cmp	r3, #0
 8011376:	d11e      	bne.n	80113b6 <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 8011378:	683b      	ldr	r3, [r7, #0]
 801137a:	88db      	ldrh	r3, [r3, #6]
 801137c:	2b00      	cmp	r3, #0
 801137e:	d016      	beq.n	80113ae <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 8011380:	893b      	ldrh	r3, [r7, #8]
 8011382:	2b00      	cmp	r3, #0
 8011384:	d00e      	beq.n	80113a4 <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 8011386:	683b      	ldr	r3, [r7, #0]
 8011388:	88da      	ldrh	r2, [r3, #6]
 801138a:	893b      	ldrh	r3, [r7, #8]
 801138c:	4293      	cmp	r3, r2
 801138e:	bf28      	it	cs
 8011390:	4613      	movcs	r3, r2
 8011392:	b29b      	uxth	r3, r3
 8011394:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8011396:	893b      	ldrh	r3, [r7, #8]
 8011398:	461a      	mov	r2, r3
 801139a:	68f9      	ldr	r1, [r7, #12]
 801139c:	6878      	ldr	r0, [r7, #4]
 801139e:	f000 fa44 	bl	801182a <USBD_CtlSendData>
 80113a2:	e009      	b.n	80113b8 <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 80113a4:	6839      	ldr	r1, [r7, #0]
 80113a6:	6878      	ldr	r0, [r7, #4]
 80113a8:	f000 f9ce 	bl	8011748 <USBD_CtlError>
 80113ac:	e004      	b.n	80113b8 <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 80113ae:	6878      	ldr	r0, [r7, #4]
 80113b0:	f000 fa95 	bl	80118de <USBD_CtlSendStatus>
 80113b4:	e000      	b.n	80113b8 <USBD_GetDescriptor+0x2cc>
    return;
 80113b6:	bf00      	nop
  }
}
 80113b8:	3710      	adds	r7, #16
 80113ba:	46bd      	mov	sp, r7
 80113bc:	bd80      	pop	{r7, pc}
 80113be:	bf00      	nop

080113c0 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80113c0:	b580      	push	{r7, lr}
 80113c2:	b084      	sub	sp, #16
 80113c4:	af00      	add	r7, sp, #0
 80113c6:	6078      	str	r0, [r7, #4]
 80113c8:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 80113ca:	683b      	ldr	r3, [r7, #0]
 80113cc:	889b      	ldrh	r3, [r3, #4]
 80113ce:	2b00      	cmp	r3, #0
 80113d0:	d131      	bne.n	8011436 <USBD_SetAddress+0x76>
 80113d2:	683b      	ldr	r3, [r7, #0]
 80113d4:	88db      	ldrh	r3, [r3, #6]
 80113d6:	2b00      	cmp	r3, #0
 80113d8:	d12d      	bne.n	8011436 <USBD_SetAddress+0x76>
 80113da:	683b      	ldr	r3, [r7, #0]
 80113dc:	885b      	ldrh	r3, [r3, #2]
 80113de:	2b7f      	cmp	r3, #127	; 0x7f
 80113e0:	d829      	bhi.n	8011436 <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 80113e2:	683b      	ldr	r3, [r7, #0]
 80113e4:	885b      	ldrh	r3, [r3, #2]
 80113e6:	b2db      	uxtb	r3, r3
 80113e8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80113ec:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80113ee:	687b      	ldr	r3, [r7, #4]
 80113f0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80113f4:	b2db      	uxtb	r3, r3
 80113f6:	2b03      	cmp	r3, #3
 80113f8:	d104      	bne.n	8011404 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 80113fa:	6839      	ldr	r1, [r7, #0]
 80113fc:	6878      	ldr	r0, [r7, #4]
 80113fe:	f000 f9a3 	bl	8011748 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8011402:	e01d      	b.n	8011440 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8011404:	687b      	ldr	r3, [r7, #4]
 8011406:	7bfa      	ldrb	r2, [r7, #15]
 8011408:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 801140c:	7bfb      	ldrb	r3, [r7, #15]
 801140e:	4619      	mov	r1, r3
 8011410:	6878      	ldr	r0, [r7, #4]
 8011412:	f000 fec9 	bl	80121a8 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 8011416:	6878      	ldr	r0, [r7, #4]
 8011418:	f000 fa61 	bl	80118de <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 801141c:	7bfb      	ldrb	r3, [r7, #15]
 801141e:	2b00      	cmp	r3, #0
 8011420:	d004      	beq.n	801142c <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8011422:	687b      	ldr	r3, [r7, #4]
 8011424:	2202      	movs	r2, #2
 8011426:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 801142a:	e009      	b.n	8011440 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 801142c:	687b      	ldr	r3, [r7, #4]
 801142e:	2201      	movs	r2, #1
 8011430:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8011434:	e004      	b.n	8011440 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8011436:	6839      	ldr	r1, [r7, #0]
 8011438:	6878      	ldr	r0, [r7, #4]
 801143a:	f000 f985 	bl	8011748 <USBD_CtlError>
  }
}
 801143e:	bf00      	nop
 8011440:	bf00      	nop
 8011442:	3710      	adds	r7, #16
 8011444:	46bd      	mov	sp, r7
 8011446:	bd80      	pop	{r7, pc}

08011448 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8011448:	b580      	push	{r7, lr}
 801144a:	b084      	sub	sp, #16
 801144c:	af00      	add	r7, sp, #0
 801144e:	6078      	str	r0, [r7, #4]
 8011450:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8011452:	2300      	movs	r3, #0
 8011454:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8011456:	683b      	ldr	r3, [r7, #0]
 8011458:	885b      	ldrh	r3, [r3, #2]
 801145a:	b2da      	uxtb	r2, r3
 801145c:	4b4c      	ldr	r3, [pc, #304]	; (8011590 <USBD_SetConfig+0x148>)
 801145e:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8011460:	4b4b      	ldr	r3, [pc, #300]	; (8011590 <USBD_SetConfig+0x148>)
 8011462:	781b      	ldrb	r3, [r3, #0]
 8011464:	2b01      	cmp	r3, #1
 8011466:	d905      	bls.n	8011474 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 8011468:	6839      	ldr	r1, [r7, #0]
 801146a:	6878      	ldr	r0, [r7, #4]
 801146c:	f000 f96c 	bl	8011748 <USBD_CtlError>
    return USBD_FAIL;
 8011470:	2303      	movs	r3, #3
 8011472:	e088      	b.n	8011586 <USBD_SetConfig+0x13e>
  }

  switch (pdev->dev_state)
 8011474:	687b      	ldr	r3, [r7, #4]
 8011476:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 801147a:	b2db      	uxtb	r3, r3
 801147c:	2b02      	cmp	r3, #2
 801147e:	d002      	beq.n	8011486 <USBD_SetConfig+0x3e>
 8011480:	2b03      	cmp	r3, #3
 8011482:	d025      	beq.n	80114d0 <USBD_SetConfig+0x88>
 8011484:	e071      	b.n	801156a <USBD_SetConfig+0x122>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 8011486:	4b42      	ldr	r3, [pc, #264]	; (8011590 <USBD_SetConfig+0x148>)
 8011488:	781b      	ldrb	r3, [r3, #0]
 801148a:	2b00      	cmp	r3, #0
 801148c:	d01c      	beq.n	80114c8 <USBD_SetConfig+0x80>
      {
        pdev->dev_config = cfgidx;
 801148e:	4b40      	ldr	r3, [pc, #256]	; (8011590 <USBD_SetConfig+0x148>)
 8011490:	781b      	ldrb	r3, [r3, #0]
 8011492:	461a      	mov	r2, r3
 8011494:	687b      	ldr	r3, [r7, #4]
 8011496:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 8011498:	4b3d      	ldr	r3, [pc, #244]	; (8011590 <USBD_SetConfig+0x148>)
 801149a:	781b      	ldrb	r3, [r3, #0]
 801149c:	4619      	mov	r1, r3
 801149e:	6878      	ldr	r0, [r7, #4]
 80114a0:	f7ff f949 	bl	8010736 <USBD_SetClassConfig>
 80114a4:	4603      	mov	r3, r0
 80114a6:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 80114a8:	7bfb      	ldrb	r3, [r7, #15]
 80114aa:	2b00      	cmp	r3, #0
 80114ac:	d004      	beq.n	80114b8 <USBD_SetConfig+0x70>
        {
          USBD_CtlError(pdev, req);
 80114ae:	6839      	ldr	r1, [r7, #0]
 80114b0:	6878      	ldr	r0, [r7, #4]
 80114b2:	f000 f949 	bl	8011748 <USBD_CtlError>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 80114b6:	e065      	b.n	8011584 <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 80114b8:	6878      	ldr	r0, [r7, #4]
 80114ba:	f000 fa10 	bl	80118de <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 80114be:	687b      	ldr	r3, [r7, #4]
 80114c0:	2203      	movs	r2, #3
 80114c2:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 80114c6:	e05d      	b.n	8011584 <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 80114c8:	6878      	ldr	r0, [r7, #4]
 80114ca:	f000 fa08 	bl	80118de <USBD_CtlSendStatus>
      break;
 80114ce:	e059      	b.n	8011584 <USBD_SetConfig+0x13c>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 80114d0:	4b2f      	ldr	r3, [pc, #188]	; (8011590 <USBD_SetConfig+0x148>)
 80114d2:	781b      	ldrb	r3, [r3, #0]
 80114d4:	2b00      	cmp	r3, #0
 80114d6:	d112      	bne.n	80114fe <USBD_SetConfig+0xb6>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 80114d8:	687b      	ldr	r3, [r7, #4]
 80114da:	2202      	movs	r2, #2
 80114dc:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 80114e0:	4b2b      	ldr	r3, [pc, #172]	; (8011590 <USBD_SetConfig+0x148>)
 80114e2:	781b      	ldrb	r3, [r3, #0]
 80114e4:	461a      	mov	r2, r3
 80114e6:	687b      	ldr	r3, [r7, #4]
 80114e8:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 80114ea:	4b29      	ldr	r3, [pc, #164]	; (8011590 <USBD_SetConfig+0x148>)
 80114ec:	781b      	ldrb	r3, [r3, #0]
 80114ee:	4619      	mov	r1, r3
 80114f0:	6878      	ldr	r0, [r7, #4]
 80114f2:	f7ff f93c 	bl	801076e <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 80114f6:	6878      	ldr	r0, [r7, #4]
 80114f8:	f000 f9f1 	bl	80118de <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 80114fc:	e042      	b.n	8011584 <USBD_SetConfig+0x13c>
      else if (cfgidx != pdev->dev_config)
 80114fe:	4b24      	ldr	r3, [pc, #144]	; (8011590 <USBD_SetConfig+0x148>)
 8011500:	781b      	ldrb	r3, [r3, #0]
 8011502:	461a      	mov	r2, r3
 8011504:	687b      	ldr	r3, [r7, #4]
 8011506:	685b      	ldr	r3, [r3, #4]
 8011508:	429a      	cmp	r2, r3
 801150a:	d02a      	beq.n	8011562 <USBD_SetConfig+0x11a>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 801150c:	687b      	ldr	r3, [r7, #4]
 801150e:	685b      	ldr	r3, [r3, #4]
 8011510:	b2db      	uxtb	r3, r3
 8011512:	4619      	mov	r1, r3
 8011514:	6878      	ldr	r0, [r7, #4]
 8011516:	f7ff f92a 	bl	801076e <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 801151a:	4b1d      	ldr	r3, [pc, #116]	; (8011590 <USBD_SetConfig+0x148>)
 801151c:	781b      	ldrb	r3, [r3, #0]
 801151e:	461a      	mov	r2, r3
 8011520:	687b      	ldr	r3, [r7, #4]
 8011522:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 8011524:	4b1a      	ldr	r3, [pc, #104]	; (8011590 <USBD_SetConfig+0x148>)
 8011526:	781b      	ldrb	r3, [r3, #0]
 8011528:	4619      	mov	r1, r3
 801152a:	6878      	ldr	r0, [r7, #4]
 801152c:	f7ff f903 	bl	8010736 <USBD_SetClassConfig>
 8011530:	4603      	mov	r3, r0
 8011532:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 8011534:	7bfb      	ldrb	r3, [r7, #15]
 8011536:	2b00      	cmp	r3, #0
 8011538:	d00f      	beq.n	801155a <USBD_SetConfig+0x112>
          USBD_CtlError(pdev, req);
 801153a:	6839      	ldr	r1, [r7, #0]
 801153c:	6878      	ldr	r0, [r7, #4]
 801153e:	f000 f903 	bl	8011748 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8011542:	687b      	ldr	r3, [r7, #4]
 8011544:	685b      	ldr	r3, [r3, #4]
 8011546:	b2db      	uxtb	r3, r3
 8011548:	4619      	mov	r1, r3
 801154a:	6878      	ldr	r0, [r7, #4]
 801154c:	f7ff f90f 	bl	801076e <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8011550:	687b      	ldr	r3, [r7, #4]
 8011552:	2202      	movs	r2, #2
 8011554:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 8011558:	e014      	b.n	8011584 <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 801155a:	6878      	ldr	r0, [r7, #4]
 801155c:	f000 f9bf 	bl	80118de <USBD_CtlSendStatus>
      break;
 8011560:	e010      	b.n	8011584 <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 8011562:	6878      	ldr	r0, [r7, #4]
 8011564:	f000 f9bb 	bl	80118de <USBD_CtlSendStatus>
      break;
 8011568:	e00c      	b.n	8011584 <USBD_SetConfig+0x13c>

    default:
      USBD_CtlError(pdev, req);
 801156a:	6839      	ldr	r1, [r7, #0]
 801156c:	6878      	ldr	r0, [r7, #4]
 801156e:	f000 f8eb 	bl	8011748 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 8011572:	4b07      	ldr	r3, [pc, #28]	; (8011590 <USBD_SetConfig+0x148>)
 8011574:	781b      	ldrb	r3, [r3, #0]
 8011576:	4619      	mov	r1, r3
 8011578:	6878      	ldr	r0, [r7, #4]
 801157a:	f7ff f8f8 	bl	801076e <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 801157e:	2303      	movs	r3, #3
 8011580:	73fb      	strb	r3, [r7, #15]
      break;
 8011582:	bf00      	nop
  }

  return ret;
 8011584:	7bfb      	ldrb	r3, [r7, #15]
}
 8011586:	4618      	mov	r0, r3
 8011588:	3710      	adds	r7, #16
 801158a:	46bd      	mov	sp, r7
 801158c:	bd80      	pop	{r7, pc}
 801158e:	bf00      	nop
 8011590:	24000360 	.word	0x24000360

08011594 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8011594:	b580      	push	{r7, lr}
 8011596:	b082      	sub	sp, #8
 8011598:	af00      	add	r7, sp, #0
 801159a:	6078      	str	r0, [r7, #4]
 801159c:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 801159e:	683b      	ldr	r3, [r7, #0]
 80115a0:	88db      	ldrh	r3, [r3, #6]
 80115a2:	2b01      	cmp	r3, #1
 80115a4:	d004      	beq.n	80115b0 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 80115a6:	6839      	ldr	r1, [r7, #0]
 80115a8:	6878      	ldr	r0, [r7, #4]
 80115aa:	f000 f8cd 	bl	8011748 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 80115ae:	e023      	b.n	80115f8 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 80115b0:	687b      	ldr	r3, [r7, #4]
 80115b2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80115b6:	b2db      	uxtb	r3, r3
 80115b8:	2b02      	cmp	r3, #2
 80115ba:	dc02      	bgt.n	80115c2 <USBD_GetConfig+0x2e>
 80115bc:	2b00      	cmp	r3, #0
 80115be:	dc03      	bgt.n	80115c8 <USBD_GetConfig+0x34>
 80115c0:	e015      	b.n	80115ee <USBD_GetConfig+0x5a>
 80115c2:	2b03      	cmp	r3, #3
 80115c4:	d00b      	beq.n	80115de <USBD_GetConfig+0x4a>
 80115c6:	e012      	b.n	80115ee <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 80115c8:	687b      	ldr	r3, [r7, #4]
 80115ca:	2200      	movs	r2, #0
 80115cc:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 80115ce:	687b      	ldr	r3, [r7, #4]
 80115d0:	3308      	adds	r3, #8
 80115d2:	2201      	movs	r2, #1
 80115d4:	4619      	mov	r1, r3
 80115d6:	6878      	ldr	r0, [r7, #4]
 80115d8:	f000 f927 	bl	801182a <USBD_CtlSendData>
        break;
 80115dc:	e00c      	b.n	80115f8 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 80115de:	687b      	ldr	r3, [r7, #4]
 80115e0:	3304      	adds	r3, #4
 80115e2:	2201      	movs	r2, #1
 80115e4:	4619      	mov	r1, r3
 80115e6:	6878      	ldr	r0, [r7, #4]
 80115e8:	f000 f91f 	bl	801182a <USBD_CtlSendData>
        break;
 80115ec:	e004      	b.n	80115f8 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 80115ee:	6839      	ldr	r1, [r7, #0]
 80115f0:	6878      	ldr	r0, [r7, #4]
 80115f2:	f000 f8a9 	bl	8011748 <USBD_CtlError>
        break;
 80115f6:	bf00      	nop
}
 80115f8:	bf00      	nop
 80115fa:	3708      	adds	r7, #8
 80115fc:	46bd      	mov	sp, r7
 80115fe:	bd80      	pop	{r7, pc}

08011600 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8011600:	b580      	push	{r7, lr}
 8011602:	b082      	sub	sp, #8
 8011604:	af00      	add	r7, sp, #0
 8011606:	6078      	str	r0, [r7, #4]
 8011608:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 801160a:	687b      	ldr	r3, [r7, #4]
 801160c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8011610:	b2db      	uxtb	r3, r3
 8011612:	3b01      	subs	r3, #1
 8011614:	2b02      	cmp	r3, #2
 8011616:	d81e      	bhi.n	8011656 <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8011618:	683b      	ldr	r3, [r7, #0]
 801161a:	88db      	ldrh	r3, [r3, #6]
 801161c:	2b02      	cmp	r3, #2
 801161e:	d004      	beq.n	801162a <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 8011620:	6839      	ldr	r1, [r7, #0]
 8011622:	6878      	ldr	r0, [r7, #4]
 8011624:	f000 f890 	bl	8011748 <USBD_CtlError>
        break;
 8011628:	e01a      	b.n	8011660 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 801162a:	687b      	ldr	r3, [r7, #4]
 801162c:	2201      	movs	r2, #1
 801162e:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup != 0U)
 8011630:	687b      	ldr	r3, [r7, #4]
 8011632:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 8011636:	2b00      	cmp	r3, #0
 8011638:	d005      	beq.n	8011646 <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 801163a:	687b      	ldr	r3, [r7, #4]
 801163c:	68db      	ldr	r3, [r3, #12]
 801163e:	f043 0202 	orr.w	r2, r3, #2
 8011642:	687b      	ldr	r3, [r7, #4]
 8011644:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 8011646:	687b      	ldr	r3, [r7, #4]
 8011648:	330c      	adds	r3, #12
 801164a:	2202      	movs	r2, #2
 801164c:	4619      	mov	r1, r3
 801164e:	6878      	ldr	r0, [r7, #4]
 8011650:	f000 f8eb 	bl	801182a <USBD_CtlSendData>
      break;
 8011654:	e004      	b.n	8011660 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 8011656:	6839      	ldr	r1, [r7, #0]
 8011658:	6878      	ldr	r0, [r7, #4]
 801165a:	f000 f875 	bl	8011748 <USBD_CtlError>
      break;
 801165e:	bf00      	nop
  }
}
 8011660:	bf00      	nop
 8011662:	3708      	adds	r7, #8
 8011664:	46bd      	mov	sp, r7
 8011666:	bd80      	pop	{r7, pc}

08011668 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8011668:	b580      	push	{r7, lr}
 801166a:	b082      	sub	sp, #8
 801166c:	af00      	add	r7, sp, #0
 801166e:	6078      	str	r0, [r7, #4]
 8011670:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8011672:	683b      	ldr	r3, [r7, #0]
 8011674:	885b      	ldrh	r3, [r3, #2]
 8011676:	2b01      	cmp	r3, #1
 8011678:	d106      	bne.n	8011688 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 801167a:	687b      	ldr	r3, [r7, #4]
 801167c:	2201      	movs	r2, #1
 801167e:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 8011682:	6878      	ldr	r0, [r7, #4]
 8011684:	f000 f92b 	bl	80118de <USBD_CtlSendStatus>
  }
}
 8011688:	bf00      	nop
 801168a:	3708      	adds	r7, #8
 801168c:	46bd      	mov	sp, r7
 801168e:	bd80      	pop	{r7, pc}

08011690 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8011690:	b580      	push	{r7, lr}
 8011692:	b082      	sub	sp, #8
 8011694:	af00      	add	r7, sp, #0
 8011696:	6078      	str	r0, [r7, #4]
 8011698:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 801169a:	687b      	ldr	r3, [r7, #4]
 801169c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80116a0:	b2db      	uxtb	r3, r3
 80116a2:	3b01      	subs	r3, #1
 80116a4:	2b02      	cmp	r3, #2
 80116a6:	d80b      	bhi.n	80116c0 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80116a8:	683b      	ldr	r3, [r7, #0]
 80116aa:	885b      	ldrh	r3, [r3, #2]
 80116ac:	2b01      	cmp	r3, #1
 80116ae:	d10c      	bne.n	80116ca <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 80116b0:	687b      	ldr	r3, [r7, #4]
 80116b2:	2200      	movs	r2, #0
 80116b4:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 80116b8:	6878      	ldr	r0, [r7, #4]
 80116ba:	f000 f910 	bl	80118de <USBD_CtlSendStatus>
      }
      break;
 80116be:	e004      	b.n	80116ca <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 80116c0:	6839      	ldr	r1, [r7, #0]
 80116c2:	6878      	ldr	r0, [r7, #4]
 80116c4:	f000 f840 	bl	8011748 <USBD_CtlError>
      break;
 80116c8:	e000      	b.n	80116cc <USBD_ClrFeature+0x3c>
      break;
 80116ca:	bf00      	nop
  }
}
 80116cc:	bf00      	nop
 80116ce:	3708      	adds	r7, #8
 80116d0:	46bd      	mov	sp, r7
 80116d2:	bd80      	pop	{r7, pc}

080116d4 <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 80116d4:	b580      	push	{r7, lr}
 80116d6:	b084      	sub	sp, #16
 80116d8:	af00      	add	r7, sp, #0
 80116da:	6078      	str	r0, [r7, #4]
 80116dc:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 80116de:	683b      	ldr	r3, [r7, #0]
 80116e0:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 80116e2:	68fb      	ldr	r3, [r7, #12]
 80116e4:	781a      	ldrb	r2, [r3, #0]
 80116e6:	687b      	ldr	r3, [r7, #4]
 80116e8:	701a      	strb	r2, [r3, #0]

  pbuff++;
 80116ea:	68fb      	ldr	r3, [r7, #12]
 80116ec:	3301      	adds	r3, #1
 80116ee:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 80116f0:	68fb      	ldr	r3, [r7, #12]
 80116f2:	781a      	ldrb	r2, [r3, #0]
 80116f4:	687b      	ldr	r3, [r7, #4]
 80116f6:	705a      	strb	r2, [r3, #1]

  pbuff++;
 80116f8:	68fb      	ldr	r3, [r7, #12]
 80116fa:	3301      	adds	r3, #1
 80116fc:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 80116fe:	68f8      	ldr	r0, [r7, #12]
 8011700:	f7ff fabc 	bl	8010c7c <SWAPBYTE>
 8011704:	4603      	mov	r3, r0
 8011706:	461a      	mov	r2, r3
 8011708:	687b      	ldr	r3, [r7, #4]
 801170a:	805a      	strh	r2, [r3, #2]

  pbuff++;
 801170c:	68fb      	ldr	r3, [r7, #12]
 801170e:	3301      	adds	r3, #1
 8011710:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8011712:	68fb      	ldr	r3, [r7, #12]
 8011714:	3301      	adds	r3, #1
 8011716:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 8011718:	68f8      	ldr	r0, [r7, #12]
 801171a:	f7ff faaf 	bl	8010c7c <SWAPBYTE>
 801171e:	4603      	mov	r3, r0
 8011720:	461a      	mov	r2, r3
 8011722:	687b      	ldr	r3, [r7, #4]
 8011724:	809a      	strh	r2, [r3, #4]

  pbuff++;
 8011726:	68fb      	ldr	r3, [r7, #12]
 8011728:	3301      	adds	r3, #1
 801172a:	60fb      	str	r3, [r7, #12]
  pbuff++;
 801172c:	68fb      	ldr	r3, [r7, #12]
 801172e:	3301      	adds	r3, #1
 8011730:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 8011732:	68f8      	ldr	r0, [r7, #12]
 8011734:	f7ff faa2 	bl	8010c7c <SWAPBYTE>
 8011738:	4603      	mov	r3, r0
 801173a:	461a      	mov	r2, r3
 801173c:	687b      	ldr	r3, [r7, #4]
 801173e:	80da      	strh	r2, [r3, #6]
}
 8011740:	bf00      	nop
 8011742:	3710      	adds	r7, #16
 8011744:	46bd      	mov	sp, r7
 8011746:	bd80      	pop	{r7, pc}

08011748 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8011748:	b580      	push	{r7, lr}
 801174a:	b082      	sub	sp, #8
 801174c:	af00      	add	r7, sp, #0
 801174e:	6078      	str	r0, [r7, #4]
 8011750:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 8011752:	2180      	movs	r1, #128	; 0x80
 8011754:	6878      	ldr	r0, [r7, #4]
 8011756:	f000 fcbd 	bl	80120d4 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 801175a:	2100      	movs	r1, #0
 801175c:	6878      	ldr	r0, [r7, #4]
 801175e:	f000 fcb9 	bl	80120d4 <USBD_LL_StallEP>
}
 8011762:	bf00      	nop
 8011764:	3708      	adds	r7, #8
 8011766:	46bd      	mov	sp, r7
 8011768:	bd80      	pop	{r7, pc}

0801176a <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 801176a:	b580      	push	{r7, lr}
 801176c:	b086      	sub	sp, #24
 801176e:	af00      	add	r7, sp, #0
 8011770:	60f8      	str	r0, [r7, #12]
 8011772:	60b9      	str	r1, [r7, #8]
 8011774:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8011776:	2300      	movs	r3, #0
 8011778:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 801177a:	68fb      	ldr	r3, [r7, #12]
 801177c:	2b00      	cmp	r3, #0
 801177e:	d036      	beq.n	80117ee <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 8011780:	68fb      	ldr	r3, [r7, #12]
 8011782:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 8011784:	6938      	ldr	r0, [r7, #16]
 8011786:	f000 f836 	bl	80117f6 <USBD_GetLen>
 801178a:	4603      	mov	r3, r0
 801178c:	3301      	adds	r3, #1
 801178e:	b29b      	uxth	r3, r3
 8011790:	005b      	lsls	r3, r3, #1
 8011792:	b29a      	uxth	r2, r3
 8011794:	687b      	ldr	r3, [r7, #4]
 8011796:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 8011798:	7dfb      	ldrb	r3, [r7, #23]
 801179a:	68ba      	ldr	r2, [r7, #8]
 801179c:	4413      	add	r3, r2
 801179e:	687a      	ldr	r2, [r7, #4]
 80117a0:	7812      	ldrb	r2, [r2, #0]
 80117a2:	701a      	strb	r2, [r3, #0]
  idx++;
 80117a4:	7dfb      	ldrb	r3, [r7, #23]
 80117a6:	3301      	adds	r3, #1
 80117a8:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 80117aa:	7dfb      	ldrb	r3, [r7, #23]
 80117ac:	68ba      	ldr	r2, [r7, #8]
 80117ae:	4413      	add	r3, r2
 80117b0:	2203      	movs	r2, #3
 80117b2:	701a      	strb	r2, [r3, #0]
  idx++;
 80117b4:	7dfb      	ldrb	r3, [r7, #23]
 80117b6:	3301      	adds	r3, #1
 80117b8:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 80117ba:	e013      	b.n	80117e4 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 80117bc:	7dfb      	ldrb	r3, [r7, #23]
 80117be:	68ba      	ldr	r2, [r7, #8]
 80117c0:	4413      	add	r3, r2
 80117c2:	693a      	ldr	r2, [r7, #16]
 80117c4:	7812      	ldrb	r2, [r2, #0]
 80117c6:	701a      	strb	r2, [r3, #0]
    pdesc++;
 80117c8:	693b      	ldr	r3, [r7, #16]
 80117ca:	3301      	adds	r3, #1
 80117cc:	613b      	str	r3, [r7, #16]
    idx++;
 80117ce:	7dfb      	ldrb	r3, [r7, #23]
 80117d0:	3301      	adds	r3, #1
 80117d2:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 80117d4:	7dfb      	ldrb	r3, [r7, #23]
 80117d6:	68ba      	ldr	r2, [r7, #8]
 80117d8:	4413      	add	r3, r2
 80117da:	2200      	movs	r2, #0
 80117dc:	701a      	strb	r2, [r3, #0]
    idx++;
 80117de:	7dfb      	ldrb	r3, [r7, #23]
 80117e0:	3301      	adds	r3, #1
 80117e2:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 80117e4:	693b      	ldr	r3, [r7, #16]
 80117e6:	781b      	ldrb	r3, [r3, #0]
 80117e8:	2b00      	cmp	r3, #0
 80117ea:	d1e7      	bne.n	80117bc <USBD_GetString+0x52>
 80117ec:	e000      	b.n	80117f0 <USBD_GetString+0x86>
    return;
 80117ee:	bf00      	nop
  }
}
 80117f0:	3718      	adds	r7, #24
 80117f2:	46bd      	mov	sp, r7
 80117f4:	bd80      	pop	{r7, pc}

080117f6 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 80117f6:	b480      	push	{r7}
 80117f8:	b085      	sub	sp, #20
 80117fa:	af00      	add	r7, sp, #0
 80117fc:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 80117fe:	2300      	movs	r3, #0
 8011800:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 8011802:	687b      	ldr	r3, [r7, #4]
 8011804:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 8011806:	e005      	b.n	8011814 <USBD_GetLen+0x1e>
  {
    len++;
 8011808:	7bfb      	ldrb	r3, [r7, #15]
 801180a:	3301      	adds	r3, #1
 801180c:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 801180e:	68bb      	ldr	r3, [r7, #8]
 8011810:	3301      	adds	r3, #1
 8011812:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 8011814:	68bb      	ldr	r3, [r7, #8]
 8011816:	781b      	ldrb	r3, [r3, #0]
 8011818:	2b00      	cmp	r3, #0
 801181a:	d1f5      	bne.n	8011808 <USBD_GetLen+0x12>
  }

  return len;
 801181c:	7bfb      	ldrb	r3, [r7, #15]
}
 801181e:	4618      	mov	r0, r3
 8011820:	3714      	adds	r7, #20
 8011822:	46bd      	mov	sp, r7
 8011824:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011828:	4770      	bx	lr

0801182a <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 801182a:	b580      	push	{r7, lr}
 801182c:	b084      	sub	sp, #16
 801182e:	af00      	add	r7, sp, #0
 8011830:	60f8      	str	r0, [r7, #12]
 8011832:	60b9      	str	r1, [r7, #8]
 8011834:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8011836:	68fb      	ldr	r3, [r7, #12]
 8011838:	2202      	movs	r2, #2
 801183a:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 801183e:	68fb      	ldr	r3, [r7, #12]
 8011840:	687a      	ldr	r2, [r7, #4]
 8011842:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 8011844:	68fb      	ldr	r3, [r7, #12]
 8011846:	687a      	ldr	r2, [r7, #4]
 8011848:	61da      	str	r2, [r3, #28]
#endif

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 801184a:	687b      	ldr	r3, [r7, #4]
 801184c:	68ba      	ldr	r2, [r7, #8]
 801184e:	2100      	movs	r1, #0
 8011850:	68f8      	ldr	r0, [r7, #12]
 8011852:	f000 fcc8 	bl	80121e6 <USBD_LL_Transmit>

  return USBD_OK;
 8011856:	2300      	movs	r3, #0
}
 8011858:	4618      	mov	r0, r3
 801185a:	3710      	adds	r7, #16
 801185c:	46bd      	mov	sp, r7
 801185e:	bd80      	pop	{r7, pc}

08011860 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 8011860:	b580      	push	{r7, lr}
 8011862:	b084      	sub	sp, #16
 8011864:	af00      	add	r7, sp, #0
 8011866:	60f8      	str	r0, [r7, #12]
 8011868:	60b9      	str	r1, [r7, #8]
 801186a:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 801186c:	687b      	ldr	r3, [r7, #4]
 801186e:	68ba      	ldr	r2, [r7, #8]
 8011870:	2100      	movs	r1, #0
 8011872:	68f8      	ldr	r0, [r7, #12]
 8011874:	f000 fcb7 	bl	80121e6 <USBD_LL_Transmit>

  return USBD_OK;
 8011878:	2300      	movs	r3, #0
}
 801187a:	4618      	mov	r0, r3
 801187c:	3710      	adds	r7, #16
 801187e:	46bd      	mov	sp, r7
 8011880:	bd80      	pop	{r7, pc}

08011882 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 8011882:	b580      	push	{r7, lr}
 8011884:	b084      	sub	sp, #16
 8011886:	af00      	add	r7, sp, #0
 8011888:	60f8      	str	r0, [r7, #12]
 801188a:	60b9      	str	r1, [r7, #8]
 801188c:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 801188e:	68fb      	ldr	r3, [r7, #12]
 8011890:	2203      	movs	r2, #3
 8011892:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 8011896:	68fb      	ldr	r3, [r7, #12]
 8011898:	687a      	ldr	r2, [r7, #4]
 801189a:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 801189e:	68fb      	ldr	r3, [r7, #12]
 80118a0:	687a      	ldr	r2, [r7, #4]
 80118a2:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 80118a6:	687b      	ldr	r3, [r7, #4]
 80118a8:	68ba      	ldr	r2, [r7, #8]
 80118aa:	2100      	movs	r1, #0
 80118ac:	68f8      	ldr	r0, [r7, #12]
 80118ae:	f000 fcbb 	bl	8012228 <USBD_LL_PrepareReceive>

  return USBD_OK;
 80118b2:	2300      	movs	r3, #0
}
 80118b4:	4618      	mov	r0, r3
 80118b6:	3710      	adds	r7, #16
 80118b8:	46bd      	mov	sp, r7
 80118ba:	bd80      	pop	{r7, pc}

080118bc <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 80118bc:	b580      	push	{r7, lr}
 80118be:	b084      	sub	sp, #16
 80118c0:	af00      	add	r7, sp, #0
 80118c2:	60f8      	str	r0, [r7, #12]
 80118c4:	60b9      	str	r1, [r7, #8]
 80118c6:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 80118c8:	687b      	ldr	r3, [r7, #4]
 80118ca:	68ba      	ldr	r2, [r7, #8]
 80118cc:	2100      	movs	r1, #0
 80118ce:	68f8      	ldr	r0, [r7, #12]
 80118d0:	f000 fcaa 	bl	8012228 <USBD_LL_PrepareReceive>

  return USBD_OK;
 80118d4:	2300      	movs	r3, #0
}
 80118d6:	4618      	mov	r0, r3
 80118d8:	3710      	adds	r7, #16
 80118da:	46bd      	mov	sp, r7
 80118dc:	bd80      	pop	{r7, pc}

080118de <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 80118de:	b580      	push	{r7, lr}
 80118e0:	b082      	sub	sp, #8
 80118e2:	af00      	add	r7, sp, #0
 80118e4:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 80118e6:	687b      	ldr	r3, [r7, #4]
 80118e8:	2204      	movs	r2, #4
 80118ea:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 80118ee:	2300      	movs	r3, #0
 80118f0:	2200      	movs	r2, #0
 80118f2:	2100      	movs	r1, #0
 80118f4:	6878      	ldr	r0, [r7, #4]
 80118f6:	f000 fc76 	bl	80121e6 <USBD_LL_Transmit>

  return USBD_OK;
 80118fa:	2300      	movs	r3, #0
}
 80118fc:	4618      	mov	r0, r3
 80118fe:	3708      	adds	r7, #8
 8011900:	46bd      	mov	sp, r7
 8011902:	bd80      	pop	{r7, pc}

08011904 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8011904:	b580      	push	{r7, lr}
 8011906:	b082      	sub	sp, #8
 8011908:	af00      	add	r7, sp, #0
 801190a:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 801190c:	687b      	ldr	r3, [r7, #4]
 801190e:	2205      	movs	r2, #5
 8011910:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8011914:	2300      	movs	r3, #0
 8011916:	2200      	movs	r2, #0
 8011918:	2100      	movs	r1, #0
 801191a:	6878      	ldr	r0, [r7, #4]
 801191c:	f000 fc84 	bl	8012228 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8011920:	2300      	movs	r3, #0
}
 8011922:	4618      	mov	r0, r3
 8011924:	3708      	adds	r7, #8
 8011926:	46bd      	mov	sp, r7
 8011928:	bd80      	pop	{r7, pc}
	...

0801192c <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 801192c:	b480      	push	{r7}
 801192e:	b087      	sub	sp, #28
 8011930:	af00      	add	r7, sp, #0
 8011932:	60f8      	str	r0, [r7, #12]
 8011934:	60b9      	str	r1, [r7, #8]
 8011936:	4613      	mov	r3, r2
 8011938:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 801193a:	2301      	movs	r3, #1
 801193c:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 801193e:	2300      	movs	r3, #0
 8011940:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 8011942:	4b1f      	ldr	r3, [pc, #124]	; (80119c0 <FATFS_LinkDriverEx+0x94>)
 8011944:	7a5b      	ldrb	r3, [r3, #9]
 8011946:	b2db      	uxtb	r3, r3
 8011948:	2b00      	cmp	r3, #0
 801194a:	d131      	bne.n	80119b0 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 801194c:	4b1c      	ldr	r3, [pc, #112]	; (80119c0 <FATFS_LinkDriverEx+0x94>)
 801194e:	7a5b      	ldrb	r3, [r3, #9]
 8011950:	b2db      	uxtb	r3, r3
 8011952:	461a      	mov	r2, r3
 8011954:	4b1a      	ldr	r3, [pc, #104]	; (80119c0 <FATFS_LinkDriverEx+0x94>)
 8011956:	2100      	movs	r1, #0
 8011958:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 801195a:	4b19      	ldr	r3, [pc, #100]	; (80119c0 <FATFS_LinkDriverEx+0x94>)
 801195c:	7a5b      	ldrb	r3, [r3, #9]
 801195e:	b2db      	uxtb	r3, r3
 8011960:	4a17      	ldr	r2, [pc, #92]	; (80119c0 <FATFS_LinkDriverEx+0x94>)
 8011962:	009b      	lsls	r3, r3, #2
 8011964:	4413      	add	r3, r2
 8011966:	68fa      	ldr	r2, [r7, #12]
 8011968:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 801196a:	4b15      	ldr	r3, [pc, #84]	; (80119c0 <FATFS_LinkDriverEx+0x94>)
 801196c:	7a5b      	ldrb	r3, [r3, #9]
 801196e:	b2db      	uxtb	r3, r3
 8011970:	461a      	mov	r2, r3
 8011972:	4b13      	ldr	r3, [pc, #76]	; (80119c0 <FATFS_LinkDriverEx+0x94>)
 8011974:	4413      	add	r3, r2
 8011976:	79fa      	ldrb	r2, [r7, #7]
 8011978:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 801197a:	4b11      	ldr	r3, [pc, #68]	; (80119c0 <FATFS_LinkDriverEx+0x94>)
 801197c:	7a5b      	ldrb	r3, [r3, #9]
 801197e:	b2db      	uxtb	r3, r3
 8011980:	1c5a      	adds	r2, r3, #1
 8011982:	b2d1      	uxtb	r1, r2
 8011984:	4a0e      	ldr	r2, [pc, #56]	; (80119c0 <FATFS_LinkDriverEx+0x94>)
 8011986:	7251      	strb	r1, [r2, #9]
 8011988:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 801198a:	7dbb      	ldrb	r3, [r7, #22]
 801198c:	3330      	adds	r3, #48	; 0x30
 801198e:	b2da      	uxtb	r2, r3
 8011990:	68bb      	ldr	r3, [r7, #8]
 8011992:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 8011994:	68bb      	ldr	r3, [r7, #8]
 8011996:	3301      	adds	r3, #1
 8011998:	223a      	movs	r2, #58	; 0x3a
 801199a:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 801199c:	68bb      	ldr	r3, [r7, #8]
 801199e:	3302      	adds	r3, #2
 80119a0:	222f      	movs	r2, #47	; 0x2f
 80119a2:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 80119a4:	68bb      	ldr	r3, [r7, #8]
 80119a6:	3303      	adds	r3, #3
 80119a8:	2200      	movs	r2, #0
 80119aa:	701a      	strb	r2, [r3, #0]
    ret = 0;
 80119ac:	2300      	movs	r3, #0
 80119ae:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 80119b0:	7dfb      	ldrb	r3, [r7, #23]
}
 80119b2:	4618      	mov	r0, r3
 80119b4:	371c      	adds	r7, #28
 80119b6:	46bd      	mov	sp, r7
 80119b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80119bc:	4770      	bx	lr
 80119be:	bf00      	nop
 80119c0:	24000364 	.word	0x24000364

080119c4 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 80119c4:	b580      	push	{r7, lr}
 80119c6:	b082      	sub	sp, #8
 80119c8:	af00      	add	r7, sp, #0
 80119ca:	6078      	str	r0, [r7, #4]
 80119cc:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 80119ce:	2200      	movs	r2, #0
 80119d0:	6839      	ldr	r1, [r7, #0]
 80119d2:	6878      	ldr	r0, [r7, #4]
 80119d4:	f7ff ffaa 	bl	801192c <FATFS_LinkDriverEx>
 80119d8:	4603      	mov	r3, r0
}
 80119da:	4618      	mov	r0, r3
 80119dc:	3708      	adds	r7, #8
 80119de:	46bd      	mov	sp, r7
 80119e0:	bd80      	pop	{r7, pc}
	...

080119e4 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 80119e4:	b580      	push	{r7, lr}
 80119e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 80119e8:	2200      	movs	r2, #0
 80119ea:	4913      	ldr	r1, [pc, #76]	; (8011a38 <MX_USB_DEVICE_Init+0x54>)
 80119ec:	4813      	ldr	r0, [pc, #76]	; (8011a3c <MX_USB_DEVICE_Init+0x58>)
 80119ee:	f7fe fe34 	bl	801065a <USBD_Init>
 80119f2:	4603      	mov	r3, r0
 80119f4:	2b00      	cmp	r3, #0
 80119f6:	d001      	beq.n	80119fc <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 80119f8:	f7ef ff90 	bl	800191c <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CUSTOM_HID) != USBD_OK)
 80119fc:	4910      	ldr	r1, [pc, #64]	; (8011a40 <MX_USB_DEVICE_Init+0x5c>)
 80119fe:	480f      	ldr	r0, [pc, #60]	; (8011a3c <MX_USB_DEVICE_Init+0x58>)
 8011a00:	f7fe fe5b 	bl	80106ba <USBD_RegisterClass>
 8011a04:	4603      	mov	r3, r0
 8011a06:	2b00      	cmp	r3, #0
 8011a08:	d001      	beq.n	8011a0e <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 8011a0a:	f7ef ff87 	bl	800191c <Error_Handler>
  }
  if (USBD_CUSTOM_HID_RegisterInterface(&hUsbDeviceFS, &USBD_CustomHID_fops_FS) != USBD_OK)
 8011a0e:	490d      	ldr	r1, [pc, #52]	; (8011a44 <MX_USB_DEVICE_Init+0x60>)
 8011a10:	480a      	ldr	r0, [pc, #40]	; (8011a3c <MX_USB_DEVICE_Init+0x58>)
 8011a12:	f7fe fe0d 	bl	8010630 <USBD_CUSTOM_HID_RegisterInterface>
 8011a16:	4603      	mov	r3, r0
 8011a18:	2b00      	cmp	r3, #0
 8011a1a:	d001      	beq.n	8011a20 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 8011a1c:	f7ef ff7e 	bl	800191c <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8011a20:	4806      	ldr	r0, [pc, #24]	; (8011a3c <MX_USB_DEVICE_Init+0x58>)
 8011a22:	f7fe fe71 	bl	8010708 <USBD_Start>
 8011a26:	4603      	mov	r3, r0
 8011a28:	2b00      	cmp	r3, #0
 8011a2a:	d001      	beq.n	8011a30 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 8011a2c:	f7ef ff76 	bl	800191c <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */
  HAL_PWREx_EnableUSBVoltageDetector();
 8011a30:	f7f5 f97a 	bl	8006d28 <HAL_PWREx_EnableUSBVoltageDetector>

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8011a34:	bf00      	nop
 8011a36:	bd80      	pop	{r7, pc}
 8011a38:	240000f8 	.word	0x240000f8
 8011a3c:	24000de4 	.word	0x24000de4
 8011a40:	24000010 	.word	0x24000010
 8011a44:	240000e8 	.word	0x240000e8

08011a48 <CUSTOM_HID_Init_FS>:
/**
  * @brief  Initializes the CUSTOM HID media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CUSTOM_HID_Init_FS(void)
{
 8011a48:	b480      	push	{r7}
 8011a4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 8011a4c:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 8011a4e:	4618      	mov	r0, r3
 8011a50:	46bd      	mov	sp, r7
 8011a52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011a56:	4770      	bx	lr

08011a58 <CUSTOM_HID_DeInit_FS>:
/**
  * @brief  DeInitializes the CUSTOM HID media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CUSTOM_HID_DeInit_FS(void)
{
 8011a58:	b480      	push	{r7}
 8011a5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 5 */
  return (USBD_OK);
 8011a5c:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8011a5e:	4618      	mov	r0, r3
 8011a60:	46bd      	mov	sp, r7
 8011a62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011a66:	4770      	bx	lr

08011a68 <CUSTOM_HID_OutEvent_FS>:
  * @param  event_idx: Event index
  * @param  state: Event state
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CUSTOM_HID_OutEvent_FS(uint8_t event_idx, uint8_t state)
{
 8011a68:	b580      	push	{r7, lr}
 8011a6a:	b082      	sub	sp, #8
 8011a6c:	af00      	add	r7, sp, #0
 8011a6e:	4603      	mov	r3, r0
 8011a70:	460a      	mov	r2, r1
 8011a72:	71fb      	strb	r3, [r7, #7]
 8011a74:	4613      	mov	r3, r2
 8011a76:	71bb      	strb	r3, [r7, #6]
  /* USER CODE BEGIN 6 */
  UNUSED(event_idx);
  UNUSED(state);

  /* Start next USB packet transfer once data processing is completed */
  USBD_CUSTOM_HID_ReceivePacket(&hUsbDeviceFS);
 8011a78:	4803      	ldr	r0, [pc, #12]	; (8011a88 <CUSTOM_HID_OutEvent_FS+0x20>)
 8011a7a:	f7fe fd8b 	bl	8010594 <USBD_CUSTOM_HID_ReceivePacket>

  return (USBD_OK);
 8011a7e:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 8011a80:	4618      	mov	r0, r3
 8011a82:	3708      	adds	r7, #8
 8011a84:	46bd      	mov	sp, r7
 8011a86:	bd80      	pop	{r7, pc}
 8011a88:	24000de4 	.word	0x24000de4

08011a8c <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8011a8c:	b480      	push	{r7}
 8011a8e:	b083      	sub	sp, #12
 8011a90:	af00      	add	r7, sp, #0
 8011a92:	4603      	mov	r3, r0
 8011a94:	6039      	str	r1, [r7, #0]
 8011a96:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8011a98:	683b      	ldr	r3, [r7, #0]
 8011a9a:	2212      	movs	r2, #18
 8011a9c:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 8011a9e:	4b03      	ldr	r3, [pc, #12]	; (8011aac <USBD_FS_DeviceDescriptor+0x20>)
}
 8011aa0:	4618      	mov	r0, r3
 8011aa2:	370c      	adds	r7, #12
 8011aa4:	46bd      	mov	sp, r7
 8011aa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011aaa:	4770      	bx	lr
 8011aac:	24000114 	.word	0x24000114

08011ab0 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8011ab0:	b480      	push	{r7}
 8011ab2:	b083      	sub	sp, #12
 8011ab4:	af00      	add	r7, sp, #0
 8011ab6:	4603      	mov	r3, r0
 8011ab8:	6039      	str	r1, [r7, #0]
 8011aba:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8011abc:	683b      	ldr	r3, [r7, #0]
 8011abe:	2204      	movs	r2, #4
 8011ac0:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8011ac2:	4b03      	ldr	r3, [pc, #12]	; (8011ad0 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8011ac4:	4618      	mov	r0, r3
 8011ac6:	370c      	adds	r7, #12
 8011ac8:	46bd      	mov	sp, r7
 8011aca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011ace:	4770      	bx	lr
 8011ad0:	24000128 	.word	0x24000128

08011ad4 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8011ad4:	b580      	push	{r7, lr}
 8011ad6:	b082      	sub	sp, #8
 8011ad8:	af00      	add	r7, sp, #0
 8011ada:	4603      	mov	r3, r0
 8011adc:	6039      	str	r1, [r7, #0]
 8011ade:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8011ae0:	79fb      	ldrb	r3, [r7, #7]
 8011ae2:	2b00      	cmp	r3, #0
 8011ae4:	d105      	bne.n	8011af2 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8011ae6:	683a      	ldr	r2, [r7, #0]
 8011ae8:	4907      	ldr	r1, [pc, #28]	; (8011b08 <USBD_FS_ProductStrDescriptor+0x34>)
 8011aea:	4808      	ldr	r0, [pc, #32]	; (8011b0c <USBD_FS_ProductStrDescriptor+0x38>)
 8011aec:	f7ff fe3d 	bl	801176a <USBD_GetString>
 8011af0:	e004      	b.n	8011afc <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8011af2:	683a      	ldr	r2, [r7, #0]
 8011af4:	4904      	ldr	r1, [pc, #16]	; (8011b08 <USBD_FS_ProductStrDescriptor+0x34>)
 8011af6:	4805      	ldr	r0, [pc, #20]	; (8011b0c <USBD_FS_ProductStrDescriptor+0x38>)
 8011af8:	f7ff fe37 	bl	801176a <USBD_GetString>
  }
  return USBD_StrDesc;
 8011afc:	4b02      	ldr	r3, [pc, #8]	; (8011b08 <USBD_FS_ProductStrDescriptor+0x34>)
}
 8011afe:	4618      	mov	r0, r3
 8011b00:	3708      	adds	r7, #8
 8011b02:	46bd      	mov	sp, r7
 8011b04:	bd80      	pop	{r7, pc}
 8011b06:	bf00      	nop
 8011b08:	240010b4 	.word	0x240010b4
 8011b0c:	08016624 	.word	0x08016624

08011b10 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8011b10:	b580      	push	{r7, lr}
 8011b12:	b082      	sub	sp, #8
 8011b14:	af00      	add	r7, sp, #0
 8011b16:	4603      	mov	r3, r0
 8011b18:	6039      	str	r1, [r7, #0]
 8011b1a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8011b1c:	683a      	ldr	r2, [r7, #0]
 8011b1e:	4904      	ldr	r1, [pc, #16]	; (8011b30 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8011b20:	4804      	ldr	r0, [pc, #16]	; (8011b34 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 8011b22:	f7ff fe22 	bl	801176a <USBD_GetString>
  return USBD_StrDesc;
 8011b26:	4b02      	ldr	r3, [pc, #8]	; (8011b30 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8011b28:	4618      	mov	r0, r3
 8011b2a:	3708      	adds	r7, #8
 8011b2c:	46bd      	mov	sp, r7
 8011b2e:	bd80      	pop	{r7, pc}
 8011b30:	240010b4 	.word	0x240010b4
 8011b34:	08016644 	.word	0x08016644

08011b38 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8011b38:	b580      	push	{r7, lr}
 8011b3a:	b082      	sub	sp, #8
 8011b3c:	af00      	add	r7, sp, #0
 8011b3e:	4603      	mov	r3, r0
 8011b40:	6039      	str	r1, [r7, #0]
 8011b42:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8011b44:	683b      	ldr	r3, [r7, #0]
 8011b46:	221a      	movs	r2, #26
 8011b48:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8011b4a:	f000 f843 	bl	8011bd4 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 8011b4e:	4b02      	ldr	r3, [pc, #8]	; (8011b58 <USBD_FS_SerialStrDescriptor+0x20>)
}
 8011b50:	4618      	mov	r0, r3
 8011b52:	3708      	adds	r7, #8
 8011b54:	46bd      	mov	sp, r7
 8011b56:	bd80      	pop	{r7, pc}
 8011b58:	2400012c 	.word	0x2400012c

08011b5c <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8011b5c:	b580      	push	{r7, lr}
 8011b5e:	b082      	sub	sp, #8
 8011b60:	af00      	add	r7, sp, #0
 8011b62:	4603      	mov	r3, r0
 8011b64:	6039      	str	r1, [r7, #0]
 8011b66:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8011b68:	79fb      	ldrb	r3, [r7, #7]
 8011b6a:	2b00      	cmp	r3, #0
 8011b6c:	d105      	bne.n	8011b7a <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8011b6e:	683a      	ldr	r2, [r7, #0]
 8011b70:	4907      	ldr	r1, [pc, #28]	; (8011b90 <USBD_FS_ConfigStrDescriptor+0x34>)
 8011b72:	4808      	ldr	r0, [pc, #32]	; (8011b94 <USBD_FS_ConfigStrDescriptor+0x38>)
 8011b74:	f7ff fdf9 	bl	801176a <USBD_GetString>
 8011b78:	e004      	b.n	8011b84 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8011b7a:	683a      	ldr	r2, [r7, #0]
 8011b7c:	4904      	ldr	r1, [pc, #16]	; (8011b90 <USBD_FS_ConfigStrDescriptor+0x34>)
 8011b7e:	4805      	ldr	r0, [pc, #20]	; (8011b94 <USBD_FS_ConfigStrDescriptor+0x38>)
 8011b80:	f7ff fdf3 	bl	801176a <USBD_GetString>
  }
  return USBD_StrDesc;
 8011b84:	4b02      	ldr	r3, [pc, #8]	; (8011b90 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 8011b86:	4618      	mov	r0, r3
 8011b88:	3708      	adds	r7, #8
 8011b8a:	46bd      	mov	sp, r7
 8011b8c:	bd80      	pop	{r7, pc}
 8011b8e:	bf00      	nop
 8011b90:	240010b4 	.word	0x240010b4
 8011b94:	08016658 	.word	0x08016658

08011b98 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8011b98:	b580      	push	{r7, lr}
 8011b9a:	b082      	sub	sp, #8
 8011b9c:	af00      	add	r7, sp, #0
 8011b9e:	4603      	mov	r3, r0
 8011ba0:	6039      	str	r1, [r7, #0]
 8011ba2:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8011ba4:	79fb      	ldrb	r3, [r7, #7]
 8011ba6:	2b00      	cmp	r3, #0
 8011ba8:	d105      	bne.n	8011bb6 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8011baa:	683a      	ldr	r2, [r7, #0]
 8011bac:	4907      	ldr	r1, [pc, #28]	; (8011bcc <USBD_FS_InterfaceStrDescriptor+0x34>)
 8011bae:	4808      	ldr	r0, [pc, #32]	; (8011bd0 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8011bb0:	f7ff fddb 	bl	801176a <USBD_GetString>
 8011bb4:	e004      	b.n	8011bc0 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8011bb6:	683a      	ldr	r2, [r7, #0]
 8011bb8:	4904      	ldr	r1, [pc, #16]	; (8011bcc <USBD_FS_InterfaceStrDescriptor+0x34>)
 8011bba:	4805      	ldr	r0, [pc, #20]	; (8011bd0 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8011bbc:	f7ff fdd5 	bl	801176a <USBD_GetString>
  }
  return USBD_StrDesc;
 8011bc0:	4b02      	ldr	r3, [pc, #8]	; (8011bcc <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 8011bc2:	4618      	mov	r0, r3
 8011bc4:	3708      	adds	r7, #8
 8011bc6:	46bd      	mov	sp, r7
 8011bc8:	bd80      	pop	{r7, pc}
 8011bca:	bf00      	nop
 8011bcc:	240010b4 	.word	0x240010b4
 8011bd0:	0801666c 	.word	0x0801666c

08011bd4 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8011bd4:	b580      	push	{r7, lr}
 8011bd6:	b084      	sub	sp, #16
 8011bd8:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8011bda:	4b0f      	ldr	r3, [pc, #60]	; (8011c18 <Get_SerialNum+0x44>)
 8011bdc:	681b      	ldr	r3, [r3, #0]
 8011bde:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8011be0:	4b0e      	ldr	r3, [pc, #56]	; (8011c1c <Get_SerialNum+0x48>)
 8011be2:	681b      	ldr	r3, [r3, #0]
 8011be4:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8011be6:	4b0e      	ldr	r3, [pc, #56]	; (8011c20 <Get_SerialNum+0x4c>)
 8011be8:	681b      	ldr	r3, [r3, #0]
 8011bea:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8011bec:	68fa      	ldr	r2, [r7, #12]
 8011bee:	687b      	ldr	r3, [r7, #4]
 8011bf0:	4413      	add	r3, r2
 8011bf2:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8011bf4:	68fb      	ldr	r3, [r7, #12]
 8011bf6:	2b00      	cmp	r3, #0
 8011bf8:	d009      	beq.n	8011c0e <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8011bfa:	2208      	movs	r2, #8
 8011bfc:	4909      	ldr	r1, [pc, #36]	; (8011c24 <Get_SerialNum+0x50>)
 8011bfe:	68f8      	ldr	r0, [r7, #12]
 8011c00:	f000 f814 	bl	8011c2c <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8011c04:	2204      	movs	r2, #4
 8011c06:	4908      	ldr	r1, [pc, #32]	; (8011c28 <Get_SerialNum+0x54>)
 8011c08:	68b8      	ldr	r0, [r7, #8]
 8011c0a:	f000 f80f 	bl	8011c2c <IntToUnicode>
  }
}
 8011c0e:	bf00      	nop
 8011c10:	3710      	adds	r7, #16
 8011c12:	46bd      	mov	sp, r7
 8011c14:	bd80      	pop	{r7, pc}
 8011c16:	bf00      	nop
 8011c18:	1ff1e800 	.word	0x1ff1e800
 8011c1c:	1ff1e804 	.word	0x1ff1e804
 8011c20:	1ff1e808 	.word	0x1ff1e808
 8011c24:	2400012e 	.word	0x2400012e
 8011c28:	2400013e 	.word	0x2400013e

08011c2c <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8011c2c:	b480      	push	{r7}
 8011c2e:	b087      	sub	sp, #28
 8011c30:	af00      	add	r7, sp, #0
 8011c32:	60f8      	str	r0, [r7, #12]
 8011c34:	60b9      	str	r1, [r7, #8]
 8011c36:	4613      	mov	r3, r2
 8011c38:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8011c3a:	2300      	movs	r3, #0
 8011c3c:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8011c3e:	2300      	movs	r3, #0
 8011c40:	75fb      	strb	r3, [r7, #23]
 8011c42:	e027      	b.n	8011c94 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8011c44:	68fb      	ldr	r3, [r7, #12]
 8011c46:	0f1b      	lsrs	r3, r3, #28
 8011c48:	2b09      	cmp	r3, #9
 8011c4a:	d80b      	bhi.n	8011c64 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8011c4c:	68fb      	ldr	r3, [r7, #12]
 8011c4e:	0f1b      	lsrs	r3, r3, #28
 8011c50:	b2da      	uxtb	r2, r3
 8011c52:	7dfb      	ldrb	r3, [r7, #23]
 8011c54:	005b      	lsls	r3, r3, #1
 8011c56:	4619      	mov	r1, r3
 8011c58:	68bb      	ldr	r3, [r7, #8]
 8011c5a:	440b      	add	r3, r1
 8011c5c:	3230      	adds	r2, #48	; 0x30
 8011c5e:	b2d2      	uxtb	r2, r2
 8011c60:	701a      	strb	r2, [r3, #0]
 8011c62:	e00a      	b.n	8011c7a <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8011c64:	68fb      	ldr	r3, [r7, #12]
 8011c66:	0f1b      	lsrs	r3, r3, #28
 8011c68:	b2da      	uxtb	r2, r3
 8011c6a:	7dfb      	ldrb	r3, [r7, #23]
 8011c6c:	005b      	lsls	r3, r3, #1
 8011c6e:	4619      	mov	r1, r3
 8011c70:	68bb      	ldr	r3, [r7, #8]
 8011c72:	440b      	add	r3, r1
 8011c74:	3237      	adds	r2, #55	; 0x37
 8011c76:	b2d2      	uxtb	r2, r2
 8011c78:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8011c7a:	68fb      	ldr	r3, [r7, #12]
 8011c7c:	011b      	lsls	r3, r3, #4
 8011c7e:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8011c80:	7dfb      	ldrb	r3, [r7, #23]
 8011c82:	005b      	lsls	r3, r3, #1
 8011c84:	3301      	adds	r3, #1
 8011c86:	68ba      	ldr	r2, [r7, #8]
 8011c88:	4413      	add	r3, r2
 8011c8a:	2200      	movs	r2, #0
 8011c8c:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8011c8e:	7dfb      	ldrb	r3, [r7, #23]
 8011c90:	3301      	adds	r3, #1
 8011c92:	75fb      	strb	r3, [r7, #23]
 8011c94:	7dfa      	ldrb	r2, [r7, #23]
 8011c96:	79fb      	ldrb	r3, [r7, #7]
 8011c98:	429a      	cmp	r2, r3
 8011c9a:	d3d3      	bcc.n	8011c44 <IntToUnicode+0x18>
  }
}
 8011c9c:	bf00      	nop
 8011c9e:	bf00      	nop
 8011ca0:	371c      	adds	r7, #28
 8011ca2:	46bd      	mov	sp, r7
 8011ca4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011ca8:	4770      	bx	lr
	...

08011cac <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8011cac:	b580      	push	{r7, lr}
 8011cae:	b0b8      	sub	sp, #224	; 0xe0
 8011cb0:	af00      	add	r7, sp, #0
 8011cb2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8011cb4:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8011cb8:	2200      	movs	r2, #0
 8011cba:	601a      	str	r2, [r3, #0]
 8011cbc:	605a      	str	r2, [r3, #4]
 8011cbe:	609a      	str	r2, [r3, #8]
 8011cc0:	60da      	str	r2, [r3, #12]
 8011cc2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8011cc4:	f107 0310 	add.w	r3, r7, #16
 8011cc8:	22bc      	movs	r2, #188	; 0xbc
 8011cca:	2100      	movs	r1, #0
 8011ccc:	4618      	mov	r0, r3
 8011cce:	f001 fe5d 	bl	801398c <memset>
  if(pcdHandle->Instance==USB_OTG_FS)
 8011cd2:	687b      	ldr	r3, [r7, #4]
 8011cd4:	681b      	ldr	r3, [r3, #0]
 8011cd6:	4a2b      	ldr	r2, [pc, #172]	; (8011d84 <HAL_PCD_MspInit+0xd8>)
 8011cd8:	4293      	cmp	r3, r2
 8011cda:	d14e      	bne.n	8011d7a <HAL_PCD_MspInit+0xce>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USB;
 8011cdc:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8011ce0:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_HSI48;
 8011ce2:	f44f 1340 	mov.w	r3, #3145728	; 0x300000
 8011ce6:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8011cea:	f107 0310 	add.w	r3, r7, #16
 8011cee:	4618      	mov	r0, r3
 8011cf0:	f7f5 ffc6 	bl	8007c80 <HAL_RCCEx_PeriphCLKConfig>
 8011cf4:	4603      	mov	r3, r0
 8011cf6:	2b00      	cmp	r3, #0
 8011cf8:	d001      	beq.n	8011cfe <HAL_PCD_MspInit+0x52>
    {
      Error_Handler();
 8011cfa:	f7ef fe0f 	bl	800191c <Error_Handler>
    }
  /** Enable USB Voltage detector
  */
    HAL_PWREx_EnableUSBVoltageDetector();
 8011cfe:	f7f5 f813 	bl	8006d28 <HAL_PWREx_EnableUSBVoltageDetector>

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8011d02:	4b21      	ldr	r3, [pc, #132]	; (8011d88 <HAL_PCD_MspInit+0xdc>)
 8011d04:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8011d08:	4a1f      	ldr	r2, [pc, #124]	; (8011d88 <HAL_PCD_MspInit+0xdc>)
 8011d0a:	f043 0301 	orr.w	r3, r3, #1
 8011d0e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8011d12:	4b1d      	ldr	r3, [pc, #116]	; (8011d88 <HAL_PCD_MspInit+0xdc>)
 8011d14:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8011d18:	f003 0301 	and.w	r3, r3, #1
 8011d1c:	60fb      	str	r3, [r7, #12]
 8011d1e:	68fb      	ldr	r3, [r7, #12]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8011d20:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8011d24:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8011d28:	2302      	movs	r3, #2
 8011d2a:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8011d2e:	2300      	movs	r3, #0
 8011d30:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8011d34:	2300      	movs	r3, #0
 8011d36:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_FS;
 8011d3a:	230a      	movs	r3, #10
 8011d3c:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8011d40:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8011d44:	4619      	mov	r1, r3
 8011d46:	4811      	ldr	r0, [pc, #68]	; (8011d8c <HAL_PCD_MspInit+0xe0>)
 8011d48:	f7f2 fdfc 	bl	8004944 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8011d4c:	4b0e      	ldr	r3, [pc, #56]	; (8011d88 <HAL_PCD_MspInit+0xdc>)
 8011d4e:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8011d52:	4a0d      	ldr	r2, [pc, #52]	; (8011d88 <HAL_PCD_MspInit+0xdc>)
 8011d54:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8011d58:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8011d5c:	4b0a      	ldr	r3, [pc, #40]	; (8011d88 <HAL_PCD_MspInit+0xdc>)
 8011d5e:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8011d62:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8011d66:	60bb      	str	r3, [r7, #8]
 8011d68:	68bb      	ldr	r3, [r7, #8]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 8011d6a:	2200      	movs	r2, #0
 8011d6c:	2100      	movs	r1, #0
 8011d6e:	2065      	movs	r0, #101	; 0x65
 8011d70:	f7f1 fccd 	bl	800370e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8011d74:	2065      	movs	r0, #101	; 0x65
 8011d76:	f7f1 fce4 	bl	8003742 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8011d7a:	bf00      	nop
 8011d7c:	37e0      	adds	r7, #224	; 0xe0
 8011d7e:	46bd      	mov	sp, r7
 8011d80:	bd80      	pop	{r7, pc}
 8011d82:	bf00      	nop
 8011d84:	40080000 	.word	0x40080000
 8011d88:	58024400 	.word	0x58024400
 8011d8c:	58020000 	.word	0x58020000

08011d90 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8011d90:	b580      	push	{r7, lr}
 8011d92:	b082      	sub	sp, #8
 8011d94:	af00      	add	r7, sp, #0
 8011d96:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8011d98:	687b      	ldr	r3, [r7, #4]
 8011d9a:	f8d3 2404 	ldr.w	r2, [r3, #1028]	; 0x404
 8011d9e:	687b      	ldr	r3, [r7, #4]
 8011da0:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8011da4:	4619      	mov	r1, r3
 8011da6:	4610      	mov	r0, r2
 8011da8:	f7fe fcf9 	bl	801079e <USBD_LL_SetupStage>
}
 8011dac:	bf00      	nop
 8011dae:	3708      	adds	r7, #8
 8011db0:	46bd      	mov	sp, r7
 8011db2:	bd80      	pop	{r7, pc}

08011db4 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8011db4:	b580      	push	{r7, lr}
 8011db6:	b082      	sub	sp, #8
 8011db8:	af00      	add	r7, sp, #0
 8011dba:	6078      	str	r0, [r7, #4]
 8011dbc:	460b      	mov	r3, r1
 8011dbe:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8011dc0:	687b      	ldr	r3, [r7, #4]
 8011dc2:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 8011dc6:	78fa      	ldrb	r2, [r7, #3]
 8011dc8:	6879      	ldr	r1, [r7, #4]
 8011dca:	4613      	mov	r3, r2
 8011dcc:	00db      	lsls	r3, r3, #3
 8011dce:	1a9b      	subs	r3, r3, r2
 8011dd0:	009b      	lsls	r3, r3, #2
 8011dd2:	440b      	add	r3, r1
 8011dd4:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8011dd8:	681a      	ldr	r2, [r3, #0]
 8011dda:	78fb      	ldrb	r3, [r7, #3]
 8011ddc:	4619      	mov	r1, r3
 8011dde:	f7fe fd33 	bl	8010848 <USBD_LL_DataOutStage>
}
 8011de2:	bf00      	nop
 8011de4:	3708      	adds	r7, #8
 8011de6:	46bd      	mov	sp, r7
 8011de8:	bd80      	pop	{r7, pc}

08011dea <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8011dea:	b580      	push	{r7, lr}
 8011dec:	b082      	sub	sp, #8
 8011dee:	af00      	add	r7, sp, #0
 8011df0:	6078      	str	r0, [r7, #4]
 8011df2:	460b      	mov	r3, r1
 8011df4:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8011df6:	687b      	ldr	r3, [r7, #4]
 8011df8:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 8011dfc:	78fa      	ldrb	r2, [r7, #3]
 8011dfe:	6879      	ldr	r1, [r7, #4]
 8011e00:	4613      	mov	r3, r2
 8011e02:	00db      	lsls	r3, r3, #3
 8011e04:	1a9b      	subs	r3, r3, r2
 8011e06:	009b      	lsls	r3, r3, #2
 8011e08:	440b      	add	r3, r1
 8011e0a:	3348      	adds	r3, #72	; 0x48
 8011e0c:	681a      	ldr	r2, [r3, #0]
 8011e0e:	78fb      	ldrb	r3, [r7, #3]
 8011e10:	4619      	mov	r1, r3
 8011e12:	f7fe fd7c 	bl	801090e <USBD_LL_DataInStage>
}
 8011e16:	bf00      	nop
 8011e18:	3708      	adds	r7, #8
 8011e1a:	46bd      	mov	sp, r7
 8011e1c:	bd80      	pop	{r7, pc}

08011e1e <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8011e1e:	b580      	push	{r7, lr}
 8011e20:	b082      	sub	sp, #8
 8011e22:	af00      	add	r7, sp, #0
 8011e24:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8011e26:	687b      	ldr	r3, [r7, #4]
 8011e28:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8011e2c:	4618      	mov	r0, r3
 8011e2e:	f7fe fe90 	bl	8010b52 <USBD_LL_SOF>
}
 8011e32:	bf00      	nop
 8011e34:	3708      	adds	r7, #8
 8011e36:	46bd      	mov	sp, r7
 8011e38:	bd80      	pop	{r7, pc}

08011e3a <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8011e3a:	b580      	push	{r7, lr}
 8011e3c:	b084      	sub	sp, #16
 8011e3e:	af00      	add	r7, sp, #0
 8011e40:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8011e42:	2301      	movs	r3, #1
 8011e44:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 8011e46:	687b      	ldr	r3, [r7, #4]
 8011e48:	68db      	ldr	r3, [r3, #12]
 8011e4a:	2b00      	cmp	r3, #0
 8011e4c:	d102      	bne.n	8011e54 <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 8011e4e:	2300      	movs	r3, #0
 8011e50:	73fb      	strb	r3, [r7, #15]
 8011e52:	e008      	b.n	8011e66 <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 8011e54:	687b      	ldr	r3, [r7, #4]
 8011e56:	68db      	ldr	r3, [r3, #12]
 8011e58:	2b02      	cmp	r3, #2
 8011e5a:	d102      	bne.n	8011e62 <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 8011e5c:	2301      	movs	r3, #1
 8011e5e:	73fb      	strb	r3, [r7, #15]
 8011e60:	e001      	b.n	8011e66 <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 8011e62:	f7ef fd5b 	bl	800191c <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8011e66:	687b      	ldr	r3, [r7, #4]
 8011e68:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8011e6c:	7bfa      	ldrb	r2, [r7, #15]
 8011e6e:	4611      	mov	r1, r2
 8011e70:	4618      	mov	r0, r3
 8011e72:	f7fe fe30 	bl	8010ad6 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8011e76:	687b      	ldr	r3, [r7, #4]
 8011e78:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8011e7c:	4618      	mov	r0, r3
 8011e7e:	f7fe fddc 	bl	8010a3a <USBD_LL_Reset>
}
 8011e82:	bf00      	nop
 8011e84:	3710      	adds	r7, #16
 8011e86:	46bd      	mov	sp, r7
 8011e88:	bd80      	pop	{r7, pc}
	...

08011e8c <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8011e8c:	b580      	push	{r7, lr}
 8011e8e:	b082      	sub	sp, #8
 8011e90:	af00      	add	r7, sp, #0
 8011e92:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8011e94:	687b      	ldr	r3, [r7, #4]
 8011e96:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8011e9a:	4618      	mov	r0, r3
 8011e9c:	f7fe fe2b 	bl	8010af6 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8011ea0:	687b      	ldr	r3, [r7, #4]
 8011ea2:	681b      	ldr	r3, [r3, #0]
 8011ea4:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8011ea8:	681b      	ldr	r3, [r3, #0]
 8011eaa:	687a      	ldr	r2, [r7, #4]
 8011eac:	6812      	ldr	r2, [r2, #0]
 8011eae:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8011eb2:	f043 0301 	orr.w	r3, r3, #1
 8011eb6:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8011eb8:	687b      	ldr	r3, [r7, #4]
 8011eba:	6a1b      	ldr	r3, [r3, #32]
 8011ebc:	2b00      	cmp	r3, #0
 8011ebe:	d005      	beq.n	8011ecc <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8011ec0:	4b04      	ldr	r3, [pc, #16]	; (8011ed4 <HAL_PCD_SuspendCallback+0x48>)
 8011ec2:	691b      	ldr	r3, [r3, #16]
 8011ec4:	4a03      	ldr	r2, [pc, #12]	; (8011ed4 <HAL_PCD_SuspendCallback+0x48>)
 8011ec6:	f043 0306 	orr.w	r3, r3, #6
 8011eca:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8011ecc:	bf00      	nop
 8011ece:	3708      	adds	r7, #8
 8011ed0:	46bd      	mov	sp, r7
 8011ed2:	bd80      	pop	{r7, pc}
 8011ed4:	e000ed00 	.word	0xe000ed00

08011ed8 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8011ed8:	b580      	push	{r7, lr}
 8011eda:	b082      	sub	sp, #8
 8011edc:	af00      	add	r7, sp, #0
 8011ede:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8011ee0:	687b      	ldr	r3, [r7, #4]
 8011ee2:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8011ee6:	4618      	mov	r0, r3
 8011ee8:	f7fe fe1b 	bl	8010b22 <USBD_LL_Resume>
}
 8011eec:	bf00      	nop
 8011eee:	3708      	adds	r7, #8
 8011ef0:	46bd      	mov	sp, r7
 8011ef2:	bd80      	pop	{r7, pc}

08011ef4 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8011ef4:	b580      	push	{r7, lr}
 8011ef6:	b082      	sub	sp, #8
 8011ef8:	af00      	add	r7, sp, #0
 8011efa:	6078      	str	r0, [r7, #4]
 8011efc:	460b      	mov	r3, r1
 8011efe:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8011f00:	687b      	ldr	r3, [r7, #4]
 8011f02:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8011f06:	78fa      	ldrb	r2, [r7, #3]
 8011f08:	4611      	mov	r1, r2
 8011f0a:	4618      	mov	r0, r3
 8011f0c:	f7fe fe69 	bl	8010be2 <USBD_LL_IsoOUTIncomplete>
}
 8011f10:	bf00      	nop
 8011f12:	3708      	adds	r7, #8
 8011f14:	46bd      	mov	sp, r7
 8011f16:	bd80      	pop	{r7, pc}

08011f18 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8011f18:	b580      	push	{r7, lr}
 8011f1a:	b082      	sub	sp, #8
 8011f1c:	af00      	add	r7, sp, #0
 8011f1e:	6078      	str	r0, [r7, #4]
 8011f20:	460b      	mov	r3, r1
 8011f22:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8011f24:	687b      	ldr	r3, [r7, #4]
 8011f26:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8011f2a:	78fa      	ldrb	r2, [r7, #3]
 8011f2c:	4611      	mov	r1, r2
 8011f2e:	4618      	mov	r0, r3
 8011f30:	f7fe fe31 	bl	8010b96 <USBD_LL_IsoINIncomplete>
}
 8011f34:	bf00      	nop
 8011f36:	3708      	adds	r7, #8
 8011f38:	46bd      	mov	sp, r7
 8011f3a:	bd80      	pop	{r7, pc}

08011f3c <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8011f3c:	b580      	push	{r7, lr}
 8011f3e:	b082      	sub	sp, #8
 8011f40:	af00      	add	r7, sp, #0
 8011f42:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 8011f44:	687b      	ldr	r3, [r7, #4]
 8011f46:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8011f4a:	4618      	mov	r0, r3
 8011f4c:	f7fe fe6f 	bl	8010c2e <USBD_LL_DevConnected>
}
 8011f50:	bf00      	nop
 8011f52:	3708      	adds	r7, #8
 8011f54:	46bd      	mov	sp, r7
 8011f56:	bd80      	pop	{r7, pc}

08011f58 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8011f58:	b580      	push	{r7, lr}
 8011f5a:	b082      	sub	sp, #8
 8011f5c:	af00      	add	r7, sp, #0
 8011f5e:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 8011f60:	687b      	ldr	r3, [r7, #4]
 8011f62:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8011f66:	4618      	mov	r0, r3
 8011f68:	f7fe fe6c 	bl	8010c44 <USBD_LL_DevDisconnected>
}
 8011f6c:	bf00      	nop
 8011f6e:	3708      	adds	r7, #8
 8011f70:	46bd      	mov	sp, r7
 8011f72:	bd80      	pop	{r7, pc}

08011f74 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8011f74:	b580      	push	{r7, lr}
 8011f76:	b082      	sub	sp, #8
 8011f78:	af00      	add	r7, sp, #0
 8011f7a:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 8011f7c:	687b      	ldr	r3, [r7, #4]
 8011f7e:	781b      	ldrb	r3, [r3, #0]
 8011f80:	2b00      	cmp	r3, #0
 8011f82:	d13e      	bne.n	8012002 <USBD_LL_Init+0x8e>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 8011f84:	4a21      	ldr	r2, [pc, #132]	; (801200c <USBD_LL_Init+0x98>)
 8011f86:	687b      	ldr	r3, [r7, #4]
 8011f88:	f8c2 3404 	str.w	r3, [r2, #1028]	; 0x404
  pdev->pData = &hpcd_USB_OTG_FS;
 8011f8c:	687b      	ldr	r3, [r7, #4]
 8011f8e:	4a1f      	ldr	r2, [pc, #124]	; (801200c <USBD_LL_Init+0x98>)
 8011f90:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8011f94:	4b1d      	ldr	r3, [pc, #116]	; (801200c <USBD_LL_Init+0x98>)
 8011f96:	4a1e      	ldr	r2, [pc, #120]	; (8012010 <USBD_LL_Init+0x9c>)
 8011f98:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 9;
 8011f9a:	4b1c      	ldr	r3, [pc, #112]	; (801200c <USBD_LL_Init+0x98>)
 8011f9c:	2209      	movs	r2, #9
 8011f9e:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8011fa0:	4b1a      	ldr	r3, [pc, #104]	; (801200c <USBD_LL_Init+0x98>)
 8011fa2:	2202      	movs	r2, #2
 8011fa4:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8011fa6:	4b19      	ldr	r3, [pc, #100]	; (801200c <USBD_LL_Init+0x98>)
 8011fa8:	2200      	movs	r2, #0
 8011faa:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8011fac:	4b17      	ldr	r3, [pc, #92]	; (801200c <USBD_LL_Init+0x98>)
 8011fae:	2202      	movs	r2, #2
 8011fb0:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 8011fb2:	4b16      	ldr	r3, [pc, #88]	; (801200c <USBD_LL_Init+0x98>)
 8011fb4:	2201      	movs	r2, #1
 8011fb6:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8011fb8:	4b14      	ldr	r3, [pc, #80]	; (801200c <USBD_LL_Init+0x98>)
 8011fba:	2200      	movs	r2, #0
 8011fbc:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8011fbe:	4b13      	ldr	r3, [pc, #76]	; (801200c <USBD_LL_Init+0x98>)
 8011fc0:	2200      	movs	r2, #0
 8011fc2:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.battery_charging_enable = DISABLE;
 8011fc4:	4b11      	ldr	r3, [pc, #68]	; (801200c <USBD_LL_Init+0x98>)
 8011fc6:	2200      	movs	r2, #0
 8011fc8:	629a      	str	r2, [r3, #40]	; 0x28
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 8011fca:	4b10      	ldr	r3, [pc, #64]	; (801200c <USBD_LL_Init+0x98>)
 8011fcc:	2200      	movs	r2, #0
 8011fce:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8011fd0:	4b0e      	ldr	r3, [pc, #56]	; (801200c <USBD_LL_Init+0x98>)
 8011fd2:	2200      	movs	r2, #0
 8011fd4:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8011fd6:	480d      	ldr	r0, [pc, #52]	; (801200c <USBD_LL_Init+0x98>)
 8011fd8:	f7f3 fca8 	bl	800592c <HAL_PCD_Init>
 8011fdc:	4603      	mov	r3, r0
 8011fde:	2b00      	cmp	r3, #0
 8011fe0:	d001      	beq.n	8011fe6 <USBD_LL_Init+0x72>
  {
    Error_Handler( );
 8011fe2:	f7ef fc9b 	bl	800191c <Error_Handler>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN TxRx_Configuration */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 8011fe6:	2180      	movs	r1, #128	; 0x80
 8011fe8:	4808      	ldr	r0, [pc, #32]	; (801200c <USBD_LL_Init+0x98>)
 8011fea:	f7f4 fe22 	bl	8006c32 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 8011fee:	2240      	movs	r2, #64	; 0x40
 8011ff0:	2100      	movs	r1, #0
 8011ff2:	4806      	ldr	r0, [pc, #24]	; (801200c <USBD_LL_Init+0x98>)
 8011ff4:	f7f4 fdd6 	bl	8006ba4 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 8011ff8:	2280      	movs	r2, #128	; 0x80
 8011ffa:	2101      	movs	r1, #1
 8011ffc:	4803      	ldr	r0, [pc, #12]	; (801200c <USBD_LL_Init+0x98>)
 8011ffe:	f7f4 fdd1 	bl	8006ba4 <HAL_PCDEx_SetTxFiFo>
  /* USER CODE END TxRx_Configuration */
  }
  return USBD_OK;
 8012002:	2300      	movs	r3, #0
}
 8012004:	4618      	mov	r0, r3
 8012006:	3708      	adds	r7, #8
 8012008:	46bd      	mov	sp, r7
 801200a:	bd80      	pop	{r7, pc}
 801200c:	240012b4 	.word	0x240012b4
 8012010:	40080000 	.word	0x40080000

08012014 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8012014:	b580      	push	{r7, lr}
 8012016:	b084      	sub	sp, #16
 8012018:	af00      	add	r7, sp, #0
 801201a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801201c:	2300      	movs	r3, #0
 801201e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8012020:	2300      	movs	r3, #0
 8012022:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 8012024:	687b      	ldr	r3, [r7, #4]
 8012026:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 801202a:	4618      	mov	r0, r3
 801202c:	f7f3 fda2 	bl	8005b74 <HAL_PCD_Start>
 8012030:	4603      	mov	r3, r0
 8012032:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8012034:	7bfb      	ldrb	r3, [r7, #15]
 8012036:	4618      	mov	r0, r3
 8012038:	f000 f930 	bl	801229c <USBD_Get_USB_Status>
 801203c:	4603      	mov	r3, r0
 801203e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8012040:	7bbb      	ldrb	r3, [r7, #14]
}
 8012042:	4618      	mov	r0, r3
 8012044:	3710      	adds	r7, #16
 8012046:	46bd      	mov	sp, r7
 8012048:	bd80      	pop	{r7, pc}

0801204a <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 801204a:	b580      	push	{r7, lr}
 801204c:	b084      	sub	sp, #16
 801204e:	af00      	add	r7, sp, #0
 8012050:	6078      	str	r0, [r7, #4]
 8012052:	4608      	mov	r0, r1
 8012054:	4611      	mov	r1, r2
 8012056:	461a      	mov	r2, r3
 8012058:	4603      	mov	r3, r0
 801205a:	70fb      	strb	r3, [r7, #3]
 801205c:	460b      	mov	r3, r1
 801205e:	70bb      	strb	r3, [r7, #2]
 8012060:	4613      	mov	r3, r2
 8012062:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8012064:	2300      	movs	r3, #0
 8012066:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8012068:	2300      	movs	r3, #0
 801206a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 801206c:	687b      	ldr	r3, [r7, #4]
 801206e:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8012072:	78bb      	ldrb	r3, [r7, #2]
 8012074:	883a      	ldrh	r2, [r7, #0]
 8012076:	78f9      	ldrb	r1, [r7, #3]
 8012078:	f7f4 f9b3 	bl	80063e2 <HAL_PCD_EP_Open>
 801207c:	4603      	mov	r3, r0
 801207e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8012080:	7bfb      	ldrb	r3, [r7, #15]
 8012082:	4618      	mov	r0, r3
 8012084:	f000 f90a 	bl	801229c <USBD_Get_USB_Status>
 8012088:	4603      	mov	r3, r0
 801208a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 801208c:	7bbb      	ldrb	r3, [r7, #14]
}
 801208e:	4618      	mov	r0, r3
 8012090:	3710      	adds	r7, #16
 8012092:	46bd      	mov	sp, r7
 8012094:	bd80      	pop	{r7, pc}

08012096 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8012096:	b580      	push	{r7, lr}
 8012098:	b084      	sub	sp, #16
 801209a:	af00      	add	r7, sp, #0
 801209c:	6078      	str	r0, [r7, #4]
 801209e:	460b      	mov	r3, r1
 80120a0:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80120a2:	2300      	movs	r3, #0
 80120a4:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80120a6:	2300      	movs	r3, #0
 80120a8:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 80120aa:	687b      	ldr	r3, [r7, #4]
 80120ac:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 80120b0:	78fa      	ldrb	r2, [r7, #3]
 80120b2:	4611      	mov	r1, r2
 80120b4:	4618      	mov	r0, r3
 80120b6:	f7f4 f9fc 	bl	80064b2 <HAL_PCD_EP_Close>
 80120ba:	4603      	mov	r3, r0
 80120bc:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80120be:	7bfb      	ldrb	r3, [r7, #15]
 80120c0:	4618      	mov	r0, r3
 80120c2:	f000 f8eb 	bl	801229c <USBD_Get_USB_Status>
 80120c6:	4603      	mov	r3, r0
 80120c8:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80120ca:	7bbb      	ldrb	r3, [r7, #14]
}
 80120cc:	4618      	mov	r0, r3
 80120ce:	3710      	adds	r7, #16
 80120d0:	46bd      	mov	sp, r7
 80120d2:	bd80      	pop	{r7, pc}

080120d4 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80120d4:	b580      	push	{r7, lr}
 80120d6:	b084      	sub	sp, #16
 80120d8:	af00      	add	r7, sp, #0
 80120da:	6078      	str	r0, [r7, #4]
 80120dc:	460b      	mov	r3, r1
 80120de:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80120e0:	2300      	movs	r3, #0
 80120e2:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80120e4:	2300      	movs	r3, #0
 80120e6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 80120e8:	687b      	ldr	r3, [r7, #4]
 80120ea:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 80120ee:	78fa      	ldrb	r2, [r7, #3]
 80120f0:	4611      	mov	r1, r2
 80120f2:	4618      	mov	r0, r3
 80120f4:	f7f4 fabc 	bl	8006670 <HAL_PCD_EP_SetStall>
 80120f8:	4603      	mov	r3, r0
 80120fa:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80120fc:	7bfb      	ldrb	r3, [r7, #15]
 80120fe:	4618      	mov	r0, r3
 8012100:	f000 f8cc 	bl	801229c <USBD_Get_USB_Status>
 8012104:	4603      	mov	r3, r0
 8012106:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8012108:	7bbb      	ldrb	r3, [r7, #14]
}
 801210a:	4618      	mov	r0, r3
 801210c:	3710      	adds	r7, #16
 801210e:	46bd      	mov	sp, r7
 8012110:	bd80      	pop	{r7, pc}

08012112 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8012112:	b580      	push	{r7, lr}
 8012114:	b084      	sub	sp, #16
 8012116:	af00      	add	r7, sp, #0
 8012118:	6078      	str	r0, [r7, #4]
 801211a:	460b      	mov	r3, r1
 801211c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801211e:	2300      	movs	r3, #0
 8012120:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8012122:	2300      	movs	r3, #0
 8012124:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8012126:	687b      	ldr	r3, [r7, #4]
 8012128:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 801212c:	78fa      	ldrb	r2, [r7, #3]
 801212e:	4611      	mov	r1, r2
 8012130:	4618      	mov	r0, r3
 8012132:	f7f4 fb01 	bl	8006738 <HAL_PCD_EP_ClrStall>
 8012136:	4603      	mov	r3, r0
 8012138:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801213a:	7bfb      	ldrb	r3, [r7, #15]
 801213c:	4618      	mov	r0, r3
 801213e:	f000 f8ad 	bl	801229c <USBD_Get_USB_Status>
 8012142:	4603      	mov	r3, r0
 8012144:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8012146:	7bbb      	ldrb	r3, [r7, #14]
}
 8012148:	4618      	mov	r0, r3
 801214a:	3710      	adds	r7, #16
 801214c:	46bd      	mov	sp, r7
 801214e:	bd80      	pop	{r7, pc}

08012150 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8012150:	b480      	push	{r7}
 8012152:	b085      	sub	sp, #20
 8012154:	af00      	add	r7, sp, #0
 8012156:	6078      	str	r0, [r7, #4]
 8012158:	460b      	mov	r3, r1
 801215a:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 801215c:	687b      	ldr	r3, [r7, #4]
 801215e:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8012162:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8012164:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8012168:	2b00      	cmp	r3, #0
 801216a:	da0b      	bge.n	8012184 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 801216c:	78fb      	ldrb	r3, [r7, #3]
 801216e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8012172:	68f9      	ldr	r1, [r7, #12]
 8012174:	4613      	mov	r3, r2
 8012176:	00db      	lsls	r3, r3, #3
 8012178:	1a9b      	subs	r3, r3, r2
 801217a:	009b      	lsls	r3, r3, #2
 801217c:	440b      	add	r3, r1
 801217e:	333e      	adds	r3, #62	; 0x3e
 8012180:	781b      	ldrb	r3, [r3, #0]
 8012182:	e00b      	b.n	801219c <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8012184:	78fb      	ldrb	r3, [r7, #3]
 8012186:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 801218a:	68f9      	ldr	r1, [r7, #12]
 801218c:	4613      	mov	r3, r2
 801218e:	00db      	lsls	r3, r3, #3
 8012190:	1a9b      	subs	r3, r3, r2
 8012192:	009b      	lsls	r3, r3, #2
 8012194:	440b      	add	r3, r1
 8012196:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 801219a:	781b      	ldrb	r3, [r3, #0]
  }
}
 801219c:	4618      	mov	r0, r3
 801219e:	3714      	adds	r7, #20
 80121a0:	46bd      	mov	sp, r7
 80121a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80121a6:	4770      	bx	lr

080121a8 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 80121a8:	b580      	push	{r7, lr}
 80121aa:	b084      	sub	sp, #16
 80121ac:	af00      	add	r7, sp, #0
 80121ae:	6078      	str	r0, [r7, #4]
 80121b0:	460b      	mov	r3, r1
 80121b2:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80121b4:	2300      	movs	r3, #0
 80121b6:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80121b8:	2300      	movs	r3, #0
 80121ba:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 80121bc:	687b      	ldr	r3, [r7, #4]
 80121be:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 80121c2:	78fa      	ldrb	r2, [r7, #3]
 80121c4:	4611      	mov	r1, r2
 80121c6:	4618      	mov	r0, r3
 80121c8:	f7f4 f8e6 	bl	8006398 <HAL_PCD_SetAddress>
 80121cc:	4603      	mov	r3, r0
 80121ce:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80121d0:	7bfb      	ldrb	r3, [r7, #15]
 80121d2:	4618      	mov	r0, r3
 80121d4:	f000 f862 	bl	801229c <USBD_Get_USB_Status>
 80121d8:	4603      	mov	r3, r0
 80121da:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80121dc:	7bbb      	ldrb	r3, [r7, #14]
}
 80121de:	4618      	mov	r0, r3
 80121e0:	3710      	adds	r7, #16
 80121e2:	46bd      	mov	sp, r7
 80121e4:	bd80      	pop	{r7, pc}

080121e6 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 80121e6:	b580      	push	{r7, lr}
 80121e8:	b086      	sub	sp, #24
 80121ea:	af00      	add	r7, sp, #0
 80121ec:	60f8      	str	r0, [r7, #12]
 80121ee:	607a      	str	r2, [r7, #4]
 80121f0:	603b      	str	r3, [r7, #0]
 80121f2:	460b      	mov	r3, r1
 80121f4:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80121f6:	2300      	movs	r3, #0
 80121f8:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80121fa:	2300      	movs	r3, #0
 80121fc:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 80121fe:	68fb      	ldr	r3, [r7, #12]
 8012200:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8012204:	7af9      	ldrb	r1, [r7, #11]
 8012206:	683b      	ldr	r3, [r7, #0]
 8012208:	687a      	ldr	r2, [r7, #4]
 801220a:	f7f4 f9e7 	bl	80065dc <HAL_PCD_EP_Transmit>
 801220e:	4603      	mov	r3, r0
 8012210:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8012212:	7dfb      	ldrb	r3, [r7, #23]
 8012214:	4618      	mov	r0, r3
 8012216:	f000 f841 	bl	801229c <USBD_Get_USB_Status>
 801221a:	4603      	mov	r3, r0
 801221c:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 801221e:	7dbb      	ldrb	r3, [r7, #22]
}
 8012220:	4618      	mov	r0, r3
 8012222:	3718      	adds	r7, #24
 8012224:	46bd      	mov	sp, r7
 8012226:	bd80      	pop	{r7, pc}

08012228 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8012228:	b580      	push	{r7, lr}
 801222a:	b086      	sub	sp, #24
 801222c:	af00      	add	r7, sp, #0
 801222e:	60f8      	str	r0, [r7, #12]
 8012230:	607a      	str	r2, [r7, #4]
 8012232:	603b      	str	r3, [r7, #0]
 8012234:	460b      	mov	r3, r1
 8012236:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8012238:	2300      	movs	r3, #0
 801223a:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801223c:	2300      	movs	r3, #0
 801223e:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8012240:	68fb      	ldr	r3, [r7, #12]
 8012242:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8012246:	7af9      	ldrb	r1, [r7, #11]
 8012248:	683b      	ldr	r3, [r7, #0]
 801224a:	687a      	ldr	r2, [r7, #4]
 801224c:	f7f4 f97b 	bl	8006546 <HAL_PCD_EP_Receive>
 8012250:	4603      	mov	r3, r0
 8012252:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8012254:	7dfb      	ldrb	r3, [r7, #23]
 8012256:	4618      	mov	r0, r3
 8012258:	f000 f820 	bl	801229c <USBD_Get_USB_Status>
 801225c:	4603      	mov	r3, r0
 801225e:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8012260:	7dbb      	ldrb	r3, [r7, #22]
}
 8012262:	4618      	mov	r0, r3
 8012264:	3718      	adds	r7, #24
 8012266:	46bd      	mov	sp, r7
 8012268:	bd80      	pop	{r7, pc}
	...

0801226c <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 801226c:	b480      	push	{r7}
 801226e:	b083      	sub	sp, #12
 8012270:	af00      	add	r7, sp, #0
 8012272:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CUSTOM_HID_HandleTypeDef)/4+1)];/* On 32-bit boundary */
  return mem;
 8012274:	4b03      	ldr	r3, [pc, #12]	; (8012284 <USBD_static_malloc+0x18>)
}
 8012276:	4618      	mov	r0, r3
 8012278:	370c      	adds	r7, #12
 801227a:	46bd      	mov	sp, r7
 801227c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012280:	4770      	bx	lr
 8012282:	bf00      	nop
 8012284:	24000370 	.word	0x24000370

08012288 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8012288:	b480      	push	{r7}
 801228a:	b083      	sub	sp, #12
 801228c:	af00      	add	r7, sp, #0
 801228e:	6078      	str	r0, [r7, #4]

}
 8012290:	bf00      	nop
 8012292:	370c      	adds	r7, #12
 8012294:	46bd      	mov	sp, r7
 8012296:	f85d 7b04 	ldr.w	r7, [sp], #4
 801229a:	4770      	bx	lr

0801229c <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 801229c:	b480      	push	{r7}
 801229e:	b085      	sub	sp, #20
 80122a0:	af00      	add	r7, sp, #0
 80122a2:	4603      	mov	r3, r0
 80122a4:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80122a6:	2300      	movs	r3, #0
 80122a8:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 80122aa:	79fb      	ldrb	r3, [r7, #7]
 80122ac:	2b03      	cmp	r3, #3
 80122ae:	d817      	bhi.n	80122e0 <USBD_Get_USB_Status+0x44>
 80122b0:	a201      	add	r2, pc, #4	; (adr r2, 80122b8 <USBD_Get_USB_Status+0x1c>)
 80122b2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80122b6:	bf00      	nop
 80122b8:	080122c9 	.word	0x080122c9
 80122bc:	080122cf 	.word	0x080122cf
 80122c0:	080122d5 	.word	0x080122d5
 80122c4:	080122db 	.word	0x080122db
  {
    case HAL_OK :
      usb_status = USBD_OK;
 80122c8:	2300      	movs	r3, #0
 80122ca:	73fb      	strb	r3, [r7, #15]
    break;
 80122cc:	e00b      	b.n	80122e6 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 80122ce:	2303      	movs	r3, #3
 80122d0:	73fb      	strb	r3, [r7, #15]
    break;
 80122d2:	e008      	b.n	80122e6 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 80122d4:	2301      	movs	r3, #1
 80122d6:	73fb      	strb	r3, [r7, #15]
    break;
 80122d8:	e005      	b.n	80122e6 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 80122da:	2303      	movs	r3, #3
 80122dc:	73fb      	strb	r3, [r7, #15]
    break;
 80122de:	e002      	b.n	80122e6 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 80122e0:	2303      	movs	r3, #3
 80122e2:	73fb      	strb	r3, [r7, #15]
    break;
 80122e4:	bf00      	nop
  }
  return usb_status;
 80122e6:	7bfb      	ldrb	r3, [r7, #15]
}
 80122e8:	4618      	mov	r0, r3
 80122ea:	3714      	adds	r7, #20
 80122ec:	46bd      	mov	sp, r7
 80122ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80122f2:	4770      	bx	lr

080122f4 <CORE_Delay>:

#include "common/processor.h"

#include <string.h>

void CORE_Delay(uint32_t ms) {
 80122f4:	b580      	push	{r7, lr}
 80122f6:	b082      	sub	sp, #8
 80122f8:	af00      	add	r7, sp, #0
 80122fa:	6078      	str	r0, [r7, #4]
    HAL_Delay(ms);
 80122fc:	6878      	ldr	r0, [r7, #4]
 80122fe:	f7f0 f85d 	bl	80023bc <HAL_Delay>
}
 8012302:	bf00      	nop
 8012304:	3708      	adds	r7, #8
 8012306:	46bd      	mov	sp, r7
 8012308:	bd80      	pop	{r7, pc}
	...

0801230c <LOG_SetDestination>:
#include <stdarg.h>
#include <stdio.h>

static LOG_Stream_t m_stream;

void LOG_SetDestination(LOG_Stream_t stream) {
 801230c:	b480      	push	{r7}
 801230e:	b083      	sub	sp, #12
 8012310:	af00      	add	r7, sp, #0
 8012312:	6078      	str	r0, [r7, #4]
	m_stream = stream;
 8012314:	4a04      	ldr	r2, [pc, #16]	; (8012328 <LOG_SetDestination+0x1c>)
 8012316:	687b      	ldr	r3, [r7, #4]
 8012318:	6013      	str	r3, [r2, #0]
}
 801231a:	bf00      	nop
 801231c:	370c      	adds	r7, #12
 801231e:	46bd      	mov	sp, r7
 8012320:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012324:	4770      	bx	lr
 8012326:	bf00      	nop
 8012328:	2400038c 	.word	0x2400038c

0801232c <LOG_VPrint>:
LOG_Stream_t LOG_GetDestination(void) {
	return m_stream;
}


static void LOG_VPrint(bool new_line, const char *fmt, va_list args) {
 801232c:	b580      	push	{r7, lr}
 801232e:	f5ad 7d06 	sub.w	sp, sp, #536	; 0x218
 8012332:	af00      	add	r7, sp, #0
 8012334:	f107 0308 	add.w	r3, r7, #8
 8012338:	6019      	str	r1, [r3, #0]
 801233a:	1d3b      	adds	r3, r7, #4
 801233c:	601a      	str	r2, [r3, #0]
 801233e:	f107 030f 	add.w	r3, r7, #15
 8012342:	4602      	mov	r2, r0
 8012344:	701a      	strb	r2, [r3, #0]
	if (m_stream == NULL) return;
 8012346:	4b0f      	ldr	r3, [pc, #60]	; (8012384 <LOG_VPrint+0x58>)
 8012348:	681b      	ldr	r3, [r3, #0]
 801234a:	2b00      	cmp	r3, #0
 801234c:	d014      	beq.n	8012378 <LOG_VPrint+0x4c>

	char buffer[LOGGER_MAX_CHARACTERS + 1];
	vsnprintf(buffer, LOGGER_MAX_CHARACTERS, fmt, args);
 801234e:	1d3b      	adds	r3, r7, #4
 8012350:	f107 0208 	add.w	r2, r7, #8
 8012354:	f107 0014 	add.w	r0, r7, #20
 8012358:	681b      	ldr	r3, [r3, #0]
 801235a:	6812      	ldr	r2, [r2, #0]
 801235c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8012360:	f001 ff8c 	bl	801427c <vsniprintf>
	m_stream(buffer, new_line);
 8012364:	4b07      	ldr	r3, [pc, #28]	; (8012384 <LOG_VPrint+0x58>)
 8012366:	681b      	ldr	r3, [r3, #0]
 8012368:	f107 020f 	add.w	r2, r7, #15
 801236c:	7811      	ldrb	r1, [r2, #0]
 801236e:	f107 0214 	add.w	r2, r7, #20
 8012372:	4610      	mov	r0, r2
 8012374:	4798      	blx	r3
 8012376:	e000      	b.n	801237a <LOG_VPrint+0x4e>
	if (m_stream == NULL) return;
 8012378:	bf00      	nop
}
 801237a:	f507 7706 	add.w	r7, r7, #536	; 0x218
 801237e:	46bd      	mov	sp, r7
 8012380:	bd80      	pop	{r7, pc}
 8012382:	bf00      	nop
 8012384:	2400038c 	.word	0x2400038c

08012388 <LOG_Print>:

void LOG_Print(bool new_line, const char *fmt, ...) {
 8012388:	b40e      	push	{r1, r2, r3}
 801238a:	b580      	push	{r7, lr}
 801238c:	b085      	sub	sp, #20
 801238e:	af00      	add	r7, sp, #0
 8012390:	4603      	mov	r3, r0
 8012392:	71fb      	strb	r3, [r7, #7]
	va_list args;
	va_start(args, fmt);
 8012394:	f107 0320 	add.w	r3, r7, #32
 8012398:	60fb      	str	r3, [r7, #12]
	LOG_VPrint(new_line, fmt, args);
 801239a:	79fb      	ldrb	r3, [r7, #7]
 801239c:	68fa      	ldr	r2, [r7, #12]
 801239e:	69f9      	ldr	r1, [r7, #28]
 80123a0:	4618      	mov	r0, r3
 80123a2:	f7ff ffc3 	bl	801232c <LOG_VPrint>
	va_end(args);
}
 80123a6:	bf00      	nop
 80123a8:	3714      	adds	r7, #20
 80123aa:	46bd      	mov	sp, r7
 80123ac:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80123b0:	b003      	add	sp, #12
 80123b2:	4770      	bx	lr

080123b4 <LOG_Info>:
		va_end(args);

	#endif
}

void LOG_Info(const char *fmt, ...) {
 80123b4:	b40f      	push	{r0, r1, r2, r3}
 80123b6:	b580      	push	{r7, lr}
 80123b8:	b082      	sub	sp, #8
 80123ba:	af00      	add	r7, sp, #0
	va_list args;
	va_start(args, fmt);
 80123bc:	f107 0314 	add.w	r3, r7, #20
 80123c0:	607b      	str	r3, [r7, #4]
	LOG_Print(false, "[INFO]  ");
 80123c2:	4908      	ldr	r1, [pc, #32]	; (80123e4 <LOG_Info+0x30>)
 80123c4:	2000      	movs	r0, #0
 80123c6:	f7ff ffdf 	bl	8012388 <LOG_Print>
	LOG_VPrint(true, fmt, args);
 80123ca:	687a      	ldr	r2, [r7, #4]
 80123cc:	6939      	ldr	r1, [r7, #16]
 80123ce:	2001      	movs	r0, #1
 80123d0:	f7ff ffac 	bl	801232c <LOG_VPrint>
	va_end(args);
}
 80123d4:	bf00      	nop
 80123d6:	3708      	adds	r7, #8
 80123d8:	46bd      	mov	sp, r7
 80123da:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80123de:	b004      	add	sp, #16
 80123e0:	4770      	bx	lr
 80123e2:	bf00      	nop
 80123e4:	08016690 	.word	0x08016690

080123e8 <LEGUAN_Init>:
  *  @brief Main leguan implementations
  */

#include "leguan.h"

result_t LEGUAN_Init(void) {
 80123e8:	b580      	push	{r7, lr}
 80123ea:	af00      	add	r7, sp, #0
	R_TRY(FPGA_Init());
 80123ec:	f000 f88a 	bl	8012504 <FPGA_Init>
 80123f0:	4603      	mov	r3, r0
 80123f2:	2b00      	cmp	r3, #0
 80123f4:	d003      	beq.n	80123fe <LEGUAN_Init+0x16>
 80123f6:	f000 f885 	bl	8012504 <FPGA_Init>
 80123fa:	4603      	mov	r3, r0
 80123fc:	e077      	b.n	80124ee <LEGUAN_Init+0x106>
	R_TRY(LCD_Init());
 80123fe:	f000 f92d 	bl	801265c <LCD_Init>
 8012402:	4603      	mov	r3, r0
 8012404:	2b00      	cmp	r3, #0
 8012406:	d003      	beq.n	8012410 <LEGUAN_Init+0x28>
 8012408:	f000 f928 	bl	801265c <LCD_Init>
 801240c:	4603      	mov	r3, r0
 801240e:	e06e      	b.n	80124ee <LEGUAN_Init+0x106>
	R_TRY(LCD_TouchInit());
 8012410:	f000 fb3e 	bl	8012a90 <LCD_TouchInit>
 8012414:	4603      	mov	r3, r0
 8012416:	2b00      	cmp	r3, #0
 8012418:	d003      	beq.n	8012422 <LEGUAN_Init+0x3a>
 801241a:	f000 fb39 	bl	8012a90 <LCD_TouchInit>
 801241e:	4603      	mov	r3, r0
 8012420:	e065      	b.n	80124ee <LEGUAN_Init+0x106>
	R_TRY(SENSOR_Init());
 8012422:	f000 fb50 	bl	8012ac6 <SENSOR_Init>
 8012426:	4603      	mov	r3, r0
 8012428:	2b00      	cmp	r3, #0
 801242a:	d003      	beq.n	8012434 <LEGUAN_Init+0x4c>
 801242c:	f000 fb4b 	bl	8012ac6 <SENSOR_Init>
 8012430:	4603      	mov	r3, r0
 8012432:	e05c      	b.n	80124ee <LEGUAN_Init+0x106>

	R_TRY(GPIO_Init());
 8012434:	f000 ff06 	bl	8013244 <GPIO_Init>
 8012438:	4603      	mov	r3, r0
 801243a:	2b00      	cmp	r3, #0
 801243c:	d003      	beq.n	8012446 <LEGUAN_Init+0x5e>
 801243e:	f000 ff01 	bl	8013244 <GPIO_Init>
 8012442:	4603      	mov	r3, r0
 8012444:	e053      	b.n	80124ee <LEGUAN_Init+0x106>
	R_TRY(SERIAL_Init());
 8012446:	f001 f86b 	bl	8013520 <SERIAL_Init>
 801244a:	4603      	mov	r3, r0
 801244c:	2b00      	cmp	r3, #0
 801244e:	d003      	beq.n	8012458 <LEGUAN_Init+0x70>
 8012450:	f001 f866 	bl	8013520 <SERIAL_Init>
 8012454:	4603      	mov	r3, r0
 8012456:	e04a      	b.n	80124ee <LEGUAN_Init+0x106>
	R_TRY(SPI_Init(SPI_Sensor));
 8012458:	4b26      	ldr	r3, [pc, #152]	; (80124f4 <LEGUAN_Init+0x10c>)
 801245a:	6818      	ldr	r0, [r3, #0]
 801245c:	f001 f868 	bl	8013530 <SPI_Init>
 8012460:	4603      	mov	r3, r0
 8012462:	2b00      	cmp	r3, #0
 8012464:	d005      	beq.n	8012472 <LEGUAN_Init+0x8a>
 8012466:	4b23      	ldr	r3, [pc, #140]	; (80124f4 <LEGUAN_Init+0x10c>)
 8012468:	6818      	ldr	r0, [r3, #0]
 801246a:	f001 f861 	bl	8013530 <SPI_Init>
 801246e:	4603      	mov	r3, r0
 8012470:	e03d      	b.n	80124ee <LEGUAN_Init+0x106>
	R_TRY(SPI_Init(SPI_Touch));
 8012472:	4b21      	ldr	r3, [pc, #132]	; (80124f8 <LEGUAN_Init+0x110>)
 8012474:	6818      	ldr	r0, [r3, #0]
 8012476:	f001 f85b 	bl	8013530 <SPI_Init>
 801247a:	4603      	mov	r3, r0
 801247c:	2b00      	cmp	r3, #0
 801247e:	d005      	beq.n	801248c <LEGUAN_Init+0xa4>
 8012480:	4b1d      	ldr	r3, [pc, #116]	; (80124f8 <LEGUAN_Init+0x110>)
 8012482:	6818      	ldr	r0, [r3, #0]
 8012484:	f001 f854 	bl	8013530 <SPI_Init>
 8012488:	4603      	mov	r3, r0
 801248a:	e030      	b.n	80124ee <LEGUAN_Init+0x106>
	R_TRY(I2C_Init());
 801248c:	f000 ffa6 	bl	80133dc <I2C_Init>
 8012490:	4603      	mov	r3, r0
 8012492:	2b00      	cmp	r3, #0
 8012494:	d003      	beq.n	801249e <LEGUAN_Init+0xb6>
 8012496:	f000 ffa1 	bl	80133dc <I2C_Init>
 801249a:	4603      	mov	r3, r0
 801249c:	e027      	b.n	80124ee <LEGUAN_Init+0x106>
	R_TRY(ADC_Init());
 801249e:	f000 fea6 	bl	80131ee <ADC_Init>
 80124a2:	4603      	mov	r3, r0
 80124a4:	2b00      	cmp	r3, #0
 80124a6:	d003      	beq.n	80124b0 <LEGUAN_Init+0xc8>
 80124a8:	f000 fea1 	bl	80131ee <ADC_Init>
 80124ac:	4603      	mov	r3, r0
 80124ae:	e01e      	b.n	80124ee <LEGUAN_Init+0x106>
	R_TRY(DAC_Init(DAC1_CH1));
 80124b0:	4b12      	ldr	r3, [pc, #72]	; (80124fc <LEGUAN_Init+0x114>)
 80124b2:	e893 0003 	ldmia.w	r3, {r0, r1}
 80124b6:	f000 fea2 	bl	80131fe <DAC_Init>
 80124ba:	4603      	mov	r3, r0
 80124bc:	2b00      	cmp	r3, #0
 80124be:	d006      	beq.n	80124ce <LEGUAN_Init+0xe6>
 80124c0:	4b0e      	ldr	r3, [pc, #56]	; (80124fc <LEGUAN_Init+0x114>)
 80124c2:	e893 0003 	ldmia.w	r3, {r0, r1}
 80124c6:	f000 fe9a 	bl	80131fe <DAC_Init>
 80124ca:	4603      	mov	r3, r0
 80124cc:	e00f      	b.n	80124ee <LEGUAN_Init+0x106>
	R_TRY(DAC_Init(DAC1_CH2));
 80124ce:	4b0c      	ldr	r3, [pc, #48]	; (8012500 <LEGUAN_Init+0x118>)
 80124d0:	e893 0003 	ldmia.w	r3, {r0, r1}
 80124d4:	f000 fe93 	bl	80131fe <DAC_Init>
 80124d8:	4603      	mov	r3, r0
 80124da:	2b00      	cmp	r3, #0
 80124dc:	d006      	beq.n	80124ec <LEGUAN_Init+0x104>
 80124de:	4b08      	ldr	r3, [pc, #32]	; (8012500 <LEGUAN_Init+0x118>)
 80124e0:	e893 0003 	ldmia.w	r3, {r0, r1}
 80124e4:	f000 fe8b 	bl	80131fe <DAC_Init>
 80124e8:	4603      	mov	r3, r0
 80124ea:	e000      	b.n	80124ee <LEGUAN_Init+0x106>

	return RESULT_SUCCESS;
 80124ec:	2300      	movs	r3, #0
}
 80124ee:	4618      	mov	r0, r3
 80124f0:	bd80      	pop	{r7, pc}
 80124f2:	bf00      	nop
 80124f4:	24000158 	.word	0x24000158
 80124f8:	2400015c 	.word	0x2400015c
 80124fc:	24000148 	.word	0x24000148
 8012500:	24000150 	.word	0x24000150

08012504 <FPGA_Init>:

#include "peripherals/external/fpga.h"
#include "common/math.h"


result_t FPGA_Init(void) {
 8012504:	b580      	push	{r7, lr}
 8012506:	af00      	add	r7, sp, #0
	FPGA_Reset();
 8012508:	f000 f803 	bl	8012512 <FPGA_Reset>

	return RESULT_SUCCESS;
 801250c:	2300      	movs	r3, #0
}
 801250e:	4618      	mov	r0, r3
 8012510:	bd80      	pop	{r7, pc}

08012512 <FPGA_Reset>:


result_t FPGA_Reset(void) {
 8012512:	b480      	push	{r7}
 8012514:	af00      	add	r7, sp, #0
    FPGA->reset = true;
 8012516:	f04f 4348 	mov.w	r3, #3355443200	; 0xc8000000
 801251a:	781a      	ldrb	r2, [r3, #0]
 801251c:	2200      	movs	r2, #0
 801251e:	f042 0201 	orr.w	r2, r2, #1
 8012522:	701a      	strb	r2, [r3, #0]
 8012524:	785a      	ldrb	r2, [r3, #1]
 8012526:	2200      	movs	r2, #0
 8012528:	705a      	strb	r2, [r3, #1]

    return RESULT_SUCCESS;
 801252a:	2300      	movs	r3, #0
}
 801252c:	4618      	mov	r0, r3
 801252e:	46bd      	mov	sp, r7
 8012530:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012534:	4770      	bx	lr

08012536 <LCD_SetDrawArea>:
static LEGUAN_ALWAYS_INLINE void LCD_CommandData16(uint8_t cmd, uint16_t data) {
    LCD_Command(cmd);
    LCD_Data16(data);
}

result_t LCD_SetDrawArea(uint16_t x1, uint16_t y1, uint16_t x2, uint16_t y2) {
 8012536:	b490      	push	{r4, r7}
 8012538:	b086      	sub	sp, #24
 801253a:	af00      	add	r7, sp, #0
 801253c:	4604      	mov	r4, r0
 801253e:	4608      	mov	r0, r1
 8012540:	4611      	mov	r1, r2
 8012542:	461a      	mov	r2, r3
 8012544:	4623      	mov	r3, r4
 8012546:	80fb      	strh	r3, [r7, #6]
 8012548:	4603      	mov	r3, r0
 801254a:	80bb      	strh	r3, [r7, #4]
 801254c:	460b      	mov	r3, r1
 801254e:	807b      	strh	r3, [r7, #2]
 8012550:	4613      	mov	r3, r2
 8012552:	803b      	strh	r3, [r7, #0]
	if (x1 > LCD_WIDTH || y1 > LCD_HEIGHT)
 8012554:	88fb      	ldrh	r3, [r7, #6]
 8012556:	f5b3 7f48 	cmp.w	r3, #800	; 0x320
 801255a:	d803      	bhi.n	8012564 <LCD_SetDrawArea+0x2e>
 801255c:	88bb      	ldrh	r3, [r7, #4]
 801255e:	f5b3 7ff0 	cmp.w	r3, #480	; 0x1e0
 8012562:	d901      	bls.n	8012568 <LCD_SetDrawArea+0x32>
		return RESULT_INVALID_ARGUMENTS;
 8012564:	2302      	movs	r3, #2
 8012566:	e062      	b.n	801262e <LCD_SetDrawArea+0xf8>
	if (x2 > LCD_WIDTH || y2 > LCD_HEIGHT)
 8012568:	887b      	ldrh	r3, [r7, #2]
 801256a:	f5b3 7f48 	cmp.w	r3, #800	; 0x320
 801256e:	d803      	bhi.n	8012578 <LCD_SetDrawArea+0x42>
 8012570:	883b      	ldrh	r3, [r7, #0]
 8012572:	f5b3 7ff0 	cmp.w	r3, #480	; 0x1e0
 8012576:	d901      	bls.n	801257c <LCD_SetDrawArea+0x46>
		return RESULT_INVALID_ARGUMENTS;
 8012578:	2302      	movs	r3, #2
 801257a:	e058      	b.n	801262e <LCD_SetDrawArea+0xf8>
 801257c:	232a      	movs	r3, #42	; 0x2a
 801257e:	73bb      	strb	r3, [r7, #14]
    LCD->cmd = cmd;
 8012580:	f04f 4340 	mov.w	r3, #3221225472	; 0xc0000000
 8012584:	7bba      	ldrb	r2, [r7, #14]
 8012586:	b292      	uxth	r2, r2
 8012588:	801a      	strh	r2, [r3, #0]
}
 801258a:	bf00      	nop

    /* Set horizontal region */
    LCD_Command(LCD_CMD_SET_COLUMN_ADDRESS);
    LCD_Data8(x1 >> 8);
 801258c:	88fb      	ldrh	r3, [r7, #6]
 801258e:	0a1b      	lsrs	r3, r3, #8
 8012590:	b29b      	uxth	r3, r3
 8012592:	b2db      	uxtb	r3, r3
 8012594:	73fb      	strb	r3, [r7, #15]
    LCD->data8 = data;
 8012596:	f04f 4240 	mov.w	r2, #3221225472	; 0xc0000000
 801259a:	7bfb      	ldrb	r3, [r7, #15]
 801259c:	7093      	strb	r3, [r2, #2]
}
 801259e:	bf00      	nop
    LCD_Data8(x1 & 0xFF);
 80125a0:	88fb      	ldrh	r3, [r7, #6]
 80125a2:	b2db      	uxtb	r3, r3
 80125a4:	743b      	strb	r3, [r7, #16]
    LCD->data8 = data;
 80125a6:	f04f 4240 	mov.w	r2, #3221225472	; 0xc0000000
 80125aa:	7c3b      	ldrb	r3, [r7, #16]
 80125ac:	7093      	strb	r3, [r2, #2]
}
 80125ae:	bf00      	nop
    LCD_Data8(x2 >> 8);
 80125b0:	887b      	ldrh	r3, [r7, #2]
 80125b2:	0a1b      	lsrs	r3, r3, #8
 80125b4:	b29b      	uxth	r3, r3
 80125b6:	b2db      	uxtb	r3, r3
 80125b8:	747b      	strb	r3, [r7, #17]
    LCD->data8 = data;
 80125ba:	f04f 4240 	mov.w	r2, #3221225472	; 0xc0000000
 80125be:	7c7b      	ldrb	r3, [r7, #17]
 80125c0:	7093      	strb	r3, [r2, #2]
}
 80125c2:	bf00      	nop
    LCD_Data8(x2 & 0xFF);
 80125c4:	887b      	ldrh	r3, [r7, #2]
 80125c6:	b2db      	uxtb	r3, r3
 80125c8:	74bb      	strb	r3, [r7, #18]
    LCD->data8 = data;
 80125ca:	f04f 4240 	mov.w	r2, #3221225472	; 0xc0000000
 80125ce:	7cbb      	ldrb	r3, [r7, #18]
 80125d0:	7093      	strb	r3, [r2, #2]
}
 80125d2:	bf00      	nop
 80125d4:	232b      	movs	r3, #43	; 0x2b
 80125d6:	74fb      	strb	r3, [r7, #19]
    LCD->cmd = cmd;
 80125d8:	f04f 4340 	mov.w	r3, #3221225472	; 0xc0000000
 80125dc:	7cfa      	ldrb	r2, [r7, #19]
 80125de:	b292      	uxth	r2, r2
 80125e0:	801a      	strh	r2, [r3, #0]
}
 80125e2:	bf00      	nop

    /* Set vertical region */
    LCD_Command(LCD_CMD_SET_PAGE_ADDRESS);
    LCD_Data8(y1 >> 8);
 80125e4:	88bb      	ldrh	r3, [r7, #4]
 80125e6:	0a1b      	lsrs	r3, r3, #8
 80125e8:	b29b      	uxth	r3, r3
 80125ea:	b2db      	uxtb	r3, r3
 80125ec:	753b      	strb	r3, [r7, #20]
    LCD->data8 = data;
 80125ee:	f04f 4240 	mov.w	r2, #3221225472	; 0xc0000000
 80125f2:	7d3b      	ldrb	r3, [r7, #20]
 80125f4:	7093      	strb	r3, [r2, #2]
}
 80125f6:	bf00      	nop
    LCD_Data8(y1 & 0xFF);
 80125f8:	88bb      	ldrh	r3, [r7, #4]
 80125fa:	b2db      	uxtb	r3, r3
 80125fc:	757b      	strb	r3, [r7, #21]
    LCD->data8 = data;
 80125fe:	f04f 4240 	mov.w	r2, #3221225472	; 0xc0000000
 8012602:	7d7b      	ldrb	r3, [r7, #21]
 8012604:	7093      	strb	r3, [r2, #2]
}
 8012606:	bf00      	nop
    LCD_Data8(y2 >> 8);
 8012608:	883b      	ldrh	r3, [r7, #0]
 801260a:	0a1b      	lsrs	r3, r3, #8
 801260c:	b29b      	uxth	r3, r3
 801260e:	b2db      	uxtb	r3, r3
 8012610:	75bb      	strb	r3, [r7, #22]
    LCD->data8 = data;
 8012612:	f04f 4240 	mov.w	r2, #3221225472	; 0xc0000000
 8012616:	7dbb      	ldrb	r3, [r7, #22]
 8012618:	7093      	strb	r3, [r2, #2]
}
 801261a:	bf00      	nop
    LCD_Data8(y2 & 0xFF);
 801261c:	883b      	ldrh	r3, [r7, #0]
 801261e:	b2db      	uxtb	r3, r3
 8012620:	75fb      	strb	r3, [r7, #23]
    LCD->data8 = data;
 8012622:	f04f 4240 	mov.w	r2, #3221225472	; 0xc0000000
 8012626:	7dfb      	ldrb	r3, [r7, #23]
 8012628:	7093      	strb	r3, [r2, #2]
}
 801262a:	bf00      	nop

    return RESULT_SUCCESS;
 801262c:	2300      	movs	r3, #0
}
 801262e:	4618      	mov	r0, r3
 8012630:	3718      	adds	r7, #24
 8012632:	46bd      	mov	sp, r7
 8012634:	bc90      	pop	{r4, r7}
 8012636:	4770      	bx	lr

08012638 <LCD_EnableDrawMode>:

void LCD_EnableDrawMode(void) {
 8012638:	b480      	push	{r7}
 801263a:	b083      	sub	sp, #12
 801263c:	af00      	add	r7, sp, #0
 801263e:	232c      	movs	r3, #44	; 0x2c
 8012640:	71fb      	strb	r3, [r7, #7]
    LCD->cmd = cmd;
 8012642:	f04f 4340 	mov.w	r3, #3221225472	; 0xc0000000
 8012646:	79fa      	ldrb	r2, [r7, #7]
 8012648:	b292      	uxth	r2, r2
 801264a:	801a      	strh	r2, [r3, #0]
}
 801264c:	bf00      	nop
    LCD_Command(LCD_CMD_WRITE_MEMORY_START);
}
 801264e:	bf00      	nop
 8012650:	370c      	adds	r7, #12
 8012652:	46bd      	mov	sp, r7
 8012654:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012658:	4770      	bx	lr
	...

0801265c <LCD_Init>:

result_t LCD_Init(void) {
 801265c:	b580      	push	{r7, lr}
 801265e:	b084      	sub	sp, #16
 8012660:	af00      	add	r7, sp, #0
 8012662:	2329      	movs	r3, #41	; 0x29
 8012664:	71fb      	strb	r3, [r7, #7]
    LCD->cmd = cmd;
 8012666:	f04f 4340 	mov.w	r3, #3221225472	; 0xc0000000
 801266a:	79fa      	ldrb	r2, [r7, #7]
 801266c:	b292      	uxth	r2, r2
 801266e:	801a      	strh	r2, [r3, #0]
}
 8012670:	bf00      	nop
 8012672:	2336      	movs	r3, #54	; 0x36
 8012674:	72fb      	strb	r3, [r7, #11]
 8012676:	2302      	movs	r3, #2
 8012678:	72bb      	strb	r3, [r7, #10]
 801267a:	7afb      	ldrb	r3, [r7, #11]
 801267c:	727b      	strb	r3, [r7, #9]
    LCD->cmd = cmd;
 801267e:	f04f 4340 	mov.w	r3, #3221225472	; 0xc0000000
 8012682:	7a7a      	ldrb	r2, [r7, #9]
 8012684:	b292      	uxth	r2, r2
 8012686:	801a      	strh	r2, [r3, #0]
}
 8012688:	bf00      	nop
 801268a:	7abb      	ldrb	r3, [r7, #10]
 801268c:	723b      	strb	r3, [r7, #8]
    LCD->data8 = data;
 801268e:	f04f 4240 	mov.w	r2, #3221225472	; 0xc0000000
 8012692:	7a3b      	ldrb	r3, [r7, #8]
 8012694:	7093      	strb	r3, [r2, #2]
}
 8012696:	bf00      	nop
}
 8012698:	bf00      	nop
    LCD_Command(LCD_CMD_SET_DISPLAY_ON);

    /* Flip LCD horizontally */
    LCD_CommandData8(LCD_CMD_SET_ADDRESS_MODE, 0b00000010);

    CORE_Delay(10);
 801269a:	200a      	movs	r0, #10
 801269c:	f7ff fe2a 	bl	80122f4 <CORE_Delay>

    /* Set LCD color format */
    LCD->cmd  = LCD_CMD_SET_PIXEL_DATA_INTERFACE;
 80126a0:	f04f 4340 	mov.w	r3, #3221225472	; 0xc0000000
 80126a4:	781a      	ldrb	r2, [r3, #0]
 80126a6:	2200      	movs	r2, #0
 80126a8:	f062 020f 	orn	r2, r2, #15
 80126ac:	701a      	strb	r2, [r3, #0]
 80126ae:	785a      	ldrb	r2, [r3, #1]
 80126b0:	2200      	movs	r2, #0
 80126b2:	705a      	strb	r2, [r3, #1]
 80126b4:	23f0      	movs	r3, #240	; 0xf0
 80126b6:	73fb      	strb	r3, [r7, #15]
 80126b8:	2303      	movs	r3, #3
 80126ba:	73bb      	strb	r3, [r7, #14]
 80126bc:	7bfb      	ldrb	r3, [r7, #15]
 80126be:	737b      	strb	r3, [r7, #13]
    LCD->cmd = cmd;
 80126c0:	f04f 4340 	mov.w	r3, #3221225472	; 0xc0000000
 80126c4:	7b7a      	ldrb	r2, [r7, #13]
 80126c6:	b292      	uxth	r2, r2
 80126c8:	801a      	strh	r2, [r3, #0]
}
 80126ca:	bf00      	nop
 80126cc:	7bbb      	ldrb	r3, [r7, #14]
 80126ce:	733b      	strb	r3, [r7, #12]
    LCD->data8 = data;
 80126d0:	f04f 4240 	mov.w	r2, #3221225472	; 0xc0000000
 80126d4:	7b3b      	ldrb	r3, [r7, #12]
 80126d6:	7093      	strb	r3, [r2, #2]
}
 80126d8:	bf00      	nop
}
 80126da:	bf00      	nop
    LCD_CommandData8(LCD_CMD_SET_PIXEL_DATA_INTERFACE, 0b011); // RGB565

    LCD_SetDrawArea(0, 0, LCD_WIDTH - 1, LCD_HEIGHT - 1);
 80126dc:	f240 13df 	movw	r3, #479	; 0x1df
 80126e0:	f240 321f 	movw	r2, #799	; 0x31f
 80126e4:	2100      	movs	r1, #0
 80126e6:	2000      	movs	r0, #0
 80126e8:	f7ff ff25 	bl	8012536 <LCD_SetDrawArea>

    CORE_Delay(100);
 80126ec:	2064      	movs	r0, #100	; 0x64
 80126ee:	f7ff fe01 	bl	80122f4 <CORE_Delay>

    /* Start pixel access mode */
    LCD_EnableDrawMode();
 80126f2:	f7ff ffa1 	bl	8012638 <LCD_EnableDrawMode>

    LCD_SetForegroundColor(ColorWhite);
 80126f6:	4b08      	ldr	r3, [pc, #32]	; (8012718 <LCD_Init+0xbc>)
 80126f8:	e893 0003 	ldmia.w	r3, {r0, r1}
 80126fc:	f000 f834 	bl	8012768 <LCD_SetForegroundColor>
    LCD_SetBackgroundColor(ColorBlack);
 8012700:	4b06      	ldr	r3, [pc, #24]	; (801271c <LCD_Init+0xc0>)
 8012702:	e893 0003 	ldmia.w	r3, {r0, r1}
 8012706:	f000 f859 	bl	80127bc <LCD_SetBackgroundColor>
    LCD_Clear();
 801270a:	f000 f933 	bl	8012974 <LCD_Clear>

    return RESULT_SUCCESS;
 801270e:	2300      	movs	r3, #0
}
 8012710:	4618      	mov	r0, r3
 8012712:	3710      	adds	r7, #16
 8012714:	46bd      	mov	sp, r7
 8012716:	bd80      	pop	{r7, pc}
 8012718:	0801673c 	.word	0x0801673c
 801271c:	08016734 	.word	0x08016734

08012720 <LCD_Stream>:


void LCD_Stream(const char *string, bool new_line) {
 8012720:	b580      	push	{r7, lr}
 8012722:	b082      	sub	sp, #8
 8012724:	af00      	add	r7, sp, #0
 8012726:	6078      	str	r0, [r7, #4]
 8012728:	460b      	mov	r3, r1
 801272a:	70fb      	strb	r3, [r7, #3]
	if (m_console_cursor_y >= LCD_HEIGHT - CONSOLE_FONT_CHAR_HEIGHT) {
 801272c:	4b0c      	ldr	r3, [pc, #48]	; (8012760 <LCD_Stream+0x40>)
 801272e:	881b      	ldrh	r3, [r3, #0]
 8012730:	f5b3 7feb 	cmp.w	r3, #470	; 0x1d6
 8012734:	d902      	bls.n	801273c <LCD_Stream+0x1c>
		m_console_cursor_y = 0;
 8012736:	4b0a      	ldr	r3, [pc, #40]	; (8012760 <LCD_Stream+0x40>)
 8012738:	2200      	movs	r2, #0
 801273a:	801a      	strh	r2, [r3, #0]
	}

	if (new_line) {
 801273c:	78fb      	ldrb	r3, [r7, #3]
 801273e:	2b00      	cmp	r3, #0
 8012740:	d006      	beq.n	8012750 <LCD_Stream+0x30>
		LCD_StringContinue(string);
 8012742:	6878      	ldr	r0, [r7, #4]
 8012744:	f000 f900 	bl	8012948 <LCD_StringContinue>
		LCD_StringContinue("\n");
 8012748:	4806      	ldr	r0, [pc, #24]	; (8012764 <LCD_Stream+0x44>)
 801274a:	f000 f8fd 	bl	8012948 <LCD_StringContinue>
	}
	else
	    LCD_StringContinue(string);
}
 801274e:	e002      	b.n	8012756 <LCD_Stream+0x36>
	    LCD_StringContinue(string);
 8012750:	6878      	ldr	r0, [r7, #4]
 8012752:	f000 f8f9 	bl	8012948 <LCD_StringContinue>
}
 8012756:	bf00      	nop
 8012758:	3708      	adds	r7, #8
 801275a:	46bd      	mov	sp, r7
 801275c:	bd80      	pop	{r7, pc}
 801275e:	bf00      	nop
 8012760:	24000398 	.word	0x24000398
 8012764:	080166c0 	.word	0x080166c0

08012768 <LCD_SetForegroundColor>:


void LCD_SetForegroundColor(color_t color) {
 8012768:	b480      	push	{r7}
 801276a:	b083      	sub	sp, #12
 801276c:	af00      	add	r7, sp, #0
 801276e:	463b      	mov	r3, r7
 8012770:	e883 0003 	stmia.w	r3, {r0, r1}
	m_foreground_color.r = color.r;
 8012774:	883b      	ldrh	r3, [r7, #0]
 8012776:	f003 031f 	and.w	r3, r3, #31
 801277a:	b2d9      	uxtb	r1, r3
 801277c:	4a0e      	ldr	r2, [pc, #56]	; (80127b8 <LCD_SetForegroundColor+0x50>)
 801277e:	7853      	ldrb	r3, [r2, #1]
 8012780:	f361 03c7 	bfi	r3, r1, #3, #5
 8012784:	7053      	strb	r3, [r2, #1]
	m_foreground_color.g = color.g;
 8012786:	887b      	ldrh	r3, [r7, #2]
 8012788:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 801278c:	b2d9      	uxtb	r1, r3
 801278e:	4a0a      	ldr	r2, [pc, #40]	; (80127b8 <LCD_SetForegroundColor+0x50>)
 8012790:	8813      	ldrh	r3, [r2, #0]
 8012792:	f361 134a 	bfi	r3, r1, #5, #6
 8012796:	8013      	strh	r3, [r2, #0]
	m_foreground_color.b = color.b;
 8012798:	88bb      	ldrh	r3, [r7, #4]
 801279a:	f003 031f 	and.w	r3, r3, #31
 801279e:	b2d9      	uxtb	r1, r3
 80127a0:	4a05      	ldr	r2, [pc, #20]	; (80127b8 <LCD_SetForegroundColor+0x50>)
 80127a2:	7813      	ldrb	r3, [r2, #0]
 80127a4:	f361 0304 	bfi	r3, r1, #0, #5
 80127a8:	7013      	strb	r3, [r2, #0]
}
 80127aa:	bf00      	nop
 80127ac:	370c      	adds	r7, #12
 80127ae:	46bd      	mov	sp, r7
 80127b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80127b4:	4770      	bx	lr
 80127b6:	bf00      	nop
 80127b8:	24000390 	.word	0x24000390

080127bc <LCD_SetBackgroundColor>:

void LCD_SetBackgroundColor(color_t color) {
 80127bc:	b480      	push	{r7}
 80127be:	b083      	sub	sp, #12
 80127c0:	af00      	add	r7, sp, #0
 80127c2:	463b      	mov	r3, r7
 80127c4:	e883 0003 	stmia.w	r3, {r0, r1}
	m_background_color.r = color.r;
 80127c8:	883b      	ldrh	r3, [r7, #0]
 80127ca:	f003 031f 	and.w	r3, r3, #31
 80127ce:	b2d9      	uxtb	r1, r3
 80127d0:	4a0e      	ldr	r2, [pc, #56]	; (801280c <LCD_SetBackgroundColor+0x50>)
 80127d2:	7853      	ldrb	r3, [r2, #1]
 80127d4:	f361 03c7 	bfi	r3, r1, #3, #5
 80127d8:	7053      	strb	r3, [r2, #1]
	m_background_color.g = color.g;
 80127da:	887b      	ldrh	r3, [r7, #2]
 80127dc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80127e0:	b2d9      	uxtb	r1, r3
 80127e2:	4a0a      	ldr	r2, [pc, #40]	; (801280c <LCD_SetBackgroundColor+0x50>)
 80127e4:	8813      	ldrh	r3, [r2, #0]
 80127e6:	f361 134a 	bfi	r3, r1, #5, #6
 80127ea:	8013      	strh	r3, [r2, #0]
	m_background_color.b = color.b;
 80127ec:	88bb      	ldrh	r3, [r7, #4]
 80127ee:	f003 031f 	and.w	r3, r3, #31
 80127f2:	b2d9      	uxtb	r1, r3
 80127f4:	4a05      	ldr	r2, [pc, #20]	; (801280c <LCD_SetBackgroundColor+0x50>)
 80127f6:	7813      	ldrb	r3, [r2, #0]
 80127f8:	f361 0304 	bfi	r3, r1, #0, #5
 80127fc:	7013      	strb	r3, [r2, #0]
}
 80127fe:	bf00      	nop
 8012800:	370c      	adds	r7, #12
 8012802:	46bd      	mov	sp, r7
 8012804:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012808:	4770      	bx	lr
 801280a:	bf00      	nop
 801280c:	24000394 	.word	0x24000394

08012810 <LCD_Character>:
    }

    return RESULT_SUCCESS;
}

result_t LCD_Character(uint16_t x, uint16_t y, char c) {
 8012810:	b580      	push	{r7, lr}
 8012812:	b088      	sub	sp, #32
 8012814:	af00      	add	r7, sp, #0
 8012816:	4603      	mov	r3, r0
 8012818:	80fb      	strh	r3, [r7, #6]
 801281a:	460b      	mov	r3, r1
 801281c:	80bb      	strh	r3, [r7, #4]
 801281e:	4613      	mov	r3, r2
 8012820:	70fb      	strb	r3, [r7, #3]
	/* Set working region same size as character bitmap */
    R_TRY(LCD_SetDrawArea(x, y, x + CONSOLE_FONT_CHAR_WIDTH, y + CONSOLE_FONT_CHAR_HEIGHT));
 8012822:	88fb      	ldrh	r3, [r7, #6]
 8012824:	3307      	adds	r3, #7
 8012826:	b29a      	uxth	r2, r3
 8012828:	88bb      	ldrh	r3, [r7, #4]
 801282a:	3309      	adds	r3, #9
 801282c:	b29b      	uxth	r3, r3
 801282e:	88b9      	ldrh	r1, [r7, #4]
 8012830:	88f8      	ldrh	r0, [r7, #6]
 8012832:	f7ff fe80 	bl	8012536 <LCD_SetDrawArea>
 8012836:	4603      	mov	r3, r0
 8012838:	2b00      	cmp	r3, #0
 801283a:	d00b      	beq.n	8012854 <LCD_Character+0x44>
 801283c:	88fb      	ldrh	r3, [r7, #6]
 801283e:	3307      	adds	r3, #7
 8012840:	b29a      	uxth	r2, r3
 8012842:	88bb      	ldrh	r3, [r7, #4]
 8012844:	3309      	adds	r3, #9
 8012846:	b29b      	uxth	r3, r3
 8012848:	88b9      	ldrh	r1, [r7, #4]
 801284a:	88f8      	ldrh	r0, [r7, #6]
 801284c:	f7ff fe73 	bl	8012536 <LCD_SetDrawArea>
 8012850:	4603      	mov	r3, r0
 8012852:	e033      	b.n	80128bc <LCD_Character+0xac>
    LCD_EnableDrawMode();
 8012854:	f7ff fef0 	bl	8012638 <LCD_EnableDrawMode>

    /* Draw all 1s in bitmap with foreground color, all 0s with background color */
    for (uint32_t i = 0; i < CONSOLE_FONT_CHAR_WIDTH * CONSOLE_FONT_CHAR_HEIGHT; i++) {
 8012858:	2300      	movs	r3, #0
 801285a:	61fb      	str	r3, [r7, #28]
 801285c:	e02a      	b.n	80128b4 <LCD_Character+0xa4>
        if (ConsoleFont[(uint8_t)c][i / 8] & (1 << (i % 8)))
 801285e:	78fa      	ldrb	r2, [r7, #3]
 8012860:	69fb      	ldr	r3, [r7, #28]
 8012862:	08db      	lsrs	r3, r3, #3
 8012864:	4917      	ldr	r1, [pc, #92]	; (80128c4 <LCD_Character+0xb4>)
 8012866:	00d2      	lsls	r2, r2, #3
 8012868:	440a      	add	r2, r1
 801286a:	4413      	add	r3, r2
 801286c:	781b      	ldrb	r3, [r3, #0]
 801286e:	461a      	mov	r2, r3
 8012870:	69fb      	ldr	r3, [r7, #28]
 8012872:	f003 0307 	and.w	r3, r3, #7
 8012876:	fa42 f303 	asr.w	r3, r2, r3
 801287a:	f003 0301 	and.w	r3, r3, #1
 801287e:	2b00      	cmp	r3, #0
 8012880:	d00a      	beq.n	8012898 <LCD_Character+0x88>
 8012882:	4b11      	ldr	r3, [pc, #68]	; (80128c8 <LCD_Character+0xb8>)
 8012884:	61bb      	str	r3, [r7, #24]
    LCD_Data16(*(const uint16_t*)color);
 8012886:	69bb      	ldr	r3, [r7, #24]
 8012888:	881b      	ldrh	r3, [r3, #0]
 801288a:	82fb      	strh	r3, [r7, #22]
    LCD->data16 = data;
 801288c:	f04f 4340 	mov.w	r3, #3221225472	; 0xc0000000
 8012890:	8afa      	ldrh	r2, [r7, #22]
 8012892:	805a      	strh	r2, [r3, #2]
}
 8012894:	bf00      	nop
}
 8012896:	e00a      	b.n	80128ae <LCD_Character+0x9e>
 8012898:	4b0c      	ldr	r3, [pc, #48]	; (80128cc <LCD_Character+0xbc>)
 801289a:	613b      	str	r3, [r7, #16]
    LCD_Data16(*(const uint16_t*)color);
 801289c:	693b      	ldr	r3, [r7, #16]
 801289e:	881b      	ldrh	r3, [r3, #0]
 80128a0:	81fb      	strh	r3, [r7, #14]
    LCD->data16 = data;
 80128a2:	f04f 4340 	mov.w	r3, #3221225472	; 0xc0000000
 80128a6:	89fa      	ldrh	r2, [r7, #14]
 80128a8:	805a      	strh	r2, [r3, #2]
}
 80128aa:	bf00      	nop
}
 80128ac:	bf00      	nop
    for (uint32_t i = 0; i < CONSOLE_FONT_CHAR_WIDTH * CONSOLE_FONT_CHAR_HEIGHT; i++) {
 80128ae:	69fb      	ldr	r3, [r7, #28]
 80128b0:	3301      	adds	r3, #1
 80128b2:	61fb      	str	r3, [r7, #28]
 80128b4:	69fb      	ldr	r3, [r7, #28]
 80128b6:	2b3e      	cmp	r3, #62	; 0x3e
 80128b8:	d9d1      	bls.n	801285e <LCD_Character+0x4e>
        else {
            LCD_Set(&m_background_color);
        }
    }

    return RESULT_SUCCESS;
 80128ba:	2300      	movs	r3, #0
}
 80128bc:	4618      	mov	r0, r3
 80128be:	3720      	adds	r7, #32
 80128c0:	46bd      	mov	sp, r7
 80128c2:	bd80      	pop	{r7, pc}
 80128c4:	08016744 	.word	0x08016744
 80128c8:	24000390 	.word	0x24000390
 80128cc:	24000394 	.word	0x24000394

080128d0 <LCD_String>:

result_t LCD_String(uint16_t start_x, uint16_t start_y, const char *string) {
 80128d0:	b580      	push	{r7, lr}
 80128d2:	b084      	sub	sp, #16
 80128d4:	af00      	add	r7, sp, #0
 80128d6:	4603      	mov	r3, r0
 80128d8:	603a      	str	r2, [r7, #0]
 80128da:	80fb      	strh	r3, [r7, #6]
 80128dc:	460b      	mov	r3, r1
 80128de:	80bb      	strh	r3, [r7, #4]
    uint16_t x = start_x, y = start_y;
 80128e0:	88fb      	ldrh	r3, [r7, #6]
 80128e2:	81fb      	strh	r3, [r7, #14]
 80128e4:	88bb      	ldrh	r3, [r7, #4]
 80128e6:	81bb      	strh	r3, [r7, #12]
    while (true) {
    	char c = *string++;
 80128e8:	683b      	ldr	r3, [r7, #0]
 80128ea:	1c5a      	adds	r2, r3, #1
 80128ec:	603a      	str	r2, [r7, #0]
 80128ee:	781b      	ldrb	r3, [r3, #0]
 80128f0:	72fb      	strb	r3, [r7, #11]

    	if (c == '\n') {
 80128f2:	7afb      	ldrb	r3, [r7, #11]
 80128f4:	2b0a      	cmp	r3, #10
 80128f6:	d105      	bne.n	8012904 <LCD_String+0x34>
    		x = 0;
 80128f8:	2300      	movs	r3, #0
 80128fa:	81fb      	strh	r3, [r7, #14]
    		y += CONSOLE_FONT_CHAR_HEIGHT;
 80128fc:	89bb      	ldrh	r3, [r7, #12]
 80128fe:	3309      	adds	r3, #9
 8012900:	81bb      	strh	r3, [r7, #12]
    		continue;
 8012902:	e010      	b.n	8012926 <LCD_String+0x56>
    	} else if (c == '\x00') {
 8012904:	7afb      	ldrb	r3, [r7, #11]
 8012906:	2b00      	cmp	r3, #0
 8012908:	d00e      	beq.n	8012928 <LCD_String+0x58>
    		break;
    	}

        if (LCD_Character(x, y, c) != RESULT_SUCCESS)
 801290a:	7afa      	ldrb	r2, [r7, #11]
 801290c:	89b9      	ldrh	r1, [r7, #12]
 801290e:	89fb      	ldrh	r3, [r7, #14]
 8012910:	4618      	mov	r0, r3
 8012912:	f7ff ff7d 	bl	8012810 <LCD_Character>
 8012916:	4603      	mov	r3, r0
 8012918:	2b00      	cmp	r3, #0
 801291a:	d001      	beq.n	8012920 <LCD_String+0x50>
        	return RESULT_INVALID_ARGUMENTS;
 801291c:	2302      	movs	r3, #2
 801291e:	e00b      	b.n	8012938 <LCD_String+0x68>

        /* Advance cursor horizontally */
        x += CONSOLE_FONT_CHAR_WIDTH;
 8012920:	89fb      	ldrh	r3, [r7, #14]
 8012922:	3307      	adds	r3, #7
 8012924:	81fb      	strh	r3, [r7, #14]
    while (true) {
 8012926:	e7df      	b.n	80128e8 <LCD_String+0x18>
    		break;
 8012928:	bf00      	nop
    }

    m_console_cursor_x = x;
 801292a:	4a05      	ldr	r2, [pc, #20]	; (8012940 <LCD_String+0x70>)
 801292c:	89fb      	ldrh	r3, [r7, #14]
 801292e:	8013      	strh	r3, [r2, #0]
    m_console_cursor_y = y;
 8012930:	4a04      	ldr	r2, [pc, #16]	; (8012944 <LCD_String+0x74>)
 8012932:	89bb      	ldrh	r3, [r7, #12]
 8012934:	8013      	strh	r3, [r2, #0]

    return RESULT_SUCCESS;
 8012936:	2300      	movs	r3, #0
}
 8012938:	4618      	mov	r0, r3
 801293a:	3710      	adds	r7, #16
 801293c:	46bd      	mov	sp, r7
 801293e:	bd80      	pop	{r7, pc}
 8012940:	24000396 	.word	0x24000396
 8012944:	24000398 	.word	0x24000398

08012948 <LCD_StringContinue>:

result_t LCD_StringContinue(const char *string) {
 8012948:	b580      	push	{r7, lr}
 801294a:	b082      	sub	sp, #8
 801294c:	af00      	add	r7, sp, #0
 801294e:	6078      	str	r0, [r7, #4]
	return LCD_String(m_console_cursor_x, m_console_cursor_y, string);
 8012950:	4b06      	ldr	r3, [pc, #24]	; (801296c <LCD_StringContinue+0x24>)
 8012952:	881b      	ldrh	r3, [r3, #0]
 8012954:	4a06      	ldr	r2, [pc, #24]	; (8012970 <LCD_StringContinue+0x28>)
 8012956:	8811      	ldrh	r1, [r2, #0]
 8012958:	687a      	ldr	r2, [r7, #4]
 801295a:	4618      	mov	r0, r3
 801295c:	f7ff ffb8 	bl	80128d0 <LCD_String>
 8012960:	4603      	mov	r3, r0
}
 8012962:	4618      	mov	r0, r3
 8012964:	3708      	adds	r7, #8
 8012966:	46bd      	mov	sp, r7
 8012968:	bd80      	pop	{r7, pc}
 801296a:	bf00      	nop
 801296c:	24000396 	.word	0x24000396
 8012970:	24000398 	.word	0x24000398

08012974 <LCD_Clear>:

void LCD_Clear(void) {
 8012974:	b580      	push	{r7, lr}
 8012976:	b084      	sub	sp, #16
 8012978:	af00      	add	r7, sp, #0
	/* Set working region fill entire screen */
    LCD_SetDrawArea(0, 0, LCD_WIDTH - 1, LCD_HEIGHT - 1);
 801297a:	f240 13df 	movw	r3, #479	; 0x1df
 801297e:	f240 321f 	movw	r2, #799	; 0x31f
 8012982:	2100      	movs	r1, #0
 8012984:	2000      	movs	r0, #0
 8012986:	f7ff fdd6 	bl	8012536 <LCD_SetDrawArea>
    LCD_EnableDrawMode();
 801298a:	f7ff fe55 	bl	8012638 <LCD_EnableDrawMode>

    for (uint32_t pixel = 0; pixel < LCD_WIDTH * LCD_HEIGHT; pixel++) {
 801298e:	2300      	movs	r3, #0
 8012990:	60fb      	str	r3, [r7, #12]
 8012992:	e00d      	b.n	80129b0 <LCD_Clear+0x3c>
 8012994:	4b0d      	ldr	r3, [pc, #52]	; (80129cc <LCD_Clear+0x58>)
 8012996:	60bb      	str	r3, [r7, #8]
    LCD_Data16(*(const uint16_t*)color);
 8012998:	68bb      	ldr	r3, [r7, #8]
 801299a:	881b      	ldrh	r3, [r3, #0]
 801299c:	80fb      	strh	r3, [r7, #6]
    LCD->data16 = data;
 801299e:	f04f 4340 	mov.w	r3, #3221225472	; 0xc0000000
 80129a2:	88fa      	ldrh	r2, [r7, #6]
 80129a4:	805a      	strh	r2, [r3, #2]
}
 80129a6:	bf00      	nop
}
 80129a8:	bf00      	nop
    for (uint32_t pixel = 0; pixel < LCD_WIDTH * LCD_HEIGHT; pixel++) {
 80129aa:	68fb      	ldr	r3, [r7, #12]
 80129ac:	3301      	adds	r3, #1
 80129ae:	60fb      	str	r3, [r7, #12]
 80129b0:	68fb      	ldr	r3, [r7, #12]
 80129b2:	4a07      	ldr	r2, [pc, #28]	; (80129d0 <LCD_Clear+0x5c>)
 80129b4:	4293      	cmp	r3, r2
 80129b6:	d9ed      	bls.n	8012994 <LCD_Clear+0x20>
        LCD_Set(&m_background_color);
    }

    m_console_cursor_x = 0;
 80129b8:	4b06      	ldr	r3, [pc, #24]	; (80129d4 <LCD_Clear+0x60>)
 80129ba:	2200      	movs	r2, #0
 80129bc:	801a      	strh	r2, [r3, #0]
    m_console_cursor_y = 0;
 80129be:	4b06      	ldr	r3, [pc, #24]	; (80129d8 <LCD_Clear+0x64>)
 80129c0:	2200      	movs	r2, #0
 80129c2:	801a      	strh	r2, [r3, #0]

}
 80129c4:	bf00      	nop
 80129c6:	3710      	adds	r7, #16
 80129c8:	46bd      	mov	sp, r7
 80129ca:	bd80      	pop	{r7, pc}
 80129cc:	24000394 	.word	0x24000394
 80129d0:	0005dbff 	.word	0x0005dbff
 80129d4:	24000396 	.word	0x24000396
 80129d8:	24000398 	.word	0x24000398

080129dc <LCD_TouchEnable>:
}


/* Touch */

static void LCD_TouchEnable(void) {
 80129dc:	b580      	push	{r7, lr}
 80129de:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(GPIOD, GPIO_PIN_13, GPIO_PIN_RESET);
 80129e0:	2200      	movs	r2, #0
 80129e2:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80129e6:	4802      	ldr	r0, [pc, #8]	; (80129f0 <LCD_TouchEnable+0x14>)
 80129e8:	f7f2 f974 	bl	8004cd4 <HAL_GPIO_WritePin>
}
 80129ec:	bf00      	nop
 80129ee:	bd80      	pop	{r7, pc}
 80129f0:	58020c00 	.word	0x58020c00

080129f4 <LCD_TouchDisable>:

static void LCD_TouchDisable(void) {
 80129f4:	b580      	push	{r7, lr}
 80129f6:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(GPIOD, GPIO_PIN_13, GPIO_PIN_SET);
 80129f8:	2201      	movs	r2, #1
 80129fa:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80129fe:	4802      	ldr	r0, [pc, #8]	; (8012a08 <LCD_TouchDisable+0x14>)
 8012a00:	f7f2 f968 	bl	8004cd4 <HAL_GPIO_WritePin>
}
 8012a04:	bf00      	nop
 8012a06:	bd80      	pop	{r7, pc}
 8012a08:	58020c00 	.word	0x58020c00

08012a0c <LCD_TouchWriteRegister>:
    LCD_TouchDisable();

    return result;
}

static result_t LCD_TouchWriteRegister(uint8_t address, uint8_t data) {
 8012a0c:	b580      	push	{r7, lr}
 8012a0e:	b084      	sub	sp, #16
 8012a10:	af00      	add	r7, sp, #0
 8012a12:	4603      	mov	r3, r0
 8012a14:	460a      	mov	r2, r1
 8012a16:	71fb      	strb	r3, [r7, #7]
 8012a18:	4613      	mov	r3, r2
 8012a1a:	71bb      	strb	r3, [r7, #6]
    uint8_t send_buffer[] = { address << 1 | 0, data };
 8012a1c:	79fb      	ldrb	r3, [r7, #7]
 8012a1e:	005b      	lsls	r3, r3, #1
 8012a20:	b2db      	uxtb	r3, r3
 8012a22:	733b      	strb	r3, [r7, #12]
 8012a24:	79bb      	ldrb	r3, [r7, #6]
 8012a26:	737b      	strb	r3, [r7, #13]

    LCD_TouchEnable();
 8012a28:	f7ff ffd8 	bl	80129dc <LCD_TouchEnable>
    result_t result = SPI_Write(SPI_Touch, send_buffer, 2);
 8012a2c:	f107 030c 	add.w	r3, r7, #12
 8012a30:	4807      	ldr	r0, [pc, #28]	; (8012a50 <LCD_TouchWriteRegister+0x44>)
 8012a32:	2202      	movs	r2, #2
 8012a34:	4619      	mov	r1, r3
 8012a36:	6800      	ldr	r0, [r0, #0]
 8012a38:	f000 fd85 	bl	8013546 <SPI_Write>
 8012a3c:	4603      	mov	r3, r0
 8012a3e:	81fb      	strh	r3, [r7, #14]
    LCD_TouchDisable();
 8012a40:	f7ff ffd8 	bl	80129f4 <LCD_TouchDisable>

    return result;
 8012a44:	89fb      	ldrh	r3, [r7, #14]
}
 8012a46:	4618      	mov	r0, r3
 8012a48:	3710      	adds	r7, #16
 8012a4a:	46bd      	mov	sp, r7
 8012a4c:	bd80      	pop	{r7, pc}
 8012a4e:	bf00      	nop
 8012a50:	2400015c 	.word	0x2400015c

08012a54 <LCD_TouchSendCommand>:

static result_t LCD_TouchSendCommand(uint8_t address) {
 8012a54:	b580      	push	{r7, lr}
 8012a56:	b084      	sub	sp, #16
 8012a58:	af00      	add	r7, sp, #0
 8012a5a:	4603      	mov	r3, r0
 8012a5c:	71fb      	strb	r3, [r7, #7]
    address <<= 1;
 8012a5e:	79fb      	ldrb	r3, [r7, #7]
 8012a60:	005b      	lsls	r3, r3, #1
 8012a62:	b2db      	uxtb	r3, r3
 8012a64:	71fb      	strb	r3, [r7, #7]

    LCD_TouchEnable();
 8012a66:	f7ff ffb9 	bl	80129dc <LCD_TouchEnable>
    result_t result = SPI_Write(SPI_Touch, &address, 1);
 8012a6a:	1dfb      	adds	r3, r7, #7
 8012a6c:	4807      	ldr	r0, [pc, #28]	; (8012a8c <LCD_TouchSendCommand+0x38>)
 8012a6e:	2201      	movs	r2, #1
 8012a70:	4619      	mov	r1, r3
 8012a72:	6800      	ldr	r0, [r0, #0]
 8012a74:	f000 fd67 	bl	8013546 <SPI_Write>
 8012a78:	4603      	mov	r3, r0
 8012a7a:	81fb      	strh	r3, [r7, #14]
    LCD_TouchDisable();
 8012a7c:	f7ff ffba 	bl	80129f4 <LCD_TouchDisable>

    return result;
 8012a80:	89fb      	ldrh	r3, [r7, #14]
}
 8012a82:	4618      	mov	r0, r3
 8012a84:	3710      	adds	r7, #16
 8012a86:	46bd      	mov	sp, r7
 8012a88:	bd80      	pop	{r7, pc}
 8012a8a:	bf00      	nop
 8012a8c:	2400015c 	.word	0x2400015c

08012a90 <LCD_TouchInit>:

result_t LCD_TouchInit(void) {
 8012a90:	b580      	push	{r7, lr}
 8012a92:	af00      	add	r7, sp, #0
    /* Set interrupt line to push-pull */
    //lcd_touch_write_register(LCD_TOUCH_REG_GENERAL_CONFIG, 0xC0);

    /* Enable position and pressure averaging */
    R_TRY(LCD_TouchWriteRegister(LCD_TOUCH_REG_OP_MODE_CONFIG, 0x06));
 8012a94:	2106      	movs	r1, #6
 8012a96:	200b      	movs	r0, #11
 8012a98:	f7ff ffb8 	bl	8012a0c <LCD_TouchWriteRegister>
 8012a9c:	4603      	mov	r3, r0
 8012a9e:	2b00      	cmp	r3, #0
 8012aa0:	d005      	beq.n	8012aae <LCD_TouchInit+0x1e>
 8012aa2:	2106      	movs	r1, #6
 8012aa4:	200b      	movs	r0, #11
 8012aa6:	f7ff ffb1 	bl	8012a0c <LCD_TouchWriteRegister>
 8012aaa:	4603      	mov	r3, r0
 8012aac:	e002      	b.n	8012ab4 <LCD_TouchInit+0x24>

    /* Sample for 32us */
    //lcd_touch_write_register(LCD_TOUCH_REG_ADC_SAMPLE_TIME_CONFIG, 0xA0);

    /* Start first measurement */
    LCD_TouchStartMeasurement();
 8012aae:	f000 f803 	bl	8012ab8 <LCD_TouchStartMeasurement>

    return RESULT_SUCCESS;
 8012ab2:	2300      	movs	r3, #0
}
 8012ab4:	4618      	mov	r0, r3
 8012ab6:	bd80      	pop	{r7, pc}

08012ab8 <LCD_TouchStartMeasurement>:

void LCD_TouchStartMeasurement(void) {
 8012ab8:	b580      	push	{r7, lr}
 8012aba:	af00      	add	r7, sp, #0
    LCD_TouchSendCommand(LCD_TOUCH_CMD_MEASURE_XY);
 8012abc:	2070      	movs	r0, #112	; 0x70
 8012abe:	f7ff ffc9 	bl	8012a54 <LCD_TouchSendCommand>
}
 8012ac2:	bf00      	nop
 8012ac4:	bd80      	pop	{r7, pc}

08012ac6 <SENSOR_Init>:
#include "peripherals/external/sensors/sht40.h"
#include "peripherals/external/sensors/tcs34725.h"
#include "peripherals/external/sensors/icm42605.h"
#include "peripherals/external/sensors.h"

result_t SENSOR_Init(void) {
 8012ac6:	b580      	push	{r7, lr}
 8012ac8:	af00      	add	r7, sp, #0
	R_TRY(LPS22BH_Init());
 8012aca:	f000 faa9 	bl	8013020 <LPS22BH_Init>
 8012ace:	4603      	mov	r3, r0
 8012ad0:	2b00      	cmp	r3, #0
 8012ad2:	d003      	beq.n	8012adc <SENSOR_Init+0x16>
 8012ad4:	f000 faa4 	bl	8013020 <LPS22BH_Init>
 8012ad8:	4603      	mov	r3, r0
 8012ada:	e023      	b.n	8012b24 <SENSOR_Init+0x5e>
	R_TRY(SHT40_Init());
 8012adc:	f000 fac3 	bl	8013066 <SHT40_Init>
 8012ae0:	4603      	mov	r3, r0
 8012ae2:	2b00      	cmp	r3, #0
 8012ae4:	d003      	beq.n	8012aee <SENSOR_Init+0x28>
 8012ae6:	f000 fabe 	bl	8013066 <SHT40_Init>
 8012aea:	4603      	mov	r3, r0
 8012aec:	e01a      	b.n	8012b24 <SENSOR_Init+0x5e>
	R_TRY(TC3A227E_Init());
 8012aee:	f000 fb51 	bl	8013194 <TC3A227E_Init>
 8012af2:	4603      	mov	r3, r0
 8012af4:	2b00      	cmp	r3, #0
 8012af6:	d003      	beq.n	8012b00 <SENSOR_Init+0x3a>
 8012af8:	f000 fb4c 	bl	8013194 <TC3A227E_Init>
 8012afc:	4603      	mov	r3, r0
 8012afe:	e011      	b.n	8012b24 <SENSOR_Init+0x5e>
  R_TRY(ICM42605_Init(ICM42605_AccelFullScaleRange_2G, ICM42605_GyroFullScaleRange_250DPS, ICM42605_AccelOutputDataRange_1000Hz, ICM42605_GyroOutputDataRange_1000Hz));
 8012b00:	2306      	movs	r3, #6
 8012b02:	2206      	movs	r2, #6
 8012b04:	2103      	movs	r1, #3
 8012b06:	2003      	movs	r0, #3
 8012b08:	f000 f860 	bl	8012bcc <ICM42605_Init>
 8012b0c:	4603      	mov	r3, r0
 8012b0e:	2b00      	cmp	r3, #0
 8012b10:	d007      	beq.n	8012b22 <SENSOR_Init+0x5c>
 8012b12:	2306      	movs	r3, #6
 8012b14:	2206      	movs	r2, #6
 8012b16:	2103      	movs	r1, #3
 8012b18:	2003      	movs	r0, #3
 8012b1a:	f000 f857 	bl	8012bcc <ICM42605_Init>
 8012b1e:	4603      	mov	r3, r0
 8012b20:	e000      	b.n	8012b24 <SENSOR_Init+0x5e>

	return RESULT_SUCCESS;
 8012b22:	2300      	movs	r3, #0
}
 8012b24:	4618      	mov	r0, r3
 8012b26:	bd80      	pop	{r7, pc}

08012b28 <write>:
	OFFSET_USER7       = 0x7E,
	OFFSET_USER8       = 0x7F
} RegisterBank4;


static result_t write(const uint8_t *buffer, size_t size) {
 8012b28:	b580      	push	{r7, lr}
 8012b2a:	b084      	sub	sp, #16
 8012b2c:	af00      	add	r7, sp, #0
 8012b2e:	6078      	str	r0, [r7, #4]
 8012b30:	6039      	str	r1, [r7, #0]
	GPIO_SetValue(SensorChipSelect, true);
 8012b32:	4b0f      	ldr	r3, [pc, #60]	; (8012b70 <write+0x48>)
 8012b34:	2201      	movs	r2, #1
 8012b36:	e893 0003 	ldmia.w	r3, {r0, r1}
 8012b3a:	f000 fc17 	bl	801336c <GPIO_SetValue>
	CORE_Delay(10);
 8012b3e:	200a      	movs	r0, #10
 8012b40:	f7ff fbd8 	bl	80122f4 <CORE_Delay>
	result_t result = SPI_Write(SPI_Sensor, buffer, size);
 8012b44:	4b0b      	ldr	r3, [pc, #44]	; (8012b74 <write+0x4c>)
 8012b46:	683a      	ldr	r2, [r7, #0]
 8012b48:	6879      	ldr	r1, [r7, #4]
 8012b4a:	6818      	ldr	r0, [r3, #0]
 8012b4c:	f000 fcfb 	bl	8013546 <SPI_Write>
 8012b50:	4603      	mov	r3, r0
 8012b52:	81fb      	strh	r3, [r7, #14]
	CORE_Delay(10);
 8012b54:	200a      	movs	r0, #10
 8012b56:	f7ff fbcd 	bl	80122f4 <CORE_Delay>
	GPIO_SetValue(SensorChipSelect, false);
 8012b5a:	4b05      	ldr	r3, [pc, #20]	; (8012b70 <write+0x48>)
 8012b5c:	2200      	movs	r2, #0
 8012b5e:	e893 0003 	ldmia.w	r3, {r0, r1}
 8012b62:	f000 fc03 	bl	801336c <GPIO_SetValue>

	return result;
 8012b66:	89fb      	ldrh	r3, [r7, #14]
}
 8012b68:	4618      	mov	r0, r3
 8012b6a:	3710      	adds	r7, #16
 8012b6c:	46bd      	mov	sp, r7
 8012b6e:	bd80      	pop	{r7, pc}
 8012b70:	08016f44 	.word	0x08016f44
 8012b74:	24000158 	.word	0x24000158

08012b78 <writeRead>:

static result_t writeRead(const uint8_t *sendBuffer, uint8_t *readBuffer, size_t size) {
 8012b78:	b580      	push	{r7, lr}
 8012b7a:	b086      	sub	sp, #24
 8012b7c:	af00      	add	r7, sp, #0
 8012b7e:	60f8      	str	r0, [r7, #12]
 8012b80:	60b9      	str	r1, [r7, #8]
 8012b82:	607a      	str	r2, [r7, #4]
	GPIO_SetValue(SensorChipSelect, true);
 8012b84:	4b0f      	ldr	r3, [pc, #60]	; (8012bc4 <writeRead+0x4c>)
 8012b86:	2201      	movs	r2, #1
 8012b88:	e893 0003 	ldmia.w	r3, {r0, r1}
 8012b8c:	f000 fbee 	bl	801336c <GPIO_SetValue>
	CORE_Delay(10);
 8012b90:	200a      	movs	r0, #10
 8012b92:	f7ff fbaf 	bl	80122f4 <CORE_Delay>
	result_t result = SPI_WriteRead(SPI_Sensor, readBuffer, sendBuffer, size);
 8012b96:	480c      	ldr	r0, [pc, #48]	; (8012bc8 <writeRead+0x50>)
 8012b98:	687b      	ldr	r3, [r7, #4]
 8012b9a:	68fa      	ldr	r2, [r7, #12]
 8012b9c:	68b9      	ldr	r1, [r7, #8]
 8012b9e:	6800      	ldr	r0, [r0, #0]
 8012ba0:	f000 fcf2 	bl	8013588 <SPI_WriteRead>
 8012ba4:	4603      	mov	r3, r0
 8012ba6:	82fb      	strh	r3, [r7, #22]
	CORE_Delay(10);
 8012ba8:	200a      	movs	r0, #10
 8012baa:	f7ff fba3 	bl	80122f4 <CORE_Delay>
	GPIO_SetValue(SensorChipSelect, false);
 8012bae:	4b05      	ldr	r3, [pc, #20]	; (8012bc4 <writeRead+0x4c>)
 8012bb0:	2200      	movs	r2, #0
 8012bb2:	e893 0003 	ldmia.w	r3, {r0, r1}
 8012bb6:	f000 fbd9 	bl	801336c <GPIO_SetValue>

	return result;
 8012bba:	8afb      	ldrh	r3, [r7, #22]
}
 8012bbc:	4618      	mov	r0, r3
 8012bbe:	3718      	adds	r7, #24
 8012bc0:	46bd      	mov	sp, r7
 8012bc2:	bd80      	pop	{r7, pc}
 8012bc4:	08016f44 	.word	0x08016f44
 8012bc8:	24000158 	.word	0x24000158

08012bcc <ICM42605_Init>:

result_t ICM42605_Init(ICM42605_AccelFullScaleRange accelScaleRange, ICM42605_GyroFullScaleRange gyroScaleRange, ICM42605_AccelOutputDataRange accelOutputDataRange, ICM42605_GyroOutputDataRange gyroOutputDataRange) {
 8012bcc:	b590      	push	{r4, r7, lr}
 8012bce:	b09f      	sub	sp, #124	; 0x7c
 8012bd0:	af00      	add	r7, sp, #0
 8012bd2:	4604      	mov	r4, r0
 8012bd4:	4608      	mov	r0, r1
 8012bd6:	4611      	mov	r1, r2
 8012bd8:	461a      	mov	r2, r3
 8012bda:	4623      	mov	r3, r4
 8012bdc:	71fb      	strb	r3, [r7, #7]
 8012bde:	4603      	mov	r3, r0
 8012be0:	71bb      	strb	r3, [r7, #6]
 8012be2:	460b      	mov	r3, r1
 8012be4:	717b      	strb	r3, [r7, #5]
 8012be6:	4613      	mov	r3, r2
 8012be8:	713b      	strb	r3, [r7, #4]

	s_accelScaleRange = accelScaleRange;
 8012bea:	4ade      	ldr	r2, [pc, #888]	; (8012f64 <ICM42605_Init+0x398>)
 8012bec:	79fb      	ldrb	r3, [r7, #7]
 8012bee:	7013      	strb	r3, [r2, #0]
	s_gyroScaleRange = gyroScaleRange;
 8012bf0:	4add      	ldr	r2, [pc, #884]	; (8012f68 <ICM42605_Init+0x39c>)
 8012bf2:	79bb      	ldrb	r3, [r7, #6]
 8012bf4:	7013      	strb	r3, [r2, #0]

	{
		uint8_t writeBuffer[2] = { WHO_AM_I | REQUEST_RESPONSE, 0x00 };
 8012bf6:	23f5      	movs	r3, #245	; 0xf5
 8012bf8:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
		uint8_t readBuffer[2] = { 0x00 };
 8012bfc:	2300      	movs	r3, #0
 8012bfe:	f8a7 3068 	strh.w	r3, [r7, #104]	; 0x68
		R_TRY(writeRead(writeBuffer, readBuffer, 2));
 8012c02:	f107 0168 	add.w	r1, r7, #104	; 0x68
 8012c06:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8012c0a:	2202      	movs	r2, #2
 8012c0c:	4618      	mov	r0, r3
 8012c0e:	f7ff ffb3 	bl	8012b78 <writeRead>
 8012c12:	4603      	mov	r3, r0
 8012c14:	2b00      	cmp	r3, #0
 8012c16:	d009      	beq.n	8012c2c <ICM42605_Init+0x60>
 8012c18:	f107 0168 	add.w	r1, r7, #104	; 0x68
 8012c1c:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8012c20:	2202      	movs	r2, #2
 8012c22:	4618      	mov	r0, r3
 8012c24:	f7ff ffa8 	bl	8012b78 <writeRead>
 8012c28:	4603      	mov	r3, r0
 8012c2a:	e1f4      	b.n	8013016 <ICM42605_Init+0x44a>

		if (readBuffer[1] != DEVICE_ID)
 8012c2c:	f897 3069 	ldrb.w	r3, [r7, #105]	; 0x69
 8012c30:	2b42      	cmp	r3, #66	; 0x42
 8012c32:	d001      	beq.n	8012c38 <ICM42605_Init+0x6c>
			return RESULT_INITIALIZATION_ERROR;
 8012c34:	2301      	movs	r3, #1
 8012c36:	e1ee      	b.n	8013016 <ICM42605_Init+0x44a>
	}

	// Enable gyroscope and accelerometer in low noise mode
	{
		uint8_t pwrMgmt0 = 0;
 8012c38:	2300      	movs	r3, #0
 8012c3a:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
		{
			uint8_t writeBuffer[2] = { PWR_MGMT0 | REQUEST_RESPONSE, 0x00 };
 8012c3e:	23ce      	movs	r3, #206	; 0xce
 8012c40:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
			uint8_t readBuffer[2] = { 0x00 };
 8012c44:	2300      	movs	r3, #0
 8012c46:	f8a7 3060 	strh.w	r3, [r7, #96]	; 0x60
			R_TRY(writeRead(writeBuffer, readBuffer, 2));
 8012c4a:	f107 0160 	add.w	r1, r7, #96	; 0x60
 8012c4e:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8012c52:	2202      	movs	r2, #2
 8012c54:	4618      	mov	r0, r3
 8012c56:	f7ff ff8f 	bl	8012b78 <writeRead>
 8012c5a:	4603      	mov	r3, r0
 8012c5c:	2b00      	cmp	r3, #0
 8012c5e:	d009      	beq.n	8012c74 <ICM42605_Init+0xa8>
 8012c60:	f107 0160 	add.w	r1, r7, #96	; 0x60
 8012c64:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8012c68:	2202      	movs	r2, #2
 8012c6a:	4618      	mov	r0, r3
 8012c6c:	f7ff ff84 	bl	8012b78 <writeRead>
 8012c70:	4603      	mov	r3, r0
 8012c72:	e1d0      	b.n	8013016 <ICM42605_Init+0x44a>
			pwrMgmt0 = readBuffer[1];
 8012c74:	f897 3061 	ldrb.w	r3, [r7, #97]	; 0x61
 8012c78:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
		}

		{
			uint8_t writeBuffer[2] = { PWR_MGMT0, pwrMgmt0 | 0x0F };
 8012c7c:	234e      	movs	r3, #78	; 0x4e
 8012c7e:	f887 305c 	strb.w	r3, [r7, #92]	; 0x5c
 8012c82:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 8012c86:	f043 030f 	orr.w	r3, r3, #15
 8012c8a:	b2db      	uxtb	r3, r3
 8012c8c:	f887 305d 	strb.w	r3, [r7, #93]	; 0x5d
			R_TRY(write(writeBuffer, 2));
 8012c90:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8012c94:	2102      	movs	r1, #2
 8012c96:	4618      	mov	r0, r3
 8012c98:	f7ff ff46 	bl	8012b28 <write>
 8012c9c:	4603      	mov	r3, r0
 8012c9e:	2b00      	cmp	r3, #0
 8012ca0:	d007      	beq.n	8012cb2 <ICM42605_Init+0xe6>
 8012ca2:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8012ca6:	2102      	movs	r1, #2
 8012ca8:	4618      	mov	r0, r3
 8012caa:	f7ff ff3d 	bl	8012b28 <write>
 8012cae:	4603      	mov	r3, r0
 8012cb0:	e1b1      	b.n	8013016 <ICM42605_Init+0x44a>
		}
	}

	CORE_Delay(100);
 8012cb2:	2064      	movs	r0, #100	; 0x64
 8012cb4:	f7ff fb1e 	bl	80122f4 <CORE_Delay>

	// Set gyro scale and data rate
	{
		uint8_t gyroConfig0 = 0;
 8012cb8:	2300      	movs	r3, #0
 8012cba:	f887 3076 	strb.w	r3, [r7, #118]	; 0x76
		{
			uint8_t writeBuffer[2] = { GYRO_CONFIG0 | REQUEST_RESPONSE, 0x00 };
 8012cbe:	23cf      	movs	r3, #207	; 0xcf
 8012cc0:	f8a7 3058 	strh.w	r3, [r7, #88]	; 0x58
			uint8_t readBuffer[2] = { 0x00 };
 8012cc4:	2300      	movs	r3, #0
 8012cc6:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
			R_TRY(writeRead(writeBuffer, readBuffer, 2));
 8012cca:	f107 0154 	add.w	r1, r7, #84	; 0x54
 8012cce:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8012cd2:	2202      	movs	r2, #2
 8012cd4:	4618      	mov	r0, r3
 8012cd6:	f7ff ff4f 	bl	8012b78 <writeRead>
 8012cda:	4603      	mov	r3, r0
 8012cdc:	2b00      	cmp	r3, #0
 8012cde:	d009      	beq.n	8012cf4 <ICM42605_Init+0x128>
 8012ce0:	f107 0154 	add.w	r1, r7, #84	; 0x54
 8012ce4:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8012ce8:	2202      	movs	r2, #2
 8012cea:	4618      	mov	r0, r3
 8012cec:	f7ff ff44 	bl	8012b78 <writeRead>
 8012cf0:	4603      	mov	r3, r0
 8012cf2:	e190      	b.n	8013016 <ICM42605_Init+0x44a>
			gyroConfig0 = readBuffer[1];
 8012cf4:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 8012cf8:	f887 3076 	strb.w	r3, [r7, #118]	; 0x76
		}

		{
			uint8_t writeBuffer[2] = { GYRO_CONFIG0, gyroConfig0 | gyroOutputDataRange | (gyroScaleRange << 5) };
 8012cfc:	234f      	movs	r3, #79	; 0x4f
 8012cfe:	f887 3050 	strb.w	r3, [r7, #80]	; 0x50
 8012d02:	f897 2076 	ldrb.w	r2, [r7, #118]	; 0x76
 8012d06:	793b      	ldrb	r3, [r7, #4]
 8012d08:	4313      	orrs	r3, r2
 8012d0a:	b2db      	uxtb	r3, r3
 8012d0c:	b25a      	sxtb	r2, r3
 8012d0e:	79bb      	ldrb	r3, [r7, #6]
 8012d10:	015b      	lsls	r3, r3, #5
 8012d12:	b25b      	sxtb	r3, r3
 8012d14:	4313      	orrs	r3, r2
 8012d16:	b25b      	sxtb	r3, r3
 8012d18:	b2db      	uxtb	r3, r3
 8012d1a:	f887 3051 	strb.w	r3, [r7, #81]	; 0x51
			R_TRY(write(writeBuffer, 2));
 8012d1e:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8012d22:	2102      	movs	r1, #2
 8012d24:	4618      	mov	r0, r3
 8012d26:	f7ff feff 	bl	8012b28 <write>
 8012d2a:	4603      	mov	r3, r0
 8012d2c:	2b00      	cmp	r3, #0
 8012d2e:	d007      	beq.n	8012d40 <ICM42605_Init+0x174>
 8012d30:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8012d34:	2102      	movs	r1, #2
 8012d36:	4618      	mov	r0, r3
 8012d38:	f7ff fef6 	bl	8012b28 <write>
 8012d3c:	4603      	mov	r3, r0
 8012d3e:	e16a      	b.n	8013016 <ICM42605_Init+0x44a>
		}
	}

	// Set accel scale and data rate
	{
		uint8_t accelConfig0 = 0;
 8012d40:	2300      	movs	r3, #0
 8012d42:	f887 3075 	strb.w	r3, [r7, #117]	; 0x75
		{
			uint8_t writeBuffer[2] = { ACCEL_CONFIG0 | REQUEST_RESPONSE, 0x00 };
 8012d46:	23d0      	movs	r3, #208	; 0xd0
 8012d48:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
			uint8_t readBuffer[2] = { 0x00 };
 8012d4c:	2300      	movs	r3, #0
 8012d4e:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
			R_TRY(writeRead(writeBuffer, readBuffer, 2));
 8012d52:	f107 0148 	add.w	r1, r7, #72	; 0x48
 8012d56:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8012d5a:	2202      	movs	r2, #2
 8012d5c:	4618      	mov	r0, r3
 8012d5e:	f7ff ff0b 	bl	8012b78 <writeRead>
 8012d62:	4603      	mov	r3, r0
 8012d64:	2b00      	cmp	r3, #0
 8012d66:	d009      	beq.n	8012d7c <ICM42605_Init+0x1b0>
 8012d68:	f107 0148 	add.w	r1, r7, #72	; 0x48
 8012d6c:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8012d70:	2202      	movs	r2, #2
 8012d72:	4618      	mov	r0, r3
 8012d74:	f7ff ff00 	bl	8012b78 <writeRead>
 8012d78:	4603      	mov	r3, r0
 8012d7a:	e14c      	b.n	8013016 <ICM42605_Init+0x44a>
			accelConfig0 = readBuffer[1];
 8012d7c:	f897 3049 	ldrb.w	r3, [r7, #73]	; 0x49
 8012d80:	f887 3075 	strb.w	r3, [r7, #117]	; 0x75
		}

		{
			uint8_t writeBuffer[2] = { ACCEL_CONFIG0, accelConfig0 | accelOutputDataRange | (accelScaleRange << 5) };
 8012d84:	2350      	movs	r3, #80	; 0x50
 8012d86:	f887 3044 	strb.w	r3, [r7, #68]	; 0x44
 8012d8a:	f897 2075 	ldrb.w	r2, [r7, #117]	; 0x75
 8012d8e:	797b      	ldrb	r3, [r7, #5]
 8012d90:	4313      	orrs	r3, r2
 8012d92:	b2db      	uxtb	r3, r3
 8012d94:	b25a      	sxtb	r2, r3
 8012d96:	79fb      	ldrb	r3, [r7, #7]
 8012d98:	015b      	lsls	r3, r3, #5
 8012d9a:	b25b      	sxtb	r3, r3
 8012d9c:	4313      	orrs	r3, r2
 8012d9e:	b25b      	sxtb	r3, r3
 8012da0:	b2db      	uxtb	r3, r3
 8012da2:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45
			R_TRY(write(writeBuffer, 2));
 8012da6:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8012daa:	2102      	movs	r1, #2
 8012dac:	4618      	mov	r0, r3
 8012dae:	f7ff febb 	bl	8012b28 <write>
 8012db2:	4603      	mov	r3, r0
 8012db4:	2b00      	cmp	r3, #0
 8012db6:	d007      	beq.n	8012dc8 <ICM42605_Init+0x1fc>
 8012db8:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8012dbc:	2102      	movs	r1, #2
 8012dbe:	4618      	mov	r0, r3
 8012dc0:	f7ff feb2 	bl	8012b28 <write>
 8012dc4:	4603      	mov	r3, r0
 8012dc6:	e126      	b.n	8013016 <ICM42605_Init+0x44a>
		}
	}

	// Set temperature low pass filter to a minimum and use first order filter for gyro
	{
		uint8_t gyroConfig1  = 0;
 8012dc8:	2300      	movs	r3, #0
 8012dca:	f887 3074 	strb.w	r3, [r7, #116]	; 0x74
		{
			uint8_t writeBuffer[2] = { GYRO_CONFIG1 | REQUEST_RESPONSE, 0x00 };
 8012dce:	23d1      	movs	r3, #209	; 0xd1
 8012dd0:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
			uint8_t readBuffer[2] = { 0x00 };
 8012dd4:	2300      	movs	r3, #0
 8012dd6:	87bb      	strh	r3, [r7, #60]	; 0x3c
			R_TRY(writeRead(writeBuffer, readBuffer, 2));
 8012dd8:	f107 013c 	add.w	r1, r7, #60	; 0x3c
 8012ddc:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8012de0:	2202      	movs	r2, #2
 8012de2:	4618      	mov	r0, r3
 8012de4:	f7ff fec8 	bl	8012b78 <writeRead>
 8012de8:	4603      	mov	r3, r0
 8012dea:	2b00      	cmp	r3, #0
 8012dec:	d009      	beq.n	8012e02 <ICM42605_Init+0x236>
 8012dee:	f107 013c 	add.w	r1, r7, #60	; 0x3c
 8012df2:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8012df6:	2202      	movs	r2, #2
 8012df8:	4618      	mov	r0, r3
 8012dfa:	f7ff febd 	bl	8012b78 <writeRead>
 8012dfe:	4603      	mov	r3, r0
 8012e00:	e109      	b.n	8013016 <ICM42605_Init+0x44a>
			gyroConfig1  = readBuffer[1];
 8012e02:	f897 303d 	ldrb.w	r3, [r7, #61]	; 0x3d
 8012e06:	f887 3074 	strb.w	r3, [r7, #116]	; 0x74
		}

		{
			uint8_t writeBuffer[2] = { GYRO_CONFIG1, gyroConfig1 | 0x0D };
 8012e0a:	2351      	movs	r3, #81	; 0x51
 8012e0c:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
 8012e10:	f897 3074 	ldrb.w	r3, [r7, #116]	; 0x74
 8012e14:	f043 030d 	orr.w	r3, r3, #13
 8012e18:	b2db      	uxtb	r3, r3
 8012e1a:	f887 3039 	strb.w	r3, [r7, #57]	; 0x39
			R_TRY(write(writeBuffer, 2));
 8012e1e:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8012e22:	2102      	movs	r1, #2
 8012e24:	4618      	mov	r0, r3
 8012e26:	f7ff fe7f 	bl	8012b28 <write>
 8012e2a:	4603      	mov	r3, r0
 8012e2c:	2b00      	cmp	r3, #0
 8012e2e:	d007      	beq.n	8012e40 <ICM42605_Init+0x274>
 8012e30:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8012e34:	2102      	movs	r1, #2
 8012e36:	4618      	mov	r0, r3
 8012e38:	f7ff fe76 	bl	8012b28 <write>
 8012e3c:	4603      	mov	r3, r0
 8012e3e:	e0ea      	b.n	8013016 <ICM42605_Init+0x44a>
		}
	}

	// Setup interrupt pins
	{
		uint8_t intConfig0  = 0;
 8012e40:	2300      	movs	r3, #0
 8012e42:	f887 3073 	strb.w	r3, [r7, #115]	; 0x73
		{
			uint8_t writeBuffer[2] = { INT_CONFIG | REQUEST_RESPONSE, 0x00 };
 8012e46:	2394      	movs	r3, #148	; 0x94
 8012e48:	86bb      	strh	r3, [r7, #52]	; 0x34
			uint8_t readBuffer[2] = { 0x00 };
 8012e4a:	2300      	movs	r3, #0
 8012e4c:	863b      	strh	r3, [r7, #48]	; 0x30
			R_TRY(writeRead(writeBuffer, readBuffer, 2));
 8012e4e:	f107 0130 	add.w	r1, r7, #48	; 0x30
 8012e52:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8012e56:	2202      	movs	r2, #2
 8012e58:	4618      	mov	r0, r3
 8012e5a:	f7ff fe8d 	bl	8012b78 <writeRead>
 8012e5e:	4603      	mov	r3, r0
 8012e60:	2b00      	cmp	r3, #0
 8012e62:	d009      	beq.n	8012e78 <ICM42605_Init+0x2ac>
 8012e64:	f107 0130 	add.w	r1, r7, #48	; 0x30
 8012e68:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8012e6c:	2202      	movs	r2, #2
 8012e6e:	4618      	mov	r0, r3
 8012e70:	f7ff fe82 	bl	8012b78 <writeRead>
 8012e74:	4603      	mov	r3, r0
 8012e76:	e0ce      	b.n	8013016 <ICM42605_Init+0x44a>
			intConfig0 = readBuffer[1];
 8012e78:	f897 3031 	ldrb.w	r3, [r7, #49]	; 0x31
 8012e7c:	f887 3073 	strb.w	r3, [r7, #115]	; 0x73
		}

		{
			uint8_t writeBuffer[2] = { INT_CONFIG, intConfig0 | 0x18 | 0x03 };
 8012e80:	2314      	movs	r3, #20
 8012e82:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
 8012e86:	f897 3073 	ldrb.w	r3, [r7, #115]	; 0x73
 8012e8a:	f043 031b 	orr.w	r3, r3, #27
 8012e8e:	b2db      	uxtb	r3, r3
 8012e90:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
			R_TRY(write(writeBuffer, 2));
 8012e94:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8012e98:	2102      	movs	r1, #2
 8012e9a:	4618      	mov	r0, r3
 8012e9c:	f7ff fe44 	bl	8012b28 <write>
 8012ea0:	4603      	mov	r3, r0
 8012ea2:	2b00      	cmp	r3, #0
 8012ea4:	d007      	beq.n	8012eb6 <ICM42605_Init+0x2ea>
 8012ea6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8012eaa:	2102      	movs	r1, #2
 8012eac:	4618      	mov	r0, r3
 8012eae:	f7ff fe3b 	bl	8012b28 <write>
 8012eb2:	4603      	mov	r3, r0
 8012eb4:	e0af      	b.n	8013016 <ICM42605_Init+0x44a>
		}
	}

	// Enable async interrupt reset
	{
		uint8_t intConfig1 = 0;
 8012eb6:	2300      	movs	r3, #0
 8012eb8:	f887 3072 	strb.w	r3, [r7, #114]	; 0x72
		{
			uint8_t writeBuffer[2] = { INT_CONFIG1 | REQUEST_RESPONSE, 0x00 };
 8012ebc:	23e4      	movs	r3, #228	; 0xe4
 8012ebe:	853b      	strh	r3, [r7, #40]	; 0x28
			uint8_t readBuffer[2] = { 0x00 };
 8012ec0:	2300      	movs	r3, #0
 8012ec2:	84bb      	strh	r3, [r7, #36]	; 0x24
			R_TRY(writeRead(writeBuffer, readBuffer, 2));
 8012ec4:	f107 0124 	add.w	r1, r7, #36	; 0x24
 8012ec8:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8012ecc:	2202      	movs	r2, #2
 8012ece:	4618      	mov	r0, r3
 8012ed0:	f7ff fe52 	bl	8012b78 <writeRead>
 8012ed4:	4603      	mov	r3, r0
 8012ed6:	2b00      	cmp	r3, #0
 8012ed8:	d009      	beq.n	8012eee <ICM42605_Init+0x322>
 8012eda:	f107 0124 	add.w	r1, r7, #36	; 0x24
 8012ede:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8012ee2:	2202      	movs	r2, #2
 8012ee4:	4618      	mov	r0, r3
 8012ee6:	f7ff fe47 	bl	8012b78 <writeRead>
 8012eea:	4603      	mov	r3, r0
 8012eec:	e093      	b.n	8013016 <ICM42605_Init+0x44a>
			intConfig1 = readBuffer[1];
 8012eee:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8012ef2:	f887 3072 	strb.w	r3, [r7, #114]	; 0x72
		}

		{
			uint8_t writeBuffer[2] = { INT_CONFIG1, intConfig1 & ~0x10 };
 8012ef6:	2364      	movs	r3, #100	; 0x64
 8012ef8:	f887 3020 	strb.w	r3, [r7, #32]
 8012efc:	f897 3072 	ldrb.w	r3, [r7, #114]	; 0x72
 8012f00:	f023 0310 	bic.w	r3, r3, #16
 8012f04:	b2db      	uxtb	r3, r3
 8012f06:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
			R_TRY(write(writeBuffer, 2));
 8012f0a:	f107 0320 	add.w	r3, r7, #32
 8012f0e:	2102      	movs	r1, #2
 8012f10:	4618      	mov	r0, r3
 8012f12:	f7ff fe09 	bl	8012b28 <write>
 8012f16:	4603      	mov	r3, r0
 8012f18:	2b00      	cmp	r3, #0
 8012f1a:	d007      	beq.n	8012f2c <ICM42605_Init+0x360>
 8012f1c:	f107 0320 	add.w	r3, r7, #32
 8012f20:	2102      	movs	r1, #2
 8012f22:	4618      	mov	r0, r3
 8012f24:	f7ff fe00 	bl	8012b28 <write>
 8012f28:	4603      	mov	r3, r0
 8012f2a:	e074      	b.n	8013016 <ICM42605_Init+0x44a>
		}
	}

	// Route data ready interrupt to INT1
	{
		uint8_t intSource0 = 0;
 8012f2c:	2300      	movs	r3, #0
 8012f2e:	f887 3071 	strb.w	r3, [r7, #113]	; 0x71
		{
			uint8_t writeBuffer[2] = { INT_SOURCE0 | REQUEST_RESPONSE, 0x00 };
 8012f32:	23e5      	movs	r3, #229	; 0xe5
 8012f34:	83bb      	strh	r3, [r7, #28]
			uint8_t readBuffer[2] = { 0x00 };
 8012f36:	2300      	movs	r3, #0
 8012f38:	833b      	strh	r3, [r7, #24]
			R_TRY(writeRead(writeBuffer, readBuffer, 2));
 8012f3a:	f107 0118 	add.w	r1, r7, #24
 8012f3e:	f107 031c 	add.w	r3, r7, #28
 8012f42:	2202      	movs	r2, #2
 8012f44:	4618      	mov	r0, r3
 8012f46:	f7ff fe17 	bl	8012b78 <writeRead>
 8012f4a:	4603      	mov	r3, r0
 8012f4c:	2b00      	cmp	r3, #0
 8012f4e:	d00d      	beq.n	8012f6c <ICM42605_Init+0x3a0>
 8012f50:	f107 0118 	add.w	r1, r7, #24
 8012f54:	f107 031c 	add.w	r3, r7, #28
 8012f58:	2202      	movs	r2, #2
 8012f5a:	4618      	mov	r0, r3
 8012f5c:	f7ff fe0c 	bl	8012b78 <writeRead>
 8012f60:	4603      	mov	r3, r0
 8012f62:	e058      	b.n	8013016 <ICM42605_Init+0x44a>
 8012f64:	2400039a 	.word	0x2400039a
 8012f68:	2400039b 	.word	0x2400039b
			intSource0 = readBuffer[1];
 8012f6c:	7e7b      	ldrb	r3, [r7, #25]
 8012f6e:	f887 3071 	strb.w	r3, [r7, #113]	; 0x71
		}

		{
			uint8_t writeBuffer[2] = { INT_SOURCE0, intSource0 | 0x08 };
 8012f72:	2365      	movs	r3, #101	; 0x65
 8012f74:	753b      	strb	r3, [r7, #20]
 8012f76:	f897 3071 	ldrb.w	r3, [r7, #113]	; 0x71
 8012f7a:	f043 0308 	orr.w	r3, r3, #8
 8012f7e:	b2db      	uxtb	r3, r3
 8012f80:	757b      	strb	r3, [r7, #21]
			R_TRY(write(writeBuffer, 2));
 8012f82:	f107 0314 	add.w	r3, r7, #20
 8012f86:	2102      	movs	r1, #2
 8012f88:	4618      	mov	r0, r3
 8012f8a:	f7ff fdcd 	bl	8012b28 <write>
 8012f8e:	4603      	mov	r3, r0
 8012f90:	2b00      	cmp	r3, #0
 8012f92:	d007      	beq.n	8012fa4 <ICM42605_Init+0x3d8>
 8012f94:	f107 0314 	add.w	r3, r7, #20
 8012f98:	2102      	movs	r1, #2
 8012f9a:	4618      	mov	r0, r3
 8012f9c:	f7ff fdc4 	bl	8012b28 <write>
 8012fa0:	4603      	mov	r3, r0
 8012fa2:	e038      	b.n	8013016 <ICM42605_Init+0x44a>
		}
	}

	// Route AGC interrupt to INT2
	{
		uint8_t intSource3 = 0;
 8012fa4:	2300      	movs	r3, #0
 8012fa6:	f887 3070 	strb.w	r3, [r7, #112]	; 0x70
		{
			uint8_t writeBuffer[2] = { INT_SOURCE3 | REQUEST_RESPONSE, 0x00 };
 8012faa:	23e8      	movs	r3, #232	; 0xe8
 8012fac:	823b      	strh	r3, [r7, #16]
			uint8_t readBuffer[2] = { 0x00 };
 8012fae:	2300      	movs	r3, #0
 8012fb0:	81bb      	strh	r3, [r7, #12]
			R_TRY(writeRead(writeBuffer, readBuffer, 2));
 8012fb2:	f107 010c 	add.w	r1, r7, #12
 8012fb6:	f107 0310 	add.w	r3, r7, #16
 8012fba:	2202      	movs	r2, #2
 8012fbc:	4618      	mov	r0, r3
 8012fbe:	f7ff fddb 	bl	8012b78 <writeRead>
 8012fc2:	4603      	mov	r3, r0
 8012fc4:	2b00      	cmp	r3, #0
 8012fc6:	d009      	beq.n	8012fdc <ICM42605_Init+0x410>
 8012fc8:	f107 010c 	add.w	r1, r7, #12
 8012fcc:	f107 0310 	add.w	r3, r7, #16
 8012fd0:	2202      	movs	r2, #2
 8012fd2:	4618      	mov	r0, r3
 8012fd4:	f7ff fdd0 	bl	8012b78 <writeRead>
 8012fd8:	4603      	mov	r3, r0
 8012fda:	e01c      	b.n	8013016 <ICM42605_Init+0x44a>
			intSource3 = readBuffer[1];
 8012fdc:	7b7b      	ldrb	r3, [r7, #13]
 8012fde:	f887 3070 	strb.w	r3, [r7, #112]	; 0x70
		}

		{
			uint8_t writeBuffer[2] = { INT_SOURCE3, intSource3 | 0x01 };
 8012fe2:	2368      	movs	r3, #104	; 0x68
 8012fe4:	723b      	strb	r3, [r7, #8]
 8012fe6:	f897 3070 	ldrb.w	r3, [r7, #112]	; 0x70
 8012fea:	f043 0301 	orr.w	r3, r3, #1
 8012fee:	b2db      	uxtb	r3, r3
 8012ff0:	727b      	strb	r3, [r7, #9]
			R_TRY(write(writeBuffer, 2));
 8012ff2:	f107 0308 	add.w	r3, r7, #8
 8012ff6:	2102      	movs	r1, #2
 8012ff8:	4618      	mov	r0, r3
 8012ffa:	f7ff fd95 	bl	8012b28 <write>
 8012ffe:	4603      	mov	r3, r0
 8013000:	2b00      	cmp	r3, #0
 8013002:	d007      	beq.n	8013014 <ICM42605_Init+0x448>
 8013004:	f107 0308 	add.w	r3, r7, #8
 8013008:	2102      	movs	r1, #2
 801300a:	4618      	mov	r0, r3
 801300c:	f7ff fd8c 	bl	8012b28 <write>
 8013010:	4603      	mov	r3, r0
 8013012:	e000      	b.n	8013016 <ICM42605_Init+0x44a>
		}
	}

	return RESULT_SUCCESS;
 8013014:	2300      	movs	r3, #0
}
 8013016:	4618      	mov	r0, r3
 8013018:	377c      	adds	r7, #124	; 0x7c
 801301a:	46bd      	mov	sp, r7
 801301c:	bd90      	pop	{r4, r7, pc}
 801301e:	bf00      	nop

08013020 <LPS22BH_Init>:
	uint8_t FIFO_EN		: 1;	///< FIFO enable
	uint8_t BOOT			: 1;	///< Reboot memory content
} ControlRegister2_t;


result_t LPS22BH_Init(void) {
 8013020:	b580      	push	{r7, lr}
 8013022:	b082      	sub	sp, #8
 8013024:	af00      	add	r7, sp, #0
	uint8_t readDeviceId = 0x00;
 8013026:	2300      	movs	r3, #0
 8013028:	71fb      	strb	r3, [r7, #7]
	do {
		R_TRY(I2C_ReadRegister(DEVICE_ADDRESS, WHO_AM_I | REQUEST_RESPONSE, &readDeviceId));
 801302a:	1dfb      	adds	r3, r7, #7
 801302c:	461a      	mov	r2, r3
 801302e:	218f      	movs	r1, #143	; 0x8f
 8013030:	205c      	movs	r0, #92	; 0x5c
 8013032:	f000 fa45 	bl	80134c0 <I2C_ReadRegister>
 8013036:	4603      	mov	r3, r0
 8013038:	2b00      	cmp	r3, #0
 801303a:	d007      	beq.n	801304c <LPS22BH_Init+0x2c>
 801303c:	1dfb      	adds	r3, r7, #7
 801303e:	461a      	mov	r2, r3
 8013040:	218f      	movs	r1, #143	; 0x8f
 8013042:	205c      	movs	r0, #92	; 0x5c
 8013044:	f000 fa3c 	bl	80134c0 <I2C_ReadRegister>
 8013048:	4603      	mov	r3, r0
 801304a:	e008      	b.n	801305e <LPS22BH_Init+0x3e>
		if (readDeviceId == DEVICE_ID)
 801304c:	79fb      	ldrb	r3, [r7, #7]
 801304e:	2bb1      	cmp	r3, #177	; 0xb1
 8013050:	d003      	beq.n	801305a <LPS22BH_Init+0x3a>
			break;

		CORE_Delay(100);
 8013052:	2064      	movs	r0, #100	; 0x64
 8013054:	f7ff f94e 	bl	80122f4 <CORE_Delay>
		R_TRY(I2C_ReadRegister(DEVICE_ADDRESS, WHO_AM_I | REQUEST_RESPONSE, &readDeviceId));
 8013058:	e7e7      	b.n	801302a <LPS22BH_Init+0xa>
			break;
 801305a:	bf00      	nop
	} while (true);

	return RESULT_SUCCESS;
 801305c:	2300      	movs	r3, #0
}
 801305e:	4618      	mov	r0, r3
 8013060:	3708      	adds	r7, #8
 8013062:	46bd      	mov	sp, r7
 8013064:	bd80      	pop	{r7, pc}

08013066 <SHT40_Init>:
typedef struct {
    float32_t humidity;
    float32_t temperature;
} SensorData_t;

result_t SHT40_Init(void) {
 8013066:	b580      	push	{r7, lr}
 8013068:	af00      	add	r7, sp, #0
	R_TRY(I2C_Write(DEVICE_ADDRESS, SoftReset));
 801306a:	2194      	movs	r1, #148	; 0x94
 801306c:	2044      	movs	r0, #68	; 0x44
 801306e:	f000 f9bd 	bl	80133ec <I2C_Write>
 8013072:	4603      	mov	r3, r0
 8013074:	2b00      	cmp	r3, #0
 8013076:	d005      	beq.n	8013084 <SHT40_Init+0x1e>
 8013078:	2194      	movs	r1, #148	; 0x94
 801307a:	2044      	movs	r0, #68	; 0x44
 801307c:	f000 f9b6 	bl	80133ec <I2C_Write>
 8013080:	4603      	mov	r3, r0
 8013082:	e003      	b.n	801308c <SHT40_Init+0x26>
	CORE_Delay(2);
 8013084:	2002      	movs	r0, #2
 8013086:	f7ff f935 	bl	80122f4 <CORE_Delay>

	return RESULT_SUCCESS;
 801308a:	2300      	movs	r3, #0
}
 801308c:	4618      	mov	r0, r3
 801308e:	bd80      	pop	{r7, pc}

08013090 <SetIntegrationTime>:
  _16x 	= 0x02, ///<  16x gain
  _60x 	= 0x03  ///<  60x gain
} Gain_t;


static result_t SetIntegrationTime(IntegrationTime_t integrationTime) {
 8013090:	b580      	push	{r7, lr}
 8013092:	b082      	sub	sp, #8
 8013094:	af00      	add	r7, sp, #0
 8013096:	4603      	mov	r3, r0
 8013098:	71fb      	strb	r3, [r7, #7]
	R_TRY(I2C_WriteRegister(DEVICE_ADDRESS, ATIME | COMMAND, integrationTime));
 801309a:	79fb      	ldrb	r3, [r7, #7]
 801309c:	461a      	mov	r2, r3
 801309e:	2181      	movs	r1, #129	; 0x81
 80130a0:	2029      	movs	r0, #41	; 0x29
 80130a2:	f000 f9c3 	bl	801342c <I2C_WriteRegister>
 80130a6:	4603      	mov	r3, r0
 80130a8:	2b00      	cmp	r3, #0
 80130aa:	d007      	beq.n	80130bc <SetIntegrationTime+0x2c>
 80130ac:	79fb      	ldrb	r3, [r7, #7]
 80130ae:	461a      	mov	r2, r3
 80130b0:	2181      	movs	r1, #129	; 0x81
 80130b2:	2029      	movs	r0, #41	; 0x29
 80130b4:	f000 f9ba 	bl	801342c <I2C_WriteRegister>
 80130b8:	4603      	mov	r3, r0
 80130ba:	e000      	b.n	80130be <SetIntegrationTime+0x2e>

	return RESULT_SUCCESS;
 80130bc:	2300      	movs	r3, #0
}
 80130be:	4618      	mov	r0, r3
 80130c0:	3708      	adds	r7, #8
 80130c2:	46bd      	mov	sp, r7
 80130c4:	bd80      	pop	{r7, pc}

080130c6 <SetGain>:

static result_t SetGain(Gain_t gain) {
 80130c6:	b580      	push	{r7, lr}
 80130c8:	b082      	sub	sp, #8
 80130ca:	af00      	add	r7, sp, #0
 80130cc:	4603      	mov	r3, r0
 80130ce:	71fb      	strb	r3, [r7, #7]
    R_TRY(I2C_WriteRegister(DEVICE_ADDRESS, CTRL | COMMAND, gain));
 80130d0:	79fb      	ldrb	r3, [r7, #7]
 80130d2:	461a      	mov	r2, r3
 80130d4:	218f      	movs	r1, #143	; 0x8f
 80130d6:	2029      	movs	r0, #41	; 0x29
 80130d8:	f000 f9a8 	bl	801342c <I2C_WriteRegister>
 80130dc:	4603      	mov	r3, r0
 80130de:	2b00      	cmp	r3, #0
 80130e0:	d007      	beq.n	80130f2 <SetGain+0x2c>
 80130e2:	79fb      	ldrb	r3, [r7, #7]
 80130e4:	461a      	mov	r2, r3
 80130e6:	218f      	movs	r1, #143	; 0x8f
 80130e8:	2029      	movs	r0, #41	; 0x29
 80130ea:	f000 f99f 	bl	801342c <I2C_WriteRegister>
 80130ee:	4603      	mov	r3, r0
 80130f0:	e000      	b.n	80130f4 <SetGain+0x2e>

    return RESULT_SUCCESS;
 80130f2:	2300      	movs	r3, #0
}
 80130f4:	4618      	mov	r0, r3
 80130f6:	3708      	adds	r7, #8
 80130f8:	46bd      	mov	sp, r7
 80130fa:	bd80      	pop	{r7, pc}

080130fc <Enable>:

static result_t Enable(void) {
 80130fc:	b580      	push	{r7, lr}
 80130fe:	b082      	sub	sp, #8
 8013100:	af00      	add	r7, sp, #0
	EnableRegister_t reg = { .PON = true };
 8013102:	2300      	movs	r3, #0
 8013104:	713b      	strb	r3, [r7, #4]
 8013106:	793b      	ldrb	r3, [r7, #4]
 8013108:	f043 0301 	orr.w	r3, r3, #1
 801310c:	713b      	strb	r3, [r7, #4]
	R_TRY(I2C_WriteRegister(DEVICE_ADDRESS, EN | COMMAND, *(uint8_t*)&reg));
 801310e:	1d3b      	adds	r3, r7, #4
 8013110:	781b      	ldrb	r3, [r3, #0]
 8013112:	461a      	mov	r2, r3
 8013114:	2180      	movs	r1, #128	; 0x80
 8013116:	2029      	movs	r0, #41	; 0x29
 8013118:	f000 f988 	bl	801342c <I2C_WriteRegister>
 801311c:	4603      	mov	r3, r0
 801311e:	2b00      	cmp	r3, #0
 8013120:	d008      	beq.n	8013134 <Enable+0x38>
 8013122:	1d3b      	adds	r3, r7, #4
 8013124:	781b      	ldrb	r3, [r3, #0]
 8013126:	461a      	mov	r2, r3
 8013128:	2180      	movs	r1, #128	; 0x80
 801312a:	2029      	movs	r0, #41	; 0x29
 801312c:	f000 f97e 	bl	801342c <I2C_WriteRegister>
 8013130:	4603      	mov	r3, r0
 8013132:	e003      	b.n	801313c <Enable+0x40>

	CORE_Delay(3);
 8013134:	2003      	movs	r0, #3
 8013136:	f7ff f8dd 	bl	80122f4 <CORE_Delay>

	return RESULT_SUCCESS;
 801313a:	2300      	movs	r3, #0
}
 801313c:	4618      	mov	r0, r3
 801313e:	3708      	adds	r7, #8
 8013140:	46bd      	mov	sp, r7
 8013142:	bd80      	pop	{r7, pc}

08013144 <StartConversion>:
	CORE_Delay(3);

	return RESULT_SUCCESS;
}

static result_t StartConversion(void) {
 8013144:	b580      	push	{r7, lr}
 8013146:	b082      	sub	sp, #8
 8013148:	af00      	add	r7, sp, #0
    EnableRegister_t reg = { .PON = true, .AEN = true };
 801314a:	2300      	movs	r3, #0
 801314c:	713b      	strb	r3, [r7, #4]
 801314e:	793b      	ldrb	r3, [r7, #4]
 8013150:	f043 0301 	orr.w	r3, r3, #1
 8013154:	713b      	strb	r3, [r7, #4]
 8013156:	793b      	ldrb	r3, [r7, #4]
 8013158:	f043 0302 	orr.w	r3, r3, #2
 801315c:	713b      	strb	r3, [r7, #4]
	R_TRY(I2C_WriteRegister(DEVICE_ADDRESS, EN | COMMAND, *(uint8_t*)&reg));
 801315e:	1d3b      	adds	r3, r7, #4
 8013160:	781b      	ldrb	r3, [r3, #0]
 8013162:	461a      	mov	r2, r3
 8013164:	2180      	movs	r1, #128	; 0x80
 8013166:	2029      	movs	r0, #41	; 0x29
 8013168:	f000 f960 	bl	801342c <I2C_WriteRegister>
 801316c:	4603      	mov	r3, r0
 801316e:	2b00      	cmp	r3, #0
 8013170:	d008      	beq.n	8013184 <StartConversion+0x40>
 8013172:	1d3b      	adds	r3, r7, #4
 8013174:	781b      	ldrb	r3, [r3, #0]
 8013176:	461a      	mov	r2, r3
 8013178:	2180      	movs	r1, #128	; 0x80
 801317a:	2029      	movs	r0, #41	; 0x29
 801317c:	f000 f956 	bl	801342c <I2C_WriteRegister>
 8013180:	4603      	mov	r3, r0
 8013182:	e003      	b.n	801318c <StartConversion+0x48>

	CORE_Delay(3);
 8013184:	2003      	movs	r0, #3
 8013186:	f7ff f8b5 	bl	80122f4 <CORE_Delay>

	return RESULT_SUCCESS;
 801318a:	2300      	movs	r3, #0
}
 801318c:	4618      	mov	r0, r3
 801318e:	3708      	adds	r7, #8
 8013190:	46bd      	mov	sp, r7
 8013192:	bd80      	pop	{r7, pc}

08013194 <TC3A227E_Init>:
		return false;

	return status & 0x01;
}

result_t TC3A227E_Init(void) {
 8013194:	b580      	push	{r7, lr}
 8013196:	af00      	add	r7, sp, #0
	R_TRY(SetIntegrationTime(_24ms));
 8013198:	20f6      	movs	r0, #246	; 0xf6
 801319a:	f7ff ff79 	bl	8013090 <SetIntegrationTime>
 801319e:	4603      	mov	r3, r0
 80131a0:	2b00      	cmp	r3, #0
 80131a2:	d004      	beq.n	80131ae <TC3A227E_Init+0x1a>
 80131a4:	20f6      	movs	r0, #246	; 0xf6
 80131a6:	f7ff ff73 	bl	8013090 <SetIntegrationTime>
 80131aa:	4603      	mov	r3, r0
 80131ac:	e01d      	b.n	80131ea <TC3A227E_Init+0x56>
	R_TRY(SetGain(_60x));
 80131ae:	2003      	movs	r0, #3
 80131b0:	f7ff ff89 	bl	80130c6 <SetGain>
 80131b4:	4603      	mov	r3, r0
 80131b6:	2b00      	cmp	r3, #0
 80131b8:	d004      	beq.n	80131c4 <TC3A227E_Init+0x30>
 80131ba:	2003      	movs	r0, #3
 80131bc:	f7ff ff83 	bl	80130c6 <SetGain>
 80131c0:	4603      	mov	r3, r0
 80131c2:	e012      	b.n	80131ea <TC3A227E_Init+0x56>
	R_TRY(Enable());
 80131c4:	f7ff ff9a 	bl	80130fc <Enable>
 80131c8:	4603      	mov	r3, r0
 80131ca:	2b00      	cmp	r3, #0
 80131cc:	d003      	beq.n	80131d6 <TC3A227E_Init+0x42>
 80131ce:	f7ff ff95 	bl	80130fc <Enable>
 80131d2:	4603      	mov	r3, r0
 80131d4:	e009      	b.n	80131ea <TC3A227E_Init+0x56>
	R_TRY(StartConversion());
 80131d6:	f7ff ffb5 	bl	8013144 <StartConversion>
 80131da:	4603      	mov	r3, r0
 80131dc:	2b00      	cmp	r3, #0
 80131de:	d003      	beq.n	80131e8 <TC3A227E_Init+0x54>
 80131e0:	f7ff ffb0 	bl	8013144 <StartConversion>
 80131e4:	4603      	mov	r3, r0
 80131e6:	e000      	b.n	80131ea <TC3A227E_Init+0x56>

	return RESULT_SUCCESS;
 80131e8:	2300      	movs	r3, #0
}
 80131ea:	4618      	mov	r0, r3
 80131ec:	bd80      	pop	{r7, pc}

080131ee <ADC_Init>:
		default: return 16;
	}
}


result_t ADC_Init(void) {
 80131ee:	b480      	push	{r7}
 80131f0:	af00      	add	r7, sp, #0
	/* Noting to do */
	return RESULT_SUCCESS;
 80131f2:	2300      	movs	r3, #0
}
 80131f4:	4618      	mov	r0, r3
 80131f6:	46bd      	mov	sp, r7
 80131f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80131fc:	4770      	bx	lr

080131fe <DAC_Init>:
#include "common/processor.h"

DAC_Handle_t DAC1_CH1 = { DAC1, 1 };
DAC_Handle_t DAC1_CH2 = { DAC1, 2 };

result_t DAC_Init(DAC_Handle_t handle) {
 80131fe:	b480      	push	{r7}
 8013200:	b083      	sub	sp, #12
 8013202:	af00      	add	r7, sp, #0
 8013204:	463b      	mov	r3, r7
 8013206:	e883 0003 	stmia.w	r3, {r0, r1}
	if (handle.channel == 1)
 801320a:	687b      	ldr	r3, [r7, #4]
 801320c:	2b01      	cmp	r3, #1
 801320e:	d106      	bne.n	801321e <DAC_Init+0x20>
		handle.handle->CR |= DAC_CR_EN1;
 8013210:	683b      	ldr	r3, [r7, #0]
 8013212:	681a      	ldr	r2, [r3, #0]
 8013214:	683b      	ldr	r3, [r7, #0]
 8013216:	f042 0201 	orr.w	r2, r2, #1
 801321a:	601a      	str	r2, [r3, #0]
 801321c:	e00b      	b.n	8013236 <DAC_Init+0x38>
	else if (handle.channel == 2)
 801321e:	687b      	ldr	r3, [r7, #4]
 8013220:	2b02      	cmp	r3, #2
 8013222:	d106      	bne.n	8013232 <DAC_Init+0x34>
		handle.handle->CR |= DAC_CR_EN2;
 8013224:	683b      	ldr	r3, [r7, #0]
 8013226:	681a      	ldr	r2, [r3, #0]
 8013228:	683b      	ldr	r3, [r7, #0]
 801322a:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 801322e:	601a      	str	r2, [r3, #0]
 8013230:	e001      	b.n	8013236 <DAC_Init+0x38>
	else
		return RESULT_INVALID_ARGUMENTS;
 8013232:	2302      	movs	r3, #2
 8013234:	e000      	b.n	8013238 <DAC_Init+0x3a>

	return RESULT_SUCCESS;
 8013236:	2300      	movs	r3, #0
}
 8013238:	4618      	mov	r0, r3
 801323a:	370c      	adds	r7, #12
 801323c:	46bd      	mov	sp, r7
 801323e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013242:	4770      	bx	lr

08013244 <GPIO_Init>:
  *  @brief GPIO implementations
  */

#include "peripherals/internal/gpio.h"

result_t GPIO_Init() {
 8013244:	b480      	push	{r7}
 8013246:	b08b      	sub	sp, #44	; 0x2c
 8013248:	af00      	add	r7, sp, #0

	/* Enable all GPIO Clocks */
	__HAL_RCC_GPIOA_CLK_ENABLE();
 801324a:	4b47      	ldr	r3, [pc, #284]	; (8013368 <GPIO_Init+0x124>)
 801324c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8013250:	4a45      	ldr	r2, [pc, #276]	; (8013368 <GPIO_Init+0x124>)
 8013252:	f043 0301 	orr.w	r3, r3, #1
 8013256:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 801325a:	4b43      	ldr	r3, [pc, #268]	; (8013368 <GPIO_Init+0x124>)
 801325c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8013260:	f003 0301 	and.w	r3, r3, #1
 8013264:	627b      	str	r3, [r7, #36]	; 0x24
 8013266:	6a7b      	ldr	r3, [r7, #36]	; 0x24
	__HAL_RCC_GPIOB_CLK_ENABLE();
 8013268:	4b3f      	ldr	r3, [pc, #252]	; (8013368 <GPIO_Init+0x124>)
 801326a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 801326e:	4a3e      	ldr	r2, [pc, #248]	; (8013368 <GPIO_Init+0x124>)
 8013270:	f043 0302 	orr.w	r3, r3, #2
 8013274:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8013278:	4b3b      	ldr	r3, [pc, #236]	; (8013368 <GPIO_Init+0x124>)
 801327a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 801327e:	f003 0302 	and.w	r3, r3, #2
 8013282:	623b      	str	r3, [r7, #32]
 8013284:	6a3b      	ldr	r3, [r7, #32]
	__HAL_RCC_GPIOC_CLK_ENABLE();
 8013286:	4b38      	ldr	r3, [pc, #224]	; (8013368 <GPIO_Init+0x124>)
 8013288:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 801328c:	4a36      	ldr	r2, [pc, #216]	; (8013368 <GPIO_Init+0x124>)
 801328e:	f043 0304 	orr.w	r3, r3, #4
 8013292:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8013296:	4b34      	ldr	r3, [pc, #208]	; (8013368 <GPIO_Init+0x124>)
 8013298:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 801329c:	f003 0304 	and.w	r3, r3, #4
 80132a0:	61fb      	str	r3, [r7, #28]
 80132a2:	69fb      	ldr	r3, [r7, #28]
	__HAL_RCC_GPIOD_CLK_ENABLE();
 80132a4:	4b30      	ldr	r3, [pc, #192]	; (8013368 <GPIO_Init+0x124>)
 80132a6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80132aa:	4a2f      	ldr	r2, [pc, #188]	; (8013368 <GPIO_Init+0x124>)
 80132ac:	f043 0308 	orr.w	r3, r3, #8
 80132b0:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80132b4:	4b2c      	ldr	r3, [pc, #176]	; (8013368 <GPIO_Init+0x124>)
 80132b6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80132ba:	f003 0308 	and.w	r3, r3, #8
 80132be:	61bb      	str	r3, [r7, #24]
 80132c0:	69bb      	ldr	r3, [r7, #24]
	__HAL_RCC_GPIOE_CLK_ENABLE();
 80132c2:	4b29      	ldr	r3, [pc, #164]	; (8013368 <GPIO_Init+0x124>)
 80132c4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80132c8:	4a27      	ldr	r2, [pc, #156]	; (8013368 <GPIO_Init+0x124>)
 80132ca:	f043 0310 	orr.w	r3, r3, #16
 80132ce:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80132d2:	4b25      	ldr	r3, [pc, #148]	; (8013368 <GPIO_Init+0x124>)
 80132d4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80132d8:	f003 0310 	and.w	r3, r3, #16
 80132dc:	617b      	str	r3, [r7, #20]
 80132de:	697b      	ldr	r3, [r7, #20]
	__HAL_RCC_GPIOF_CLK_ENABLE();
 80132e0:	4b21      	ldr	r3, [pc, #132]	; (8013368 <GPIO_Init+0x124>)
 80132e2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80132e6:	4a20      	ldr	r2, [pc, #128]	; (8013368 <GPIO_Init+0x124>)
 80132e8:	f043 0320 	orr.w	r3, r3, #32
 80132ec:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80132f0:	4b1d      	ldr	r3, [pc, #116]	; (8013368 <GPIO_Init+0x124>)
 80132f2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80132f6:	f003 0320 	and.w	r3, r3, #32
 80132fa:	613b      	str	r3, [r7, #16]
 80132fc:	693b      	ldr	r3, [r7, #16]
	__HAL_RCC_GPIOG_CLK_ENABLE();
 80132fe:	4b1a      	ldr	r3, [pc, #104]	; (8013368 <GPIO_Init+0x124>)
 8013300:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8013304:	4a18      	ldr	r2, [pc, #96]	; (8013368 <GPIO_Init+0x124>)
 8013306:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801330a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 801330e:	4b16      	ldr	r3, [pc, #88]	; (8013368 <GPIO_Init+0x124>)
 8013310:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8013314:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8013318:	60fb      	str	r3, [r7, #12]
 801331a:	68fb      	ldr	r3, [r7, #12]
	__HAL_RCC_GPIOH_CLK_ENABLE();
 801331c:	4b12      	ldr	r3, [pc, #72]	; (8013368 <GPIO_Init+0x124>)
 801331e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8013322:	4a11      	ldr	r2, [pc, #68]	; (8013368 <GPIO_Init+0x124>)
 8013324:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8013328:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 801332c:	4b0e      	ldr	r3, [pc, #56]	; (8013368 <GPIO_Init+0x124>)
 801332e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8013332:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8013336:	60bb      	str	r3, [r7, #8]
 8013338:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOI_CLK_ENABLE();
 801333a:	4b0b      	ldr	r3, [pc, #44]	; (8013368 <GPIO_Init+0x124>)
 801333c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8013340:	4a09      	ldr	r2, [pc, #36]	; (8013368 <GPIO_Init+0x124>)
 8013342:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8013346:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 801334a:	4b07      	ldr	r3, [pc, #28]	; (8013368 <GPIO_Init+0x124>)
 801334c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8013350:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8013354:	607b      	str	r3, [r7, #4]
 8013356:	687b      	ldr	r3, [r7, #4]

	return RESULT_SUCCESS;
 8013358:	2300      	movs	r3, #0
}
 801335a:	4618      	mov	r0, r3
 801335c:	372c      	adds	r7, #44	; 0x2c
 801335e:	46bd      	mov	sp, r7
 8013360:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013364:	4770      	bx	lr
 8013366:	bf00      	nop
 8013368:	58024400 	.word	0x58024400

0801336c <GPIO_SetValue>:
		result = !result;

	return result;
}

void GPIO_SetValue(GPIO_Handle_t handle, bool state) {
 801336c:	b480      	push	{r7}
 801336e:	b085      	sub	sp, #20
 8013370:	af00      	add	r7, sp, #0
 8013372:	f107 0308 	add.w	r3, r7, #8
 8013376:	e883 0003 	stmia.w	r3, {r0, r1}
 801337a:	4613      	mov	r3, r2
 801337c:	71fb      	strb	r3, [r7, #7]
	if (handle.low_active)
 801337e:	7bbb      	ldrb	r3, [r7, #14]
 8013380:	2b00      	cmp	r3, #0
 8013382:	d00d      	beq.n	80133a0 <GPIO_SetValue+0x34>
		state = !state;
 8013384:	79fb      	ldrb	r3, [r7, #7]
 8013386:	2b00      	cmp	r3, #0
 8013388:	bf14      	ite	ne
 801338a:	2301      	movne	r3, #1
 801338c:	2300      	moveq	r3, #0
 801338e:	b2db      	uxtb	r3, r3
 8013390:	f083 0301 	eor.w	r3, r3, #1
 8013394:	b2db      	uxtb	r3, r3
 8013396:	71fb      	strb	r3, [r7, #7]
 8013398:	79fb      	ldrb	r3, [r7, #7]
 801339a:	f003 0301 	and.w	r3, r3, #1
 801339e:	71fb      	strb	r3, [r7, #7]

	if (state)
 80133a0:	79fb      	ldrb	r3, [r7, #7]
 80133a2:	2b00      	cmp	r3, #0
 80133a4:	d00a      	beq.n	80133bc <GPIO_SetValue+0x50>
		handle.port->ODR |= (1U << handle.pin);
 80133a6:	68bb      	ldr	r3, [r7, #8]
 80133a8:	6959      	ldr	r1, [r3, #20]
 80133aa:	89bb      	ldrh	r3, [r7, #12]
 80133ac:	461a      	mov	r2, r3
 80133ae:	2301      	movs	r3, #1
 80133b0:	fa03 f202 	lsl.w	r2, r3, r2
 80133b4:	68bb      	ldr	r3, [r7, #8]
 80133b6:	430a      	orrs	r2, r1
 80133b8:	615a      	str	r2, [r3, #20]
	else
		handle.port->ODR &= ~(1U << handle.pin);
}
 80133ba:	e009      	b.n	80133d0 <GPIO_SetValue+0x64>
		handle.port->ODR &= ~(1U << handle.pin);
 80133bc:	68bb      	ldr	r3, [r7, #8]
 80133be:	6959      	ldr	r1, [r3, #20]
 80133c0:	89bb      	ldrh	r3, [r7, #12]
 80133c2:	461a      	mov	r2, r3
 80133c4:	2301      	movs	r3, #1
 80133c6:	4093      	lsls	r3, r2
 80133c8:	43da      	mvns	r2, r3
 80133ca:	68bb      	ldr	r3, [r7, #8]
 80133cc:	400a      	ands	r2, r1
 80133ce:	615a      	str	r2, [r3, #20]
}
 80133d0:	bf00      	nop
 80133d2:	3714      	adds	r7, #20
 80133d4:	46bd      	mov	sp, r7
 80133d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80133da:	4770      	bx	lr

080133dc <I2C_Init>:
#include "common/processor.h"


extern I2C_HandleTypeDef hi2c2;

result_t I2C_Init(void) {
 80133dc:	b480      	push	{r7}
 80133de:	af00      	add	r7, sp, #0
	/* Noting to do */

	return RESULT_SUCCESS;
 80133e0:	2300      	movs	r3, #0
}
 80133e2:	4618      	mov	r0, r3
 80133e4:	46bd      	mov	sp, r7
 80133e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80133ea:	4770      	bx	lr

080133ec <I2C_Write>:

result_t I2C_Write(uint8_t address, uint8_t data) {
 80133ec:	b580      	push	{r7, lr}
 80133ee:	b084      	sub	sp, #16
 80133f0:	af02      	add	r7, sp, #8
 80133f2:	4603      	mov	r3, r0
 80133f4:	460a      	mov	r2, r1
 80133f6:	71fb      	strb	r3, [r7, #7]
 80133f8:	4613      	mov	r3, r2
 80133fa:	71bb      	strb	r3, [r7, #6]
	if (HAL_I2C_Master_Transmit(&hi2c2, address << 1, &data, 1, HAL_MAX_DELAY) != HAL_OK)
 80133fc:	79fb      	ldrb	r3, [r7, #7]
 80133fe:	b29b      	uxth	r3, r3
 8013400:	005b      	lsls	r3, r3, #1
 8013402:	b299      	uxth	r1, r3
 8013404:	1dba      	adds	r2, r7, #6
 8013406:	f04f 33ff 	mov.w	r3, #4294967295
 801340a:	9300      	str	r3, [sp, #0]
 801340c:	2301      	movs	r3, #1
 801340e:	4806      	ldr	r0, [pc, #24]	; (8013428 <I2C_Write+0x3c>)
 8013410:	f7f1 fd0a 	bl	8004e28 <HAL_I2C_Master_Transmit>
 8013414:	4603      	mov	r3, r0
 8013416:	2b00      	cmp	r3, #0
 8013418:	d001      	beq.n	801341e <I2C_Write+0x32>
		return RESULT_I2C_WRITE_ERROR;
 801341a:	23c9      	movs	r3, #201	; 0xc9
 801341c:	e000      	b.n	8013420 <I2C_Write+0x34>

	return RESULT_SUCCESS;
 801341e:	2300      	movs	r3, #0
}
 8013420:	4618      	mov	r0, r3
 8013422:	3708      	adds	r7, #8
 8013424:	46bd      	mov	sp, r7
 8013426:	bd80      	pop	{r7, pc}
 8013428:	240006b8 	.word	0x240006b8

0801342c <I2C_WriteRegister>:

result_t I2C_WriteRegister(uint8_t address, uint8_t reg, uint8_t data) {
 801342c:	b580      	push	{r7, lr}
 801342e:	b086      	sub	sp, #24
 8013430:	af02      	add	r7, sp, #8
 8013432:	4603      	mov	r3, r0
 8013434:	71fb      	strb	r3, [r7, #7]
 8013436:	460b      	mov	r3, r1
 8013438:	71bb      	strb	r3, [r7, #6]
 801343a:	4613      	mov	r3, r2
 801343c:	717b      	strb	r3, [r7, #5]
	uint8_t transmission[] = { reg, data };
 801343e:	79bb      	ldrb	r3, [r7, #6]
 8013440:	733b      	strb	r3, [r7, #12]
 8013442:	797b      	ldrb	r3, [r7, #5]
 8013444:	737b      	strb	r3, [r7, #13]
	if (HAL_I2C_Master_Transmit(&hi2c2, address << 1, transmission, 2, HAL_MAX_DELAY) != HAL_OK)
 8013446:	79fb      	ldrb	r3, [r7, #7]
 8013448:	b29b      	uxth	r3, r3
 801344a:	005b      	lsls	r3, r3, #1
 801344c:	b299      	uxth	r1, r3
 801344e:	f107 020c 	add.w	r2, r7, #12
 8013452:	f04f 33ff 	mov.w	r3, #4294967295
 8013456:	9300      	str	r3, [sp, #0]
 8013458:	2302      	movs	r3, #2
 801345a:	4806      	ldr	r0, [pc, #24]	; (8013474 <I2C_WriteRegister+0x48>)
 801345c:	f7f1 fce4 	bl	8004e28 <HAL_I2C_Master_Transmit>
 8013460:	4603      	mov	r3, r0
 8013462:	2b00      	cmp	r3, #0
 8013464:	d001      	beq.n	801346a <I2C_WriteRegister+0x3e>
		return RESULT_I2C_WRITE_ERROR;
 8013466:	23c9      	movs	r3, #201	; 0xc9
 8013468:	e000      	b.n	801346c <I2C_WriteRegister+0x40>

	return RESULT_SUCCESS;
 801346a:	2300      	movs	r3, #0
}
 801346c:	4618      	mov	r0, r3
 801346e:	3710      	adds	r7, #16
 8013470:	46bd      	mov	sp, r7
 8013472:	bd80      	pop	{r7, pc}
 8013474:	240006b8 	.word	0x240006b8

08013478 <I2C_Read>:

result_t I2C_Read(uint8_t address, uint8_t *value) {
 8013478:	b580      	push	{r7, lr}
 801347a:	b084      	sub	sp, #16
 801347c:	af02      	add	r7, sp, #8
 801347e:	4603      	mov	r3, r0
 8013480:	6039      	str	r1, [r7, #0]
 8013482:	71fb      	strb	r3, [r7, #7]
	if (value == NULL)
 8013484:	683b      	ldr	r3, [r7, #0]
 8013486:	2b00      	cmp	r3, #0
 8013488:	d101      	bne.n	801348e <I2C_Read+0x16>
		return RESULT_INVALID_ARGUMENTS;
 801348a:	2302      	movs	r3, #2
 801348c:	e011      	b.n	80134b2 <I2C_Read+0x3a>

	if (HAL_I2C_Master_Receive(&hi2c2, address << 1, value, 1, HAL_MAX_DELAY) != HAL_OK)
 801348e:	79fb      	ldrb	r3, [r7, #7]
 8013490:	b29b      	uxth	r3, r3
 8013492:	005b      	lsls	r3, r3, #1
 8013494:	b299      	uxth	r1, r3
 8013496:	f04f 33ff 	mov.w	r3, #4294967295
 801349a:	9300      	str	r3, [sp, #0]
 801349c:	2301      	movs	r3, #1
 801349e:	683a      	ldr	r2, [r7, #0]
 80134a0:	4806      	ldr	r0, [pc, #24]	; (80134bc <I2C_Read+0x44>)
 80134a2:	f7f1 fdb5 	bl	8005010 <HAL_I2C_Master_Receive>
 80134a6:	4603      	mov	r3, r0
 80134a8:	2b00      	cmp	r3, #0
 80134aa:	d001      	beq.n	80134b0 <I2C_Read+0x38>
		return RESULT_I2C_READ_ERROR;
 80134ac:	23c8      	movs	r3, #200	; 0xc8
 80134ae:	e000      	b.n	80134b2 <I2C_Read+0x3a>

	return RESULT_SUCCESS;
 80134b0:	2300      	movs	r3, #0
}
 80134b2:	4618      	mov	r0, r3
 80134b4:	3708      	adds	r7, #8
 80134b6:	46bd      	mov	sp, r7
 80134b8:	bd80      	pop	{r7, pc}
 80134ba:	bf00      	nop
 80134bc:	240006b8 	.word	0x240006b8

080134c0 <I2C_ReadRegister>:
		return RESULT_I2C_READ_ERROR;

	return RESULT_SUCCESS;
}

result_t I2C_ReadRegister(uint8_t address, uint8_t reg, uint8_t *value) {
 80134c0:	b580      	push	{r7, lr}
 80134c2:	b084      	sub	sp, #16
 80134c4:	af02      	add	r7, sp, #8
 80134c6:	4603      	mov	r3, r0
 80134c8:	603a      	str	r2, [r7, #0]
 80134ca:	71fb      	strb	r3, [r7, #7]
 80134cc:	460b      	mov	r3, r1
 80134ce:	71bb      	strb	r3, [r7, #6]
	if (value == NULL)
 80134d0:	683b      	ldr	r3, [r7, #0]
 80134d2:	2b00      	cmp	r3, #0
 80134d4:	d101      	bne.n	80134da <I2C_ReadRegister+0x1a>
		return RESULT_INVALID_ARGUMENTS;
 80134d6:	2302      	movs	r3, #2
 80134d8:	e01b      	b.n	8013512 <I2C_ReadRegister+0x52>

	if (HAL_I2C_Master_Transmit(&hi2c2, address << 1, &reg, 1, HAL_MAX_DELAY) != HAL_OK)
 80134da:	79fb      	ldrb	r3, [r7, #7]
 80134dc:	b29b      	uxth	r3, r3
 80134de:	005b      	lsls	r3, r3, #1
 80134e0:	b299      	uxth	r1, r3
 80134e2:	1dba      	adds	r2, r7, #6
 80134e4:	f04f 33ff 	mov.w	r3, #4294967295
 80134e8:	9300      	str	r3, [sp, #0]
 80134ea:	2301      	movs	r3, #1
 80134ec:	480b      	ldr	r0, [pc, #44]	; (801351c <I2C_ReadRegister+0x5c>)
 80134ee:	f7f1 fc9b 	bl	8004e28 <HAL_I2C_Master_Transmit>
 80134f2:	4603      	mov	r3, r0
 80134f4:	2b00      	cmp	r3, #0
 80134f6:	d001      	beq.n	80134fc <I2C_ReadRegister+0x3c>
		return RESULT_I2C_READ_ERROR;
 80134f8:	23c8      	movs	r3, #200	; 0xc8
 80134fa:	e00a      	b.n	8013512 <I2C_ReadRegister+0x52>

	if (I2C_Read(address, value) != RESULT_SUCCESS)
 80134fc:	79fb      	ldrb	r3, [r7, #7]
 80134fe:	6839      	ldr	r1, [r7, #0]
 8013500:	4618      	mov	r0, r3
 8013502:	f7ff ffb9 	bl	8013478 <I2C_Read>
 8013506:	4603      	mov	r3, r0
 8013508:	2b00      	cmp	r3, #0
 801350a:	d001      	beq.n	8013510 <I2C_ReadRegister+0x50>
		return RESULT_I2C_READ_ERROR;
 801350c:	23c8      	movs	r3, #200	; 0xc8
 801350e:	e000      	b.n	8013512 <I2C_ReadRegister+0x52>

	return RESULT_SUCCESS;
 8013510:	2300      	movs	r3, #0
}
 8013512:	4618      	mov	r0, r3
 8013514:	3708      	adds	r7, #8
 8013516:	46bd      	mov	sp, r7
 8013518:	bd80      	pop	{r7, pc}
 801351a:	bf00      	nop
 801351c:	240006b8 	.word	0x240006b8

08013520 <SERIAL_Init>:
#include <string.h>


extern UART_HandleTypeDef huart1;

result_t SERIAL_Init(void){
 8013520:	b480      	push	{r7}
 8013522:	af00      	add	r7, sp, #0
	/* Noting to do */

	return RESULT_SUCCESS;
 8013524:	2300      	movs	r3, #0
}
 8013526:	4618      	mov	r0, r3
 8013528:	46bd      	mov	sp, r7
 801352a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801352e:	4770      	bx	lr

08013530 <SPI_Init>:
extern SPI_HandleTypeDef hspi6;

SPI_Handle_t SPI_Sensor = { &hspi6 };
SPI_Handle_t SPI_Touch  = { &hspi4 };

result_t SPI_Init(SPI_Handle_t handle) {
 8013530:	b480      	push	{r7}
 8013532:	b083      	sub	sp, #12
 8013534:	af00      	add	r7, sp, #0
 8013536:	6078      	str	r0, [r7, #4]
    LEGUAN_UNUSED(handle);

    return RESULT_SUCCESS;
 8013538:	2300      	movs	r3, #0
}
 801353a:	4618      	mov	r0, r3
 801353c:	370c      	adds	r7, #12
 801353e:	46bd      	mov	sp, r7
 8013540:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013544:	4770      	bx	lr

08013546 <SPI_Write>:
    	return RESULT_SPI_READ_ERROR;

    return RESULT_SUCCESS;
}

result_t SPI_Write(SPI_Handle_t handle, const uint8_t *buffer, size_t size) {
 8013546:	b580      	push	{r7, lr}
 8013548:	b084      	sub	sp, #16
 801354a:	af00      	add	r7, sp, #0
 801354c:	60f8      	str	r0, [r7, #12]
 801354e:	60b9      	str	r1, [r7, #8]
 8013550:	607a      	str	r2, [r7, #4]
	if (buffer == NULL || size == 0)
 8013552:	68bb      	ldr	r3, [r7, #8]
 8013554:	2b00      	cmp	r3, #0
 8013556:	d002      	beq.n	801355e <SPI_Write+0x18>
 8013558:	687b      	ldr	r3, [r7, #4]
 801355a:	2b00      	cmp	r3, #0
 801355c:	d101      	bne.n	8013562 <SPI_Write+0x1c>
		return RESULT_INVALID_ARGUMENTS;
 801355e:	2302      	movs	r3, #2
 8013560:	e00e      	b.n	8013580 <SPI_Write+0x3a>

    if (HAL_SPI_Transmit(handle.handle, (uint8_t*)buffer, size, HAL_MAX_DELAY) != HAL_OK)
 8013562:	68f8      	ldr	r0, [r7, #12]
 8013564:	687b      	ldr	r3, [r7, #4]
 8013566:	b29a      	uxth	r2, r3
 8013568:	f04f 33ff 	mov.w	r3, #4294967295
 801356c:	68b9      	ldr	r1, [r7, #8]
 801356e:	f7f8 fa85 	bl	800ba7c <HAL_SPI_Transmit>
 8013572:	4603      	mov	r3, r0
 8013574:	2b00      	cmp	r3, #0
 8013576:	d002      	beq.n	801357e <SPI_Write+0x38>
    	return RESULT_SPI_WRITE_ERROR;
 8013578:	f240 1391 	movw	r3, #401	; 0x191
 801357c:	e000      	b.n	8013580 <SPI_Write+0x3a>

    return RESULT_SUCCESS;
 801357e:	2300      	movs	r3, #0
}
 8013580:	4618      	mov	r0, r3
 8013582:	3710      	adds	r7, #16
 8013584:	46bd      	mov	sp, r7
 8013586:	bd80      	pop	{r7, pc}

08013588 <SPI_WriteRead>:

result_t SPI_WriteRead(SPI_Handle_t handle, uint8_t *read_buffer, const uint8_t *write_buffer, size_t size) {
 8013588:	b580      	push	{r7, lr}
 801358a:	b086      	sub	sp, #24
 801358c:	af02      	add	r7, sp, #8
 801358e:	60f8      	str	r0, [r7, #12]
 8013590:	60b9      	str	r1, [r7, #8]
 8013592:	607a      	str	r2, [r7, #4]
 8013594:	603b      	str	r3, [r7, #0]
	if (read_buffer == NULL || write_buffer == NULL || size == 0)
 8013596:	68bb      	ldr	r3, [r7, #8]
 8013598:	2b00      	cmp	r3, #0
 801359a:	d005      	beq.n	80135a8 <SPI_WriteRead+0x20>
 801359c:	687b      	ldr	r3, [r7, #4]
 801359e:	2b00      	cmp	r3, #0
 80135a0:	d002      	beq.n	80135a8 <SPI_WriteRead+0x20>
 80135a2:	683b      	ldr	r3, [r7, #0]
 80135a4:	2b00      	cmp	r3, #0
 80135a6:	d101      	bne.n	80135ac <SPI_WriteRead+0x24>
		return RESULT_INVALID_ARGUMENTS;
 80135a8:	2302      	movs	r3, #2
 80135aa:	e010      	b.n	80135ce <SPI_WriteRead+0x46>

	if (HAL_SPI_TransmitReceive(handle.handle, (uint8_t*)write_buffer, read_buffer, size, HAL_MAX_DELAY) != HAL_OK)
 80135ac:	68f8      	ldr	r0, [r7, #12]
 80135ae:	683b      	ldr	r3, [r7, #0]
 80135b0:	b29b      	uxth	r3, r3
 80135b2:	f04f 32ff 	mov.w	r2, #4294967295
 80135b6:	9200      	str	r2, [sp, #0]
 80135b8:	68ba      	ldr	r2, [r7, #8]
 80135ba:	6879      	ldr	r1, [r7, #4]
 80135bc:	f7f8 fc50 	bl	800be60 <HAL_SPI_TransmitReceive>
 80135c0:	4603      	mov	r3, r0
 80135c2:	2b00      	cmp	r3, #0
 80135c4:	d002      	beq.n	80135cc <SPI_WriteRead+0x44>
		return RESULT_SPI_READ_ERROR;
 80135c6:	f44f 73c8 	mov.w	r3, #400	; 0x190
 80135ca:	e000      	b.n	80135ce <SPI_WriteRead+0x46>

	return RESULT_SUCCESS;
 80135cc:	2300      	movs	r3, #0
}
 80135ce:	4618      	mov	r0, r3
 80135d0:	3710      	adds	r7, #16
 80135d2:	46bd      	mov	sp, r7
 80135d4:	bd80      	pop	{r7, pc}
	...

080135d8 <main>:
 * @return		always 0
 */
__attribute__((optimize("0")))  /* Make sure the compiler doesn't optimize away the loops */

int main(void)
{
 80135d8:	b580      	push	{r7, lr}
 80135da:	b086      	sub	sp, #24
 80135dc:	af00      	add	r7, sp, #0
    uint32_t start_tick;        /* tick count when starting calculation */
    uint32_t end_tick;          /* tick count when calculation done */
    uint32_t time_loop;         /* measures time for loop only */
    float res;                  /* result of sqrt */
    float value = 25.0F;        /* operand for sprt() */
 80135de:	4b17      	ldr	r3, [pc, #92]	; (801363c <main+0x64>)
 80135e0:	613b      	str	r3, [r7, #16]
    uint32_t i;                 /* loop variable */

    /* Initialize Hardware */
    CUBEMX_Init();
 80135e2:	f7ed fa99 	bl	8000b18 <CUBEMX_Init>
    /* Initialize Leguan board */
    LEGUAN_Init();
 80135e6:	f7fe feff 	bl	80123e8 <LEGUAN_Init>

    /* Set logging output destination to be the LCD */
    LOG_SetDestination(LCD_Stream);
 80135ea:	4815      	ldr	r0, [pc, #84]	; (8013640 <main+0x68>)
 80135ec:	f7fe fe8e 	bl	801230c <LOG_SetDestination>


    /* Main loop */
    for (;;) {
        /* measure time to do a loop NBR_LOOPS times */
        start_tick = HAL_GetTick();
 80135f0:	f7ee fed8 	bl	80023a4 <HAL_GetTick>
 80135f4:	60f8      	str	r0, [r7, #12]
        for (i=0; i<NBR_LOOPS; i++) {
 80135f6:	2300      	movs	r3, #0
 80135f8:	617b      	str	r3, [r7, #20]
 80135fa:	e002      	b.n	8013602 <main+0x2a>
 80135fc:	697b      	ldr	r3, [r7, #20]
 80135fe:	3301      	adds	r3, #1
 8013600:	617b      	str	r3, [r7, #20]
 8013602:	697b      	ldr	r3, [r7, #20]
 8013604:	4a0f      	ldr	r2, [pc, #60]	; (8013644 <main+0x6c>)
 8013606:	4293      	cmp	r3, r2
 8013608:	d9f8      	bls.n	80135fc <main+0x24>
            /* do nothing, just to get loop time */
        }
        end_tick = HAL_GetTick();
 801360a:	f7ee fecb 	bl	80023a4 <HAL_GetTick>
 801360e:	60b8      	str	r0, [r7, #8]
        time_loop = end_tick - start_tick;
 8013610:	68ba      	ldr	r2, [r7, #8]
 8013612:	68fb      	ldr	r3, [r7, #12]
 8013614:	1ad3      	subs	r3, r2, r3
 8013616:	607b      	str	r3, [r7, #4]
        LOG_Info("Time to do a loop in ns: %d", time_loop);
 8013618:	6879      	ldr	r1, [r7, #4]
 801361a:	480b      	ldr	r0, [pc, #44]	; (8013648 <main+0x70>)
 801361c:	f7fe feca 	bl	80123b4 <LOG_Info>

        /* measure sqrtf() using FPU and print result */
        /* put your code here */
        asm volatile("vsqrt.f32 %0, %1" : "=w" (res) : "w" (value));
 8013620:	edd7 7a04 	vldr	s15, [r7, #16]
 8013624:	eef1 7ae7 	vsqrt.f32	s15, s15
 8013628:	edc7 7a00 	vstr	s15, [r7]

        /* measure sqrtf() using library function and print result */
        /* put your code here */
        res = my_sqrtf(value);
 801362c:	ed97 0a04 	vldr	s0, [r7, #16]
 8013630:	f000 f85a 	bl	80136e8 <my_sqrtf>
 8013634:	ed87 0a00 	vstr	s0, [r7]
        start_tick = HAL_GetTick();
 8013638:	e7da      	b.n	80135f0 <main+0x18>
 801363a:	bf00      	nop
 801363c:	41c80000 	.word	0x41c80000
 8013640:	08012721 	.word	0x08012721
 8013644:	000f423f 	.word	0x000f423f
 8013648:	080166cc 	.word	0x080166cc

0801364c <rep_clz>:
typedef float fp_t;
typedef uint32_t rep_t;
static const int significandBits = 23;
#define REP_C UINT32_C

static inline int rep_clz(rep_t a) {
 801364c:	b480      	push	{r7}
 801364e:	b083      	sub	sp, #12
 8013650:	af00      	add	r7, sp, #0
 8013652:	6078      	str	r0, [r7, #4]
    return __builtin_clz(a);
 8013654:	687b      	ldr	r3, [r7, #4]
 8013656:	fab3 f383 	clz	r3, r3
}
 801365a:	4618      	mov	r0, r3
 801365c:	370c      	adds	r7, #12
 801365e:	46bd      	mov	sp, r7
 8013660:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013664:	4770      	bx	lr

08013666 <toRep>:

static inline rep_t toRep(fp_t x) {
 8013666:	b480      	push	{r7}
 8013668:	b085      	sub	sp, #20
 801366a:	af00      	add	r7, sp, #0
 801366c:	ed87 0a01 	vstr	s0, [r7, #4]
    const union { rep_t i; fp_t f; } rep = { .f = x };
 8013670:	687b      	ldr	r3, [r7, #4]
 8013672:	60fb      	str	r3, [r7, #12]
    return rep.i;
 8013674:	68fb      	ldr	r3, [r7, #12]
}
 8013676:	4618      	mov	r0, r3
 8013678:	3714      	adds	r7, #20
 801367a:	46bd      	mov	sp, r7
 801367c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013680:	4770      	bx	lr

08013682 <fromRep>:

static inline fp_t fromRep(rep_t x) {
 8013682:	b480      	push	{r7}
 8013684:	b085      	sub	sp, #20
 8013686:	af00      	add	r7, sp, #0
 8013688:	6078      	str	r0, [r7, #4]
    const union { rep_t i; fp_t f; } rep = { .i = x };
 801368a:	687b      	ldr	r3, [r7, #4]
 801368c:	60fb      	str	r3, [r7, #12]
    return rep.f;
 801368e:	68fb      	ldr	r3, [r7, #12]
 8013690:	ee07 3a90 	vmov	s15, r3
}
 8013694:	eeb0 0a67 	vmov.f32	s0, s15
 8013698:	3714      	adds	r7, #20
 801369a:	46bd      	mov	sp, r7
 801369c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80136a0:	4770      	bx	lr

080136a2 <mulhi>:

static inline uint32_t mulhi(uint32_t a, uint32_t b) {
 80136a2:	b4b0      	push	{r4, r5, r7}
 80136a4:	b083      	sub	sp, #12
 80136a6:	af00      	add	r7, sp, #0
 80136a8:	6078      	str	r0, [r7, #4]
 80136aa:	6039      	str	r1, [r7, #0]
    return (uint64_t)a*b >> 32;
 80136ac:	687b      	ldr	r3, [r7, #4]
 80136ae:	4618      	mov	r0, r3
 80136b0:	f04f 0100 	mov.w	r1, #0
 80136b4:	683b      	ldr	r3, [r7, #0]
 80136b6:	461a      	mov	r2, r3
 80136b8:	f04f 0300 	mov.w	r3, #0
 80136bc:	fb02 f501 	mul.w	r5, r2, r1
 80136c0:	fb00 f403 	mul.w	r4, r0, r3
 80136c4:	442c      	add	r4, r5
 80136c6:	fba0 2302 	umull	r2, r3, r0, r2
 80136ca:	18e1      	adds	r1, r4, r3
 80136cc:	460b      	mov	r3, r1
 80136ce:	f04f 0000 	mov.w	r0, #0
 80136d2:	f04f 0100 	mov.w	r1, #0
 80136d6:	0018      	movs	r0, r3
 80136d8:	2100      	movs	r1, #0
 80136da:	4603      	mov	r3, r0
}
 80136dc:	4618      	mov	r0, r3
 80136de:	370c      	adds	r7, #12
 80136e0:	46bd      	mov	sp, r7
 80136e2:	bcb0      	pop	{r4, r5, r7}
 80136e4:	4770      	bx	lr
	...

080136e8 <my_sqrtf>:

fp_t my_sqrtf(fp_t x) {
 80136e8:	b590      	push	{r4, r7, lr}
 80136ea:	b091      	sub	sp, #68	; 0x44
 80136ec:	af00      	add	r7, sp, #0
 80136ee:	ed87 0a01 	vstr	s0, [r7, #4]
    static const rep_t absMask = signBit - 1;
    static const rep_t infRep = absMask ^ significandMask;
    static const rep_t qnan = infRep | REP_C(1) << (significandBits - 1);

    // Extract the various important bits of x
    const rep_t xRep = toRep(x);
 80136f2:	ed97 0a01 	vldr	s0, [r7, #4]
 80136f6:	f7ff ffb6 	bl	8013666 <toRep>
 80136fa:	6378      	str	r0, [r7, #52]	; 0x34
    rep_t significand = xRep & significandMask;
 80136fc:	4b7f      	ldr	r3, [pc, #508]	; (80138fc <my_sqrtf+0x214>)
 80136fe:	681b      	ldr	r3, [r3, #0]
 8013700:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8013702:	4013      	ands	r3, r2
 8013704:	63fb      	str	r3, [r7, #60]	; 0x3c
    int exponent = (xRep >> significandBits) - exponentBias;
 8013706:	2217      	movs	r2, #23
 8013708:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801370a:	40d3      	lsrs	r3, r2
 801370c:	4a7c      	ldr	r2, [pc, #496]	; (8013900 <my_sqrtf+0x218>)
 801370e:	6812      	ldr	r2, [r2, #0]
 8013710:	1a9b      	subs	r3, r3, r2
 8013712:	63bb      	str	r3, [r7, #56]	; 0x38

    // Using an unsigned integer compare, we can detect all of the special
    // cases with a single branch: zero, denormal, negative, infinity, or NaN.
    if (xRep - minNormal >= infRep - minNormal) {
 8013714:	4b7b      	ldr	r3, [pc, #492]	; (8013904 <my_sqrtf+0x21c>)
 8013716:	681b      	ldr	r3, [r3, #0]
 8013718:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 801371a:	1ad2      	subs	r2, r2, r3
 801371c:	4b7a      	ldr	r3, [pc, #488]	; (8013908 <my_sqrtf+0x220>)
 801371e:	6819      	ldr	r1, [r3, #0]
 8013720:	4b78      	ldr	r3, [pc, #480]	; (8013904 <my_sqrtf+0x21c>)
 8013722:	681b      	ldr	r3, [r3, #0]
 8013724:	1acb      	subs	r3, r1, r3
 8013726:	429a      	cmp	r2, r3
 8013728:	d345      	bcc.n	80137b6 <my_sqrtf+0xce>
        const rep_t xAbs = xRep & absMask;
 801372a:	4b78      	ldr	r3, [pc, #480]	; (801390c <my_sqrtf+0x224>)
 801372c:	681b      	ldr	r3, [r3, #0]
 801372e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8013730:	4013      	ands	r3, r2
 8013732:	633b      	str	r3, [r7, #48]	; 0x30
        // sqrt(+/- 0) = +/- 0
        if (xAbs == 0) return x;
 8013734:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013736:	2b00      	cmp	r3, #0
 8013738:	d102      	bne.n	8013740 <my_sqrtf+0x58>
 801373a:	edd7 7a01 	vldr	s15, [r7, #4]
 801373e:	e0d7      	b.n	80138f0 <my_sqrtf+0x208>
        // sqrt(NaN) = qNaN
        if (xAbs > infRep) return fromRep(qnan | xRep);
 8013740:	4b71      	ldr	r3, [pc, #452]	; (8013908 <my_sqrtf+0x220>)
 8013742:	681b      	ldr	r3, [r3, #0]
 8013744:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8013746:	429a      	cmp	r2, r3
 8013748:	d909      	bls.n	801375e <my_sqrtf+0x76>
 801374a:	4b71      	ldr	r3, [pc, #452]	; (8013910 <my_sqrtf+0x228>)
 801374c:	681a      	ldr	r2, [r3, #0]
 801374e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8013750:	4313      	orrs	r3, r2
 8013752:	4618      	mov	r0, r3
 8013754:	f7ff ff95 	bl	8013682 <fromRep>
 8013758:	eef0 7a40 	vmov.f32	s15, s0
 801375c:	e0c8      	b.n	80138f0 <my_sqrtf+0x208>
        // sqrt(negative) = qNaN
        if (xRep > signBit) return fromRep(qnan);
 801375e:	4b6d      	ldr	r3, [pc, #436]	; (8013914 <my_sqrtf+0x22c>)
 8013760:	681b      	ldr	r3, [r3, #0]
 8013762:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8013764:	429a      	cmp	r2, r3
 8013766:	d907      	bls.n	8013778 <my_sqrtf+0x90>
 8013768:	4b69      	ldr	r3, [pc, #420]	; (8013910 <my_sqrtf+0x228>)
 801376a:	681b      	ldr	r3, [r3, #0]
 801376c:	4618      	mov	r0, r3
 801376e:	f7ff ff88 	bl	8013682 <fromRep>
 8013772:	eef0 7a40 	vmov.f32	s15, s0
 8013776:	e0bb      	b.n	80138f0 <my_sqrtf+0x208>
        // sqrt(infinity) = infinity
        if (xRep == infRep) return x;
 8013778:	4b63      	ldr	r3, [pc, #396]	; (8013908 <my_sqrtf+0x220>)
 801377a:	681b      	ldr	r3, [r3, #0]
 801377c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 801377e:	429a      	cmp	r2, r3
 8013780:	d102      	bne.n	8013788 <my_sqrtf+0xa0>
 8013782:	edd7 7a01 	vldr	s15, [r7, #4]
 8013786:	e0b3      	b.n	80138f0 <my_sqrtf+0x208>

        // normalize denormals and fall back into the mainline
        const int shift = rep_clz(significand) - rep_clz(minNormal);
 8013788:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 801378a:	f7ff ff5f 	bl	801364c <rep_clz>
 801378e:	4604      	mov	r4, r0
 8013790:	4b5c      	ldr	r3, [pc, #368]	; (8013904 <my_sqrtf+0x21c>)
 8013792:	681b      	ldr	r3, [r3, #0]
 8013794:	4618      	mov	r0, r3
 8013796:	f7ff ff59 	bl	801364c <rep_clz>
 801379a:	4603      	mov	r3, r0
 801379c:	1ae3      	subs	r3, r4, r3
 801379e:	62fb      	str	r3, [r7, #44]	; 0x2c
        significand <<= shift;
 80137a0:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80137a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80137a4:	fa02 f303 	lsl.w	r3, r2, r3
 80137a8:	63fb      	str	r3, [r7, #60]	; 0x3c
        exponent += 1 - shift;
 80137aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80137ac:	f1c3 0301 	rsb	r3, r3, #1
 80137b0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80137b2:	4413      	add	r3, r2
 80137b4:	63bb      	str	r3, [r7, #56]	; 0x38
    }

    // Insert the implicit bit of the significand.  If x was denormal, then
    // this bit was already set by the normalization process, but it won't hurt
    // to set it twice.
    significand |= minNormal;
 80137b6:	4b53      	ldr	r3, [pc, #332]	; (8013904 <my_sqrtf+0x21c>)
 80137b8:	681b      	ldr	r3, [r3, #0]
 80137ba:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80137bc:	4313      	orrs	r3, r2
 80137be:	63fb      	str	r3, [r7, #60]	; 0x3c

    // Halve the exponent to get the exponent of the result, and transform the
    // significand into a Q30 fixed-point xQ30 in the range [1,4) -- if the
    // exponent of x is odd, then xQ30 is in [2,4); if it is even, then xQ30
    // is in [1,2).
    const int resultExponent = exponent >> 1;
 80137c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80137c2:	105b      	asrs	r3, r3, #1
 80137c4:	62bb      	str	r3, [r7, #40]	; 0x28
    uint32_t xQ30 = significand << (7 + (exponent & 1));
 80137c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80137c8:	f003 0301 	and.w	r3, r3, #1
 80137cc:	3307      	adds	r3, #7
 80137ce:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80137d0:	fa02 f303 	lsl.w	r3, r2, r3
 80137d4:	627b      	str	r3, [r7, #36]	; 0x24

    // Q32 linear approximation to the reciprocal square root of xQ30.  This
    // approximation is good to a bit more than 3.5 bits:
    //
    //     1/sqrt(a) ~ 1.1033542890963095 - a/6
    const uint32_t oneSixthQ34 = UINT32_C(0xaaaaaaaa);
 80137d6:	f04f 33aa 	mov.w	r3, #2863311530	; 0xaaaaaaaa
 80137da:	623b      	str	r3, [r7, #32]
    uint32_t recipQ32 = UINT32_C(0x1a756d3b) - mulhi(oneSixthQ34, xQ30);
 80137dc:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80137de:	6a38      	ldr	r0, [r7, #32]
 80137e0:	f7ff ff5f 	bl	80136a2 <mulhi>
 80137e4:	4602      	mov	r2, r0
 80137e6:	4b4c      	ldr	r3, [pc, #304]	; (8013918 <my_sqrtf+0x230>)
 80137e8:	1a9b      	subs	r3, r3, r2
 80137ea:	61fb      	str	r3, [r7, #28]

    // Newton-Raphson iterations to improve our reciprocal:
    const uint32_t threeQ30 = UINT32_C(0xc0000000);
 80137ec:	f04f 4340 	mov.w	r3, #3221225472	; 0xc0000000
 80137f0:	61bb      	str	r3, [r7, #24]
    uint32_t residualQ30 = mulhi(xQ30, mulhi(recipQ32, recipQ32));
 80137f2:	69f9      	ldr	r1, [r7, #28]
 80137f4:	69f8      	ldr	r0, [r7, #28]
 80137f6:	f7ff ff54 	bl	80136a2 <mulhi>
 80137fa:	4603      	mov	r3, r0
 80137fc:	4619      	mov	r1, r3
 80137fe:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8013800:	f7ff ff4f 	bl	80136a2 <mulhi>
 8013804:	6178      	str	r0, [r7, #20]
    recipQ32 = mulhi(recipQ32, threeQ30 - residualQ30) << 1;
 8013806:	69ba      	ldr	r2, [r7, #24]
 8013808:	697b      	ldr	r3, [r7, #20]
 801380a:	1ad3      	subs	r3, r2, r3
 801380c:	4619      	mov	r1, r3
 801380e:	69f8      	ldr	r0, [r7, #28]
 8013810:	f7ff ff47 	bl	80136a2 <mulhi>
 8013814:	4603      	mov	r3, r0
 8013816:	005b      	lsls	r3, r3, #1
 8013818:	61fb      	str	r3, [r7, #28]
    residualQ30 = mulhi(xQ30, mulhi(recipQ32, recipQ32));
 801381a:	69f9      	ldr	r1, [r7, #28]
 801381c:	69f8      	ldr	r0, [r7, #28]
 801381e:	f7ff ff40 	bl	80136a2 <mulhi>
 8013822:	4603      	mov	r3, r0
 8013824:	4619      	mov	r1, r3
 8013826:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8013828:	f7ff ff3b 	bl	80136a2 <mulhi>
 801382c:	6178      	str	r0, [r7, #20]
    recipQ32 = mulhi(recipQ32, threeQ30 - residualQ30) << 1;
 801382e:	69ba      	ldr	r2, [r7, #24]
 8013830:	697b      	ldr	r3, [r7, #20]
 8013832:	1ad3      	subs	r3, r2, r3
 8013834:	4619      	mov	r1, r3
 8013836:	69f8      	ldr	r0, [r7, #28]
 8013838:	f7ff ff33 	bl	80136a2 <mulhi>
 801383c:	4603      	mov	r3, r0
 801383e:	005b      	lsls	r3, r3, #1
 8013840:	61fb      	str	r3, [r7, #28]
    residualQ30 = mulhi(xQ30, mulhi(recipQ32, recipQ32));
 8013842:	69f9      	ldr	r1, [r7, #28]
 8013844:	69f8      	ldr	r0, [r7, #28]
 8013846:	f7ff ff2c 	bl	80136a2 <mulhi>
 801384a:	4603      	mov	r3, r0
 801384c:	4619      	mov	r1, r3
 801384e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8013850:	f7ff ff27 	bl	80136a2 <mulhi>
 8013854:	6178      	str	r0, [r7, #20]
    recipQ32 = mulhi(recipQ32, threeQ30 - residualQ30) << 1;
 8013856:	69ba      	ldr	r2, [r7, #24]
 8013858:	697b      	ldr	r3, [r7, #20]
 801385a:	1ad3      	subs	r3, r2, r3
 801385c:	4619      	mov	r1, r3
 801385e:	69f8      	ldr	r0, [r7, #28]
 8013860:	f7ff ff1f 	bl	80136a2 <mulhi>
 8013864:	4603      	mov	r3, r0
 8013866:	005b      	lsls	r3, r3, #1
 8013868:	61fb      	str	r3, [r7, #28]
    residualQ30 = mulhi(xQ30, mulhi(recipQ32, recipQ32));
 801386a:	69f9      	ldr	r1, [r7, #28]
 801386c:	69f8      	ldr	r0, [r7, #28]
 801386e:	f7ff ff18 	bl	80136a2 <mulhi>
 8013872:	4603      	mov	r3, r0
 8013874:	4619      	mov	r1, r3
 8013876:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8013878:	f7ff ff13 	bl	80136a2 <mulhi>
 801387c:	6178      	str	r0, [r7, #20]
    recipQ32 = mulhi(recipQ32, threeQ30 - residualQ30) << 1;
 801387e:	69ba      	ldr	r2, [r7, #24]
 8013880:	697b      	ldr	r3, [r7, #20]
 8013882:	1ad3      	subs	r3, r2, r3
 8013884:	4619      	mov	r1, r3
 8013886:	69f8      	ldr	r0, [r7, #28]
 8013888:	f7ff ff0b 	bl	80136a2 <mulhi>
 801388c:	4603      	mov	r3, r0
 801388e:	005b      	lsls	r3, r3, #1
 8013890:	61fb      	str	r3, [r7, #28]
    // recipQ32 now holds an approximate 1/sqrt(x).  Multiply by x to get an
    // initial sqrt(x) in Q23.  From the construction of this estimate, we know
    // that it is either the correctly rounded significand of the result or one
    // less than the correctly rounded significand (the -2 guarantees that we
    // fall on the correct side of the actual square root).
    rep_t result = (mulhi(recipQ32, xQ30) - 2) >> 7;
 8013892:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8013894:	69f8      	ldr	r0, [r7, #28]
 8013896:	f7ff ff04 	bl	80136a2 <mulhi>
 801389a:	4603      	mov	r3, r0
 801389c:	3b02      	subs	r3, #2
 801389e:	09db      	lsrs	r3, r3, #7
 80138a0:	613b      	str	r3, [r7, #16]

    // Compute the residual x - result*result to decide if the result needs to
    // be rounded up.
    rep_t residual = (xQ30 << 16) - result*result;
 80138a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80138a4:	041a      	lsls	r2, r3, #16
 80138a6:	693b      	ldr	r3, [r7, #16]
 80138a8:	fb03 f303 	mul.w	r3, r3, r3
 80138ac:	1ad3      	subs	r3, r2, r3
 80138ae:	60fb      	str	r3, [r7, #12]
    result += residual > result;
 80138b0:	68fa      	ldr	r2, [r7, #12]
 80138b2:	693b      	ldr	r3, [r7, #16]
 80138b4:	429a      	cmp	r2, r3
 80138b6:	bf8c      	ite	hi
 80138b8:	2301      	movhi	r3, #1
 80138ba:	2300      	movls	r3, #0
 80138bc:	b2db      	uxtb	r3, r3
 80138be:	461a      	mov	r2, r3
 80138c0:	693b      	ldr	r3, [r7, #16]
 80138c2:	4413      	add	r3, r2
 80138c4:	613b      	str	r3, [r7, #16]

    // Clear the implicit bit of result:
    result &= significandMask;
 80138c6:	4b0d      	ldr	r3, [pc, #52]	; (80138fc <my_sqrtf+0x214>)
 80138c8:	681b      	ldr	r3, [r3, #0]
 80138ca:	693a      	ldr	r2, [r7, #16]
 80138cc:	4013      	ands	r3, r2
 80138ce:	613b      	str	r3, [r7, #16]
    // Insert the exponent:
    result |= (rep_t)(resultExponent + exponentBias) << significandBits;
 80138d0:	4b0b      	ldr	r3, [pc, #44]	; (8013900 <my_sqrtf+0x218>)
 80138d2:	681a      	ldr	r2, [r3, #0]
 80138d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80138d6:	4413      	add	r3, r2
 80138d8:	461a      	mov	r2, r3
 80138da:	2317      	movs	r3, #23
 80138dc:	fa02 f303 	lsl.w	r3, r2, r3
 80138e0:	693a      	ldr	r2, [r7, #16]
 80138e2:	4313      	orrs	r3, r2
 80138e4:	613b      	str	r3, [r7, #16]
    return fromRep(result);
 80138e6:	6938      	ldr	r0, [r7, #16]
 80138e8:	f7ff fecb 	bl	8013682 <fromRep>
 80138ec:	eef0 7a40 	vmov.f32	s15, s0
}
 80138f0:	eeb0 0a67 	vmov.f32	s0, s15
 80138f4:	3744      	adds	r7, #68	; 0x44
 80138f6:	46bd      	mov	sp, r7
 80138f8:	bd90      	pop	{r4, r7, pc}
 80138fa:	bf00      	nop
 80138fc:	08016f4c 	.word	0x08016f4c
 8013900:	08016f50 	.word	0x08016f50
 8013904:	08016f54 	.word	0x08016f54
 8013908:	08016f58 	.word	0x08016f58
 801390c:	08016f5c 	.word	0x08016f5c
 8013910:	08016f60 	.word	0x08016f60
 8013914:	08016f64 	.word	0x08016f64
 8013918:	1a756d3b 	.word	0x1a756d3b

0801391c <__errno>:
 801391c:	4b01      	ldr	r3, [pc, #4]	; (8013924 <__errno+0x8>)
 801391e:	6818      	ldr	r0, [r3, #0]
 8013920:	4770      	bx	lr
 8013922:	bf00      	nop
 8013924:	24000160 	.word	0x24000160

08013928 <__libc_init_array>:
 8013928:	b570      	push	{r4, r5, r6, lr}
 801392a:	4d0d      	ldr	r5, [pc, #52]	; (8013960 <__libc_init_array+0x38>)
 801392c:	4c0d      	ldr	r4, [pc, #52]	; (8013964 <__libc_init_array+0x3c>)
 801392e:	1b64      	subs	r4, r4, r5
 8013930:	10a4      	asrs	r4, r4, #2
 8013932:	2600      	movs	r6, #0
 8013934:	42a6      	cmp	r6, r4
 8013936:	d109      	bne.n	801394c <__libc_init_array+0x24>
 8013938:	4d0b      	ldr	r5, [pc, #44]	; (8013968 <__libc_init_array+0x40>)
 801393a:	4c0c      	ldr	r4, [pc, #48]	; (801396c <__libc_init_array+0x44>)
 801393c:	f002 fe3e 	bl	80165bc <_init>
 8013940:	1b64      	subs	r4, r4, r5
 8013942:	10a4      	asrs	r4, r4, #2
 8013944:	2600      	movs	r6, #0
 8013946:	42a6      	cmp	r6, r4
 8013948:	d105      	bne.n	8013956 <__libc_init_array+0x2e>
 801394a:	bd70      	pop	{r4, r5, r6, pc}
 801394c:	f855 3b04 	ldr.w	r3, [r5], #4
 8013950:	4798      	blx	r3
 8013952:	3601      	adds	r6, #1
 8013954:	e7ee      	b.n	8013934 <__libc_init_array+0xc>
 8013956:	f855 3b04 	ldr.w	r3, [r5], #4
 801395a:	4798      	blx	r3
 801395c:	3601      	adds	r6, #1
 801395e:	e7f2      	b.n	8013946 <__libc_init_array+0x1e>
 8013960:	08017354 	.word	0x08017354
 8013964:	08017354 	.word	0x08017354
 8013968:	08017354 	.word	0x08017354
 801396c:	08017358 	.word	0x08017358

08013970 <memcpy>:
 8013970:	440a      	add	r2, r1
 8013972:	4291      	cmp	r1, r2
 8013974:	f100 33ff 	add.w	r3, r0, #4294967295
 8013978:	d100      	bne.n	801397c <memcpy+0xc>
 801397a:	4770      	bx	lr
 801397c:	b510      	push	{r4, lr}
 801397e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8013982:	f803 4f01 	strb.w	r4, [r3, #1]!
 8013986:	4291      	cmp	r1, r2
 8013988:	d1f9      	bne.n	801397e <memcpy+0xe>
 801398a:	bd10      	pop	{r4, pc}

0801398c <memset>:
 801398c:	4402      	add	r2, r0
 801398e:	4603      	mov	r3, r0
 8013990:	4293      	cmp	r3, r2
 8013992:	d100      	bne.n	8013996 <memset+0xa>
 8013994:	4770      	bx	lr
 8013996:	f803 1b01 	strb.w	r1, [r3], #1
 801399a:	e7f9      	b.n	8013990 <memset+0x4>

0801399c <__cvt>:
 801399c:	b5f0      	push	{r4, r5, r6, r7, lr}
 801399e:	ed2d 8b02 	vpush	{d8}
 80139a2:	eeb0 8b40 	vmov.f64	d8, d0
 80139a6:	b085      	sub	sp, #20
 80139a8:	4617      	mov	r7, r2
 80139aa:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 80139ac:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 80139ae:	ee18 2a90 	vmov	r2, s17
 80139b2:	f025 0520 	bic.w	r5, r5, #32
 80139b6:	2a00      	cmp	r2, #0
 80139b8:	bfb6      	itet	lt
 80139ba:	222d      	movlt	r2, #45	; 0x2d
 80139bc:	2200      	movge	r2, #0
 80139be:	eeb1 8b40 	vneglt.f64	d8, d0
 80139c2:	2d46      	cmp	r5, #70	; 0x46
 80139c4:	460c      	mov	r4, r1
 80139c6:	701a      	strb	r2, [r3, #0]
 80139c8:	d004      	beq.n	80139d4 <__cvt+0x38>
 80139ca:	2d45      	cmp	r5, #69	; 0x45
 80139cc:	d100      	bne.n	80139d0 <__cvt+0x34>
 80139ce:	3401      	adds	r4, #1
 80139d0:	2102      	movs	r1, #2
 80139d2:	e000      	b.n	80139d6 <__cvt+0x3a>
 80139d4:	2103      	movs	r1, #3
 80139d6:	ab03      	add	r3, sp, #12
 80139d8:	9301      	str	r3, [sp, #4]
 80139da:	ab02      	add	r3, sp, #8
 80139dc:	9300      	str	r3, [sp, #0]
 80139de:	4622      	mov	r2, r4
 80139e0:	4633      	mov	r3, r6
 80139e2:	eeb0 0b48 	vmov.f64	d0, d8
 80139e6:	f000 fce3 	bl	80143b0 <_dtoa_r>
 80139ea:	2d47      	cmp	r5, #71	; 0x47
 80139ec:	d109      	bne.n	8013a02 <__cvt+0x66>
 80139ee:	07fb      	lsls	r3, r7, #31
 80139f0:	d407      	bmi.n	8013a02 <__cvt+0x66>
 80139f2:	9b03      	ldr	r3, [sp, #12]
 80139f4:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80139f6:	1a1b      	subs	r3, r3, r0
 80139f8:	6013      	str	r3, [r2, #0]
 80139fa:	b005      	add	sp, #20
 80139fc:	ecbd 8b02 	vpop	{d8}
 8013a00:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8013a02:	2d46      	cmp	r5, #70	; 0x46
 8013a04:	eb00 0204 	add.w	r2, r0, r4
 8013a08:	d10c      	bne.n	8013a24 <__cvt+0x88>
 8013a0a:	7803      	ldrb	r3, [r0, #0]
 8013a0c:	2b30      	cmp	r3, #48	; 0x30
 8013a0e:	d107      	bne.n	8013a20 <__cvt+0x84>
 8013a10:	eeb5 8b40 	vcmp.f64	d8, #0.0
 8013a14:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013a18:	bf1c      	itt	ne
 8013a1a:	f1c4 0401 	rsbne	r4, r4, #1
 8013a1e:	6034      	strne	r4, [r6, #0]
 8013a20:	6833      	ldr	r3, [r6, #0]
 8013a22:	441a      	add	r2, r3
 8013a24:	eeb5 8b40 	vcmp.f64	d8, #0.0
 8013a28:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013a2c:	bf08      	it	eq
 8013a2e:	9203      	streq	r2, [sp, #12]
 8013a30:	2130      	movs	r1, #48	; 0x30
 8013a32:	9b03      	ldr	r3, [sp, #12]
 8013a34:	4293      	cmp	r3, r2
 8013a36:	d2dc      	bcs.n	80139f2 <__cvt+0x56>
 8013a38:	1c5c      	adds	r4, r3, #1
 8013a3a:	9403      	str	r4, [sp, #12]
 8013a3c:	7019      	strb	r1, [r3, #0]
 8013a3e:	e7f8      	b.n	8013a32 <__cvt+0x96>

08013a40 <__exponent>:
 8013a40:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8013a42:	4603      	mov	r3, r0
 8013a44:	2900      	cmp	r1, #0
 8013a46:	bfb8      	it	lt
 8013a48:	4249      	neglt	r1, r1
 8013a4a:	f803 2b02 	strb.w	r2, [r3], #2
 8013a4e:	bfb4      	ite	lt
 8013a50:	222d      	movlt	r2, #45	; 0x2d
 8013a52:	222b      	movge	r2, #43	; 0x2b
 8013a54:	2909      	cmp	r1, #9
 8013a56:	7042      	strb	r2, [r0, #1]
 8013a58:	dd2a      	ble.n	8013ab0 <__exponent+0x70>
 8013a5a:	f10d 0407 	add.w	r4, sp, #7
 8013a5e:	46a4      	mov	ip, r4
 8013a60:	270a      	movs	r7, #10
 8013a62:	46a6      	mov	lr, r4
 8013a64:	460a      	mov	r2, r1
 8013a66:	fb91 f6f7 	sdiv	r6, r1, r7
 8013a6a:	fb07 1516 	mls	r5, r7, r6, r1
 8013a6e:	3530      	adds	r5, #48	; 0x30
 8013a70:	2a63      	cmp	r2, #99	; 0x63
 8013a72:	f104 34ff 	add.w	r4, r4, #4294967295
 8013a76:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8013a7a:	4631      	mov	r1, r6
 8013a7c:	dcf1      	bgt.n	8013a62 <__exponent+0x22>
 8013a7e:	3130      	adds	r1, #48	; 0x30
 8013a80:	f1ae 0502 	sub.w	r5, lr, #2
 8013a84:	f804 1c01 	strb.w	r1, [r4, #-1]
 8013a88:	1c44      	adds	r4, r0, #1
 8013a8a:	4629      	mov	r1, r5
 8013a8c:	4561      	cmp	r1, ip
 8013a8e:	d30a      	bcc.n	8013aa6 <__exponent+0x66>
 8013a90:	f10d 0209 	add.w	r2, sp, #9
 8013a94:	eba2 020e 	sub.w	r2, r2, lr
 8013a98:	4565      	cmp	r5, ip
 8013a9a:	bf88      	it	hi
 8013a9c:	2200      	movhi	r2, #0
 8013a9e:	4413      	add	r3, r2
 8013aa0:	1a18      	subs	r0, r3, r0
 8013aa2:	b003      	add	sp, #12
 8013aa4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8013aa6:	f811 2b01 	ldrb.w	r2, [r1], #1
 8013aaa:	f804 2f01 	strb.w	r2, [r4, #1]!
 8013aae:	e7ed      	b.n	8013a8c <__exponent+0x4c>
 8013ab0:	2330      	movs	r3, #48	; 0x30
 8013ab2:	3130      	adds	r1, #48	; 0x30
 8013ab4:	7083      	strb	r3, [r0, #2]
 8013ab6:	70c1      	strb	r1, [r0, #3]
 8013ab8:	1d03      	adds	r3, r0, #4
 8013aba:	e7f1      	b.n	8013aa0 <__exponent+0x60>
 8013abc:	0000      	movs	r0, r0
	...

08013ac0 <_printf_float>:
 8013ac0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013ac4:	b08b      	sub	sp, #44	; 0x2c
 8013ac6:	460c      	mov	r4, r1
 8013ac8:	f8dd 8050 	ldr.w	r8, [sp, #80]	; 0x50
 8013acc:	4616      	mov	r6, r2
 8013ace:	461f      	mov	r7, r3
 8013ad0:	4605      	mov	r5, r0
 8013ad2:	f001 f9ef 	bl	8014eb4 <_localeconv_r>
 8013ad6:	f8d0 b000 	ldr.w	fp, [r0]
 8013ada:	4658      	mov	r0, fp
 8013adc:	f7ec fc00 	bl	80002e0 <strlen>
 8013ae0:	2300      	movs	r3, #0
 8013ae2:	9308      	str	r3, [sp, #32]
 8013ae4:	f8d8 3000 	ldr.w	r3, [r8]
 8013ae8:	f894 9018 	ldrb.w	r9, [r4, #24]
 8013aec:	6822      	ldr	r2, [r4, #0]
 8013aee:	3307      	adds	r3, #7
 8013af0:	f023 0307 	bic.w	r3, r3, #7
 8013af4:	f103 0108 	add.w	r1, r3, #8
 8013af8:	f8c8 1000 	str.w	r1, [r8]
 8013afc:	4682      	mov	sl, r0
 8013afe:	e9d3 0100 	ldrd	r0, r1, [r3]
 8013b02:	e9c4 0112 	strd	r0, r1, [r4, #72]	; 0x48
 8013b06:	ed9f 7b98 	vldr	d7, [pc, #608]	; 8013d68 <_printf_float+0x2a8>
 8013b0a:	ed94 0b12 	vldr	d0, [r4, #72]	; 0x48
 8013b0e:	eeb0 6bc0 	vabs.f64	d6, d0
 8013b12:	eeb4 6b47 	vcmp.f64	d6, d7
 8013b16:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013b1a:	dd24      	ble.n	8013b66 <_printf_float+0xa6>
 8013b1c:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 8013b20:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013b24:	d502      	bpl.n	8013b2c <_printf_float+0x6c>
 8013b26:	232d      	movs	r3, #45	; 0x2d
 8013b28:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8013b2c:	4b90      	ldr	r3, [pc, #576]	; (8013d70 <_printf_float+0x2b0>)
 8013b2e:	4891      	ldr	r0, [pc, #580]	; (8013d74 <_printf_float+0x2b4>)
 8013b30:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 8013b34:	bf94      	ite	ls
 8013b36:	4698      	movls	r8, r3
 8013b38:	4680      	movhi	r8, r0
 8013b3a:	2303      	movs	r3, #3
 8013b3c:	6123      	str	r3, [r4, #16]
 8013b3e:	f022 0204 	bic.w	r2, r2, #4
 8013b42:	2300      	movs	r3, #0
 8013b44:	6022      	str	r2, [r4, #0]
 8013b46:	9304      	str	r3, [sp, #16]
 8013b48:	9700      	str	r7, [sp, #0]
 8013b4a:	4633      	mov	r3, r6
 8013b4c:	aa09      	add	r2, sp, #36	; 0x24
 8013b4e:	4621      	mov	r1, r4
 8013b50:	4628      	mov	r0, r5
 8013b52:	f000 f9d3 	bl	8013efc <_printf_common>
 8013b56:	3001      	adds	r0, #1
 8013b58:	f040 808a 	bne.w	8013c70 <_printf_float+0x1b0>
 8013b5c:	f04f 30ff 	mov.w	r0, #4294967295
 8013b60:	b00b      	add	sp, #44	; 0x2c
 8013b62:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013b66:	eeb4 0b40 	vcmp.f64	d0, d0
 8013b6a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013b6e:	d709      	bvc.n	8013b84 <_printf_float+0xc4>
 8013b70:	ee10 3a90 	vmov	r3, s1
 8013b74:	2b00      	cmp	r3, #0
 8013b76:	bfbc      	itt	lt
 8013b78:	232d      	movlt	r3, #45	; 0x2d
 8013b7a:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8013b7e:	487e      	ldr	r0, [pc, #504]	; (8013d78 <_printf_float+0x2b8>)
 8013b80:	4b7e      	ldr	r3, [pc, #504]	; (8013d7c <_printf_float+0x2bc>)
 8013b82:	e7d5      	b.n	8013b30 <_printf_float+0x70>
 8013b84:	6863      	ldr	r3, [r4, #4]
 8013b86:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 8013b8a:	9104      	str	r1, [sp, #16]
 8013b8c:	1c59      	adds	r1, r3, #1
 8013b8e:	d13c      	bne.n	8013c0a <_printf_float+0x14a>
 8013b90:	2306      	movs	r3, #6
 8013b92:	6063      	str	r3, [r4, #4]
 8013b94:	2300      	movs	r3, #0
 8013b96:	9303      	str	r3, [sp, #12]
 8013b98:	ab08      	add	r3, sp, #32
 8013b9a:	e9cd 9301 	strd	r9, r3, [sp, #4]
 8013b9e:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8013ba2:	ab07      	add	r3, sp, #28
 8013ba4:	6861      	ldr	r1, [r4, #4]
 8013ba6:	9300      	str	r3, [sp, #0]
 8013ba8:	6022      	str	r2, [r4, #0]
 8013baa:	f10d 031b 	add.w	r3, sp, #27
 8013bae:	4628      	mov	r0, r5
 8013bb0:	f7ff fef4 	bl	801399c <__cvt>
 8013bb4:	9b04      	ldr	r3, [sp, #16]
 8013bb6:	9907      	ldr	r1, [sp, #28]
 8013bb8:	2b47      	cmp	r3, #71	; 0x47
 8013bba:	4680      	mov	r8, r0
 8013bbc:	d108      	bne.n	8013bd0 <_printf_float+0x110>
 8013bbe:	1cc8      	adds	r0, r1, #3
 8013bc0:	db02      	blt.n	8013bc8 <_printf_float+0x108>
 8013bc2:	6863      	ldr	r3, [r4, #4]
 8013bc4:	4299      	cmp	r1, r3
 8013bc6:	dd41      	ble.n	8013c4c <_printf_float+0x18c>
 8013bc8:	f1a9 0902 	sub.w	r9, r9, #2
 8013bcc:	fa5f f989 	uxtb.w	r9, r9
 8013bd0:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8013bd4:	d820      	bhi.n	8013c18 <_printf_float+0x158>
 8013bd6:	3901      	subs	r1, #1
 8013bd8:	464a      	mov	r2, r9
 8013bda:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8013bde:	9107      	str	r1, [sp, #28]
 8013be0:	f7ff ff2e 	bl	8013a40 <__exponent>
 8013be4:	9a08      	ldr	r2, [sp, #32]
 8013be6:	9004      	str	r0, [sp, #16]
 8013be8:	1813      	adds	r3, r2, r0
 8013bea:	2a01      	cmp	r2, #1
 8013bec:	6123      	str	r3, [r4, #16]
 8013bee:	dc02      	bgt.n	8013bf6 <_printf_float+0x136>
 8013bf0:	6822      	ldr	r2, [r4, #0]
 8013bf2:	07d2      	lsls	r2, r2, #31
 8013bf4:	d501      	bpl.n	8013bfa <_printf_float+0x13a>
 8013bf6:	3301      	adds	r3, #1
 8013bf8:	6123      	str	r3, [r4, #16]
 8013bfa:	f89d 301b 	ldrb.w	r3, [sp, #27]
 8013bfe:	2b00      	cmp	r3, #0
 8013c00:	d0a2      	beq.n	8013b48 <_printf_float+0x88>
 8013c02:	232d      	movs	r3, #45	; 0x2d
 8013c04:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8013c08:	e79e      	b.n	8013b48 <_printf_float+0x88>
 8013c0a:	9904      	ldr	r1, [sp, #16]
 8013c0c:	2947      	cmp	r1, #71	; 0x47
 8013c0e:	d1c1      	bne.n	8013b94 <_printf_float+0xd4>
 8013c10:	2b00      	cmp	r3, #0
 8013c12:	d1bf      	bne.n	8013b94 <_printf_float+0xd4>
 8013c14:	2301      	movs	r3, #1
 8013c16:	e7bc      	b.n	8013b92 <_printf_float+0xd2>
 8013c18:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 8013c1c:	d118      	bne.n	8013c50 <_printf_float+0x190>
 8013c1e:	2900      	cmp	r1, #0
 8013c20:	6863      	ldr	r3, [r4, #4]
 8013c22:	dd0b      	ble.n	8013c3c <_printf_float+0x17c>
 8013c24:	6121      	str	r1, [r4, #16]
 8013c26:	b913      	cbnz	r3, 8013c2e <_printf_float+0x16e>
 8013c28:	6822      	ldr	r2, [r4, #0]
 8013c2a:	07d0      	lsls	r0, r2, #31
 8013c2c:	d502      	bpl.n	8013c34 <_printf_float+0x174>
 8013c2e:	3301      	adds	r3, #1
 8013c30:	440b      	add	r3, r1
 8013c32:	6123      	str	r3, [r4, #16]
 8013c34:	2300      	movs	r3, #0
 8013c36:	65a1      	str	r1, [r4, #88]	; 0x58
 8013c38:	9304      	str	r3, [sp, #16]
 8013c3a:	e7de      	b.n	8013bfa <_printf_float+0x13a>
 8013c3c:	b913      	cbnz	r3, 8013c44 <_printf_float+0x184>
 8013c3e:	6822      	ldr	r2, [r4, #0]
 8013c40:	07d2      	lsls	r2, r2, #31
 8013c42:	d501      	bpl.n	8013c48 <_printf_float+0x188>
 8013c44:	3302      	adds	r3, #2
 8013c46:	e7f4      	b.n	8013c32 <_printf_float+0x172>
 8013c48:	2301      	movs	r3, #1
 8013c4a:	e7f2      	b.n	8013c32 <_printf_float+0x172>
 8013c4c:	f04f 0967 	mov.w	r9, #103	; 0x67
 8013c50:	9b08      	ldr	r3, [sp, #32]
 8013c52:	4299      	cmp	r1, r3
 8013c54:	db05      	blt.n	8013c62 <_printf_float+0x1a2>
 8013c56:	6823      	ldr	r3, [r4, #0]
 8013c58:	6121      	str	r1, [r4, #16]
 8013c5a:	07d8      	lsls	r0, r3, #31
 8013c5c:	d5ea      	bpl.n	8013c34 <_printf_float+0x174>
 8013c5e:	1c4b      	adds	r3, r1, #1
 8013c60:	e7e7      	b.n	8013c32 <_printf_float+0x172>
 8013c62:	2900      	cmp	r1, #0
 8013c64:	bfd4      	ite	le
 8013c66:	f1c1 0202 	rsble	r2, r1, #2
 8013c6a:	2201      	movgt	r2, #1
 8013c6c:	4413      	add	r3, r2
 8013c6e:	e7e0      	b.n	8013c32 <_printf_float+0x172>
 8013c70:	6823      	ldr	r3, [r4, #0]
 8013c72:	055a      	lsls	r2, r3, #21
 8013c74:	d407      	bmi.n	8013c86 <_printf_float+0x1c6>
 8013c76:	6923      	ldr	r3, [r4, #16]
 8013c78:	4642      	mov	r2, r8
 8013c7a:	4631      	mov	r1, r6
 8013c7c:	4628      	mov	r0, r5
 8013c7e:	47b8      	blx	r7
 8013c80:	3001      	adds	r0, #1
 8013c82:	d12a      	bne.n	8013cda <_printf_float+0x21a>
 8013c84:	e76a      	b.n	8013b5c <_printf_float+0x9c>
 8013c86:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8013c8a:	f240 80e2 	bls.w	8013e52 <_printf_float+0x392>
 8013c8e:	ed94 7b12 	vldr	d7, [r4, #72]	; 0x48
 8013c92:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8013c96:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013c9a:	d133      	bne.n	8013d04 <_printf_float+0x244>
 8013c9c:	4a38      	ldr	r2, [pc, #224]	; (8013d80 <_printf_float+0x2c0>)
 8013c9e:	2301      	movs	r3, #1
 8013ca0:	4631      	mov	r1, r6
 8013ca2:	4628      	mov	r0, r5
 8013ca4:	47b8      	blx	r7
 8013ca6:	3001      	adds	r0, #1
 8013ca8:	f43f af58 	beq.w	8013b5c <_printf_float+0x9c>
 8013cac:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 8013cb0:	429a      	cmp	r2, r3
 8013cb2:	db02      	blt.n	8013cba <_printf_float+0x1fa>
 8013cb4:	6823      	ldr	r3, [r4, #0]
 8013cb6:	07d8      	lsls	r0, r3, #31
 8013cb8:	d50f      	bpl.n	8013cda <_printf_float+0x21a>
 8013cba:	4653      	mov	r3, sl
 8013cbc:	465a      	mov	r2, fp
 8013cbe:	4631      	mov	r1, r6
 8013cc0:	4628      	mov	r0, r5
 8013cc2:	47b8      	blx	r7
 8013cc4:	3001      	adds	r0, #1
 8013cc6:	f43f af49 	beq.w	8013b5c <_printf_float+0x9c>
 8013cca:	f04f 0800 	mov.w	r8, #0
 8013cce:	f104 091a 	add.w	r9, r4, #26
 8013cd2:	9b08      	ldr	r3, [sp, #32]
 8013cd4:	3b01      	subs	r3, #1
 8013cd6:	4543      	cmp	r3, r8
 8013cd8:	dc09      	bgt.n	8013cee <_printf_float+0x22e>
 8013cda:	6823      	ldr	r3, [r4, #0]
 8013cdc:	079b      	lsls	r3, r3, #30
 8013cde:	f100 8108 	bmi.w	8013ef2 <_printf_float+0x432>
 8013ce2:	68e0      	ldr	r0, [r4, #12]
 8013ce4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8013ce6:	4298      	cmp	r0, r3
 8013ce8:	bfb8      	it	lt
 8013cea:	4618      	movlt	r0, r3
 8013cec:	e738      	b.n	8013b60 <_printf_float+0xa0>
 8013cee:	2301      	movs	r3, #1
 8013cf0:	464a      	mov	r2, r9
 8013cf2:	4631      	mov	r1, r6
 8013cf4:	4628      	mov	r0, r5
 8013cf6:	47b8      	blx	r7
 8013cf8:	3001      	adds	r0, #1
 8013cfa:	f43f af2f 	beq.w	8013b5c <_printf_float+0x9c>
 8013cfe:	f108 0801 	add.w	r8, r8, #1
 8013d02:	e7e6      	b.n	8013cd2 <_printf_float+0x212>
 8013d04:	9b07      	ldr	r3, [sp, #28]
 8013d06:	2b00      	cmp	r3, #0
 8013d08:	dc3c      	bgt.n	8013d84 <_printf_float+0x2c4>
 8013d0a:	4a1d      	ldr	r2, [pc, #116]	; (8013d80 <_printf_float+0x2c0>)
 8013d0c:	2301      	movs	r3, #1
 8013d0e:	4631      	mov	r1, r6
 8013d10:	4628      	mov	r0, r5
 8013d12:	47b8      	blx	r7
 8013d14:	3001      	adds	r0, #1
 8013d16:	f43f af21 	beq.w	8013b5c <_printf_float+0x9c>
 8013d1a:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 8013d1e:	4313      	orrs	r3, r2
 8013d20:	d102      	bne.n	8013d28 <_printf_float+0x268>
 8013d22:	6823      	ldr	r3, [r4, #0]
 8013d24:	07d9      	lsls	r1, r3, #31
 8013d26:	d5d8      	bpl.n	8013cda <_printf_float+0x21a>
 8013d28:	4653      	mov	r3, sl
 8013d2a:	465a      	mov	r2, fp
 8013d2c:	4631      	mov	r1, r6
 8013d2e:	4628      	mov	r0, r5
 8013d30:	47b8      	blx	r7
 8013d32:	3001      	adds	r0, #1
 8013d34:	f43f af12 	beq.w	8013b5c <_printf_float+0x9c>
 8013d38:	f04f 0900 	mov.w	r9, #0
 8013d3c:	f104 0a1a 	add.w	sl, r4, #26
 8013d40:	9b07      	ldr	r3, [sp, #28]
 8013d42:	425b      	negs	r3, r3
 8013d44:	454b      	cmp	r3, r9
 8013d46:	dc01      	bgt.n	8013d4c <_printf_float+0x28c>
 8013d48:	9b08      	ldr	r3, [sp, #32]
 8013d4a:	e795      	b.n	8013c78 <_printf_float+0x1b8>
 8013d4c:	2301      	movs	r3, #1
 8013d4e:	4652      	mov	r2, sl
 8013d50:	4631      	mov	r1, r6
 8013d52:	4628      	mov	r0, r5
 8013d54:	47b8      	blx	r7
 8013d56:	3001      	adds	r0, #1
 8013d58:	f43f af00 	beq.w	8013b5c <_printf_float+0x9c>
 8013d5c:	f109 0901 	add.w	r9, r9, #1
 8013d60:	e7ee      	b.n	8013d40 <_printf_float+0x280>
 8013d62:	bf00      	nop
 8013d64:	f3af 8000 	nop.w
 8013d68:	ffffffff 	.word	0xffffffff
 8013d6c:	7fefffff 	.word	0x7fefffff
 8013d70:	08016f6c 	.word	0x08016f6c
 8013d74:	08016f70 	.word	0x08016f70
 8013d78:	08016f78 	.word	0x08016f78
 8013d7c:	08016f74 	.word	0x08016f74
 8013d80:	08016f7c 	.word	0x08016f7c
 8013d84:	9a08      	ldr	r2, [sp, #32]
 8013d86:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8013d88:	429a      	cmp	r2, r3
 8013d8a:	bfa8      	it	ge
 8013d8c:	461a      	movge	r2, r3
 8013d8e:	2a00      	cmp	r2, #0
 8013d90:	4691      	mov	r9, r2
 8013d92:	dc38      	bgt.n	8013e06 <_printf_float+0x346>
 8013d94:	2300      	movs	r3, #0
 8013d96:	9305      	str	r3, [sp, #20]
 8013d98:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8013d9c:	f104 021a 	add.w	r2, r4, #26
 8013da0:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8013da2:	9905      	ldr	r1, [sp, #20]
 8013da4:	9304      	str	r3, [sp, #16]
 8013da6:	eba3 0309 	sub.w	r3, r3, r9
 8013daa:	428b      	cmp	r3, r1
 8013dac:	dc33      	bgt.n	8013e16 <_printf_float+0x356>
 8013dae:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 8013db2:	429a      	cmp	r2, r3
 8013db4:	db3c      	blt.n	8013e30 <_printf_float+0x370>
 8013db6:	6823      	ldr	r3, [r4, #0]
 8013db8:	07da      	lsls	r2, r3, #31
 8013dba:	d439      	bmi.n	8013e30 <_printf_float+0x370>
 8013dbc:	9a08      	ldr	r2, [sp, #32]
 8013dbe:	9b04      	ldr	r3, [sp, #16]
 8013dc0:	9907      	ldr	r1, [sp, #28]
 8013dc2:	1ad3      	subs	r3, r2, r3
 8013dc4:	eba2 0901 	sub.w	r9, r2, r1
 8013dc8:	4599      	cmp	r9, r3
 8013dca:	bfa8      	it	ge
 8013dcc:	4699      	movge	r9, r3
 8013dce:	f1b9 0f00 	cmp.w	r9, #0
 8013dd2:	dc35      	bgt.n	8013e40 <_printf_float+0x380>
 8013dd4:	f04f 0800 	mov.w	r8, #0
 8013dd8:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8013ddc:	f104 0a1a 	add.w	sl, r4, #26
 8013de0:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 8013de4:	1a9b      	subs	r3, r3, r2
 8013de6:	eba3 0309 	sub.w	r3, r3, r9
 8013dea:	4543      	cmp	r3, r8
 8013dec:	f77f af75 	ble.w	8013cda <_printf_float+0x21a>
 8013df0:	2301      	movs	r3, #1
 8013df2:	4652      	mov	r2, sl
 8013df4:	4631      	mov	r1, r6
 8013df6:	4628      	mov	r0, r5
 8013df8:	47b8      	blx	r7
 8013dfa:	3001      	adds	r0, #1
 8013dfc:	f43f aeae 	beq.w	8013b5c <_printf_float+0x9c>
 8013e00:	f108 0801 	add.w	r8, r8, #1
 8013e04:	e7ec      	b.n	8013de0 <_printf_float+0x320>
 8013e06:	4613      	mov	r3, r2
 8013e08:	4631      	mov	r1, r6
 8013e0a:	4642      	mov	r2, r8
 8013e0c:	4628      	mov	r0, r5
 8013e0e:	47b8      	blx	r7
 8013e10:	3001      	adds	r0, #1
 8013e12:	d1bf      	bne.n	8013d94 <_printf_float+0x2d4>
 8013e14:	e6a2      	b.n	8013b5c <_printf_float+0x9c>
 8013e16:	2301      	movs	r3, #1
 8013e18:	4631      	mov	r1, r6
 8013e1a:	4628      	mov	r0, r5
 8013e1c:	9204      	str	r2, [sp, #16]
 8013e1e:	47b8      	blx	r7
 8013e20:	3001      	adds	r0, #1
 8013e22:	f43f ae9b 	beq.w	8013b5c <_printf_float+0x9c>
 8013e26:	9b05      	ldr	r3, [sp, #20]
 8013e28:	9a04      	ldr	r2, [sp, #16]
 8013e2a:	3301      	adds	r3, #1
 8013e2c:	9305      	str	r3, [sp, #20]
 8013e2e:	e7b7      	b.n	8013da0 <_printf_float+0x2e0>
 8013e30:	4653      	mov	r3, sl
 8013e32:	465a      	mov	r2, fp
 8013e34:	4631      	mov	r1, r6
 8013e36:	4628      	mov	r0, r5
 8013e38:	47b8      	blx	r7
 8013e3a:	3001      	adds	r0, #1
 8013e3c:	d1be      	bne.n	8013dbc <_printf_float+0x2fc>
 8013e3e:	e68d      	b.n	8013b5c <_printf_float+0x9c>
 8013e40:	9a04      	ldr	r2, [sp, #16]
 8013e42:	464b      	mov	r3, r9
 8013e44:	4442      	add	r2, r8
 8013e46:	4631      	mov	r1, r6
 8013e48:	4628      	mov	r0, r5
 8013e4a:	47b8      	blx	r7
 8013e4c:	3001      	adds	r0, #1
 8013e4e:	d1c1      	bne.n	8013dd4 <_printf_float+0x314>
 8013e50:	e684      	b.n	8013b5c <_printf_float+0x9c>
 8013e52:	9a08      	ldr	r2, [sp, #32]
 8013e54:	2a01      	cmp	r2, #1
 8013e56:	dc01      	bgt.n	8013e5c <_printf_float+0x39c>
 8013e58:	07db      	lsls	r3, r3, #31
 8013e5a:	d537      	bpl.n	8013ecc <_printf_float+0x40c>
 8013e5c:	2301      	movs	r3, #1
 8013e5e:	4642      	mov	r2, r8
 8013e60:	4631      	mov	r1, r6
 8013e62:	4628      	mov	r0, r5
 8013e64:	47b8      	blx	r7
 8013e66:	3001      	adds	r0, #1
 8013e68:	f43f ae78 	beq.w	8013b5c <_printf_float+0x9c>
 8013e6c:	4653      	mov	r3, sl
 8013e6e:	465a      	mov	r2, fp
 8013e70:	4631      	mov	r1, r6
 8013e72:	4628      	mov	r0, r5
 8013e74:	47b8      	blx	r7
 8013e76:	3001      	adds	r0, #1
 8013e78:	f43f ae70 	beq.w	8013b5c <_printf_float+0x9c>
 8013e7c:	ed94 7b12 	vldr	d7, [r4, #72]	; 0x48
 8013e80:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8013e84:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013e88:	d01b      	beq.n	8013ec2 <_printf_float+0x402>
 8013e8a:	9b08      	ldr	r3, [sp, #32]
 8013e8c:	f108 0201 	add.w	r2, r8, #1
 8013e90:	3b01      	subs	r3, #1
 8013e92:	4631      	mov	r1, r6
 8013e94:	4628      	mov	r0, r5
 8013e96:	47b8      	blx	r7
 8013e98:	3001      	adds	r0, #1
 8013e9a:	d10e      	bne.n	8013eba <_printf_float+0x3fa>
 8013e9c:	e65e      	b.n	8013b5c <_printf_float+0x9c>
 8013e9e:	2301      	movs	r3, #1
 8013ea0:	464a      	mov	r2, r9
 8013ea2:	4631      	mov	r1, r6
 8013ea4:	4628      	mov	r0, r5
 8013ea6:	47b8      	blx	r7
 8013ea8:	3001      	adds	r0, #1
 8013eaa:	f43f ae57 	beq.w	8013b5c <_printf_float+0x9c>
 8013eae:	f108 0801 	add.w	r8, r8, #1
 8013eb2:	9b08      	ldr	r3, [sp, #32]
 8013eb4:	3b01      	subs	r3, #1
 8013eb6:	4543      	cmp	r3, r8
 8013eb8:	dcf1      	bgt.n	8013e9e <_printf_float+0x3de>
 8013eba:	9b04      	ldr	r3, [sp, #16]
 8013ebc:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8013ec0:	e6db      	b.n	8013c7a <_printf_float+0x1ba>
 8013ec2:	f04f 0800 	mov.w	r8, #0
 8013ec6:	f104 091a 	add.w	r9, r4, #26
 8013eca:	e7f2      	b.n	8013eb2 <_printf_float+0x3f2>
 8013ecc:	2301      	movs	r3, #1
 8013ece:	4642      	mov	r2, r8
 8013ed0:	e7df      	b.n	8013e92 <_printf_float+0x3d2>
 8013ed2:	2301      	movs	r3, #1
 8013ed4:	464a      	mov	r2, r9
 8013ed6:	4631      	mov	r1, r6
 8013ed8:	4628      	mov	r0, r5
 8013eda:	47b8      	blx	r7
 8013edc:	3001      	adds	r0, #1
 8013ede:	f43f ae3d 	beq.w	8013b5c <_printf_float+0x9c>
 8013ee2:	f108 0801 	add.w	r8, r8, #1
 8013ee6:	68e3      	ldr	r3, [r4, #12]
 8013ee8:	9909      	ldr	r1, [sp, #36]	; 0x24
 8013eea:	1a5b      	subs	r3, r3, r1
 8013eec:	4543      	cmp	r3, r8
 8013eee:	dcf0      	bgt.n	8013ed2 <_printf_float+0x412>
 8013ef0:	e6f7      	b.n	8013ce2 <_printf_float+0x222>
 8013ef2:	f04f 0800 	mov.w	r8, #0
 8013ef6:	f104 0919 	add.w	r9, r4, #25
 8013efa:	e7f4      	b.n	8013ee6 <_printf_float+0x426>

08013efc <_printf_common>:
 8013efc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8013f00:	4616      	mov	r6, r2
 8013f02:	4699      	mov	r9, r3
 8013f04:	688a      	ldr	r2, [r1, #8]
 8013f06:	690b      	ldr	r3, [r1, #16]
 8013f08:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8013f0c:	4293      	cmp	r3, r2
 8013f0e:	bfb8      	it	lt
 8013f10:	4613      	movlt	r3, r2
 8013f12:	6033      	str	r3, [r6, #0]
 8013f14:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8013f18:	4607      	mov	r7, r0
 8013f1a:	460c      	mov	r4, r1
 8013f1c:	b10a      	cbz	r2, 8013f22 <_printf_common+0x26>
 8013f1e:	3301      	adds	r3, #1
 8013f20:	6033      	str	r3, [r6, #0]
 8013f22:	6823      	ldr	r3, [r4, #0]
 8013f24:	0699      	lsls	r1, r3, #26
 8013f26:	bf42      	ittt	mi
 8013f28:	6833      	ldrmi	r3, [r6, #0]
 8013f2a:	3302      	addmi	r3, #2
 8013f2c:	6033      	strmi	r3, [r6, #0]
 8013f2e:	6825      	ldr	r5, [r4, #0]
 8013f30:	f015 0506 	ands.w	r5, r5, #6
 8013f34:	d106      	bne.n	8013f44 <_printf_common+0x48>
 8013f36:	f104 0a19 	add.w	sl, r4, #25
 8013f3a:	68e3      	ldr	r3, [r4, #12]
 8013f3c:	6832      	ldr	r2, [r6, #0]
 8013f3e:	1a9b      	subs	r3, r3, r2
 8013f40:	42ab      	cmp	r3, r5
 8013f42:	dc26      	bgt.n	8013f92 <_printf_common+0x96>
 8013f44:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8013f48:	1e13      	subs	r3, r2, #0
 8013f4a:	6822      	ldr	r2, [r4, #0]
 8013f4c:	bf18      	it	ne
 8013f4e:	2301      	movne	r3, #1
 8013f50:	0692      	lsls	r2, r2, #26
 8013f52:	d42b      	bmi.n	8013fac <_printf_common+0xb0>
 8013f54:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8013f58:	4649      	mov	r1, r9
 8013f5a:	4638      	mov	r0, r7
 8013f5c:	47c0      	blx	r8
 8013f5e:	3001      	adds	r0, #1
 8013f60:	d01e      	beq.n	8013fa0 <_printf_common+0xa4>
 8013f62:	6823      	ldr	r3, [r4, #0]
 8013f64:	68e5      	ldr	r5, [r4, #12]
 8013f66:	6832      	ldr	r2, [r6, #0]
 8013f68:	f003 0306 	and.w	r3, r3, #6
 8013f6c:	2b04      	cmp	r3, #4
 8013f6e:	bf08      	it	eq
 8013f70:	1aad      	subeq	r5, r5, r2
 8013f72:	68a3      	ldr	r3, [r4, #8]
 8013f74:	6922      	ldr	r2, [r4, #16]
 8013f76:	bf0c      	ite	eq
 8013f78:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8013f7c:	2500      	movne	r5, #0
 8013f7e:	4293      	cmp	r3, r2
 8013f80:	bfc4      	itt	gt
 8013f82:	1a9b      	subgt	r3, r3, r2
 8013f84:	18ed      	addgt	r5, r5, r3
 8013f86:	2600      	movs	r6, #0
 8013f88:	341a      	adds	r4, #26
 8013f8a:	42b5      	cmp	r5, r6
 8013f8c:	d11a      	bne.n	8013fc4 <_printf_common+0xc8>
 8013f8e:	2000      	movs	r0, #0
 8013f90:	e008      	b.n	8013fa4 <_printf_common+0xa8>
 8013f92:	2301      	movs	r3, #1
 8013f94:	4652      	mov	r2, sl
 8013f96:	4649      	mov	r1, r9
 8013f98:	4638      	mov	r0, r7
 8013f9a:	47c0      	blx	r8
 8013f9c:	3001      	adds	r0, #1
 8013f9e:	d103      	bne.n	8013fa8 <_printf_common+0xac>
 8013fa0:	f04f 30ff 	mov.w	r0, #4294967295
 8013fa4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8013fa8:	3501      	adds	r5, #1
 8013faa:	e7c6      	b.n	8013f3a <_printf_common+0x3e>
 8013fac:	18e1      	adds	r1, r4, r3
 8013fae:	1c5a      	adds	r2, r3, #1
 8013fb0:	2030      	movs	r0, #48	; 0x30
 8013fb2:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8013fb6:	4422      	add	r2, r4
 8013fb8:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8013fbc:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8013fc0:	3302      	adds	r3, #2
 8013fc2:	e7c7      	b.n	8013f54 <_printf_common+0x58>
 8013fc4:	2301      	movs	r3, #1
 8013fc6:	4622      	mov	r2, r4
 8013fc8:	4649      	mov	r1, r9
 8013fca:	4638      	mov	r0, r7
 8013fcc:	47c0      	blx	r8
 8013fce:	3001      	adds	r0, #1
 8013fd0:	d0e6      	beq.n	8013fa0 <_printf_common+0xa4>
 8013fd2:	3601      	adds	r6, #1
 8013fd4:	e7d9      	b.n	8013f8a <_printf_common+0x8e>
	...

08013fd8 <_printf_i>:
 8013fd8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8013fdc:	460c      	mov	r4, r1
 8013fde:	4691      	mov	r9, r2
 8013fe0:	7e27      	ldrb	r7, [r4, #24]
 8013fe2:	990c      	ldr	r1, [sp, #48]	; 0x30
 8013fe4:	2f78      	cmp	r7, #120	; 0x78
 8013fe6:	4680      	mov	r8, r0
 8013fe8:	469a      	mov	sl, r3
 8013fea:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8013fee:	d807      	bhi.n	8014000 <_printf_i+0x28>
 8013ff0:	2f62      	cmp	r7, #98	; 0x62
 8013ff2:	d80a      	bhi.n	801400a <_printf_i+0x32>
 8013ff4:	2f00      	cmp	r7, #0
 8013ff6:	f000 80d8 	beq.w	80141aa <_printf_i+0x1d2>
 8013ffa:	2f58      	cmp	r7, #88	; 0x58
 8013ffc:	f000 80a3 	beq.w	8014146 <_printf_i+0x16e>
 8014000:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8014004:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8014008:	e03a      	b.n	8014080 <_printf_i+0xa8>
 801400a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 801400e:	2b15      	cmp	r3, #21
 8014010:	d8f6      	bhi.n	8014000 <_printf_i+0x28>
 8014012:	a001      	add	r0, pc, #4	; (adr r0, 8014018 <_printf_i+0x40>)
 8014014:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8014018:	08014071 	.word	0x08014071
 801401c:	08014085 	.word	0x08014085
 8014020:	08014001 	.word	0x08014001
 8014024:	08014001 	.word	0x08014001
 8014028:	08014001 	.word	0x08014001
 801402c:	08014001 	.word	0x08014001
 8014030:	08014085 	.word	0x08014085
 8014034:	08014001 	.word	0x08014001
 8014038:	08014001 	.word	0x08014001
 801403c:	08014001 	.word	0x08014001
 8014040:	08014001 	.word	0x08014001
 8014044:	08014191 	.word	0x08014191
 8014048:	080140b5 	.word	0x080140b5
 801404c:	08014173 	.word	0x08014173
 8014050:	08014001 	.word	0x08014001
 8014054:	08014001 	.word	0x08014001
 8014058:	080141b3 	.word	0x080141b3
 801405c:	08014001 	.word	0x08014001
 8014060:	080140b5 	.word	0x080140b5
 8014064:	08014001 	.word	0x08014001
 8014068:	08014001 	.word	0x08014001
 801406c:	0801417b 	.word	0x0801417b
 8014070:	680b      	ldr	r3, [r1, #0]
 8014072:	1d1a      	adds	r2, r3, #4
 8014074:	681b      	ldr	r3, [r3, #0]
 8014076:	600a      	str	r2, [r1, #0]
 8014078:	f104 0642 	add.w	r6, r4, #66	; 0x42
 801407c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8014080:	2301      	movs	r3, #1
 8014082:	e0a3      	b.n	80141cc <_printf_i+0x1f4>
 8014084:	6825      	ldr	r5, [r4, #0]
 8014086:	6808      	ldr	r0, [r1, #0]
 8014088:	062e      	lsls	r6, r5, #24
 801408a:	f100 0304 	add.w	r3, r0, #4
 801408e:	d50a      	bpl.n	80140a6 <_printf_i+0xce>
 8014090:	6805      	ldr	r5, [r0, #0]
 8014092:	600b      	str	r3, [r1, #0]
 8014094:	2d00      	cmp	r5, #0
 8014096:	da03      	bge.n	80140a0 <_printf_i+0xc8>
 8014098:	232d      	movs	r3, #45	; 0x2d
 801409a:	426d      	negs	r5, r5
 801409c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80140a0:	485e      	ldr	r0, [pc, #376]	; (801421c <_printf_i+0x244>)
 80140a2:	230a      	movs	r3, #10
 80140a4:	e019      	b.n	80140da <_printf_i+0x102>
 80140a6:	f015 0f40 	tst.w	r5, #64	; 0x40
 80140aa:	6805      	ldr	r5, [r0, #0]
 80140ac:	600b      	str	r3, [r1, #0]
 80140ae:	bf18      	it	ne
 80140b0:	b22d      	sxthne	r5, r5
 80140b2:	e7ef      	b.n	8014094 <_printf_i+0xbc>
 80140b4:	680b      	ldr	r3, [r1, #0]
 80140b6:	6825      	ldr	r5, [r4, #0]
 80140b8:	1d18      	adds	r0, r3, #4
 80140ba:	6008      	str	r0, [r1, #0]
 80140bc:	0628      	lsls	r0, r5, #24
 80140be:	d501      	bpl.n	80140c4 <_printf_i+0xec>
 80140c0:	681d      	ldr	r5, [r3, #0]
 80140c2:	e002      	b.n	80140ca <_printf_i+0xf2>
 80140c4:	0669      	lsls	r1, r5, #25
 80140c6:	d5fb      	bpl.n	80140c0 <_printf_i+0xe8>
 80140c8:	881d      	ldrh	r5, [r3, #0]
 80140ca:	4854      	ldr	r0, [pc, #336]	; (801421c <_printf_i+0x244>)
 80140cc:	2f6f      	cmp	r7, #111	; 0x6f
 80140ce:	bf0c      	ite	eq
 80140d0:	2308      	moveq	r3, #8
 80140d2:	230a      	movne	r3, #10
 80140d4:	2100      	movs	r1, #0
 80140d6:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80140da:	6866      	ldr	r6, [r4, #4]
 80140dc:	60a6      	str	r6, [r4, #8]
 80140de:	2e00      	cmp	r6, #0
 80140e0:	bfa2      	ittt	ge
 80140e2:	6821      	ldrge	r1, [r4, #0]
 80140e4:	f021 0104 	bicge.w	r1, r1, #4
 80140e8:	6021      	strge	r1, [r4, #0]
 80140ea:	b90d      	cbnz	r5, 80140f0 <_printf_i+0x118>
 80140ec:	2e00      	cmp	r6, #0
 80140ee:	d04d      	beq.n	801418c <_printf_i+0x1b4>
 80140f0:	4616      	mov	r6, r2
 80140f2:	fbb5 f1f3 	udiv	r1, r5, r3
 80140f6:	fb03 5711 	mls	r7, r3, r1, r5
 80140fa:	5dc7      	ldrb	r7, [r0, r7]
 80140fc:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8014100:	462f      	mov	r7, r5
 8014102:	42bb      	cmp	r3, r7
 8014104:	460d      	mov	r5, r1
 8014106:	d9f4      	bls.n	80140f2 <_printf_i+0x11a>
 8014108:	2b08      	cmp	r3, #8
 801410a:	d10b      	bne.n	8014124 <_printf_i+0x14c>
 801410c:	6823      	ldr	r3, [r4, #0]
 801410e:	07df      	lsls	r7, r3, #31
 8014110:	d508      	bpl.n	8014124 <_printf_i+0x14c>
 8014112:	6923      	ldr	r3, [r4, #16]
 8014114:	6861      	ldr	r1, [r4, #4]
 8014116:	4299      	cmp	r1, r3
 8014118:	bfde      	ittt	le
 801411a:	2330      	movle	r3, #48	; 0x30
 801411c:	f806 3c01 	strble.w	r3, [r6, #-1]
 8014120:	f106 36ff 	addle.w	r6, r6, #4294967295
 8014124:	1b92      	subs	r2, r2, r6
 8014126:	6122      	str	r2, [r4, #16]
 8014128:	f8cd a000 	str.w	sl, [sp]
 801412c:	464b      	mov	r3, r9
 801412e:	aa03      	add	r2, sp, #12
 8014130:	4621      	mov	r1, r4
 8014132:	4640      	mov	r0, r8
 8014134:	f7ff fee2 	bl	8013efc <_printf_common>
 8014138:	3001      	adds	r0, #1
 801413a:	d14c      	bne.n	80141d6 <_printf_i+0x1fe>
 801413c:	f04f 30ff 	mov.w	r0, #4294967295
 8014140:	b004      	add	sp, #16
 8014142:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8014146:	4835      	ldr	r0, [pc, #212]	; (801421c <_printf_i+0x244>)
 8014148:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 801414c:	6823      	ldr	r3, [r4, #0]
 801414e:	680e      	ldr	r6, [r1, #0]
 8014150:	061f      	lsls	r7, r3, #24
 8014152:	f856 5b04 	ldr.w	r5, [r6], #4
 8014156:	600e      	str	r6, [r1, #0]
 8014158:	d514      	bpl.n	8014184 <_printf_i+0x1ac>
 801415a:	07d9      	lsls	r1, r3, #31
 801415c:	bf44      	itt	mi
 801415e:	f043 0320 	orrmi.w	r3, r3, #32
 8014162:	6023      	strmi	r3, [r4, #0]
 8014164:	b91d      	cbnz	r5, 801416e <_printf_i+0x196>
 8014166:	6823      	ldr	r3, [r4, #0]
 8014168:	f023 0320 	bic.w	r3, r3, #32
 801416c:	6023      	str	r3, [r4, #0]
 801416e:	2310      	movs	r3, #16
 8014170:	e7b0      	b.n	80140d4 <_printf_i+0xfc>
 8014172:	6823      	ldr	r3, [r4, #0]
 8014174:	f043 0320 	orr.w	r3, r3, #32
 8014178:	6023      	str	r3, [r4, #0]
 801417a:	2378      	movs	r3, #120	; 0x78
 801417c:	4828      	ldr	r0, [pc, #160]	; (8014220 <_printf_i+0x248>)
 801417e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8014182:	e7e3      	b.n	801414c <_printf_i+0x174>
 8014184:	065e      	lsls	r6, r3, #25
 8014186:	bf48      	it	mi
 8014188:	b2ad      	uxthmi	r5, r5
 801418a:	e7e6      	b.n	801415a <_printf_i+0x182>
 801418c:	4616      	mov	r6, r2
 801418e:	e7bb      	b.n	8014108 <_printf_i+0x130>
 8014190:	680b      	ldr	r3, [r1, #0]
 8014192:	6826      	ldr	r6, [r4, #0]
 8014194:	6960      	ldr	r0, [r4, #20]
 8014196:	1d1d      	adds	r5, r3, #4
 8014198:	600d      	str	r5, [r1, #0]
 801419a:	0635      	lsls	r5, r6, #24
 801419c:	681b      	ldr	r3, [r3, #0]
 801419e:	d501      	bpl.n	80141a4 <_printf_i+0x1cc>
 80141a0:	6018      	str	r0, [r3, #0]
 80141a2:	e002      	b.n	80141aa <_printf_i+0x1d2>
 80141a4:	0671      	lsls	r1, r6, #25
 80141a6:	d5fb      	bpl.n	80141a0 <_printf_i+0x1c8>
 80141a8:	8018      	strh	r0, [r3, #0]
 80141aa:	2300      	movs	r3, #0
 80141ac:	6123      	str	r3, [r4, #16]
 80141ae:	4616      	mov	r6, r2
 80141b0:	e7ba      	b.n	8014128 <_printf_i+0x150>
 80141b2:	680b      	ldr	r3, [r1, #0]
 80141b4:	1d1a      	adds	r2, r3, #4
 80141b6:	600a      	str	r2, [r1, #0]
 80141b8:	681e      	ldr	r6, [r3, #0]
 80141ba:	6862      	ldr	r2, [r4, #4]
 80141bc:	2100      	movs	r1, #0
 80141be:	4630      	mov	r0, r6
 80141c0:	f7ec f896 	bl	80002f0 <memchr>
 80141c4:	b108      	cbz	r0, 80141ca <_printf_i+0x1f2>
 80141c6:	1b80      	subs	r0, r0, r6
 80141c8:	6060      	str	r0, [r4, #4]
 80141ca:	6863      	ldr	r3, [r4, #4]
 80141cc:	6123      	str	r3, [r4, #16]
 80141ce:	2300      	movs	r3, #0
 80141d0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80141d4:	e7a8      	b.n	8014128 <_printf_i+0x150>
 80141d6:	6923      	ldr	r3, [r4, #16]
 80141d8:	4632      	mov	r2, r6
 80141da:	4649      	mov	r1, r9
 80141dc:	4640      	mov	r0, r8
 80141de:	47d0      	blx	sl
 80141e0:	3001      	adds	r0, #1
 80141e2:	d0ab      	beq.n	801413c <_printf_i+0x164>
 80141e4:	6823      	ldr	r3, [r4, #0]
 80141e6:	079b      	lsls	r3, r3, #30
 80141e8:	d413      	bmi.n	8014212 <_printf_i+0x23a>
 80141ea:	68e0      	ldr	r0, [r4, #12]
 80141ec:	9b03      	ldr	r3, [sp, #12]
 80141ee:	4298      	cmp	r0, r3
 80141f0:	bfb8      	it	lt
 80141f2:	4618      	movlt	r0, r3
 80141f4:	e7a4      	b.n	8014140 <_printf_i+0x168>
 80141f6:	2301      	movs	r3, #1
 80141f8:	4632      	mov	r2, r6
 80141fa:	4649      	mov	r1, r9
 80141fc:	4640      	mov	r0, r8
 80141fe:	47d0      	blx	sl
 8014200:	3001      	adds	r0, #1
 8014202:	d09b      	beq.n	801413c <_printf_i+0x164>
 8014204:	3501      	adds	r5, #1
 8014206:	68e3      	ldr	r3, [r4, #12]
 8014208:	9903      	ldr	r1, [sp, #12]
 801420a:	1a5b      	subs	r3, r3, r1
 801420c:	42ab      	cmp	r3, r5
 801420e:	dcf2      	bgt.n	80141f6 <_printf_i+0x21e>
 8014210:	e7eb      	b.n	80141ea <_printf_i+0x212>
 8014212:	2500      	movs	r5, #0
 8014214:	f104 0619 	add.w	r6, r4, #25
 8014218:	e7f5      	b.n	8014206 <_printf_i+0x22e>
 801421a:	bf00      	nop
 801421c:	08016f7e 	.word	0x08016f7e
 8014220:	08016f8f 	.word	0x08016f8f

08014224 <_vsniprintf_r>:
 8014224:	b530      	push	{r4, r5, lr}
 8014226:	1e14      	subs	r4, r2, #0
 8014228:	4605      	mov	r5, r0
 801422a:	b09b      	sub	sp, #108	; 0x6c
 801422c:	4618      	mov	r0, r3
 801422e:	da05      	bge.n	801423c <_vsniprintf_r+0x18>
 8014230:	238b      	movs	r3, #139	; 0x8b
 8014232:	602b      	str	r3, [r5, #0]
 8014234:	f04f 30ff 	mov.w	r0, #4294967295
 8014238:	b01b      	add	sp, #108	; 0x6c
 801423a:	bd30      	pop	{r4, r5, pc}
 801423c:	f44f 7302 	mov.w	r3, #520	; 0x208
 8014240:	f8ad 300c 	strh.w	r3, [sp, #12]
 8014244:	bf14      	ite	ne
 8014246:	f104 33ff 	addne.w	r3, r4, #4294967295
 801424a:	4623      	moveq	r3, r4
 801424c:	9302      	str	r3, [sp, #8]
 801424e:	9305      	str	r3, [sp, #20]
 8014250:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8014254:	9100      	str	r1, [sp, #0]
 8014256:	9104      	str	r1, [sp, #16]
 8014258:	f8ad 300e 	strh.w	r3, [sp, #14]
 801425c:	4602      	mov	r2, r0
 801425e:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8014260:	4669      	mov	r1, sp
 8014262:	4628      	mov	r0, r5
 8014264:	f001 fac6 	bl	80157f4 <_svfiprintf_r>
 8014268:	1c43      	adds	r3, r0, #1
 801426a:	bfbc      	itt	lt
 801426c:	238b      	movlt	r3, #139	; 0x8b
 801426e:	602b      	strlt	r3, [r5, #0]
 8014270:	2c00      	cmp	r4, #0
 8014272:	d0e1      	beq.n	8014238 <_vsniprintf_r+0x14>
 8014274:	9b00      	ldr	r3, [sp, #0]
 8014276:	2200      	movs	r2, #0
 8014278:	701a      	strb	r2, [r3, #0]
 801427a:	e7dd      	b.n	8014238 <_vsniprintf_r+0x14>

0801427c <vsniprintf>:
 801427c:	b507      	push	{r0, r1, r2, lr}
 801427e:	9300      	str	r3, [sp, #0]
 8014280:	4613      	mov	r3, r2
 8014282:	460a      	mov	r2, r1
 8014284:	4601      	mov	r1, r0
 8014286:	4803      	ldr	r0, [pc, #12]	; (8014294 <vsniprintf+0x18>)
 8014288:	6800      	ldr	r0, [r0, #0]
 801428a:	f7ff ffcb 	bl	8014224 <_vsniprintf_r>
 801428e:	b003      	add	sp, #12
 8014290:	f85d fb04 	ldr.w	pc, [sp], #4
 8014294:	24000160 	.word	0x24000160

08014298 <quorem>:
 8014298:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801429c:	6903      	ldr	r3, [r0, #16]
 801429e:	690c      	ldr	r4, [r1, #16]
 80142a0:	42a3      	cmp	r3, r4
 80142a2:	4607      	mov	r7, r0
 80142a4:	f2c0 8081 	blt.w	80143aa <quorem+0x112>
 80142a8:	3c01      	subs	r4, #1
 80142aa:	f101 0814 	add.w	r8, r1, #20
 80142ae:	f100 0514 	add.w	r5, r0, #20
 80142b2:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80142b6:	9301      	str	r3, [sp, #4]
 80142b8:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 80142bc:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80142c0:	3301      	adds	r3, #1
 80142c2:	429a      	cmp	r2, r3
 80142c4:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 80142c8:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 80142cc:	fbb2 f6f3 	udiv	r6, r2, r3
 80142d0:	d331      	bcc.n	8014336 <quorem+0x9e>
 80142d2:	f04f 0e00 	mov.w	lr, #0
 80142d6:	4640      	mov	r0, r8
 80142d8:	46ac      	mov	ip, r5
 80142da:	46f2      	mov	sl, lr
 80142dc:	f850 2b04 	ldr.w	r2, [r0], #4
 80142e0:	b293      	uxth	r3, r2
 80142e2:	fb06 e303 	mla	r3, r6, r3, lr
 80142e6:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 80142ea:	b29b      	uxth	r3, r3
 80142ec:	ebaa 0303 	sub.w	r3, sl, r3
 80142f0:	0c12      	lsrs	r2, r2, #16
 80142f2:	f8dc a000 	ldr.w	sl, [ip]
 80142f6:	fb06 e202 	mla	r2, r6, r2, lr
 80142fa:	fa13 f38a 	uxtah	r3, r3, sl
 80142fe:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8014302:	fa1f fa82 	uxth.w	sl, r2
 8014306:	f8dc 2000 	ldr.w	r2, [ip]
 801430a:	ebca 4212 	rsb	r2, sl, r2, lsr #16
 801430e:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8014312:	b29b      	uxth	r3, r3
 8014314:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8014318:	4581      	cmp	r9, r0
 801431a:	f84c 3b04 	str.w	r3, [ip], #4
 801431e:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8014322:	d2db      	bcs.n	80142dc <quorem+0x44>
 8014324:	f855 300b 	ldr.w	r3, [r5, fp]
 8014328:	b92b      	cbnz	r3, 8014336 <quorem+0x9e>
 801432a:	9b01      	ldr	r3, [sp, #4]
 801432c:	3b04      	subs	r3, #4
 801432e:	429d      	cmp	r5, r3
 8014330:	461a      	mov	r2, r3
 8014332:	d32e      	bcc.n	8014392 <quorem+0xfa>
 8014334:	613c      	str	r4, [r7, #16]
 8014336:	4638      	mov	r0, r7
 8014338:	f001 f846 	bl	80153c8 <__mcmp>
 801433c:	2800      	cmp	r0, #0
 801433e:	db24      	blt.n	801438a <quorem+0xf2>
 8014340:	3601      	adds	r6, #1
 8014342:	4628      	mov	r0, r5
 8014344:	f04f 0c00 	mov.w	ip, #0
 8014348:	f858 2b04 	ldr.w	r2, [r8], #4
 801434c:	f8d0 e000 	ldr.w	lr, [r0]
 8014350:	b293      	uxth	r3, r2
 8014352:	ebac 0303 	sub.w	r3, ip, r3
 8014356:	0c12      	lsrs	r2, r2, #16
 8014358:	fa13 f38e 	uxtah	r3, r3, lr
 801435c:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8014360:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8014364:	b29b      	uxth	r3, r3
 8014366:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 801436a:	45c1      	cmp	r9, r8
 801436c:	f840 3b04 	str.w	r3, [r0], #4
 8014370:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8014374:	d2e8      	bcs.n	8014348 <quorem+0xb0>
 8014376:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 801437a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 801437e:	b922      	cbnz	r2, 801438a <quorem+0xf2>
 8014380:	3b04      	subs	r3, #4
 8014382:	429d      	cmp	r5, r3
 8014384:	461a      	mov	r2, r3
 8014386:	d30a      	bcc.n	801439e <quorem+0x106>
 8014388:	613c      	str	r4, [r7, #16]
 801438a:	4630      	mov	r0, r6
 801438c:	b003      	add	sp, #12
 801438e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014392:	6812      	ldr	r2, [r2, #0]
 8014394:	3b04      	subs	r3, #4
 8014396:	2a00      	cmp	r2, #0
 8014398:	d1cc      	bne.n	8014334 <quorem+0x9c>
 801439a:	3c01      	subs	r4, #1
 801439c:	e7c7      	b.n	801432e <quorem+0x96>
 801439e:	6812      	ldr	r2, [r2, #0]
 80143a0:	3b04      	subs	r3, #4
 80143a2:	2a00      	cmp	r2, #0
 80143a4:	d1f0      	bne.n	8014388 <quorem+0xf0>
 80143a6:	3c01      	subs	r4, #1
 80143a8:	e7eb      	b.n	8014382 <quorem+0xea>
 80143aa:	2000      	movs	r0, #0
 80143ac:	e7ee      	b.n	801438c <quorem+0xf4>
	...

080143b0 <_dtoa_r>:
 80143b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80143b4:	ec59 8b10 	vmov	r8, r9, d0
 80143b8:	b095      	sub	sp, #84	; 0x54
 80143ba:	6a45      	ldr	r5, [r0, #36]	; 0x24
 80143bc:	9c1e      	ldr	r4, [sp, #120]	; 0x78
 80143be:	9107      	str	r1, [sp, #28]
 80143c0:	e9cd 8902 	strd	r8, r9, [sp, #8]
 80143c4:	4606      	mov	r6, r0
 80143c6:	9209      	str	r2, [sp, #36]	; 0x24
 80143c8:	9310      	str	r3, [sp, #64]	; 0x40
 80143ca:	b975      	cbnz	r5, 80143ea <_dtoa_r+0x3a>
 80143cc:	2010      	movs	r0, #16
 80143ce:	f000 fd75 	bl	8014ebc <malloc>
 80143d2:	4602      	mov	r2, r0
 80143d4:	6270      	str	r0, [r6, #36]	; 0x24
 80143d6:	b920      	cbnz	r0, 80143e2 <_dtoa_r+0x32>
 80143d8:	4bab      	ldr	r3, [pc, #684]	; (8014688 <_dtoa_r+0x2d8>)
 80143da:	21ea      	movs	r1, #234	; 0xea
 80143dc:	48ab      	ldr	r0, [pc, #684]	; (801468c <_dtoa_r+0x2dc>)
 80143de:	f001 fb19 	bl	8015a14 <__assert_func>
 80143e2:	e9c0 5501 	strd	r5, r5, [r0, #4]
 80143e6:	6005      	str	r5, [r0, #0]
 80143e8:	60c5      	str	r5, [r0, #12]
 80143ea:	6a73      	ldr	r3, [r6, #36]	; 0x24
 80143ec:	6819      	ldr	r1, [r3, #0]
 80143ee:	b151      	cbz	r1, 8014406 <_dtoa_r+0x56>
 80143f0:	685a      	ldr	r2, [r3, #4]
 80143f2:	604a      	str	r2, [r1, #4]
 80143f4:	2301      	movs	r3, #1
 80143f6:	4093      	lsls	r3, r2
 80143f8:	608b      	str	r3, [r1, #8]
 80143fa:	4630      	mov	r0, r6
 80143fc:	f000 fda6 	bl	8014f4c <_Bfree>
 8014400:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8014402:	2200      	movs	r2, #0
 8014404:	601a      	str	r2, [r3, #0]
 8014406:	f1b9 0300 	subs.w	r3, r9, #0
 801440a:	bfbb      	ittet	lt
 801440c:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8014410:	9303      	strlt	r3, [sp, #12]
 8014412:	2300      	movge	r3, #0
 8014414:	2201      	movlt	r2, #1
 8014416:	bfac      	ite	ge
 8014418:	6023      	strge	r3, [r4, #0]
 801441a:	6022      	strlt	r2, [r4, #0]
 801441c:	4b9c      	ldr	r3, [pc, #624]	; (8014690 <_dtoa_r+0x2e0>)
 801441e:	9c03      	ldr	r4, [sp, #12]
 8014420:	43a3      	bics	r3, r4
 8014422:	d11a      	bne.n	801445a <_dtoa_r+0xaa>
 8014424:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8014426:	f242 730f 	movw	r3, #9999	; 0x270f
 801442a:	6013      	str	r3, [r2, #0]
 801442c:	f3c4 0313 	ubfx	r3, r4, #0, #20
 8014430:	ea53 0308 	orrs.w	r3, r3, r8
 8014434:	f000 8512 	beq.w	8014e5c <_dtoa_r+0xaac>
 8014438:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 801443a:	b953      	cbnz	r3, 8014452 <_dtoa_r+0xa2>
 801443c:	4b95      	ldr	r3, [pc, #596]	; (8014694 <_dtoa_r+0x2e4>)
 801443e:	e01f      	b.n	8014480 <_dtoa_r+0xd0>
 8014440:	4b95      	ldr	r3, [pc, #596]	; (8014698 <_dtoa_r+0x2e8>)
 8014442:	9300      	str	r3, [sp, #0]
 8014444:	3308      	adds	r3, #8
 8014446:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 8014448:	6013      	str	r3, [r2, #0]
 801444a:	9800      	ldr	r0, [sp, #0]
 801444c:	b015      	add	sp, #84	; 0x54
 801444e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014452:	4b90      	ldr	r3, [pc, #576]	; (8014694 <_dtoa_r+0x2e4>)
 8014454:	9300      	str	r3, [sp, #0]
 8014456:	3303      	adds	r3, #3
 8014458:	e7f5      	b.n	8014446 <_dtoa_r+0x96>
 801445a:	ed9d 7b02 	vldr	d7, [sp, #8]
 801445e:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8014462:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014466:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
 801446a:	d10b      	bne.n	8014484 <_dtoa_r+0xd4>
 801446c:	9a10      	ldr	r2, [sp, #64]	; 0x40
 801446e:	2301      	movs	r3, #1
 8014470:	6013      	str	r3, [r2, #0]
 8014472:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8014474:	2b00      	cmp	r3, #0
 8014476:	f000 84ee 	beq.w	8014e56 <_dtoa_r+0xaa6>
 801447a:	4888      	ldr	r0, [pc, #544]	; (801469c <_dtoa_r+0x2ec>)
 801447c:	6018      	str	r0, [r3, #0]
 801447e:	1e43      	subs	r3, r0, #1
 8014480:	9300      	str	r3, [sp, #0]
 8014482:	e7e2      	b.n	801444a <_dtoa_r+0x9a>
 8014484:	a913      	add	r1, sp, #76	; 0x4c
 8014486:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 801448a:	aa12      	add	r2, sp, #72	; 0x48
 801448c:	4630      	mov	r0, r6
 801448e:	f001 f83f 	bl	8015510 <__d2b>
 8014492:	f3c4 510a 	ubfx	r1, r4, #20, #11
 8014496:	4605      	mov	r5, r0
 8014498:	9812      	ldr	r0, [sp, #72]	; 0x48
 801449a:	2900      	cmp	r1, #0
 801449c:	d047      	beq.n	801452e <_dtoa_r+0x17e>
 801449e:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 80144a0:	f3c4 0413 	ubfx	r4, r4, #0, #20
 80144a4:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 80144a8:	f044 537f 	orr.w	r3, r4, #1069547520	; 0x3fc00000
 80144ac:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 80144b0:	f2a1 31ff 	subw	r1, r1, #1023	; 0x3ff
 80144b4:	2400      	movs	r4, #0
 80144b6:	ec43 2b16 	vmov	d6, r2, r3
 80144ba:	eeb7 7b08 	vmov.f64	d7, #120	; 0x3fc00000  1.5
 80144be:	ed9f 5b6c 	vldr	d5, [pc, #432]	; 8014670 <_dtoa_r+0x2c0>
 80144c2:	ee36 7b47 	vsub.f64	d7, d6, d7
 80144c6:	ed9f 6b6c 	vldr	d6, [pc, #432]	; 8014678 <_dtoa_r+0x2c8>
 80144ca:	eea7 6b05 	vfma.f64	d6, d7, d5
 80144ce:	eeb0 7b46 	vmov.f64	d7, d6
 80144d2:	ee06 1a90 	vmov	s13, r1
 80144d6:	eeb8 5be6 	vcvt.f64.s32	d5, s13
 80144da:	ed9f 6b69 	vldr	d6, [pc, #420]	; 8014680 <_dtoa_r+0x2d0>
 80144de:	eea5 7b06 	vfma.f64	d7, d5, d6
 80144e2:	eefd 6bc7 	vcvt.s32.f64	s13, d7
 80144e6:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 80144ea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80144ee:	ee16 ba90 	vmov	fp, s13
 80144f2:	9411      	str	r4, [sp, #68]	; 0x44
 80144f4:	d508      	bpl.n	8014508 <_dtoa_r+0x158>
 80144f6:	eeb8 6be6 	vcvt.f64.s32	d6, s13
 80144fa:	eeb4 6b47 	vcmp.f64	d6, d7
 80144fe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014502:	bf18      	it	ne
 8014504:	f10b 3bff 	addne.w	fp, fp, #4294967295
 8014508:	f1bb 0f16 	cmp.w	fp, #22
 801450c:	d832      	bhi.n	8014574 <_dtoa_r+0x1c4>
 801450e:	4b64      	ldr	r3, [pc, #400]	; (80146a0 <_dtoa_r+0x2f0>)
 8014510:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8014514:	ed93 7b00 	vldr	d7, [r3]
 8014518:	ed9d 6b0a 	vldr	d6, [sp, #40]	; 0x28
 801451c:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8014520:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014524:	d501      	bpl.n	801452a <_dtoa_r+0x17a>
 8014526:	f10b 3bff 	add.w	fp, fp, #4294967295
 801452a:	2300      	movs	r3, #0
 801452c:	e023      	b.n	8014576 <_dtoa_r+0x1c6>
 801452e:	9913      	ldr	r1, [sp, #76]	; 0x4c
 8014530:	4401      	add	r1, r0
 8014532:	f201 4332 	addw	r3, r1, #1074	; 0x432
 8014536:	2b20      	cmp	r3, #32
 8014538:	bfc3      	ittte	gt
 801453a:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 801453e:	fa04 f303 	lslgt.w	r3, r4, r3
 8014542:	f201 4412 	addwgt	r4, r1, #1042	; 0x412
 8014546:	f1c3 0320 	rsble	r3, r3, #32
 801454a:	bfc6      	itte	gt
 801454c:	fa28 f804 	lsrgt.w	r8, r8, r4
 8014550:	ea43 0308 	orrgt.w	r3, r3, r8
 8014554:	fa08 f303 	lslle.w	r3, r8, r3
 8014558:	ee07 3a90 	vmov	s15, r3
 801455c:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 8014560:	3901      	subs	r1, #1
 8014562:	ed8d 7b00 	vstr	d7, [sp]
 8014566:	9c01      	ldr	r4, [sp, #4]
 8014568:	e9dd 2300 	ldrd	r2, r3, [sp]
 801456c:	f1a4 73f8 	sub.w	r3, r4, #32505856	; 0x1f00000
 8014570:	2401      	movs	r4, #1
 8014572:	e7a0      	b.n	80144b6 <_dtoa_r+0x106>
 8014574:	2301      	movs	r3, #1
 8014576:	930f      	str	r3, [sp, #60]	; 0x3c
 8014578:	1a43      	subs	r3, r0, r1
 801457a:	1e5a      	subs	r2, r3, #1
 801457c:	bf45      	ittet	mi
 801457e:	f1c3 0301 	rsbmi	r3, r3, #1
 8014582:	9305      	strmi	r3, [sp, #20]
 8014584:	2300      	movpl	r3, #0
 8014586:	2300      	movmi	r3, #0
 8014588:	9206      	str	r2, [sp, #24]
 801458a:	bf54      	ite	pl
 801458c:	9305      	strpl	r3, [sp, #20]
 801458e:	9306      	strmi	r3, [sp, #24]
 8014590:	f1bb 0f00 	cmp.w	fp, #0
 8014594:	db18      	blt.n	80145c8 <_dtoa_r+0x218>
 8014596:	9b06      	ldr	r3, [sp, #24]
 8014598:	f8cd b038 	str.w	fp, [sp, #56]	; 0x38
 801459c:	445b      	add	r3, fp
 801459e:	9306      	str	r3, [sp, #24]
 80145a0:	2300      	movs	r3, #0
 80145a2:	9a07      	ldr	r2, [sp, #28]
 80145a4:	2a09      	cmp	r2, #9
 80145a6:	d849      	bhi.n	801463c <_dtoa_r+0x28c>
 80145a8:	2a05      	cmp	r2, #5
 80145aa:	bfc4      	itt	gt
 80145ac:	3a04      	subgt	r2, #4
 80145ae:	9207      	strgt	r2, [sp, #28]
 80145b0:	9a07      	ldr	r2, [sp, #28]
 80145b2:	f1a2 0202 	sub.w	r2, r2, #2
 80145b6:	bfcc      	ite	gt
 80145b8:	2400      	movgt	r4, #0
 80145ba:	2401      	movle	r4, #1
 80145bc:	2a03      	cmp	r2, #3
 80145be:	d848      	bhi.n	8014652 <_dtoa_r+0x2a2>
 80145c0:	e8df f002 	tbb	[pc, r2]
 80145c4:	3a2c2e0b 	.word	0x3a2c2e0b
 80145c8:	9b05      	ldr	r3, [sp, #20]
 80145ca:	2200      	movs	r2, #0
 80145cc:	eba3 030b 	sub.w	r3, r3, fp
 80145d0:	9305      	str	r3, [sp, #20]
 80145d2:	920e      	str	r2, [sp, #56]	; 0x38
 80145d4:	f1cb 0300 	rsb	r3, fp, #0
 80145d8:	e7e3      	b.n	80145a2 <_dtoa_r+0x1f2>
 80145da:	2200      	movs	r2, #0
 80145dc:	9208      	str	r2, [sp, #32]
 80145de:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80145e0:	2a00      	cmp	r2, #0
 80145e2:	dc39      	bgt.n	8014658 <_dtoa_r+0x2a8>
 80145e4:	f04f 0a01 	mov.w	sl, #1
 80145e8:	46d1      	mov	r9, sl
 80145ea:	4652      	mov	r2, sl
 80145ec:	f8cd a024 	str.w	sl, [sp, #36]	; 0x24
 80145f0:	6a77      	ldr	r7, [r6, #36]	; 0x24
 80145f2:	2100      	movs	r1, #0
 80145f4:	6079      	str	r1, [r7, #4]
 80145f6:	2004      	movs	r0, #4
 80145f8:	f100 0c14 	add.w	ip, r0, #20
 80145fc:	4594      	cmp	ip, r2
 80145fe:	6879      	ldr	r1, [r7, #4]
 8014600:	d92f      	bls.n	8014662 <_dtoa_r+0x2b2>
 8014602:	4630      	mov	r0, r6
 8014604:	930c      	str	r3, [sp, #48]	; 0x30
 8014606:	f000 fc61 	bl	8014ecc <_Balloc>
 801460a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801460c:	9000      	str	r0, [sp, #0]
 801460e:	4602      	mov	r2, r0
 8014610:	2800      	cmp	r0, #0
 8014612:	d149      	bne.n	80146a8 <_dtoa_r+0x2f8>
 8014614:	4b23      	ldr	r3, [pc, #140]	; (80146a4 <_dtoa_r+0x2f4>)
 8014616:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 801461a:	e6df      	b.n	80143dc <_dtoa_r+0x2c>
 801461c:	2201      	movs	r2, #1
 801461e:	e7dd      	b.n	80145dc <_dtoa_r+0x22c>
 8014620:	2200      	movs	r2, #0
 8014622:	9208      	str	r2, [sp, #32]
 8014624:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8014626:	eb0b 0a02 	add.w	sl, fp, r2
 801462a:	f10a 0901 	add.w	r9, sl, #1
 801462e:	464a      	mov	r2, r9
 8014630:	2a01      	cmp	r2, #1
 8014632:	bfb8      	it	lt
 8014634:	2201      	movlt	r2, #1
 8014636:	e7db      	b.n	80145f0 <_dtoa_r+0x240>
 8014638:	2201      	movs	r2, #1
 801463a:	e7f2      	b.n	8014622 <_dtoa_r+0x272>
 801463c:	2401      	movs	r4, #1
 801463e:	2200      	movs	r2, #0
 8014640:	e9cd 2407 	strd	r2, r4, [sp, #28]
 8014644:	f04f 3aff 	mov.w	sl, #4294967295
 8014648:	2100      	movs	r1, #0
 801464a:	46d1      	mov	r9, sl
 801464c:	2212      	movs	r2, #18
 801464e:	9109      	str	r1, [sp, #36]	; 0x24
 8014650:	e7ce      	b.n	80145f0 <_dtoa_r+0x240>
 8014652:	2201      	movs	r2, #1
 8014654:	9208      	str	r2, [sp, #32]
 8014656:	e7f5      	b.n	8014644 <_dtoa_r+0x294>
 8014658:	f8dd a024 	ldr.w	sl, [sp, #36]	; 0x24
 801465c:	46d1      	mov	r9, sl
 801465e:	4652      	mov	r2, sl
 8014660:	e7c6      	b.n	80145f0 <_dtoa_r+0x240>
 8014662:	3101      	adds	r1, #1
 8014664:	6079      	str	r1, [r7, #4]
 8014666:	0040      	lsls	r0, r0, #1
 8014668:	e7c6      	b.n	80145f8 <_dtoa_r+0x248>
 801466a:	bf00      	nop
 801466c:	f3af 8000 	nop.w
 8014670:	636f4361 	.word	0x636f4361
 8014674:	3fd287a7 	.word	0x3fd287a7
 8014678:	8b60c8b3 	.word	0x8b60c8b3
 801467c:	3fc68a28 	.word	0x3fc68a28
 8014680:	509f79fb 	.word	0x509f79fb
 8014684:	3fd34413 	.word	0x3fd34413
 8014688:	08016fad 	.word	0x08016fad
 801468c:	08016fc4 	.word	0x08016fc4
 8014690:	7ff00000 	.word	0x7ff00000
 8014694:	08016fa9 	.word	0x08016fa9
 8014698:	08016fa0 	.word	0x08016fa0
 801469c:	08016f7d 	.word	0x08016f7d
 80146a0:	080170c0 	.word	0x080170c0
 80146a4:	08017023 	.word	0x08017023
 80146a8:	6a72      	ldr	r2, [r6, #36]	; 0x24
 80146aa:	9900      	ldr	r1, [sp, #0]
 80146ac:	6011      	str	r1, [r2, #0]
 80146ae:	f1b9 0f0e 	cmp.w	r9, #14
 80146b2:	d872      	bhi.n	801479a <_dtoa_r+0x3ea>
 80146b4:	2c00      	cmp	r4, #0
 80146b6:	d070      	beq.n	801479a <_dtoa_r+0x3ea>
 80146b8:	f1bb 0f00 	cmp.w	fp, #0
 80146bc:	f340 80a6 	ble.w	801480c <_dtoa_r+0x45c>
 80146c0:	49ca      	ldr	r1, [pc, #808]	; (80149ec <_dtoa_r+0x63c>)
 80146c2:	f00b 020f 	and.w	r2, fp, #15
 80146c6:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
 80146ca:	f41b 7f80 	tst.w	fp, #256	; 0x100
 80146ce:	ed92 7b00 	vldr	d7, [r2]
 80146d2:	ea4f 112b 	mov.w	r1, fp, asr #4
 80146d6:	f000 808d 	beq.w	80147f4 <_dtoa_r+0x444>
 80146da:	4ac5      	ldr	r2, [pc, #788]	; (80149f0 <_dtoa_r+0x640>)
 80146dc:	ed9d 5b0a 	vldr	d5, [sp, #40]	; 0x28
 80146e0:	ed92 6b08 	vldr	d6, [r2, #32]
 80146e4:	ee85 6b06 	vdiv.f64	d6, d5, d6
 80146e8:	ed8d 6b02 	vstr	d6, [sp, #8]
 80146ec:	f001 010f 	and.w	r1, r1, #15
 80146f0:	2203      	movs	r2, #3
 80146f2:	48bf      	ldr	r0, [pc, #764]	; (80149f0 <_dtoa_r+0x640>)
 80146f4:	2900      	cmp	r1, #0
 80146f6:	d17f      	bne.n	80147f8 <_dtoa_r+0x448>
 80146f8:	ed9d 6b02 	vldr	d6, [sp, #8]
 80146fc:	ee86 7b07 	vdiv.f64	d7, d6, d7
 8014700:	ed8d 7b02 	vstr	d7, [sp, #8]
 8014704:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8014706:	2900      	cmp	r1, #0
 8014708:	f000 80b2 	beq.w	8014870 <_dtoa_r+0x4c0>
 801470c:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 8014710:	ed9d 7b02 	vldr	d7, [sp, #8]
 8014714:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8014718:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801471c:	f140 80a8 	bpl.w	8014870 <_dtoa_r+0x4c0>
 8014720:	f1b9 0f00 	cmp.w	r9, #0
 8014724:	f000 80a4 	beq.w	8014870 <_dtoa_r+0x4c0>
 8014728:	f1ba 0f00 	cmp.w	sl, #0
 801472c:	dd31      	ble.n	8014792 <_dtoa_r+0x3e2>
 801472e:	eeb2 6b04 	vmov.f64	d6, #36	; 0x41200000  10.0
 8014732:	ee27 7b06 	vmul.f64	d7, d7, d6
 8014736:	ed8d 7b02 	vstr	d7, [sp, #8]
 801473a:	f10b 37ff 	add.w	r7, fp, #4294967295
 801473e:	3201      	adds	r2, #1
 8014740:	4650      	mov	r0, sl
 8014742:	ed9d 6b02 	vldr	d6, [sp, #8]
 8014746:	eeb1 5b0c 	vmov.f64	d5, #28	; 0x40e00000  7.0
 801474a:	ee07 2a90 	vmov	s15, r2
 801474e:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8014752:	eea7 5b06 	vfma.f64	d5, d7, d6
 8014756:	ed8d 5b02 	vstr	d5, [sp, #8]
 801475a:	9c03      	ldr	r4, [sp, #12]
 801475c:	e9dd 1202 	ldrd	r1, r2, [sp, #8]
 8014760:	f1a4 7250 	sub.w	r2, r4, #54525952	; 0x3400000
 8014764:	2800      	cmp	r0, #0
 8014766:	f040 8086 	bne.w	8014876 <_dtoa_r+0x4c6>
 801476a:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
 801476e:	ee36 6b47 	vsub.f64	d6, d6, d7
 8014772:	ec42 1b17 	vmov	d7, r1, r2
 8014776:	eeb4 6bc7 	vcmpe.f64	d6, d7
 801477a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801477e:	f300 8272 	bgt.w	8014c66 <_dtoa_r+0x8b6>
 8014782:	eeb1 7b47 	vneg.f64	d7, d7
 8014786:	eeb4 6bc7 	vcmpe.f64	d6, d7
 801478a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801478e:	f100 8267 	bmi.w	8014c60 <_dtoa_r+0x8b0>
 8014792:	e9dd 120a 	ldrd	r1, r2, [sp, #40]	; 0x28
 8014796:	e9cd 1202 	strd	r1, r2, [sp, #8]
 801479a:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 801479c:	2a00      	cmp	r2, #0
 801479e:	f2c0 8129 	blt.w	80149f4 <_dtoa_r+0x644>
 80147a2:	f1bb 0f0e 	cmp.w	fp, #14
 80147a6:	f300 8125 	bgt.w	80149f4 <_dtoa_r+0x644>
 80147aa:	4b90      	ldr	r3, [pc, #576]	; (80149ec <_dtoa_r+0x63c>)
 80147ac:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 80147b0:	ed93 6b00 	vldr	d6, [r3]
 80147b4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80147b6:	2b00      	cmp	r3, #0
 80147b8:	f280 80c3 	bge.w	8014942 <_dtoa_r+0x592>
 80147bc:	f1b9 0f00 	cmp.w	r9, #0
 80147c0:	f300 80bf 	bgt.w	8014942 <_dtoa_r+0x592>
 80147c4:	f040 824c 	bne.w	8014c60 <_dtoa_r+0x8b0>
 80147c8:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
 80147cc:	ee26 6b07 	vmul.f64	d6, d6, d7
 80147d0:	ed9d 7b02 	vldr	d7, [sp, #8]
 80147d4:	eeb4 6bc7 	vcmpe.f64	d6, d7
 80147d8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80147dc:	464c      	mov	r4, r9
 80147de:	464f      	mov	r7, r9
 80147e0:	f280 8222 	bge.w	8014c28 <_dtoa_r+0x878>
 80147e4:	f8dd 8000 	ldr.w	r8, [sp]
 80147e8:	2331      	movs	r3, #49	; 0x31
 80147ea:	f808 3b01 	strb.w	r3, [r8], #1
 80147ee:	f10b 0b01 	add.w	fp, fp, #1
 80147f2:	e21e      	b.n	8014c32 <_dtoa_r+0x882>
 80147f4:	2202      	movs	r2, #2
 80147f6:	e77c      	b.n	80146f2 <_dtoa_r+0x342>
 80147f8:	07cc      	lsls	r4, r1, #31
 80147fa:	d504      	bpl.n	8014806 <_dtoa_r+0x456>
 80147fc:	ed90 6b00 	vldr	d6, [r0]
 8014800:	3201      	adds	r2, #1
 8014802:	ee27 7b06 	vmul.f64	d7, d7, d6
 8014806:	1049      	asrs	r1, r1, #1
 8014808:	3008      	adds	r0, #8
 801480a:	e773      	b.n	80146f4 <_dtoa_r+0x344>
 801480c:	d02e      	beq.n	801486c <_dtoa_r+0x4bc>
 801480e:	f1cb 0100 	rsb	r1, fp, #0
 8014812:	4a76      	ldr	r2, [pc, #472]	; (80149ec <_dtoa_r+0x63c>)
 8014814:	f001 000f 	and.w	r0, r1, #15
 8014818:	eb02 02c0 	add.w	r2, r2, r0, lsl #3
 801481c:	ed92 7b00 	vldr	d7, [r2]
 8014820:	ed9d 6b0a 	vldr	d6, [sp, #40]	; 0x28
 8014824:	ee26 7b07 	vmul.f64	d7, d6, d7
 8014828:	ed8d 7b0c 	vstr	d7, [sp, #48]	; 0x30
 801482c:	e9dd 780c 	ldrd	r7, r8, [sp, #48]	; 0x30
 8014830:	e9cd 7802 	strd	r7, r8, [sp, #8]
 8014834:	486e      	ldr	r0, [pc, #440]	; (80149f0 <_dtoa_r+0x640>)
 8014836:	1109      	asrs	r1, r1, #4
 8014838:	2400      	movs	r4, #0
 801483a:	2202      	movs	r2, #2
 801483c:	b939      	cbnz	r1, 801484e <_dtoa_r+0x49e>
 801483e:	2c00      	cmp	r4, #0
 8014840:	f43f af60 	beq.w	8014704 <_dtoa_r+0x354>
 8014844:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8014848:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801484c:	e75a      	b.n	8014704 <_dtoa_r+0x354>
 801484e:	07cf      	lsls	r7, r1, #31
 8014850:	d509      	bpl.n	8014866 <_dtoa_r+0x4b6>
 8014852:	ed9d 6b0c 	vldr	d6, [sp, #48]	; 0x30
 8014856:	ed90 7b00 	vldr	d7, [r0]
 801485a:	ee26 7b07 	vmul.f64	d7, d6, d7
 801485e:	ed8d 7b0c 	vstr	d7, [sp, #48]	; 0x30
 8014862:	3201      	adds	r2, #1
 8014864:	2401      	movs	r4, #1
 8014866:	1049      	asrs	r1, r1, #1
 8014868:	3008      	adds	r0, #8
 801486a:	e7e7      	b.n	801483c <_dtoa_r+0x48c>
 801486c:	2202      	movs	r2, #2
 801486e:	e749      	b.n	8014704 <_dtoa_r+0x354>
 8014870:	465f      	mov	r7, fp
 8014872:	4648      	mov	r0, r9
 8014874:	e765      	b.n	8014742 <_dtoa_r+0x392>
 8014876:	ec42 1b17 	vmov	d7, r1, r2
 801487a:	4a5c      	ldr	r2, [pc, #368]	; (80149ec <_dtoa_r+0x63c>)
 801487c:	eb02 02c0 	add.w	r2, r2, r0, lsl #3
 8014880:	ed12 4b02 	vldr	d4, [r2, #-8]
 8014884:	9a00      	ldr	r2, [sp, #0]
 8014886:	1814      	adds	r4, r2, r0
 8014888:	9a08      	ldr	r2, [sp, #32]
 801488a:	b352      	cbz	r2, 80148e2 <_dtoa_r+0x532>
 801488c:	eeb6 3b00 	vmov.f64	d3, #96	; 0x3f000000  0.5
 8014890:	eeb7 2b00 	vmov.f64	d2, #112	; 0x3f800000  1.0
 8014894:	f8dd 8000 	ldr.w	r8, [sp]
 8014898:	ee83 5b04 	vdiv.f64	d5, d3, d4
 801489c:	eeb2 3b04 	vmov.f64	d3, #36	; 0x41200000  10.0
 80148a0:	ee35 7b47 	vsub.f64	d7, d5, d7
 80148a4:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 80148a8:	ee14 2a90 	vmov	r2, s9
 80148ac:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 80148b0:	3230      	adds	r2, #48	; 0x30
 80148b2:	ee36 6b45 	vsub.f64	d6, d6, d5
 80148b6:	eeb4 6bc7 	vcmpe.f64	d6, d7
 80148ba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80148be:	f808 2b01 	strb.w	r2, [r8], #1
 80148c2:	d439      	bmi.n	8014938 <_dtoa_r+0x588>
 80148c4:	ee32 5b46 	vsub.f64	d5, d2, d6
 80148c8:	eeb4 5bc7 	vcmpe.f64	d5, d7
 80148cc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80148d0:	d472      	bmi.n	80149b8 <_dtoa_r+0x608>
 80148d2:	45a0      	cmp	r8, r4
 80148d4:	f43f af5d 	beq.w	8014792 <_dtoa_r+0x3e2>
 80148d8:	ee27 7b03 	vmul.f64	d7, d7, d3
 80148dc:	ee26 6b03 	vmul.f64	d6, d6, d3
 80148e0:	e7e0      	b.n	80148a4 <_dtoa_r+0x4f4>
 80148e2:	f8dd 8000 	ldr.w	r8, [sp]
 80148e6:	ee27 7b04 	vmul.f64	d7, d7, d4
 80148ea:	4621      	mov	r1, r4
 80148ec:	eeb2 3b04 	vmov.f64	d3, #36	; 0x41200000  10.0
 80148f0:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 80148f4:	ee14 2a90 	vmov	r2, s9
 80148f8:	3230      	adds	r2, #48	; 0x30
 80148fa:	f808 2b01 	strb.w	r2, [r8], #1
 80148fe:	45a0      	cmp	r8, r4
 8014900:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 8014904:	ee36 6b45 	vsub.f64	d6, d6, d5
 8014908:	d118      	bne.n	801493c <_dtoa_r+0x58c>
 801490a:	eeb6 5b00 	vmov.f64	d5, #96	; 0x3f000000  0.5
 801490e:	ee37 4b05 	vadd.f64	d4, d7, d5
 8014912:	eeb4 6bc4 	vcmpe.f64	d6, d4
 8014916:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801491a:	dc4d      	bgt.n	80149b8 <_dtoa_r+0x608>
 801491c:	ee35 7b47 	vsub.f64	d7, d5, d7
 8014920:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8014924:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014928:	f57f af33 	bpl.w	8014792 <_dtoa_r+0x3e2>
 801492c:	4688      	mov	r8, r1
 801492e:	3901      	subs	r1, #1
 8014930:	f818 3c01 	ldrb.w	r3, [r8, #-1]
 8014934:	2b30      	cmp	r3, #48	; 0x30
 8014936:	d0f9      	beq.n	801492c <_dtoa_r+0x57c>
 8014938:	46bb      	mov	fp, r7
 801493a:	e02a      	b.n	8014992 <_dtoa_r+0x5e2>
 801493c:	ee26 6b03 	vmul.f64	d6, d6, d3
 8014940:	e7d6      	b.n	80148f0 <_dtoa_r+0x540>
 8014942:	ed9d 7b02 	vldr	d7, [sp, #8]
 8014946:	eeb2 4b04 	vmov.f64	d4, #36	; 0x41200000  10.0
 801494a:	f8dd 8000 	ldr.w	r8, [sp]
 801494e:	ee87 5b06 	vdiv.f64	d5, d7, d6
 8014952:	eebd 5bc5 	vcvt.s32.f64	s10, d5
 8014956:	ee15 3a10 	vmov	r3, s10
 801495a:	3330      	adds	r3, #48	; 0x30
 801495c:	f808 3b01 	strb.w	r3, [r8], #1
 8014960:	9b00      	ldr	r3, [sp, #0]
 8014962:	eba8 0303 	sub.w	r3, r8, r3
 8014966:	4599      	cmp	r9, r3
 8014968:	eeb8 3bc5 	vcvt.f64.s32	d3, s10
 801496c:	eea3 7b46 	vfms.f64	d7, d3, d6
 8014970:	d133      	bne.n	80149da <_dtoa_r+0x62a>
 8014972:	ee37 7b07 	vadd.f64	d7, d7, d7
 8014976:	eeb4 7bc6 	vcmpe.f64	d7, d6
 801497a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801497e:	dc1a      	bgt.n	80149b6 <_dtoa_r+0x606>
 8014980:	eeb4 7b46 	vcmp.f64	d7, d6
 8014984:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014988:	d103      	bne.n	8014992 <_dtoa_r+0x5e2>
 801498a:	ee15 3a10 	vmov	r3, s10
 801498e:	07d9      	lsls	r1, r3, #31
 8014990:	d411      	bmi.n	80149b6 <_dtoa_r+0x606>
 8014992:	4629      	mov	r1, r5
 8014994:	4630      	mov	r0, r6
 8014996:	f000 fad9 	bl	8014f4c <_Bfree>
 801499a:	2300      	movs	r3, #0
 801499c:	9a10      	ldr	r2, [sp, #64]	; 0x40
 801499e:	f888 3000 	strb.w	r3, [r8]
 80149a2:	f10b 0301 	add.w	r3, fp, #1
 80149a6:	6013      	str	r3, [r2, #0]
 80149a8:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 80149aa:	2b00      	cmp	r3, #0
 80149ac:	f43f ad4d 	beq.w	801444a <_dtoa_r+0x9a>
 80149b0:	f8c3 8000 	str.w	r8, [r3]
 80149b4:	e549      	b.n	801444a <_dtoa_r+0x9a>
 80149b6:	465f      	mov	r7, fp
 80149b8:	4643      	mov	r3, r8
 80149ba:	4698      	mov	r8, r3
 80149bc:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80149c0:	2a39      	cmp	r2, #57	; 0x39
 80149c2:	d106      	bne.n	80149d2 <_dtoa_r+0x622>
 80149c4:	9a00      	ldr	r2, [sp, #0]
 80149c6:	429a      	cmp	r2, r3
 80149c8:	d1f7      	bne.n	80149ba <_dtoa_r+0x60a>
 80149ca:	9900      	ldr	r1, [sp, #0]
 80149cc:	2230      	movs	r2, #48	; 0x30
 80149ce:	3701      	adds	r7, #1
 80149d0:	700a      	strb	r2, [r1, #0]
 80149d2:	781a      	ldrb	r2, [r3, #0]
 80149d4:	3201      	adds	r2, #1
 80149d6:	701a      	strb	r2, [r3, #0]
 80149d8:	e7ae      	b.n	8014938 <_dtoa_r+0x588>
 80149da:	ee27 7b04 	vmul.f64	d7, d7, d4
 80149de:	eeb5 7b40 	vcmp.f64	d7, #0.0
 80149e2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80149e6:	d1b2      	bne.n	801494e <_dtoa_r+0x59e>
 80149e8:	e7d3      	b.n	8014992 <_dtoa_r+0x5e2>
 80149ea:	bf00      	nop
 80149ec:	080170c0 	.word	0x080170c0
 80149f0:	08017098 	.word	0x08017098
 80149f4:	9908      	ldr	r1, [sp, #32]
 80149f6:	2900      	cmp	r1, #0
 80149f8:	f000 80d1 	beq.w	8014b9e <_dtoa_r+0x7ee>
 80149fc:	9907      	ldr	r1, [sp, #28]
 80149fe:	2901      	cmp	r1, #1
 8014a00:	f300 80b4 	bgt.w	8014b6c <_dtoa_r+0x7bc>
 8014a04:	9911      	ldr	r1, [sp, #68]	; 0x44
 8014a06:	2900      	cmp	r1, #0
 8014a08:	f000 80ac 	beq.w	8014b64 <_dtoa_r+0x7b4>
 8014a0c:	f202 4233 	addw	r2, r2, #1075	; 0x433
 8014a10:	f8dd 8014 	ldr.w	r8, [sp, #20]
 8014a14:	461c      	mov	r4, r3
 8014a16:	930a      	str	r3, [sp, #40]	; 0x28
 8014a18:	9b05      	ldr	r3, [sp, #20]
 8014a1a:	4413      	add	r3, r2
 8014a1c:	9305      	str	r3, [sp, #20]
 8014a1e:	9b06      	ldr	r3, [sp, #24]
 8014a20:	2101      	movs	r1, #1
 8014a22:	4413      	add	r3, r2
 8014a24:	4630      	mov	r0, r6
 8014a26:	9306      	str	r3, [sp, #24]
 8014a28:	f000 fb4c 	bl	80150c4 <__i2b>
 8014a2c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8014a2e:	4607      	mov	r7, r0
 8014a30:	f1b8 0f00 	cmp.w	r8, #0
 8014a34:	dd0d      	ble.n	8014a52 <_dtoa_r+0x6a2>
 8014a36:	9a06      	ldr	r2, [sp, #24]
 8014a38:	2a00      	cmp	r2, #0
 8014a3a:	dd0a      	ble.n	8014a52 <_dtoa_r+0x6a2>
 8014a3c:	4542      	cmp	r2, r8
 8014a3e:	9905      	ldr	r1, [sp, #20]
 8014a40:	bfa8      	it	ge
 8014a42:	4642      	movge	r2, r8
 8014a44:	1a89      	subs	r1, r1, r2
 8014a46:	9105      	str	r1, [sp, #20]
 8014a48:	9906      	ldr	r1, [sp, #24]
 8014a4a:	eba8 0802 	sub.w	r8, r8, r2
 8014a4e:	1a8a      	subs	r2, r1, r2
 8014a50:	9206      	str	r2, [sp, #24]
 8014a52:	b303      	cbz	r3, 8014a96 <_dtoa_r+0x6e6>
 8014a54:	9a08      	ldr	r2, [sp, #32]
 8014a56:	2a00      	cmp	r2, #0
 8014a58:	f000 80a6 	beq.w	8014ba8 <_dtoa_r+0x7f8>
 8014a5c:	2c00      	cmp	r4, #0
 8014a5e:	dd13      	ble.n	8014a88 <_dtoa_r+0x6d8>
 8014a60:	4639      	mov	r1, r7
 8014a62:	4622      	mov	r2, r4
 8014a64:	4630      	mov	r0, r6
 8014a66:	930c      	str	r3, [sp, #48]	; 0x30
 8014a68:	f000 fbe8 	bl	801523c <__pow5mult>
 8014a6c:	462a      	mov	r2, r5
 8014a6e:	4601      	mov	r1, r0
 8014a70:	4607      	mov	r7, r0
 8014a72:	4630      	mov	r0, r6
 8014a74:	f000 fb3c 	bl	80150f0 <__multiply>
 8014a78:	4629      	mov	r1, r5
 8014a7a:	900a      	str	r0, [sp, #40]	; 0x28
 8014a7c:	4630      	mov	r0, r6
 8014a7e:	f000 fa65 	bl	8014f4c <_Bfree>
 8014a82:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8014a84:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8014a86:	4615      	mov	r5, r2
 8014a88:	1b1a      	subs	r2, r3, r4
 8014a8a:	d004      	beq.n	8014a96 <_dtoa_r+0x6e6>
 8014a8c:	4629      	mov	r1, r5
 8014a8e:	4630      	mov	r0, r6
 8014a90:	f000 fbd4 	bl	801523c <__pow5mult>
 8014a94:	4605      	mov	r5, r0
 8014a96:	2101      	movs	r1, #1
 8014a98:	4630      	mov	r0, r6
 8014a9a:	f000 fb13 	bl	80150c4 <__i2b>
 8014a9e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8014aa0:	2b00      	cmp	r3, #0
 8014aa2:	4604      	mov	r4, r0
 8014aa4:	f340 8082 	ble.w	8014bac <_dtoa_r+0x7fc>
 8014aa8:	461a      	mov	r2, r3
 8014aaa:	4601      	mov	r1, r0
 8014aac:	4630      	mov	r0, r6
 8014aae:	f000 fbc5 	bl	801523c <__pow5mult>
 8014ab2:	9b07      	ldr	r3, [sp, #28]
 8014ab4:	2b01      	cmp	r3, #1
 8014ab6:	4604      	mov	r4, r0
 8014ab8:	dd7b      	ble.n	8014bb2 <_dtoa_r+0x802>
 8014aba:	2300      	movs	r3, #0
 8014abc:	930a      	str	r3, [sp, #40]	; 0x28
 8014abe:	6922      	ldr	r2, [r4, #16]
 8014ac0:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 8014ac4:	6910      	ldr	r0, [r2, #16]
 8014ac6:	f000 faad 	bl	8015024 <__hi0bits>
 8014aca:	f1c0 0020 	rsb	r0, r0, #32
 8014ace:	9b06      	ldr	r3, [sp, #24]
 8014ad0:	4418      	add	r0, r3
 8014ad2:	f010 001f 	ands.w	r0, r0, #31
 8014ad6:	f000 808d 	beq.w	8014bf4 <_dtoa_r+0x844>
 8014ada:	f1c0 0220 	rsb	r2, r0, #32
 8014ade:	2a04      	cmp	r2, #4
 8014ae0:	f340 8086 	ble.w	8014bf0 <_dtoa_r+0x840>
 8014ae4:	f1c0 001c 	rsb	r0, r0, #28
 8014ae8:	9b05      	ldr	r3, [sp, #20]
 8014aea:	4403      	add	r3, r0
 8014aec:	9305      	str	r3, [sp, #20]
 8014aee:	9b06      	ldr	r3, [sp, #24]
 8014af0:	4403      	add	r3, r0
 8014af2:	4480      	add	r8, r0
 8014af4:	9306      	str	r3, [sp, #24]
 8014af6:	9b05      	ldr	r3, [sp, #20]
 8014af8:	2b00      	cmp	r3, #0
 8014afa:	dd05      	ble.n	8014b08 <_dtoa_r+0x758>
 8014afc:	4629      	mov	r1, r5
 8014afe:	461a      	mov	r2, r3
 8014b00:	4630      	mov	r0, r6
 8014b02:	f000 fbf5 	bl	80152f0 <__lshift>
 8014b06:	4605      	mov	r5, r0
 8014b08:	9b06      	ldr	r3, [sp, #24]
 8014b0a:	2b00      	cmp	r3, #0
 8014b0c:	dd05      	ble.n	8014b1a <_dtoa_r+0x76a>
 8014b0e:	4621      	mov	r1, r4
 8014b10:	461a      	mov	r2, r3
 8014b12:	4630      	mov	r0, r6
 8014b14:	f000 fbec 	bl	80152f0 <__lshift>
 8014b18:	4604      	mov	r4, r0
 8014b1a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8014b1c:	2b00      	cmp	r3, #0
 8014b1e:	d06b      	beq.n	8014bf8 <_dtoa_r+0x848>
 8014b20:	4621      	mov	r1, r4
 8014b22:	4628      	mov	r0, r5
 8014b24:	f000 fc50 	bl	80153c8 <__mcmp>
 8014b28:	2800      	cmp	r0, #0
 8014b2a:	da65      	bge.n	8014bf8 <_dtoa_r+0x848>
 8014b2c:	2300      	movs	r3, #0
 8014b2e:	4629      	mov	r1, r5
 8014b30:	220a      	movs	r2, #10
 8014b32:	4630      	mov	r0, r6
 8014b34:	f000 fa2c 	bl	8014f90 <__multadd>
 8014b38:	9b08      	ldr	r3, [sp, #32]
 8014b3a:	f10b 3bff 	add.w	fp, fp, #4294967295
 8014b3e:	4605      	mov	r5, r0
 8014b40:	2b00      	cmp	r3, #0
 8014b42:	f000 8192 	beq.w	8014e6a <_dtoa_r+0xaba>
 8014b46:	4639      	mov	r1, r7
 8014b48:	2300      	movs	r3, #0
 8014b4a:	220a      	movs	r2, #10
 8014b4c:	4630      	mov	r0, r6
 8014b4e:	f000 fa1f 	bl	8014f90 <__multadd>
 8014b52:	f1ba 0f00 	cmp.w	sl, #0
 8014b56:	4607      	mov	r7, r0
 8014b58:	f300 808e 	bgt.w	8014c78 <_dtoa_r+0x8c8>
 8014b5c:	9b07      	ldr	r3, [sp, #28]
 8014b5e:	2b02      	cmp	r3, #2
 8014b60:	dc51      	bgt.n	8014c06 <_dtoa_r+0x856>
 8014b62:	e089      	b.n	8014c78 <_dtoa_r+0x8c8>
 8014b64:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8014b66:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 8014b6a:	e751      	b.n	8014a10 <_dtoa_r+0x660>
 8014b6c:	f109 34ff 	add.w	r4, r9, #4294967295
 8014b70:	42a3      	cmp	r3, r4
 8014b72:	bfbf      	itttt	lt
 8014b74:	9a0e      	ldrlt	r2, [sp, #56]	; 0x38
 8014b76:	1ae3      	sublt	r3, r4, r3
 8014b78:	18d2      	addlt	r2, r2, r3
 8014b7a:	4613      	movlt	r3, r2
 8014b7c:	bfb7      	itett	lt
 8014b7e:	930e      	strlt	r3, [sp, #56]	; 0x38
 8014b80:	1b1c      	subge	r4, r3, r4
 8014b82:	4623      	movlt	r3, r4
 8014b84:	2400      	movlt	r4, #0
 8014b86:	f1b9 0f00 	cmp.w	r9, #0
 8014b8a:	bfb5      	itete	lt
 8014b8c:	9a05      	ldrlt	r2, [sp, #20]
 8014b8e:	f8dd 8014 	ldrge.w	r8, [sp, #20]
 8014b92:	eba2 0809 	sublt.w	r8, r2, r9
 8014b96:	464a      	movge	r2, r9
 8014b98:	bfb8      	it	lt
 8014b9a:	2200      	movlt	r2, #0
 8014b9c:	e73b      	b.n	8014a16 <_dtoa_r+0x666>
 8014b9e:	f8dd 8014 	ldr.w	r8, [sp, #20]
 8014ba2:	9f08      	ldr	r7, [sp, #32]
 8014ba4:	461c      	mov	r4, r3
 8014ba6:	e743      	b.n	8014a30 <_dtoa_r+0x680>
 8014ba8:	461a      	mov	r2, r3
 8014baa:	e76f      	b.n	8014a8c <_dtoa_r+0x6dc>
 8014bac:	9b07      	ldr	r3, [sp, #28]
 8014bae:	2b01      	cmp	r3, #1
 8014bb0:	dc18      	bgt.n	8014be4 <_dtoa_r+0x834>
 8014bb2:	9b02      	ldr	r3, [sp, #8]
 8014bb4:	b9b3      	cbnz	r3, 8014be4 <_dtoa_r+0x834>
 8014bb6:	9b03      	ldr	r3, [sp, #12]
 8014bb8:	f3c3 0213 	ubfx	r2, r3, #0, #20
 8014bbc:	b9a2      	cbnz	r2, 8014be8 <_dtoa_r+0x838>
 8014bbe:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8014bc2:	0d12      	lsrs	r2, r2, #20
 8014bc4:	0512      	lsls	r2, r2, #20
 8014bc6:	b18a      	cbz	r2, 8014bec <_dtoa_r+0x83c>
 8014bc8:	9b05      	ldr	r3, [sp, #20]
 8014bca:	3301      	adds	r3, #1
 8014bcc:	9305      	str	r3, [sp, #20]
 8014bce:	9b06      	ldr	r3, [sp, #24]
 8014bd0:	3301      	adds	r3, #1
 8014bd2:	9306      	str	r3, [sp, #24]
 8014bd4:	2301      	movs	r3, #1
 8014bd6:	930a      	str	r3, [sp, #40]	; 0x28
 8014bd8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8014bda:	2b00      	cmp	r3, #0
 8014bdc:	f47f af6f 	bne.w	8014abe <_dtoa_r+0x70e>
 8014be0:	2001      	movs	r0, #1
 8014be2:	e774      	b.n	8014ace <_dtoa_r+0x71e>
 8014be4:	2300      	movs	r3, #0
 8014be6:	e7f6      	b.n	8014bd6 <_dtoa_r+0x826>
 8014be8:	9b02      	ldr	r3, [sp, #8]
 8014bea:	e7f4      	b.n	8014bd6 <_dtoa_r+0x826>
 8014bec:	920a      	str	r2, [sp, #40]	; 0x28
 8014bee:	e7f3      	b.n	8014bd8 <_dtoa_r+0x828>
 8014bf0:	d081      	beq.n	8014af6 <_dtoa_r+0x746>
 8014bf2:	4610      	mov	r0, r2
 8014bf4:	301c      	adds	r0, #28
 8014bf6:	e777      	b.n	8014ae8 <_dtoa_r+0x738>
 8014bf8:	f1b9 0f00 	cmp.w	r9, #0
 8014bfc:	dc37      	bgt.n	8014c6e <_dtoa_r+0x8be>
 8014bfe:	9b07      	ldr	r3, [sp, #28]
 8014c00:	2b02      	cmp	r3, #2
 8014c02:	dd34      	ble.n	8014c6e <_dtoa_r+0x8be>
 8014c04:	46ca      	mov	sl, r9
 8014c06:	f1ba 0f00 	cmp.w	sl, #0
 8014c0a:	d10d      	bne.n	8014c28 <_dtoa_r+0x878>
 8014c0c:	4621      	mov	r1, r4
 8014c0e:	4653      	mov	r3, sl
 8014c10:	2205      	movs	r2, #5
 8014c12:	4630      	mov	r0, r6
 8014c14:	f000 f9bc 	bl	8014f90 <__multadd>
 8014c18:	4601      	mov	r1, r0
 8014c1a:	4604      	mov	r4, r0
 8014c1c:	4628      	mov	r0, r5
 8014c1e:	f000 fbd3 	bl	80153c8 <__mcmp>
 8014c22:	2800      	cmp	r0, #0
 8014c24:	f73f adde 	bgt.w	80147e4 <_dtoa_r+0x434>
 8014c28:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8014c2a:	f8dd 8000 	ldr.w	r8, [sp]
 8014c2e:	ea6f 0b03 	mvn.w	fp, r3
 8014c32:	f04f 0900 	mov.w	r9, #0
 8014c36:	4621      	mov	r1, r4
 8014c38:	4630      	mov	r0, r6
 8014c3a:	f000 f987 	bl	8014f4c <_Bfree>
 8014c3e:	2f00      	cmp	r7, #0
 8014c40:	f43f aea7 	beq.w	8014992 <_dtoa_r+0x5e2>
 8014c44:	f1b9 0f00 	cmp.w	r9, #0
 8014c48:	d005      	beq.n	8014c56 <_dtoa_r+0x8a6>
 8014c4a:	45b9      	cmp	r9, r7
 8014c4c:	d003      	beq.n	8014c56 <_dtoa_r+0x8a6>
 8014c4e:	4649      	mov	r1, r9
 8014c50:	4630      	mov	r0, r6
 8014c52:	f000 f97b 	bl	8014f4c <_Bfree>
 8014c56:	4639      	mov	r1, r7
 8014c58:	4630      	mov	r0, r6
 8014c5a:	f000 f977 	bl	8014f4c <_Bfree>
 8014c5e:	e698      	b.n	8014992 <_dtoa_r+0x5e2>
 8014c60:	2400      	movs	r4, #0
 8014c62:	4627      	mov	r7, r4
 8014c64:	e7e0      	b.n	8014c28 <_dtoa_r+0x878>
 8014c66:	46bb      	mov	fp, r7
 8014c68:	4604      	mov	r4, r0
 8014c6a:	4607      	mov	r7, r0
 8014c6c:	e5ba      	b.n	80147e4 <_dtoa_r+0x434>
 8014c6e:	9b08      	ldr	r3, [sp, #32]
 8014c70:	46ca      	mov	sl, r9
 8014c72:	2b00      	cmp	r3, #0
 8014c74:	f000 8100 	beq.w	8014e78 <_dtoa_r+0xac8>
 8014c78:	f1b8 0f00 	cmp.w	r8, #0
 8014c7c:	dd05      	ble.n	8014c8a <_dtoa_r+0x8da>
 8014c7e:	4639      	mov	r1, r7
 8014c80:	4642      	mov	r2, r8
 8014c82:	4630      	mov	r0, r6
 8014c84:	f000 fb34 	bl	80152f0 <__lshift>
 8014c88:	4607      	mov	r7, r0
 8014c8a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8014c8c:	2b00      	cmp	r3, #0
 8014c8e:	d05d      	beq.n	8014d4c <_dtoa_r+0x99c>
 8014c90:	6879      	ldr	r1, [r7, #4]
 8014c92:	4630      	mov	r0, r6
 8014c94:	f000 f91a 	bl	8014ecc <_Balloc>
 8014c98:	4680      	mov	r8, r0
 8014c9a:	b928      	cbnz	r0, 8014ca8 <_dtoa_r+0x8f8>
 8014c9c:	4b82      	ldr	r3, [pc, #520]	; (8014ea8 <_dtoa_r+0xaf8>)
 8014c9e:	4602      	mov	r2, r0
 8014ca0:	f240 21ea 	movw	r1, #746	; 0x2ea
 8014ca4:	f7ff bb9a 	b.w	80143dc <_dtoa_r+0x2c>
 8014ca8:	693a      	ldr	r2, [r7, #16]
 8014caa:	3202      	adds	r2, #2
 8014cac:	0092      	lsls	r2, r2, #2
 8014cae:	f107 010c 	add.w	r1, r7, #12
 8014cb2:	300c      	adds	r0, #12
 8014cb4:	f7fe fe5c 	bl	8013970 <memcpy>
 8014cb8:	2201      	movs	r2, #1
 8014cba:	4641      	mov	r1, r8
 8014cbc:	4630      	mov	r0, r6
 8014cbe:	f000 fb17 	bl	80152f0 <__lshift>
 8014cc2:	9b00      	ldr	r3, [sp, #0]
 8014cc4:	3301      	adds	r3, #1
 8014cc6:	9305      	str	r3, [sp, #20]
 8014cc8:	9b00      	ldr	r3, [sp, #0]
 8014cca:	4453      	add	r3, sl
 8014ccc:	9309      	str	r3, [sp, #36]	; 0x24
 8014cce:	9b02      	ldr	r3, [sp, #8]
 8014cd0:	f003 0301 	and.w	r3, r3, #1
 8014cd4:	46b9      	mov	r9, r7
 8014cd6:	9308      	str	r3, [sp, #32]
 8014cd8:	4607      	mov	r7, r0
 8014cda:	9b05      	ldr	r3, [sp, #20]
 8014cdc:	4621      	mov	r1, r4
 8014cde:	3b01      	subs	r3, #1
 8014ce0:	4628      	mov	r0, r5
 8014ce2:	9302      	str	r3, [sp, #8]
 8014ce4:	f7ff fad8 	bl	8014298 <quorem>
 8014ce8:	4603      	mov	r3, r0
 8014cea:	3330      	adds	r3, #48	; 0x30
 8014cec:	9006      	str	r0, [sp, #24]
 8014cee:	4649      	mov	r1, r9
 8014cf0:	4628      	mov	r0, r5
 8014cf2:	930a      	str	r3, [sp, #40]	; 0x28
 8014cf4:	f000 fb68 	bl	80153c8 <__mcmp>
 8014cf8:	463a      	mov	r2, r7
 8014cfa:	4682      	mov	sl, r0
 8014cfc:	4621      	mov	r1, r4
 8014cfe:	4630      	mov	r0, r6
 8014d00:	f000 fb7e 	bl	8015400 <__mdiff>
 8014d04:	68c2      	ldr	r2, [r0, #12]
 8014d06:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8014d08:	4680      	mov	r8, r0
 8014d0a:	bb0a      	cbnz	r2, 8014d50 <_dtoa_r+0x9a0>
 8014d0c:	4601      	mov	r1, r0
 8014d0e:	4628      	mov	r0, r5
 8014d10:	f000 fb5a 	bl	80153c8 <__mcmp>
 8014d14:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8014d16:	4602      	mov	r2, r0
 8014d18:	4641      	mov	r1, r8
 8014d1a:	4630      	mov	r0, r6
 8014d1c:	920e      	str	r2, [sp, #56]	; 0x38
 8014d1e:	930a      	str	r3, [sp, #40]	; 0x28
 8014d20:	f000 f914 	bl	8014f4c <_Bfree>
 8014d24:	9b07      	ldr	r3, [sp, #28]
 8014d26:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8014d28:	f8dd 8014 	ldr.w	r8, [sp, #20]
 8014d2c:	ea43 0102 	orr.w	r1, r3, r2
 8014d30:	9b08      	ldr	r3, [sp, #32]
 8014d32:	430b      	orrs	r3, r1
 8014d34:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8014d36:	d10d      	bne.n	8014d54 <_dtoa_r+0x9a4>
 8014d38:	2b39      	cmp	r3, #57	; 0x39
 8014d3a:	d029      	beq.n	8014d90 <_dtoa_r+0x9e0>
 8014d3c:	f1ba 0f00 	cmp.w	sl, #0
 8014d40:	dd01      	ble.n	8014d46 <_dtoa_r+0x996>
 8014d42:	9b06      	ldr	r3, [sp, #24]
 8014d44:	3331      	adds	r3, #49	; 0x31
 8014d46:	9a02      	ldr	r2, [sp, #8]
 8014d48:	7013      	strb	r3, [r2, #0]
 8014d4a:	e774      	b.n	8014c36 <_dtoa_r+0x886>
 8014d4c:	4638      	mov	r0, r7
 8014d4e:	e7b8      	b.n	8014cc2 <_dtoa_r+0x912>
 8014d50:	2201      	movs	r2, #1
 8014d52:	e7e1      	b.n	8014d18 <_dtoa_r+0x968>
 8014d54:	f1ba 0f00 	cmp.w	sl, #0
 8014d58:	db06      	blt.n	8014d68 <_dtoa_r+0x9b8>
 8014d5a:	9907      	ldr	r1, [sp, #28]
 8014d5c:	ea41 0a0a 	orr.w	sl, r1, sl
 8014d60:	9908      	ldr	r1, [sp, #32]
 8014d62:	ea5a 0101 	orrs.w	r1, sl, r1
 8014d66:	d120      	bne.n	8014daa <_dtoa_r+0x9fa>
 8014d68:	2a00      	cmp	r2, #0
 8014d6a:	ddec      	ble.n	8014d46 <_dtoa_r+0x996>
 8014d6c:	4629      	mov	r1, r5
 8014d6e:	2201      	movs	r2, #1
 8014d70:	4630      	mov	r0, r6
 8014d72:	9305      	str	r3, [sp, #20]
 8014d74:	f000 fabc 	bl	80152f0 <__lshift>
 8014d78:	4621      	mov	r1, r4
 8014d7a:	4605      	mov	r5, r0
 8014d7c:	f000 fb24 	bl	80153c8 <__mcmp>
 8014d80:	2800      	cmp	r0, #0
 8014d82:	9b05      	ldr	r3, [sp, #20]
 8014d84:	dc02      	bgt.n	8014d8c <_dtoa_r+0x9dc>
 8014d86:	d1de      	bne.n	8014d46 <_dtoa_r+0x996>
 8014d88:	07da      	lsls	r2, r3, #31
 8014d8a:	d5dc      	bpl.n	8014d46 <_dtoa_r+0x996>
 8014d8c:	2b39      	cmp	r3, #57	; 0x39
 8014d8e:	d1d8      	bne.n	8014d42 <_dtoa_r+0x992>
 8014d90:	9a02      	ldr	r2, [sp, #8]
 8014d92:	2339      	movs	r3, #57	; 0x39
 8014d94:	7013      	strb	r3, [r2, #0]
 8014d96:	4643      	mov	r3, r8
 8014d98:	4698      	mov	r8, r3
 8014d9a:	3b01      	subs	r3, #1
 8014d9c:	f818 2c01 	ldrb.w	r2, [r8, #-1]
 8014da0:	2a39      	cmp	r2, #57	; 0x39
 8014da2:	d051      	beq.n	8014e48 <_dtoa_r+0xa98>
 8014da4:	3201      	adds	r2, #1
 8014da6:	701a      	strb	r2, [r3, #0]
 8014da8:	e745      	b.n	8014c36 <_dtoa_r+0x886>
 8014daa:	2a00      	cmp	r2, #0
 8014dac:	dd03      	ble.n	8014db6 <_dtoa_r+0xa06>
 8014dae:	2b39      	cmp	r3, #57	; 0x39
 8014db0:	d0ee      	beq.n	8014d90 <_dtoa_r+0x9e0>
 8014db2:	3301      	adds	r3, #1
 8014db4:	e7c7      	b.n	8014d46 <_dtoa_r+0x996>
 8014db6:	9a05      	ldr	r2, [sp, #20]
 8014db8:	9909      	ldr	r1, [sp, #36]	; 0x24
 8014dba:	f802 3c01 	strb.w	r3, [r2, #-1]
 8014dbe:	428a      	cmp	r2, r1
 8014dc0:	d02b      	beq.n	8014e1a <_dtoa_r+0xa6a>
 8014dc2:	4629      	mov	r1, r5
 8014dc4:	2300      	movs	r3, #0
 8014dc6:	220a      	movs	r2, #10
 8014dc8:	4630      	mov	r0, r6
 8014dca:	f000 f8e1 	bl	8014f90 <__multadd>
 8014dce:	45b9      	cmp	r9, r7
 8014dd0:	4605      	mov	r5, r0
 8014dd2:	f04f 0300 	mov.w	r3, #0
 8014dd6:	f04f 020a 	mov.w	r2, #10
 8014dda:	4649      	mov	r1, r9
 8014ddc:	4630      	mov	r0, r6
 8014dde:	d107      	bne.n	8014df0 <_dtoa_r+0xa40>
 8014de0:	f000 f8d6 	bl	8014f90 <__multadd>
 8014de4:	4681      	mov	r9, r0
 8014de6:	4607      	mov	r7, r0
 8014de8:	9b05      	ldr	r3, [sp, #20]
 8014dea:	3301      	adds	r3, #1
 8014dec:	9305      	str	r3, [sp, #20]
 8014dee:	e774      	b.n	8014cda <_dtoa_r+0x92a>
 8014df0:	f000 f8ce 	bl	8014f90 <__multadd>
 8014df4:	4639      	mov	r1, r7
 8014df6:	4681      	mov	r9, r0
 8014df8:	2300      	movs	r3, #0
 8014dfa:	220a      	movs	r2, #10
 8014dfc:	4630      	mov	r0, r6
 8014dfe:	f000 f8c7 	bl	8014f90 <__multadd>
 8014e02:	4607      	mov	r7, r0
 8014e04:	e7f0      	b.n	8014de8 <_dtoa_r+0xa38>
 8014e06:	f1ba 0f00 	cmp.w	sl, #0
 8014e0a:	9a00      	ldr	r2, [sp, #0]
 8014e0c:	bfcc      	ite	gt
 8014e0e:	46d0      	movgt	r8, sl
 8014e10:	f04f 0801 	movle.w	r8, #1
 8014e14:	4490      	add	r8, r2
 8014e16:	f04f 0900 	mov.w	r9, #0
 8014e1a:	4629      	mov	r1, r5
 8014e1c:	2201      	movs	r2, #1
 8014e1e:	4630      	mov	r0, r6
 8014e20:	9302      	str	r3, [sp, #8]
 8014e22:	f000 fa65 	bl	80152f0 <__lshift>
 8014e26:	4621      	mov	r1, r4
 8014e28:	4605      	mov	r5, r0
 8014e2a:	f000 facd 	bl	80153c8 <__mcmp>
 8014e2e:	2800      	cmp	r0, #0
 8014e30:	dcb1      	bgt.n	8014d96 <_dtoa_r+0x9e6>
 8014e32:	d102      	bne.n	8014e3a <_dtoa_r+0xa8a>
 8014e34:	9b02      	ldr	r3, [sp, #8]
 8014e36:	07db      	lsls	r3, r3, #31
 8014e38:	d4ad      	bmi.n	8014d96 <_dtoa_r+0x9e6>
 8014e3a:	4643      	mov	r3, r8
 8014e3c:	4698      	mov	r8, r3
 8014e3e:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8014e42:	2a30      	cmp	r2, #48	; 0x30
 8014e44:	d0fa      	beq.n	8014e3c <_dtoa_r+0xa8c>
 8014e46:	e6f6      	b.n	8014c36 <_dtoa_r+0x886>
 8014e48:	9a00      	ldr	r2, [sp, #0]
 8014e4a:	429a      	cmp	r2, r3
 8014e4c:	d1a4      	bne.n	8014d98 <_dtoa_r+0x9e8>
 8014e4e:	f10b 0b01 	add.w	fp, fp, #1
 8014e52:	2331      	movs	r3, #49	; 0x31
 8014e54:	e778      	b.n	8014d48 <_dtoa_r+0x998>
 8014e56:	4b15      	ldr	r3, [pc, #84]	; (8014eac <_dtoa_r+0xafc>)
 8014e58:	f7ff bb12 	b.w	8014480 <_dtoa_r+0xd0>
 8014e5c:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8014e5e:	2b00      	cmp	r3, #0
 8014e60:	f47f aaee 	bne.w	8014440 <_dtoa_r+0x90>
 8014e64:	4b12      	ldr	r3, [pc, #72]	; (8014eb0 <_dtoa_r+0xb00>)
 8014e66:	f7ff bb0b 	b.w	8014480 <_dtoa_r+0xd0>
 8014e6a:	f1ba 0f00 	cmp.w	sl, #0
 8014e6e:	dc03      	bgt.n	8014e78 <_dtoa_r+0xac8>
 8014e70:	9b07      	ldr	r3, [sp, #28]
 8014e72:	2b02      	cmp	r3, #2
 8014e74:	f73f aec7 	bgt.w	8014c06 <_dtoa_r+0x856>
 8014e78:	f8dd 8000 	ldr.w	r8, [sp]
 8014e7c:	4621      	mov	r1, r4
 8014e7e:	4628      	mov	r0, r5
 8014e80:	f7ff fa0a 	bl	8014298 <quorem>
 8014e84:	f100 0330 	add.w	r3, r0, #48	; 0x30
 8014e88:	f808 3b01 	strb.w	r3, [r8], #1
 8014e8c:	9a00      	ldr	r2, [sp, #0]
 8014e8e:	eba8 0202 	sub.w	r2, r8, r2
 8014e92:	4592      	cmp	sl, r2
 8014e94:	ddb7      	ble.n	8014e06 <_dtoa_r+0xa56>
 8014e96:	4629      	mov	r1, r5
 8014e98:	2300      	movs	r3, #0
 8014e9a:	220a      	movs	r2, #10
 8014e9c:	4630      	mov	r0, r6
 8014e9e:	f000 f877 	bl	8014f90 <__multadd>
 8014ea2:	4605      	mov	r5, r0
 8014ea4:	e7ea      	b.n	8014e7c <_dtoa_r+0xacc>
 8014ea6:	bf00      	nop
 8014ea8:	08017023 	.word	0x08017023
 8014eac:	08016f7c 	.word	0x08016f7c
 8014eb0:	08016fa0 	.word	0x08016fa0

08014eb4 <_localeconv_r>:
 8014eb4:	4800      	ldr	r0, [pc, #0]	; (8014eb8 <_localeconv_r+0x4>)
 8014eb6:	4770      	bx	lr
 8014eb8:	240002b4 	.word	0x240002b4

08014ebc <malloc>:
 8014ebc:	4b02      	ldr	r3, [pc, #8]	; (8014ec8 <malloc+0xc>)
 8014ebe:	4601      	mov	r1, r0
 8014ec0:	6818      	ldr	r0, [r3, #0]
 8014ec2:	f000 bbe1 	b.w	8015688 <_malloc_r>
 8014ec6:	bf00      	nop
 8014ec8:	24000160 	.word	0x24000160

08014ecc <_Balloc>:
 8014ecc:	b570      	push	{r4, r5, r6, lr}
 8014ece:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8014ed0:	4604      	mov	r4, r0
 8014ed2:	460d      	mov	r5, r1
 8014ed4:	b976      	cbnz	r6, 8014ef4 <_Balloc+0x28>
 8014ed6:	2010      	movs	r0, #16
 8014ed8:	f7ff fff0 	bl	8014ebc <malloc>
 8014edc:	4602      	mov	r2, r0
 8014ede:	6260      	str	r0, [r4, #36]	; 0x24
 8014ee0:	b920      	cbnz	r0, 8014eec <_Balloc+0x20>
 8014ee2:	4b18      	ldr	r3, [pc, #96]	; (8014f44 <_Balloc+0x78>)
 8014ee4:	4818      	ldr	r0, [pc, #96]	; (8014f48 <_Balloc+0x7c>)
 8014ee6:	2166      	movs	r1, #102	; 0x66
 8014ee8:	f000 fd94 	bl	8015a14 <__assert_func>
 8014eec:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8014ef0:	6006      	str	r6, [r0, #0]
 8014ef2:	60c6      	str	r6, [r0, #12]
 8014ef4:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8014ef6:	68f3      	ldr	r3, [r6, #12]
 8014ef8:	b183      	cbz	r3, 8014f1c <_Balloc+0x50>
 8014efa:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8014efc:	68db      	ldr	r3, [r3, #12]
 8014efe:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8014f02:	b9b8      	cbnz	r0, 8014f34 <_Balloc+0x68>
 8014f04:	2101      	movs	r1, #1
 8014f06:	fa01 f605 	lsl.w	r6, r1, r5
 8014f0a:	1d72      	adds	r2, r6, #5
 8014f0c:	0092      	lsls	r2, r2, #2
 8014f0e:	4620      	mov	r0, r4
 8014f10:	f000 fb5a 	bl	80155c8 <_calloc_r>
 8014f14:	b160      	cbz	r0, 8014f30 <_Balloc+0x64>
 8014f16:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8014f1a:	e00e      	b.n	8014f3a <_Balloc+0x6e>
 8014f1c:	2221      	movs	r2, #33	; 0x21
 8014f1e:	2104      	movs	r1, #4
 8014f20:	4620      	mov	r0, r4
 8014f22:	f000 fb51 	bl	80155c8 <_calloc_r>
 8014f26:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8014f28:	60f0      	str	r0, [r6, #12]
 8014f2a:	68db      	ldr	r3, [r3, #12]
 8014f2c:	2b00      	cmp	r3, #0
 8014f2e:	d1e4      	bne.n	8014efa <_Balloc+0x2e>
 8014f30:	2000      	movs	r0, #0
 8014f32:	bd70      	pop	{r4, r5, r6, pc}
 8014f34:	6802      	ldr	r2, [r0, #0]
 8014f36:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8014f3a:	2300      	movs	r3, #0
 8014f3c:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8014f40:	e7f7      	b.n	8014f32 <_Balloc+0x66>
 8014f42:	bf00      	nop
 8014f44:	08016fad 	.word	0x08016fad
 8014f48:	08017034 	.word	0x08017034

08014f4c <_Bfree>:
 8014f4c:	b570      	push	{r4, r5, r6, lr}
 8014f4e:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8014f50:	4605      	mov	r5, r0
 8014f52:	460c      	mov	r4, r1
 8014f54:	b976      	cbnz	r6, 8014f74 <_Bfree+0x28>
 8014f56:	2010      	movs	r0, #16
 8014f58:	f7ff ffb0 	bl	8014ebc <malloc>
 8014f5c:	4602      	mov	r2, r0
 8014f5e:	6268      	str	r0, [r5, #36]	; 0x24
 8014f60:	b920      	cbnz	r0, 8014f6c <_Bfree+0x20>
 8014f62:	4b09      	ldr	r3, [pc, #36]	; (8014f88 <_Bfree+0x3c>)
 8014f64:	4809      	ldr	r0, [pc, #36]	; (8014f8c <_Bfree+0x40>)
 8014f66:	218a      	movs	r1, #138	; 0x8a
 8014f68:	f000 fd54 	bl	8015a14 <__assert_func>
 8014f6c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8014f70:	6006      	str	r6, [r0, #0]
 8014f72:	60c6      	str	r6, [r0, #12]
 8014f74:	b13c      	cbz	r4, 8014f86 <_Bfree+0x3a>
 8014f76:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8014f78:	6862      	ldr	r2, [r4, #4]
 8014f7a:	68db      	ldr	r3, [r3, #12]
 8014f7c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8014f80:	6021      	str	r1, [r4, #0]
 8014f82:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8014f86:	bd70      	pop	{r4, r5, r6, pc}
 8014f88:	08016fad 	.word	0x08016fad
 8014f8c:	08017034 	.word	0x08017034

08014f90 <__multadd>:
 8014f90:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8014f94:	690e      	ldr	r6, [r1, #16]
 8014f96:	4607      	mov	r7, r0
 8014f98:	4698      	mov	r8, r3
 8014f9a:	460c      	mov	r4, r1
 8014f9c:	f101 0014 	add.w	r0, r1, #20
 8014fa0:	2300      	movs	r3, #0
 8014fa2:	6805      	ldr	r5, [r0, #0]
 8014fa4:	b2a9      	uxth	r1, r5
 8014fa6:	fb02 8101 	mla	r1, r2, r1, r8
 8014faa:	ea4f 4c11 	mov.w	ip, r1, lsr #16
 8014fae:	0c2d      	lsrs	r5, r5, #16
 8014fb0:	fb02 c505 	mla	r5, r2, r5, ip
 8014fb4:	b289      	uxth	r1, r1
 8014fb6:	3301      	adds	r3, #1
 8014fb8:	eb01 4105 	add.w	r1, r1, r5, lsl #16
 8014fbc:	429e      	cmp	r6, r3
 8014fbe:	f840 1b04 	str.w	r1, [r0], #4
 8014fc2:	ea4f 4815 	mov.w	r8, r5, lsr #16
 8014fc6:	dcec      	bgt.n	8014fa2 <__multadd+0x12>
 8014fc8:	f1b8 0f00 	cmp.w	r8, #0
 8014fcc:	d022      	beq.n	8015014 <__multadd+0x84>
 8014fce:	68a3      	ldr	r3, [r4, #8]
 8014fd0:	42b3      	cmp	r3, r6
 8014fd2:	dc19      	bgt.n	8015008 <__multadd+0x78>
 8014fd4:	6861      	ldr	r1, [r4, #4]
 8014fd6:	4638      	mov	r0, r7
 8014fd8:	3101      	adds	r1, #1
 8014fda:	f7ff ff77 	bl	8014ecc <_Balloc>
 8014fde:	4605      	mov	r5, r0
 8014fe0:	b928      	cbnz	r0, 8014fee <__multadd+0x5e>
 8014fe2:	4602      	mov	r2, r0
 8014fe4:	4b0d      	ldr	r3, [pc, #52]	; (801501c <__multadd+0x8c>)
 8014fe6:	480e      	ldr	r0, [pc, #56]	; (8015020 <__multadd+0x90>)
 8014fe8:	21b5      	movs	r1, #181	; 0xb5
 8014fea:	f000 fd13 	bl	8015a14 <__assert_func>
 8014fee:	6922      	ldr	r2, [r4, #16]
 8014ff0:	3202      	adds	r2, #2
 8014ff2:	f104 010c 	add.w	r1, r4, #12
 8014ff6:	0092      	lsls	r2, r2, #2
 8014ff8:	300c      	adds	r0, #12
 8014ffa:	f7fe fcb9 	bl	8013970 <memcpy>
 8014ffe:	4621      	mov	r1, r4
 8015000:	4638      	mov	r0, r7
 8015002:	f7ff ffa3 	bl	8014f4c <_Bfree>
 8015006:	462c      	mov	r4, r5
 8015008:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 801500c:	3601      	adds	r6, #1
 801500e:	f8c3 8014 	str.w	r8, [r3, #20]
 8015012:	6126      	str	r6, [r4, #16]
 8015014:	4620      	mov	r0, r4
 8015016:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801501a:	bf00      	nop
 801501c:	08017023 	.word	0x08017023
 8015020:	08017034 	.word	0x08017034

08015024 <__hi0bits>:
 8015024:	0c03      	lsrs	r3, r0, #16
 8015026:	041b      	lsls	r3, r3, #16
 8015028:	b9d3      	cbnz	r3, 8015060 <__hi0bits+0x3c>
 801502a:	0400      	lsls	r0, r0, #16
 801502c:	2310      	movs	r3, #16
 801502e:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8015032:	bf04      	itt	eq
 8015034:	0200      	lsleq	r0, r0, #8
 8015036:	3308      	addeq	r3, #8
 8015038:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 801503c:	bf04      	itt	eq
 801503e:	0100      	lsleq	r0, r0, #4
 8015040:	3304      	addeq	r3, #4
 8015042:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8015046:	bf04      	itt	eq
 8015048:	0080      	lsleq	r0, r0, #2
 801504a:	3302      	addeq	r3, #2
 801504c:	2800      	cmp	r0, #0
 801504e:	db05      	blt.n	801505c <__hi0bits+0x38>
 8015050:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8015054:	f103 0301 	add.w	r3, r3, #1
 8015058:	bf08      	it	eq
 801505a:	2320      	moveq	r3, #32
 801505c:	4618      	mov	r0, r3
 801505e:	4770      	bx	lr
 8015060:	2300      	movs	r3, #0
 8015062:	e7e4      	b.n	801502e <__hi0bits+0xa>

08015064 <__lo0bits>:
 8015064:	6803      	ldr	r3, [r0, #0]
 8015066:	f013 0207 	ands.w	r2, r3, #7
 801506a:	4601      	mov	r1, r0
 801506c:	d00b      	beq.n	8015086 <__lo0bits+0x22>
 801506e:	07da      	lsls	r2, r3, #31
 8015070:	d424      	bmi.n	80150bc <__lo0bits+0x58>
 8015072:	0798      	lsls	r0, r3, #30
 8015074:	bf49      	itett	mi
 8015076:	085b      	lsrmi	r3, r3, #1
 8015078:	089b      	lsrpl	r3, r3, #2
 801507a:	2001      	movmi	r0, #1
 801507c:	600b      	strmi	r3, [r1, #0]
 801507e:	bf5c      	itt	pl
 8015080:	600b      	strpl	r3, [r1, #0]
 8015082:	2002      	movpl	r0, #2
 8015084:	4770      	bx	lr
 8015086:	b298      	uxth	r0, r3
 8015088:	b9b0      	cbnz	r0, 80150b8 <__lo0bits+0x54>
 801508a:	0c1b      	lsrs	r3, r3, #16
 801508c:	2010      	movs	r0, #16
 801508e:	f013 0fff 	tst.w	r3, #255	; 0xff
 8015092:	bf04      	itt	eq
 8015094:	0a1b      	lsreq	r3, r3, #8
 8015096:	3008      	addeq	r0, #8
 8015098:	071a      	lsls	r2, r3, #28
 801509a:	bf04      	itt	eq
 801509c:	091b      	lsreq	r3, r3, #4
 801509e:	3004      	addeq	r0, #4
 80150a0:	079a      	lsls	r2, r3, #30
 80150a2:	bf04      	itt	eq
 80150a4:	089b      	lsreq	r3, r3, #2
 80150a6:	3002      	addeq	r0, #2
 80150a8:	07da      	lsls	r2, r3, #31
 80150aa:	d403      	bmi.n	80150b4 <__lo0bits+0x50>
 80150ac:	085b      	lsrs	r3, r3, #1
 80150ae:	f100 0001 	add.w	r0, r0, #1
 80150b2:	d005      	beq.n	80150c0 <__lo0bits+0x5c>
 80150b4:	600b      	str	r3, [r1, #0]
 80150b6:	4770      	bx	lr
 80150b8:	4610      	mov	r0, r2
 80150ba:	e7e8      	b.n	801508e <__lo0bits+0x2a>
 80150bc:	2000      	movs	r0, #0
 80150be:	4770      	bx	lr
 80150c0:	2020      	movs	r0, #32
 80150c2:	4770      	bx	lr

080150c4 <__i2b>:
 80150c4:	b510      	push	{r4, lr}
 80150c6:	460c      	mov	r4, r1
 80150c8:	2101      	movs	r1, #1
 80150ca:	f7ff feff 	bl	8014ecc <_Balloc>
 80150ce:	4602      	mov	r2, r0
 80150d0:	b928      	cbnz	r0, 80150de <__i2b+0x1a>
 80150d2:	4b05      	ldr	r3, [pc, #20]	; (80150e8 <__i2b+0x24>)
 80150d4:	4805      	ldr	r0, [pc, #20]	; (80150ec <__i2b+0x28>)
 80150d6:	f44f 71a0 	mov.w	r1, #320	; 0x140
 80150da:	f000 fc9b 	bl	8015a14 <__assert_func>
 80150de:	2301      	movs	r3, #1
 80150e0:	6144      	str	r4, [r0, #20]
 80150e2:	6103      	str	r3, [r0, #16]
 80150e4:	bd10      	pop	{r4, pc}
 80150e6:	bf00      	nop
 80150e8:	08017023 	.word	0x08017023
 80150ec:	08017034 	.word	0x08017034

080150f0 <__multiply>:
 80150f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80150f4:	4614      	mov	r4, r2
 80150f6:	690a      	ldr	r2, [r1, #16]
 80150f8:	6923      	ldr	r3, [r4, #16]
 80150fa:	429a      	cmp	r2, r3
 80150fc:	bfb8      	it	lt
 80150fe:	460b      	movlt	r3, r1
 8015100:	460d      	mov	r5, r1
 8015102:	bfbc      	itt	lt
 8015104:	4625      	movlt	r5, r4
 8015106:	461c      	movlt	r4, r3
 8015108:	f8d5 a010 	ldr.w	sl, [r5, #16]
 801510c:	f8d4 9010 	ldr.w	r9, [r4, #16]
 8015110:	68ab      	ldr	r3, [r5, #8]
 8015112:	6869      	ldr	r1, [r5, #4]
 8015114:	eb0a 0709 	add.w	r7, sl, r9
 8015118:	42bb      	cmp	r3, r7
 801511a:	b085      	sub	sp, #20
 801511c:	bfb8      	it	lt
 801511e:	3101      	addlt	r1, #1
 8015120:	f7ff fed4 	bl	8014ecc <_Balloc>
 8015124:	b930      	cbnz	r0, 8015134 <__multiply+0x44>
 8015126:	4602      	mov	r2, r0
 8015128:	4b42      	ldr	r3, [pc, #264]	; (8015234 <__multiply+0x144>)
 801512a:	4843      	ldr	r0, [pc, #268]	; (8015238 <__multiply+0x148>)
 801512c:	f240 115d 	movw	r1, #349	; 0x15d
 8015130:	f000 fc70 	bl	8015a14 <__assert_func>
 8015134:	f100 0614 	add.w	r6, r0, #20
 8015138:	eb06 0887 	add.w	r8, r6, r7, lsl #2
 801513c:	4633      	mov	r3, r6
 801513e:	2200      	movs	r2, #0
 8015140:	4543      	cmp	r3, r8
 8015142:	d31e      	bcc.n	8015182 <__multiply+0x92>
 8015144:	f105 0c14 	add.w	ip, r5, #20
 8015148:	f104 0314 	add.w	r3, r4, #20
 801514c:	eb0c 0c8a 	add.w	ip, ip, sl, lsl #2
 8015150:	eb03 0289 	add.w	r2, r3, r9, lsl #2
 8015154:	9202      	str	r2, [sp, #8]
 8015156:	ebac 0205 	sub.w	r2, ip, r5
 801515a:	3a15      	subs	r2, #21
 801515c:	f022 0203 	bic.w	r2, r2, #3
 8015160:	3204      	adds	r2, #4
 8015162:	f105 0115 	add.w	r1, r5, #21
 8015166:	458c      	cmp	ip, r1
 8015168:	bf38      	it	cc
 801516a:	2204      	movcc	r2, #4
 801516c:	9201      	str	r2, [sp, #4]
 801516e:	9a02      	ldr	r2, [sp, #8]
 8015170:	9303      	str	r3, [sp, #12]
 8015172:	429a      	cmp	r2, r3
 8015174:	d808      	bhi.n	8015188 <__multiply+0x98>
 8015176:	2f00      	cmp	r7, #0
 8015178:	dc55      	bgt.n	8015226 <__multiply+0x136>
 801517a:	6107      	str	r7, [r0, #16]
 801517c:	b005      	add	sp, #20
 801517e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015182:	f843 2b04 	str.w	r2, [r3], #4
 8015186:	e7db      	b.n	8015140 <__multiply+0x50>
 8015188:	f8b3 a000 	ldrh.w	sl, [r3]
 801518c:	f1ba 0f00 	cmp.w	sl, #0
 8015190:	d020      	beq.n	80151d4 <__multiply+0xe4>
 8015192:	f105 0e14 	add.w	lr, r5, #20
 8015196:	46b1      	mov	r9, r6
 8015198:	2200      	movs	r2, #0
 801519a:	f85e 4b04 	ldr.w	r4, [lr], #4
 801519e:	f8d9 b000 	ldr.w	fp, [r9]
 80151a2:	b2a1      	uxth	r1, r4
 80151a4:	fa1f fb8b 	uxth.w	fp, fp
 80151a8:	fb0a b101 	mla	r1, sl, r1, fp
 80151ac:	4411      	add	r1, r2
 80151ae:	f8d9 2000 	ldr.w	r2, [r9]
 80151b2:	0c24      	lsrs	r4, r4, #16
 80151b4:	0c12      	lsrs	r2, r2, #16
 80151b6:	fb0a 2404 	mla	r4, sl, r4, r2
 80151ba:	eb04 4411 	add.w	r4, r4, r1, lsr #16
 80151be:	b289      	uxth	r1, r1
 80151c0:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 80151c4:	45f4      	cmp	ip, lr
 80151c6:	f849 1b04 	str.w	r1, [r9], #4
 80151ca:	ea4f 4214 	mov.w	r2, r4, lsr #16
 80151ce:	d8e4      	bhi.n	801519a <__multiply+0xaa>
 80151d0:	9901      	ldr	r1, [sp, #4]
 80151d2:	5072      	str	r2, [r6, r1]
 80151d4:	9a03      	ldr	r2, [sp, #12]
 80151d6:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 80151da:	3304      	adds	r3, #4
 80151dc:	f1b9 0f00 	cmp.w	r9, #0
 80151e0:	d01f      	beq.n	8015222 <__multiply+0x132>
 80151e2:	6834      	ldr	r4, [r6, #0]
 80151e4:	f105 0114 	add.w	r1, r5, #20
 80151e8:	46b6      	mov	lr, r6
 80151ea:	f04f 0a00 	mov.w	sl, #0
 80151ee:	880a      	ldrh	r2, [r1, #0]
 80151f0:	f8be b002 	ldrh.w	fp, [lr, #2]
 80151f4:	fb09 b202 	mla	r2, r9, r2, fp
 80151f8:	4492      	add	sl, r2
 80151fa:	b2a4      	uxth	r4, r4
 80151fc:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 8015200:	f84e 4b04 	str.w	r4, [lr], #4
 8015204:	f851 4b04 	ldr.w	r4, [r1], #4
 8015208:	f8be 2000 	ldrh.w	r2, [lr]
 801520c:	0c24      	lsrs	r4, r4, #16
 801520e:	fb09 2404 	mla	r4, r9, r4, r2
 8015212:	eb04 441a 	add.w	r4, r4, sl, lsr #16
 8015216:	458c      	cmp	ip, r1
 8015218:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 801521c:	d8e7      	bhi.n	80151ee <__multiply+0xfe>
 801521e:	9a01      	ldr	r2, [sp, #4]
 8015220:	50b4      	str	r4, [r6, r2]
 8015222:	3604      	adds	r6, #4
 8015224:	e7a3      	b.n	801516e <__multiply+0x7e>
 8015226:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 801522a:	2b00      	cmp	r3, #0
 801522c:	d1a5      	bne.n	801517a <__multiply+0x8a>
 801522e:	3f01      	subs	r7, #1
 8015230:	e7a1      	b.n	8015176 <__multiply+0x86>
 8015232:	bf00      	nop
 8015234:	08017023 	.word	0x08017023
 8015238:	08017034 	.word	0x08017034

0801523c <__pow5mult>:
 801523c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8015240:	4615      	mov	r5, r2
 8015242:	f012 0203 	ands.w	r2, r2, #3
 8015246:	4606      	mov	r6, r0
 8015248:	460f      	mov	r7, r1
 801524a:	d007      	beq.n	801525c <__pow5mult+0x20>
 801524c:	4c25      	ldr	r4, [pc, #148]	; (80152e4 <__pow5mult+0xa8>)
 801524e:	3a01      	subs	r2, #1
 8015250:	2300      	movs	r3, #0
 8015252:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8015256:	f7ff fe9b 	bl	8014f90 <__multadd>
 801525a:	4607      	mov	r7, r0
 801525c:	10ad      	asrs	r5, r5, #2
 801525e:	d03d      	beq.n	80152dc <__pow5mult+0xa0>
 8015260:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8015262:	b97c      	cbnz	r4, 8015284 <__pow5mult+0x48>
 8015264:	2010      	movs	r0, #16
 8015266:	f7ff fe29 	bl	8014ebc <malloc>
 801526a:	4602      	mov	r2, r0
 801526c:	6270      	str	r0, [r6, #36]	; 0x24
 801526e:	b928      	cbnz	r0, 801527c <__pow5mult+0x40>
 8015270:	4b1d      	ldr	r3, [pc, #116]	; (80152e8 <__pow5mult+0xac>)
 8015272:	481e      	ldr	r0, [pc, #120]	; (80152ec <__pow5mult+0xb0>)
 8015274:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8015278:	f000 fbcc 	bl	8015a14 <__assert_func>
 801527c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8015280:	6004      	str	r4, [r0, #0]
 8015282:	60c4      	str	r4, [r0, #12]
 8015284:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8015288:	f8d8 4008 	ldr.w	r4, [r8, #8]
 801528c:	b94c      	cbnz	r4, 80152a2 <__pow5mult+0x66>
 801528e:	f240 2171 	movw	r1, #625	; 0x271
 8015292:	4630      	mov	r0, r6
 8015294:	f7ff ff16 	bl	80150c4 <__i2b>
 8015298:	2300      	movs	r3, #0
 801529a:	f8c8 0008 	str.w	r0, [r8, #8]
 801529e:	4604      	mov	r4, r0
 80152a0:	6003      	str	r3, [r0, #0]
 80152a2:	f04f 0900 	mov.w	r9, #0
 80152a6:	07eb      	lsls	r3, r5, #31
 80152a8:	d50a      	bpl.n	80152c0 <__pow5mult+0x84>
 80152aa:	4639      	mov	r1, r7
 80152ac:	4622      	mov	r2, r4
 80152ae:	4630      	mov	r0, r6
 80152b0:	f7ff ff1e 	bl	80150f0 <__multiply>
 80152b4:	4639      	mov	r1, r7
 80152b6:	4680      	mov	r8, r0
 80152b8:	4630      	mov	r0, r6
 80152ba:	f7ff fe47 	bl	8014f4c <_Bfree>
 80152be:	4647      	mov	r7, r8
 80152c0:	106d      	asrs	r5, r5, #1
 80152c2:	d00b      	beq.n	80152dc <__pow5mult+0xa0>
 80152c4:	6820      	ldr	r0, [r4, #0]
 80152c6:	b938      	cbnz	r0, 80152d8 <__pow5mult+0x9c>
 80152c8:	4622      	mov	r2, r4
 80152ca:	4621      	mov	r1, r4
 80152cc:	4630      	mov	r0, r6
 80152ce:	f7ff ff0f 	bl	80150f0 <__multiply>
 80152d2:	6020      	str	r0, [r4, #0]
 80152d4:	f8c0 9000 	str.w	r9, [r0]
 80152d8:	4604      	mov	r4, r0
 80152da:	e7e4      	b.n	80152a6 <__pow5mult+0x6a>
 80152dc:	4638      	mov	r0, r7
 80152de:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80152e2:	bf00      	nop
 80152e4:	08017188 	.word	0x08017188
 80152e8:	08016fad 	.word	0x08016fad
 80152ec:	08017034 	.word	0x08017034

080152f0 <__lshift>:
 80152f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80152f4:	460c      	mov	r4, r1
 80152f6:	6849      	ldr	r1, [r1, #4]
 80152f8:	6923      	ldr	r3, [r4, #16]
 80152fa:	eb03 1862 	add.w	r8, r3, r2, asr #5
 80152fe:	68a3      	ldr	r3, [r4, #8]
 8015300:	4607      	mov	r7, r0
 8015302:	4691      	mov	r9, r2
 8015304:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8015308:	f108 0601 	add.w	r6, r8, #1
 801530c:	42b3      	cmp	r3, r6
 801530e:	db0b      	blt.n	8015328 <__lshift+0x38>
 8015310:	4638      	mov	r0, r7
 8015312:	f7ff fddb 	bl	8014ecc <_Balloc>
 8015316:	4605      	mov	r5, r0
 8015318:	b948      	cbnz	r0, 801532e <__lshift+0x3e>
 801531a:	4602      	mov	r2, r0
 801531c:	4b28      	ldr	r3, [pc, #160]	; (80153c0 <__lshift+0xd0>)
 801531e:	4829      	ldr	r0, [pc, #164]	; (80153c4 <__lshift+0xd4>)
 8015320:	f240 11d9 	movw	r1, #473	; 0x1d9
 8015324:	f000 fb76 	bl	8015a14 <__assert_func>
 8015328:	3101      	adds	r1, #1
 801532a:	005b      	lsls	r3, r3, #1
 801532c:	e7ee      	b.n	801530c <__lshift+0x1c>
 801532e:	2300      	movs	r3, #0
 8015330:	f100 0114 	add.w	r1, r0, #20
 8015334:	f100 0210 	add.w	r2, r0, #16
 8015338:	4618      	mov	r0, r3
 801533a:	4553      	cmp	r3, sl
 801533c:	db33      	blt.n	80153a6 <__lshift+0xb6>
 801533e:	6920      	ldr	r0, [r4, #16]
 8015340:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8015344:	f104 0314 	add.w	r3, r4, #20
 8015348:	f019 091f 	ands.w	r9, r9, #31
 801534c:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8015350:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8015354:	d02b      	beq.n	80153ae <__lshift+0xbe>
 8015356:	f1c9 0e20 	rsb	lr, r9, #32
 801535a:	468a      	mov	sl, r1
 801535c:	2200      	movs	r2, #0
 801535e:	6818      	ldr	r0, [r3, #0]
 8015360:	fa00 f009 	lsl.w	r0, r0, r9
 8015364:	4302      	orrs	r2, r0
 8015366:	f84a 2b04 	str.w	r2, [sl], #4
 801536a:	f853 2b04 	ldr.w	r2, [r3], #4
 801536e:	459c      	cmp	ip, r3
 8015370:	fa22 f20e 	lsr.w	r2, r2, lr
 8015374:	d8f3      	bhi.n	801535e <__lshift+0x6e>
 8015376:	ebac 0304 	sub.w	r3, ip, r4
 801537a:	3b15      	subs	r3, #21
 801537c:	f023 0303 	bic.w	r3, r3, #3
 8015380:	3304      	adds	r3, #4
 8015382:	f104 0015 	add.w	r0, r4, #21
 8015386:	4584      	cmp	ip, r0
 8015388:	bf38      	it	cc
 801538a:	2304      	movcc	r3, #4
 801538c:	50ca      	str	r2, [r1, r3]
 801538e:	b10a      	cbz	r2, 8015394 <__lshift+0xa4>
 8015390:	f108 0602 	add.w	r6, r8, #2
 8015394:	3e01      	subs	r6, #1
 8015396:	4638      	mov	r0, r7
 8015398:	612e      	str	r6, [r5, #16]
 801539a:	4621      	mov	r1, r4
 801539c:	f7ff fdd6 	bl	8014f4c <_Bfree>
 80153a0:	4628      	mov	r0, r5
 80153a2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80153a6:	f842 0f04 	str.w	r0, [r2, #4]!
 80153aa:	3301      	adds	r3, #1
 80153ac:	e7c5      	b.n	801533a <__lshift+0x4a>
 80153ae:	3904      	subs	r1, #4
 80153b0:	f853 2b04 	ldr.w	r2, [r3], #4
 80153b4:	f841 2f04 	str.w	r2, [r1, #4]!
 80153b8:	459c      	cmp	ip, r3
 80153ba:	d8f9      	bhi.n	80153b0 <__lshift+0xc0>
 80153bc:	e7ea      	b.n	8015394 <__lshift+0xa4>
 80153be:	bf00      	nop
 80153c0:	08017023 	.word	0x08017023
 80153c4:	08017034 	.word	0x08017034

080153c8 <__mcmp>:
 80153c8:	b530      	push	{r4, r5, lr}
 80153ca:	6902      	ldr	r2, [r0, #16]
 80153cc:	690c      	ldr	r4, [r1, #16]
 80153ce:	1b12      	subs	r2, r2, r4
 80153d0:	d10e      	bne.n	80153f0 <__mcmp+0x28>
 80153d2:	f100 0314 	add.w	r3, r0, #20
 80153d6:	3114      	adds	r1, #20
 80153d8:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 80153dc:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 80153e0:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 80153e4:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 80153e8:	42a5      	cmp	r5, r4
 80153ea:	d003      	beq.n	80153f4 <__mcmp+0x2c>
 80153ec:	d305      	bcc.n	80153fa <__mcmp+0x32>
 80153ee:	2201      	movs	r2, #1
 80153f0:	4610      	mov	r0, r2
 80153f2:	bd30      	pop	{r4, r5, pc}
 80153f4:	4283      	cmp	r3, r0
 80153f6:	d3f3      	bcc.n	80153e0 <__mcmp+0x18>
 80153f8:	e7fa      	b.n	80153f0 <__mcmp+0x28>
 80153fa:	f04f 32ff 	mov.w	r2, #4294967295
 80153fe:	e7f7      	b.n	80153f0 <__mcmp+0x28>

08015400 <__mdiff>:
 8015400:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015404:	460c      	mov	r4, r1
 8015406:	4606      	mov	r6, r0
 8015408:	4611      	mov	r1, r2
 801540a:	4620      	mov	r0, r4
 801540c:	4617      	mov	r7, r2
 801540e:	f7ff ffdb 	bl	80153c8 <__mcmp>
 8015412:	1e05      	subs	r5, r0, #0
 8015414:	d110      	bne.n	8015438 <__mdiff+0x38>
 8015416:	4629      	mov	r1, r5
 8015418:	4630      	mov	r0, r6
 801541a:	f7ff fd57 	bl	8014ecc <_Balloc>
 801541e:	b930      	cbnz	r0, 801542e <__mdiff+0x2e>
 8015420:	4b39      	ldr	r3, [pc, #228]	; (8015508 <__mdiff+0x108>)
 8015422:	4602      	mov	r2, r0
 8015424:	f240 2132 	movw	r1, #562	; 0x232
 8015428:	4838      	ldr	r0, [pc, #224]	; (801550c <__mdiff+0x10c>)
 801542a:	f000 faf3 	bl	8015a14 <__assert_func>
 801542e:	2301      	movs	r3, #1
 8015430:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8015434:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015438:	bfa4      	itt	ge
 801543a:	463b      	movge	r3, r7
 801543c:	4627      	movge	r7, r4
 801543e:	4630      	mov	r0, r6
 8015440:	6879      	ldr	r1, [r7, #4]
 8015442:	bfa6      	itte	ge
 8015444:	461c      	movge	r4, r3
 8015446:	2500      	movge	r5, #0
 8015448:	2501      	movlt	r5, #1
 801544a:	f7ff fd3f 	bl	8014ecc <_Balloc>
 801544e:	b920      	cbnz	r0, 801545a <__mdiff+0x5a>
 8015450:	4b2d      	ldr	r3, [pc, #180]	; (8015508 <__mdiff+0x108>)
 8015452:	4602      	mov	r2, r0
 8015454:	f44f 7110 	mov.w	r1, #576	; 0x240
 8015458:	e7e6      	b.n	8015428 <__mdiff+0x28>
 801545a:	693e      	ldr	r6, [r7, #16]
 801545c:	60c5      	str	r5, [r0, #12]
 801545e:	6925      	ldr	r5, [r4, #16]
 8015460:	f107 0114 	add.w	r1, r7, #20
 8015464:	f104 0914 	add.w	r9, r4, #20
 8015468:	f100 0e14 	add.w	lr, r0, #20
 801546c:	f107 0210 	add.w	r2, r7, #16
 8015470:	eb01 0c86 	add.w	ip, r1, r6, lsl #2
 8015474:	eb09 0585 	add.w	r5, r9, r5, lsl #2
 8015478:	46f2      	mov	sl, lr
 801547a:	2700      	movs	r7, #0
 801547c:	f859 3b04 	ldr.w	r3, [r9], #4
 8015480:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8015484:	fa1f f883 	uxth.w	r8, r3
 8015488:	fa17 f78b 	uxtah	r7, r7, fp
 801548c:	0c1b      	lsrs	r3, r3, #16
 801548e:	eba7 0808 	sub.w	r8, r7, r8
 8015492:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8015496:	eb03 4328 	add.w	r3, r3, r8, asr #16
 801549a:	fa1f f888 	uxth.w	r8, r8
 801549e:	141f      	asrs	r7, r3, #16
 80154a0:	454d      	cmp	r5, r9
 80154a2:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 80154a6:	f84a 3b04 	str.w	r3, [sl], #4
 80154aa:	d8e7      	bhi.n	801547c <__mdiff+0x7c>
 80154ac:	1b2b      	subs	r3, r5, r4
 80154ae:	3b15      	subs	r3, #21
 80154b0:	f023 0303 	bic.w	r3, r3, #3
 80154b4:	3304      	adds	r3, #4
 80154b6:	3415      	adds	r4, #21
 80154b8:	42a5      	cmp	r5, r4
 80154ba:	bf38      	it	cc
 80154bc:	2304      	movcc	r3, #4
 80154be:	4419      	add	r1, r3
 80154c0:	4473      	add	r3, lr
 80154c2:	469e      	mov	lr, r3
 80154c4:	460d      	mov	r5, r1
 80154c6:	4565      	cmp	r5, ip
 80154c8:	d30e      	bcc.n	80154e8 <__mdiff+0xe8>
 80154ca:	f10c 0203 	add.w	r2, ip, #3
 80154ce:	1a52      	subs	r2, r2, r1
 80154d0:	f022 0203 	bic.w	r2, r2, #3
 80154d4:	3903      	subs	r1, #3
 80154d6:	458c      	cmp	ip, r1
 80154d8:	bf38      	it	cc
 80154da:	2200      	movcc	r2, #0
 80154dc:	441a      	add	r2, r3
 80154de:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 80154e2:	b17b      	cbz	r3, 8015504 <__mdiff+0x104>
 80154e4:	6106      	str	r6, [r0, #16]
 80154e6:	e7a5      	b.n	8015434 <__mdiff+0x34>
 80154e8:	f855 8b04 	ldr.w	r8, [r5], #4
 80154ec:	fa17 f488 	uxtah	r4, r7, r8
 80154f0:	1422      	asrs	r2, r4, #16
 80154f2:	eb02 4218 	add.w	r2, r2, r8, lsr #16
 80154f6:	b2a4      	uxth	r4, r4
 80154f8:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80154fc:	f84e 4b04 	str.w	r4, [lr], #4
 8015500:	1417      	asrs	r7, r2, #16
 8015502:	e7e0      	b.n	80154c6 <__mdiff+0xc6>
 8015504:	3e01      	subs	r6, #1
 8015506:	e7ea      	b.n	80154de <__mdiff+0xde>
 8015508:	08017023 	.word	0x08017023
 801550c:	08017034 	.word	0x08017034

08015510 <__d2b>:
 8015510:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8015514:	4689      	mov	r9, r1
 8015516:	2101      	movs	r1, #1
 8015518:	ec57 6b10 	vmov	r6, r7, d0
 801551c:	4690      	mov	r8, r2
 801551e:	f7ff fcd5 	bl	8014ecc <_Balloc>
 8015522:	4604      	mov	r4, r0
 8015524:	b930      	cbnz	r0, 8015534 <__d2b+0x24>
 8015526:	4602      	mov	r2, r0
 8015528:	4b25      	ldr	r3, [pc, #148]	; (80155c0 <__d2b+0xb0>)
 801552a:	4826      	ldr	r0, [pc, #152]	; (80155c4 <__d2b+0xb4>)
 801552c:	f240 310a 	movw	r1, #778	; 0x30a
 8015530:	f000 fa70 	bl	8015a14 <__assert_func>
 8015534:	f3c7 550a 	ubfx	r5, r7, #20, #11
 8015538:	f3c7 0313 	ubfx	r3, r7, #0, #20
 801553c:	bb35      	cbnz	r5, 801558c <__d2b+0x7c>
 801553e:	2e00      	cmp	r6, #0
 8015540:	9301      	str	r3, [sp, #4]
 8015542:	d028      	beq.n	8015596 <__d2b+0x86>
 8015544:	4668      	mov	r0, sp
 8015546:	9600      	str	r6, [sp, #0]
 8015548:	f7ff fd8c 	bl	8015064 <__lo0bits>
 801554c:	9900      	ldr	r1, [sp, #0]
 801554e:	b300      	cbz	r0, 8015592 <__d2b+0x82>
 8015550:	9a01      	ldr	r2, [sp, #4]
 8015552:	f1c0 0320 	rsb	r3, r0, #32
 8015556:	fa02 f303 	lsl.w	r3, r2, r3
 801555a:	430b      	orrs	r3, r1
 801555c:	40c2      	lsrs	r2, r0
 801555e:	6163      	str	r3, [r4, #20]
 8015560:	9201      	str	r2, [sp, #4]
 8015562:	9b01      	ldr	r3, [sp, #4]
 8015564:	61a3      	str	r3, [r4, #24]
 8015566:	2b00      	cmp	r3, #0
 8015568:	bf14      	ite	ne
 801556a:	2202      	movne	r2, #2
 801556c:	2201      	moveq	r2, #1
 801556e:	6122      	str	r2, [r4, #16]
 8015570:	b1d5      	cbz	r5, 80155a8 <__d2b+0x98>
 8015572:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8015576:	4405      	add	r5, r0
 8015578:	f8c9 5000 	str.w	r5, [r9]
 801557c:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8015580:	f8c8 0000 	str.w	r0, [r8]
 8015584:	4620      	mov	r0, r4
 8015586:	b003      	add	sp, #12
 8015588:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801558c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8015590:	e7d5      	b.n	801553e <__d2b+0x2e>
 8015592:	6161      	str	r1, [r4, #20]
 8015594:	e7e5      	b.n	8015562 <__d2b+0x52>
 8015596:	a801      	add	r0, sp, #4
 8015598:	f7ff fd64 	bl	8015064 <__lo0bits>
 801559c:	9b01      	ldr	r3, [sp, #4]
 801559e:	6163      	str	r3, [r4, #20]
 80155a0:	2201      	movs	r2, #1
 80155a2:	6122      	str	r2, [r4, #16]
 80155a4:	3020      	adds	r0, #32
 80155a6:	e7e3      	b.n	8015570 <__d2b+0x60>
 80155a8:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 80155ac:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 80155b0:	f8c9 0000 	str.w	r0, [r9]
 80155b4:	6918      	ldr	r0, [r3, #16]
 80155b6:	f7ff fd35 	bl	8015024 <__hi0bits>
 80155ba:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 80155be:	e7df      	b.n	8015580 <__d2b+0x70>
 80155c0:	08017023 	.word	0x08017023
 80155c4:	08017034 	.word	0x08017034

080155c8 <_calloc_r>:
 80155c8:	b513      	push	{r0, r1, r4, lr}
 80155ca:	434a      	muls	r2, r1
 80155cc:	4611      	mov	r1, r2
 80155ce:	9201      	str	r2, [sp, #4]
 80155d0:	f000 f85a 	bl	8015688 <_malloc_r>
 80155d4:	4604      	mov	r4, r0
 80155d6:	b118      	cbz	r0, 80155e0 <_calloc_r+0x18>
 80155d8:	9a01      	ldr	r2, [sp, #4]
 80155da:	2100      	movs	r1, #0
 80155dc:	f7fe f9d6 	bl	801398c <memset>
 80155e0:	4620      	mov	r0, r4
 80155e2:	b002      	add	sp, #8
 80155e4:	bd10      	pop	{r4, pc}
	...

080155e8 <_free_r>:
 80155e8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80155ea:	2900      	cmp	r1, #0
 80155ec:	d048      	beq.n	8015680 <_free_r+0x98>
 80155ee:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80155f2:	9001      	str	r0, [sp, #4]
 80155f4:	2b00      	cmp	r3, #0
 80155f6:	f1a1 0404 	sub.w	r4, r1, #4
 80155fa:	bfb8      	it	lt
 80155fc:	18e4      	addlt	r4, r4, r3
 80155fe:	f000 fa65 	bl	8015acc <__malloc_lock>
 8015602:	4a20      	ldr	r2, [pc, #128]	; (8015684 <_free_r+0x9c>)
 8015604:	9801      	ldr	r0, [sp, #4]
 8015606:	6813      	ldr	r3, [r2, #0]
 8015608:	4615      	mov	r5, r2
 801560a:	b933      	cbnz	r3, 801561a <_free_r+0x32>
 801560c:	6063      	str	r3, [r4, #4]
 801560e:	6014      	str	r4, [r2, #0]
 8015610:	b003      	add	sp, #12
 8015612:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8015616:	f000 ba5f 	b.w	8015ad8 <__malloc_unlock>
 801561a:	42a3      	cmp	r3, r4
 801561c:	d90b      	bls.n	8015636 <_free_r+0x4e>
 801561e:	6821      	ldr	r1, [r4, #0]
 8015620:	1862      	adds	r2, r4, r1
 8015622:	4293      	cmp	r3, r2
 8015624:	bf04      	itt	eq
 8015626:	681a      	ldreq	r2, [r3, #0]
 8015628:	685b      	ldreq	r3, [r3, #4]
 801562a:	6063      	str	r3, [r4, #4]
 801562c:	bf04      	itt	eq
 801562e:	1852      	addeq	r2, r2, r1
 8015630:	6022      	streq	r2, [r4, #0]
 8015632:	602c      	str	r4, [r5, #0]
 8015634:	e7ec      	b.n	8015610 <_free_r+0x28>
 8015636:	461a      	mov	r2, r3
 8015638:	685b      	ldr	r3, [r3, #4]
 801563a:	b10b      	cbz	r3, 8015640 <_free_r+0x58>
 801563c:	42a3      	cmp	r3, r4
 801563e:	d9fa      	bls.n	8015636 <_free_r+0x4e>
 8015640:	6811      	ldr	r1, [r2, #0]
 8015642:	1855      	adds	r5, r2, r1
 8015644:	42a5      	cmp	r5, r4
 8015646:	d10b      	bne.n	8015660 <_free_r+0x78>
 8015648:	6824      	ldr	r4, [r4, #0]
 801564a:	4421      	add	r1, r4
 801564c:	1854      	adds	r4, r2, r1
 801564e:	42a3      	cmp	r3, r4
 8015650:	6011      	str	r1, [r2, #0]
 8015652:	d1dd      	bne.n	8015610 <_free_r+0x28>
 8015654:	681c      	ldr	r4, [r3, #0]
 8015656:	685b      	ldr	r3, [r3, #4]
 8015658:	6053      	str	r3, [r2, #4]
 801565a:	4421      	add	r1, r4
 801565c:	6011      	str	r1, [r2, #0]
 801565e:	e7d7      	b.n	8015610 <_free_r+0x28>
 8015660:	d902      	bls.n	8015668 <_free_r+0x80>
 8015662:	230c      	movs	r3, #12
 8015664:	6003      	str	r3, [r0, #0]
 8015666:	e7d3      	b.n	8015610 <_free_r+0x28>
 8015668:	6825      	ldr	r5, [r4, #0]
 801566a:	1961      	adds	r1, r4, r5
 801566c:	428b      	cmp	r3, r1
 801566e:	bf04      	itt	eq
 8015670:	6819      	ldreq	r1, [r3, #0]
 8015672:	685b      	ldreq	r3, [r3, #4]
 8015674:	6063      	str	r3, [r4, #4]
 8015676:	bf04      	itt	eq
 8015678:	1949      	addeq	r1, r1, r5
 801567a:	6021      	streq	r1, [r4, #0]
 801567c:	6054      	str	r4, [r2, #4]
 801567e:	e7c7      	b.n	8015610 <_free_r+0x28>
 8015680:	b003      	add	sp, #12
 8015682:	bd30      	pop	{r4, r5, pc}
 8015684:	2400039c 	.word	0x2400039c

08015688 <_malloc_r>:
 8015688:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801568a:	1ccd      	adds	r5, r1, #3
 801568c:	f025 0503 	bic.w	r5, r5, #3
 8015690:	3508      	adds	r5, #8
 8015692:	2d0c      	cmp	r5, #12
 8015694:	bf38      	it	cc
 8015696:	250c      	movcc	r5, #12
 8015698:	2d00      	cmp	r5, #0
 801569a:	4606      	mov	r6, r0
 801569c:	db01      	blt.n	80156a2 <_malloc_r+0x1a>
 801569e:	42a9      	cmp	r1, r5
 80156a0:	d903      	bls.n	80156aa <_malloc_r+0x22>
 80156a2:	230c      	movs	r3, #12
 80156a4:	6033      	str	r3, [r6, #0]
 80156a6:	2000      	movs	r0, #0
 80156a8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80156aa:	f000 fa0f 	bl	8015acc <__malloc_lock>
 80156ae:	4921      	ldr	r1, [pc, #132]	; (8015734 <_malloc_r+0xac>)
 80156b0:	680a      	ldr	r2, [r1, #0]
 80156b2:	4614      	mov	r4, r2
 80156b4:	b99c      	cbnz	r4, 80156de <_malloc_r+0x56>
 80156b6:	4f20      	ldr	r7, [pc, #128]	; (8015738 <_malloc_r+0xb0>)
 80156b8:	683b      	ldr	r3, [r7, #0]
 80156ba:	b923      	cbnz	r3, 80156c6 <_malloc_r+0x3e>
 80156bc:	4621      	mov	r1, r4
 80156be:	4630      	mov	r0, r6
 80156c0:	f000 f998 	bl	80159f4 <_sbrk_r>
 80156c4:	6038      	str	r0, [r7, #0]
 80156c6:	4629      	mov	r1, r5
 80156c8:	4630      	mov	r0, r6
 80156ca:	f000 f993 	bl	80159f4 <_sbrk_r>
 80156ce:	1c43      	adds	r3, r0, #1
 80156d0:	d123      	bne.n	801571a <_malloc_r+0x92>
 80156d2:	230c      	movs	r3, #12
 80156d4:	6033      	str	r3, [r6, #0]
 80156d6:	4630      	mov	r0, r6
 80156d8:	f000 f9fe 	bl	8015ad8 <__malloc_unlock>
 80156dc:	e7e3      	b.n	80156a6 <_malloc_r+0x1e>
 80156de:	6823      	ldr	r3, [r4, #0]
 80156e0:	1b5b      	subs	r3, r3, r5
 80156e2:	d417      	bmi.n	8015714 <_malloc_r+0x8c>
 80156e4:	2b0b      	cmp	r3, #11
 80156e6:	d903      	bls.n	80156f0 <_malloc_r+0x68>
 80156e8:	6023      	str	r3, [r4, #0]
 80156ea:	441c      	add	r4, r3
 80156ec:	6025      	str	r5, [r4, #0]
 80156ee:	e004      	b.n	80156fa <_malloc_r+0x72>
 80156f0:	6863      	ldr	r3, [r4, #4]
 80156f2:	42a2      	cmp	r2, r4
 80156f4:	bf0c      	ite	eq
 80156f6:	600b      	streq	r3, [r1, #0]
 80156f8:	6053      	strne	r3, [r2, #4]
 80156fa:	4630      	mov	r0, r6
 80156fc:	f000 f9ec 	bl	8015ad8 <__malloc_unlock>
 8015700:	f104 000b 	add.w	r0, r4, #11
 8015704:	1d23      	adds	r3, r4, #4
 8015706:	f020 0007 	bic.w	r0, r0, #7
 801570a:	1ac2      	subs	r2, r0, r3
 801570c:	d0cc      	beq.n	80156a8 <_malloc_r+0x20>
 801570e:	1a1b      	subs	r3, r3, r0
 8015710:	50a3      	str	r3, [r4, r2]
 8015712:	e7c9      	b.n	80156a8 <_malloc_r+0x20>
 8015714:	4622      	mov	r2, r4
 8015716:	6864      	ldr	r4, [r4, #4]
 8015718:	e7cc      	b.n	80156b4 <_malloc_r+0x2c>
 801571a:	1cc4      	adds	r4, r0, #3
 801571c:	f024 0403 	bic.w	r4, r4, #3
 8015720:	42a0      	cmp	r0, r4
 8015722:	d0e3      	beq.n	80156ec <_malloc_r+0x64>
 8015724:	1a21      	subs	r1, r4, r0
 8015726:	4630      	mov	r0, r6
 8015728:	f000 f964 	bl	80159f4 <_sbrk_r>
 801572c:	3001      	adds	r0, #1
 801572e:	d1dd      	bne.n	80156ec <_malloc_r+0x64>
 8015730:	e7cf      	b.n	80156d2 <_malloc_r+0x4a>
 8015732:	bf00      	nop
 8015734:	2400039c 	.word	0x2400039c
 8015738:	240003a0 	.word	0x240003a0

0801573c <__ssputs_r>:
 801573c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8015740:	688e      	ldr	r6, [r1, #8]
 8015742:	429e      	cmp	r6, r3
 8015744:	4682      	mov	sl, r0
 8015746:	460c      	mov	r4, r1
 8015748:	4690      	mov	r8, r2
 801574a:	461f      	mov	r7, r3
 801574c:	d838      	bhi.n	80157c0 <__ssputs_r+0x84>
 801574e:	898a      	ldrh	r2, [r1, #12]
 8015750:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8015754:	d032      	beq.n	80157bc <__ssputs_r+0x80>
 8015756:	6825      	ldr	r5, [r4, #0]
 8015758:	6909      	ldr	r1, [r1, #16]
 801575a:	eba5 0901 	sub.w	r9, r5, r1
 801575e:	6965      	ldr	r5, [r4, #20]
 8015760:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8015764:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8015768:	3301      	adds	r3, #1
 801576a:	444b      	add	r3, r9
 801576c:	106d      	asrs	r5, r5, #1
 801576e:	429d      	cmp	r5, r3
 8015770:	bf38      	it	cc
 8015772:	461d      	movcc	r5, r3
 8015774:	0553      	lsls	r3, r2, #21
 8015776:	d531      	bpl.n	80157dc <__ssputs_r+0xa0>
 8015778:	4629      	mov	r1, r5
 801577a:	f7ff ff85 	bl	8015688 <_malloc_r>
 801577e:	4606      	mov	r6, r0
 8015780:	b950      	cbnz	r0, 8015798 <__ssputs_r+0x5c>
 8015782:	230c      	movs	r3, #12
 8015784:	f8ca 3000 	str.w	r3, [sl]
 8015788:	89a3      	ldrh	r3, [r4, #12]
 801578a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801578e:	81a3      	strh	r3, [r4, #12]
 8015790:	f04f 30ff 	mov.w	r0, #4294967295
 8015794:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8015798:	6921      	ldr	r1, [r4, #16]
 801579a:	464a      	mov	r2, r9
 801579c:	f7fe f8e8 	bl	8013970 <memcpy>
 80157a0:	89a3      	ldrh	r3, [r4, #12]
 80157a2:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80157a6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80157aa:	81a3      	strh	r3, [r4, #12]
 80157ac:	6126      	str	r6, [r4, #16]
 80157ae:	6165      	str	r5, [r4, #20]
 80157b0:	444e      	add	r6, r9
 80157b2:	eba5 0509 	sub.w	r5, r5, r9
 80157b6:	6026      	str	r6, [r4, #0]
 80157b8:	60a5      	str	r5, [r4, #8]
 80157ba:	463e      	mov	r6, r7
 80157bc:	42be      	cmp	r6, r7
 80157be:	d900      	bls.n	80157c2 <__ssputs_r+0x86>
 80157c0:	463e      	mov	r6, r7
 80157c2:	4632      	mov	r2, r6
 80157c4:	6820      	ldr	r0, [r4, #0]
 80157c6:	4641      	mov	r1, r8
 80157c8:	f000 f966 	bl	8015a98 <memmove>
 80157cc:	68a3      	ldr	r3, [r4, #8]
 80157ce:	6822      	ldr	r2, [r4, #0]
 80157d0:	1b9b      	subs	r3, r3, r6
 80157d2:	4432      	add	r2, r6
 80157d4:	60a3      	str	r3, [r4, #8]
 80157d6:	6022      	str	r2, [r4, #0]
 80157d8:	2000      	movs	r0, #0
 80157da:	e7db      	b.n	8015794 <__ssputs_r+0x58>
 80157dc:	462a      	mov	r2, r5
 80157de:	f000 f981 	bl	8015ae4 <_realloc_r>
 80157e2:	4606      	mov	r6, r0
 80157e4:	2800      	cmp	r0, #0
 80157e6:	d1e1      	bne.n	80157ac <__ssputs_r+0x70>
 80157e8:	6921      	ldr	r1, [r4, #16]
 80157ea:	4650      	mov	r0, sl
 80157ec:	f7ff fefc 	bl	80155e8 <_free_r>
 80157f0:	e7c7      	b.n	8015782 <__ssputs_r+0x46>
	...

080157f4 <_svfiprintf_r>:
 80157f4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80157f8:	4698      	mov	r8, r3
 80157fa:	898b      	ldrh	r3, [r1, #12]
 80157fc:	061b      	lsls	r3, r3, #24
 80157fe:	b09d      	sub	sp, #116	; 0x74
 8015800:	4607      	mov	r7, r0
 8015802:	460d      	mov	r5, r1
 8015804:	4614      	mov	r4, r2
 8015806:	d50e      	bpl.n	8015826 <_svfiprintf_r+0x32>
 8015808:	690b      	ldr	r3, [r1, #16]
 801580a:	b963      	cbnz	r3, 8015826 <_svfiprintf_r+0x32>
 801580c:	2140      	movs	r1, #64	; 0x40
 801580e:	f7ff ff3b 	bl	8015688 <_malloc_r>
 8015812:	6028      	str	r0, [r5, #0]
 8015814:	6128      	str	r0, [r5, #16]
 8015816:	b920      	cbnz	r0, 8015822 <_svfiprintf_r+0x2e>
 8015818:	230c      	movs	r3, #12
 801581a:	603b      	str	r3, [r7, #0]
 801581c:	f04f 30ff 	mov.w	r0, #4294967295
 8015820:	e0d1      	b.n	80159c6 <_svfiprintf_r+0x1d2>
 8015822:	2340      	movs	r3, #64	; 0x40
 8015824:	616b      	str	r3, [r5, #20]
 8015826:	2300      	movs	r3, #0
 8015828:	9309      	str	r3, [sp, #36]	; 0x24
 801582a:	2320      	movs	r3, #32
 801582c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8015830:	f8cd 800c 	str.w	r8, [sp, #12]
 8015834:	2330      	movs	r3, #48	; 0x30
 8015836:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 80159e0 <_svfiprintf_r+0x1ec>
 801583a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 801583e:	f04f 0901 	mov.w	r9, #1
 8015842:	4623      	mov	r3, r4
 8015844:	469a      	mov	sl, r3
 8015846:	f813 2b01 	ldrb.w	r2, [r3], #1
 801584a:	b10a      	cbz	r2, 8015850 <_svfiprintf_r+0x5c>
 801584c:	2a25      	cmp	r2, #37	; 0x25
 801584e:	d1f9      	bne.n	8015844 <_svfiprintf_r+0x50>
 8015850:	ebba 0b04 	subs.w	fp, sl, r4
 8015854:	d00b      	beq.n	801586e <_svfiprintf_r+0x7a>
 8015856:	465b      	mov	r3, fp
 8015858:	4622      	mov	r2, r4
 801585a:	4629      	mov	r1, r5
 801585c:	4638      	mov	r0, r7
 801585e:	f7ff ff6d 	bl	801573c <__ssputs_r>
 8015862:	3001      	adds	r0, #1
 8015864:	f000 80aa 	beq.w	80159bc <_svfiprintf_r+0x1c8>
 8015868:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801586a:	445a      	add	r2, fp
 801586c:	9209      	str	r2, [sp, #36]	; 0x24
 801586e:	f89a 3000 	ldrb.w	r3, [sl]
 8015872:	2b00      	cmp	r3, #0
 8015874:	f000 80a2 	beq.w	80159bc <_svfiprintf_r+0x1c8>
 8015878:	2300      	movs	r3, #0
 801587a:	f04f 32ff 	mov.w	r2, #4294967295
 801587e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8015882:	f10a 0a01 	add.w	sl, sl, #1
 8015886:	9304      	str	r3, [sp, #16]
 8015888:	9307      	str	r3, [sp, #28]
 801588a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 801588e:	931a      	str	r3, [sp, #104]	; 0x68
 8015890:	4654      	mov	r4, sl
 8015892:	2205      	movs	r2, #5
 8015894:	f814 1b01 	ldrb.w	r1, [r4], #1
 8015898:	4851      	ldr	r0, [pc, #324]	; (80159e0 <_svfiprintf_r+0x1ec>)
 801589a:	f7ea fd29 	bl	80002f0 <memchr>
 801589e:	9a04      	ldr	r2, [sp, #16]
 80158a0:	b9d8      	cbnz	r0, 80158da <_svfiprintf_r+0xe6>
 80158a2:	06d0      	lsls	r0, r2, #27
 80158a4:	bf44      	itt	mi
 80158a6:	2320      	movmi	r3, #32
 80158a8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80158ac:	0711      	lsls	r1, r2, #28
 80158ae:	bf44      	itt	mi
 80158b0:	232b      	movmi	r3, #43	; 0x2b
 80158b2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80158b6:	f89a 3000 	ldrb.w	r3, [sl]
 80158ba:	2b2a      	cmp	r3, #42	; 0x2a
 80158bc:	d015      	beq.n	80158ea <_svfiprintf_r+0xf6>
 80158be:	9a07      	ldr	r2, [sp, #28]
 80158c0:	4654      	mov	r4, sl
 80158c2:	2000      	movs	r0, #0
 80158c4:	f04f 0c0a 	mov.w	ip, #10
 80158c8:	4621      	mov	r1, r4
 80158ca:	f811 3b01 	ldrb.w	r3, [r1], #1
 80158ce:	3b30      	subs	r3, #48	; 0x30
 80158d0:	2b09      	cmp	r3, #9
 80158d2:	d94e      	bls.n	8015972 <_svfiprintf_r+0x17e>
 80158d4:	b1b0      	cbz	r0, 8015904 <_svfiprintf_r+0x110>
 80158d6:	9207      	str	r2, [sp, #28]
 80158d8:	e014      	b.n	8015904 <_svfiprintf_r+0x110>
 80158da:	eba0 0308 	sub.w	r3, r0, r8
 80158de:	fa09 f303 	lsl.w	r3, r9, r3
 80158e2:	4313      	orrs	r3, r2
 80158e4:	9304      	str	r3, [sp, #16]
 80158e6:	46a2      	mov	sl, r4
 80158e8:	e7d2      	b.n	8015890 <_svfiprintf_r+0x9c>
 80158ea:	9b03      	ldr	r3, [sp, #12]
 80158ec:	1d19      	adds	r1, r3, #4
 80158ee:	681b      	ldr	r3, [r3, #0]
 80158f0:	9103      	str	r1, [sp, #12]
 80158f2:	2b00      	cmp	r3, #0
 80158f4:	bfbb      	ittet	lt
 80158f6:	425b      	neglt	r3, r3
 80158f8:	f042 0202 	orrlt.w	r2, r2, #2
 80158fc:	9307      	strge	r3, [sp, #28]
 80158fe:	9307      	strlt	r3, [sp, #28]
 8015900:	bfb8      	it	lt
 8015902:	9204      	strlt	r2, [sp, #16]
 8015904:	7823      	ldrb	r3, [r4, #0]
 8015906:	2b2e      	cmp	r3, #46	; 0x2e
 8015908:	d10c      	bne.n	8015924 <_svfiprintf_r+0x130>
 801590a:	7863      	ldrb	r3, [r4, #1]
 801590c:	2b2a      	cmp	r3, #42	; 0x2a
 801590e:	d135      	bne.n	801597c <_svfiprintf_r+0x188>
 8015910:	9b03      	ldr	r3, [sp, #12]
 8015912:	1d1a      	adds	r2, r3, #4
 8015914:	681b      	ldr	r3, [r3, #0]
 8015916:	9203      	str	r2, [sp, #12]
 8015918:	2b00      	cmp	r3, #0
 801591a:	bfb8      	it	lt
 801591c:	f04f 33ff 	movlt.w	r3, #4294967295
 8015920:	3402      	adds	r4, #2
 8015922:	9305      	str	r3, [sp, #20]
 8015924:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 80159f0 <_svfiprintf_r+0x1fc>
 8015928:	7821      	ldrb	r1, [r4, #0]
 801592a:	2203      	movs	r2, #3
 801592c:	4650      	mov	r0, sl
 801592e:	f7ea fcdf 	bl	80002f0 <memchr>
 8015932:	b140      	cbz	r0, 8015946 <_svfiprintf_r+0x152>
 8015934:	2340      	movs	r3, #64	; 0x40
 8015936:	eba0 000a 	sub.w	r0, r0, sl
 801593a:	fa03 f000 	lsl.w	r0, r3, r0
 801593e:	9b04      	ldr	r3, [sp, #16]
 8015940:	4303      	orrs	r3, r0
 8015942:	3401      	adds	r4, #1
 8015944:	9304      	str	r3, [sp, #16]
 8015946:	f814 1b01 	ldrb.w	r1, [r4], #1
 801594a:	4826      	ldr	r0, [pc, #152]	; (80159e4 <_svfiprintf_r+0x1f0>)
 801594c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8015950:	2206      	movs	r2, #6
 8015952:	f7ea fccd 	bl	80002f0 <memchr>
 8015956:	2800      	cmp	r0, #0
 8015958:	d038      	beq.n	80159cc <_svfiprintf_r+0x1d8>
 801595a:	4b23      	ldr	r3, [pc, #140]	; (80159e8 <_svfiprintf_r+0x1f4>)
 801595c:	bb1b      	cbnz	r3, 80159a6 <_svfiprintf_r+0x1b2>
 801595e:	9b03      	ldr	r3, [sp, #12]
 8015960:	3307      	adds	r3, #7
 8015962:	f023 0307 	bic.w	r3, r3, #7
 8015966:	3308      	adds	r3, #8
 8015968:	9303      	str	r3, [sp, #12]
 801596a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801596c:	4433      	add	r3, r6
 801596e:	9309      	str	r3, [sp, #36]	; 0x24
 8015970:	e767      	b.n	8015842 <_svfiprintf_r+0x4e>
 8015972:	fb0c 3202 	mla	r2, ip, r2, r3
 8015976:	460c      	mov	r4, r1
 8015978:	2001      	movs	r0, #1
 801597a:	e7a5      	b.n	80158c8 <_svfiprintf_r+0xd4>
 801597c:	2300      	movs	r3, #0
 801597e:	3401      	adds	r4, #1
 8015980:	9305      	str	r3, [sp, #20]
 8015982:	4619      	mov	r1, r3
 8015984:	f04f 0c0a 	mov.w	ip, #10
 8015988:	4620      	mov	r0, r4
 801598a:	f810 2b01 	ldrb.w	r2, [r0], #1
 801598e:	3a30      	subs	r2, #48	; 0x30
 8015990:	2a09      	cmp	r2, #9
 8015992:	d903      	bls.n	801599c <_svfiprintf_r+0x1a8>
 8015994:	2b00      	cmp	r3, #0
 8015996:	d0c5      	beq.n	8015924 <_svfiprintf_r+0x130>
 8015998:	9105      	str	r1, [sp, #20]
 801599a:	e7c3      	b.n	8015924 <_svfiprintf_r+0x130>
 801599c:	fb0c 2101 	mla	r1, ip, r1, r2
 80159a0:	4604      	mov	r4, r0
 80159a2:	2301      	movs	r3, #1
 80159a4:	e7f0      	b.n	8015988 <_svfiprintf_r+0x194>
 80159a6:	ab03      	add	r3, sp, #12
 80159a8:	9300      	str	r3, [sp, #0]
 80159aa:	462a      	mov	r2, r5
 80159ac:	4b0f      	ldr	r3, [pc, #60]	; (80159ec <_svfiprintf_r+0x1f8>)
 80159ae:	a904      	add	r1, sp, #16
 80159b0:	4638      	mov	r0, r7
 80159b2:	f7fe f885 	bl	8013ac0 <_printf_float>
 80159b6:	1c42      	adds	r2, r0, #1
 80159b8:	4606      	mov	r6, r0
 80159ba:	d1d6      	bne.n	801596a <_svfiprintf_r+0x176>
 80159bc:	89ab      	ldrh	r3, [r5, #12]
 80159be:	065b      	lsls	r3, r3, #25
 80159c0:	f53f af2c 	bmi.w	801581c <_svfiprintf_r+0x28>
 80159c4:	9809      	ldr	r0, [sp, #36]	; 0x24
 80159c6:	b01d      	add	sp, #116	; 0x74
 80159c8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80159cc:	ab03      	add	r3, sp, #12
 80159ce:	9300      	str	r3, [sp, #0]
 80159d0:	462a      	mov	r2, r5
 80159d2:	4b06      	ldr	r3, [pc, #24]	; (80159ec <_svfiprintf_r+0x1f8>)
 80159d4:	a904      	add	r1, sp, #16
 80159d6:	4638      	mov	r0, r7
 80159d8:	f7fe fafe 	bl	8013fd8 <_printf_i>
 80159dc:	e7eb      	b.n	80159b6 <_svfiprintf_r+0x1c2>
 80159de:	bf00      	nop
 80159e0:	08017194 	.word	0x08017194
 80159e4:	0801719e 	.word	0x0801719e
 80159e8:	08013ac1 	.word	0x08013ac1
 80159ec:	0801573d 	.word	0x0801573d
 80159f0:	0801719a 	.word	0x0801719a

080159f4 <_sbrk_r>:
 80159f4:	b538      	push	{r3, r4, r5, lr}
 80159f6:	4d06      	ldr	r5, [pc, #24]	; (8015a10 <_sbrk_r+0x1c>)
 80159f8:	2300      	movs	r3, #0
 80159fa:	4604      	mov	r4, r0
 80159fc:	4608      	mov	r0, r1
 80159fe:	602b      	str	r3, [r5, #0]
 8015a00:	f7ec faac 	bl	8001f5c <_sbrk>
 8015a04:	1c43      	adds	r3, r0, #1
 8015a06:	d102      	bne.n	8015a0e <_sbrk_r+0x1a>
 8015a08:	682b      	ldr	r3, [r5, #0]
 8015a0a:	b103      	cbz	r3, 8015a0e <_sbrk_r+0x1a>
 8015a0c:	6023      	str	r3, [r4, #0]
 8015a0e:	bd38      	pop	{r3, r4, r5, pc}
 8015a10:	240016bc 	.word	0x240016bc

08015a14 <__assert_func>:
 8015a14:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8015a16:	4614      	mov	r4, r2
 8015a18:	461a      	mov	r2, r3
 8015a1a:	4b09      	ldr	r3, [pc, #36]	; (8015a40 <__assert_func+0x2c>)
 8015a1c:	681b      	ldr	r3, [r3, #0]
 8015a1e:	4605      	mov	r5, r0
 8015a20:	68d8      	ldr	r0, [r3, #12]
 8015a22:	b14c      	cbz	r4, 8015a38 <__assert_func+0x24>
 8015a24:	4b07      	ldr	r3, [pc, #28]	; (8015a44 <__assert_func+0x30>)
 8015a26:	9100      	str	r1, [sp, #0]
 8015a28:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8015a2c:	4906      	ldr	r1, [pc, #24]	; (8015a48 <__assert_func+0x34>)
 8015a2e:	462b      	mov	r3, r5
 8015a30:	f000 f80e 	bl	8015a50 <fiprintf>
 8015a34:	f000 faa4 	bl	8015f80 <abort>
 8015a38:	4b04      	ldr	r3, [pc, #16]	; (8015a4c <__assert_func+0x38>)
 8015a3a:	461c      	mov	r4, r3
 8015a3c:	e7f3      	b.n	8015a26 <__assert_func+0x12>
 8015a3e:	bf00      	nop
 8015a40:	24000160 	.word	0x24000160
 8015a44:	080171a5 	.word	0x080171a5
 8015a48:	080171b2 	.word	0x080171b2
 8015a4c:	080171e0 	.word	0x080171e0

08015a50 <fiprintf>:
 8015a50:	b40e      	push	{r1, r2, r3}
 8015a52:	b503      	push	{r0, r1, lr}
 8015a54:	4601      	mov	r1, r0
 8015a56:	ab03      	add	r3, sp, #12
 8015a58:	4805      	ldr	r0, [pc, #20]	; (8015a70 <fiprintf+0x20>)
 8015a5a:	f853 2b04 	ldr.w	r2, [r3], #4
 8015a5e:	6800      	ldr	r0, [r0, #0]
 8015a60:	9301      	str	r3, [sp, #4]
 8015a62:	f000 f88f 	bl	8015b84 <_vfiprintf_r>
 8015a66:	b002      	add	sp, #8
 8015a68:	f85d eb04 	ldr.w	lr, [sp], #4
 8015a6c:	b003      	add	sp, #12
 8015a6e:	4770      	bx	lr
 8015a70:	24000160 	.word	0x24000160

08015a74 <__ascii_mbtowc>:
 8015a74:	b082      	sub	sp, #8
 8015a76:	b901      	cbnz	r1, 8015a7a <__ascii_mbtowc+0x6>
 8015a78:	a901      	add	r1, sp, #4
 8015a7a:	b142      	cbz	r2, 8015a8e <__ascii_mbtowc+0x1a>
 8015a7c:	b14b      	cbz	r3, 8015a92 <__ascii_mbtowc+0x1e>
 8015a7e:	7813      	ldrb	r3, [r2, #0]
 8015a80:	600b      	str	r3, [r1, #0]
 8015a82:	7812      	ldrb	r2, [r2, #0]
 8015a84:	1e10      	subs	r0, r2, #0
 8015a86:	bf18      	it	ne
 8015a88:	2001      	movne	r0, #1
 8015a8a:	b002      	add	sp, #8
 8015a8c:	4770      	bx	lr
 8015a8e:	4610      	mov	r0, r2
 8015a90:	e7fb      	b.n	8015a8a <__ascii_mbtowc+0x16>
 8015a92:	f06f 0001 	mvn.w	r0, #1
 8015a96:	e7f8      	b.n	8015a8a <__ascii_mbtowc+0x16>

08015a98 <memmove>:
 8015a98:	4288      	cmp	r0, r1
 8015a9a:	b510      	push	{r4, lr}
 8015a9c:	eb01 0402 	add.w	r4, r1, r2
 8015aa0:	d902      	bls.n	8015aa8 <memmove+0x10>
 8015aa2:	4284      	cmp	r4, r0
 8015aa4:	4623      	mov	r3, r4
 8015aa6:	d807      	bhi.n	8015ab8 <memmove+0x20>
 8015aa8:	1e43      	subs	r3, r0, #1
 8015aaa:	42a1      	cmp	r1, r4
 8015aac:	d008      	beq.n	8015ac0 <memmove+0x28>
 8015aae:	f811 2b01 	ldrb.w	r2, [r1], #1
 8015ab2:	f803 2f01 	strb.w	r2, [r3, #1]!
 8015ab6:	e7f8      	b.n	8015aaa <memmove+0x12>
 8015ab8:	4402      	add	r2, r0
 8015aba:	4601      	mov	r1, r0
 8015abc:	428a      	cmp	r2, r1
 8015abe:	d100      	bne.n	8015ac2 <memmove+0x2a>
 8015ac0:	bd10      	pop	{r4, pc}
 8015ac2:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8015ac6:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8015aca:	e7f7      	b.n	8015abc <memmove+0x24>

08015acc <__malloc_lock>:
 8015acc:	4801      	ldr	r0, [pc, #4]	; (8015ad4 <__malloc_lock+0x8>)
 8015ace:	f000 bc17 	b.w	8016300 <__retarget_lock_acquire_recursive>
 8015ad2:	bf00      	nop
 8015ad4:	240016c4 	.word	0x240016c4

08015ad8 <__malloc_unlock>:
 8015ad8:	4801      	ldr	r0, [pc, #4]	; (8015ae0 <__malloc_unlock+0x8>)
 8015ada:	f000 bc12 	b.w	8016302 <__retarget_lock_release_recursive>
 8015ade:	bf00      	nop
 8015ae0:	240016c4 	.word	0x240016c4

08015ae4 <_realloc_r>:
 8015ae4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8015ae6:	4607      	mov	r7, r0
 8015ae8:	4614      	mov	r4, r2
 8015aea:	460e      	mov	r6, r1
 8015aec:	b921      	cbnz	r1, 8015af8 <_realloc_r+0x14>
 8015aee:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8015af2:	4611      	mov	r1, r2
 8015af4:	f7ff bdc8 	b.w	8015688 <_malloc_r>
 8015af8:	b922      	cbnz	r2, 8015b04 <_realloc_r+0x20>
 8015afa:	f7ff fd75 	bl	80155e8 <_free_r>
 8015afe:	4625      	mov	r5, r4
 8015b00:	4628      	mov	r0, r5
 8015b02:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8015b04:	f000 fc62 	bl	80163cc <_malloc_usable_size_r>
 8015b08:	42a0      	cmp	r0, r4
 8015b0a:	d20f      	bcs.n	8015b2c <_realloc_r+0x48>
 8015b0c:	4621      	mov	r1, r4
 8015b0e:	4638      	mov	r0, r7
 8015b10:	f7ff fdba 	bl	8015688 <_malloc_r>
 8015b14:	4605      	mov	r5, r0
 8015b16:	2800      	cmp	r0, #0
 8015b18:	d0f2      	beq.n	8015b00 <_realloc_r+0x1c>
 8015b1a:	4631      	mov	r1, r6
 8015b1c:	4622      	mov	r2, r4
 8015b1e:	f7fd ff27 	bl	8013970 <memcpy>
 8015b22:	4631      	mov	r1, r6
 8015b24:	4638      	mov	r0, r7
 8015b26:	f7ff fd5f 	bl	80155e8 <_free_r>
 8015b2a:	e7e9      	b.n	8015b00 <_realloc_r+0x1c>
 8015b2c:	4635      	mov	r5, r6
 8015b2e:	e7e7      	b.n	8015b00 <_realloc_r+0x1c>

08015b30 <__sfputc_r>:
 8015b30:	6893      	ldr	r3, [r2, #8]
 8015b32:	3b01      	subs	r3, #1
 8015b34:	2b00      	cmp	r3, #0
 8015b36:	b410      	push	{r4}
 8015b38:	6093      	str	r3, [r2, #8]
 8015b3a:	da08      	bge.n	8015b4e <__sfputc_r+0x1e>
 8015b3c:	6994      	ldr	r4, [r2, #24]
 8015b3e:	42a3      	cmp	r3, r4
 8015b40:	db01      	blt.n	8015b46 <__sfputc_r+0x16>
 8015b42:	290a      	cmp	r1, #10
 8015b44:	d103      	bne.n	8015b4e <__sfputc_r+0x1e>
 8015b46:	f85d 4b04 	ldr.w	r4, [sp], #4
 8015b4a:	f000 b94b 	b.w	8015de4 <__swbuf_r>
 8015b4e:	6813      	ldr	r3, [r2, #0]
 8015b50:	1c58      	adds	r0, r3, #1
 8015b52:	6010      	str	r0, [r2, #0]
 8015b54:	7019      	strb	r1, [r3, #0]
 8015b56:	4608      	mov	r0, r1
 8015b58:	f85d 4b04 	ldr.w	r4, [sp], #4
 8015b5c:	4770      	bx	lr

08015b5e <__sfputs_r>:
 8015b5e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8015b60:	4606      	mov	r6, r0
 8015b62:	460f      	mov	r7, r1
 8015b64:	4614      	mov	r4, r2
 8015b66:	18d5      	adds	r5, r2, r3
 8015b68:	42ac      	cmp	r4, r5
 8015b6a:	d101      	bne.n	8015b70 <__sfputs_r+0x12>
 8015b6c:	2000      	movs	r0, #0
 8015b6e:	e007      	b.n	8015b80 <__sfputs_r+0x22>
 8015b70:	f814 1b01 	ldrb.w	r1, [r4], #1
 8015b74:	463a      	mov	r2, r7
 8015b76:	4630      	mov	r0, r6
 8015b78:	f7ff ffda 	bl	8015b30 <__sfputc_r>
 8015b7c:	1c43      	adds	r3, r0, #1
 8015b7e:	d1f3      	bne.n	8015b68 <__sfputs_r+0xa>
 8015b80:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08015b84 <_vfiprintf_r>:
 8015b84:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015b88:	460d      	mov	r5, r1
 8015b8a:	b09d      	sub	sp, #116	; 0x74
 8015b8c:	4614      	mov	r4, r2
 8015b8e:	4698      	mov	r8, r3
 8015b90:	4606      	mov	r6, r0
 8015b92:	b118      	cbz	r0, 8015b9c <_vfiprintf_r+0x18>
 8015b94:	6983      	ldr	r3, [r0, #24]
 8015b96:	b90b      	cbnz	r3, 8015b9c <_vfiprintf_r+0x18>
 8015b98:	f000 fb14 	bl	80161c4 <__sinit>
 8015b9c:	4b89      	ldr	r3, [pc, #548]	; (8015dc4 <_vfiprintf_r+0x240>)
 8015b9e:	429d      	cmp	r5, r3
 8015ba0:	d11b      	bne.n	8015bda <_vfiprintf_r+0x56>
 8015ba2:	6875      	ldr	r5, [r6, #4]
 8015ba4:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8015ba6:	07d9      	lsls	r1, r3, #31
 8015ba8:	d405      	bmi.n	8015bb6 <_vfiprintf_r+0x32>
 8015baa:	89ab      	ldrh	r3, [r5, #12]
 8015bac:	059a      	lsls	r2, r3, #22
 8015bae:	d402      	bmi.n	8015bb6 <_vfiprintf_r+0x32>
 8015bb0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8015bb2:	f000 fba5 	bl	8016300 <__retarget_lock_acquire_recursive>
 8015bb6:	89ab      	ldrh	r3, [r5, #12]
 8015bb8:	071b      	lsls	r3, r3, #28
 8015bba:	d501      	bpl.n	8015bc0 <_vfiprintf_r+0x3c>
 8015bbc:	692b      	ldr	r3, [r5, #16]
 8015bbe:	b9eb      	cbnz	r3, 8015bfc <_vfiprintf_r+0x78>
 8015bc0:	4629      	mov	r1, r5
 8015bc2:	4630      	mov	r0, r6
 8015bc4:	f000 f96e 	bl	8015ea4 <__swsetup_r>
 8015bc8:	b1c0      	cbz	r0, 8015bfc <_vfiprintf_r+0x78>
 8015bca:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8015bcc:	07dc      	lsls	r4, r3, #31
 8015bce:	d50e      	bpl.n	8015bee <_vfiprintf_r+0x6a>
 8015bd0:	f04f 30ff 	mov.w	r0, #4294967295
 8015bd4:	b01d      	add	sp, #116	; 0x74
 8015bd6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015bda:	4b7b      	ldr	r3, [pc, #492]	; (8015dc8 <_vfiprintf_r+0x244>)
 8015bdc:	429d      	cmp	r5, r3
 8015bde:	d101      	bne.n	8015be4 <_vfiprintf_r+0x60>
 8015be0:	68b5      	ldr	r5, [r6, #8]
 8015be2:	e7df      	b.n	8015ba4 <_vfiprintf_r+0x20>
 8015be4:	4b79      	ldr	r3, [pc, #484]	; (8015dcc <_vfiprintf_r+0x248>)
 8015be6:	429d      	cmp	r5, r3
 8015be8:	bf08      	it	eq
 8015bea:	68f5      	ldreq	r5, [r6, #12]
 8015bec:	e7da      	b.n	8015ba4 <_vfiprintf_r+0x20>
 8015bee:	89ab      	ldrh	r3, [r5, #12]
 8015bf0:	0598      	lsls	r0, r3, #22
 8015bf2:	d4ed      	bmi.n	8015bd0 <_vfiprintf_r+0x4c>
 8015bf4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8015bf6:	f000 fb84 	bl	8016302 <__retarget_lock_release_recursive>
 8015bfa:	e7e9      	b.n	8015bd0 <_vfiprintf_r+0x4c>
 8015bfc:	2300      	movs	r3, #0
 8015bfe:	9309      	str	r3, [sp, #36]	; 0x24
 8015c00:	2320      	movs	r3, #32
 8015c02:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8015c06:	f8cd 800c 	str.w	r8, [sp, #12]
 8015c0a:	2330      	movs	r3, #48	; 0x30
 8015c0c:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8015dd0 <_vfiprintf_r+0x24c>
 8015c10:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8015c14:	f04f 0901 	mov.w	r9, #1
 8015c18:	4623      	mov	r3, r4
 8015c1a:	469a      	mov	sl, r3
 8015c1c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8015c20:	b10a      	cbz	r2, 8015c26 <_vfiprintf_r+0xa2>
 8015c22:	2a25      	cmp	r2, #37	; 0x25
 8015c24:	d1f9      	bne.n	8015c1a <_vfiprintf_r+0x96>
 8015c26:	ebba 0b04 	subs.w	fp, sl, r4
 8015c2a:	d00b      	beq.n	8015c44 <_vfiprintf_r+0xc0>
 8015c2c:	465b      	mov	r3, fp
 8015c2e:	4622      	mov	r2, r4
 8015c30:	4629      	mov	r1, r5
 8015c32:	4630      	mov	r0, r6
 8015c34:	f7ff ff93 	bl	8015b5e <__sfputs_r>
 8015c38:	3001      	adds	r0, #1
 8015c3a:	f000 80aa 	beq.w	8015d92 <_vfiprintf_r+0x20e>
 8015c3e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8015c40:	445a      	add	r2, fp
 8015c42:	9209      	str	r2, [sp, #36]	; 0x24
 8015c44:	f89a 3000 	ldrb.w	r3, [sl]
 8015c48:	2b00      	cmp	r3, #0
 8015c4a:	f000 80a2 	beq.w	8015d92 <_vfiprintf_r+0x20e>
 8015c4e:	2300      	movs	r3, #0
 8015c50:	f04f 32ff 	mov.w	r2, #4294967295
 8015c54:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8015c58:	f10a 0a01 	add.w	sl, sl, #1
 8015c5c:	9304      	str	r3, [sp, #16]
 8015c5e:	9307      	str	r3, [sp, #28]
 8015c60:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8015c64:	931a      	str	r3, [sp, #104]	; 0x68
 8015c66:	4654      	mov	r4, sl
 8015c68:	2205      	movs	r2, #5
 8015c6a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8015c6e:	4858      	ldr	r0, [pc, #352]	; (8015dd0 <_vfiprintf_r+0x24c>)
 8015c70:	f7ea fb3e 	bl	80002f0 <memchr>
 8015c74:	9a04      	ldr	r2, [sp, #16]
 8015c76:	b9d8      	cbnz	r0, 8015cb0 <_vfiprintf_r+0x12c>
 8015c78:	06d1      	lsls	r1, r2, #27
 8015c7a:	bf44      	itt	mi
 8015c7c:	2320      	movmi	r3, #32
 8015c7e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8015c82:	0713      	lsls	r3, r2, #28
 8015c84:	bf44      	itt	mi
 8015c86:	232b      	movmi	r3, #43	; 0x2b
 8015c88:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8015c8c:	f89a 3000 	ldrb.w	r3, [sl]
 8015c90:	2b2a      	cmp	r3, #42	; 0x2a
 8015c92:	d015      	beq.n	8015cc0 <_vfiprintf_r+0x13c>
 8015c94:	9a07      	ldr	r2, [sp, #28]
 8015c96:	4654      	mov	r4, sl
 8015c98:	2000      	movs	r0, #0
 8015c9a:	f04f 0c0a 	mov.w	ip, #10
 8015c9e:	4621      	mov	r1, r4
 8015ca0:	f811 3b01 	ldrb.w	r3, [r1], #1
 8015ca4:	3b30      	subs	r3, #48	; 0x30
 8015ca6:	2b09      	cmp	r3, #9
 8015ca8:	d94e      	bls.n	8015d48 <_vfiprintf_r+0x1c4>
 8015caa:	b1b0      	cbz	r0, 8015cda <_vfiprintf_r+0x156>
 8015cac:	9207      	str	r2, [sp, #28]
 8015cae:	e014      	b.n	8015cda <_vfiprintf_r+0x156>
 8015cb0:	eba0 0308 	sub.w	r3, r0, r8
 8015cb4:	fa09 f303 	lsl.w	r3, r9, r3
 8015cb8:	4313      	orrs	r3, r2
 8015cba:	9304      	str	r3, [sp, #16]
 8015cbc:	46a2      	mov	sl, r4
 8015cbe:	e7d2      	b.n	8015c66 <_vfiprintf_r+0xe2>
 8015cc0:	9b03      	ldr	r3, [sp, #12]
 8015cc2:	1d19      	adds	r1, r3, #4
 8015cc4:	681b      	ldr	r3, [r3, #0]
 8015cc6:	9103      	str	r1, [sp, #12]
 8015cc8:	2b00      	cmp	r3, #0
 8015cca:	bfbb      	ittet	lt
 8015ccc:	425b      	neglt	r3, r3
 8015cce:	f042 0202 	orrlt.w	r2, r2, #2
 8015cd2:	9307      	strge	r3, [sp, #28]
 8015cd4:	9307      	strlt	r3, [sp, #28]
 8015cd6:	bfb8      	it	lt
 8015cd8:	9204      	strlt	r2, [sp, #16]
 8015cda:	7823      	ldrb	r3, [r4, #0]
 8015cdc:	2b2e      	cmp	r3, #46	; 0x2e
 8015cde:	d10c      	bne.n	8015cfa <_vfiprintf_r+0x176>
 8015ce0:	7863      	ldrb	r3, [r4, #1]
 8015ce2:	2b2a      	cmp	r3, #42	; 0x2a
 8015ce4:	d135      	bne.n	8015d52 <_vfiprintf_r+0x1ce>
 8015ce6:	9b03      	ldr	r3, [sp, #12]
 8015ce8:	1d1a      	adds	r2, r3, #4
 8015cea:	681b      	ldr	r3, [r3, #0]
 8015cec:	9203      	str	r2, [sp, #12]
 8015cee:	2b00      	cmp	r3, #0
 8015cf0:	bfb8      	it	lt
 8015cf2:	f04f 33ff 	movlt.w	r3, #4294967295
 8015cf6:	3402      	adds	r4, #2
 8015cf8:	9305      	str	r3, [sp, #20]
 8015cfa:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8015de0 <_vfiprintf_r+0x25c>
 8015cfe:	7821      	ldrb	r1, [r4, #0]
 8015d00:	2203      	movs	r2, #3
 8015d02:	4650      	mov	r0, sl
 8015d04:	f7ea faf4 	bl	80002f0 <memchr>
 8015d08:	b140      	cbz	r0, 8015d1c <_vfiprintf_r+0x198>
 8015d0a:	2340      	movs	r3, #64	; 0x40
 8015d0c:	eba0 000a 	sub.w	r0, r0, sl
 8015d10:	fa03 f000 	lsl.w	r0, r3, r0
 8015d14:	9b04      	ldr	r3, [sp, #16]
 8015d16:	4303      	orrs	r3, r0
 8015d18:	3401      	adds	r4, #1
 8015d1a:	9304      	str	r3, [sp, #16]
 8015d1c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8015d20:	482c      	ldr	r0, [pc, #176]	; (8015dd4 <_vfiprintf_r+0x250>)
 8015d22:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8015d26:	2206      	movs	r2, #6
 8015d28:	f7ea fae2 	bl	80002f0 <memchr>
 8015d2c:	2800      	cmp	r0, #0
 8015d2e:	d03f      	beq.n	8015db0 <_vfiprintf_r+0x22c>
 8015d30:	4b29      	ldr	r3, [pc, #164]	; (8015dd8 <_vfiprintf_r+0x254>)
 8015d32:	bb1b      	cbnz	r3, 8015d7c <_vfiprintf_r+0x1f8>
 8015d34:	9b03      	ldr	r3, [sp, #12]
 8015d36:	3307      	adds	r3, #7
 8015d38:	f023 0307 	bic.w	r3, r3, #7
 8015d3c:	3308      	adds	r3, #8
 8015d3e:	9303      	str	r3, [sp, #12]
 8015d40:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8015d42:	443b      	add	r3, r7
 8015d44:	9309      	str	r3, [sp, #36]	; 0x24
 8015d46:	e767      	b.n	8015c18 <_vfiprintf_r+0x94>
 8015d48:	fb0c 3202 	mla	r2, ip, r2, r3
 8015d4c:	460c      	mov	r4, r1
 8015d4e:	2001      	movs	r0, #1
 8015d50:	e7a5      	b.n	8015c9e <_vfiprintf_r+0x11a>
 8015d52:	2300      	movs	r3, #0
 8015d54:	3401      	adds	r4, #1
 8015d56:	9305      	str	r3, [sp, #20]
 8015d58:	4619      	mov	r1, r3
 8015d5a:	f04f 0c0a 	mov.w	ip, #10
 8015d5e:	4620      	mov	r0, r4
 8015d60:	f810 2b01 	ldrb.w	r2, [r0], #1
 8015d64:	3a30      	subs	r2, #48	; 0x30
 8015d66:	2a09      	cmp	r2, #9
 8015d68:	d903      	bls.n	8015d72 <_vfiprintf_r+0x1ee>
 8015d6a:	2b00      	cmp	r3, #0
 8015d6c:	d0c5      	beq.n	8015cfa <_vfiprintf_r+0x176>
 8015d6e:	9105      	str	r1, [sp, #20]
 8015d70:	e7c3      	b.n	8015cfa <_vfiprintf_r+0x176>
 8015d72:	fb0c 2101 	mla	r1, ip, r1, r2
 8015d76:	4604      	mov	r4, r0
 8015d78:	2301      	movs	r3, #1
 8015d7a:	e7f0      	b.n	8015d5e <_vfiprintf_r+0x1da>
 8015d7c:	ab03      	add	r3, sp, #12
 8015d7e:	9300      	str	r3, [sp, #0]
 8015d80:	462a      	mov	r2, r5
 8015d82:	4b16      	ldr	r3, [pc, #88]	; (8015ddc <_vfiprintf_r+0x258>)
 8015d84:	a904      	add	r1, sp, #16
 8015d86:	4630      	mov	r0, r6
 8015d88:	f7fd fe9a 	bl	8013ac0 <_printf_float>
 8015d8c:	4607      	mov	r7, r0
 8015d8e:	1c78      	adds	r0, r7, #1
 8015d90:	d1d6      	bne.n	8015d40 <_vfiprintf_r+0x1bc>
 8015d92:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8015d94:	07d9      	lsls	r1, r3, #31
 8015d96:	d405      	bmi.n	8015da4 <_vfiprintf_r+0x220>
 8015d98:	89ab      	ldrh	r3, [r5, #12]
 8015d9a:	059a      	lsls	r2, r3, #22
 8015d9c:	d402      	bmi.n	8015da4 <_vfiprintf_r+0x220>
 8015d9e:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8015da0:	f000 faaf 	bl	8016302 <__retarget_lock_release_recursive>
 8015da4:	89ab      	ldrh	r3, [r5, #12]
 8015da6:	065b      	lsls	r3, r3, #25
 8015da8:	f53f af12 	bmi.w	8015bd0 <_vfiprintf_r+0x4c>
 8015dac:	9809      	ldr	r0, [sp, #36]	; 0x24
 8015dae:	e711      	b.n	8015bd4 <_vfiprintf_r+0x50>
 8015db0:	ab03      	add	r3, sp, #12
 8015db2:	9300      	str	r3, [sp, #0]
 8015db4:	462a      	mov	r2, r5
 8015db6:	4b09      	ldr	r3, [pc, #36]	; (8015ddc <_vfiprintf_r+0x258>)
 8015db8:	a904      	add	r1, sp, #16
 8015dba:	4630      	mov	r0, r6
 8015dbc:	f7fe f90c 	bl	8013fd8 <_printf_i>
 8015dc0:	e7e4      	b.n	8015d8c <_vfiprintf_r+0x208>
 8015dc2:	bf00      	nop
 8015dc4:	0801730c 	.word	0x0801730c
 8015dc8:	0801732c 	.word	0x0801732c
 8015dcc:	080172ec 	.word	0x080172ec
 8015dd0:	08017194 	.word	0x08017194
 8015dd4:	0801719e 	.word	0x0801719e
 8015dd8:	08013ac1 	.word	0x08013ac1
 8015ddc:	08015b5f 	.word	0x08015b5f
 8015de0:	0801719a 	.word	0x0801719a

08015de4 <__swbuf_r>:
 8015de4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8015de6:	460e      	mov	r6, r1
 8015de8:	4614      	mov	r4, r2
 8015dea:	4605      	mov	r5, r0
 8015dec:	b118      	cbz	r0, 8015df6 <__swbuf_r+0x12>
 8015dee:	6983      	ldr	r3, [r0, #24]
 8015df0:	b90b      	cbnz	r3, 8015df6 <__swbuf_r+0x12>
 8015df2:	f000 f9e7 	bl	80161c4 <__sinit>
 8015df6:	4b21      	ldr	r3, [pc, #132]	; (8015e7c <__swbuf_r+0x98>)
 8015df8:	429c      	cmp	r4, r3
 8015dfa:	d12b      	bne.n	8015e54 <__swbuf_r+0x70>
 8015dfc:	686c      	ldr	r4, [r5, #4]
 8015dfe:	69a3      	ldr	r3, [r4, #24]
 8015e00:	60a3      	str	r3, [r4, #8]
 8015e02:	89a3      	ldrh	r3, [r4, #12]
 8015e04:	071a      	lsls	r2, r3, #28
 8015e06:	d52f      	bpl.n	8015e68 <__swbuf_r+0x84>
 8015e08:	6923      	ldr	r3, [r4, #16]
 8015e0a:	b36b      	cbz	r3, 8015e68 <__swbuf_r+0x84>
 8015e0c:	6923      	ldr	r3, [r4, #16]
 8015e0e:	6820      	ldr	r0, [r4, #0]
 8015e10:	1ac0      	subs	r0, r0, r3
 8015e12:	6963      	ldr	r3, [r4, #20]
 8015e14:	b2f6      	uxtb	r6, r6
 8015e16:	4283      	cmp	r3, r0
 8015e18:	4637      	mov	r7, r6
 8015e1a:	dc04      	bgt.n	8015e26 <__swbuf_r+0x42>
 8015e1c:	4621      	mov	r1, r4
 8015e1e:	4628      	mov	r0, r5
 8015e20:	f000 f93c 	bl	801609c <_fflush_r>
 8015e24:	bb30      	cbnz	r0, 8015e74 <__swbuf_r+0x90>
 8015e26:	68a3      	ldr	r3, [r4, #8]
 8015e28:	3b01      	subs	r3, #1
 8015e2a:	60a3      	str	r3, [r4, #8]
 8015e2c:	6823      	ldr	r3, [r4, #0]
 8015e2e:	1c5a      	adds	r2, r3, #1
 8015e30:	6022      	str	r2, [r4, #0]
 8015e32:	701e      	strb	r6, [r3, #0]
 8015e34:	6963      	ldr	r3, [r4, #20]
 8015e36:	3001      	adds	r0, #1
 8015e38:	4283      	cmp	r3, r0
 8015e3a:	d004      	beq.n	8015e46 <__swbuf_r+0x62>
 8015e3c:	89a3      	ldrh	r3, [r4, #12]
 8015e3e:	07db      	lsls	r3, r3, #31
 8015e40:	d506      	bpl.n	8015e50 <__swbuf_r+0x6c>
 8015e42:	2e0a      	cmp	r6, #10
 8015e44:	d104      	bne.n	8015e50 <__swbuf_r+0x6c>
 8015e46:	4621      	mov	r1, r4
 8015e48:	4628      	mov	r0, r5
 8015e4a:	f000 f927 	bl	801609c <_fflush_r>
 8015e4e:	b988      	cbnz	r0, 8015e74 <__swbuf_r+0x90>
 8015e50:	4638      	mov	r0, r7
 8015e52:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8015e54:	4b0a      	ldr	r3, [pc, #40]	; (8015e80 <__swbuf_r+0x9c>)
 8015e56:	429c      	cmp	r4, r3
 8015e58:	d101      	bne.n	8015e5e <__swbuf_r+0x7a>
 8015e5a:	68ac      	ldr	r4, [r5, #8]
 8015e5c:	e7cf      	b.n	8015dfe <__swbuf_r+0x1a>
 8015e5e:	4b09      	ldr	r3, [pc, #36]	; (8015e84 <__swbuf_r+0xa0>)
 8015e60:	429c      	cmp	r4, r3
 8015e62:	bf08      	it	eq
 8015e64:	68ec      	ldreq	r4, [r5, #12]
 8015e66:	e7ca      	b.n	8015dfe <__swbuf_r+0x1a>
 8015e68:	4621      	mov	r1, r4
 8015e6a:	4628      	mov	r0, r5
 8015e6c:	f000 f81a 	bl	8015ea4 <__swsetup_r>
 8015e70:	2800      	cmp	r0, #0
 8015e72:	d0cb      	beq.n	8015e0c <__swbuf_r+0x28>
 8015e74:	f04f 37ff 	mov.w	r7, #4294967295
 8015e78:	e7ea      	b.n	8015e50 <__swbuf_r+0x6c>
 8015e7a:	bf00      	nop
 8015e7c:	0801730c 	.word	0x0801730c
 8015e80:	0801732c 	.word	0x0801732c
 8015e84:	080172ec 	.word	0x080172ec

08015e88 <__ascii_wctomb>:
 8015e88:	b149      	cbz	r1, 8015e9e <__ascii_wctomb+0x16>
 8015e8a:	2aff      	cmp	r2, #255	; 0xff
 8015e8c:	bf85      	ittet	hi
 8015e8e:	238a      	movhi	r3, #138	; 0x8a
 8015e90:	6003      	strhi	r3, [r0, #0]
 8015e92:	700a      	strbls	r2, [r1, #0]
 8015e94:	f04f 30ff 	movhi.w	r0, #4294967295
 8015e98:	bf98      	it	ls
 8015e9a:	2001      	movls	r0, #1
 8015e9c:	4770      	bx	lr
 8015e9e:	4608      	mov	r0, r1
 8015ea0:	4770      	bx	lr
	...

08015ea4 <__swsetup_r>:
 8015ea4:	4b32      	ldr	r3, [pc, #200]	; (8015f70 <__swsetup_r+0xcc>)
 8015ea6:	b570      	push	{r4, r5, r6, lr}
 8015ea8:	681d      	ldr	r5, [r3, #0]
 8015eaa:	4606      	mov	r6, r0
 8015eac:	460c      	mov	r4, r1
 8015eae:	b125      	cbz	r5, 8015eba <__swsetup_r+0x16>
 8015eb0:	69ab      	ldr	r3, [r5, #24]
 8015eb2:	b913      	cbnz	r3, 8015eba <__swsetup_r+0x16>
 8015eb4:	4628      	mov	r0, r5
 8015eb6:	f000 f985 	bl	80161c4 <__sinit>
 8015eba:	4b2e      	ldr	r3, [pc, #184]	; (8015f74 <__swsetup_r+0xd0>)
 8015ebc:	429c      	cmp	r4, r3
 8015ebe:	d10f      	bne.n	8015ee0 <__swsetup_r+0x3c>
 8015ec0:	686c      	ldr	r4, [r5, #4]
 8015ec2:	89a3      	ldrh	r3, [r4, #12]
 8015ec4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8015ec8:	0719      	lsls	r1, r3, #28
 8015eca:	d42c      	bmi.n	8015f26 <__swsetup_r+0x82>
 8015ecc:	06dd      	lsls	r5, r3, #27
 8015ece:	d411      	bmi.n	8015ef4 <__swsetup_r+0x50>
 8015ed0:	2309      	movs	r3, #9
 8015ed2:	6033      	str	r3, [r6, #0]
 8015ed4:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8015ed8:	81a3      	strh	r3, [r4, #12]
 8015eda:	f04f 30ff 	mov.w	r0, #4294967295
 8015ede:	e03e      	b.n	8015f5e <__swsetup_r+0xba>
 8015ee0:	4b25      	ldr	r3, [pc, #148]	; (8015f78 <__swsetup_r+0xd4>)
 8015ee2:	429c      	cmp	r4, r3
 8015ee4:	d101      	bne.n	8015eea <__swsetup_r+0x46>
 8015ee6:	68ac      	ldr	r4, [r5, #8]
 8015ee8:	e7eb      	b.n	8015ec2 <__swsetup_r+0x1e>
 8015eea:	4b24      	ldr	r3, [pc, #144]	; (8015f7c <__swsetup_r+0xd8>)
 8015eec:	429c      	cmp	r4, r3
 8015eee:	bf08      	it	eq
 8015ef0:	68ec      	ldreq	r4, [r5, #12]
 8015ef2:	e7e6      	b.n	8015ec2 <__swsetup_r+0x1e>
 8015ef4:	0758      	lsls	r0, r3, #29
 8015ef6:	d512      	bpl.n	8015f1e <__swsetup_r+0x7a>
 8015ef8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8015efa:	b141      	cbz	r1, 8015f0e <__swsetup_r+0x6a>
 8015efc:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8015f00:	4299      	cmp	r1, r3
 8015f02:	d002      	beq.n	8015f0a <__swsetup_r+0x66>
 8015f04:	4630      	mov	r0, r6
 8015f06:	f7ff fb6f 	bl	80155e8 <_free_r>
 8015f0a:	2300      	movs	r3, #0
 8015f0c:	6363      	str	r3, [r4, #52]	; 0x34
 8015f0e:	89a3      	ldrh	r3, [r4, #12]
 8015f10:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8015f14:	81a3      	strh	r3, [r4, #12]
 8015f16:	2300      	movs	r3, #0
 8015f18:	6063      	str	r3, [r4, #4]
 8015f1a:	6923      	ldr	r3, [r4, #16]
 8015f1c:	6023      	str	r3, [r4, #0]
 8015f1e:	89a3      	ldrh	r3, [r4, #12]
 8015f20:	f043 0308 	orr.w	r3, r3, #8
 8015f24:	81a3      	strh	r3, [r4, #12]
 8015f26:	6923      	ldr	r3, [r4, #16]
 8015f28:	b94b      	cbnz	r3, 8015f3e <__swsetup_r+0x9a>
 8015f2a:	89a3      	ldrh	r3, [r4, #12]
 8015f2c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8015f30:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8015f34:	d003      	beq.n	8015f3e <__swsetup_r+0x9a>
 8015f36:	4621      	mov	r1, r4
 8015f38:	4630      	mov	r0, r6
 8015f3a:	f000 fa07 	bl	801634c <__smakebuf_r>
 8015f3e:	89a0      	ldrh	r0, [r4, #12]
 8015f40:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8015f44:	f010 0301 	ands.w	r3, r0, #1
 8015f48:	d00a      	beq.n	8015f60 <__swsetup_r+0xbc>
 8015f4a:	2300      	movs	r3, #0
 8015f4c:	60a3      	str	r3, [r4, #8]
 8015f4e:	6963      	ldr	r3, [r4, #20]
 8015f50:	425b      	negs	r3, r3
 8015f52:	61a3      	str	r3, [r4, #24]
 8015f54:	6923      	ldr	r3, [r4, #16]
 8015f56:	b943      	cbnz	r3, 8015f6a <__swsetup_r+0xc6>
 8015f58:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8015f5c:	d1ba      	bne.n	8015ed4 <__swsetup_r+0x30>
 8015f5e:	bd70      	pop	{r4, r5, r6, pc}
 8015f60:	0781      	lsls	r1, r0, #30
 8015f62:	bf58      	it	pl
 8015f64:	6963      	ldrpl	r3, [r4, #20]
 8015f66:	60a3      	str	r3, [r4, #8]
 8015f68:	e7f4      	b.n	8015f54 <__swsetup_r+0xb0>
 8015f6a:	2000      	movs	r0, #0
 8015f6c:	e7f7      	b.n	8015f5e <__swsetup_r+0xba>
 8015f6e:	bf00      	nop
 8015f70:	24000160 	.word	0x24000160
 8015f74:	0801730c 	.word	0x0801730c
 8015f78:	0801732c 	.word	0x0801732c
 8015f7c:	080172ec 	.word	0x080172ec

08015f80 <abort>:
 8015f80:	b508      	push	{r3, lr}
 8015f82:	2006      	movs	r0, #6
 8015f84:	f000 fa52 	bl	801642c <raise>
 8015f88:	2001      	movs	r0, #1
 8015f8a:	f7eb ff6f 	bl	8001e6c <_exit>
	...

08015f90 <__sflush_r>:
 8015f90:	898a      	ldrh	r2, [r1, #12]
 8015f92:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8015f96:	4605      	mov	r5, r0
 8015f98:	0710      	lsls	r0, r2, #28
 8015f9a:	460c      	mov	r4, r1
 8015f9c:	d458      	bmi.n	8016050 <__sflush_r+0xc0>
 8015f9e:	684b      	ldr	r3, [r1, #4]
 8015fa0:	2b00      	cmp	r3, #0
 8015fa2:	dc05      	bgt.n	8015fb0 <__sflush_r+0x20>
 8015fa4:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8015fa6:	2b00      	cmp	r3, #0
 8015fa8:	dc02      	bgt.n	8015fb0 <__sflush_r+0x20>
 8015faa:	2000      	movs	r0, #0
 8015fac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8015fb0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8015fb2:	2e00      	cmp	r6, #0
 8015fb4:	d0f9      	beq.n	8015faa <__sflush_r+0x1a>
 8015fb6:	2300      	movs	r3, #0
 8015fb8:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8015fbc:	682f      	ldr	r7, [r5, #0]
 8015fbe:	602b      	str	r3, [r5, #0]
 8015fc0:	d032      	beq.n	8016028 <__sflush_r+0x98>
 8015fc2:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8015fc4:	89a3      	ldrh	r3, [r4, #12]
 8015fc6:	075a      	lsls	r2, r3, #29
 8015fc8:	d505      	bpl.n	8015fd6 <__sflush_r+0x46>
 8015fca:	6863      	ldr	r3, [r4, #4]
 8015fcc:	1ac0      	subs	r0, r0, r3
 8015fce:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8015fd0:	b10b      	cbz	r3, 8015fd6 <__sflush_r+0x46>
 8015fd2:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8015fd4:	1ac0      	subs	r0, r0, r3
 8015fd6:	2300      	movs	r3, #0
 8015fd8:	4602      	mov	r2, r0
 8015fda:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8015fdc:	6a21      	ldr	r1, [r4, #32]
 8015fde:	4628      	mov	r0, r5
 8015fe0:	47b0      	blx	r6
 8015fe2:	1c43      	adds	r3, r0, #1
 8015fe4:	89a3      	ldrh	r3, [r4, #12]
 8015fe6:	d106      	bne.n	8015ff6 <__sflush_r+0x66>
 8015fe8:	6829      	ldr	r1, [r5, #0]
 8015fea:	291d      	cmp	r1, #29
 8015fec:	d82c      	bhi.n	8016048 <__sflush_r+0xb8>
 8015fee:	4a2a      	ldr	r2, [pc, #168]	; (8016098 <__sflush_r+0x108>)
 8015ff0:	40ca      	lsrs	r2, r1
 8015ff2:	07d6      	lsls	r6, r2, #31
 8015ff4:	d528      	bpl.n	8016048 <__sflush_r+0xb8>
 8015ff6:	2200      	movs	r2, #0
 8015ff8:	6062      	str	r2, [r4, #4]
 8015ffa:	04d9      	lsls	r1, r3, #19
 8015ffc:	6922      	ldr	r2, [r4, #16]
 8015ffe:	6022      	str	r2, [r4, #0]
 8016000:	d504      	bpl.n	801600c <__sflush_r+0x7c>
 8016002:	1c42      	adds	r2, r0, #1
 8016004:	d101      	bne.n	801600a <__sflush_r+0x7a>
 8016006:	682b      	ldr	r3, [r5, #0]
 8016008:	b903      	cbnz	r3, 801600c <__sflush_r+0x7c>
 801600a:	6560      	str	r0, [r4, #84]	; 0x54
 801600c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801600e:	602f      	str	r7, [r5, #0]
 8016010:	2900      	cmp	r1, #0
 8016012:	d0ca      	beq.n	8015faa <__sflush_r+0x1a>
 8016014:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8016018:	4299      	cmp	r1, r3
 801601a:	d002      	beq.n	8016022 <__sflush_r+0x92>
 801601c:	4628      	mov	r0, r5
 801601e:	f7ff fae3 	bl	80155e8 <_free_r>
 8016022:	2000      	movs	r0, #0
 8016024:	6360      	str	r0, [r4, #52]	; 0x34
 8016026:	e7c1      	b.n	8015fac <__sflush_r+0x1c>
 8016028:	6a21      	ldr	r1, [r4, #32]
 801602a:	2301      	movs	r3, #1
 801602c:	4628      	mov	r0, r5
 801602e:	47b0      	blx	r6
 8016030:	1c41      	adds	r1, r0, #1
 8016032:	d1c7      	bne.n	8015fc4 <__sflush_r+0x34>
 8016034:	682b      	ldr	r3, [r5, #0]
 8016036:	2b00      	cmp	r3, #0
 8016038:	d0c4      	beq.n	8015fc4 <__sflush_r+0x34>
 801603a:	2b1d      	cmp	r3, #29
 801603c:	d001      	beq.n	8016042 <__sflush_r+0xb2>
 801603e:	2b16      	cmp	r3, #22
 8016040:	d101      	bne.n	8016046 <__sflush_r+0xb6>
 8016042:	602f      	str	r7, [r5, #0]
 8016044:	e7b1      	b.n	8015faa <__sflush_r+0x1a>
 8016046:	89a3      	ldrh	r3, [r4, #12]
 8016048:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801604c:	81a3      	strh	r3, [r4, #12]
 801604e:	e7ad      	b.n	8015fac <__sflush_r+0x1c>
 8016050:	690f      	ldr	r7, [r1, #16]
 8016052:	2f00      	cmp	r7, #0
 8016054:	d0a9      	beq.n	8015faa <__sflush_r+0x1a>
 8016056:	0793      	lsls	r3, r2, #30
 8016058:	680e      	ldr	r6, [r1, #0]
 801605a:	bf08      	it	eq
 801605c:	694b      	ldreq	r3, [r1, #20]
 801605e:	600f      	str	r7, [r1, #0]
 8016060:	bf18      	it	ne
 8016062:	2300      	movne	r3, #0
 8016064:	eba6 0807 	sub.w	r8, r6, r7
 8016068:	608b      	str	r3, [r1, #8]
 801606a:	f1b8 0f00 	cmp.w	r8, #0
 801606e:	dd9c      	ble.n	8015faa <__sflush_r+0x1a>
 8016070:	6a21      	ldr	r1, [r4, #32]
 8016072:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8016074:	4643      	mov	r3, r8
 8016076:	463a      	mov	r2, r7
 8016078:	4628      	mov	r0, r5
 801607a:	47b0      	blx	r6
 801607c:	2800      	cmp	r0, #0
 801607e:	dc06      	bgt.n	801608e <__sflush_r+0xfe>
 8016080:	89a3      	ldrh	r3, [r4, #12]
 8016082:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8016086:	81a3      	strh	r3, [r4, #12]
 8016088:	f04f 30ff 	mov.w	r0, #4294967295
 801608c:	e78e      	b.n	8015fac <__sflush_r+0x1c>
 801608e:	4407      	add	r7, r0
 8016090:	eba8 0800 	sub.w	r8, r8, r0
 8016094:	e7e9      	b.n	801606a <__sflush_r+0xda>
 8016096:	bf00      	nop
 8016098:	20400001 	.word	0x20400001

0801609c <_fflush_r>:
 801609c:	b538      	push	{r3, r4, r5, lr}
 801609e:	690b      	ldr	r3, [r1, #16]
 80160a0:	4605      	mov	r5, r0
 80160a2:	460c      	mov	r4, r1
 80160a4:	b913      	cbnz	r3, 80160ac <_fflush_r+0x10>
 80160a6:	2500      	movs	r5, #0
 80160a8:	4628      	mov	r0, r5
 80160aa:	bd38      	pop	{r3, r4, r5, pc}
 80160ac:	b118      	cbz	r0, 80160b6 <_fflush_r+0x1a>
 80160ae:	6983      	ldr	r3, [r0, #24]
 80160b0:	b90b      	cbnz	r3, 80160b6 <_fflush_r+0x1a>
 80160b2:	f000 f887 	bl	80161c4 <__sinit>
 80160b6:	4b14      	ldr	r3, [pc, #80]	; (8016108 <_fflush_r+0x6c>)
 80160b8:	429c      	cmp	r4, r3
 80160ba:	d11b      	bne.n	80160f4 <_fflush_r+0x58>
 80160bc:	686c      	ldr	r4, [r5, #4]
 80160be:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80160c2:	2b00      	cmp	r3, #0
 80160c4:	d0ef      	beq.n	80160a6 <_fflush_r+0xa>
 80160c6:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80160c8:	07d0      	lsls	r0, r2, #31
 80160ca:	d404      	bmi.n	80160d6 <_fflush_r+0x3a>
 80160cc:	0599      	lsls	r1, r3, #22
 80160ce:	d402      	bmi.n	80160d6 <_fflush_r+0x3a>
 80160d0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80160d2:	f000 f915 	bl	8016300 <__retarget_lock_acquire_recursive>
 80160d6:	4628      	mov	r0, r5
 80160d8:	4621      	mov	r1, r4
 80160da:	f7ff ff59 	bl	8015f90 <__sflush_r>
 80160de:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80160e0:	07da      	lsls	r2, r3, #31
 80160e2:	4605      	mov	r5, r0
 80160e4:	d4e0      	bmi.n	80160a8 <_fflush_r+0xc>
 80160e6:	89a3      	ldrh	r3, [r4, #12]
 80160e8:	059b      	lsls	r3, r3, #22
 80160ea:	d4dd      	bmi.n	80160a8 <_fflush_r+0xc>
 80160ec:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80160ee:	f000 f908 	bl	8016302 <__retarget_lock_release_recursive>
 80160f2:	e7d9      	b.n	80160a8 <_fflush_r+0xc>
 80160f4:	4b05      	ldr	r3, [pc, #20]	; (801610c <_fflush_r+0x70>)
 80160f6:	429c      	cmp	r4, r3
 80160f8:	d101      	bne.n	80160fe <_fflush_r+0x62>
 80160fa:	68ac      	ldr	r4, [r5, #8]
 80160fc:	e7df      	b.n	80160be <_fflush_r+0x22>
 80160fe:	4b04      	ldr	r3, [pc, #16]	; (8016110 <_fflush_r+0x74>)
 8016100:	429c      	cmp	r4, r3
 8016102:	bf08      	it	eq
 8016104:	68ec      	ldreq	r4, [r5, #12]
 8016106:	e7da      	b.n	80160be <_fflush_r+0x22>
 8016108:	0801730c 	.word	0x0801730c
 801610c:	0801732c 	.word	0x0801732c
 8016110:	080172ec 	.word	0x080172ec

08016114 <std>:
 8016114:	2300      	movs	r3, #0
 8016116:	b510      	push	{r4, lr}
 8016118:	4604      	mov	r4, r0
 801611a:	e9c0 3300 	strd	r3, r3, [r0]
 801611e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8016122:	6083      	str	r3, [r0, #8]
 8016124:	8181      	strh	r1, [r0, #12]
 8016126:	6643      	str	r3, [r0, #100]	; 0x64
 8016128:	81c2      	strh	r2, [r0, #14]
 801612a:	6183      	str	r3, [r0, #24]
 801612c:	4619      	mov	r1, r3
 801612e:	2208      	movs	r2, #8
 8016130:	305c      	adds	r0, #92	; 0x5c
 8016132:	f7fd fc2b 	bl	801398c <memset>
 8016136:	4b05      	ldr	r3, [pc, #20]	; (801614c <std+0x38>)
 8016138:	6263      	str	r3, [r4, #36]	; 0x24
 801613a:	4b05      	ldr	r3, [pc, #20]	; (8016150 <std+0x3c>)
 801613c:	62a3      	str	r3, [r4, #40]	; 0x28
 801613e:	4b05      	ldr	r3, [pc, #20]	; (8016154 <std+0x40>)
 8016140:	62e3      	str	r3, [r4, #44]	; 0x2c
 8016142:	4b05      	ldr	r3, [pc, #20]	; (8016158 <std+0x44>)
 8016144:	6224      	str	r4, [r4, #32]
 8016146:	6323      	str	r3, [r4, #48]	; 0x30
 8016148:	bd10      	pop	{r4, pc}
 801614a:	bf00      	nop
 801614c:	08016465 	.word	0x08016465
 8016150:	08016487 	.word	0x08016487
 8016154:	080164bf 	.word	0x080164bf
 8016158:	080164e3 	.word	0x080164e3

0801615c <_cleanup_r>:
 801615c:	4901      	ldr	r1, [pc, #4]	; (8016164 <_cleanup_r+0x8>)
 801615e:	f000 b8af 	b.w	80162c0 <_fwalk_reent>
 8016162:	bf00      	nop
 8016164:	0801609d 	.word	0x0801609d

08016168 <__sfmoreglue>:
 8016168:	b570      	push	{r4, r5, r6, lr}
 801616a:	1e4a      	subs	r2, r1, #1
 801616c:	2568      	movs	r5, #104	; 0x68
 801616e:	4355      	muls	r5, r2
 8016170:	460e      	mov	r6, r1
 8016172:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8016176:	f7ff fa87 	bl	8015688 <_malloc_r>
 801617a:	4604      	mov	r4, r0
 801617c:	b140      	cbz	r0, 8016190 <__sfmoreglue+0x28>
 801617e:	2100      	movs	r1, #0
 8016180:	e9c0 1600 	strd	r1, r6, [r0]
 8016184:	300c      	adds	r0, #12
 8016186:	60a0      	str	r0, [r4, #8]
 8016188:	f105 0268 	add.w	r2, r5, #104	; 0x68
 801618c:	f7fd fbfe 	bl	801398c <memset>
 8016190:	4620      	mov	r0, r4
 8016192:	bd70      	pop	{r4, r5, r6, pc}

08016194 <__sfp_lock_acquire>:
 8016194:	4801      	ldr	r0, [pc, #4]	; (801619c <__sfp_lock_acquire+0x8>)
 8016196:	f000 b8b3 	b.w	8016300 <__retarget_lock_acquire_recursive>
 801619a:	bf00      	nop
 801619c:	240016c8 	.word	0x240016c8

080161a0 <__sfp_lock_release>:
 80161a0:	4801      	ldr	r0, [pc, #4]	; (80161a8 <__sfp_lock_release+0x8>)
 80161a2:	f000 b8ae 	b.w	8016302 <__retarget_lock_release_recursive>
 80161a6:	bf00      	nop
 80161a8:	240016c8 	.word	0x240016c8

080161ac <__sinit_lock_acquire>:
 80161ac:	4801      	ldr	r0, [pc, #4]	; (80161b4 <__sinit_lock_acquire+0x8>)
 80161ae:	f000 b8a7 	b.w	8016300 <__retarget_lock_acquire_recursive>
 80161b2:	bf00      	nop
 80161b4:	240016c3 	.word	0x240016c3

080161b8 <__sinit_lock_release>:
 80161b8:	4801      	ldr	r0, [pc, #4]	; (80161c0 <__sinit_lock_release+0x8>)
 80161ba:	f000 b8a2 	b.w	8016302 <__retarget_lock_release_recursive>
 80161be:	bf00      	nop
 80161c0:	240016c3 	.word	0x240016c3

080161c4 <__sinit>:
 80161c4:	b510      	push	{r4, lr}
 80161c6:	4604      	mov	r4, r0
 80161c8:	f7ff fff0 	bl	80161ac <__sinit_lock_acquire>
 80161cc:	69a3      	ldr	r3, [r4, #24]
 80161ce:	b11b      	cbz	r3, 80161d8 <__sinit+0x14>
 80161d0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80161d4:	f7ff bff0 	b.w	80161b8 <__sinit_lock_release>
 80161d8:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 80161dc:	6523      	str	r3, [r4, #80]	; 0x50
 80161de:	4b13      	ldr	r3, [pc, #76]	; (801622c <__sinit+0x68>)
 80161e0:	4a13      	ldr	r2, [pc, #76]	; (8016230 <__sinit+0x6c>)
 80161e2:	681b      	ldr	r3, [r3, #0]
 80161e4:	62a2      	str	r2, [r4, #40]	; 0x28
 80161e6:	42a3      	cmp	r3, r4
 80161e8:	bf04      	itt	eq
 80161ea:	2301      	moveq	r3, #1
 80161ec:	61a3      	streq	r3, [r4, #24]
 80161ee:	4620      	mov	r0, r4
 80161f0:	f000 f820 	bl	8016234 <__sfp>
 80161f4:	6060      	str	r0, [r4, #4]
 80161f6:	4620      	mov	r0, r4
 80161f8:	f000 f81c 	bl	8016234 <__sfp>
 80161fc:	60a0      	str	r0, [r4, #8]
 80161fe:	4620      	mov	r0, r4
 8016200:	f000 f818 	bl	8016234 <__sfp>
 8016204:	2200      	movs	r2, #0
 8016206:	60e0      	str	r0, [r4, #12]
 8016208:	2104      	movs	r1, #4
 801620a:	6860      	ldr	r0, [r4, #4]
 801620c:	f7ff ff82 	bl	8016114 <std>
 8016210:	68a0      	ldr	r0, [r4, #8]
 8016212:	2201      	movs	r2, #1
 8016214:	2109      	movs	r1, #9
 8016216:	f7ff ff7d 	bl	8016114 <std>
 801621a:	68e0      	ldr	r0, [r4, #12]
 801621c:	2202      	movs	r2, #2
 801621e:	2112      	movs	r1, #18
 8016220:	f7ff ff78 	bl	8016114 <std>
 8016224:	2301      	movs	r3, #1
 8016226:	61a3      	str	r3, [r4, #24]
 8016228:	e7d2      	b.n	80161d0 <__sinit+0xc>
 801622a:	bf00      	nop
 801622c:	08016f68 	.word	0x08016f68
 8016230:	0801615d 	.word	0x0801615d

08016234 <__sfp>:
 8016234:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8016236:	4607      	mov	r7, r0
 8016238:	f7ff ffac 	bl	8016194 <__sfp_lock_acquire>
 801623c:	4b1e      	ldr	r3, [pc, #120]	; (80162b8 <__sfp+0x84>)
 801623e:	681e      	ldr	r6, [r3, #0]
 8016240:	69b3      	ldr	r3, [r6, #24]
 8016242:	b913      	cbnz	r3, 801624a <__sfp+0x16>
 8016244:	4630      	mov	r0, r6
 8016246:	f7ff ffbd 	bl	80161c4 <__sinit>
 801624a:	3648      	adds	r6, #72	; 0x48
 801624c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8016250:	3b01      	subs	r3, #1
 8016252:	d503      	bpl.n	801625c <__sfp+0x28>
 8016254:	6833      	ldr	r3, [r6, #0]
 8016256:	b30b      	cbz	r3, 801629c <__sfp+0x68>
 8016258:	6836      	ldr	r6, [r6, #0]
 801625a:	e7f7      	b.n	801624c <__sfp+0x18>
 801625c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8016260:	b9d5      	cbnz	r5, 8016298 <__sfp+0x64>
 8016262:	4b16      	ldr	r3, [pc, #88]	; (80162bc <__sfp+0x88>)
 8016264:	60e3      	str	r3, [r4, #12]
 8016266:	f104 0058 	add.w	r0, r4, #88	; 0x58
 801626a:	6665      	str	r5, [r4, #100]	; 0x64
 801626c:	f000 f847 	bl	80162fe <__retarget_lock_init_recursive>
 8016270:	f7ff ff96 	bl	80161a0 <__sfp_lock_release>
 8016274:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8016278:	e9c4 5504 	strd	r5, r5, [r4, #16]
 801627c:	6025      	str	r5, [r4, #0]
 801627e:	61a5      	str	r5, [r4, #24]
 8016280:	2208      	movs	r2, #8
 8016282:	4629      	mov	r1, r5
 8016284:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8016288:	f7fd fb80 	bl	801398c <memset>
 801628c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8016290:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8016294:	4620      	mov	r0, r4
 8016296:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8016298:	3468      	adds	r4, #104	; 0x68
 801629a:	e7d9      	b.n	8016250 <__sfp+0x1c>
 801629c:	2104      	movs	r1, #4
 801629e:	4638      	mov	r0, r7
 80162a0:	f7ff ff62 	bl	8016168 <__sfmoreglue>
 80162a4:	4604      	mov	r4, r0
 80162a6:	6030      	str	r0, [r6, #0]
 80162a8:	2800      	cmp	r0, #0
 80162aa:	d1d5      	bne.n	8016258 <__sfp+0x24>
 80162ac:	f7ff ff78 	bl	80161a0 <__sfp_lock_release>
 80162b0:	230c      	movs	r3, #12
 80162b2:	603b      	str	r3, [r7, #0]
 80162b4:	e7ee      	b.n	8016294 <__sfp+0x60>
 80162b6:	bf00      	nop
 80162b8:	08016f68 	.word	0x08016f68
 80162bc:	ffff0001 	.word	0xffff0001

080162c0 <_fwalk_reent>:
 80162c0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80162c4:	4606      	mov	r6, r0
 80162c6:	4688      	mov	r8, r1
 80162c8:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80162cc:	2700      	movs	r7, #0
 80162ce:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80162d2:	f1b9 0901 	subs.w	r9, r9, #1
 80162d6:	d505      	bpl.n	80162e4 <_fwalk_reent+0x24>
 80162d8:	6824      	ldr	r4, [r4, #0]
 80162da:	2c00      	cmp	r4, #0
 80162dc:	d1f7      	bne.n	80162ce <_fwalk_reent+0xe>
 80162de:	4638      	mov	r0, r7
 80162e0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80162e4:	89ab      	ldrh	r3, [r5, #12]
 80162e6:	2b01      	cmp	r3, #1
 80162e8:	d907      	bls.n	80162fa <_fwalk_reent+0x3a>
 80162ea:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80162ee:	3301      	adds	r3, #1
 80162f0:	d003      	beq.n	80162fa <_fwalk_reent+0x3a>
 80162f2:	4629      	mov	r1, r5
 80162f4:	4630      	mov	r0, r6
 80162f6:	47c0      	blx	r8
 80162f8:	4307      	orrs	r7, r0
 80162fa:	3568      	adds	r5, #104	; 0x68
 80162fc:	e7e9      	b.n	80162d2 <_fwalk_reent+0x12>

080162fe <__retarget_lock_init_recursive>:
 80162fe:	4770      	bx	lr

08016300 <__retarget_lock_acquire_recursive>:
 8016300:	4770      	bx	lr

08016302 <__retarget_lock_release_recursive>:
 8016302:	4770      	bx	lr

08016304 <__swhatbuf_r>:
 8016304:	b570      	push	{r4, r5, r6, lr}
 8016306:	460e      	mov	r6, r1
 8016308:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801630c:	2900      	cmp	r1, #0
 801630e:	b096      	sub	sp, #88	; 0x58
 8016310:	4614      	mov	r4, r2
 8016312:	461d      	mov	r5, r3
 8016314:	da07      	bge.n	8016326 <__swhatbuf_r+0x22>
 8016316:	2300      	movs	r3, #0
 8016318:	602b      	str	r3, [r5, #0]
 801631a:	89b3      	ldrh	r3, [r6, #12]
 801631c:	061a      	lsls	r2, r3, #24
 801631e:	d410      	bmi.n	8016342 <__swhatbuf_r+0x3e>
 8016320:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8016324:	e00e      	b.n	8016344 <__swhatbuf_r+0x40>
 8016326:	466a      	mov	r2, sp
 8016328:	f000 f902 	bl	8016530 <_fstat_r>
 801632c:	2800      	cmp	r0, #0
 801632e:	dbf2      	blt.n	8016316 <__swhatbuf_r+0x12>
 8016330:	9a01      	ldr	r2, [sp, #4]
 8016332:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8016336:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 801633a:	425a      	negs	r2, r3
 801633c:	415a      	adcs	r2, r3
 801633e:	602a      	str	r2, [r5, #0]
 8016340:	e7ee      	b.n	8016320 <__swhatbuf_r+0x1c>
 8016342:	2340      	movs	r3, #64	; 0x40
 8016344:	2000      	movs	r0, #0
 8016346:	6023      	str	r3, [r4, #0]
 8016348:	b016      	add	sp, #88	; 0x58
 801634a:	bd70      	pop	{r4, r5, r6, pc}

0801634c <__smakebuf_r>:
 801634c:	898b      	ldrh	r3, [r1, #12]
 801634e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8016350:	079d      	lsls	r5, r3, #30
 8016352:	4606      	mov	r6, r0
 8016354:	460c      	mov	r4, r1
 8016356:	d507      	bpl.n	8016368 <__smakebuf_r+0x1c>
 8016358:	f104 0347 	add.w	r3, r4, #71	; 0x47
 801635c:	6023      	str	r3, [r4, #0]
 801635e:	6123      	str	r3, [r4, #16]
 8016360:	2301      	movs	r3, #1
 8016362:	6163      	str	r3, [r4, #20]
 8016364:	b002      	add	sp, #8
 8016366:	bd70      	pop	{r4, r5, r6, pc}
 8016368:	ab01      	add	r3, sp, #4
 801636a:	466a      	mov	r2, sp
 801636c:	f7ff ffca 	bl	8016304 <__swhatbuf_r>
 8016370:	9900      	ldr	r1, [sp, #0]
 8016372:	4605      	mov	r5, r0
 8016374:	4630      	mov	r0, r6
 8016376:	f7ff f987 	bl	8015688 <_malloc_r>
 801637a:	b948      	cbnz	r0, 8016390 <__smakebuf_r+0x44>
 801637c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8016380:	059a      	lsls	r2, r3, #22
 8016382:	d4ef      	bmi.n	8016364 <__smakebuf_r+0x18>
 8016384:	f023 0303 	bic.w	r3, r3, #3
 8016388:	f043 0302 	orr.w	r3, r3, #2
 801638c:	81a3      	strh	r3, [r4, #12]
 801638e:	e7e3      	b.n	8016358 <__smakebuf_r+0xc>
 8016390:	4b0d      	ldr	r3, [pc, #52]	; (80163c8 <__smakebuf_r+0x7c>)
 8016392:	62b3      	str	r3, [r6, #40]	; 0x28
 8016394:	89a3      	ldrh	r3, [r4, #12]
 8016396:	6020      	str	r0, [r4, #0]
 8016398:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801639c:	81a3      	strh	r3, [r4, #12]
 801639e:	9b00      	ldr	r3, [sp, #0]
 80163a0:	6163      	str	r3, [r4, #20]
 80163a2:	9b01      	ldr	r3, [sp, #4]
 80163a4:	6120      	str	r0, [r4, #16]
 80163a6:	b15b      	cbz	r3, 80163c0 <__smakebuf_r+0x74>
 80163a8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80163ac:	4630      	mov	r0, r6
 80163ae:	f000 f8d1 	bl	8016554 <_isatty_r>
 80163b2:	b128      	cbz	r0, 80163c0 <__smakebuf_r+0x74>
 80163b4:	89a3      	ldrh	r3, [r4, #12]
 80163b6:	f023 0303 	bic.w	r3, r3, #3
 80163ba:	f043 0301 	orr.w	r3, r3, #1
 80163be:	81a3      	strh	r3, [r4, #12]
 80163c0:	89a0      	ldrh	r0, [r4, #12]
 80163c2:	4305      	orrs	r5, r0
 80163c4:	81a5      	strh	r5, [r4, #12]
 80163c6:	e7cd      	b.n	8016364 <__smakebuf_r+0x18>
 80163c8:	0801615d 	.word	0x0801615d

080163cc <_malloc_usable_size_r>:
 80163cc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80163d0:	1f18      	subs	r0, r3, #4
 80163d2:	2b00      	cmp	r3, #0
 80163d4:	bfbc      	itt	lt
 80163d6:	580b      	ldrlt	r3, [r1, r0]
 80163d8:	18c0      	addlt	r0, r0, r3
 80163da:	4770      	bx	lr

080163dc <_raise_r>:
 80163dc:	291f      	cmp	r1, #31
 80163de:	b538      	push	{r3, r4, r5, lr}
 80163e0:	4604      	mov	r4, r0
 80163e2:	460d      	mov	r5, r1
 80163e4:	d904      	bls.n	80163f0 <_raise_r+0x14>
 80163e6:	2316      	movs	r3, #22
 80163e8:	6003      	str	r3, [r0, #0]
 80163ea:	f04f 30ff 	mov.w	r0, #4294967295
 80163ee:	bd38      	pop	{r3, r4, r5, pc}
 80163f0:	6c42      	ldr	r2, [r0, #68]	; 0x44
 80163f2:	b112      	cbz	r2, 80163fa <_raise_r+0x1e>
 80163f4:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80163f8:	b94b      	cbnz	r3, 801640e <_raise_r+0x32>
 80163fa:	4620      	mov	r0, r4
 80163fc:	f000 f830 	bl	8016460 <_getpid_r>
 8016400:	462a      	mov	r2, r5
 8016402:	4601      	mov	r1, r0
 8016404:	4620      	mov	r0, r4
 8016406:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801640a:	f000 b817 	b.w	801643c <_kill_r>
 801640e:	2b01      	cmp	r3, #1
 8016410:	d00a      	beq.n	8016428 <_raise_r+0x4c>
 8016412:	1c59      	adds	r1, r3, #1
 8016414:	d103      	bne.n	801641e <_raise_r+0x42>
 8016416:	2316      	movs	r3, #22
 8016418:	6003      	str	r3, [r0, #0]
 801641a:	2001      	movs	r0, #1
 801641c:	e7e7      	b.n	80163ee <_raise_r+0x12>
 801641e:	2400      	movs	r4, #0
 8016420:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8016424:	4628      	mov	r0, r5
 8016426:	4798      	blx	r3
 8016428:	2000      	movs	r0, #0
 801642a:	e7e0      	b.n	80163ee <_raise_r+0x12>

0801642c <raise>:
 801642c:	4b02      	ldr	r3, [pc, #8]	; (8016438 <raise+0xc>)
 801642e:	4601      	mov	r1, r0
 8016430:	6818      	ldr	r0, [r3, #0]
 8016432:	f7ff bfd3 	b.w	80163dc <_raise_r>
 8016436:	bf00      	nop
 8016438:	24000160 	.word	0x24000160

0801643c <_kill_r>:
 801643c:	b538      	push	{r3, r4, r5, lr}
 801643e:	4d07      	ldr	r5, [pc, #28]	; (801645c <_kill_r+0x20>)
 8016440:	2300      	movs	r3, #0
 8016442:	4604      	mov	r4, r0
 8016444:	4608      	mov	r0, r1
 8016446:	4611      	mov	r1, r2
 8016448:	602b      	str	r3, [r5, #0]
 801644a:	f7eb fcff 	bl	8001e4c <_kill>
 801644e:	1c43      	adds	r3, r0, #1
 8016450:	d102      	bne.n	8016458 <_kill_r+0x1c>
 8016452:	682b      	ldr	r3, [r5, #0]
 8016454:	b103      	cbz	r3, 8016458 <_kill_r+0x1c>
 8016456:	6023      	str	r3, [r4, #0]
 8016458:	bd38      	pop	{r3, r4, r5, pc}
 801645a:	bf00      	nop
 801645c:	240016bc 	.word	0x240016bc

08016460 <_getpid_r>:
 8016460:	f7eb bcec 	b.w	8001e3c <_getpid>

08016464 <__sread>:
 8016464:	b510      	push	{r4, lr}
 8016466:	460c      	mov	r4, r1
 8016468:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801646c:	f000 f894 	bl	8016598 <_read_r>
 8016470:	2800      	cmp	r0, #0
 8016472:	bfab      	itete	ge
 8016474:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8016476:	89a3      	ldrhlt	r3, [r4, #12]
 8016478:	181b      	addge	r3, r3, r0
 801647a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 801647e:	bfac      	ite	ge
 8016480:	6563      	strge	r3, [r4, #84]	; 0x54
 8016482:	81a3      	strhlt	r3, [r4, #12]
 8016484:	bd10      	pop	{r4, pc}

08016486 <__swrite>:
 8016486:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801648a:	461f      	mov	r7, r3
 801648c:	898b      	ldrh	r3, [r1, #12]
 801648e:	05db      	lsls	r3, r3, #23
 8016490:	4605      	mov	r5, r0
 8016492:	460c      	mov	r4, r1
 8016494:	4616      	mov	r6, r2
 8016496:	d505      	bpl.n	80164a4 <__swrite+0x1e>
 8016498:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801649c:	2302      	movs	r3, #2
 801649e:	2200      	movs	r2, #0
 80164a0:	f000 f868 	bl	8016574 <_lseek_r>
 80164a4:	89a3      	ldrh	r3, [r4, #12]
 80164a6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80164aa:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80164ae:	81a3      	strh	r3, [r4, #12]
 80164b0:	4632      	mov	r2, r6
 80164b2:	463b      	mov	r3, r7
 80164b4:	4628      	mov	r0, r5
 80164b6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80164ba:	f000 b817 	b.w	80164ec <_write_r>

080164be <__sseek>:
 80164be:	b510      	push	{r4, lr}
 80164c0:	460c      	mov	r4, r1
 80164c2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80164c6:	f000 f855 	bl	8016574 <_lseek_r>
 80164ca:	1c43      	adds	r3, r0, #1
 80164cc:	89a3      	ldrh	r3, [r4, #12]
 80164ce:	bf15      	itete	ne
 80164d0:	6560      	strne	r0, [r4, #84]	; 0x54
 80164d2:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80164d6:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80164da:	81a3      	strheq	r3, [r4, #12]
 80164dc:	bf18      	it	ne
 80164de:	81a3      	strhne	r3, [r4, #12]
 80164e0:	bd10      	pop	{r4, pc}

080164e2 <__sclose>:
 80164e2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80164e6:	f000 b813 	b.w	8016510 <_close_r>
	...

080164ec <_write_r>:
 80164ec:	b538      	push	{r3, r4, r5, lr}
 80164ee:	4d07      	ldr	r5, [pc, #28]	; (801650c <_write_r+0x20>)
 80164f0:	4604      	mov	r4, r0
 80164f2:	4608      	mov	r0, r1
 80164f4:	4611      	mov	r1, r2
 80164f6:	2200      	movs	r2, #0
 80164f8:	602a      	str	r2, [r5, #0]
 80164fa:	461a      	mov	r2, r3
 80164fc:	f7eb fcdd 	bl	8001eba <_write>
 8016500:	1c43      	adds	r3, r0, #1
 8016502:	d102      	bne.n	801650a <_write_r+0x1e>
 8016504:	682b      	ldr	r3, [r5, #0]
 8016506:	b103      	cbz	r3, 801650a <_write_r+0x1e>
 8016508:	6023      	str	r3, [r4, #0]
 801650a:	bd38      	pop	{r3, r4, r5, pc}
 801650c:	240016bc 	.word	0x240016bc

08016510 <_close_r>:
 8016510:	b538      	push	{r3, r4, r5, lr}
 8016512:	4d06      	ldr	r5, [pc, #24]	; (801652c <_close_r+0x1c>)
 8016514:	2300      	movs	r3, #0
 8016516:	4604      	mov	r4, r0
 8016518:	4608      	mov	r0, r1
 801651a:	602b      	str	r3, [r5, #0]
 801651c:	f7eb fce9 	bl	8001ef2 <_close>
 8016520:	1c43      	adds	r3, r0, #1
 8016522:	d102      	bne.n	801652a <_close_r+0x1a>
 8016524:	682b      	ldr	r3, [r5, #0]
 8016526:	b103      	cbz	r3, 801652a <_close_r+0x1a>
 8016528:	6023      	str	r3, [r4, #0]
 801652a:	bd38      	pop	{r3, r4, r5, pc}
 801652c:	240016bc 	.word	0x240016bc

08016530 <_fstat_r>:
 8016530:	b538      	push	{r3, r4, r5, lr}
 8016532:	4d07      	ldr	r5, [pc, #28]	; (8016550 <_fstat_r+0x20>)
 8016534:	2300      	movs	r3, #0
 8016536:	4604      	mov	r4, r0
 8016538:	4608      	mov	r0, r1
 801653a:	4611      	mov	r1, r2
 801653c:	602b      	str	r3, [r5, #0]
 801653e:	f7eb fce4 	bl	8001f0a <_fstat>
 8016542:	1c43      	adds	r3, r0, #1
 8016544:	d102      	bne.n	801654c <_fstat_r+0x1c>
 8016546:	682b      	ldr	r3, [r5, #0]
 8016548:	b103      	cbz	r3, 801654c <_fstat_r+0x1c>
 801654a:	6023      	str	r3, [r4, #0]
 801654c:	bd38      	pop	{r3, r4, r5, pc}
 801654e:	bf00      	nop
 8016550:	240016bc 	.word	0x240016bc

08016554 <_isatty_r>:
 8016554:	b538      	push	{r3, r4, r5, lr}
 8016556:	4d06      	ldr	r5, [pc, #24]	; (8016570 <_isatty_r+0x1c>)
 8016558:	2300      	movs	r3, #0
 801655a:	4604      	mov	r4, r0
 801655c:	4608      	mov	r0, r1
 801655e:	602b      	str	r3, [r5, #0]
 8016560:	f7eb fce3 	bl	8001f2a <_isatty>
 8016564:	1c43      	adds	r3, r0, #1
 8016566:	d102      	bne.n	801656e <_isatty_r+0x1a>
 8016568:	682b      	ldr	r3, [r5, #0]
 801656a:	b103      	cbz	r3, 801656e <_isatty_r+0x1a>
 801656c:	6023      	str	r3, [r4, #0]
 801656e:	bd38      	pop	{r3, r4, r5, pc}
 8016570:	240016bc 	.word	0x240016bc

08016574 <_lseek_r>:
 8016574:	b538      	push	{r3, r4, r5, lr}
 8016576:	4d07      	ldr	r5, [pc, #28]	; (8016594 <_lseek_r+0x20>)
 8016578:	4604      	mov	r4, r0
 801657a:	4608      	mov	r0, r1
 801657c:	4611      	mov	r1, r2
 801657e:	2200      	movs	r2, #0
 8016580:	602a      	str	r2, [r5, #0]
 8016582:	461a      	mov	r2, r3
 8016584:	f7eb fcdc 	bl	8001f40 <_lseek>
 8016588:	1c43      	adds	r3, r0, #1
 801658a:	d102      	bne.n	8016592 <_lseek_r+0x1e>
 801658c:	682b      	ldr	r3, [r5, #0]
 801658e:	b103      	cbz	r3, 8016592 <_lseek_r+0x1e>
 8016590:	6023      	str	r3, [r4, #0]
 8016592:	bd38      	pop	{r3, r4, r5, pc}
 8016594:	240016bc 	.word	0x240016bc

08016598 <_read_r>:
 8016598:	b538      	push	{r3, r4, r5, lr}
 801659a:	4d07      	ldr	r5, [pc, #28]	; (80165b8 <_read_r+0x20>)
 801659c:	4604      	mov	r4, r0
 801659e:	4608      	mov	r0, r1
 80165a0:	4611      	mov	r1, r2
 80165a2:	2200      	movs	r2, #0
 80165a4:	602a      	str	r2, [r5, #0]
 80165a6:	461a      	mov	r2, r3
 80165a8:	f7eb fc6a 	bl	8001e80 <_read>
 80165ac:	1c43      	adds	r3, r0, #1
 80165ae:	d102      	bne.n	80165b6 <_read_r+0x1e>
 80165b0:	682b      	ldr	r3, [r5, #0]
 80165b2:	b103      	cbz	r3, 80165b6 <_read_r+0x1e>
 80165b4:	6023      	str	r3, [r4, #0]
 80165b6:	bd38      	pop	{r3, r4, r5, pc}
 80165b8:	240016bc 	.word	0x240016bc

080165bc <_init>:
 80165bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80165be:	bf00      	nop
 80165c0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80165c2:	bc08      	pop	{r3}
 80165c4:	469e      	mov	lr, r3
 80165c6:	4770      	bx	lr

080165c8 <_fini>:
 80165c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80165ca:	bf00      	nop
 80165cc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80165ce:	bc08      	pop	{r3}
 80165d0:	469e      	mov	lr, r3
 80165d2:	4770      	bx	lr
