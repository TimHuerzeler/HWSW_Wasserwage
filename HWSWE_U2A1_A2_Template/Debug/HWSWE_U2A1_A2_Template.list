
HWSWE_U2A1_A2_Template.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000163dc  080002a0  080002a0  000102a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000d6c  08016680  08016680  00026680  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  080173ec  080173ec  000273ec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  080173f4  080173f4  000273f4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  080173f8  080173f8  000273f8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000330  24000000  080173fc  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00000f30  24000330  0801772c  00030330  2**2
                  ALLOC
  8 ._user_heap_stack 00005000  24001260  0801772c  00031260  2**0
                  ALLOC
  9 .ARM.attributes 00000030  00000000  00000000  00030330  2**0
                  CONTENTS, READONLY
 10 .debug_info   0004055a  00000000  00000000  00030360  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 000093ad  00000000  00000000  000708ba  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00002fa0  00000000  00000000  00079c68  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_ranges 00002b40  00000000  00000000  0007cc08  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  00049b86  00000000  00000000  0007f748  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   000493d1  00000000  00000000  000c92ce  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    00190d1b  00000000  00000000  0011269f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000050  00000000  00000000  002a33ba  2**0
                  CONTENTS, READONLY
 18 .debug_frame  0000d378  00000000  00000000  002a340c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	; (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	; (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	; (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	24000330 	.word	0x24000330
 80002bc:	00000000 	.word	0x00000000
 80002c0:	08016664 	.word	0x08016664

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	; (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	; (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	; (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	24000334 	.word	0x24000334
 80002dc:	08016664 	.word	0x08016664

080002e0 <strlen>:
 80002e0:	4603      	mov	r3, r0
 80002e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002e6:	2a00      	cmp	r2, #0
 80002e8:	d1fb      	bne.n	80002e2 <strlen+0x2>
 80002ea:	1a18      	subs	r0, r3, r0
 80002ec:	3801      	subs	r0, #1
 80002ee:	4770      	bx	lr

080002f0 <memchr>:
 80002f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002f4:	2a10      	cmp	r2, #16
 80002f6:	db2b      	blt.n	8000350 <memchr+0x60>
 80002f8:	f010 0f07 	tst.w	r0, #7
 80002fc:	d008      	beq.n	8000310 <memchr+0x20>
 80002fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000302:	3a01      	subs	r2, #1
 8000304:	428b      	cmp	r3, r1
 8000306:	d02d      	beq.n	8000364 <memchr+0x74>
 8000308:	f010 0f07 	tst.w	r0, #7
 800030c:	b342      	cbz	r2, 8000360 <memchr+0x70>
 800030e:	d1f6      	bne.n	80002fe <memchr+0xe>
 8000310:	b4f0      	push	{r4, r5, r6, r7}
 8000312:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000316:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800031a:	f022 0407 	bic.w	r4, r2, #7
 800031e:	f07f 0700 	mvns.w	r7, #0
 8000322:	2300      	movs	r3, #0
 8000324:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000328:	3c08      	subs	r4, #8
 800032a:	ea85 0501 	eor.w	r5, r5, r1
 800032e:	ea86 0601 	eor.w	r6, r6, r1
 8000332:	fa85 f547 	uadd8	r5, r5, r7
 8000336:	faa3 f587 	sel	r5, r3, r7
 800033a:	fa86 f647 	uadd8	r6, r6, r7
 800033e:	faa5 f687 	sel	r6, r5, r7
 8000342:	b98e      	cbnz	r6, 8000368 <memchr+0x78>
 8000344:	d1ee      	bne.n	8000324 <memchr+0x34>
 8000346:	bcf0      	pop	{r4, r5, r6, r7}
 8000348:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800034c:	f002 0207 	and.w	r2, r2, #7
 8000350:	b132      	cbz	r2, 8000360 <memchr+0x70>
 8000352:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000356:	3a01      	subs	r2, #1
 8000358:	ea83 0301 	eor.w	r3, r3, r1
 800035c:	b113      	cbz	r3, 8000364 <memchr+0x74>
 800035e:	d1f8      	bne.n	8000352 <memchr+0x62>
 8000360:	2000      	movs	r0, #0
 8000362:	4770      	bx	lr
 8000364:	3801      	subs	r0, #1
 8000366:	4770      	bx	lr
 8000368:	2d00      	cmp	r5, #0
 800036a:	bf06      	itte	eq
 800036c:	4635      	moveq	r5, r6
 800036e:	3803      	subeq	r0, #3
 8000370:	3807      	subne	r0, #7
 8000372:	f015 0f01 	tst.w	r5, #1
 8000376:	d107      	bne.n	8000388 <memchr+0x98>
 8000378:	3001      	adds	r0, #1
 800037a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800037e:	bf02      	ittt	eq
 8000380:	3001      	addeq	r0, #1
 8000382:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000386:	3001      	addeq	r0, #1
 8000388:	bcf0      	pop	{r4, r5, r6, r7}
 800038a:	3801      	subs	r0, #1
 800038c:	4770      	bx	lr
 800038e:	bf00      	nop

08000390 <__aeabi_uldivmod>:
 8000390:	b953      	cbnz	r3, 80003a8 <__aeabi_uldivmod+0x18>
 8000392:	b94a      	cbnz	r2, 80003a8 <__aeabi_uldivmod+0x18>
 8000394:	2900      	cmp	r1, #0
 8000396:	bf08      	it	eq
 8000398:	2800      	cmpeq	r0, #0
 800039a:	bf1c      	itt	ne
 800039c:	f04f 31ff 	movne.w	r1, #4294967295
 80003a0:	f04f 30ff 	movne.w	r0, #4294967295
 80003a4:	f000 b974 	b.w	8000690 <__aeabi_idiv0>
 80003a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80003ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80003b0:	f000 f806 	bl	80003c0 <__udivmoddi4>
 80003b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80003b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80003bc:	b004      	add	sp, #16
 80003be:	4770      	bx	lr

080003c0 <__udivmoddi4>:
 80003c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80003c4:	9d08      	ldr	r5, [sp, #32]
 80003c6:	4604      	mov	r4, r0
 80003c8:	468e      	mov	lr, r1
 80003ca:	2b00      	cmp	r3, #0
 80003cc:	d14d      	bne.n	800046a <__udivmoddi4+0xaa>
 80003ce:	428a      	cmp	r2, r1
 80003d0:	4694      	mov	ip, r2
 80003d2:	d969      	bls.n	80004a8 <__udivmoddi4+0xe8>
 80003d4:	fab2 f282 	clz	r2, r2
 80003d8:	b152      	cbz	r2, 80003f0 <__udivmoddi4+0x30>
 80003da:	fa01 f302 	lsl.w	r3, r1, r2
 80003de:	f1c2 0120 	rsb	r1, r2, #32
 80003e2:	fa20 f101 	lsr.w	r1, r0, r1
 80003e6:	fa0c fc02 	lsl.w	ip, ip, r2
 80003ea:	ea41 0e03 	orr.w	lr, r1, r3
 80003ee:	4094      	lsls	r4, r2
 80003f0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80003f4:	0c21      	lsrs	r1, r4, #16
 80003f6:	fbbe f6f8 	udiv	r6, lr, r8
 80003fa:	fa1f f78c 	uxth.w	r7, ip
 80003fe:	fb08 e316 	mls	r3, r8, r6, lr
 8000402:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000406:	fb06 f107 	mul.w	r1, r6, r7
 800040a:	4299      	cmp	r1, r3
 800040c:	d90a      	bls.n	8000424 <__udivmoddi4+0x64>
 800040e:	eb1c 0303 	adds.w	r3, ip, r3
 8000412:	f106 30ff 	add.w	r0, r6, #4294967295
 8000416:	f080 811f 	bcs.w	8000658 <__udivmoddi4+0x298>
 800041a:	4299      	cmp	r1, r3
 800041c:	f240 811c 	bls.w	8000658 <__udivmoddi4+0x298>
 8000420:	3e02      	subs	r6, #2
 8000422:	4463      	add	r3, ip
 8000424:	1a5b      	subs	r3, r3, r1
 8000426:	b2a4      	uxth	r4, r4
 8000428:	fbb3 f0f8 	udiv	r0, r3, r8
 800042c:	fb08 3310 	mls	r3, r8, r0, r3
 8000430:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000434:	fb00 f707 	mul.w	r7, r0, r7
 8000438:	42a7      	cmp	r7, r4
 800043a:	d90a      	bls.n	8000452 <__udivmoddi4+0x92>
 800043c:	eb1c 0404 	adds.w	r4, ip, r4
 8000440:	f100 33ff 	add.w	r3, r0, #4294967295
 8000444:	f080 810a 	bcs.w	800065c <__udivmoddi4+0x29c>
 8000448:	42a7      	cmp	r7, r4
 800044a:	f240 8107 	bls.w	800065c <__udivmoddi4+0x29c>
 800044e:	4464      	add	r4, ip
 8000450:	3802      	subs	r0, #2
 8000452:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000456:	1be4      	subs	r4, r4, r7
 8000458:	2600      	movs	r6, #0
 800045a:	b11d      	cbz	r5, 8000464 <__udivmoddi4+0xa4>
 800045c:	40d4      	lsrs	r4, r2
 800045e:	2300      	movs	r3, #0
 8000460:	e9c5 4300 	strd	r4, r3, [r5]
 8000464:	4631      	mov	r1, r6
 8000466:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800046a:	428b      	cmp	r3, r1
 800046c:	d909      	bls.n	8000482 <__udivmoddi4+0xc2>
 800046e:	2d00      	cmp	r5, #0
 8000470:	f000 80ef 	beq.w	8000652 <__udivmoddi4+0x292>
 8000474:	2600      	movs	r6, #0
 8000476:	e9c5 0100 	strd	r0, r1, [r5]
 800047a:	4630      	mov	r0, r6
 800047c:	4631      	mov	r1, r6
 800047e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000482:	fab3 f683 	clz	r6, r3
 8000486:	2e00      	cmp	r6, #0
 8000488:	d14a      	bne.n	8000520 <__udivmoddi4+0x160>
 800048a:	428b      	cmp	r3, r1
 800048c:	d302      	bcc.n	8000494 <__udivmoddi4+0xd4>
 800048e:	4282      	cmp	r2, r0
 8000490:	f200 80f9 	bhi.w	8000686 <__udivmoddi4+0x2c6>
 8000494:	1a84      	subs	r4, r0, r2
 8000496:	eb61 0303 	sbc.w	r3, r1, r3
 800049a:	2001      	movs	r0, #1
 800049c:	469e      	mov	lr, r3
 800049e:	2d00      	cmp	r5, #0
 80004a0:	d0e0      	beq.n	8000464 <__udivmoddi4+0xa4>
 80004a2:	e9c5 4e00 	strd	r4, lr, [r5]
 80004a6:	e7dd      	b.n	8000464 <__udivmoddi4+0xa4>
 80004a8:	b902      	cbnz	r2, 80004ac <__udivmoddi4+0xec>
 80004aa:	deff      	udf	#255	; 0xff
 80004ac:	fab2 f282 	clz	r2, r2
 80004b0:	2a00      	cmp	r2, #0
 80004b2:	f040 8092 	bne.w	80005da <__udivmoddi4+0x21a>
 80004b6:	eba1 010c 	sub.w	r1, r1, ip
 80004ba:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004be:	fa1f fe8c 	uxth.w	lr, ip
 80004c2:	2601      	movs	r6, #1
 80004c4:	0c20      	lsrs	r0, r4, #16
 80004c6:	fbb1 f3f7 	udiv	r3, r1, r7
 80004ca:	fb07 1113 	mls	r1, r7, r3, r1
 80004ce:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80004d2:	fb0e f003 	mul.w	r0, lr, r3
 80004d6:	4288      	cmp	r0, r1
 80004d8:	d908      	bls.n	80004ec <__udivmoddi4+0x12c>
 80004da:	eb1c 0101 	adds.w	r1, ip, r1
 80004de:	f103 38ff 	add.w	r8, r3, #4294967295
 80004e2:	d202      	bcs.n	80004ea <__udivmoddi4+0x12a>
 80004e4:	4288      	cmp	r0, r1
 80004e6:	f200 80cb 	bhi.w	8000680 <__udivmoddi4+0x2c0>
 80004ea:	4643      	mov	r3, r8
 80004ec:	1a09      	subs	r1, r1, r0
 80004ee:	b2a4      	uxth	r4, r4
 80004f0:	fbb1 f0f7 	udiv	r0, r1, r7
 80004f4:	fb07 1110 	mls	r1, r7, r0, r1
 80004f8:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80004fc:	fb0e fe00 	mul.w	lr, lr, r0
 8000500:	45a6      	cmp	lr, r4
 8000502:	d908      	bls.n	8000516 <__udivmoddi4+0x156>
 8000504:	eb1c 0404 	adds.w	r4, ip, r4
 8000508:	f100 31ff 	add.w	r1, r0, #4294967295
 800050c:	d202      	bcs.n	8000514 <__udivmoddi4+0x154>
 800050e:	45a6      	cmp	lr, r4
 8000510:	f200 80bb 	bhi.w	800068a <__udivmoddi4+0x2ca>
 8000514:	4608      	mov	r0, r1
 8000516:	eba4 040e 	sub.w	r4, r4, lr
 800051a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800051e:	e79c      	b.n	800045a <__udivmoddi4+0x9a>
 8000520:	f1c6 0720 	rsb	r7, r6, #32
 8000524:	40b3      	lsls	r3, r6
 8000526:	fa22 fc07 	lsr.w	ip, r2, r7
 800052a:	ea4c 0c03 	orr.w	ip, ip, r3
 800052e:	fa20 f407 	lsr.w	r4, r0, r7
 8000532:	fa01 f306 	lsl.w	r3, r1, r6
 8000536:	431c      	orrs	r4, r3
 8000538:	40f9      	lsrs	r1, r7
 800053a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800053e:	fa00 f306 	lsl.w	r3, r0, r6
 8000542:	fbb1 f8f9 	udiv	r8, r1, r9
 8000546:	0c20      	lsrs	r0, r4, #16
 8000548:	fa1f fe8c 	uxth.w	lr, ip
 800054c:	fb09 1118 	mls	r1, r9, r8, r1
 8000550:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000554:	fb08 f00e 	mul.w	r0, r8, lr
 8000558:	4288      	cmp	r0, r1
 800055a:	fa02 f206 	lsl.w	r2, r2, r6
 800055e:	d90b      	bls.n	8000578 <__udivmoddi4+0x1b8>
 8000560:	eb1c 0101 	adds.w	r1, ip, r1
 8000564:	f108 3aff 	add.w	sl, r8, #4294967295
 8000568:	f080 8088 	bcs.w	800067c <__udivmoddi4+0x2bc>
 800056c:	4288      	cmp	r0, r1
 800056e:	f240 8085 	bls.w	800067c <__udivmoddi4+0x2bc>
 8000572:	f1a8 0802 	sub.w	r8, r8, #2
 8000576:	4461      	add	r1, ip
 8000578:	1a09      	subs	r1, r1, r0
 800057a:	b2a4      	uxth	r4, r4
 800057c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000580:	fb09 1110 	mls	r1, r9, r0, r1
 8000584:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000588:	fb00 fe0e 	mul.w	lr, r0, lr
 800058c:	458e      	cmp	lr, r1
 800058e:	d908      	bls.n	80005a2 <__udivmoddi4+0x1e2>
 8000590:	eb1c 0101 	adds.w	r1, ip, r1
 8000594:	f100 34ff 	add.w	r4, r0, #4294967295
 8000598:	d26c      	bcs.n	8000674 <__udivmoddi4+0x2b4>
 800059a:	458e      	cmp	lr, r1
 800059c:	d96a      	bls.n	8000674 <__udivmoddi4+0x2b4>
 800059e:	3802      	subs	r0, #2
 80005a0:	4461      	add	r1, ip
 80005a2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80005a6:	fba0 9402 	umull	r9, r4, r0, r2
 80005aa:	eba1 010e 	sub.w	r1, r1, lr
 80005ae:	42a1      	cmp	r1, r4
 80005b0:	46c8      	mov	r8, r9
 80005b2:	46a6      	mov	lr, r4
 80005b4:	d356      	bcc.n	8000664 <__udivmoddi4+0x2a4>
 80005b6:	d053      	beq.n	8000660 <__udivmoddi4+0x2a0>
 80005b8:	b15d      	cbz	r5, 80005d2 <__udivmoddi4+0x212>
 80005ba:	ebb3 0208 	subs.w	r2, r3, r8
 80005be:	eb61 010e 	sbc.w	r1, r1, lr
 80005c2:	fa01 f707 	lsl.w	r7, r1, r7
 80005c6:	fa22 f306 	lsr.w	r3, r2, r6
 80005ca:	40f1      	lsrs	r1, r6
 80005cc:	431f      	orrs	r7, r3
 80005ce:	e9c5 7100 	strd	r7, r1, [r5]
 80005d2:	2600      	movs	r6, #0
 80005d4:	4631      	mov	r1, r6
 80005d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	40d8      	lsrs	r0, r3
 80005e0:	fa0c fc02 	lsl.w	ip, ip, r2
 80005e4:	fa21 f303 	lsr.w	r3, r1, r3
 80005e8:	4091      	lsls	r1, r2
 80005ea:	4301      	orrs	r1, r0
 80005ec:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80005f0:	fa1f fe8c 	uxth.w	lr, ip
 80005f4:	fbb3 f0f7 	udiv	r0, r3, r7
 80005f8:	fb07 3610 	mls	r6, r7, r0, r3
 80005fc:	0c0b      	lsrs	r3, r1, #16
 80005fe:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000602:	fb00 f60e 	mul.w	r6, r0, lr
 8000606:	429e      	cmp	r6, r3
 8000608:	fa04 f402 	lsl.w	r4, r4, r2
 800060c:	d908      	bls.n	8000620 <__udivmoddi4+0x260>
 800060e:	eb1c 0303 	adds.w	r3, ip, r3
 8000612:	f100 38ff 	add.w	r8, r0, #4294967295
 8000616:	d22f      	bcs.n	8000678 <__udivmoddi4+0x2b8>
 8000618:	429e      	cmp	r6, r3
 800061a:	d92d      	bls.n	8000678 <__udivmoddi4+0x2b8>
 800061c:	3802      	subs	r0, #2
 800061e:	4463      	add	r3, ip
 8000620:	1b9b      	subs	r3, r3, r6
 8000622:	b289      	uxth	r1, r1
 8000624:	fbb3 f6f7 	udiv	r6, r3, r7
 8000628:	fb07 3316 	mls	r3, r7, r6, r3
 800062c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000630:	fb06 f30e 	mul.w	r3, r6, lr
 8000634:	428b      	cmp	r3, r1
 8000636:	d908      	bls.n	800064a <__udivmoddi4+0x28a>
 8000638:	eb1c 0101 	adds.w	r1, ip, r1
 800063c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000640:	d216      	bcs.n	8000670 <__udivmoddi4+0x2b0>
 8000642:	428b      	cmp	r3, r1
 8000644:	d914      	bls.n	8000670 <__udivmoddi4+0x2b0>
 8000646:	3e02      	subs	r6, #2
 8000648:	4461      	add	r1, ip
 800064a:	1ac9      	subs	r1, r1, r3
 800064c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000650:	e738      	b.n	80004c4 <__udivmoddi4+0x104>
 8000652:	462e      	mov	r6, r5
 8000654:	4628      	mov	r0, r5
 8000656:	e705      	b.n	8000464 <__udivmoddi4+0xa4>
 8000658:	4606      	mov	r6, r0
 800065a:	e6e3      	b.n	8000424 <__udivmoddi4+0x64>
 800065c:	4618      	mov	r0, r3
 800065e:	e6f8      	b.n	8000452 <__udivmoddi4+0x92>
 8000660:	454b      	cmp	r3, r9
 8000662:	d2a9      	bcs.n	80005b8 <__udivmoddi4+0x1f8>
 8000664:	ebb9 0802 	subs.w	r8, r9, r2
 8000668:	eb64 0e0c 	sbc.w	lr, r4, ip
 800066c:	3801      	subs	r0, #1
 800066e:	e7a3      	b.n	80005b8 <__udivmoddi4+0x1f8>
 8000670:	4646      	mov	r6, r8
 8000672:	e7ea      	b.n	800064a <__udivmoddi4+0x28a>
 8000674:	4620      	mov	r0, r4
 8000676:	e794      	b.n	80005a2 <__udivmoddi4+0x1e2>
 8000678:	4640      	mov	r0, r8
 800067a:	e7d1      	b.n	8000620 <__udivmoddi4+0x260>
 800067c:	46d0      	mov	r8, sl
 800067e:	e77b      	b.n	8000578 <__udivmoddi4+0x1b8>
 8000680:	3b02      	subs	r3, #2
 8000682:	4461      	add	r1, ip
 8000684:	e732      	b.n	80004ec <__udivmoddi4+0x12c>
 8000686:	4630      	mov	r0, r6
 8000688:	e709      	b.n	800049e <__udivmoddi4+0xde>
 800068a:	4464      	add	r4, ip
 800068c:	3802      	subs	r0, #2
 800068e:	e742      	b.n	8000516 <__udivmoddi4+0x156>

08000690 <__aeabi_idiv0>:
 8000690:	4770      	bx	lr
 8000692:	bf00      	nop

08000694 <MX_ADC1_Init>:
ADC_HandleTypeDef hadc2;
ADC_HandleTypeDef hadc3;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8000694:	b580      	push	{r7, lr}
 8000696:	b08a      	sub	sp, #40	; 0x28
 8000698:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 800069a:	f107 031c 	add.w	r3, r7, #28
 800069e:	2200      	movs	r2, #0
 80006a0:	601a      	str	r2, [r3, #0]
 80006a2:	605a      	str	r2, [r3, #4]
 80006a4:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 80006a6:	463b      	mov	r3, r7
 80006a8:	2200      	movs	r2, #0
 80006aa:	601a      	str	r2, [r3, #0]
 80006ac:	605a      	str	r2, [r3, #4]
 80006ae:	609a      	str	r2, [r3, #8]
 80006b0:	60da      	str	r2, [r3, #12]
 80006b2:	611a      	str	r2, [r3, #16]
 80006b4:	615a      	str	r2, [r3, #20]
 80006b6:	619a      	str	r2, [r3, #24]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Common config
  */
  hadc1.Instance = ADC1;
 80006b8:	4b2f      	ldr	r3, [pc, #188]	; (8000778 <MX_ADC1_Init+0xe4>)
 80006ba:	4a30      	ldr	r2, [pc, #192]	; (800077c <MX_ADC1_Init+0xe8>)
 80006bc:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 80006be:	4b2e      	ldr	r3, [pc, #184]	; (8000778 <MX_ADC1_Init+0xe4>)
 80006c0:	2200      	movs	r2, #0
 80006c2:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_16B;
 80006c4:	4b2c      	ldr	r3, [pc, #176]	; (8000778 <MX_ADC1_Init+0xe4>)
 80006c6:	2200      	movs	r2, #0
 80006c8:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80006ca:	4b2b      	ldr	r3, [pc, #172]	; (8000778 <MX_ADC1_Init+0xe4>)
 80006cc:	2200      	movs	r2, #0
 80006ce:	60da      	str	r2, [r3, #12]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80006d0:	4b29      	ldr	r3, [pc, #164]	; (8000778 <MX_ADC1_Init+0xe4>)
 80006d2:	2204      	movs	r2, #4
 80006d4:	611a      	str	r2, [r3, #16]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 80006d6:	4b28      	ldr	r3, [pc, #160]	; (8000778 <MX_ADC1_Init+0xe4>)
 80006d8:	2200      	movs	r2, #0
 80006da:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80006dc:	4b26      	ldr	r3, [pc, #152]	; (8000778 <MX_ADC1_Init+0xe4>)
 80006de:	2200      	movs	r2, #0
 80006e0:	755a      	strb	r2, [r3, #21]
  hadc1.Init.NbrOfConversion = 1;
 80006e2:	4b25      	ldr	r3, [pc, #148]	; (8000778 <MX_ADC1_Init+0xe4>)
 80006e4:	2201      	movs	r2, #1
 80006e6:	619a      	str	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80006e8:	4b23      	ldr	r3, [pc, #140]	; (8000778 <MX_ADC1_Init+0xe4>)
 80006ea:	2200      	movs	r2, #0
 80006ec:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80006ee:	4b22      	ldr	r3, [pc, #136]	; (8000778 <MX_ADC1_Init+0xe4>)
 80006f0:	2200      	movs	r2, #0
 80006f2:	625a      	str	r2, [r3, #36]	; 0x24
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80006f4:	4b20      	ldr	r3, [pc, #128]	; (8000778 <MX_ADC1_Init+0xe4>)
 80006f6:	2200      	movs	r2, #0
 80006f8:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DR;
 80006fa:	4b1f      	ldr	r3, [pc, #124]	; (8000778 <MX_ADC1_Init+0xe4>)
 80006fc:	2200      	movs	r2, #0
 80006fe:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000700:	4b1d      	ldr	r3, [pc, #116]	; (8000778 <MX_ADC1_Init+0xe4>)
 8000702:	2200      	movs	r2, #0
 8000704:	631a      	str	r2, [r3, #48]	; 0x30
  hadc1.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 8000706:	4b1c      	ldr	r3, [pc, #112]	; (8000778 <MX_ADC1_Init+0xe4>)
 8000708:	2200      	movs	r2, #0
 800070a:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 800070c:	4b1a      	ldr	r3, [pc, #104]	; (8000778 <MX_ADC1_Init+0xe4>)
 800070e:	2200      	movs	r2, #0
 8000710:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000714:	4818      	ldr	r0, [pc, #96]	; (8000778 <MX_ADC1_Init+0xe4>)
 8000716:	f002 f827 	bl	8002768 <HAL_ADC_Init>
 800071a:	4603      	mov	r3, r0
 800071c:	2b00      	cmp	r3, #0
 800071e:	d001      	beq.n	8000724 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8000720:	f001 f902 	bl	8001928 <Error_Handler>
  }
  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8000724:	2300      	movs	r3, #0
 8000726:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8000728:	f107 031c 	add.w	r3, r7, #28
 800072c:	4619      	mov	r1, r3
 800072e:	4812      	ldr	r0, [pc, #72]	; (8000778 <MX_ADC1_Init+0xe4>)
 8000730:	f002 fe3c 	bl	80033ac <HAL_ADCEx_MultiModeConfigChannel>
 8000734:	4603      	mov	r3, r0
 8000736:	2b00      	cmp	r3, #0
 8000738:	d001      	beq.n	800073e <MX_ADC1_Init+0xaa>
  {
    Error_Handler();
 800073a:	f001 f8f5 	bl	8001928 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_16;
 800073e:	4b10      	ldr	r3, [pc, #64]	; (8000780 <MX_ADC1_Init+0xec>)
 8000740:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000742:	2306      	movs	r3, #6
 8000744:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8000746:	2300      	movs	r3, #0
 8000748:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_DIFFERENTIAL_ENDED;
 800074a:	4b0e      	ldr	r3, [pc, #56]	; (8000784 <MX_ADC1_Init+0xf0>)
 800074c:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 800074e:	2304      	movs	r3, #4
 8000750:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8000752:	2300      	movs	r3, #0
 8000754:	617b      	str	r3, [r7, #20]
  sConfig.OffsetSignedSaturation = DISABLE;
 8000756:	2300      	movs	r3, #0
 8000758:	767b      	strb	r3, [r7, #25]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800075a:	463b      	mov	r3, r7
 800075c:	4619      	mov	r1, r3
 800075e:	4806      	ldr	r0, [pc, #24]	; (8000778 <MX_ADC1_Init+0xe4>)
 8000760:	f002 f9a4 	bl	8002aac <HAL_ADC_ConfigChannel>
 8000764:	4603      	mov	r3, r0
 8000766:	2b00      	cmp	r3, #0
 8000768:	d001      	beq.n	800076e <MX_ADC1_Init+0xda>
  {
    Error_Handler();
 800076a:	f001 f8dd 	bl	8001928 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800076e:	bf00      	nop
 8000770:	3728      	adds	r7, #40	; 0x28
 8000772:	46bd      	mov	sp, r7
 8000774:	bd80      	pop	{r7, pc}
 8000776:	bf00      	nop
 8000778:	2400034c 	.word	0x2400034c
 800077c:	40022000 	.word	0x40022000
 8000780:	43210000 	.word	0x43210000
 8000784:	47ff0000 	.word	0x47ff0000

08000788 <MX_ADC2_Init>:
/* ADC2 init function */
void MX_ADC2_Init(void)
{
 8000788:	b580      	push	{r7, lr}
 800078a:	b088      	sub	sp, #32
 800078c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800078e:	1d3b      	adds	r3, r7, #4
 8000790:	2200      	movs	r2, #0
 8000792:	601a      	str	r2, [r3, #0]
 8000794:	605a      	str	r2, [r3, #4]
 8000796:	609a      	str	r2, [r3, #8]
 8000798:	60da      	str	r2, [r3, #12]
 800079a:	611a      	str	r2, [r3, #16]
 800079c:	615a      	str	r2, [r3, #20]
 800079e:	619a      	str	r2, [r3, #24]
  /* USER CODE BEGIN ADC2_Init 1 */

  /* USER CODE END ADC2_Init 1 */
  /** Common config
  */
  hadc2.Instance = ADC2;
 80007a0:	4b29      	ldr	r3, [pc, #164]	; (8000848 <MX_ADC2_Init+0xc0>)
 80007a2:	4a2a      	ldr	r2, [pc, #168]	; (800084c <MX_ADC2_Init+0xc4>)
 80007a4:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 80007a6:	4b28      	ldr	r3, [pc, #160]	; (8000848 <MX_ADC2_Init+0xc0>)
 80007a8:	2200      	movs	r2, #0
 80007aa:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_16B;
 80007ac:	4b26      	ldr	r3, [pc, #152]	; (8000848 <MX_ADC2_Init+0xc0>)
 80007ae:	2200      	movs	r2, #0
 80007b0:	609a      	str	r2, [r3, #8]
  hadc2.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80007b2:	4b25      	ldr	r3, [pc, #148]	; (8000848 <MX_ADC2_Init+0xc0>)
 80007b4:	2200      	movs	r2, #0
 80007b6:	60da      	str	r2, [r3, #12]
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80007b8:	4b23      	ldr	r3, [pc, #140]	; (8000848 <MX_ADC2_Init+0xc0>)
 80007ba:	2204      	movs	r2, #4
 80007bc:	611a      	str	r2, [r3, #16]
  hadc2.Init.LowPowerAutoWait = DISABLE;
 80007be:	4b22      	ldr	r3, [pc, #136]	; (8000848 <MX_ADC2_Init+0xc0>)
 80007c0:	2200      	movs	r2, #0
 80007c2:	751a      	strb	r2, [r3, #20]
  hadc2.Init.ContinuousConvMode = DISABLE;
 80007c4:	4b20      	ldr	r3, [pc, #128]	; (8000848 <MX_ADC2_Init+0xc0>)
 80007c6:	2200      	movs	r2, #0
 80007c8:	755a      	strb	r2, [r3, #21]
  hadc2.Init.NbrOfConversion = 1;
 80007ca:	4b1f      	ldr	r3, [pc, #124]	; (8000848 <MX_ADC2_Init+0xc0>)
 80007cc:	2201      	movs	r2, #1
 80007ce:	619a      	str	r2, [r3, #24]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 80007d0:	4b1d      	ldr	r3, [pc, #116]	; (8000848 <MX_ADC2_Init+0xc0>)
 80007d2:	2200      	movs	r2, #0
 80007d4:	771a      	strb	r2, [r3, #28]
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80007d6:	4b1c      	ldr	r3, [pc, #112]	; (8000848 <MX_ADC2_Init+0xc0>)
 80007d8:	2200      	movs	r2, #0
 80007da:	625a      	str	r2, [r3, #36]	; 0x24
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80007dc:	4b1a      	ldr	r3, [pc, #104]	; (8000848 <MX_ADC2_Init+0xc0>)
 80007de:	2200      	movs	r2, #0
 80007e0:	629a      	str	r2, [r3, #40]	; 0x28
  hadc2.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DR;
 80007e2:	4b19      	ldr	r3, [pc, #100]	; (8000848 <MX_ADC2_Init+0xc0>)
 80007e4:	2200      	movs	r2, #0
 80007e6:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc2.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80007e8:	4b17      	ldr	r3, [pc, #92]	; (8000848 <MX_ADC2_Init+0xc0>)
 80007ea:	2200      	movs	r2, #0
 80007ec:	631a      	str	r2, [r3, #48]	; 0x30
  hadc2.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 80007ee:	4b16      	ldr	r3, [pc, #88]	; (8000848 <MX_ADC2_Init+0xc0>)
 80007f0:	2200      	movs	r2, #0
 80007f2:	635a      	str	r2, [r3, #52]	; 0x34
  hadc2.Init.OversamplingMode = DISABLE;
 80007f4:	4b14      	ldr	r3, [pc, #80]	; (8000848 <MX_ADC2_Init+0xc0>)
 80007f6:	2200      	movs	r2, #0
 80007f8:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 80007fc:	4812      	ldr	r0, [pc, #72]	; (8000848 <MX_ADC2_Init+0xc0>)
 80007fe:	f001 ffb3 	bl	8002768 <HAL_ADC_Init>
 8000802:	4603      	mov	r3, r0
 8000804:	2b00      	cmp	r3, #0
 8000806:	d001      	beq.n	800080c <MX_ADC2_Init+0x84>
  {
    Error_Handler();
 8000808:	f001 f88e 	bl	8001928 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_3;
 800080c:	4b10      	ldr	r3, [pc, #64]	; (8000850 <MX_ADC2_Init+0xc8>)
 800080e:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000810:	2306      	movs	r3, #6
 8000812:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8000814:	2300      	movs	r3, #0
 8000816:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000818:	f240 73ff 	movw	r3, #2047	; 0x7ff
 800081c:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 800081e:	2304      	movs	r3, #4
 8000820:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8000822:	2300      	movs	r3, #0
 8000824:	61bb      	str	r3, [r7, #24]
  sConfig.OffsetSignedSaturation = DISABLE;
 8000826:	2300      	movs	r3, #0
 8000828:	777b      	strb	r3, [r7, #29]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 800082a:	1d3b      	adds	r3, r7, #4
 800082c:	4619      	mov	r1, r3
 800082e:	4806      	ldr	r0, [pc, #24]	; (8000848 <MX_ADC2_Init+0xc0>)
 8000830:	f002 f93c 	bl	8002aac <HAL_ADC_ConfigChannel>
 8000834:	4603      	mov	r3, r0
 8000836:	2b00      	cmp	r3, #0
 8000838:	d001      	beq.n	800083e <MX_ADC2_Init+0xb6>
  {
    Error_Handler();
 800083a:	f001 f875 	bl	8001928 <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 800083e:	bf00      	nop
 8000840:	3720      	adds	r7, #32
 8000842:	46bd      	mov	sp, r7
 8000844:	bd80      	pop	{r7, pc}
 8000846:	bf00      	nop
 8000848:	240003b0 	.word	0x240003b0
 800084c:	40022100 	.word	0x40022100
 8000850:	0c900008 	.word	0x0c900008

08000854 <MX_ADC3_Init>:
/* ADC3 init function */
void MX_ADC3_Init(void)
{
 8000854:	b580      	push	{r7, lr}
 8000856:	b088      	sub	sp, #32
 8000858:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC3_Init 0 */

  /* USER CODE END ADC3_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800085a:	1d3b      	adds	r3, r7, #4
 800085c:	2200      	movs	r2, #0
 800085e:	601a      	str	r2, [r3, #0]
 8000860:	605a      	str	r2, [r3, #4]
 8000862:	609a      	str	r2, [r3, #8]
 8000864:	60da      	str	r2, [r3, #12]
 8000866:	611a      	str	r2, [r3, #16]
 8000868:	615a      	str	r2, [r3, #20]
 800086a:	619a      	str	r2, [r3, #24]
  /* USER CODE BEGIN ADC3_Init 1 */

  /* USER CODE END ADC3_Init 1 */
  /** Common config
  */
  hadc3.Instance = ADC3;
 800086c:	4b29      	ldr	r3, [pc, #164]	; (8000914 <MX_ADC3_Init+0xc0>)
 800086e:	4a2a      	ldr	r2, [pc, #168]	; (8000918 <MX_ADC3_Init+0xc4>)
 8000870:	601a      	str	r2, [r3, #0]
  hadc3.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8000872:	4b28      	ldr	r3, [pc, #160]	; (8000914 <MX_ADC3_Init+0xc0>)
 8000874:	2200      	movs	r2, #0
 8000876:	605a      	str	r2, [r3, #4]
  hadc3.Init.Resolution = ADC_RESOLUTION_16B;
 8000878:	4b26      	ldr	r3, [pc, #152]	; (8000914 <MX_ADC3_Init+0xc0>)
 800087a:	2200      	movs	r2, #0
 800087c:	609a      	str	r2, [r3, #8]
  hadc3.Init.ScanConvMode = ADC_SCAN_DISABLE;
 800087e:	4b25      	ldr	r3, [pc, #148]	; (8000914 <MX_ADC3_Init+0xc0>)
 8000880:	2200      	movs	r2, #0
 8000882:	60da      	str	r2, [r3, #12]
  hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000884:	4b23      	ldr	r3, [pc, #140]	; (8000914 <MX_ADC3_Init+0xc0>)
 8000886:	2204      	movs	r2, #4
 8000888:	611a      	str	r2, [r3, #16]
  hadc3.Init.LowPowerAutoWait = DISABLE;
 800088a:	4b22      	ldr	r3, [pc, #136]	; (8000914 <MX_ADC3_Init+0xc0>)
 800088c:	2200      	movs	r2, #0
 800088e:	751a      	strb	r2, [r3, #20]
  hadc3.Init.ContinuousConvMode = DISABLE;
 8000890:	4b20      	ldr	r3, [pc, #128]	; (8000914 <MX_ADC3_Init+0xc0>)
 8000892:	2200      	movs	r2, #0
 8000894:	755a      	strb	r2, [r3, #21]
  hadc3.Init.NbrOfConversion = 1;
 8000896:	4b1f      	ldr	r3, [pc, #124]	; (8000914 <MX_ADC3_Init+0xc0>)
 8000898:	2201      	movs	r2, #1
 800089a:	619a      	str	r2, [r3, #24]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 800089c:	4b1d      	ldr	r3, [pc, #116]	; (8000914 <MX_ADC3_Init+0xc0>)
 800089e:	2200      	movs	r2, #0
 80008a0:	771a      	strb	r2, [r3, #28]
  hadc3.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80008a2:	4b1c      	ldr	r3, [pc, #112]	; (8000914 <MX_ADC3_Init+0xc0>)
 80008a4:	2200      	movs	r2, #0
 80008a6:	625a      	str	r2, [r3, #36]	; 0x24
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80008a8:	4b1a      	ldr	r3, [pc, #104]	; (8000914 <MX_ADC3_Init+0xc0>)
 80008aa:	2200      	movs	r2, #0
 80008ac:	629a      	str	r2, [r3, #40]	; 0x28
  hadc3.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DR;
 80008ae:	4b19      	ldr	r3, [pc, #100]	; (8000914 <MX_ADC3_Init+0xc0>)
 80008b0:	2200      	movs	r2, #0
 80008b2:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc3.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80008b4:	4b17      	ldr	r3, [pc, #92]	; (8000914 <MX_ADC3_Init+0xc0>)
 80008b6:	2200      	movs	r2, #0
 80008b8:	631a      	str	r2, [r3, #48]	; 0x30
  hadc3.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 80008ba:	4b16      	ldr	r3, [pc, #88]	; (8000914 <MX_ADC3_Init+0xc0>)
 80008bc:	2200      	movs	r2, #0
 80008be:	635a      	str	r2, [r3, #52]	; 0x34
  hadc3.Init.OversamplingMode = DISABLE;
 80008c0:	4b14      	ldr	r3, [pc, #80]	; (8000914 <MX_ADC3_Init+0xc0>)
 80008c2:	2200      	movs	r2, #0
 80008c4:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 80008c8:	4812      	ldr	r0, [pc, #72]	; (8000914 <MX_ADC3_Init+0xc0>)
 80008ca:	f001 ff4d 	bl	8002768 <HAL_ADC_Init>
 80008ce:	4603      	mov	r3, r0
 80008d0:	2b00      	cmp	r3, #0
 80008d2:	d001      	beq.n	80008d8 <MX_ADC3_Init+0x84>
  {
    Error_Handler();
 80008d4:	f001 f828 	bl	8001928 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_8;
 80008d8:	4b10      	ldr	r3, [pc, #64]	; (800091c <MX_ADC3_Init+0xc8>)
 80008da:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80008dc:	2306      	movs	r3, #6
 80008de:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 80008e0:	2300      	movs	r3, #0
 80008e2:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80008e4:	f240 73ff 	movw	r3, #2047	; 0x7ff
 80008e8:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80008ea:	2304      	movs	r3, #4
 80008ec:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 80008ee:	2300      	movs	r3, #0
 80008f0:	61bb      	str	r3, [r7, #24]
  sConfig.OffsetSignedSaturation = DISABLE;
 80008f2:	2300      	movs	r3, #0
 80008f4:	777b      	strb	r3, [r7, #29]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 80008f6:	1d3b      	adds	r3, r7, #4
 80008f8:	4619      	mov	r1, r3
 80008fa:	4806      	ldr	r0, [pc, #24]	; (8000914 <MX_ADC3_Init+0xc0>)
 80008fc:	f002 f8d6 	bl	8002aac <HAL_ADC_ConfigChannel>
 8000900:	4603      	mov	r3, r0
 8000902:	2b00      	cmp	r3, #0
 8000904:	d001      	beq.n	800090a <MX_ADC3_Init+0xb6>
  {
    Error_Handler();
 8000906:	f001 f80f 	bl	8001928 <Error_Handler>
  }
  /* USER CODE BEGIN ADC3_Init 2 */

  /* USER CODE END ADC3_Init 2 */

}
 800090a:	bf00      	nop
 800090c:	3720      	adds	r7, #32
 800090e:	46bd      	mov	sp, r7
 8000910:	bd80      	pop	{r7, pc}
 8000912:	bf00      	nop
 8000914:	24000414 	.word	0x24000414
 8000918:	58026000 	.word	0x58026000
 800091c:	21800100 	.word	0x21800100

08000920 <HAL_ADC_MspInit>:

static uint32_t HAL_RCC_ADC12_CLK_ENABLED=0;

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8000920:	b580      	push	{r7, lr}
 8000922:	b0bc      	sub	sp, #240	; 0xf0
 8000924:	af00      	add	r7, sp, #0
 8000926:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000928:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 800092c:	2200      	movs	r2, #0
 800092e:	601a      	str	r2, [r3, #0]
 8000930:	605a      	str	r2, [r3, #4]
 8000932:	609a      	str	r2, [r3, #8]
 8000934:	60da      	str	r2, [r3, #12]
 8000936:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000938:	f107 0320 	add.w	r3, r7, #32
 800093c:	22bc      	movs	r2, #188	; 0xbc
 800093e:	2100      	movs	r1, #0
 8000940:	4618      	mov	r0, r3
 8000942:	f013 f841 	bl	80139c8 <memset>
  if(adcHandle->Instance==ADC1)
 8000946:	687b      	ldr	r3, [r7, #4]
 8000948:	681b      	ldr	r3, [r3, #0]
 800094a:	4a6f      	ldr	r2, [pc, #444]	; (8000b08 <HAL_ADC_MspInit+0x1e8>)
 800094c:	4293      	cmp	r3, r2
 800094e:	d147      	bne.n	80009e0 <HAL_ADC_MspInit+0xc0>
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8000950:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8000954:	623b      	str	r3, [r7, #32]
    PeriphClkInitStruct.AdcClockSelection = RCC_ADCCLKSOURCE_CLKP;
 8000956:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800095a:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800095e:	f107 0320 	add.w	r3, r7, #32
 8000962:	4618      	mov	r0, r3
 8000964:	f007 f988 	bl	8007c78 <HAL_RCCEx_PeriphCLKConfig>
 8000968:	4603      	mov	r3, r0
 800096a:	2b00      	cmp	r3, #0
 800096c:	d001      	beq.n	8000972 <HAL_ADC_MspInit+0x52>
    {
      Error_Handler();
 800096e:	f000 ffdb 	bl	8001928 <Error_Handler>
    }

    /* ADC1 clock enable */
    HAL_RCC_ADC12_CLK_ENABLED++;
 8000972:	4b66      	ldr	r3, [pc, #408]	; (8000b0c <HAL_ADC_MspInit+0x1ec>)
 8000974:	681b      	ldr	r3, [r3, #0]
 8000976:	3301      	adds	r3, #1
 8000978:	4a64      	ldr	r2, [pc, #400]	; (8000b0c <HAL_ADC_MspInit+0x1ec>)
 800097a:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 800097c:	4b63      	ldr	r3, [pc, #396]	; (8000b0c <HAL_ADC_MspInit+0x1ec>)
 800097e:	681b      	ldr	r3, [r3, #0]
 8000980:	2b01      	cmp	r3, #1
 8000982:	d10e      	bne.n	80009a2 <HAL_ADC_MspInit+0x82>
      __HAL_RCC_ADC12_CLK_ENABLE();
 8000984:	4b62      	ldr	r3, [pc, #392]	; (8000b10 <HAL_ADC_MspInit+0x1f0>)
 8000986:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800098a:	4a61      	ldr	r2, [pc, #388]	; (8000b10 <HAL_ADC_MspInit+0x1f0>)
 800098c:	f043 0320 	orr.w	r3, r3, #32
 8000990:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8000994:	4b5e      	ldr	r3, [pc, #376]	; (8000b10 <HAL_ADC_MspInit+0x1f0>)
 8000996:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800099a:	f003 0320 	and.w	r3, r3, #32
 800099e:	61fb      	str	r3, [r7, #28]
 80009a0:	69fb      	ldr	r3, [r7, #28]
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80009a2:	4b5b      	ldr	r3, [pc, #364]	; (8000b10 <HAL_ADC_MspInit+0x1f0>)
 80009a4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80009a8:	4a59      	ldr	r2, [pc, #356]	; (8000b10 <HAL_ADC_MspInit+0x1f0>)
 80009aa:	f043 0301 	orr.w	r3, r3, #1
 80009ae:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80009b2:	4b57      	ldr	r3, [pc, #348]	; (8000b10 <HAL_ADC_MspInit+0x1f0>)
 80009b4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80009b8:	f003 0301 	and.w	r3, r3, #1
 80009bc:	61bb      	str	r3, [r7, #24]
 80009be:	69bb      	ldr	r3, [r7, #24]
    PA0     ------> ADC1_INP16
    PA1     ------> ADC1_INN16
    PA2     ------> ADC1_INP14
    PA3     ------> ADC1_INP15
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3;
 80009c0:	230f      	movs	r3, #15
 80009c2:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80009c6:	2303      	movs	r3, #3
 80009c8:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009cc:	2300      	movs	r3, #0
 80009ce:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80009d2:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 80009d6:	4619      	mov	r1, r3
 80009d8:	484e      	ldr	r0, [pc, #312]	; (8000b14 <HAL_ADC_MspInit+0x1f4>)
 80009da:	f003 ffb1 	bl	8004940 <HAL_GPIO_Init>

  /* USER CODE BEGIN ADC3_MspInit 1 */

  /* USER CODE END ADC3_MspInit 1 */
  }
}
 80009de:	e08f      	b.n	8000b00 <HAL_ADC_MspInit+0x1e0>
  else if(adcHandle->Instance==ADC2)
 80009e0:	687b      	ldr	r3, [r7, #4]
 80009e2:	681b      	ldr	r3, [r3, #0]
 80009e4:	4a4c      	ldr	r2, [pc, #304]	; (8000b18 <HAL_ADC_MspInit+0x1f8>)
 80009e6:	4293      	cmp	r3, r2
 80009e8:	d147      	bne.n	8000a7a <HAL_ADC_MspInit+0x15a>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 80009ea:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 80009ee:	623b      	str	r3, [r7, #32]
    PeriphClkInitStruct.AdcClockSelection = RCC_ADCCLKSOURCE_CLKP;
 80009f0:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80009f4:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80009f8:	f107 0320 	add.w	r3, r7, #32
 80009fc:	4618      	mov	r0, r3
 80009fe:	f007 f93b 	bl	8007c78 <HAL_RCCEx_PeriphCLKConfig>
 8000a02:	4603      	mov	r3, r0
 8000a04:	2b00      	cmp	r3, #0
 8000a06:	d001      	beq.n	8000a0c <HAL_ADC_MspInit+0xec>
      Error_Handler();
 8000a08:	f000 ff8e 	bl	8001928 <Error_Handler>
    HAL_RCC_ADC12_CLK_ENABLED++;
 8000a0c:	4b3f      	ldr	r3, [pc, #252]	; (8000b0c <HAL_ADC_MspInit+0x1ec>)
 8000a0e:	681b      	ldr	r3, [r3, #0]
 8000a10:	3301      	adds	r3, #1
 8000a12:	4a3e      	ldr	r2, [pc, #248]	; (8000b0c <HAL_ADC_MspInit+0x1ec>)
 8000a14:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 8000a16:	4b3d      	ldr	r3, [pc, #244]	; (8000b0c <HAL_ADC_MspInit+0x1ec>)
 8000a18:	681b      	ldr	r3, [r3, #0]
 8000a1a:	2b01      	cmp	r3, #1
 8000a1c:	d10e      	bne.n	8000a3c <HAL_ADC_MspInit+0x11c>
      __HAL_RCC_ADC12_CLK_ENABLE();
 8000a1e:	4b3c      	ldr	r3, [pc, #240]	; (8000b10 <HAL_ADC_MspInit+0x1f0>)
 8000a20:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000a24:	4a3a      	ldr	r2, [pc, #232]	; (8000b10 <HAL_ADC_MspInit+0x1f0>)
 8000a26:	f043 0320 	orr.w	r3, r3, #32
 8000a2a:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8000a2e:	4b38      	ldr	r3, [pc, #224]	; (8000b10 <HAL_ADC_MspInit+0x1f0>)
 8000a30:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000a34:	f003 0320 	and.w	r3, r3, #32
 8000a38:	617b      	str	r3, [r7, #20]
 8000a3a:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a3c:	4b34      	ldr	r3, [pc, #208]	; (8000b10 <HAL_ADC_MspInit+0x1f0>)
 8000a3e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000a42:	4a33      	ldr	r2, [pc, #204]	; (8000b10 <HAL_ADC_MspInit+0x1f0>)
 8000a44:	f043 0301 	orr.w	r3, r3, #1
 8000a48:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000a4c:	4b30      	ldr	r3, [pc, #192]	; (8000b10 <HAL_ADC_MspInit+0x1f0>)
 8000a4e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000a52:	f003 0301 	and.w	r3, r3, #1
 8000a56:	613b      	str	r3, [r7, #16]
 8000a58:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8000a5a:	2340      	movs	r3, #64	; 0x40
 8000a5c:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000a60:	2303      	movs	r3, #3
 8000a62:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a66:	2300      	movs	r3, #0
 8000a68:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a6c:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8000a70:	4619      	mov	r1, r3
 8000a72:	4828      	ldr	r0, [pc, #160]	; (8000b14 <HAL_ADC_MspInit+0x1f4>)
 8000a74:	f003 ff64 	bl	8004940 <HAL_GPIO_Init>
}
 8000a78:	e042      	b.n	8000b00 <HAL_ADC_MspInit+0x1e0>
  else if(adcHandle->Instance==ADC3)
 8000a7a:	687b      	ldr	r3, [r7, #4]
 8000a7c:	681b      	ldr	r3, [r3, #0]
 8000a7e:	4a27      	ldr	r2, [pc, #156]	; (8000b1c <HAL_ADC_MspInit+0x1fc>)
 8000a80:	4293      	cmp	r3, r2
 8000a82:	d13d      	bne.n	8000b00 <HAL_ADC_MspInit+0x1e0>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8000a84:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8000a88:	623b      	str	r3, [r7, #32]
    PeriphClkInitStruct.AdcClockSelection = RCC_ADCCLKSOURCE_CLKP;
 8000a8a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000a8e:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000a92:	f107 0320 	add.w	r3, r7, #32
 8000a96:	4618      	mov	r0, r3
 8000a98:	f007 f8ee 	bl	8007c78 <HAL_RCCEx_PeriphCLKConfig>
 8000a9c:	4603      	mov	r3, r0
 8000a9e:	2b00      	cmp	r3, #0
 8000aa0:	d001      	beq.n	8000aa6 <HAL_ADC_MspInit+0x186>
      Error_Handler();
 8000aa2:	f000 ff41 	bl	8001928 <Error_Handler>
    __HAL_RCC_ADC3_CLK_ENABLE();
 8000aa6:	4b1a      	ldr	r3, [pc, #104]	; (8000b10 <HAL_ADC_MspInit+0x1f0>)
 8000aa8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000aac:	4a18      	ldr	r2, [pc, #96]	; (8000b10 <HAL_ADC_MspInit+0x1f0>)
 8000aae:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8000ab2:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000ab6:	4b16      	ldr	r3, [pc, #88]	; (8000b10 <HAL_ADC_MspInit+0x1f0>)
 8000ab8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000abc:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8000ac0:	60fb      	str	r3, [r7, #12]
 8000ac2:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8000ac4:	4b12      	ldr	r3, [pc, #72]	; (8000b10 <HAL_ADC_MspInit+0x1f0>)
 8000ac6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000aca:	4a11      	ldr	r2, [pc, #68]	; (8000b10 <HAL_ADC_MspInit+0x1f0>)
 8000acc:	f043 0320 	orr.w	r3, r3, #32
 8000ad0:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000ad4:	4b0e      	ldr	r3, [pc, #56]	; (8000b10 <HAL_ADC_MspInit+0x1f0>)
 8000ad6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000ada:	f003 0320 	and.w	r3, r3, #32
 8000ade:	60bb      	str	r3, [r7, #8]
 8000ae0:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8000ae2:	2340      	movs	r3, #64	; 0x40
 8000ae4:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000ae8:	2303      	movs	r3, #3
 8000aea:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000aee:	2300      	movs	r3, #0
 8000af0:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8000af4:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8000af8:	4619      	mov	r1, r3
 8000afa:	4809      	ldr	r0, [pc, #36]	; (8000b20 <HAL_ADC_MspInit+0x200>)
 8000afc:	f003 ff20 	bl	8004940 <HAL_GPIO_Init>
}
 8000b00:	bf00      	nop
 8000b02:	37f0      	adds	r7, #240	; 0xf0
 8000b04:	46bd      	mov	sp, r7
 8000b06:	bd80      	pop	{r7, pc}
 8000b08:	40022000 	.word	0x40022000
 8000b0c:	24000478 	.word	0x24000478
 8000b10:	58024400 	.word	0x58024400
 8000b14:	58020000 	.word	0x58020000
 8000b18:	40022100 	.word	0x40022100
 8000b1c:	58026000 	.word	0x58026000
 8000b20:	58021400 	.word	0x58021400

08000b24 <CUBEMX_Init>:
#include <usb_device.h>

extern void SystemClock_Config(void);
extern void PeriphCommonClock_Config(void);

void CUBEMX_Init() {
 8000b24:	b580      	push	{r7, lr}
 8000b26:	b084      	sub	sp, #16
 8000b28:	af00      	add	r7, sp, #0
  \details Turns on I-Cache
  */
__STATIC_FORCEINLINE void SCB_EnableICache (void)
{
  #if defined (__ICACHE_PRESENT) && (__ICACHE_PRESENT == 1U)
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 8000b2a:	4b46      	ldr	r3, [pc, #280]	; (8000c44 <CUBEMX_Init+0x120>)
 8000b2c:	695b      	ldr	r3, [r3, #20]
 8000b2e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000b32:	2b00      	cmp	r3, #0
 8000b34:	d11b      	bne.n	8000b6e <CUBEMX_Init+0x4a>
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8000b36:	f3bf 8f4f 	dsb	sy
}
 8000b3a:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000b3c:	f3bf 8f6f 	isb	sy
}
 8000b40:	bf00      	nop

    __DSB();
    __ISB();
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 8000b42:	4b40      	ldr	r3, [pc, #256]	; (8000c44 <CUBEMX_Init+0x120>)
 8000b44:	2200      	movs	r2, #0
 8000b46:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 8000b4a:	f3bf 8f4f 	dsb	sy
}
 8000b4e:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000b50:	f3bf 8f6f 	isb	sy
}
 8000b54:	bf00      	nop
    __DSB();
    __ISB();
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 8000b56:	4b3b      	ldr	r3, [pc, #236]	; (8000c44 <CUBEMX_Init+0x120>)
 8000b58:	695b      	ldr	r3, [r3, #20]
 8000b5a:	4a3a      	ldr	r2, [pc, #232]	; (8000c44 <CUBEMX_Init+0x120>)
 8000b5c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000b60:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 8000b62:	f3bf 8f4f 	dsb	sy
}
 8000b66:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000b68:	f3bf 8f6f 	isb	sy
}
 8000b6c:	e000      	b.n	8000b70 <CUBEMX_Init+0x4c>
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 8000b6e:	bf00      	nop
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    uint32_t ccsidr;
    uint32_t sets;
    uint32_t ways;

    if (SCB->CCR & SCB_CCR_DC_Msk) return;  /* return if DCache is already enabled */
 8000b70:	4b34      	ldr	r3, [pc, #208]	; (8000c44 <CUBEMX_Init+0x120>)
 8000b72:	695b      	ldr	r3, [r3, #20]
 8000b74:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000b78:	2b00      	cmp	r3, #0
 8000b7a:	d138      	bne.n	8000bee <CUBEMX_Init+0xca>

    SCB->CSSELR = 0U;                       /* select Level 1 data cache */
 8000b7c:	4b31      	ldr	r3, [pc, #196]	; (8000c44 <CUBEMX_Init+0x120>)
 8000b7e:	2200      	movs	r2, #0
 8000b80:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 8000b84:	f3bf 8f4f 	dsb	sy
}
 8000b88:	bf00      	nop
    __DSB();

    ccsidr = SCB->CCSIDR;
 8000b8a:	4b2e      	ldr	r3, [pc, #184]	; (8000c44 <CUBEMX_Init+0x120>)
 8000b8c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8000b90:	60fb      	str	r3, [r7, #12]

                                            /* invalidate D-Cache */
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 8000b92:	68fb      	ldr	r3, [r7, #12]
 8000b94:	0b5b      	lsrs	r3, r3, #13
 8000b96:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8000b9a:	60bb      	str	r3, [r7, #8]
    do {
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 8000b9c:	68fb      	ldr	r3, [r7, #12]
 8000b9e:	08db      	lsrs	r3, r3, #3
 8000ba0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8000ba4:	607b      	str	r3, [r7, #4]
      do {
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8000ba6:	68bb      	ldr	r3, [r7, #8]
 8000ba8:	015a      	lsls	r2, r3, #5
 8000baa:	f643 73e0 	movw	r3, #16352	; 0x3fe0
 8000bae:	4013      	ands	r3, r2
                      ((ways << SCB_DCISW_WAY_Pos) & SCB_DCISW_WAY_Msk)  );
 8000bb0:	687a      	ldr	r2, [r7, #4]
 8000bb2:	0792      	lsls	r2, r2, #30
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8000bb4:	4923      	ldr	r1, [pc, #140]	; (8000c44 <CUBEMX_Init+0x120>)
 8000bb6:	4313      	orrs	r3, r2
 8000bb8:	f8c1 3260 	str.w	r3, [r1, #608]	; 0x260
        #if defined ( __CC_ARM )
          __schedule_barrier();
        #endif
      } while (ways-- != 0U);
 8000bbc:	687b      	ldr	r3, [r7, #4]
 8000bbe:	1e5a      	subs	r2, r3, #1
 8000bc0:	607a      	str	r2, [r7, #4]
 8000bc2:	2b00      	cmp	r3, #0
 8000bc4:	d1ef      	bne.n	8000ba6 <CUBEMX_Init+0x82>
    } while(sets-- != 0U);
 8000bc6:	68bb      	ldr	r3, [r7, #8]
 8000bc8:	1e5a      	subs	r2, r3, #1
 8000bca:	60ba      	str	r2, [r7, #8]
 8000bcc:	2b00      	cmp	r3, #0
 8000bce:	d1e5      	bne.n	8000b9c <CUBEMX_Init+0x78>
  __ASM volatile ("dsb 0xF":::"memory");
 8000bd0:	f3bf 8f4f 	dsb	sy
}
 8000bd4:	bf00      	nop
    __DSB();

    SCB->CCR |=  (uint32_t)SCB_CCR_DC_Msk;  /* enable D-Cache */
 8000bd6:	4b1b      	ldr	r3, [pc, #108]	; (8000c44 <CUBEMX_Init+0x120>)
 8000bd8:	695b      	ldr	r3, [r3, #20]
 8000bda:	4a1a      	ldr	r2, [pc, #104]	; (8000c44 <CUBEMX_Init+0x120>)
 8000bdc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000be0:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 8000be2:	f3bf 8f4f 	dsb	sy
}
 8000be6:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000be8:	f3bf 8f6f 	isb	sy
}
 8000bec:	e000      	b.n	8000bf0 <CUBEMX_Init+0xcc>
    if (SCB->CCR & SCB_CCR_DC_Msk) return;  /* return if DCache is already enabled */
 8000bee:	bf00      	nop
	// Turn on I and D Cache
	SCB_EnableICache();
	SCB_EnableDCache();

	// Init HAL
	HAL_Init();
 8000bf0:	f001 fb58 	bl	80022a4 <HAL_Init>

	// Init clocks
	SystemClock_Config();
 8000bf4:	f000 fdd8 	bl	80017a8 <SystemClock_Config>
	PeriphCommonClock_Config();
 8000bf8:	f000 fe60 	bl	80018bc <PeriphCommonClock_Config>

	// Init peripherals
	MX_GPIO_Init();
 8000bfc:	f000 fb72 	bl	80012e4 <MX_GPIO_Init>
	MX_FMC_Init();
 8000c00:	f000 f9b6 	bl	8000f70 <MX_FMC_Init>
	MX_I2C2_Init();
 8000c04:	f000 fc58 	bl	80014b8 <MX_I2C2_Init>
	MX_USART1_UART_Init();
 8000c08:	f001 fa70 	bl	80020ec <MX_USART1_UART_Init>
	MX_FDCAN1_Init();
 8000c0c:	f000 f8fa 	bl	8000e04 <MX_FDCAN1_Init>
	MX_I2S2_Init();
 8000c10:	f000 fcf8 	bl	8001604 <MX_I2S2_Init>
	MX_SPI4_Init();
 8000c14:	f000 ff58 	bl	8001ac8 <MX_SPI4_Init>
	MX_SPI6_Init();
 8000c18:	f000 ffac 	bl	8001b74 <MX_SPI6_Init>
	MX_SDMMC1_SD_Init();
 8000c1c:	f000 fe8a 	bl	8001934 <MX_SDMMC1_SD_Init>
	MX_FATFS_Init();
 8000c20:	f00f f88c 	bl	800fd3c <MX_FATFS_Init>
	MX_USB_DEVICE_Init();
 8000c24:	f010 feec 	bl	8011a00 <MX_USB_DEVICE_Init>
	MX_DMA2D_Init();
 8000c28:	f000 f890 	bl	8000d4c <MX_DMA2D_Init>
	MX_ADC3_Init();
 8000c2c:	f7ff fe12 	bl	8000854 <MX_ADC3_Init>
	MX_DAC1_Init();
 8000c30:	f000 f80a 	bl	8000c48 <MX_DAC1_Init>
	MX_ADC1_Init();
 8000c34:	f7ff fd2e 	bl	8000694 <MX_ADC1_Init>
	MX_ADC2_Init();
 8000c38:	f7ff fda6 	bl	8000788 <MX_ADC2_Init>
}
 8000c3c:	bf00      	nop
 8000c3e:	3710      	adds	r7, #16
 8000c40:	46bd      	mov	sp, r7
 8000c42:	bd80      	pop	{r7, pc}
 8000c44:	e000ed00 	.word	0xe000ed00

08000c48 <MX_DAC1_Init>:

DAC_HandleTypeDef hdac1;

/* DAC1 init function */
void MX_DAC1_Init(void)
{
 8000c48:	b580      	push	{r7, lr}
 8000c4a:	b08a      	sub	sp, #40	; 0x28
 8000c4c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC1_Init 0 */

  /* USER CODE END DAC1_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 8000c4e:	1d3b      	adds	r3, r7, #4
 8000c50:	2224      	movs	r2, #36	; 0x24
 8000c52:	2100      	movs	r1, #0
 8000c54:	4618      	mov	r0, r3
 8000c56:	f012 feb7 	bl	80139c8 <memset>
  /* USER CODE BEGIN DAC1_Init 1 */

  /* USER CODE END DAC1_Init 1 */
  /** DAC Initialization
  */
  hdac1.Instance = DAC1;
 8000c5a:	4b17      	ldr	r3, [pc, #92]	; (8000cb8 <MX_DAC1_Init+0x70>)
 8000c5c:	4a17      	ldr	r2, [pc, #92]	; (8000cbc <MX_DAC1_Init+0x74>)
 8000c5e:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac1) != HAL_OK)
 8000c60:	4815      	ldr	r0, [pc, #84]	; (8000cb8 <MX_DAC1_Init+0x70>)
 8000c62:	f002 fd90 	bl	8003786 <HAL_DAC_Init>
 8000c66:	4603      	mov	r3, r0
 8000c68:	2b00      	cmp	r3, #0
 8000c6a:	d001      	beq.n	8000c70 <MX_DAC1_Init+0x28>
  {
    Error_Handler();
 8000c6c:	f000 fe5c 	bl	8001928 <Error_Handler>
  }
  /** DAC channel OUT1 config
  */
  sConfig.DAC_SampleAndHold = DAC_SAMPLEANDHOLD_DISABLE;
 8000c70:	2300      	movs	r3, #0
 8000c72:	607b      	str	r3, [r7, #4]
  sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
 8000c74:	2300      	movs	r3, #0
 8000c76:	60bb      	str	r3, [r7, #8]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 8000c78:	2300      	movs	r3, #0
 8000c7a:	60fb      	str	r3, [r7, #12]
  sConfig.DAC_ConnectOnChipPeripheral = DAC_CHIPCONNECT_DISABLE;
 8000c7c:	2301      	movs	r3, #1
 8000c7e:	613b      	str	r3, [r7, #16]
  sConfig.DAC_UserTrimming = DAC_TRIMMING_FACTORY;
 8000c80:	2300      	movs	r3, #0
 8000c82:	617b      	str	r3, [r7, #20]
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 8000c84:	1d3b      	adds	r3, r7, #4
 8000c86:	2200      	movs	r2, #0
 8000c88:	4619      	mov	r1, r3
 8000c8a:	480b      	ldr	r0, [pc, #44]	; (8000cb8 <MX_DAC1_Init+0x70>)
 8000c8c:	f002 fd9e 	bl	80037cc <HAL_DAC_ConfigChannel>
 8000c90:	4603      	mov	r3, r0
 8000c92:	2b00      	cmp	r3, #0
 8000c94:	d001      	beq.n	8000c9a <MX_DAC1_Init+0x52>
  {
    Error_Handler();
 8000c96:	f000 fe47 	bl	8001928 <Error_Handler>
  }
  /** DAC channel OUT2 config
  */
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_2) != HAL_OK)
 8000c9a:	1d3b      	adds	r3, r7, #4
 8000c9c:	2210      	movs	r2, #16
 8000c9e:	4619      	mov	r1, r3
 8000ca0:	4805      	ldr	r0, [pc, #20]	; (8000cb8 <MX_DAC1_Init+0x70>)
 8000ca2:	f002 fd93 	bl	80037cc <HAL_DAC_ConfigChannel>
 8000ca6:	4603      	mov	r3, r0
 8000ca8:	2b00      	cmp	r3, #0
 8000caa:	d001      	beq.n	8000cb0 <MX_DAC1_Init+0x68>
  {
    Error_Handler();
 8000cac:	f000 fe3c 	bl	8001928 <Error_Handler>
  }
  /* USER CODE BEGIN DAC1_Init 2 */

  /* USER CODE END DAC1_Init 2 */

}
 8000cb0:	bf00      	nop
 8000cb2:	3728      	adds	r7, #40	; 0x28
 8000cb4:	46bd      	mov	sp, r7
 8000cb6:	bd80      	pop	{r7, pc}
 8000cb8:	2400047c 	.word	0x2400047c
 8000cbc:	40007400 	.word	0x40007400

08000cc0 <HAL_DAC_MspInit>:

void HAL_DAC_MspInit(DAC_HandleTypeDef* dacHandle)
{
 8000cc0:	b580      	push	{r7, lr}
 8000cc2:	b08a      	sub	sp, #40	; 0x28
 8000cc4:	af00      	add	r7, sp, #0
 8000cc6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000cc8:	f107 0314 	add.w	r3, r7, #20
 8000ccc:	2200      	movs	r2, #0
 8000cce:	601a      	str	r2, [r3, #0]
 8000cd0:	605a      	str	r2, [r3, #4]
 8000cd2:	609a      	str	r2, [r3, #8]
 8000cd4:	60da      	str	r2, [r3, #12]
 8000cd6:	611a      	str	r2, [r3, #16]
  if(dacHandle->Instance==DAC1)
 8000cd8:	687b      	ldr	r3, [r7, #4]
 8000cda:	681b      	ldr	r3, [r3, #0]
 8000cdc:	4a18      	ldr	r2, [pc, #96]	; (8000d40 <HAL_DAC_MspInit+0x80>)
 8000cde:	4293      	cmp	r3, r2
 8000ce0:	d129      	bne.n	8000d36 <HAL_DAC_MspInit+0x76>
  {
  /* USER CODE BEGIN DAC1_MspInit 0 */

  /* USER CODE END DAC1_MspInit 0 */
    /* DAC1 clock enable */
    __HAL_RCC_DAC12_CLK_ENABLE();
 8000ce2:	4b18      	ldr	r3, [pc, #96]	; (8000d44 <HAL_DAC_MspInit+0x84>)
 8000ce4:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8000ce8:	4a16      	ldr	r2, [pc, #88]	; (8000d44 <HAL_DAC_MspInit+0x84>)
 8000cea:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8000cee:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8000cf2:	4b14      	ldr	r3, [pc, #80]	; (8000d44 <HAL_DAC_MspInit+0x84>)
 8000cf4:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8000cf8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8000cfc:	613b      	str	r3, [r7, #16]
 8000cfe:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d00:	4b10      	ldr	r3, [pc, #64]	; (8000d44 <HAL_DAC_MspInit+0x84>)
 8000d02:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000d06:	4a0f      	ldr	r2, [pc, #60]	; (8000d44 <HAL_DAC_MspInit+0x84>)
 8000d08:	f043 0301 	orr.w	r3, r3, #1
 8000d0c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000d10:	4b0c      	ldr	r3, [pc, #48]	; (8000d44 <HAL_DAC_MspInit+0x84>)
 8000d12:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000d16:	f003 0301 	and.w	r3, r3, #1
 8000d1a:	60fb      	str	r3, [r7, #12]
 8000d1c:	68fb      	ldr	r3, [r7, #12]
    /**DAC1 GPIO Configuration
    PA4     ------> DAC1_OUT1
    PA5     ------> DAC1_OUT2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8000d1e:	2330      	movs	r3, #48	; 0x30
 8000d20:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000d22:	2303      	movs	r3, #3
 8000d24:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d26:	2300      	movs	r3, #0
 8000d28:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d2a:	f107 0314 	add.w	r3, r7, #20
 8000d2e:	4619      	mov	r1, r3
 8000d30:	4805      	ldr	r0, [pc, #20]	; (8000d48 <HAL_DAC_MspInit+0x88>)
 8000d32:	f003 fe05 	bl	8004940 <HAL_GPIO_Init>

  /* USER CODE BEGIN DAC1_MspInit 1 */

  /* USER CODE END DAC1_MspInit 1 */
  }
}
 8000d36:	bf00      	nop
 8000d38:	3728      	adds	r7, #40	; 0x28
 8000d3a:	46bd      	mov	sp, r7
 8000d3c:	bd80      	pop	{r7, pc}
 8000d3e:	bf00      	nop
 8000d40:	40007400 	.word	0x40007400
 8000d44:	58024400 	.word	0x58024400
 8000d48:	58020000 	.word	0x58020000

08000d4c <MX_DMA2D_Init>:

DMA2D_HandleTypeDef hdma2d;

/* DMA2D init function */
void MX_DMA2D_Init(void)
{
 8000d4c:	b580      	push	{r7, lr}
 8000d4e:	af00      	add	r7, sp, #0
  /* USER CODE END DMA2D_Init 0 */

  /* USER CODE BEGIN DMA2D_Init 1 */

  /* USER CODE END DMA2D_Init 1 */
  hdma2d.Instance = DMA2D;
 8000d50:	4b19      	ldr	r3, [pc, #100]	; (8000db8 <MX_DMA2D_Init+0x6c>)
 8000d52:	4a1a      	ldr	r2, [pc, #104]	; (8000dbc <MX_DMA2D_Init+0x70>)
 8000d54:	601a      	str	r2, [r3, #0]
  hdma2d.Init.Mode = DMA2D_M2M;
 8000d56:	4b18      	ldr	r3, [pc, #96]	; (8000db8 <MX_DMA2D_Init+0x6c>)
 8000d58:	2200      	movs	r2, #0
 8000d5a:	605a      	str	r2, [r3, #4]
  hdma2d.Init.ColorMode = DMA2D_OUTPUT_ARGB8888;
 8000d5c:	4b16      	ldr	r3, [pc, #88]	; (8000db8 <MX_DMA2D_Init+0x6c>)
 8000d5e:	2200      	movs	r2, #0
 8000d60:	609a      	str	r2, [r3, #8]
  hdma2d.Init.OutputOffset = 0;
 8000d62:	4b15      	ldr	r3, [pc, #84]	; (8000db8 <MX_DMA2D_Init+0x6c>)
 8000d64:	2200      	movs	r2, #0
 8000d66:	60da      	str	r2, [r3, #12]
  hdma2d.LayerCfg[1].InputOffset = 0;
 8000d68:	4b13      	ldr	r3, [pc, #76]	; (8000db8 <MX_DMA2D_Init+0x6c>)
 8000d6a:	2200      	movs	r2, #0
 8000d6c:	645a      	str	r2, [r3, #68]	; 0x44
  hdma2d.LayerCfg[1].InputColorMode = DMA2D_INPUT_ARGB8888;
 8000d6e:	4b12      	ldr	r3, [pc, #72]	; (8000db8 <MX_DMA2D_Init+0x6c>)
 8000d70:	2200      	movs	r2, #0
 8000d72:	649a      	str	r2, [r3, #72]	; 0x48
  hdma2d.LayerCfg[1].AlphaMode = DMA2D_NO_MODIF_ALPHA;
 8000d74:	4b10      	ldr	r3, [pc, #64]	; (8000db8 <MX_DMA2D_Init+0x6c>)
 8000d76:	2200      	movs	r2, #0
 8000d78:	64da      	str	r2, [r3, #76]	; 0x4c
  hdma2d.LayerCfg[1].InputAlpha = 0;
 8000d7a:	4b0f      	ldr	r3, [pc, #60]	; (8000db8 <MX_DMA2D_Init+0x6c>)
 8000d7c:	2200      	movs	r2, #0
 8000d7e:	651a      	str	r2, [r3, #80]	; 0x50
  hdma2d.LayerCfg[1].AlphaInverted = DMA2D_REGULAR_ALPHA;
 8000d80:	4b0d      	ldr	r3, [pc, #52]	; (8000db8 <MX_DMA2D_Init+0x6c>)
 8000d82:	2200      	movs	r2, #0
 8000d84:	655a      	str	r2, [r3, #84]	; 0x54
  hdma2d.LayerCfg[1].RedBlueSwap = DMA2D_RB_REGULAR;
 8000d86:	4b0c      	ldr	r3, [pc, #48]	; (8000db8 <MX_DMA2D_Init+0x6c>)
 8000d88:	2200      	movs	r2, #0
 8000d8a:	659a      	str	r2, [r3, #88]	; 0x58
  hdma2d.LayerCfg[1].ChromaSubSampling = DMA2D_NO_CSS;
 8000d8c:	4b0a      	ldr	r3, [pc, #40]	; (8000db8 <MX_DMA2D_Init+0x6c>)
 8000d8e:	2200      	movs	r2, #0
 8000d90:	65da      	str	r2, [r3, #92]	; 0x5c
  if (HAL_DMA2D_Init(&hdma2d) != HAL_OK)
 8000d92:	4809      	ldr	r0, [pc, #36]	; (8000db8 <MX_DMA2D_Init+0x6c>)
 8000d94:	f002 fe4a 	bl	8003a2c <HAL_DMA2D_Init>
 8000d98:	4603      	mov	r3, r0
 8000d9a:	2b00      	cmp	r3, #0
 8000d9c:	d001      	beq.n	8000da2 <MX_DMA2D_Init+0x56>
  {
    Error_Handler();
 8000d9e:	f000 fdc3 	bl	8001928 <Error_Handler>
  }
  if (HAL_DMA2D_ConfigLayer(&hdma2d, 1) != HAL_OK)
 8000da2:	2101      	movs	r1, #1
 8000da4:	4804      	ldr	r0, [pc, #16]	; (8000db8 <MX_DMA2D_Init+0x6c>)
 8000da6:	f002 fea5 	bl	8003af4 <HAL_DMA2D_ConfigLayer>
 8000daa:	4603      	mov	r3, r0
 8000dac:	2b00      	cmp	r3, #0
 8000dae:	d001      	beq.n	8000db4 <MX_DMA2D_Init+0x68>
  {
    Error_Handler();
 8000db0:	f000 fdba 	bl	8001928 <Error_Handler>
  }
  /* USER CODE BEGIN DMA2D_Init 2 */

  /* USER CODE END DMA2D_Init 2 */

}
 8000db4:	bf00      	nop
 8000db6:	bd80      	pop	{r7, pc}
 8000db8:	24000490 	.word	0x24000490
 8000dbc:	52001000 	.word	0x52001000

08000dc0 <HAL_DMA2D_MspInit>:

void HAL_DMA2D_MspInit(DMA2D_HandleTypeDef* dma2dHandle)
{
 8000dc0:	b480      	push	{r7}
 8000dc2:	b085      	sub	sp, #20
 8000dc4:	af00      	add	r7, sp, #0
 8000dc6:	6078      	str	r0, [r7, #4]

  if(dma2dHandle->Instance==DMA2D)
 8000dc8:	687b      	ldr	r3, [r7, #4]
 8000dca:	681b      	ldr	r3, [r3, #0]
 8000dcc:	4a0b      	ldr	r2, [pc, #44]	; (8000dfc <HAL_DMA2D_MspInit+0x3c>)
 8000dce:	4293      	cmp	r3, r2
 8000dd0:	d10e      	bne.n	8000df0 <HAL_DMA2D_MspInit+0x30>
  {
  /* USER CODE BEGIN DMA2D_MspInit 0 */

  /* USER CODE END DMA2D_MspInit 0 */
    /* DMA2D clock enable */
    __HAL_RCC_DMA2D_CLK_ENABLE();
 8000dd2:	4b0b      	ldr	r3, [pc, #44]	; (8000e00 <HAL_DMA2D_MspInit+0x40>)
 8000dd4:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 8000dd8:	4a09      	ldr	r2, [pc, #36]	; (8000e00 <HAL_DMA2D_MspInit+0x40>)
 8000dda:	f043 0310 	orr.w	r3, r3, #16
 8000dde:	f8c2 30d4 	str.w	r3, [r2, #212]	; 0xd4
 8000de2:	4b07      	ldr	r3, [pc, #28]	; (8000e00 <HAL_DMA2D_MspInit+0x40>)
 8000de4:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 8000de8:	f003 0310 	and.w	r3, r3, #16
 8000dec:	60fb      	str	r3, [r7, #12]
 8000dee:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN DMA2D_MspInit 1 */

  /* USER CODE END DMA2D_MspInit 1 */
  }
}
 8000df0:	bf00      	nop
 8000df2:	3714      	adds	r7, #20
 8000df4:	46bd      	mov	sp, r7
 8000df6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dfa:	4770      	bx	lr
 8000dfc:	52001000 	.word	0x52001000
 8000e00:	58024400 	.word	0x58024400

08000e04 <MX_FDCAN1_Init>:

FDCAN_HandleTypeDef hfdcan1;

/* FDCAN1 init function */
void MX_FDCAN1_Init(void)
{
 8000e04:	b580      	push	{r7, lr}
 8000e06:	af00      	add	r7, sp, #0
  /* USER CODE END FDCAN1_Init 0 */

  /* USER CODE BEGIN FDCAN1_Init 1 */

  /* USER CODE END FDCAN1_Init 1 */
  hfdcan1.Instance = FDCAN1;
 8000e08:	4b2e      	ldr	r3, [pc, #184]	; (8000ec4 <MX_FDCAN1_Init+0xc0>)
 8000e0a:	4a2f      	ldr	r2, [pc, #188]	; (8000ec8 <MX_FDCAN1_Init+0xc4>)
 8000e0c:	601a      	str	r2, [r3, #0]
  hfdcan1.Init.FrameFormat = FDCAN_FRAME_CLASSIC;
 8000e0e:	4b2d      	ldr	r3, [pc, #180]	; (8000ec4 <MX_FDCAN1_Init+0xc0>)
 8000e10:	2200      	movs	r2, #0
 8000e12:	609a      	str	r2, [r3, #8]
  hfdcan1.Init.Mode = FDCAN_MODE_NORMAL;
 8000e14:	4b2b      	ldr	r3, [pc, #172]	; (8000ec4 <MX_FDCAN1_Init+0xc0>)
 8000e16:	2200      	movs	r2, #0
 8000e18:	60da      	str	r2, [r3, #12]
  hfdcan1.Init.AutoRetransmission = DISABLE;
 8000e1a:	4b2a      	ldr	r3, [pc, #168]	; (8000ec4 <MX_FDCAN1_Init+0xc0>)
 8000e1c:	2200      	movs	r2, #0
 8000e1e:	741a      	strb	r2, [r3, #16]
  hfdcan1.Init.TransmitPause = DISABLE;
 8000e20:	4b28      	ldr	r3, [pc, #160]	; (8000ec4 <MX_FDCAN1_Init+0xc0>)
 8000e22:	2200      	movs	r2, #0
 8000e24:	745a      	strb	r2, [r3, #17]
  hfdcan1.Init.ProtocolException = ENABLE;
 8000e26:	4b27      	ldr	r3, [pc, #156]	; (8000ec4 <MX_FDCAN1_Init+0xc0>)
 8000e28:	2201      	movs	r2, #1
 8000e2a:	749a      	strb	r2, [r3, #18]
  hfdcan1.Init.NominalPrescaler = 1;
 8000e2c:	4b25      	ldr	r3, [pc, #148]	; (8000ec4 <MX_FDCAN1_Init+0xc0>)
 8000e2e:	2201      	movs	r2, #1
 8000e30:	615a      	str	r2, [r3, #20]
  hfdcan1.Init.NominalSyncJumpWidth = 8;
 8000e32:	4b24      	ldr	r3, [pc, #144]	; (8000ec4 <MX_FDCAN1_Init+0xc0>)
 8000e34:	2208      	movs	r2, #8
 8000e36:	619a      	str	r2, [r3, #24]
  hfdcan1.Init.NominalTimeSeg1 = 0x1f;
 8000e38:	4b22      	ldr	r3, [pc, #136]	; (8000ec4 <MX_FDCAN1_Init+0xc0>)
 8000e3a:	221f      	movs	r2, #31
 8000e3c:	61da      	str	r2, [r3, #28]
  hfdcan1.Init.NominalTimeSeg2 = 8;
 8000e3e:	4b21      	ldr	r3, [pc, #132]	; (8000ec4 <MX_FDCAN1_Init+0xc0>)
 8000e40:	2208      	movs	r2, #8
 8000e42:	621a      	str	r2, [r3, #32]
  hfdcan1.Init.DataPrescaler = 1;
 8000e44:	4b1f      	ldr	r3, [pc, #124]	; (8000ec4 <MX_FDCAN1_Init+0xc0>)
 8000e46:	2201      	movs	r2, #1
 8000e48:	625a      	str	r2, [r3, #36]	; 0x24
  hfdcan1.Init.DataSyncJumpWidth = 1;
 8000e4a:	4b1e      	ldr	r3, [pc, #120]	; (8000ec4 <MX_FDCAN1_Init+0xc0>)
 8000e4c:	2201      	movs	r2, #1
 8000e4e:	629a      	str	r2, [r3, #40]	; 0x28
  hfdcan1.Init.DataTimeSeg1 = 1;
 8000e50:	4b1c      	ldr	r3, [pc, #112]	; (8000ec4 <MX_FDCAN1_Init+0xc0>)
 8000e52:	2201      	movs	r2, #1
 8000e54:	62da      	str	r2, [r3, #44]	; 0x2c
  hfdcan1.Init.DataTimeSeg2 = 1;
 8000e56:	4b1b      	ldr	r3, [pc, #108]	; (8000ec4 <MX_FDCAN1_Init+0xc0>)
 8000e58:	2201      	movs	r2, #1
 8000e5a:	631a      	str	r2, [r3, #48]	; 0x30
  hfdcan1.Init.MessageRAMOffset = 0;
 8000e5c:	4b19      	ldr	r3, [pc, #100]	; (8000ec4 <MX_FDCAN1_Init+0xc0>)
 8000e5e:	2200      	movs	r2, #0
 8000e60:	635a      	str	r2, [r3, #52]	; 0x34
  hfdcan1.Init.StdFiltersNbr = 1;
 8000e62:	4b18      	ldr	r3, [pc, #96]	; (8000ec4 <MX_FDCAN1_Init+0xc0>)
 8000e64:	2201      	movs	r2, #1
 8000e66:	639a      	str	r2, [r3, #56]	; 0x38
  hfdcan1.Init.ExtFiltersNbr = 0;
 8000e68:	4b16      	ldr	r3, [pc, #88]	; (8000ec4 <MX_FDCAN1_Init+0xc0>)
 8000e6a:	2200      	movs	r2, #0
 8000e6c:	63da      	str	r2, [r3, #60]	; 0x3c
  hfdcan1.Init.RxFifo0ElmtsNbr = 1;
 8000e6e:	4b15      	ldr	r3, [pc, #84]	; (8000ec4 <MX_FDCAN1_Init+0xc0>)
 8000e70:	2201      	movs	r2, #1
 8000e72:	641a      	str	r2, [r3, #64]	; 0x40
  hfdcan1.Init.RxFifo0ElmtSize = FDCAN_DATA_BYTES_8;
 8000e74:	4b13      	ldr	r3, [pc, #76]	; (8000ec4 <MX_FDCAN1_Init+0xc0>)
 8000e76:	2204      	movs	r2, #4
 8000e78:	645a      	str	r2, [r3, #68]	; 0x44
  hfdcan1.Init.RxFifo1ElmtsNbr = 0;
 8000e7a:	4b12      	ldr	r3, [pc, #72]	; (8000ec4 <MX_FDCAN1_Init+0xc0>)
 8000e7c:	2200      	movs	r2, #0
 8000e7e:	649a      	str	r2, [r3, #72]	; 0x48
  hfdcan1.Init.RxFifo1ElmtSize = FDCAN_DATA_BYTES_8;
 8000e80:	4b10      	ldr	r3, [pc, #64]	; (8000ec4 <MX_FDCAN1_Init+0xc0>)
 8000e82:	2204      	movs	r2, #4
 8000e84:	64da      	str	r2, [r3, #76]	; 0x4c
  hfdcan1.Init.RxBuffersNbr = 0;
 8000e86:	4b0f      	ldr	r3, [pc, #60]	; (8000ec4 <MX_FDCAN1_Init+0xc0>)
 8000e88:	2200      	movs	r2, #0
 8000e8a:	651a      	str	r2, [r3, #80]	; 0x50
  hfdcan1.Init.RxBufferSize = FDCAN_DATA_BYTES_8;
 8000e8c:	4b0d      	ldr	r3, [pc, #52]	; (8000ec4 <MX_FDCAN1_Init+0xc0>)
 8000e8e:	2204      	movs	r2, #4
 8000e90:	655a      	str	r2, [r3, #84]	; 0x54
  hfdcan1.Init.TxEventsNbr = 0;
 8000e92:	4b0c      	ldr	r3, [pc, #48]	; (8000ec4 <MX_FDCAN1_Init+0xc0>)
 8000e94:	2200      	movs	r2, #0
 8000e96:	659a      	str	r2, [r3, #88]	; 0x58
  hfdcan1.Init.TxBuffersNbr = 0;
 8000e98:	4b0a      	ldr	r3, [pc, #40]	; (8000ec4 <MX_FDCAN1_Init+0xc0>)
 8000e9a:	2200      	movs	r2, #0
 8000e9c:	65da      	str	r2, [r3, #92]	; 0x5c
  hfdcan1.Init.TxFifoQueueElmtsNbr = 1;
 8000e9e:	4b09      	ldr	r3, [pc, #36]	; (8000ec4 <MX_FDCAN1_Init+0xc0>)
 8000ea0:	2201      	movs	r2, #1
 8000ea2:	661a      	str	r2, [r3, #96]	; 0x60
  hfdcan1.Init.TxFifoQueueMode = FDCAN_TX_FIFO_OPERATION;
 8000ea4:	4b07      	ldr	r3, [pc, #28]	; (8000ec4 <MX_FDCAN1_Init+0xc0>)
 8000ea6:	2200      	movs	r2, #0
 8000ea8:	665a      	str	r2, [r3, #100]	; 0x64
  hfdcan1.Init.TxElmtSize = FDCAN_DATA_BYTES_8;
 8000eaa:	4b06      	ldr	r3, [pc, #24]	; (8000ec4 <MX_FDCAN1_Init+0xc0>)
 8000eac:	2204      	movs	r2, #4
 8000eae:	669a      	str	r2, [r3, #104]	; 0x68
  if (HAL_FDCAN_Init(&hfdcan1) != HAL_OK)
 8000eb0:	4804      	ldr	r0, [pc, #16]	; (8000ec4 <MX_FDCAN1_Init+0xc0>)
 8000eb2:	f002 fecd 	bl	8003c50 <HAL_FDCAN_Init>
 8000eb6:	4603      	mov	r3, r0
 8000eb8:	2b00      	cmp	r3, #0
 8000eba:	d001      	beq.n	8000ec0 <MX_FDCAN1_Init+0xbc>
  {
    Error_Handler();
 8000ebc:	f000 fd34 	bl	8001928 <Error_Handler>
  }
  /* USER CODE BEGIN FDCAN1_Init 2 */

  /* USER CODE END FDCAN1_Init 2 */

}
 8000ec0:	bf00      	nop
 8000ec2:	bd80      	pop	{r7, pc}
 8000ec4:	240004f8 	.word	0x240004f8
 8000ec8:	4000a000 	.word	0x4000a000

08000ecc <HAL_FDCAN_MspInit>:

void HAL_FDCAN_MspInit(FDCAN_HandleTypeDef* fdcanHandle)
{
 8000ecc:	b580      	push	{r7, lr}
 8000ece:	b08a      	sub	sp, #40	; 0x28
 8000ed0:	af00      	add	r7, sp, #0
 8000ed2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ed4:	f107 0314 	add.w	r3, r7, #20
 8000ed8:	2200      	movs	r2, #0
 8000eda:	601a      	str	r2, [r3, #0]
 8000edc:	605a      	str	r2, [r3, #4]
 8000ede:	609a      	str	r2, [r3, #8]
 8000ee0:	60da      	str	r2, [r3, #12]
 8000ee2:	611a      	str	r2, [r3, #16]
  if(fdcanHandle->Instance==FDCAN1)
 8000ee4:	687b      	ldr	r3, [r7, #4]
 8000ee6:	681b      	ldr	r3, [r3, #0]
 8000ee8:	4a1e      	ldr	r2, [pc, #120]	; (8000f64 <HAL_FDCAN_MspInit+0x98>)
 8000eea:	4293      	cmp	r3, r2
 8000eec:	d136      	bne.n	8000f5c <HAL_FDCAN_MspInit+0x90>
  {
  /* USER CODE BEGIN FDCAN1_MspInit 0 */

  /* USER CODE END FDCAN1_MspInit 0 */
    /* FDCAN1 clock enable */
    __HAL_RCC_FDCAN_CLK_ENABLE();
 8000eee:	4b1e      	ldr	r3, [pc, #120]	; (8000f68 <HAL_FDCAN_MspInit+0x9c>)
 8000ef0:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 8000ef4:	4a1c      	ldr	r2, [pc, #112]	; (8000f68 <HAL_FDCAN_MspInit+0x9c>)
 8000ef6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000efa:	f8c2 30ec 	str.w	r3, [r2, #236]	; 0xec
 8000efe:	4b1a      	ldr	r3, [pc, #104]	; (8000f68 <HAL_FDCAN_MspInit+0x9c>)
 8000f00:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 8000f04:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000f08:	613b      	str	r3, [r7, #16]
 8000f0a:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000f0c:	4b16      	ldr	r3, [pc, #88]	; (8000f68 <HAL_FDCAN_MspInit+0x9c>)
 8000f0e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000f12:	4a15      	ldr	r2, [pc, #84]	; (8000f68 <HAL_FDCAN_MspInit+0x9c>)
 8000f14:	f043 0302 	orr.w	r3, r3, #2
 8000f18:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000f1c:	4b12      	ldr	r3, [pc, #72]	; (8000f68 <HAL_FDCAN_MspInit+0x9c>)
 8000f1e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000f22:	f003 0302 	and.w	r3, r3, #2
 8000f26:	60fb      	str	r3, [r7, #12]
 8000f28:	68fb      	ldr	r3, [r7, #12]
    /**FDCAN1 GPIO Configuration
    PB8     ------> FDCAN1_RX
    PB9     ------> FDCAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8000f2a:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000f2e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f30:	2302      	movs	r3, #2
 8000f32:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f34:	2300      	movs	r3, #0
 8000f36:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f38:	2300      	movs	r3, #0
 8000f3a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_FDCAN1;
 8000f3c:	2309      	movs	r3, #9
 8000f3e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000f40:	f107 0314 	add.w	r3, r7, #20
 8000f44:	4619      	mov	r1, r3
 8000f46:	4809      	ldr	r0, [pc, #36]	; (8000f6c <HAL_FDCAN_MspInit+0xa0>)
 8000f48:	f003 fcfa 	bl	8004940 <HAL_GPIO_Init>

    /* FDCAN1 interrupt Init */
    HAL_NVIC_SetPriority(FDCAN1_IT0_IRQn, 0, 0);
 8000f4c:	2200      	movs	r2, #0
 8000f4e:	2100      	movs	r1, #0
 8000f50:	2013      	movs	r0, #19
 8000f52:	f002 fbe4 	bl	800371e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(FDCAN1_IT0_IRQn);
 8000f56:	2013      	movs	r0, #19
 8000f58:	f002 fbfb 	bl	8003752 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN FDCAN1_MspInit 1 */

  /* USER CODE END FDCAN1_MspInit 1 */
  }
}
 8000f5c:	bf00      	nop
 8000f5e:	3728      	adds	r7, #40	; 0x28
 8000f60:	46bd      	mov	sp, r7
 8000f62:	bd80      	pop	{r7, pc}
 8000f64:	4000a000 	.word	0x4000a000
 8000f68:	58024400 	.word	0x58024400
 8000f6c:	58020400 	.word	0x58020400

08000f70 <MX_FMC_Init>:
SRAM_HandleTypeDef hsram2;
SDRAM_HandleTypeDef hsdram1;

/* FMC initialization function */
void MX_FMC_Init(void)
{
 8000f70:	b580      	push	{r7, lr}
 8000f72:	b08e      	sub	sp, #56	; 0x38
 8000f74:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FMC_Init 0 */

  /* USER CODE END FMC_Init 0 */

  FMC_NORSRAM_TimingTypeDef Timing = {0};
 8000f76:	f107 031c 	add.w	r3, r7, #28
 8000f7a:	2200      	movs	r2, #0
 8000f7c:	601a      	str	r2, [r3, #0]
 8000f7e:	605a      	str	r2, [r3, #4]
 8000f80:	609a      	str	r2, [r3, #8]
 8000f82:	60da      	str	r2, [r3, #12]
 8000f84:	611a      	str	r2, [r3, #16]
 8000f86:	615a      	str	r2, [r3, #20]
 8000f88:	619a      	str	r2, [r3, #24]
  FMC_SDRAM_TimingTypeDef SdramTiming = {0};
 8000f8a:	463b      	mov	r3, r7
 8000f8c:	2200      	movs	r2, #0
 8000f8e:	601a      	str	r2, [r3, #0]
 8000f90:	605a      	str	r2, [r3, #4]
 8000f92:	609a      	str	r2, [r3, #8]
 8000f94:	60da      	str	r2, [r3, #12]
 8000f96:	611a      	str	r2, [r3, #16]
 8000f98:	615a      	str	r2, [r3, #20]
 8000f9a:	619a      	str	r2, [r3, #24]

  /* USER CODE END FMC_Init 1 */

  /** Perform the SRAM1 memory initialization sequence
  */
  hsram1.Instance = FMC_NORSRAM_DEVICE;
 8000f9c:	4b70      	ldr	r3, [pc, #448]	; (8001160 <MX_FMC_Init+0x1f0>)
 8000f9e:	4a71      	ldr	r2, [pc, #452]	; (8001164 <MX_FMC_Init+0x1f4>)
 8000fa0:	601a      	str	r2, [r3, #0]
  hsram1.Extended = FMC_NORSRAM_EXTENDED_DEVICE;
 8000fa2:	4b6f      	ldr	r3, [pc, #444]	; (8001160 <MX_FMC_Init+0x1f0>)
 8000fa4:	4a70      	ldr	r2, [pc, #448]	; (8001168 <MX_FMC_Init+0x1f8>)
 8000fa6:	605a      	str	r2, [r3, #4]
  /* hsram1.Init */
  hsram1.Init.NSBank = FMC_NORSRAM_BANK3;
 8000fa8:	4b6d      	ldr	r3, [pc, #436]	; (8001160 <MX_FMC_Init+0x1f0>)
 8000faa:	2204      	movs	r2, #4
 8000fac:	609a      	str	r2, [r3, #8]
  hsram1.Init.DataAddressMux = FMC_DATA_ADDRESS_MUX_DISABLE;
 8000fae:	4b6c      	ldr	r3, [pc, #432]	; (8001160 <MX_FMC_Init+0x1f0>)
 8000fb0:	2200      	movs	r2, #0
 8000fb2:	60da      	str	r2, [r3, #12]
  hsram1.Init.MemoryType = FMC_MEMORY_TYPE_SRAM;
 8000fb4:	4b6a      	ldr	r3, [pc, #424]	; (8001160 <MX_FMC_Init+0x1f0>)
 8000fb6:	2200      	movs	r2, #0
 8000fb8:	611a      	str	r2, [r3, #16]
  hsram1.Init.MemoryDataWidth = FMC_NORSRAM_MEM_BUS_WIDTH_16;
 8000fba:	4b69      	ldr	r3, [pc, #420]	; (8001160 <MX_FMC_Init+0x1f0>)
 8000fbc:	2210      	movs	r2, #16
 8000fbe:	615a      	str	r2, [r3, #20]
  hsram1.Init.BurstAccessMode = FMC_BURST_ACCESS_MODE_DISABLE;
 8000fc0:	4b67      	ldr	r3, [pc, #412]	; (8001160 <MX_FMC_Init+0x1f0>)
 8000fc2:	2200      	movs	r2, #0
 8000fc4:	619a      	str	r2, [r3, #24]
  hsram1.Init.WaitSignalPolarity = FMC_WAIT_SIGNAL_POLARITY_LOW;
 8000fc6:	4b66      	ldr	r3, [pc, #408]	; (8001160 <MX_FMC_Init+0x1f0>)
 8000fc8:	2200      	movs	r2, #0
 8000fca:	61da      	str	r2, [r3, #28]
  hsram1.Init.WaitSignalActive = FMC_WAIT_TIMING_BEFORE_WS;
 8000fcc:	4b64      	ldr	r3, [pc, #400]	; (8001160 <MX_FMC_Init+0x1f0>)
 8000fce:	2200      	movs	r2, #0
 8000fd0:	621a      	str	r2, [r3, #32]
  hsram1.Init.WriteOperation = FMC_WRITE_OPERATION_ENABLE;
 8000fd2:	4b63      	ldr	r3, [pc, #396]	; (8001160 <MX_FMC_Init+0x1f0>)
 8000fd4:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000fd8:	625a      	str	r2, [r3, #36]	; 0x24
  hsram1.Init.WaitSignal = FMC_WAIT_SIGNAL_DISABLE;
 8000fda:	4b61      	ldr	r3, [pc, #388]	; (8001160 <MX_FMC_Init+0x1f0>)
 8000fdc:	2200      	movs	r2, #0
 8000fde:	629a      	str	r2, [r3, #40]	; 0x28
  hsram1.Init.ExtendedMode = FMC_EXTENDED_MODE_DISABLE;
 8000fe0:	4b5f      	ldr	r3, [pc, #380]	; (8001160 <MX_FMC_Init+0x1f0>)
 8000fe2:	2200      	movs	r2, #0
 8000fe4:	62da      	str	r2, [r3, #44]	; 0x2c
  hsram1.Init.AsynchronousWait = FMC_ASYNCHRONOUS_WAIT_DISABLE;
 8000fe6:	4b5e      	ldr	r3, [pc, #376]	; (8001160 <MX_FMC_Init+0x1f0>)
 8000fe8:	2200      	movs	r2, #0
 8000fea:	631a      	str	r2, [r3, #48]	; 0x30
  hsram1.Init.WriteBurst = FMC_WRITE_BURST_DISABLE;
 8000fec:	4b5c      	ldr	r3, [pc, #368]	; (8001160 <MX_FMC_Init+0x1f0>)
 8000fee:	2200      	movs	r2, #0
 8000ff0:	635a      	str	r2, [r3, #52]	; 0x34
  hsram1.Init.ContinuousClock = FMC_CONTINUOUS_CLOCK_SYNC_ONLY;
 8000ff2:	4b5b      	ldr	r3, [pc, #364]	; (8001160 <MX_FMC_Init+0x1f0>)
 8000ff4:	2200      	movs	r2, #0
 8000ff6:	639a      	str	r2, [r3, #56]	; 0x38
  hsram1.Init.WriteFifo = FMC_WRITE_FIFO_ENABLE;
 8000ff8:	4b59      	ldr	r3, [pc, #356]	; (8001160 <MX_FMC_Init+0x1f0>)
 8000ffa:	2200      	movs	r2, #0
 8000ffc:	63da      	str	r2, [r3, #60]	; 0x3c
  hsram1.Init.PageSize = FMC_PAGE_SIZE_NONE;
 8000ffe:	4b58      	ldr	r3, [pc, #352]	; (8001160 <MX_FMC_Init+0x1f0>)
 8001000:	2200      	movs	r2, #0
 8001002:	641a      	str	r2, [r3, #64]	; 0x40
  /* Timing */
  Timing.AddressSetupTime = 5;
 8001004:	2305      	movs	r3, #5
 8001006:	61fb      	str	r3, [r7, #28]
  Timing.AddressHoldTime = 15;
 8001008:	230f      	movs	r3, #15
 800100a:	623b      	str	r3, [r7, #32]
  Timing.DataSetupTime = 5;
 800100c:	2305      	movs	r3, #5
 800100e:	627b      	str	r3, [r7, #36]	; 0x24
  Timing.BusTurnAroundDuration = 1;
 8001010:	2301      	movs	r3, #1
 8001012:	62bb      	str	r3, [r7, #40]	; 0x28
  Timing.CLKDivision = 16;
 8001014:	2310      	movs	r3, #16
 8001016:	62fb      	str	r3, [r7, #44]	; 0x2c
  Timing.DataLatency = 17;
 8001018:	2311      	movs	r3, #17
 800101a:	633b      	str	r3, [r7, #48]	; 0x30
  Timing.AccessMode = FMC_ACCESS_MODE_A;
 800101c:	2300      	movs	r3, #0
 800101e:	637b      	str	r3, [r7, #52]	; 0x34
  /* ExtTiming */

  if (HAL_SRAM_Init(&hsram1, &Timing, NULL) != HAL_OK)
 8001020:	f107 031c 	add.w	r3, r7, #28
 8001024:	2200      	movs	r2, #0
 8001026:	4619      	mov	r1, r3
 8001028:	484d      	ldr	r0, [pc, #308]	; (8001160 <MX_FMC_Init+0x1f0>)
 800102a:	f00b faf3 	bl	800c614 <HAL_SRAM_Init>
 800102e:	4603      	mov	r3, r0
 8001030:	2b00      	cmp	r3, #0
 8001032:	d001      	beq.n	8001038 <MX_FMC_Init+0xc8>
  {
    Error_Handler( );
 8001034:	f000 fc78 	bl	8001928 <Error_Handler>
  }

  HAL_SetFMCMemorySwappingConfig(FMC_SWAPBMAP_SDRAM_SRAM);
 8001038:	f04f 7080 	mov.w	r0, #16777216	; 0x1000000
 800103c:	f001 f9f4 	bl	8002428 <HAL_SetFMCMemorySwappingConfig>

  /** Perform the SRAM2 memory initialization sequence
  */
  hsram2.Instance = FMC_NORSRAM_DEVICE;
 8001040:	4b4a      	ldr	r3, [pc, #296]	; (800116c <MX_FMC_Init+0x1fc>)
 8001042:	4a48      	ldr	r2, [pc, #288]	; (8001164 <MX_FMC_Init+0x1f4>)
 8001044:	601a      	str	r2, [r3, #0]
  hsram2.Extended = FMC_NORSRAM_EXTENDED_DEVICE;
 8001046:	4b49      	ldr	r3, [pc, #292]	; (800116c <MX_FMC_Init+0x1fc>)
 8001048:	4a47      	ldr	r2, [pc, #284]	; (8001168 <MX_FMC_Init+0x1f8>)
 800104a:	605a      	str	r2, [r3, #4]
  /* hsram2.Init */
  hsram2.Init.NSBank = FMC_NORSRAM_BANK1;
 800104c:	4b47      	ldr	r3, [pc, #284]	; (800116c <MX_FMC_Init+0x1fc>)
 800104e:	2200      	movs	r2, #0
 8001050:	609a      	str	r2, [r3, #8]
  hsram2.Init.DataAddressMux = FMC_DATA_ADDRESS_MUX_DISABLE;
 8001052:	4b46      	ldr	r3, [pc, #280]	; (800116c <MX_FMC_Init+0x1fc>)
 8001054:	2200      	movs	r2, #0
 8001056:	60da      	str	r2, [r3, #12]
  hsram2.Init.MemoryType = FMC_MEMORY_TYPE_SRAM;
 8001058:	4b44      	ldr	r3, [pc, #272]	; (800116c <MX_FMC_Init+0x1fc>)
 800105a:	2200      	movs	r2, #0
 800105c:	611a      	str	r2, [r3, #16]
  hsram2.Init.MemoryDataWidth = FMC_NORSRAM_MEM_BUS_WIDTH_16;
 800105e:	4b43      	ldr	r3, [pc, #268]	; (800116c <MX_FMC_Init+0x1fc>)
 8001060:	2210      	movs	r2, #16
 8001062:	615a      	str	r2, [r3, #20]
  hsram2.Init.BurstAccessMode = FMC_BURST_ACCESS_MODE_DISABLE;
 8001064:	4b41      	ldr	r3, [pc, #260]	; (800116c <MX_FMC_Init+0x1fc>)
 8001066:	2200      	movs	r2, #0
 8001068:	619a      	str	r2, [r3, #24]
  hsram2.Init.WaitSignalPolarity = FMC_WAIT_SIGNAL_POLARITY_LOW;
 800106a:	4b40      	ldr	r3, [pc, #256]	; (800116c <MX_FMC_Init+0x1fc>)
 800106c:	2200      	movs	r2, #0
 800106e:	61da      	str	r2, [r3, #28]
  hsram2.Init.WaitSignalActive = FMC_WAIT_TIMING_BEFORE_WS;
 8001070:	4b3e      	ldr	r3, [pc, #248]	; (800116c <MX_FMC_Init+0x1fc>)
 8001072:	2200      	movs	r2, #0
 8001074:	621a      	str	r2, [r3, #32]
  hsram2.Init.WriteOperation = FMC_WRITE_OPERATION_ENABLE;
 8001076:	4b3d      	ldr	r3, [pc, #244]	; (800116c <MX_FMC_Init+0x1fc>)
 8001078:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800107c:	625a      	str	r2, [r3, #36]	; 0x24
  hsram2.Init.WaitSignal = FMC_WAIT_SIGNAL_DISABLE;
 800107e:	4b3b      	ldr	r3, [pc, #236]	; (800116c <MX_FMC_Init+0x1fc>)
 8001080:	2200      	movs	r2, #0
 8001082:	629a      	str	r2, [r3, #40]	; 0x28
  hsram2.Init.ExtendedMode = FMC_EXTENDED_MODE_DISABLE;
 8001084:	4b39      	ldr	r3, [pc, #228]	; (800116c <MX_FMC_Init+0x1fc>)
 8001086:	2200      	movs	r2, #0
 8001088:	62da      	str	r2, [r3, #44]	; 0x2c
  hsram2.Init.AsynchronousWait = FMC_ASYNCHRONOUS_WAIT_DISABLE;
 800108a:	4b38      	ldr	r3, [pc, #224]	; (800116c <MX_FMC_Init+0x1fc>)
 800108c:	2200      	movs	r2, #0
 800108e:	631a      	str	r2, [r3, #48]	; 0x30
  hsram2.Init.WriteBurst = FMC_WRITE_BURST_DISABLE;
 8001090:	4b36      	ldr	r3, [pc, #216]	; (800116c <MX_FMC_Init+0x1fc>)
 8001092:	2200      	movs	r2, #0
 8001094:	635a      	str	r2, [r3, #52]	; 0x34
  hsram2.Init.ContinuousClock = FMC_CONTINUOUS_CLOCK_SYNC_ONLY;
 8001096:	4b35      	ldr	r3, [pc, #212]	; (800116c <MX_FMC_Init+0x1fc>)
 8001098:	2200      	movs	r2, #0
 800109a:	639a      	str	r2, [r3, #56]	; 0x38
  hsram2.Init.WriteFifo = FMC_WRITE_FIFO_ENABLE;
 800109c:	4b33      	ldr	r3, [pc, #204]	; (800116c <MX_FMC_Init+0x1fc>)
 800109e:	2200      	movs	r2, #0
 80010a0:	63da      	str	r2, [r3, #60]	; 0x3c
  hsram2.Init.PageSize = FMC_PAGE_SIZE_NONE;
 80010a2:	4b32      	ldr	r3, [pc, #200]	; (800116c <MX_FMC_Init+0x1fc>)
 80010a4:	2200      	movs	r2, #0
 80010a6:	641a      	str	r2, [r3, #64]	; 0x40
  /* Timing */
  Timing.AddressSetupTime = 5;
 80010a8:	2305      	movs	r3, #5
 80010aa:	61fb      	str	r3, [r7, #28]
  Timing.AddressHoldTime = 15;
 80010ac:	230f      	movs	r3, #15
 80010ae:	623b      	str	r3, [r7, #32]
  Timing.DataSetupTime = 9;
 80010b0:	2309      	movs	r3, #9
 80010b2:	627b      	str	r3, [r7, #36]	; 0x24
  Timing.BusTurnAroundDuration = 0;
 80010b4:	2300      	movs	r3, #0
 80010b6:	62bb      	str	r3, [r7, #40]	; 0x28
  Timing.CLKDivision = 16;
 80010b8:	2310      	movs	r3, #16
 80010ba:	62fb      	str	r3, [r7, #44]	; 0x2c
  Timing.DataLatency = 17;
 80010bc:	2311      	movs	r3, #17
 80010be:	633b      	str	r3, [r7, #48]	; 0x30
  Timing.AccessMode = FMC_ACCESS_MODE_A;
 80010c0:	2300      	movs	r3, #0
 80010c2:	637b      	str	r3, [r7, #52]	; 0x34
  /* ExtTiming */

  if (HAL_SRAM_Init(&hsram2, &Timing, NULL) != HAL_OK)
 80010c4:	f107 031c 	add.w	r3, r7, #28
 80010c8:	2200      	movs	r2, #0
 80010ca:	4619      	mov	r1, r3
 80010cc:	4827      	ldr	r0, [pc, #156]	; (800116c <MX_FMC_Init+0x1fc>)
 80010ce:	f00b faa1 	bl	800c614 <HAL_SRAM_Init>
 80010d2:	4603      	mov	r3, r0
 80010d4:	2b00      	cmp	r3, #0
 80010d6:	d001      	beq.n	80010dc <MX_FMC_Init+0x16c>
  {
    Error_Handler( );
 80010d8:	f000 fc26 	bl	8001928 <Error_Handler>
  }

  /** Perform the SDRAM1 memory initialization sequence
  */
  hsdram1.Instance = FMC_SDRAM_DEVICE;
 80010dc:	4b24      	ldr	r3, [pc, #144]	; (8001170 <MX_FMC_Init+0x200>)
 80010de:	4a25      	ldr	r2, [pc, #148]	; (8001174 <MX_FMC_Init+0x204>)
 80010e0:	601a      	str	r2, [r3, #0]
  /* hsdram1.Init */
  hsdram1.Init.SDBank = FMC_SDRAM_BANK1;
 80010e2:	4b23      	ldr	r3, [pc, #140]	; (8001170 <MX_FMC_Init+0x200>)
 80010e4:	2200      	movs	r2, #0
 80010e6:	605a      	str	r2, [r3, #4]
  hsdram1.Init.ColumnBitsNumber = FMC_SDRAM_COLUMN_BITS_NUM_9;
 80010e8:	4b21      	ldr	r3, [pc, #132]	; (8001170 <MX_FMC_Init+0x200>)
 80010ea:	2201      	movs	r2, #1
 80010ec:	609a      	str	r2, [r3, #8]
  hsdram1.Init.RowBitsNumber = FMC_SDRAM_ROW_BITS_NUM_13;
 80010ee:	4b20      	ldr	r3, [pc, #128]	; (8001170 <MX_FMC_Init+0x200>)
 80010f0:	2208      	movs	r2, #8
 80010f2:	60da      	str	r2, [r3, #12]
  hsdram1.Init.MemoryDataWidth = FMC_SDRAM_MEM_BUS_WIDTH_16;
 80010f4:	4b1e      	ldr	r3, [pc, #120]	; (8001170 <MX_FMC_Init+0x200>)
 80010f6:	2210      	movs	r2, #16
 80010f8:	611a      	str	r2, [r3, #16]
  hsdram1.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 80010fa:	4b1d      	ldr	r3, [pc, #116]	; (8001170 <MX_FMC_Init+0x200>)
 80010fc:	2240      	movs	r2, #64	; 0x40
 80010fe:	615a      	str	r2, [r3, #20]
  hsdram1.Init.CASLatency = FMC_SDRAM_CAS_LATENCY_3;
 8001100:	4b1b      	ldr	r3, [pc, #108]	; (8001170 <MX_FMC_Init+0x200>)
 8001102:	f44f 72c0 	mov.w	r2, #384	; 0x180
 8001106:	619a      	str	r2, [r3, #24]
  hsdram1.Init.WriteProtection = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
 8001108:	4b19      	ldr	r3, [pc, #100]	; (8001170 <MX_FMC_Init+0x200>)
 800110a:	2200      	movs	r2, #0
 800110c:	61da      	str	r2, [r3, #28]
  hsdram1.Init.SDClockPeriod = FMC_SDRAM_CLOCK_PERIOD_3;
 800110e:	4b18      	ldr	r3, [pc, #96]	; (8001170 <MX_FMC_Init+0x200>)
 8001110:	f44f 6240 	mov.w	r2, #3072	; 0xc00
 8001114:	621a      	str	r2, [r3, #32]
  hsdram1.Init.ReadBurst = FMC_SDRAM_RBURST_ENABLE;
 8001116:	4b16      	ldr	r3, [pc, #88]	; (8001170 <MX_FMC_Init+0x200>)
 8001118:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800111c:	625a      	str	r2, [r3, #36]	; 0x24
  hsdram1.Init.ReadPipeDelay = FMC_SDRAM_RPIPE_DELAY_1;
 800111e:	4b14      	ldr	r3, [pc, #80]	; (8001170 <MX_FMC_Init+0x200>)
 8001120:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001124:	629a      	str	r2, [r3, #40]	; 0x28
  /* SdramTiming */
  SdramTiming.LoadToActiveDelay = 4;
 8001126:	2304      	movs	r3, #4
 8001128:	603b      	str	r3, [r7, #0]
  SdramTiming.ExitSelfRefreshDelay = 16;
 800112a:	2310      	movs	r3, #16
 800112c:	607b      	str	r3, [r7, #4]
  SdramTiming.SelfRefreshTime = 16;
 800112e:	2310      	movs	r3, #16
 8001130:	60bb      	str	r3, [r7, #8]
  SdramTiming.RowCycleDelay = 16;
 8001132:	2310      	movs	r3, #16
 8001134:	60fb      	str	r3, [r7, #12]
  SdramTiming.WriteRecoveryTime = 16;
 8001136:	2310      	movs	r3, #16
 8001138:	613b      	str	r3, [r7, #16]
  SdramTiming.RPDelay = 16;
 800113a:	2310      	movs	r3, #16
 800113c:	617b      	str	r3, [r7, #20]
  SdramTiming.RCDDelay = 16;
 800113e:	2310      	movs	r3, #16
 8001140:	61bb      	str	r3, [r7, #24]

  if (HAL_SDRAM_Init(&hsdram1, &SdramTiming) != HAL_OK)
 8001142:	463b      	mov	r3, r7
 8001144:	4619      	mov	r1, r3
 8001146:	480a      	ldr	r0, [pc, #40]	; (8001170 <MX_FMC_Init+0x200>)
 8001148:	f00a fb5e 	bl	800b808 <HAL_SDRAM_Init>
 800114c:	4603      	mov	r3, r0
 800114e:	2b00      	cmp	r3, #0
 8001150:	d001      	beq.n	8001156 <MX_FMC_Init+0x1e6>
  {
    Error_Handler( );
 8001152:	f000 fbe9 	bl	8001928 <Error_Handler>
  }

  /* USER CODE BEGIN FMC_Init 2 */

  /* USER CODE END FMC_Init 2 */
}
 8001156:	bf00      	nop
 8001158:	3738      	adds	r7, #56	; 0x38
 800115a:	46bd      	mov	sp, r7
 800115c:	bd80      	pop	{r7, pc}
 800115e:	bf00      	nop
 8001160:	24000598 	.word	0x24000598
 8001164:	52004000 	.word	0x52004000
 8001168:	52004104 	.word	0x52004104
 800116c:	240005e4 	.word	0x240005e4
 8001170:	24000630 	.word	0x24000630
 8001174:	52004140 	.word	0x52004140

08001178 <HAL_FMC_MspInit>:

static uint32_t FMC_Initialized = 0;

static void HAL_FMC_MspInit(void){
 8001178:	b580      	push	{r7, lr}
 800117a:	b086      	sub	sp, #24
 800117c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FMC_MspInit 0 */

  /* USER CODE END FMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800117e:	1d3b      	adds	r3, r7, #4
 8001180:	2200      	movs	r2, #0
 8001182:	601a      	str	r2, [r3, #0]
 8001184:	605a      	str	r2, [r3, #4]
 8001186:	609a      	str	r2, [r3, #8]
 8001188:	60da      	str	r2, [r3, #12]
 800118a:	611a      	str	r2, [r3, #16]
  if (FMC_Initialized) {
 800118c:	4b43      	ldr	r3, [pc, #268]	; (800129c <HAL_FMC_MspInit+0x124>)
 800118e:	681b      	ldr	r3, [r3, #0]
 8001190:	2b00      	cmp	r3, #0
 8001192:	d17f      	bne.n	8001294 <HAL_FMC_MspInit+0x11c>
    return;
  }
  FMC_Initialized = 1;
 8001194:	4b41      	ldr	r3, [pc, #260]	; (800129c <HAL_FMC_MspInit+0x124>)
 8001196:	2201      	movs	r2, #1
 8001198:	601a      	str	r2, [r3, #0]

  /* Peripheral clock enable */
  __HAL_RCC_FMC_CLK_ENABLE();
 800119a:	4b41      	ldr	r3, [pc, #260]	; (80012a0 <HAL_FMC_MspInit+0x128>)
 800119c:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 80011a0:	4a3f      	ldr	r2, [pc, #252]	; (80012a0 <HAL_FMC_MspInit+0x128>)
 80011a2:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80011a6:	f8c2 30d4 	str.w	r3, [r2, #212]	; 0xd4
 80011aa:	4b3d      	ldr	r3, [pc, #244]	; (80012a0 <HAL_FMC_MspInit+0x128>)
 80011ac:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 80011b0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80011b4:	603b      	str	r3, [r7, #0]
 80011b6:	683b      	ldr	r3, [r7, #0]
  PG15   ------> FMC_SDNCAS
  PE0   ------> FMC_NBL0
  PE1   ------> FMC_NBL1
  */
  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 80011b8:	f64f 033f 	movw	r3, #63551	; 0xf83f
 80011bc:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_11|GPIO_PIN_12
                          |GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011be:	2302      	movs	r3, #2
 80011c0:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011c2:	2300      	movs	r3, #0
 80011c4:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80011c6:	2303      	movs	r3, #3
 80011c8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80011ca:	230c      	movs	r3, #12
 80011cc:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80011ce:	1d3b      	adds	r3, r7, #4
 80011d0:	4619      	mov	r1, r3
 80011d2:	4834      	ldr	r0, [pc, #208]	; (80012a4 <HAL_FMC_MspInit+0x12c>)
 80011d4:	f003 fbb4 	bl	8004940 <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = GPIO_PIN_7;
 80011d8:	2380      	movs	r3, #128	; 0x80
 80011da:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011dc:	2302      	movs	r3, #2
 80011de:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011e0:	2300      	movs	r3, #0
 80011e2:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80011e4:	2303      	movs	r3, #3
 80011e6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80011e8:	230c      	movs	r3, #12
 80011ea:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80011ec:	1d3b      	adds	r3, r7, #4
 80011ee:	4619      	mov	r1, r3
 80011f0:	482d      	ldr	r0, [pc, #180]	; (80012a8 <HAL_FMC_MspInit+0x130>)
 80011f2:	f003 fba5 	bl	8004940 <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 80011f6:	2330      	movs	r3, #48	; 0x30
 80011f8:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011fa:	2302      	movs	r3, #2
 80011fc:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011fe:	2300      	movs	r3, #0
 8001200:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001202:	2303      	movs	r3, #3
 8001204:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8001206:	230c      	movs	r3, #12
 8001208:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800120a:	1d3b      	adds	r3, r7, #4
 800120c:	4619      	mov	r1, r3
 800120e:	4827      	ldr	r0, [pc, #156]	; (80012ac <HAL_FMC_MspInit+0x134>)
 8001210:	f003 fb96 	bl	8004940 <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_4
 8001214:	f248 5337 	movw	r3, #34103	; 0x8537
 8001218:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_5|GPIO_PIN_8|GPIO_PIN_10|GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800121a:	2302      	movs	r3, #2
 800121c:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800121e:	2300      	movs	r3, #0
 8001220:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001222:	2303      	movs	r3, #3
 8001224:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8001226:	230c      	movs	r3, #12
 8001228:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800122a:	1d3b      	adds	r3, r7, #4
 800122c:	4619      	mov	r1, r3
 800122e:	4820      	ldr	r0, [pc, #128]	; (80012b0 <HAL_FMC_MspInit+0x138>)
 8001230:	f003 fb86 	bl	8004940 <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10
 8001234:	f64f 7383 	movw	r3, #65411	; 0xff83
 8001238:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14
                          |GPIO_PIN_15|GPIO_PIN_0|GPIO_PIN_1;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800123a:	2302      	movs	r3, #2
 800123c:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800123e:	2300      	movs	r3, #0
 8001240:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001242:	2303      	movs	r3, #3
 8001244:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8001246:	230c      	movs	r3, #12
 8001248:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800124a:	1d3b      	adds	r3, r7, #4
 800124c:	4619      	mov	r1, r3
 800124e:	4819      	ldr	r0, [pc, #100]	; (80012b4 <HAL_FMC_MspInit+0x13c>)
 8001250:	f003 fb76 	bl	8004940 <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_14
 8001254:	f24c 7333 	movw	r3, #50995	; 0xc733
 8001258:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_15|GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_4
                          |GPIO_PIN_5;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800125a:	2302      	movs	r3, #2
 800125c:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800125e:	2300      	movs	r3, #0
 8001260:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001262:	2303      	movs	r3, #3
 8001264:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8001266:	230c      	movs	r3, #12
 8001268:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800126a:	1d3b      	adds	r3, r7, #4
 800126c:	4619      	mov	r1, r3
 800126e:	4812      	ldr	r0, [pc, #72]	; (80012b8 <HAL_FMC_MspInit+0x140>)
 8001270:	f003 fb66 	bl	8004940 <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = GPIO_PIN_7;
 8001274:	2380      	movs	r3, #128	; 0x80
 8001276:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001278:	2302      	movs	r3, #2
 800127a:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800127c:	2300      	movs	r3, #0
 800127e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001280:	2303      	movs	r3, #3
 8001282:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF9_FMC;
 8001284:	2309      	movs	r3, #9
 8001286:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001288:	1d3b      	adds	r3, r7, #4
 800128a:	4619      	mov	r1, r3
 800128c:	4807      	ldr	r0, [pc, #28]	; (80012ac <HAL_FMC_MspInit+0x134>)
 800128e:	f003 fb57 	bl	8004940 <HAL_GPIO_Init>
 8001292:	e000      	b.n	8001296 <HAL_FMC_MspInit+0x11e>
    return;
 8001294:	bf00      	nop

  /* USER CODE BEGIN FMC_MspInit 1 */

  /* USER CODE END FMC_MspInit 1 */
}
 8001296:	3718      	adds	r7, #24
 8001298:	46bd      	mov	sp, r7
 800129a:	bd80      	pop	{r7, pc}
 800129c:	24000664 	.word	0x24000664
 80012a0:	58024400 	.word	0x58024400
 80012a4:	58021400 	.word	0x58021400
 80012a8:	58020000 	.word	0x58020000
 80012ac:	58020800 	.word	0x58020800
 80012b0:	58021800 	.word	0x58021800
 80012b4:	58021000 	.word	0x58021000
 80012b8:	58020c00 	.word	0x58020c00

080012bc <HAL_SRAM_MspInit>:

void HAL_SRAM_MspInit(SRAM_HandleTypeDef* sramHandle){
 80012bc:	b580      	push	{r7, lr}
 80012be:	b082      	sub	sp, #8
 80012c0:	af00      	add	r7, sp, #0
 80012c2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SRAM_MspInit 0 */

  /* USER CODE END SRAM_MspInit 0 */
  HAL_FMC_MspInit();
 80012c4:	f7ff ff58 	bl	8001178 <HAL_FMC_MspInit>
  /* USER CODE BEGIN SRAM_MspInit 1 */

  /* USER CODE END SRAM_MspInit 1 */
}
 80012c8:	bf00      	nop
 80012ca:	3708      	adds	r7, #8
 80012cc:	46bd      	mov	sp, r7
 80012ce:	bd80      	pop	{r7, pc}

080012d0 <HAL_SDRAM_MspInit>:

void HAL_SDRAM_MspInit(SDRAM_HandleTypeDef* sdramHandle){
 80012d0:	b580      	push	{r7, lr}
 80012d2:	b082      	sub	sp, #8
 80012d4:	af00      	add	r7, sp, #0
 80012d6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SDRAM_MspInit 0 */

  /* USER CODE END SDRAM_MspInit 0 */
  HAL_FMC_MspInit();
 80012d8:	f7ff ff4e 	bl	8001178 <HAL_FMC_MspInit>
  /* USER CODE BEGIN SDRAM_MspInit 1 */

  /* USER CODE END SDRAM_MspInit 1 */
}
 80012dc:	bf00      	nop
 80012de:	3708      	adds	r7, #8
 80012e0:	46bd      	mov	sp, r7
 80012e2:	bd80      	pop	{r7, pc}

080012e4 <MX_GPIO_Init>:
/** Configure pins
     PH0-OSC_IN (PH0)   ------> RCC_OSC_IN
     PH1-OSC_OUT (PH1)   ------> RCC_OSC_OUT
*/
void MX_GPIO_Init(void)
{
 80012e4:	b580      	push	{r7, lr}
 80012e6:	b08e      	sub	sp, #56	; 0x38
 80012e8:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012ea:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80012ee:	2200      	movs	r2, #0
 80012f0:	601a      	str	r2, [r3, #0]
 80012f2:	605a      	str	r2, [r3, #4]
 80012f4:	609a      	str	r2, [r3, #8]
 80012f6:	60da      	str	r2, [r3, #12]
 80012f8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80012fa:	4b69      	ldr	r3, [pc, #420]	; (80014a0 <MX_GPIO_Init+0x1bc>)
 80012fc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001300:	4a67      	ldr	r2, [pc, #412]	; (80014a0 <MX_GPIO_Init+0x1bc>)
 8001302:	f043 0310 	orr.w	r3, r3, #16
 8001306:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800130a:	4b65      	ldr	r3, [pc, #404]	; (80014a0 <MX_GPIO_Init+0x1bc>)
 800130c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001310:	f003 0310 	and.w	r3, r3, #16
 8001314:	623b      	str	r3, [r7, #32]
 8001316:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8001318:	4b61      	ldr	r3, [pc, #388]	; (80014a0 <MX_GPIO_Init+0x1bc>)
 800131a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800131e:	4a60      	ldr	r2, [pc, #384]	; (80014a0 <MX_GPIO_Init+0x1bc>)
 8001320:	f043 0320 	orr.w	r3, r3, #32
 8001324:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001328:	4b5d      	ldr	r3, [pc, #372]	; (80014a0 <MX_GPIO_Init+0x1bc>)
 800132a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800132e:	f003 0320 	and.w	r3, r3, #32
 8001332:	61fb      	str	r3, [r7, #28]
 8001334:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001336:	4b5a      	ldr	r3, [pc, #360]	; (80014a0 <MX_GPIO_Init+0x1bc>)
 8001338:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800133c:	4a58      	ldr	r2, [pc, #352]	; (80014a0 <MX_GPIO_Init+0x1bc>)
 800133e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001342:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001346:	4b56      	ldr	r3, [pc, #344]	; (80014a0 <MX_GPIO_Init+0x1bc>)
 8001348:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800134c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001350:	61bb      	str	r3, [r7, #24]
 8001352:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001354:	4b52      	ldr	r3, [pc, #328]	; (80014a0 <MX_GPIO_Init+0x1bc>)
 8001356:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800135a:	4a51      	ldr	r2, [pc, #324]	; (80014a0 <MX_GPIO_Init+0x1bc>)
 800135c:	f043 0304 	orr.w	r3, r3, #4
 8001360:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001364:	4b4e      	ldr	r3, [pc, #312]	; (80014a0 <MX_GPIO_Init+0x1bc>)
 8001366:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800136a:	f003 0304 	and.w	r3, r3, #4
 800136e:	617b      	str	r3, [r7, #20]
 8001370:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001372:	4b4b      	ldr	r3, [pc, #300]	; (80014a0 <MX_GPIO_Init+0x1bc>)
 8001374:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001378:	4a49      	ldr	r2, [pc, #292]	; (80014a0 <MX_GPIO_Init+0x1bc>)
 800137a:	f043 0301 	orr.w	r3, r3, #1
 800137e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001382:	4b47      	ldr	r3, [pc, #284]	; (80014a0 <MX_GPIO_Init+0x1bc>)
 8001384:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001388:	f003 0301 	and.w	r3, r3, #1
 800138c:	613b      	str	r3, [r7, #16]
 800138e:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001390:	4b43      	ldr	r3, [pc, #268]	; (80014a0 <MX_GPIO_Init+0x1bc>)
 8001392:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001396:	4a42      	ldr	r2, [pc, #264]	; (80014a0 <MX_GPIO_Init+0x1bc>)
 8001398:	f043 0302 	orr.w	r3, r3, #2
 800139c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80013a0:	4b3f      	ldr	r3, [pc, #252]	; (80014a0 <MX_GPIO_Init+0x1bc>)
 80013a2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80013a6:	f003 0302 	and.w	r3, r3, #2
 80013aa:	60fb      	str	r3, [r7, #12]
 80013ac:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80013ae:	4b3c      	ldr	r3, [pc, #240]	; (80014a0 <MX_GPIO_Init+0x1bc>)
 80013b0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80013b4:	4a3a      	ldr	r2, [pc, #232]	; (80014a0 <MX_GPIO_Init+0x1bc>)
 80013b6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80013ba:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80013be:	4b38      	ldr	r3, [pc, #224]	; (80014a0 <MX_GPIO_Init+0x1bc>)
 80013c0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80013c4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80013c8:	60bb      	str	r3, [r7, #8]
 80013ca:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80013cc:	4b34      	ldr	r3, [pc, #208]	; (80014a0 <MX_GPIO_Init+0x1bc>)
 80013ce:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80013d2:	4a33      	ldr	r2, [pc, #204]	; (80014a0 <MX_GPIO_Init+0x1bc>)
 80013d4:	f043 0308 	orr.w	r3, r3, #8
 80013d8:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80013dc:	4b30      	ldr	r3, [pc, #192]	; (80014a0 <MX_GPIO_Init+0x1bc>)
 80013de:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80013e2:	f003 0308 	and.w	r3, r3, #8
 80013e6:	607b      	str	r3, [r7, #4]
 80013e8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(MotionnCs_GPIO_Port, MotionnCs_Pin, GPIO_PIN_SET);
 80013ea:	2201      	movs	r2, #1
 80013ec:	2104      	movs	r1, #4
 80013ee:	482d      	ldr	r0, [pc, #180]	; (80014a4 <MX_GPIO_Init+0x1c0>)
 80013f0:	f003 fc6e 	bl	8004cd0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPI4_nCS_GPIO_Port, SPI4_nCS_Pin, GPIO_PIN_SET);
 80013f4:	2201      	movs	r2, #1
 80013f6:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80013fa:	482b      	ldr	r0, [pc, #172]	; (80014a8 <MX_GPIO_Init+0x1c4>)
 80013fc:	f003 fc68 	bl	8004cd0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPI6_nCS_GPIO_Port, SPI6_nCS_Pin, GPIO_PIN_SET);
 8001400:	2201      	movs	r2, #1
 8001402:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001406:	4829      	ldr	r0, [pc, #164]	; (80014ac <MX_GPIO_Init+0x1c8>)
 8001408:	f003 fc62 	bl	8004cd0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = MotionnCs_Pin;
 800140c:	2304      	movs	r3, #4
 800140e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001410:	2301      	movs	r3, #1
 8001412:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001414:	2300      	movs	r3, #0
 8001416:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001418:	2300      	movs	r3, #0
 800141a:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(MotionnCs_GPIO_Port, &GPIO_InitStruct);
 800141c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001420:	4619      	mov	r1, r3
 8001422:	4820      	ldr	r0, [pc, #128]	; (80014a4 <MX_GPIO_Init+0x1c0>)
 8001424:	f003 fa8c 	bl	8004940 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = SPI4_nCS_Pin;
 8001428:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800142c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800142e:	2301      	movs	r3, #1
 8001430:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001432:	2300      	movs	r3, #0
 8001434:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001436:	2300      	movs	r3, #0
 8001438:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(SPI4_nCS_GPIO_Port, &GPIO_InitStruct);
 800143a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800143e:	4619      	mov	r1, r3
 8001440:	4819      	ldr	r0, [pc, #100]	; (80014a8 <MX_GPIO_Init+0x1c4>)
 8001442:	f003 fa7d 	bl	8004940 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = SDCardnDet_Pin;
 8001446:	f44f 7380 	mov.w	r3, #256	; 0x100
 800144a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800144c:	2300      	movs	r3, #0
 800144e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001450:	2300      	movs	r3, #0
 8001452:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(SDCardnDet_GPIO_Port, &GPIO_InitStruct);
 8001454:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001458:	4619      	mov	r1, r3
 800145a:	4815      	ldr	r0, [pc, #84]	; (80014b0 <MX_GPIO_Init+0x1cc>)
 800145c:	f003 fa70 	bl	8004940 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = TOUCH_IRQ_Pin;
 8001460:	2308      	movs	r3, #8
 8001462:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001464:	4b13      	ldr	r3, [pc, #76]	; (80014b4 <MX_GPIO_Init+0x1d0>)
 8001466:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001468:	2300      	movs	r3, #0
 800146a:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(TOUCH_IRQ_GPIO_Port, &GPIO_InitStruct);
 800146c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001470:	4619      	mov	r1, r3
 8001472:	480d      	ldr	r0, [pc, #52]	; (80014a8 <MX_GPIO_Init+0x1c4>)
 8001474:	f003 fa64 	bl	8004940 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = SPI6_nCS_Pin;
 8001478:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800147c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800147e:	2301      	movs	r3, #1
 8001480:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001482:	2300      	movs	r3, #0
 8001484:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001486:	2300      	movs	r3, #0
 8001488:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(SPI6_nCS_GPIO_Port, &GPIO_InitStruct);
 800148a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800148e:	4619      	mov	r1, r3
 8001490:	4806      	ldr	r0, [pc, #24]	; (80014ac <MX_GPIO_Init+0x1c8>)
 8001492:	f003 fa55 	bl	8004940 <HAL_GPIO_Init>

}
 8001496:	bf00      	nop
 8001498:	3738      	adds	r7, #56	; 0x38
 800149a:	46bd      	mov	sp, r7
 800149c:	bd80      	pop	{r7, pc}
 800149e:	bf00      	nop
 80014a0:	58024400 	.word	0x58024400
 80014a4:	58020400 	.word	0x58020400
 80014a8:	58020c00 	.word	0x58020c00
 80014ac:	58021800 	.word	0x58021800
 80014b0:	58020000 	.word	0x58020000
 80014b4:	11210000 	.word	0x11210000

080014b8 <MX_I2C2_Init>:

I2C_HandleTypeDef hi2c2;

/* I2C2 init function */
void MX_I2C2_Init(void)
{
 80014b8:	b580      	push	{r7, lr}
 80014ba:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 80014bc:	4b1b      	ldr	r3, [pc, #108]	; (800152c <MX_I2C2_Init+0x74>)
 80014be:	4a1c      	ldr	r2, [pc, #112]	; (8001530 <MX_I2C2_Init+0x78>)
 80014c0:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x00B03FDB;
 80014c2:	4b1a      	ldr	r3, [pc, #104]	; (800152c <MX_I2C2_Init+0x74>)
 80014c4:	4a1b      	ldr	r2, [pc, #108]	; (8001534 <MX_I2C2_Init+0x7c>)
 80014c6:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 80014c8:	4b18      	ldr	r3, [pc, #96]	; (800152c <MX_I2C2_Init+0x74>)
 80014ca:	2200      	movs	r2, #0
 80014cc:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80014ce:	4b17      	ldr	r3, [pc, #92]	; (800152c <MX_I2C2_Init+0x74>)
 80014d0:	2201      	movs	r2, #1
 80014d2:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80014d4:	4b15      	ldr	r3, [pc, #84]	; (800152c <MX_I2C2_Init+0x74>)
 80014d6:	2200      	movs	r2, #0
 80014d8:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 80014da:	4b14      	ldr	r3, [pc, #80]	; (800152c <MX_I2C2_Init+0x74>)
 80014dc:	2200      	movs	r2, #0
 80014de:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80014e0:	4b12      	ldr	r3, [pc, #72]	; (800152c <MX_I2C2_Init+0x74>)
 80014e2:	2200      	movs	r2, #0
 80014e4:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80014e6:	4b11      	ldr	r3, [pc, #68]	; (800152c <MX_I2C2_Init+0x74>)
 80014e8:	2200      	movs	r2, #0
 80014ea:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80014ec:	4b0f      	ldr	r3, [pc, #60]	; (800152c <MX_I2C2_Init+0x74>)
 80014ee:	2200      	movs	r2, #0
 80014f0:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 80014f2:	480e      	ldr	r0, [pc, #56]	; (800152c <MX_I2C2_Init+0x74>)
 80014f4:	f003 fc06 	bl	8004d04 <HAL_I2C_Init>
 80014f8:	4603      	mov	r3, r0
 80014fa:	2b00      	cmp	r3, #0
 80014fc:	d001      	beq.n	8001502 <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 80014fe:	f000 fa13 	bl	8001928 <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001502:	2100      	movs	r1, #0
 8001504:	4809      	ldr	r0, [pc, #36]	; (800152c <MX_I2C2_Init+0x74>)
 8001506:	f004 f857 	bl	80055b8 <HAL_I2CEx_ConfigAnalogFilter>
 800150a:	4603      	mov	r3, r0
 800150c:	2b00      	cmp	r3, #0
 800150e:	d001      	beq.n	8001514 <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 8001510:	f000 fa0a 	bl	8001928 <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 8001514:	2100      	movs	r1, #0
 8001516:	4805      	ldr	r0, [pc, #20]	; (800152c <MX_I2C2_Init+0x74>)
 8001518:	f004 f899 	bl	800564e <HAL_I2CEx_ConfigDigitalFilter>
 800151c:	4603      	mov	r3, r0
 800151e:	2b00      	cmp	r3, #0
 8001520:	d001      	beq.n	8001526 <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 8001522:	f000 fa01 	bl	8001928 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8001526:	bf00      	nop
 8001528:	bd80      	pop	{r7, pc}
 800152a:	bf00      	nop
 800152c:	24000668 	.word	0x24000668
 8001530:	40005800 	.word	0x40005800
 8001534:	00b03fdb 	.word	0x00b03fdb

08001538 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8001538:	b580      	push	{r7, lr}
 800153a:	b0b8      	sub	sp, #224	; 0xe0
 800153c:	af00      	add	r7, sp, #0
 800153e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001540:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8001544:	2200      	movs	r2, #0
 8001546:	601a      	str	r2, [r3, #0]
 8001548:	605a      	str	r2, [r3, #4]
 800154a:	609a      	str	r2, [r3, #8]
 800154c:	60da      	str	r2, [r3, #12]
 800154e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001550:	f107 0310 	add.w	r3, r7, #16
 8001554:	22bc      	movs	r2, #188	; 0xbc
 8001556:	2100      	movs	r1, #0
 8001558:	4618      	mov	r0, r3
 800155a:	f012 fa35 	bl	80139c8 <memset>
  if(i2cHandle->Instance==I2C2)
 800155e:	687b      	ldr	r3, [r7, #4]
 8001560:	681b      	ldr	r3, [r3, #0]
 8001562:	4a25      	ldr	r2, [pc, #148]	; (80015f8 <HAL_I2C_MspInit+0xc0>)
 8001564:	4293      	cmp	r3, r2
 8001566:	d142      	bne.n	80015ee <HAL_I2C_MspInit+0xb6>
  /* USER CODE BEGIN I2C2_MspInit 0 */

  /* USER CODE END I2C2_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 8001568:	2308      	movs	r3, #8
 800156a:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.I2c123ClockSelection = RCC_I2C123CLKSOURCE_D2PCLK1;
 800156c:	2300      	movs	r3, #0
 800156e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001572:	f107 0310 	add.w	r3, r7, #16
 8001576:	4618      	mov	r0, r3
 8001578:	f006 fb7e 	bl	8007c78 <HAL_RCCEx_PeriphCLKConfig>
 800157c:	4603      	mov	r3, r0
 800157e:	2b00      	cmp	r3, #0
 8001580:	d001      	beq.n	8001586 <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 8001582:	f000 f9d1 	bl	8001928 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001586:	4b1d      	ldr	r3, [pc, #116]	; (80015fc <HAL_I2C_MspInit+0xc4>)
 8001588:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800158c:	4a1b      	ldr	r2, [pc, #108]	; (80015fc <HAL_I2C_MspInit+0xc4>)
 800158e:	f043 0302 	orr.w	r3, r3, #2
 8001592:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001596:	4b19      	ldr	r3, [pc, #100]	; (80015fc <HAL_I2C_MspInit+0xc4>)
 8001598:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800159c:	f003 0302 	and.w	r3, r3, #2
 80015a0:	60fb      	str	r3, [r7, #12]
 80015a2:	68fb      	ldr	r3, [r7, #12]
    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 80015a4:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 80015a8:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80015ac:	2312      	movs	r3, #18
 80015ae:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80015b2:	2301      	movs	r3, #1
 80015b4:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015b8:	2300      	movs	r3, #0
 80015ba:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 80015be:	2304      	movs	r3, #4
 80015c0:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80015c4:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 80015c8:	4619      	mov	r1, r3
 80015ca:	480d      	ldr	r0, [pc, #52]	; (8001600 <HAL_I2C_MspInit+0xc8>)
 80015cc:	f003 f9b8 	bl	8004940 <HAL_GPIO_Init>

    /* I2C2 clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 80015d0:	4b0a      	ldr	r3, [pc, #40]	; (80015fc <HAL_I2C_MspInit+0xc4>)
 80015d2:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80015d6:	4a09      	ldr	r2, [pc, #36]	; (80015fc <HAL_I2C_MspInit+0xc4>)
 80015d8:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80015dc:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 80015e0:	4b06      	ldr	r3, [pc, #24]	; (80015fc <HAL_I2C_MspInit+0xc4>)
 80015e2:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80015e6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80015ea:	60bb      	str	r3, [r7, #8]
 80015ec:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }
}
 80015ee:	bf00      	nop
 80015f0:	37e0      	adds	r7, #224	; 0xe0
 80015f2:	46bd      	mov	sp, r7
 80015f4:	bd80      	pop	{r7, pc}
 80015f6:	bf00      	nop
 80015f8:	40005800 	.word	0x40005800
 80015fc:	58024400 	.word	0x58024400
 8001600:	58020400 	.word	0x58020400

08001604 <MX_I2S2_Init>:

I2S_HandleTypeDef hi2s2;

/* I2S2 init function */
void MX_I2S2_Init(void)
{
 8001604:	b580      	push	{r7, lr}
 8001606:	af00      	add	r7, sp, #0
  /* USER CODE END I2S2_Init 0 */

  /* USER CODE BEGIN I2S2_Init 1 */

  /* USER CODE END I2S2_Init 1 */
  hi2s2.Instance = SPI2;
 8001608:	4b15      	ldr	r3, [pc, #84]	; (8001660 <MX_I2S2_Init+0x5c>)
 800160a:	4a16      	ldr	r2, [pc, #88]	; (8001664 <MX_I2S2_Init+0x60>)
 800160c:	601a      	str	r2, [r3, #0]
  hi2s2.Init.Mode = I2S_MODE_MASTER_FULLDUPLEX;
 800160e:	4b14      	ldr	r3, [pc, #80]	; (8001660 <MX_I2S2_Init+0x5c>)
 8001610:	220a      	movs	r2, #10
 8001612:	605a      	str	r2, [r3, #4]
  hi2s2.Init.Standard = I2S_STANDARD_PHILIPS;
 8001614:	4b12      	ldr	r3, [pc, #72]	; (8001660 <MX_I2S2_Init+0x5c>)
 8001616:	2200      	movs	r2, #0
 8001618:	609a      	str	r2, [r3, #8]
  hi2s2.Init.DataFormat = I2S_DATAFORMAT_16B;
 800161a:	4b11      	ldr	r3, [pc, #68]	; (8001660 <MX_I2S2_Init+0x5c>)
 800161c:	2200      	movs	r2, #0
 800161e:	60da      	str	r2, [r3, #12]
  hi2s2.Init.MCLKOutput = I2S_MCLKOUTPUT_DISABLE;
 8001620:	4b0f      	ldr	r3, [pc, #60]	; (8001660 <MX_I2S2_Init+0x5c>)
 8001622:	2200      	movs	r2, #0
 8001624:	611a      	str	r2, [r3, #16]
  hi2s2.Init.AudioFreq = I2S_AUDIOFREQ_48K;
 8001626:	4b0e      	ldr	r3, [pc, #56]	; (8001660 <MX_I2S2_Init+0x5c>)
 8001628:	f64b 3280 	movw	r2, #48000	; 0xbb80
 800162c:	615a      	str	r2, [r3, #20]
  hi2s2.Init.CPOL = I2S_CPOL_LOW;
 800162e:	4b0c      	ldr	r3, [pc, #48]	; (8001660 <MX_I2S2_Init+0x5c>)
 8001630:	2200      	movs	r2, #0
 8001632:	619a      	str	r2, [r3, #24]
  hi2s2.Init.FirstBit = I2S_FIRSTBIT_MSB;
 8001634:	4b0a      	ldr	r3, [pc, #40]	; (8001660 <MX_I2S2_Init+0x5c>)
 8001636:	2200      	movs	r2, #0
 8001638:	61da      	str	r2, [r3, #28]
  hi2s2.Init.WSInversion = I2S_WS_INVERSION_DISABLE;
 800163a:	4b09      	ldr	r3, [pc, #36]	; (8001660 <MX_I2S2_Init+0x5c>)
 800163c:	2200      	movs	r2, #0
 800163e:	621a      	str	r2, [r3, #32]
  hi2s2.Init.Data24BitAlignment = I2S_DATA_24BIT_ALIGNMENT_RIGHT;
 8001640:	4b07      	ldr	r3, [pc, #28]	; (8001660 <MX_I2S2_Init+0x5c>)
 8001642:	2200      	movs	r2, #0
 8001644:	625a      	str	r2, [r3, #36]	; 0x24
  hi2s2.Init.MasterKeepIOState = I2S_MASTER_KEEP_IO_STATE_DISABLE;
 8001646:	4b06      	ldr	r3, [pc, #24]	; (8001660 <MX_I2S2_Init+0x5c>)
 8001648:	2200      	movs	r2, #0
 800164a:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_I2S_Init(&hi2s2) != HAL_OK)
 800164c:	4804      	ldr	r0, [pc, #16]	; (8001660 <MX_I2S2_Init+0x5c>)
 800164e:	f004 f84b 	bl	80056e8 <HAL_I2S_Init>
 8001652:	4603      	mov	r3, r0
 8001654:	2b00      	cmp	r3, #0
 8001656:	d001      	beq.n	800165c <MX_I2S2_Init+0x58>
  {
    Error_Handler();
 8001658:	f000 f966 	bl	8001928 <Error_Handler>
  }
  /* USER CODE BEGIN I2S2_Init 2 */

  /* USER CODE END I2S2_Init 2 */

}
 800165c:	bf00      	nop
 800165e:	bd80      	pop	{r7, pc}
 8001660:	240006b4 	.word	0x240006b4
 8001664:	40003800 	.word	0x40003800

08001668 <HAL_I2S_MspInit>:

void HAL_I2S_MspInit(I2S_HandleTypeDef* i2sHandle)
{
 8001668:	b580      	push	{r7, lr}
 800166a:	b0ba      	sub	sp, #232	; 0xe8
 800166c:	af00      	add	r7, sp, #0
 800166e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001670:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8001674:	2200      	movs	r2, #0
 8001676:	601a      	str	r2, [r3, #0]
 8001678:	605a      	str	r2, [r3, #4]
 800167a:	609a      	str	r2, [r3, #8]
 800167c:	60da      	str	r2, [r3, #12]
 800167e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001680:	f107 0318 	add.w	r3, r7, #24
 8001684:	22bc      	movs	r2, #188	; 0xbc
 8001686:	2100      	movs	r1, #0
 8001688:	4618      	mov	r0, r3
 800168a:	f012 f99d 	bl	80139c8 <memset>
  if(i2sHandle->Instance==SPI2)
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	681b      	ldr	r3, [r3, #0]
 8001692:	4a41      	ldr	r2, [pc, #260]	; (8001798 <HAL_I2S_MspInit+0x130>)
 8001694:	4293      	cmp	r3, r2
 8001696:	d17b      	bne.n	8001790 <HAL_I2S_MspInit+0x128>
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI2;
 8001698:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800169c:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_PLL;
 800169e:	2300      	movs	r3, #0
 80016a0:	677b      	str	r3, [r7, #116]	; 0x74
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80016a2:	f107 0318 	add.w	r3, r7, #24
 80016a6:	4618      	mov	r0, r3
 80016a8:	f006 fae6 	bl	8007c78 <HAL_RCCEx_PeriphCLKConfig>
 80016ac:	4603      	mov	r3, r0
 80016ae:	2b00      	cmp	r3, #0
 80016b0:	d001      	beq.n	80016b6 <HAL_I2S_MspInit+0x4e>
    {
      Error_Handler();
 80016b2:	f000 f939 	bl	8001928 <Error_Handler>
    }

    /* I2S2 clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 80016b6:	4b39      	ldr	r3, [pc, #228]	; (800179c <HAL_I2S_MspInit+0x134>)
 80016b8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80016bc:	4a37      	ldr	r2, [pc, #220]	; (800179c <HAL_I2S_MspInit+0x134>)
 80016be:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80016c2:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 80016c6:	4b35      	ldr	r3, [pc, #212]	; (800179c <HAL_I2S_MspInit+0x134>)
 80016c8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80016cc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80016d0:	617b      	str	r3, [r7, #20]
 80016d2:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80016d4:	4b31      	ldr	r3, [pc, #196]	; (800179c <HAL_I2S_MspInit+0x134>)
 80016d6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80016da:	4a30      	ldr	r2, [pc, #192]	; (800179c <HAL_I2S_MspInit+0x134>)
 80016dc:	f043 0304 	orr.w	r3, r3, #4
 80016e0:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80016e4:	4b2d      	ldr	r3, [pc, #180]	; (800179c <HAL_I2S_MspInit+0x134>)
 80016e6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80016ea:	f003 0304 	and.w	r3, r3, #4
 80016ee:	613b      	str	r3, [r7, #16]
 80016f0:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80016f2:	4b2a      	ldr	r3, [pc, #168]	; (800179c <HAL_I2S_MspInit+0x134>)
 80016f4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80016f8:	4a28      	ldr	r2, [pc, #160]	; (800179c <HAL_I2S_MspInit+0x134>)
 80016fa:	f043 0302 	orr.w	r3, r3, #2
 80016fe:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001702:	4b26      	ldr	r3, [pc, #152]	; (800179c <HAL_I2S_MspInit+0x134>)
 8001704:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001708:	f003 0302 	and.w	r3, r3, #2
 800170c:	60fb      	str	r3, [r7, #12]
 800170e:	68fb      	ldr	r3, [r7, #12]
    PC2_C     ------> I2S2_SDI
    PC3_C     ------> I2S2_SDO
    PB12     ------> I2S2_WS
    PB13     ------> I2S2_CK
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8001710:	2304      	movs	r3, #4
 8001712:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001716:	2302      	movs	r3, #2
 8001718:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800171c:	2300      	movs	r3, #0
 800171e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001722:	2300      	movs	r3, #0
 8001724:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001728:	2305      	movs	r3, #5
 800172a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800172e:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8001732:	4619      	mov	r1, r3
 8001734:	481a      	ldr	r0, [pc, #104]	; (80017a0 <HAL_I2S_MspInit+0x138>)
 8001736:	f003 f903 	bl	8004940 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 800173a:	2308      	movs	r3, #8
 800173c:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001740:	2302      	movs	r3, #2
 8001742:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001746:	2300      	movs	r3, #0
 8001748:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800174c:	2303      	movs	r3, #3
 800174e:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001752:	2305      	movs	r3, #5
 8001754:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001758:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 800175c:	4619      	mov	r1, r3
 800175e:	4810      	ldr	r0, [pc, #64]	; (80017a0 <HAL_I2S_MspInit+0x138>)
 8001760:	f003 f8ee 	bl	8004940 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13;
 8001764:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 8001768:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800176c:	2302      	movs	r3, #2
 800176e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001772:	2300      	movs	r3, #0
 8001774:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001778:	2300      	movs	r3, #0
 800177a:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800177e:	2305      	movs	r3, #5
 8001780:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001784:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8001788:	4619      	mov	r1, r3
 800178a:	4806      	ldr	r0, [pc, #24]	; (80017a4 <HAL_I2S_MspInit+0x13c>)
 800178c:	f003 f8d8 	bl	8004940 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }
}
 8001790:	bf00      	nop
 8001792:	37e8      	adds	r7, #232	; 0xe8
 8001794:	46bd      	mov	sp, r7
 8001796:	bd80      	pop	{r7, pc}
 8001798:	40003800 	.word	0x40003800
 800179c:	58024400 	.word	0x58024400
 80017a0:	58020800 	.word	0x58020800
 80017a4:	58020400 	.word	0x58020400

080017a8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80017a8:	b580      	push	{r7, lr}
 80017aa:	b09c      	sub	sp, #112	; 0x70
 80017ac:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80017ae:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80017b2:	224c      	movs	r2, #76	; 0x4c
 80017b4:	2100      	movs	r1, #0
 80017b6:	4618      	mov	r0, r3
 80017b8:	f012 f906 	bl	80139c8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80017bc:	1d3b      	adds	r3, r7, #4
 80017be:	2220      	movs	r2, #32
 80017c0:	2100      	movs	r1, #0
 80017c2:	4618      	mov	r0, r3
 80017c4:	f012 f900 	bl	80139c8 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 80017c8:	2002      	movs	r0, #2
 80017ca:	f005 fa71 	bl	8006cb0 <HAL_PWREx_ConfigSupply>
  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 80017ce:	2300      	movs	r3, #0
 80017d0:	603b      	str	r3, [r7, #0]
 80017d2:	4b37      	ldr	r3, [pc, #220]	; (80018b0 <SystemClock_Config+0x108>)
 80017d4:	699b      	ldr	r3, [r3, #24]
 80017d6:	4a36      	ldr	r2, [pc, #216]	; (80018b0 <SystemClock_Config+0x108>)
 80017d8:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80017dc:	6193      	str	r3, [r2, #24]
 80017de:	4b34      	ldr	r3, [pc, #208]	; (80018b0 <SystemClock_Config+0x108>)
 80017e0:	699b      	ldr	r3, [r3, #24]
 80017e2:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80017e6:	603b      	str	r3, [r7, #0]
 80017e8:	4b32      	ldr	r3, [pc, #200]	; (80018b4 <SystemClock_Config+0x10c>)
 80017ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80017ec:	4a31      	ldr	r2, [pc, #196]	; (80018b4 <SystemClock_Config+0x10c>)
 80017ee:	f043 0301 	orr.w	r3, r3, #1
 80017f2:	62d3      	str	r3, [r2, #44]	; 0x2c
 80017f4:	4b2f      	ldr	r3, [pc, #188]	; (80018b4 <SystemClock_Config+0x10c>)
 80017f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80017f8:	f003 0301 	and.w	r3, r3, #1
 80017fc:	603b      	str	r3, [r7, #0]
 80017fe:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8001800:	bf00      	nop
 8001802:	4b2b      	ldr	r3, [pc, #172]	; (80018b0 <SystemClock_Config+0x108>)
 8001804:	699b      	ldr	r3, [r3, #24]
 8001806:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800180a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800180e:	d1f8      	bne.n	8001802 <SystemClock_Config+0x5a>
  /** Macro to configure the PLL clock source
  */
  __HAL_RCC_PLL_PLLSOURCE_CONFIG(RCC_PLLSOURCE_HSE);
 8001810:	4b29      	ldr	r3, [pc, #164]	; (80018b8 <SystemClock_Config+0x110>)
 8001812:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001814:	f023 0303 	bic.w	r3, r3, #3
 8001818:	4a27      	ldr	r2, [pc, #156]	; (80018b8 <SystemClock_Config+0x110>)
 800181a:	f043 0302 	orr.w	r3, r3, #2
 800181e:	6293      	str	r3, [r2, #40]	; 0x28
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48|RCC_OSCILLATORTYPE_HSI
 8001820:	2323      	movs	r3, #35	; 0x23
 8001822:	627b      	str	r3, [r7, #36]	; 0x24
                              |RCC_OSCILLATORTYPE_HSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001824:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001828:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 800182a:	2301      	movs	r3, #1
 800182c:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800182e:	2340      	movs	r3, #64	; 0x40
 8001830:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 8001832:	2301      	movs	r3, #1
 8001834:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001836:	2302      	movs	r3, #2
 8001838:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800183a:	2302      	movs	r3, #2
 800183c:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 5;
 800183e:	2305      	movs	r3, #5
 8001840:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 192;
 8001842:	23c0      	movs	r3, #192	; 0xc0
 8001844:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 8001846:	2302      	movs	r3, #2
 8001848:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 5;
 800184a:	2305      	movs	r3, #5
 800184c:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 800184e:	2302      	movs	r3, #2
 8001850:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_2;
 8001852:	2308      	movs	r3, #8
 8001854:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8001856:	2300      	movs	r3, #0
 8001858:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 800185a:	2300      	movs	r3, #0
 800185c:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800185e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001862:	4618      	mov	r0, r3
 8001864:	f005 fa6e 	bl	8006d44 <HAL_RCC_OscConfig>
 8001868:	4603      	mov	r3, r0
 800186a:	2b00      	cmp	r3, #0
 800186c:	d001      	beq.n	8001872 <SystemClock_Config+0xca>
  {
    Error_Handler();
 800186e:	f000 f85b 	bl	8001928 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001872:	233f      	movs	r3, #63	; 0x3f
 8001874:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001876:	2303      	movs	r3, #3
 8001878:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 800187a:	2300      	movs	r3, #0
 800187c:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 800187e:	2308      	movs	r3, #8
 8001880:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 8001882:	2340      	movs	r3, #64	; 0x40
 8001884:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8001886:	2340      	movs	r3, #64	; 0x40
 8001888:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 800188a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800188e:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 8001890:	2340      	movs	r3, #64	; 0x40
 8001892:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8001894:	1d3b      	adds	r3, r7, #4
 8001896:	2104      	movs	r1, #4
 8001898:	4618      	mov	r0, r3
 800189a:	f005 fe61 	bl	8007560 <HAL_RCC_ClockConfig>
 800189e:	4603      	mov	r3, r0
 80018a0:	2b00      	cmp	r3, #0
 80018a2:	d001      	beq.n	80018a8 <SystemClock_Config+0x100>
  {
    Error_Handler();
 80018a4:	f000 f840 	bl	8001928 <Error_Handler>
  }
}
 80018a8:	bf00      	nop
 80018aa:	3770      	adds	r7, #112	; 0x70
 80018ac:	46bd      	mov	sp, r7
 80018ae:	bd80      	pop	{r7, pc}
 80018b0:	58024800 	.word	0x58024800
 80018b4:	58000400 	.word	0x58000400
 80018b8:	58024400 	.word	0x58024400

080018bc <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 80018bc:	b580      	push	{r7, lr}
 80018be:	b0b0      	sub	sp, #192	; 0xc0
 80018c0:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80018c2:	1d3b      	adds	r3, r7, #4
 80018c4:	22bc      	movs	r2, #188	; 0xbc
 80018c6:	2100      	movs	r1, #0
 80018c8:	4618      	mov	r0, r3
 80018ca:	f012 f87d 	bl	80139c8 <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_FMC|RCC_PERIPHCLK_FDCAN
 80018ce:	4b15      	ldr	r3, [pc, #84]	; (8001924 <PeriphCommonClock_Config+0x68>)
 80018d0:	607b      	str	r3, [r7, #4]
                              |RCC_PERIPHCLK_CKPER|RCC_PERIPHCLK_TIM;
  PeriphClkInitStruct.PLL2.PLL2M = 2;
 80018d2:	2302      	movs	r3, #2
 80018d4:	60bb      	str	r3, [r7, #8]
  PeriphClkInitStruct.PLL2.PLL2N = 48;
 80018d6:	2330      	movs	r3, #48	; 0x30
 80018d8:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.PLL2.PLL2P = 2;
 80018da:	2302      	movs	r3, #2
 80018dc:	613b      	str	r3, [r7, #16]
  PeriphClkInitStruct.PLL2.PLL2Q = 5;
 80018de:	2305      	movs	r3, #5
 80018e0:	617b      	str	r3, [r7, #20]
  PeriphClkInitStruct.PLL2.PLL2R = 2;
 80018e2:	2302      	movs	r3, #2
 80018e4:	61bb      	str	r3, [r7, #24]
  PeriphClkInitStruct.PLL2.PLL2RGE = RCC_PLL2VCIRANGE_3;
 80018e6:	23c0      	movs	r3, #192	; 0xc0
 80018e8:	61fb      	str	r3, [r7, #28]
  PeriphClkInitStruct.PLL2.PLL2VCOSEL = RCC_PLL2VCOWIDE;
 80018ea:	2300      	movs	r3, #0
 80018ec:	623b      	str	r3, [r7, #32]
  PeriphClkInitStruct.PLL2.PLL2FRACN = 0;
 80018ee:	2300      	movs	r3, #0
 80018f0:	627b      	str	r3, [r7, #36]	; 0x24
  PeriphClkInitStruct.FmcClockSelection = RCC_FMCCLKSOURCE_PLL2;
 80018f2:	2302      	movs	r3, #2
 80018f4:	64bb      	str	r3, [r7, #72]	; 0x48
  PeriphClkInitStruct.CkperClockSelection = RCC_CLKPSOURCE_HSI;
 80018f6:	2300      	movs	r3, #0
 80018f8:	657b      	str	r3, [r7, #84]	; 0x54
  PeriphClkInitStruct.FdcanClockSelection = RCC_FDCANCLKSOURCE_PLL2;
 80018fa:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 80018fe:	673b      	str	r3, [r7, #112]	; 0x70
  PeriphClkInitStruct.TIMPresSelection = RCC_TIMPRES_ACTIVATED;
 8001900:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001904:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc

  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001908:	1d3b      	adds	r3, r7, #4
 800190a:	4618      	mov	r0, r3
 800190c:	f006 f9b4 	bl	8007c78 <HAL_RCCEx_PeriphCLKConfig>
 8001910:	4603      	mov	r3, r0
 8001912:	2b00      	cmp	r3, #0
 8001914:	d001      	beq.n	800191a <PeriphCommonClock_Config+0x5e>
  {
    Error_Handler();
 8001916:	f000 f807 	bl	8001928 <Error_Handler>
  }
}
 800191a:	bf00      	nop
 800191c:	37c0      	adds	r7, #192	; 0xc0
 800191e:	46bd      	mov	sp, r7
 8001920:	bd80      	pop	{r7, pc}
 8001922:	bf00      	nop
 8001924:	c1008000 	.word	0xc1008000

08001928 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001928:	b480      	push	{r7}
 800192a:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 800192c:	b672      	cpsid	i
}
 800192e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001930:	e7fe      	b.n	8001930 <Error_Handler+0x8>
	...

08001934 <MX_SDMMC1_SD_Init>:
SD_HandleTypeDef hsd1;

/* SDMMC1 init function */

void MX_SDMMC1_SD_Init(void)
{
 8001934:	b480      	push	{r7}
 8001936:	af00      	add	r7, sp, #0
  /* USER CODE END SDMMC1_Init 0 */

  /* USER CODE BEGIN SDMMC1_Init 1 */

  /* USER CODE END SDMMC1_Init 1 */
  hsd1.Instance = SDMMC1;
 8001938:	4b0c      	ldr	r3, [pc, #48]	; (800196c <MX_SDMMC1_SD_Init+0x38>)
 800193a:	4a0d      	ldr	r2, [pc, #52]	; (8001970 <MX_SDMMC1_SD_Init+0x3c>)
 800193c:	601a      	str	r2, [r3, #0]
  hsd1.Init.ClockEdge = SDMMC_CLOCK_EDGE_RISING;
 800193e:	4b0b      	ldr	r3, [pc, #44]	; (800196c <MX_SDMMC1_SD_Init+0x38>)
 8001940:	2200      	movs	r2, #0
 8001942:	605a      	str	r2, [r3, #4]
  hsd1.Init.ClockPowerSave = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 8001944:	4b09      	ldr	r3, [pc, #36]	; (800196c <MX_SDMMC1_SD_Init+0x38>)
 8001946:	2200      	movs	r2, #0
 8001948:	609a      	str	r2, [r3, #8]
  hsd1.Init.BusWide = SDMMC_BUS_WIDE_4B;
 800194a:	4b08      	ldr	r3, [pc, #32]	; (800196c <MX_SDMMC1_SD_Init+0x38>)
 800194c:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001950:	60da      	str	r2, [r3, #12]
  hsd1.Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_ENABLE;
 8001952:	4b06      	ldr	r3, [pc, #24]	; (800196c <MX_SDMMC1_SD_Init+0x38>)
 8001954:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001958:	611a      	str	r2, [r3, #16]
  hsd1.Init.ClockDiv = 0;
 800195a:	4b04      	ldr	r3, [pc, #16]	; (800196c <MX_SDMMC1_SD_Init+0x38>)
 800195c:	2200      	movs	r2, #0
 800195e:	615a      	str	r2, [r3, #20]
  /* USER CODE BEGIN SDMMC1_Init 2 */

  /* USER CODE END SDMMC1_Init 2 */

}
 8001960:	bf00      	nop
 8001962:	46bd      	mov	sp, r7
 8001964:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001968:	4770      	bx	lr
 800196a:	bf00      	nop
 800196c:	24000708 	.word	0x24000708
 8001970:	52007000 	.word	0x52007000

08001974 <HAL_SD_MspInit>:

void HAL_SD_MspInit(SD_HandleTypeDef* sdHandle)
{
 8001974:	b580      	push	{r7, lr}
 8001976:	b0ba      	sub	sp, #232	; 0xe8
 8001978:	af00      	add	r7, sp, #0
 800197a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800197c:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8001980:	2200      	movs	r2, #0
 8001982:	601a      	str	r2, [r3, #0]
 8001984:	605a      	str	r2, [r3, #4]
 8001986:	609a      	str	r2, [r3, #8]
 8001988:	60da      	str	r2, [r3, #12]
 800198a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800198c:	f107 0318 	add.w	r3, r7, #24
 8001990:	22bc      	movs	r2, #188	; 0xbc
 8001992:	2100      	movs	r1, #0
 8001994:	4618      	mov	r0, r3
 8001996:	f012 f817 	bl	80139c8 <memset>
  if(sdHandle->Instance==SDMMC1)
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	681b      	ldr	r3, [r3, #0]
 800199e:	4a46      	ldr	r2, [pc, #280]	; (8001ab8 <HAL_SD_MspInit+0x144>)
 80019a0:	4293      	cmp	r3, r2
 80019a2:	f040 8085 	bne.w	8001ab0 <HAL_SD_MspInit+0x13c>
  /* USER CODE BEGIN SDMMC1_MspInit 0 */

  /* USER CODE END SDMMC1_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SDMMC;
 80019a6:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80019aa:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.SdmmcClockSelection = RCC_SDMMCCLKSOURCE_PLL;
 80019ac:	2300      	movs	r3, #0
 80019ae:	667b      	str	r3, [r7, #100]	; 0x64
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80019b0:	f107 0318 	add.w	r3, r7, #24
 80019b4:	4618      	mov	r0, r3
 80019b6:	f006 f95f 	bl	8007c78 <HAL_RCCEx_PeriphCLKConfig>
 80019ba:	4603      	mov	r3, r0
 80019bc:	2b00      	cmp	r3, #0
 80019be:	d001      	beq.n	80019c4 <HAL_SD_MspInit+0x50>
    {
      Error_Handler();
 80019c0:	f7ff ffb2 	bl	8001928 <Error_Handler>
    }

    /* SDMMC1 clock enable */
    __HAL_RCC_SDMMC1_CLK_ENABLE();
 80019c4:	4b3d      	ldr	r3, [pc, #244]	; (8001abc <HAL_SD_MspInit+0x148>)
 80019c6:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 80019ca:	4a3c      	ldr	r2, [pc, #240]	; (8001abc <HAL_SD_MspInit+0x148>)
 80019cc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80019d0:	f8c2 30d4 	str.w	r3, [r2, #212]	; 0xd4
 80019d4:	4b39      	ldr	r3, [pc, #228]	; (8001abc <HAL_SD_MspInit+0x148>)
 80019d6:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 80019da:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80019de:	617b      	str	r3, [r7, #20]
 80019e0:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80019e2:	4b36      	ldr	r3, [pc, #216]	; (8001abc <HAL_SD_MspInit+0x148>)
 80019e4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80019e8:	4a34      	ldr	r2, [pc, #208]	; (8001abc <HAL_SD_MspInit+0x148>)
 80019ea:	f043 0304 	orr.w	r3, r3, #4
 80019ee:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80019f2:	4b32      	ldr	r3, [pc, #200]	; (8001abc <HAL_SD_MspInit+0x148>)
 80019f4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80019f8:	f003 0304 	and.w	r3, r3, #4
 80019fc:	613b      	str	r3, [r7, #16]
 80019fe:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001a00:	4b2e      	ldr	r3, [pc, #184]	; (8001abc <HAL_SD_MspInit+0x148>)
 8001a02:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001a06:	4a2d      	ldr	r2, [pc, #180]	; (8001abc <HAL_SD_MspInit+0x148>)
 8001a08:	f043 0308 	orr.w	r3, r3, #8
 8001a0c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001a10:	4b2a      	ldr	r3, [pc, #168]	; (8001abc <HAL_SD_MspInit+0x148>)
 8001a12:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001a16:	f003 0308 	and.w	r3, r3, #8
 8001a1a:	60fb      	str	r3, [r7, #12]
 8001a1c:	68fb      	ldr	r3, [r7, #12]
    PC10     ------> SDMMC1_D2
    PC11     ------> SDMMC1_D3
    PC12     ------> SDMMC1_CK
    PD2     ------> SDMMC1_CMD
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11;
 8001a1e:	f44f 6370 	mov.w	r3, #3840	; 0xf00
 8001a22:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a26:	2302      	movs	r3, #2
 8001a28:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001a2c:	2301      	movs	r3, #1
 8001a2e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001a32:	2303      	movs	r3, #3
 8001a34:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO1;
 8001a38:	230c      	movs	r3, #12
 8001a3a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001a3e:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8001a42:	4619      	mov	r1, r3
 8001a44:	481e      	ldr	r0, [pc, #120]	; (8001ac0 <HAL_SD_MspInit+0x14c>)
 8001a46:	f002 ff7b 	bl	8004940 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8001a4a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001a4e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a52:	2302      	movs	r3, #2
 8001a54:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a58:	2300      	movs	r3, #0
 8001a5a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001a5e:	2303      	movs	r3, #3
 8001a60:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO1;
 8001a64:	230c      	movs	r3, #12
 8001a66:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001a6a:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8001a6e:	4619      	mov	r1, r3
 8001a70:	4813      	ldr	r0, [pc, #76]	; (8001ac0 <HAL_SD_MspInit+0x14c>)
 8001a72:	f002 ff65 	bl	8004940 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8001a76:	2304      	movs	r3, #4
 8001a78:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a7c:	2302      	movs	r3, #2
 8001a7e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001a82:	2301      	movs	r3, #1
 8001a84:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001a88:	2303      	movs	r3, #3
 8001a8a:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO1;
 8001a8e:	230c      	movs	r3, #12
 8001a90:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001a94:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8001a98:	4619      	mov	r1, r3
 8001a9a:	480a      	ldr	r0, [pc, #40]	; (8001ac4 <HAL_SD_MspInit+0x150>)
 8001a9c:	f002 ff50 	bl	8004940 <HAL_GPIO_Init>

    /* SDMMC1 interrupt Init */
    HAL_NVIC_SetPriority(SDMMC1_IRQn, 0, 0);
 8001aa0:	2200      	movs	r2, #0
 8001aa2:	2100      	movs	r1, #0
 8001aa4:	2031      	movs	r0, #49	; 0x31
 8001aa6:	f001 fe3a 	bl	800371e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SDMMC1_IRQn);
 8001aaa:	2031      	movs	r0, #49	; 0x31
 8001aac:	f001 fe51 	bl	8003752 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SDMMC1_MspInit 1 */

  /* USER CODE END SDMMC1_MspInit 1 */
  }
}
 8001ab0:	bf00      	nop
 8001ab2:	37e8      	adds	r7, #232	; 0xe8
 8001ab4:	46bd      	mov	sp, r7
 8001ab6:	bd80      	pop	{r7, pc}
 8001ab8:	52007000 	.word	0x52007000
 8001abc:	58024400 	.word	0x58024400
 8001ac0:	58020800 	.word	0x58020800
 8001ac4:	58020c00 	.word	0x58020c00

08001ac8 <MX_SPI4_Init>:
SPI_HandleTypeDef hspi4;
SPI_HandleTypeDef hspi6;

/* SPI4 init function */
void MX_SPI4_Init(void)
{
 8001ac8:	b580      	push	{r7, lr}
 8001aca:	af00      	add	r7, sp, #0
  /* USER CODE END SPI4_Init 0 */

  /* USER CODE BEGIN SPI4_Init 1 */

  /* USER CODE END SPI4_Init 1 */
  hspi4.Instance = SPI4;
 8001acc:	4b27      	ldr	r3, [pc, #156]	; (8001b6c <MX_SPI4_Init+0xa4>)
 8001ace:	4a28      	ldr	r2, [pc, #160]	; (8001b70 <MX_SPI4_Init+0xa8>)
 8001ad0:	601a      	str	r2, [r3, #0]
  hspi4.Init.Mode = SPI_MODE_MASTER;
 8001ad2:	4b26      	ldr	r3, [pc, #152]	; (8001b6c <MX_SPI4_Init+0xa4>)
 8001ad4:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 8001ad8:	605a      	str	r2, [r3, #4]
  hspi4.Init.Direction = SPI_DIRECTION_2LINES;
 8001ada:	4b24      	ldr	r3, [pc, #144]	; (8001b6c <MX_SPI4_Init+0xa4>)
 8001adc:	2200      	movs	r2, #0
 8001ade:	609a      	str	r2, [r3, #8]
  hspi4.Init.DataSize = SPI_DATASIZE_8BIT;
 8001ae0:	4b22      	ldr	r3, [pc, #136]	; (8001b6c <MX_SPI4_Init+0xa4>)
 8001ae2:	2207      	movs	r2, #7
 8001ae4:	60da      	str	r2, [r3, #12]
  hspi4.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001ae6:	4b21      	ldr	r3, [pc, #132]	; (8001b6c <MX_SPI4_Init+0xa4>)
 8001ae8:	2200      	movs	r2, #0
 8001aea:	611a      	str	r2, [r3, #16]
  hspi4.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001aec:	4b1f      	ldr	r3, [pc, #124]	; (8001b6c <MX_SPI4_Init+0xa4>)
 8001aee:	2200      	movs	r2, #0
 8001af0:	615a      	str	r2, [r3, #20]
  hspi4.Init.NSS = SPI_NSS_SOFT;
 8001af2:	4b1e      	ldr	r3, [pc, #120]	; (8001b6c <MX_SPI4_Init+0xa4>)
 8001af4:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8001af8:	619a      	str	r2, [r3, #24]
  hspi4.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_64;
 8001afa:	4b1c      	ldr	r3, [pc, #112]	; (8001b6c <MX_SPI4_Init+0xa4>)
 8001afc:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8001b00:	61da      	str	r2, [r3, #28]
  hspi4.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001b02:	4b1a      	ldr	r3, [pc, #104]	; (8001b6c <MX_SPI4_Init+0xa4>)
 8001b04:	2200      	movs	r2, #0
 8001b06:	621a      	str	r2, [r3, #32]
  hspi4.Init.TIMode = SPI_TIMODE_DISABLE;
 8001b08:	4b18      	ldr	r3, [pc, #96]	; (8001b6c <MX_SPI4_Init+0xa4>)
 8001b0a:	2200      	movs	r2, #0
 8001b0c:	625a      	str	r2, [r3, #36]	; 0x24
  hspi4.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001b0e:	4b17      	ldr	r3, [pc, #92]	; (8001b6c <MX_SPI4_Init+0xa4>)
 8001b10:	2200      	movs	r2, #0
 8001b12:	629a      	str	r2, [r3, #40]	; 0x28
  hspi4.Init.CRCPolynomial = 0x0;
 8001b14:	4b15      	ldr	r3, [pc, #84]	; (8001b6c <MX_SPI4_Init+0xa4>)
 8001b16:	2200      	movs	r2, #0
 8001b18:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi4.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8001b1a:	4b14      	ldr	r3, [pc, #80]	; (8001b6c <MX_SPI4_Init+0xa4>)
 8001b1c:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001b20:	635a      	str	r2, [r3, #52]	; 0x34
  hspi4.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 8001b22:	4b12      	ldr	r3, [pc, #72]	; (8001b6c <MX_SPI4_Init+0xa4>)
 8001b24:	2200      	movs	r2, #0
 8001b26:	639a      	str	r2, [r3, #56]	; 0x38
  hspi4.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 8001b28:	4b10      	ldr	r3, [pc, #64]	; (8001b6c <MX_SPI4_Init+0xa4>)
 8001b2a:	2200      	movs	r2, #0
 8001b2c:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi4.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8001b2e:	4b0f      	ldr	r3, [pc, #60]	; (8001b6c <MX_SPI4_Init+0xa4>)
 8001b30:	2200      	movs	r2, #0
 8001b32:	641a      	str	r2, [r3, #64]	; 0x40
  hspi4.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8001b34:	4b0d      	ldr	r3, [pc, #52]	; (8001b6c <MX_SPI4_Init+0xa4>)
 8001b36:	2200      	movs	r2, #0
 8001b38:	645a      	str	r2, [r3, #68]	; 0x44
  hspi4.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 8001b3a:	4b0c      	ldr	r3, [pc, #48]	; (8001b6c <MX_SPI4_Init+0xa4>)
 8001b3c:	2200      	movs	r2, #0
 8001b3e:	649a      	str	r2, [r3, #72]	; 0x48
  hspi4.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 8001b40:	4b0a      	ldr	r3, [pc, #40]	; (8001b6c <MX_SPI4_Init+0xa4>)
 8001b42:	2200      	movs	r2, #0
 8001b44:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi4.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 8001b46:	4b09      	ldr	r3, [pc, #36]	; (8001b6c <MX_SPI4_Init+0xa4>)
 8001b48:	2200      	movs	r2, #0
 8001b4a:	651a      	str	r2, [r3, #80]	; 0x50
  hspi4.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 8001b4c:	4b07      	ldr	r3, [pc, #28]	; (8001b6c <MX_SPI4_Init+0xa4>)
 8001b4e:	2200      	movs	r2, #0
 8001b50:	655a      	str	r2, [r3, #84]	; 0x54
  hspi4.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 8001b52:	4b06      	ldr	r3, [pc, #24]	; (8001b6c <MX_SPI4_Init+0xa4>)
 8001b54:	2200      	movs	r2, #0
 8001b56:	659a      	str	r2, [r3, #88]	; 0x58
  if (HAL_SPI_Init(&hspi4) != HAL_OK)
 8001b58:	4804      	ldr	r0, [pc, #16]	; (8001b6c <MX_SPI4_Init+0xa4>)
 8001b5a:	f009 fe91 	bl	800b880 <HAL_SPI_Init>
 8001b5e:	4603      	mov	r3, r0
 8001b60:	2b00      	cmp	r3, #0
 8001b62:	d001      	beq.n	8001b68 <MX_SPI4_Init+0xa0>
  {
    Error_Handler();
 8001b64:	f7ff fee0 	bl	8001928 <Error_Handler>
  }
  /* USER CODE BEGIN SPI4_Init 2 */

  /* USER CODE END SPI4_Init 2 */

}
 8001b68:	bf00      	nop
 8001b6a:	bd80      	pop	{r7, pc}
 8001b6c:	24000784 	.word	0x24000784
 8001b70:	40013400 	.word	0x40013400

08001b74 <MX_SPI6_Init>:
/* SPI6 init function */
void MX_SPI6_Init(void)
{
 8001b74:	b580      	push	{r7, lr}
 8001b76:	af00      	add	r7, sp, #0
  /* USER CODE END SPI6_Init 0 */

  /* USER CODE BEGIN SPI6_Init 1 */

  /* USER CODE END SPI6_Init 1 */
  hspi6.Instance = SPI6;
 8001b78:	4b27      	ldr	r3, [pc, #156]	; (8001c18 <MX_SPI6_Init+0xa4>)
 8001b7a:	4a28      	ldr	r2, [pc, #160]	; (8001c1c <MX_SPI6_Init+0xa8>)
 8001b7c:	601a      	str	r2, [r3, #0]
  hspi6.Init.Mode = SPI_MODE_MASTER;
 8001b7e:	4b26      	ldr	r3, [pc, #152]	; (8001c18 <MX_SPI6_Init+0xa4>)
 8001b80:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 8001b84:	605a      	str	r2, [r3, #4]
  hspi6.Init.Direction = SPI_DIRECTION_2LINES;
 8001b86:	4b24      	ldr	r3, [pc, #144]	; (8001c18 <MX_SPI6_Init+0xa4>)
 8001b88:	2200      	movs	r2, #0
 8001b8a:	609a      	str	r2, [r3, #8]
  hspi6.Init.DataSize = SPI_DATASIZE_8BIT;
 8001b8c:	4b22      	ldr	r3, [pc, #136]	; (8001c18 <MX_SPI6_Init+0xa4>)
 8001b8e:	2207      	movs	r2, #7
 8001b90:	60da      	str	r2, [r3, #12]
  hspi6.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001b92:	4b21      	ldr	r3, [pc, #132]	; (8001c18 <MX_SPI6_Init+0xa4>)
 8001b94:	2200      	movs	r2, #0
 8001b96:	611a      	str	r2, [r3, #16]
  hspi6.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001b98:	4b1f      	ldr	r3, [pc, #124]	; (8001c18 <MX_SPI6_Init+0xa4>)
 8001b9a:	2200      	movs	r2, #0
 8001b9c:	615a      	str	r2, [r3, #20]
  hspi6.Init.NSS = SPI_NSS_SOFT;
 8001b9e:	4b1e      	ldr	r3, [pc, #120]	; (8001c18 <MX_SPI6_Init+0xa4>)
 8001ba0:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8001ba4:	619a      	str	r2, [r3, #24]
  hspi6.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 8001ba6:	4b1c      	ldr	r3, [pc, #112]	; (8001c18 <MX_SPI6_Init+0xa4>)
 8001ba8:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8001bac:	61da      	str	r2, [r3, #28]
  hspi6.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001bae:	4b1a      	ldr	r3, [pc, #104]	; (8001c18 <MX_SPI6_Init+0xa4>)
 8001bb0:	2200      	movs	r2, #0
 8001bb2:	621a      	str	r2, [r3, #32]
  hspi6.Init.TIMode = SPI_TIMODE_DISABLE;
 8001bb4:	4b18      	ldr	r3, [pc, #96]	; (8001c18 <MX_SPI6_Init+0xa4>)
 8001bb6:	2200      	movs	r2, #0
 8001bb8:	625a      	str	r2, [r3, #36]	; 0x24
  hspi6.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001bba:	4b17      	ldr	r3, [pc, #92]	; (8001c18 <MX_SPI6_Init+0xa4>)
 8001bbc:	2200      	movs	r2, #0
 8001bbe:	629a      	str	r2, [r3, #40]	; 0x28
  hspi6.Init.CRCPolynomial = 0x0;
 8001bc0:	4b15      	ldr	r3, [pc, #84]	; (8001c18 <MX_SPI6_Init+0xa4>)
 8001bc2:	2200      	movs	r2, #0
 8001bc4:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi6.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 8001bc6:	4b14      	ldr	r3, [pc, #80]	; (8001c18 <MX_SPI6_Init+0xa4>)
 8001bc8:	2200      	movs	r2, #0
 8001bca:	635a      	str	r2, [r3, #52]	; 0x34
  hspi6.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 8001bcc:	4b12      	ldr	r3, [pc, #72]	; (8001c18 <MX_SPI6_Init+0xa4>)
 8001bce:	2200      	movs	r2, #0
 8001bd0:	639a      	str	r2, [r3, #56]	; 0x38
  hspi6.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 8001bd2:	4b11      	ldr	r3, [pc, #68]	; (8001c18 <MX_SPI6_Init+0xa4>)
 8001bd4:	2200      	movs	r2, #0
 8001bd6:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi6.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8001bd8:	4b0f      	ldr	r3, [pc, #60]	; (8001c18 <MX_SPI6_Init+0xa4>)
 8001bda:	2200      	movs	r2, #0
 8001bdc:	641a      	str	r2, [r3, #64]	; 0x40
  hspi6.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8001bde:	4b0e      	ldr	r3, [pc, #56]	; (8001c18 <MX_SPI6_Init+0xa4>)
 8001be0:	2200      	movs	r2, #0
 8001be2:	645a      	str	r2, [r3, #68]	; 0x44
  hspi6.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 8001be4:	4b0c      	ldr	r3, [pc, #48]	; (8001c18 <MX_SPI6_Init+0xa4>)
 8001be6:	2200      	movs	r2, #0
 8001be8:	649a      	str	r2, [r3, #72]	; 0x48
  hspi6.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 8001bea:	4b0b      	ldr	r3, [pc, #44]	; (8001c18 <MX_SPI6_Init+0xa4>)
 8001bec:	2200      	movs	r2, #0
 8001bee:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi6.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 8001bf0:	4b09      	ldr	r3, [pc, #36]	; (8001c18 <MX_SPI6_Init+0xa4>)
 8001bf2:	2200      	movs	r2, #0
 8001bf4:	651a      	str	r2, [r3, #80]	; 0x50
  hspi6.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 8001bf6:	4b08      	ldr	r3, [pc, #32]	; (8001c18 <MX_SPI6_Init+0xa4>)
 8001bf8:	2200      	movs	r2, #0
 8001bfa:	655a      	str	r2, [r3, #84]	; 0x54
  hspi6.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 8001bfc:	4b06      	ldr	r3, [pc, #24]	; (8001c18 <MX_SPI6_Init+0xa4>)
 8001bfe:	2200      	movs	r2, #0
 8001c00:	659a      	str	r2, [r3, #88]	; 0x58
  if (HAL_SPI_Init(&hspi6) != HAL_OK)
 8001c02:	4805      	ldr	r0, [pc, #20]	; (8001c18 <MX_SPI6_Init+0xa4>)
 8001c04:	f009 fe3c 	bl	800b880 <HAL_SPI_Init>
 8001c08:	4603      	mov	r3, r0
 8001c0a:	2b00      	cmp	r3, #0
 8001c0c:	d001      	beq.n	8001c12 <MX_SPI6_Init+0x9e>
  {
    Error_Handler();
 8001c0e:	f7ff fe8b 	bl	8001928 <Error_Handler>
  }
  /* USER CODE BEGIN SPI6_Init 2 */

  /* USER CODE END SPI6_Init 2 */

}
 8001c12:	bf00      	nop
 8001c14:	bd80      	pop	{r7, pc}
 8001c16:	bf00      	nop
 8001c18:	2400080c 	.word	0x2400080c
 8001c1c:	58001400 	.word	0x58001400

08001c20 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8001c20:	b580      	push	{r7, lr}
 8001c22:	b0ba      	sub	sp, #232	; 0xe8
 8001c24:	af00      	add	r7, sp, #0
 8001c26:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c28:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8001c2c:	2200      	movs	r2, #0
 8001c2e:	601a      	str	r2, [r3, #0]
 8001c30:	605a      	str	r2, [r3, #4]
 8001c32:	609a      	str	r2, [r3, #8]
 8001c34:	60da      	str	r2, [r3, #12]
 8001c36:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001c38:	f107 0318 	add.w	r3, r7, #24
 8001c3c:	22bc      	movs	r2, #188	; 0xbc
 8001c3e:	2100      	movs	r1, #0
 8001c40:	4618      	mov	r0, r3
 8001c42:	f011 fec1 	bl	80139c8 <memset>
  if(spiHandle->Instance==SPI4)
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	681b      	ldr	r3, [r3, #0]
 8001c4a:	4a49      	ldr	r2, [pc, #292]	; (8001d70 <HAL_SPI_MspInit+0x150>)
 8001c4c:	4293      	cmp	r3, r2
 8001c4e:	d142      	bne.n	8001cd6 <HAL_SPI_MspInit+0xb6>
  /* USER CODE BEGIN SPI4_MspInit 0 */

  /* USER CODE END SPI4_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI4;
 8001c50:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001c54:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.Spi45ClockSelection = RCC_SPI45CLKSOURCE_D2PCLK1;
 8001c56:	2300      	movs	r3, #0
 8001c58:	67bb      	str	r3, [r7, #120]	; 0x78
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001c5a:	f107 0318 	add.w	r3, r7, #24
 8001c5e:	4618      	mov	r0, r3
 8001c60:	f006 f80a 	bl	8007c78 <HAL_RCCEx_PeriphCLKConfig>
 8001c64:	4603      	mov	r3, r0
 8001c66:	2b00      	cmp	r3, #0
 8001c68:	d001      	beq.n	8001c6e <HAL_SPI_MspInit+0x4e>
    {
      Error_Handler();
 8001c6a:	f7ff fe5d 	bl	8001928 <Error_Handler>
    }

    /* SPI4 clock enable */
    __HAL_RCC_SPI4_CLK_ENABLE();
 8001c6e:	4b41      	ldr	r3, [pc, #260]	; (8001d74 <HAL_SPI_MspInit+0x154>)
 8001c70:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001c74:	4a3f      	ldr	r2, [pc, #252]	; (8001d74 <HAL_SPI_MspInit+0x154>)
 8001c76:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8001c7a:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8001c7e:	4b3d      	ldr	r3, [pc, #244]	; (8001d74 <HAL_SPI_MspInit+0x154>)
 8001c80:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001c84:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001c88:	617b      	str	r3, [r7, #20]
 8001c8a:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8001c8c:	4b39      	ldr	r3, [pc, #228]	; (8001d74 <HAL_SPI_MspInit+0x154>)
 8001c8e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001c92:	4a38      	ldr	r2, [pc, #224]	; (8001d74 <HAL_SPI_MspInit+0x154>)
 8001c94:	f043 0310 	orr.w	r3, r3, #16
 8001c98:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001c9c:	4b35      	ldr	r3, [pc, #212]	; (8001d74 <HAL_SPI_MspInit+0x154>)
 8001c9e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001ca2:	f003 0310 	and.w	r3, r3, #16
 8001ca6:	613b      	str	r3, [r7, #16]
 8001ca8:	693b      	ldr	r3, [r7, #16]
    /**SPI4 GPIO Configuration
    PE2     ------> SPI4_SCK
    PE5     ------> SPI4_MISO
    PE6     ------> SPI4_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_5|GPIO_PIN_6;
 8001caa:	2364      	movs	r3, #100	; 0x64
 8001cac:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001cb0:	2302      	movs	r3, #2
 8001cb2:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cb6:	2300      	movs	r3, #0
 8001cb8:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001cbc:	2300      	movs	r3, #0
 8001cbe:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI4;
 8001cc2:	2305      	movs	r3, #5
 8001cc4:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001cc8:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8001ccc:	4619      	mov	r1, r3
 8001cce:	482a      	ldr	r0, [pc, #168]	; (8001d78 <HAL_SPI_MspInit+0x158>)
 8001cd0:	f002 fe36 	bl	8004940 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI6_MspInit 1 */

  /* USER CODE END SPI6_MspInit 1 */
  }
}
 8001cd4:	e048      	b.n	8001d68 <HAL_SPI_MspInit+0x148>
  else if(spiHandle->Instance==SPI6)
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	681b      	ldr	r3, [r3, #0]
 8001cda:	4a28      	ldr	r2, [pc, #160]	; (8001d7c <HAL_SPI_MspInit+0x15c>)
 8001cdc:	4293      	cmp	r3, r2
 8001cde:	d143      	bne.n	8001d68 <HAL_SPI_MspInit+0x148>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI6;
 8001ce0:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001ce4:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.Spi6ClockSelection = RCC_SPI6CLKSOURCE_D3PCLK1;
 8001ce6:	2300      	movs	r3, #0
 8001ce8:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001cec:	f107 0318 	add.w	r3, r7, #24
 8001cf0:	4618      	mov	r0, r3
 8001cf2:	f005 ffc1 	bl	8007c78 <HAL_RCCEx_PeriphCLKConfig>
 8001cf6:	4603      	mov	r3, r0
 8001cf8:	2b00      	cmp	r3, #0
 8001cfa:	d001      	beq.n	8001d00 <HAL_SPI_MspInit+0xe0>
      Error_Handler();
 8001cfc:	f7ff fe14 	bl	8001928 <Error_Handler>
    __HAL_RCC_SPI6_CLK_ENABLE();
 8001d00:	4b1c      	ldr	r3, [pc, #112]	; (8001d74 <HAL_SPI_MspInit+0x154>)
 8001d02:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8001d06:	4a1b      	ldr	r2, [pc, #108]	; (8001d74 <HAL_SPI_MspInit+0x154>)
 8001d08:	f043 0320 	orr.w	r3, r3, #32
 8001d0c:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8001d10:	4b18      	ldr	r3, [pc, #96]	; (8001d74 <HAL_SPI_MspInit+0x154>)
 8001d12:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8001d16:	f003 0320 	and.w	r3, r3, #32
 8001d1a:	60fb      	str	r3, [r7, #12]
 8001d1c:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8001d1e:	4b15      	ldr	r3, [pc, #84]	; (8001d74 <HAL_SPI_MspInit+0x154>)
 8001d20:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001d24:	4a13      	ldr	r2, [pc, #76]	; (8001d74 <HAL_SPI_MspInit+0x154>)
 8001d26:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001d2a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001d2e:	4b11      	ldr	r3, [pc, #68]	; (8001d74 <HAL_SPI_MspInit+0x154>)
 8001d30:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001d34:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001d38:	60bb      	str	r3, [r7, #8]
 8001d3a:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14;
 8001d3c:	f44f 43e0 	mov.w	r3, #28672	; 0x7000
 8001d40:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d44:	2302      	movs	r3, #2
 8001d46:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d4a:	2300      	movs	r3, #0
 8001d4c:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d50:	2300      	movs	r3, #0
 8001d52:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI6;
 8001d56:	2305      	movs	r3, #5
 8001d58:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001d5c:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8001d60:	4619      	mov	r1, r3
 8001d62:	4807      	ldr	r0, [pc, #28]	; (8001d80 <HAL_SPI_MspInit+0x160>)
 8001d64:	f002 fdec 	bl	8004940 <HAL_GPIO_Init>
}
 8001d68:	bf00      	nop
 8001d6a:	37e8      	adds	r7, #232	; 0xe8
 8001d6c:	46bd      	mov	sp, r7
 8001d6e:	bd80      	pop	{r7, pc}
 8001d70:	40013400 	.word	0x40013400
 8001d74:	58024400 	.word	0x58024400
 8001d78:	58021000 	.word	0x58021000
 8001d7c:	58001400 	.word	0x58001400
 8001d80:	58021800 	.word	0x58021800

08001d84 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001d84:	b480      	push	{r7}
 8001d86:	b083      	sub	sp, #12
 8001d88:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001d8a:	4b0a      	ldr	r3, [pc, #40]	; (8001db4 <HAL_MspInit+0x30>)
 8001d8c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8001d90:	4a08      	ldr	r2, [pc, #32]	; (8001db4 <HAL_MspInit+0x30>)
 8001d92:	f043 0302 	orr.w	r3, r3, #2
 8001d96:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8001d9a:	4b06      	ldr	r3, [pc, #24]	; (8001db4 <HAL_MspInit+0x30>)
 8001d9c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8001da0:	f003 0302 	and.w	r3, r3, #2
 8001da4:	607b      	str	r3, [r7, #4]
 8001da6:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001da8:	bf00      	nop
 8001daa:	370c      	adds	r7, #12
 8001dac:	46bd      	mov	sp, r7
 8001dae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001db2:	4770      	bx	lr
 8001db4:	58024400 	.word	0x58024400

08001db8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001db8:	b480      	push	{r7}
 8001dba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001dbc:	e7fe      	b.n	8001dbc <NMI_Handler+0x4>

08001dbe <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001dbe:	b480      	push	{r7}
 8001dc0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001dc2:	e7fe      	b.n	8001dc2 <HardFault_Handler+0x4>

08001dc4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001dc4:	b480      	push	{r7}
 8001dc6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001dc8:	e7fe      	b.n	8001dc8 <MemManage_Handler+0x4>

08001dca <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001dca:	b480      	push	{r7}
 8001dcc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001dce:	e7fe      	b.n	8001dce <BusFault_Handler+0x4>

08001dd0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001dd0:	b480      	push	{r7}
 8001dd2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001dd4:	e7fe      	b.n	8001dd4 <UsageFault_Handler+0x4>

08001dd6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001dd6:	b480      	push	{r7}
 8001dd8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001dda:	bf00      	nop
 8001ddc:	46bd      	mov	sp, r7
 8001dde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001de2:	4770      	bx	lr

08001de4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001de4:	b480      	push	{r7}
 8001de6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001de8:	bf00      	nop
 8001dea:	46bd      	mov	sp, r7
 8001dec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001df0:	4770      	bx	lr

08001df2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001df2:	b480      	push	{r7}
 8001df4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001df6:	bf00      	nop
 8001df8:	46bd      	mov	sp, r7
 8001dfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dfe:	4770      	bx	lr

08001e00 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001e00:	b580      	push	{r7, lr}
 8001e02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001e04:	f000 fac0 	bl	8002388 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001e08:	bf00      	nop
 8001e0a:	bd80      	pop	{r7, pc}

08001e0c <FDCAN1_IT0_IRQHandler>:

/**
  * @brief This function handles FDCAN1 interrupt 0.
  */
void FDCAN1_IT0_IRQHandler(void)
{
 8001e0c:	b580      	push	{r7, lr}
 8001e0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FDCAN1_IT0_IRQn 0 */

  /* USER CODE END FDCAN1_IT0_IRQn 0 */
  HAL_FDCAN_IRQHandler(&hfdcan1);
 8001e10:	4802      	ldr	r0, [pc, #8]	; (8001e1c <FDCAN1_IT0_IRQHandler+0x10>)
 8001e12:	f002 f8fb 	bl	800400c <HAL_FDCAN_IRQHandler>
  /* USER CODE BEGIN FDCAN1_IT0_IRQn 1 */

  /* USER CODE END FDCAN1_IT0_IRQn 1 */
}
 8001e16:	bf00      	nop
 8001e18:	bd80      	pop	{r7, pc}
 8001e1a:	bf00      	nop
 8001e1c:	240004f8 	.word	0x240004f8

08001e20 <SDMMC1_IRQHandler>:

/**
  * @brief This function handles SDMMC1 global interrupt.
  */
void SDMMC1_IRQHandler(void)
{
 8001e20:	b580      	push	{r7, lr}
 8001e22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SDMMC1_IRQn 0 */

  /* USER CODE END SDMMC1_IRQn 0 */
  HAL_SD_IRQHandler(&hsd1);
 8001e24:	4802      	ldr	r0, [pc, #8]	; (8001e30 <SDMMC1_IRQHandler+0x10>)
 8001e26:	f008 fb1b 	bl	800a460 <HAL_SD_IRQHandler>
  /* USER CODE BEGIN SDMMC1_IRQn 1 */

  /* USER CODE END SDMMC1_IRQn 1 */
}
 8001e2a:	bf00      	nop
 8001e2c:	bd80      	pop	{r7, pc}
 8001e2e:	bf00      	nop
 8001e30:	24000708 	.word	0x24000708

08001e34 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8001e34:	b580      	push	{r7, lr}
 8001e36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8001e38:	4802      	ldr	r0, [pc, #8]	; (8001e44 <OTG_FS_IRQHandler+0x10>)
 8001e3a:	f003 fecc 	bl	8005bd6 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8001e3e:	bf00      	nop
 8001e40:	bd80      	pop	{r7, pc}
 8001e42:	bf00      	nop
 8001e44:	24000e1c 	.word	0x24000e1c

08001e48 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001e48:	b480      	push	{r7}
 8001e4a:	af00      	add	r7, sp, #0
	return 1;
 8001e4c:	2301      	movs	r3, #1
}
 8001e4e:	4618      	mov	r0, r3
 8001e50:	46bd      	mov	sp, r7
 8001e52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e56:	4770      	bx	lr

08001e58 <_kill>:

int _kill(int pid, int sig)
{
 8001e58:	b580      	push	{r7, lr}
 8001e5a:	b082      	sub	sp, #8
 8001e5c:	af00      	add	r7, sp, #0
 8001e5e:	6078      	str	r0, [r7, #4]
 8001e60:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8001e62:	f011 fd79 	bl	8013958 <__errno>
 8001e66:	4603      	mov	r3, r0
 8001e68:	2216      	movs	r2, #22
 8001e6a:	601a      	str	r2, [r3, #0]
	return -1;
 8001e6c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001e70:	4618      	mov	r0, r3
 8001e72:	3708      	adds	r7, #8
 8001e74:	46bd      	mov	sp, r7
 8001e76:	bd80      	pop	{r7, pc}

08001e78 <_exit>:

void _exit (int status)
{
 8001e78:	b580      	push	{r7, lr}
 8001e7a:	b082      	sub	sp, #8
 8001e7c:	af00      	add	r7, sp, #0
 8001e7e:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8001e80:	f04f 31ff 	mov.w	r1, #4294967295
 8001e84:	6878      	ldr	r0, [r7, #4]
 8001e86:	f7ff ffe7 	bl	8001e58 <_kill>
	while (1) {}		/* Make sure we hang here */
 8001e8a:	e7fe      	b.n	8001e8a <_exit+0x12>

08001e8c <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001e8c:	b580      	push	{r7, lr}
 8001e8e:	b086      	sub	sp, #24
 8001e90:	af00      	add	r7, sp, #0
 8001e92:	60f8      	str	r0, [r7, #12]
 8001e94:	60b9      	str	r1, [r7, #8]
 8001e96:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001e98:	2300      	movs	r3, #0
 8001e9a:	617b      	str	r3, [r7, #20]
 8001e9c:	e00a      	b.n	8001eb4 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8001e9e:	f3af 8000 	nop.w
 8001ea2:	4601      	mov	r1, r0
 8001ea4:	68bb      	ldr	r3, [r7, #8]
 8001ea6:	1c5a      	adds	r2, r3, #1
 8001ea8:	60ba      	str	r2, [r7, #8]
 8001eaa:	b2ca      	uxtb	r2, r1
 8001eac:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001eae:	697b      	ldr	r3, [r7, #20]
 8001eb0:	3301      	adds	r3, #1
 8001eb2:	617b      	str	r3, [r7, #20]
 8001eb4:	697a      	ldr	r2, [r7, #20]
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	429a      	cmp	r2, r3
 8001eba:	dbf0      	blt.n	8001e9e <_read+0x12>
	}

return len;
 8001ebc:	687b      	ldr	r3, [r7, #4]
}
 8001ebe:	4618      	mov	r0, r3
 8001ec0:	3718      	adds	r7, #24
 8001ec2:	46bd      	mov	sp, r7
 8001ec4:	bd80      	pop	{r7, pc}

08001ec6 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001ec6:	b580      	push	{r7, lr}
 8001ec8:	b086      	sub	sp, #24
 8001eca:	af00      	add	r7, sp, #0
 8001ecc:	60f8      	str	r0, [r7, #12]
 8001ece:	60b9      	str	r1, [r7, #8]
 8001ed0:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001ed2:	2300      	movs	r3, #0
 8001ed4:	617b      	str	r3, [r7, #20]
 8001ed6:	e009      	b.n	8001eec <_write+0x26>
	{
		__io_putchar(*ptr++);
 8001ed8:	68bb      	ldr	r3, [r7, #8]
 8001eda:	1c5a      	adds	r2, r3, #1
 8001edc:	60ba      	str	r2, [r7, #8]
 8001ede:	781b      	ldrb	r3, [r3, #0]
 8001ee0:	4618      	mov	r0, r3
 8001ee2:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001ee6:	697b      	ldr	r3, [r7, #20]
 8001ee8:	3301      	adds	r3, #1
 8001eea:	617b      	str	r3, [r7, #20]
 8001eec:	697a      	ldr	r2, [r7, #20]
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	429a      	cmp	r2, r3
 8001ef2:	dbf1      	blt.n	8001ed8 <_write+0x12>
	}
	return len;
 8001ef4:	687b      	ldr	r3, [r7, #4]
}
 8001ef6:	4618      	mov	r0, r3
 8001ef8:	3718      	adds	r7, #24
 8001efa:	46bd      	mov	sp, r7
 8001efc:	bd80      	pop	{r7, pc}

08001efe <_close>:

int _close(int file)
{
 8001efe:	b480      	push	{r7}
 8001f00:	b083      	sub	sp, #12
 8001f02:	af00      	add	r7, sp, #0
 8001f04:	6078      	str	r0, [r7, #4]
	return -1;
 8001f06:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001f0a:	4618      	mov	r0, r3
 8001f0c:	370c      	adds	r7, #12
 8001f0e:	46bd      	mov	sp, r7
 8001f10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f14:	4770      	bx	lr

08001f16 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001f16:	b480      	push	{r7}
 8001f18:	b083      	sub	sp, #12
 8001f1a:	af00      	add	r7, sp, #0
 8001f1c:	6078      	str	r0, [r7, #4]
 8001f1e:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8001f20:	683b      	ldr	r3, [r7, #0]
 8001f22:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001f26:	605a      	str	r2, [r3, #4]
	return 0;
 8001f28:	2300      	movs	r3, #0
}
 8001f2a:	4618      	mov	r0, r3
 8001f2c:	370c      	adds	r7, #12
 8001f2e:	46bd      	mov	sp, r7
 8001f30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f34:	4770      	bx	lr

08001f36 <_isatty>:

int _isatty(int file)
{
 8001f36:	b480      	push	{r7}
 8001f38:	b083      	sub	sp, #12
 8001f3a:	af00      	add	r7, sp, #0
 8001f3c:	6078      	str	r0, [r7, #4]
	return 1;
 8001f3e:	2301      	movs	r3, #1
}
 8001f40:	4618      	mov	r0, r3
 8001f42:	370c      	adds	r7, #12
 8001f44:	46bd      	mov	sp, r7
 8001f46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f4a:	4770      	bx	lr

08001f4c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001f4c:	b480      	push	{r7}
 8001f4e:	b085      	sub	sp, #20
 8001f50:	af00      	add	r7, sp, #0
 8001f52:	60f8      	str	r0, [r7, #12]
 8001f54:	60b9      	str	r1, [r7, #8]
 8001f56:	607a      	str	r2, [r7, #4]
	return 0;
 8001f58:	2300      	movs	r3, #0
}
 8001f5a:	4618      	mov	r0, r3
 8001f5c:	3714      	adds	r7, #20
 8001f5e:	46bd      	mov	sp, r7
 8001f60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f64:	4770      	bx	lr
	...

08001f68 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001f68:	b580      	push	{r7, lr}
 8001f6a:	b086      	sub	sp, #24
 8001f6c:	af00      	add	r7, sp, #0
 8001f6e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001f70:	4a14      	ldr	r2, [pc, #80]	; (8001fc4 <_sbrk+0x5c>)
 8001f72:	4b15      	ldr	r3, [pc, #84]	; (8001fc8 <_sbrk+0x60>)
 8001f74:	1ad3      	subs	r3, r2, r3
 8001f76:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001f78:	697b      	ldr	r3, [r7, #20]
 8001f7a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001f7c:	4b13      	ldr	r3, [pc, #76]	; (8001fcc <_sbrk+0x64>)
 8001f7e:	681b      	ldr	r3, [r3, #0]
 8001f80:	2b00      	cmp	r3, #0
 8001f82:	d102      	bne.n	8001f8a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001f84:	4b11      	ldr	r3, [pc, #68]	; (8001fcc <_sbrk+0x64>)
 8001f86:	4a12      	ldr	r2, [pc, #72]	; (8001fd0 <_sbrk+0x68>)
 8001f88:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001f8a:	4b10      	ldr	r3, [pc, #64]	; (8001fcc <_sbrk+0x64>)
 8001f8c:	681a      	ldr	r2, [r3, #0]
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	4413      	add	r3, r2
 8001f92:	693a      	ldr	r2, [r7, #16]
 8001f94:	429a      	cmp	r2, r3
 8001f96:	d207      	bcs.n	8001fa8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001f98:	f011 fcde 	bl	8013958 <__errno>
 8001f9c:	4603      	mov	r3, r0
 8001f9e:	220c      	movs	r2, #12
 8001fa0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001fa2:	f04f 33ff 	mov.w	r3, #4294967295
 8001fa6:	e009      	b.n	8001fbc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001fa8:	4b08      	ldr	r3, [pc, #32]	; (8001fcc <_sbrk+0x64>)
 8001faa:	681b      	ldr	r3, [r3, #0]
 8001fac:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001fae:	4b07      	ldr	r3, [pc, #28]	; (8001fcc <_sbrk+0x64>)
 8001fb0:	681a      	ldr	r2, [r3, #0]
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	4413      	add	r3, r2
 8001fb6:	4a05      	ldr	r2, [pc, #20]	; (8001fcc <_sbrk+0x64>)
 8001fb8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001fba:	68fb      	ldr	r3, [r7, #12]
}
 8001fbc:	4618      	mov	r0, r3
 8001fbe:	3718      	adds	r7, #24
 8001fc0:	46bd      	mov	sp, r7
 8001fc2:	bd80      	pop	{r7, pc}
 8001fc4:	24080000 	.word	0x24080000
 8001fc8:	00001000 	.word	0x00001000
 8001fcc:	24000894 	.word	0x24000894
 8001fd0:	24001260 	.word	0x24001260

08001fd4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001fd4:	b480      	push	{r7}
 8001fd6:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8001fd8:	4b39      	ldr	r3, [pc, #228]	; (80020c0 <SystemInit+0xec>)
 8001fda:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001fde:	4a38      	ldr	r2, [pc, #224]	; (80020c0 <SystemInit+0xec>)
 8001fe0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001fe4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8001fe8:	4b36      	ldr	r3, [pc, #216]	; (80020c4 <SystemInit+0xf0>)
 8001fea:	681b      	ldr	r3, [r3, #0]
 8001fec:	f003 030f 	and.w	r3, r3, #15
 8001ff0:	2b06      	cmp	r3, #6
 8001ff2:	d807      	bhi.n	8002004 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8001ff4:	4b33      	ldr	r3, [pc, #204]	; (80020c4 <SystemInit+0xf0>)
 8001ff6:	681b      	ldr	r3, [r3, #0]
 8001ff8:	f023 030f 	bic.w	r3, r3, #15
 8001ffc:	4a31      	ldr	r2, [pc, #196]	; (80020c4 <SystemInit+0xf0>)
 8001ffe:	f043 0307 	orr.w	r3, r3, #7
 8002002:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8002004:	4b30      	ldr	r3, [pc, #192]	; (80020c8 <SystemInit+0xf4>)
 8002006:	681b      	ldr	r3, [r3, #0]
 8002008:	4a2f      	ldr	r2, [pc, #188]	; (80020c8 <SystemInit+0xf4>)
 800200a:	f043 0301 	orr.w	r3, r3, #1
 800200e:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8002010:	4b2d      	ldr	r3, [pc, #180]	; (80020c8 <SystemInit+0xf4>)
 8002012:	2200      	movs	r2, #0
 8002014:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8002016:	4b2c      	ldr	r3, [pc, #176]	; (80020c8 <SystemInit+0xf4>)
 8002018:	681a      	ldr	r2, [r3, #0]
 800201a:	492b      	ldr	r1, [pc, #172]	; (80020c8 <SystemInit+0xf4>)
 800201c:	4b2b      	ldr	r3, [pc, #172]	; (80020cc <SystemInit+0xf8>)
 800201e:	4013      	ands	r3, r2
 8002020:	600b      	str	r3, [r1, #0]
  
   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8002022:	4b28      	ldr	r3, [pc, #160]	; (80020c4 <SystemInit+0xf0>)
 8002024:	681b      	ldr	r3, [r3, #0]
 8002026:	f003 0308 	and.w	r3, r3, #8
 800202a:	2b00      	cmp	r3, #0
 800202c:	d007      	beq.n	800203e <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 800202e:	4b25      	ldr	r3, [pc, #148]	; (80020c4 <SystemInit+0xf0>)
 8002030:	681b      	ldr	r3, [r3, #0]
 8002032:	f023 030f 	bic.w	r3, r3, #15
 8002036:	4a23      	ldr	r2, [pc, #140]	; (80020c4 <SystemInit+0xf0>)
 8002038:	f043 0307 	orr.w	r3, r3, #7
 800203c:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 800203e:	4b22      	ldr	r3, [pc, #136]	; (80020c8 <SystemInit+0xf4>)
 8002040:	2200      	movs	r2, #0
 8002042:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8002044:	4b20      	ldr	r3, [pc, #128]	; (80020c8 <SystemInit+0xf4>)
 8002046:	2200      	movs	r2, #0
 8002048:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 800204a:	4b1f      	ldr	r3, [pc, #124]	; (80020c8 <SystemInit+0xf4>)
 800204c:	2200      	movs	r2, #0
 800204e:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8002050:	4b1d      	ldr	r3, [pc, #116]	; (80020c8 <SystemInit+0xf4>)
 8002052:	4a1f      	ldr	r2, [pc, #124]	; (80020d0 <SystemInit+0xfc>)
 8002054:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8002056:	4b1c      	ldr	r3, [pc, #112]	; (80020c8 <SystemInit+0xf4>)
 8002058:	4a1e      	ldr	r2, [pc, #120]	; (80020d4 <SystemInit+0x100>)
 800205a:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 800205c:	4b1a      	ldr	r3, [pc, #104]	; (80020c8 <SystemInit+0xf4>)
 800205e:	4a1e      	ldr	r2, [pc, #120]	; (80020d8 <SystemInit+0x104>)
 8002060:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8002062:	4b19      	ldr	r3, [pc, #100]	; (80020c8 <SystemInit+0xf4>)
 8002064:	2200      	movs	r2, #0
 8002066:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8002068:	4b17      	ldr	r3, [pc, #92]	; (80020c8 <SystemInit+0xf4>)
 800206a:	4a1b      	ldr	r2, [pc, #108]	; (80020d8 <SystemInit+0x104>)
 800206c:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 800206e:	4b16      	ldr	r3, [pc, #88]	; (80020c8 <SystemInit+0xf4>)
 8002070:	2200      	movs	r2, #0
 8002072:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8002074:	4b14      	ldr	r3, [pc, #80]	; (80020c8 <SystemInit+0xf4>)
 8002076:	4a18      	ldr	r2, [pc, #96]	; (80020d8 <SystemInit+0x104>)
 8002078:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 800207a:	4b13      	ldr	r3, [pc, #76]	; (80020c8 <SystemInit+0xf4>)
 800207c:	2200      	movs	r2, #0
 800207e:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8002080:	4b11      	ldr	r3, [pc, #68]	; (80020c8 <SystemInit+0xf4>)
 8002082:	681b      	ldr	r3, [r3, #0]
 8002084:	4a10      	ldr	r2, [pc, #64]	; (80020c8 <SystemInit+0xf4>)
 8002086:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800208a:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 800208c:	4b0e      	ldr	r3, [pc, #56]	; (80020c8 <SystemInit+0xf4>)
 800208e:	2200      	movs	r2, #0
 8002090:	661a      	str	r2, [r3, #96]	; 0x60

#if (STM32H7_DEV_ID == 0x450UL)
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 8002092:	4b12      	ldr	r3, [pc, #72]	; (80020dc <SystemInit+0x108>)
 8002094:	681a      	ldr	r2, [r3, #0]
 8002096:	4b12      	ldr	r3, [pc, #72]	; (80020e0 <SystemInit+0x10c>)
 8002098:	4013      	ands	r3, r2
 800209a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800209e:	d202      	bcs.n	80020a6 <SystemInit+0xd2>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 80020a0:	4b10      	ldr	r3, [pc, #64]	; (80020e4 <SystemInit+0x110>)
 80020a2:	2201      	movs	r2, #1
 80020a4:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 80020a6:	4b10      	ldr	r3, [pc, #64]	; (80020e8 <SystemInit+0x114>)
 80020a8:	f243 02d2 	movw	r2, #12498	; 0x30d2
 80020ac:	601a      	str	r2, [r3, #0]

  /* Configure the Vector Table location add offset address for cortex-M7 ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = D1_AXISRAM_BASE  | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal AXI-RAM */
#else
  SCB->VTOR = FLASH_BANK1_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80020ae:	4b04      	ldr	r3, [pc, #16]	; (80020c0 <SystemInit+0xec>)
 80020b0:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80020b4:	609a      	str	r2, [r3, #8]
#endif

#endif /*DUAL_CORE && CORE_CM4*/

}
 80020b6:	bf00      	nop
 80020b8:	46bd      	mov	sp, r7
 80020ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020be:	4770      	bx	lr
 80020c0:	e000ed00 	.word	0xe000ed00
 80020c4:	52002000 	.word	0x52002000
 80020c8:	58024400 	.word	0x58024400
 80020cc:	eaf6ed7f 	.word	0xeaf6ed7f
 80020d0:	02020200 	.word	0x02020200
 80020d4:	01ff0000 	.word	0x01ff0000
 80020d8:	01010280 	.word	0x01010280
 80020dc:	5c001000 	.word	0x5c001000
 80020e0:	ffff0000 	.word	0xffff0000
 80020e4:	51008108 	.word	0x51008108
 80020e8:	52004000 	.word	0x52004000

080020ec <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 80020ec:	b580      	push	{r7, lr}
 80020ee:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80020f0:	4b22      	ldr	r3, [pc, #136]	; (800217c <MX_USART1_UART_Init+0x90>)
 80020f2:	4a23      	ldr	r2, [pc, #140]	; (8002180 <MX_USART1_UART_Init+0x94>)
 80020f4:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80020f6:	4b21      	ldr	r3, [pc, #132]	; (800217c <MX_USART1_UART_Init+0x90>)
 80020f8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80020fc:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80020fe:	4b1f      	ldr	r3, [pc, #124]	; (800217c <MX_USART1_UART_Init+0x90>)
 8002100:	2200      	movs	r2, #0
 8002102:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8002104:	4b1d      	ldr	r3, [pc, #116]	; (800217c <MX_USART1_UART_Init+0x90>)
 8002106:	2200      	movs	r2, #0
 8002108:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800210a:	4b1c      	ldr	r3, [pc, #112]	; (800217c <MX_USART1_UART_Init+0x90>)
 800210c:	2200      	movs	r2, #0
 800210e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8002110:	4b1a      	ldr	r3, [pc, #104]	; (800217c <MX_USART1_UART_Init+0x90>)
 8002112:	220c      	movs	r2, #12
 8002114:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002116:	4b19      	ldr	r3, [pc, #100]	; (800217c <MX_USART1_UART_Init+0x90>)
 8002118:	2200      	movs	r2, #0
 800211a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800211c:	4b17      	ldr	r3, [pc, #92]	; (800217c <MX_USART1_UART_Init+0x90>)
 800211e:	2200      	movs	r2, #0
 8002120:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002122:	4b16      	ldr	r3, [pc, #88]	; (800217c <MX_USART1_UART_Init+0x90>)
 8002124:	2200      	movs	r2, #0
 8002126:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8002128:	4b14      	ldr	r3, [pc, #80]	; (800217c <MX_USART1_UART_Init+0x90>)
 800212a:	2200      	movs	r2, #0
 800212c:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800212e:	4b13      	ldr	r3, [pc, #76]	; (800217c <MX_USART1_UART_Init+0x90>)
 8002130:	2200      	movs	r2, #0
 8002132:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8002134:	4811      	ldr	r0, [pc, #68]	; (800217c <MX_USART1_UART_Init+0x90>)
 8002136:	f00a fabd 	bl	800c6b4 <HAL_UART_Init>
 800213a:	4603      	mov	r3, r0
 800213c:	2b00      	cmp	r3, #0
 800213e:	d001      	beq.n	8002144 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 8002140:	f7ff fbf2 	bl	8001928 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002144:	2100      	movs	r1, #0
 8002146:	480d      	ldr	r0, [pc, #52]	; (800217c <MX_USART1_UART_Init+0x90>)
 8002148:	f00b fa14 	bl	800d574 <HAL_UARTEx_SetTxFifoThreshold>
 800214c:	4603      	mov	r3, r0
 800214e:	2b00      	cmp	r3, #0
 8002150:	d001      	beq.n	8002156 <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 8002152:	f7ff fbe9 	bl	8001928 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002156:	2100      	movs	r1, #0
 8002158:	4808      	ldr	r0, [pc, #32]	; (800217c <MX_USART1_UART_Init+0x90>)
 800215a:	f00b fa49 	bl	800d5f0 <HAL_UARTEx_SetRxFifoThreshold>
 800215e:	4603      	mov	r3, r0
 8002160:	2b00      	cmp	r3, #0
 8002162:	d001      	beq.n	8002168 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 8002164:	f7ff fbe0 	bl	8001928 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8002168:	4804      	ldr	r0, [pc, #16]	; (800217c <MX_USART1_UART_Init+0x90>)
 800216a:	f00b f9ca 	bl	800d502 <HAL_UARTEx_DisableFifoMode>
 800216e:	4603      	mov	r3, r0
 8002170:	2b00      	cmp	r3, #0
 8002172:	d001      	beq.n	8002178 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 8002174:	f7ff fbd8 	bl	8001928 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8002178:	bf00      	nop
 800217a:	bd80      	pop	{r7, pc}
 800217c:	24000898 	.word	0x24000898
 8002180:	40011000 	.word	0x40011000

08002184 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8002184:	b580      	push	{r7, lr}
 8002186:	b0b8      	sub	sp, #224	; 0xe0
 8002188:	af00      	add	r7, sp, #0
 800218a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800218c:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8002190:	2200      	movs	r2, #0
 8002192:	601a      	str	r2, [r3, #0]
 8002194:	605a      	str	r2, [r3, #4]
 8002196:	609a      	str	r2, [r3, #8]
 8002198:	60da      	str	r2, [r3, #12]
 800219a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800219c:	f107 0310 	add.w	r3, r7, #16
 80021a0:	22bc      	movs	r2, #188	; 0xbc
 80021a2:	2100      	movs	r1, #0
 80021a4:	4618      	mov	r0, r3
 80021a6:	f011 fc0f 	bl	80139c8 <memset>
  if(uartHandle->Instance==USART1)
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	681b      	ldr	r3, [r3, #0]
 80021ae:	4a25      	ldr	r2, [pc, #148]	; (8002244 <HAL_UART_MspInit+0xc0>)
 80021b0:	4293      	cmp	r3, r2
 80021b2:	d142      	bne.n	800223a <HAL_UART_MspInit+0xb6>
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 80021b4:	2301      	movs	r3, #1
 80021b6:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.Usart16ClockSelection = RCC_USART16CLKSOURCE_D2PCLK2;
 80021b8:	2300      	movs	r3, #0
 80021ba:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80021be:	f107 0310 	add.w	r3, r7, #16
 80021c2:	4618      	mov	r0, r3
 80021c4:	f005 fd58 	bl	8007c78 <HAL_RCCEx_PeriphCLKConfig>
 80021c8:	4603      	mov	r3, r0
 80021ca:	2b00      	cmp	r3, #0
 80021cc:	d001      	beq.n	80021d2 <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 80021ce:	f7ff fbab 	bl	8001928 <Error_Handler>
    }

    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80021d2:	4b1d      	ldr	r3, [pc, #116]	; (8002248 <HAL_UART_MspInit+0xc4>)
 80021d4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80021d8:	4a1b      	ldr	r2, [pc, #108]	; (8002248 <HAL_UART_MspInit+0xc4>)
 80021da:	f043 0310 	orr.w	r3, r3, #16
 80021de:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 80021e2:	4b19      	ldr	r3, [pc, #100]	; (8002248 <HAL_UART_MspInit+0xc4>)
 80021e4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80021e8:	f003 0310 	and.w	r3, r3, #16
 80021ec:	60fb      	str	r3, [r7, #12]
 80021ee:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80021f0:	4b15      	ldr	r3, [pc, #84]	; (8002248 <HAL_UART_MspInit+0xc4>)
 80021f2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80021f6:	4a14      	ldr	r2, [pc, #80]	; (8002248 <HAL_UART_MspInit+0xc4>)
 80021f8:	f043 0301 	orr.w	r3, r3, #1
 80021fc:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002200:	4b11      	ldr	r3, [pc, #68]	; (8002248 <HAL_UART_MspInit+0xc4>)
 8002202:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002206:	f003 0301 	and.w	r3, r3, #1
 800220a:	60bb      	str	r3, [r7, #8]
 800220c:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 800220e:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8002212:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002216:	2302      	movs	r3, #2
 8002218:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800221c:	2300      	movs	r3, #0
 800221e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002222:	2300      	movs	r3, #0
 8002224:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8002228:	2307      	movs	r3, #7
 800222a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800222e:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8002232:	4619      	mov	r1, r3
 8002234:	4805      	ldr	r0, [pc, #20]	; (800224c <HAL_UART_MspInit+0xc8>)
 8002236:	f002 fb83 	bl	8004940 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 800223a:	bf00      	nop
 800223c:	37e0      	adds	r7, #224	; 0xe0
 800223e:	46bd      	mov	sp, r7
 8002240:	bd80      	pop	{r7, pc}
 8002242:	bf00      	nop
 8002244:	40011000 	.word	0x40011000
 8002248:	58024400 	.word	0x58024400
 800224c:	58020000 	.word	0x58020000

08002250 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8002250:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002288 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8002254:	f7ff febe 	bl	8001fd4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002258:	480c      	ldr	r0, [pc, #48]	; (800228c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800225a:	490d      	ldr	r1, [pc, #52]	; (8002290 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 800225c:	4a0d      	ldr	r2, [pc, #52]	; (8002294 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800225e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002260:	e002      	b.n	8002268 <LoopCopyDataInit>

08002262 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002262:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002264:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002266:	3304      	adds	r3, #4

08002268 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002268:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800226a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800226c:	d3f9      	bcc.n	8002262 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800226e:	4a0a      	ldr	r2, [pc, #40]	; (8002298 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8002270:	4c0a      	ldr	r4, [pc, #40]	; (800229c <LoopFillZerobss+0x22>)
  movs r3, #0
 8002272:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002274:	e001      	b.n	800227a <LoopFillZerobss>

08002276 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002276:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002278:	3204      	adds	r2, #4

0800227a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800227a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800227c:	d3fb      	bcc.n	8002276 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800227e:	f011 fb71 	bl	8013964 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002282:	f011 f9c5 	bl	8013610 <main>
  bx  lr
 8002286:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8002288:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 800228c:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8002290:	24000330 	.word	0x24000330
  ldr r2, =_sidata
 8002294:	080173fc 	.word	0x080173fc
  ldr r2, =_sbss
 8002298:	24000330 	.word	0x24000330
  ldr r4, =_ebss
 800229c:	24001260 	.word	0x24001260

080022a0 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80022a0:	e7fe      	b.n	80022a0 <ADC3_IRQHandler>
	...

080022a4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80022a4:	b580      	push	{r7, lr}
 80022a6:	b082      	sub	sp, #8
 80022a8:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80022aa:	2003      	movs	r0, #3
 80022ac:	f001 fa2c 	bl	8003708 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80022b0:	f005 fb0c 	bl	80078cc <HAL_RCC_GetSysClockFreq>
 80022b4:	4602      	mov	r2, r0
 80022b6:	4b15      	ldr	r3, [pc, #84]	; (800230c <HAL_Init+0x68>)
 80022b8:	699b      	ldr	r3, [r3, #24]
 80022ba:	0a1b      	lsrs	r3, r3, #8
 80022bc:	f003 030f 	and.w	r3, r3, #15
 80022c0:	4913      	ldr	r1, [pc, #76]	; (8002310 <HAL_Init+0x6c>)
 80022c2:	5ccb      	ldrb	r3, [r1, r3]
 80022c4:	f003 031f 	and.w	r3, r3, #31
 80022c8:	fa22 f303 	lsr.w	r3, r2, r3
 80022cc:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80022ce:	4b0f      	ldr	r3, [pc, #60]	; (800230c <HAL_Init+0x68>)
 80022d0:	699b      	ldr	r3, [r3, #24]
 80022d2:	f003 030f 	and.w	r3, r3, #15
 80022d6:	4a0e      	ldr	r2, [pc, #56]	; (8002310 <HAL_Init+0x6c>)
 80022d8:	5cd3      	ldrb	r3, [r2, r3]
 80022da:	f003 031f 	and.w	r3, r3, #31
 80022de:	687a      	ldr	r2, [r7, #4]
 80022e0:	fa22 f303 	lsr.w	r3, r2, r3
 80022e4:	4a0b      	ldr	r2, [pc, #44]	; (8002314 <HAL_Init+0x70>)
 80022e6:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80022e8:	4a0b      	ldr	r2, [pc, #44]	; (8002318 <HAL_Init+0x74>)
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80022ee:	2000      	movs	r0, #0
 80022f0:	f000 f814 	bl	800231c <HAL_InitTick>
 80022f4:	4603      	mov	r3, r0
 80022f6:	2b00      	cmp	r3, #0
 80022f8:	d001      	beq.n	80022fe <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 80022fa:	2301      	movs	r3, #1
 80022fc:	e002      	b.n	8002304 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 80022fe:	f7ff fd41 	bl	8001d84 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002302:	2300      	movs	r3, #0
}
 8002304:	4618      	mov	r0, r3
 8002306:	3708      	adds	r7, #8
 8002308:	46bd      	mov	sp, r7
 800230a:	bd80      	pop	{r7, pc}
 800230c:	58024400 	.word	0x58024400
 8002310:	08016790 	.word	0x08016790
 8002314:	24000004 	.word	0x24000004
 8002318:	24000000 	.word	0x24000000

0800231c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800231c:	b580      	push	{r7, lr}
 800231e:	b082      	sub	sp, #8
 8002320:	af00      	add	r7, sp, #0
 8002322:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8002324:	4b15      	ldr	r3, [pc, #84]	; (800237c <HAL_InitTick+0x60>)
 8002326:	781b      	ldrb	r3, [r3, #0]
 8002328:	2b00      	cmp	r3, #0
 800232a:	d101      	bne.n	8002330 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 800232c:	2301      	movs	r3, #1
 800232e:	e021      	b.n	8002374 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8002330:	4b13      	ldr	r3, [pc, #76]	; (8002380 <HAL_InitTick+0x64>)
 8002332:	681a      	ldr	r2, [r3, #0]
 8002334:	4b11      	ldr	r3, [pc, #68]	; (800237c <HAL_InitTick+0x60>)
 8002336:	781b      	ldrb	r3, [r3, #0]
 8002338:	4619      	mov	r1, r3
 800233a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800233e:	fbb3 f3f1 	udiv	r3, r3, r1
 8002342:	fbb2 f3f3 	udiv	r3, r2, r3
 8002346:	4618      	mov	r0, r3
 8002348:	f001 fa11 	bl	800376e <HAL_SYSTICK_Config>
 800234c:	4603      	mov	r3, r0
 800234e:	2b00      	cmp	r3, #0
 8002350:	d001      	beq.n	8002356 <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8002352:	2301      	movs	r3, #1
 8002354:	e00e      	b.n	8002374 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	2b0f      	cmp	r3, #15
 800235a:	d80a      	bhi.n	8002372 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800235c:	2200      	movs	r2, #0
 800235e:	6879      	ldr	r1, [r7, #4]
 8002360:	f04f 30ff 	mov.w	r0, #4294967295
 8002364:	f001 f9db 	bl	800371e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002368:	4a06      	ldr	r2, [pc, #24]	; (8002384 <HAL_InitTick+0x68>)
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800236e:	2300      	movs	r3, #0
 8002370:	e000      	b.n	8002374 <HAL_InitTick+0x58>
    return HAL_ERROR;
 8002372:	2301      	movs	r3, #1
}
 8002374:	4618      	mov	r0, r3
 8002376:	3708      	adds	r7, #8
 8002378:	46bd      	mov	sp, r7
 800237a:	bd80      	pop	{r7, pc}
 800237c:	2400000c 	.word	0x2400000c
 8002380:	24000000 	.word	0x24000000
 8002384:	24000008 	.word	0x24000008

08002388 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002388:	b480      	push	{r7}
 800238a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 800238c:	4b06      	ldr	r3, [pc, #24]	; (80023a8 <HAL_IncTick+0x20>)
 800238e:	781b      	ldrb	r3, [r3, #0]
 8002390:	461a      	mov	r2, r3
 8002392:	4b06      	ldr	r3, [pc, #24]	; (80023ac <HAL_IncTick+0x24>)
 8002394:	681b      	ldr	r3, [r3, #0]
 8002396:	4413      	add	r3, r2
 8002398:	4a04      	ldr	r2, [pc, #16]	; (80023ac <HAL_IncTick+0x24>)
 800239a:	6013      	str	r3, [r2, #0]
}
 800239c:	bf00      	nop
 800239e:	46bd      	mov	sp, r7
 80023a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023a4:	4770      	bx	lr
 80023a6:	bf00      	nop
 80023a8:	2400000c 	.word	0x2400000c
 80023ac:	24000928 	.word	0x24000928

080023b0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80023b0:	b480      	push	{r7}
 80023b2:	af00      	add	r7, sp, #0
  return uwTick;
 80023b4:	4b03      	ldr	r3, [pc, #12]	; (80023c4 <HAL_GetTick+0x14>)
 80023b6:	681b      	ldr	r3, [r3, #0]
}
 80023b8:	4618      	mov	r0, r3
 80023ba:	46bd      	mov	sp, r7
 80023bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023c0:	4770      	bx	lr
 80023c2:	bf00      	nop
 80023c4:	24000928 	.word	0x24000928

080023c8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80023c8:	b580      	push	{r7, lr}
 80023ca:	b084      	sub	sp, #16
 80023cc:	af00      	add	r7, sp, #0
 80023ce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80023d0:	f7ff ffee 	bl	80023b0 <HAL_GetTick>
 80023d4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80023da:	68fb      	ldr	r3, [r7, #12]
 80023dc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80023e0:	d005      	beq.n	80023ee <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80023e2:	4b0a      	ldr	r3, [pc, #40]	; (800240c <HAL_Delay+0x44>)
 80023e4:	781b      	ldrb	r3, [r3, #0]
 80023e6:	461a      	mov	r2, r3
 80023e8:	68fb      	ldr	r3, [r7, #12]
 80023ea:	4413      	add	r3, r2
 80023ec:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80023ee:	bf00      	nop
 80023f0:	f7ff ffde 	bl	80023b0 <HAL_GetTick>
 80023f4:	4602      	mov	r2, r0
 80023f6:	68bb      	ldr	r3, [r7, #8]
 80023f8:	1ad3      	subs	r3, r2, r3
 80023fa:	68fa      	ldr	r2, [r7, #12]
 80023fc:	429a      	cmp	r2, r3
 80023fe:	d8f7      	bhi.n	80023f0 <HAL_Delay+0x28>
  {
  }
}
 8002400:	bf00      	nop
 8002402:	bf00      	nop
 8002404:	3710      	adds	r7, #16
 8002406:	46bd      	mov	sp, r7
 8002408:	bd80      	pop	{r7, pc}
 800240a:	bf00      	nop
 800240c:	2400000c 	.word	0x2400000c

08002410 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8002410:	b480      	push	{r7}
 8002412:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8002414:	4b03      	ldr	r3, [pc, #12]	; (8002424 <HAL_GetREVID+0x14>)
 8002416:	681b      	ldr	r3, [r3, #0]
 8002418:	0c1b      	lsrs	r3, r3, #16
}
 800241a:	4618      	mov	r0, r3
 800241c:	46bd      	mov	sp, r7
 800241e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002422:	4770      	bx	lr
 8002424:	5c001000 	.word	0x5c001000

08002428 <HAL_SetFMCMemorySwappingConfig>:
  * @param  BankMapConfig: Defines the FMC Bank mapping configuration. This parameter can be
            FMC_SWAPBMAP_DISABLE, FMC_SWAPBMAP_SDRAM_SRAM, FMC_SWAPBMAP_SDRAMB2
  * @retval HAL state
  */
void HAL_SetFMCMemorySwappingConfig(uint32_t BankMapConfig)
{
 8002428:	b480      	push	{r7}
 800242a:	b083      	sub	sp, #12
 800242c:	af00      	add	r7, sp, #0
 800242e:	6078      	str	r0, [r7, #4]
  /* Check the parameter */
  assert_param(IS_FMC_SWAPBMAP_MODE(BankMapConfig));
  MODIFY_REG(FMC_Bank1_R->BTCR[0], FMC_BCR1_BMAP, BankMapConfig);
 8002430:	4b06      	ldr	r3, [pc, #24]	; (800244c <HAL_SetFMCMemorySwappingConfig+0x24>)
 8002432:	681b      	ldr	r3, [r3, #0]
 8002434:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8002438:	4904      	ldr	r1, [pc, #16]	; (800244c <HAL_SetFMCMemorySwappingConfig+0x24>)
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	4313      	orrs	r3, r2
 800243e:	600b      	str	r3, [r1, #0]
}
 8002440:	bf00      	nop
 8002442:	370c      	adds	r7, #12
 8002444:	46bd      	mov	sp, r7
 8002446:	f85d 7b04 	ldr.w	r7, [sp], #4
 800244a:	4770      	bx	lr
 800244c:	52004000 	.word	0x52004000

08002450 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8002450:	b480      	push	{r7}
 8002452:	b083      	sub	sp, #12
 8002454:	af00      	add	r7, sp, #0
 8002456:	6078      	str	r0, [r7, #4]
 8002458:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	689b      	ldr	r3, [r3, #8]
 800245e:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 8002462:	683b      	ldr	r3, [r7, #0]
 8002464:	431a      	orrs	r2, r3
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	609a      	str	r2, [r3, #8]
}
 800246a:	bf00      	nop
 800246c:	370c      	adds	r7, #12
 800246e:	46bd      	mov	sp, r7
 8002470:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002474:	4770      	bx	lr

08002476 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8002476:	b480      	push	{r7}
 8002478:	b083      	sub	sp, #12
 800247a:	af00      	add	r7, sp, #0
 800247c:	6078      	str	r0, [r7, #4]
 800247e:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	689b      	ldr	r3, [r3, #8]
 8002484:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8002488:	683b      	ldr	r3, [r7, #0]
 800248a:	431a      	orrs	r2, r3
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	609a      	str	r2, [r3, #8]
}
 8002490:	bf00      	nop
 8002492:	370c      	adds	r7, #12
 8002494:	46bd      	mov	sp, r7
 8002496:	f85d 7b04 	ldr.w	r7, [sp], #4
 800249a:	4770      	bx	lr

0800249c <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 800249c:	b480      	push	{r7}
 800249e:	b083      	sub	sp, #12
 80024a0:	af00      	add	r7, sp, #0
 80024a2:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	689b      	ldr	r3, [r3, #8]
 80024a8:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 80024ac:	4618      	mov	r0, r3
 80024ae:	370c      	adds	r7, #12
 80024b0:	46bd      	mov	sp, r7
 80024b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024b6:	4770      	bx	lr

080024b8 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0x1FFFFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 80024b8:	b480      	push	{r7}
 80024ba:	b087      	sub	sp, #28
 80024bc:	af00      	add	r7, sp, #0
 80024be:	60f8      	str	r0, [r7, #12]
 80024c0:	60b9      	str	r1, [r7, #8]
 80024c2:	607a      	str	r2, [r7, #4]
 80024c4:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80024c6:	68fb      	ldr	r3, [r7, #12]
 80024c8:	3360      	adds	r3, #96	; 0x60
 80024ca:	461a      	mov	r2, r3
 80024cc:	68bb      	ldr	r3, [r7, #8]
 80024ce:	009b      	lsls	r3, r3, #2
 80024d0:	4413      	add	r3, r2
 80024d2:	617b      	str	r3, [r7, #20]
               ADC3_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
  else
#endif /* ADC_VER_V5_V90 */
  {
    MODIFY_REG(*preg,
 80024d4:	697b      	ldr	r3, [r7, #20]
 80024d6:	681b      	ldr	r3, [r3, #0]
 80024d8:	f003 4200 	and.w	r2, r3, #2147483648	; 0x80000000
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	f003 41f8 	and.w	r1, r3, #2080374784	; 0x7c000000
 80024e2:	683b      	ldr	r3, [r7, #0]
 80024e4:	430b      	orrs	r3, r1
 80024e6:	431a      	orrs	r2, r3
 80024e8:	697b      	ldr	r3, [r7, #20]
 80024ea:	601a      	str	r2, [r3, #0]
               ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
               (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
}
 80024ec:	bf00      	nop
 80024ee:	371c      	adds	r7, #28
 80024f0:	46bd      	mov	sp, r7
 80024f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024f6:	4770      	bx	lr

080024f8 <LL_ADC_SetDataRightShift>:
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_ENABLE
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetDataRightShift(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t RigthShift)
{
 80024f8:	b480      	push	{r7}
 80024fa:	b085      	sub	sp, #20
 80024fc:	af00      	add	r7, sp, #0
 80024fe:	60f8      	str	r0, [r7, #12]
 8002500:	60b9      	str	r1, [r7, #8]
 8002502:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->CFGR2, (ADC_CFGR2_RSHIFT1 | ADC_CFGR2_RSHIFT2 | ADC_CFGR2_RSHIFT3 | ADC_CFGR2_RSHIFT4), RigthShift << (Offsety & 0x1FUL));
 8002504:	68fb      	ldr	r3, [r7, #12]
 8002506:	691b      	ldr	r3, [r3, #16]
 8002508:	f423 42f0 	bic.w	r2, r3, #30720	; 0x7800
 800250c:	68bb      	ldr	r3, [r7, #8]
 800250e:	f003 031f 	and.w	r3, r3, #31
 8002512:	6879      	ldr	r1, [r7, #4]
 8002514:	fa01 f303 	lsl.w	r3, r1, r3
 8002518:	431a      	orrs	r2, r3
 800251a:	68fb      	ldr	r3, [r7, #12]
 800251c:	611a      	str	r2, [r3, #16]
}
 800251e:	bf00      	nop
 8002520:	3714      	adds	r7, #20
 8002522:	46bd      	mov	sp, r7
 8002524:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002528:	4770      	bx	lr

0800252a <LL_ADC_SetOffsetSignedSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSignedSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSignedSaturation)
{
 800252a:	b480      	push	{r7}
 800252c:	b087      	sub	sp, #28
 800252e:	af00      	add	r7, sp, #0
 8002530:	60f8      	str	r0, [r7, #12]
 8002532:	60b9      	str	r1, [r7, #8]
 8002534:	607a      	str	r2, [r7, #4]
    /* Function not available on this instance */
  }
  else
#endif  /* ADC_VER_V5_V90 */
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002536:	68fb      	ldr	r3, [r7, #12]
 8002538:	3360      	adds	r3, #96	; 0x60
 800253a:	461a      	mov	r2, r3
 800253c:	68bb      	ldr	r3, [r7, #8]
 800253e:	009b      	lsls	r3, r3, #2
 8002540:	4413      	add	r3, r2
 8002542:	617b      	str	r3, [r7, #20]
    MODIFY_REG(*preg, ADC_OFR1_SSATE, OffsetSignedSaturation);
 8002544:	697b      	ldr	r3, [r7, #20]
 8002546:	681b      	ldr	r3, [r3, #0]
 8002548:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	431a      	orrs	r2, r3
 8002550:	697b      	ldr	r3, [r7, #20]
 8002552:	601a      	str	r2, [r3, #0]
  }
}
 8002554:	bf00      	nop
 8002556:	371c      	adds	r7, #28
 8002558:	46bd      	mov	sp, r7
 800255a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800255e:	4770      	bx	lr

08002560 <LL_ADC_REG_SetSequencerRanks>:
  *         (3) On STM32H7, fast channel (0.125 us for 14-bit resolution (ADC conversion rate up to 8 Ms/s)).
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8002560:	b480      	push	{r7}
 8002562:	b087      	sub	sp, #28
 8002564:	af00      	add	r7, sp, #0
 8002566:	60f8      	str	r0, [r7, #12]
 8002568:	60b9      	str	r1, [r7, #8]
 800256a:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 800256c:	68fb      	ldr	r3, [r7, #12]
 800256e:	3330      	adds	r3, #48	; 0x30
 8002570:	461a      	mov	r2, r3
 8002572:	68bb      	ldr	r3, [r7, #8]
 8002574:	0a1b      	lsrs	r3, r3, #8
 8002576:	009b      	lsls	r3, r3, #2
 8002578:	f003 030c 	and.w	r3, r3, #12
 800257c:	4413      	add	r3, r2
 800257e:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002580:	697b      	ldr	r3, [r7, #20]
 8002582:	681a      	ldr	r2, [r3, #0]
 8002584:	68bb      	ldr	r3, [r7, #8]
 8002586:	f003 031f 	and.w	r3, r3, #31
 800258a:	211f      	movs	r1, #31
 800258c:	fa01 f303 	lsl.w	r3, r1, r3
 8002590:	43db      	mvns	r3, r3
 8002592:	401a      	ands	r2, r3
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	0e9b      	lsrs	r3, r3, #26
 8002598:	f003 011f 	and.w	r1, r3, #31
 800259c:	68bb      	ldr	r3, [r7, #8]
 800259e:	f003 031f 	and.w	r3, r3, #31
 80025a2:	fa01 f303 	lsl.w	r3, r1, r3
 80025a6:	431a      	orrs	r2, r3
 80025a8:	697b      	ldr	r3, [r7, #20]
 80025aa:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 80025ac:	bf00      	nop
 80025ae:	371c      	adds	r7, #28
 80025b0:	46bd      	mov	sp, r7
 80025b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025b6:	4770      	bx	lr

080025b8 <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_387CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_810CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 80025b8:	b480      	push	{r7}
 80025ba:	b087      	sub	sp, #28
 80025bc:	af00      	add	r7, sp, #0
 80025be:	60f8      	str	r0, [r7, #12]
 80025c0:	60b9      	str	r1, [r7, #8]
 80025c2:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 80025c4:	68fb      	ldr	r3, [r7, #12]
 80025c6:	3314      	adds	r3, #20
 80025c8:	461a      	mov	r2, r3
 80025ca:	68bb      	ldr	r3, [r7, #8]
 80025cc:	0e5b      	lsrs	r3, r3, #25
 80025ce:	009b      	lsls	r3, r3, #2
 80025d0:	f003 0304 	and.w	r3, r3, #4
 80025d4:	4413      	add	r3, r2
 80025d6:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80025d8:	697b      	ldr	r3, [r7, #20]
 80025da:	681a      	ldr	r2, [r3, #0]
 80025dc:	68bb      	ldr	r3, [r7, #8]
 80025de:	0d1b      	lsrs	r3, r3, #20
 80025e0:	f003 031f 	and.w	r3, r3, #31
 80025e4:	2107      	movs	r1, #7
 80025e6:	fa01 f303 	lsl.w	r3, r1, r3
 80025ea:	43db      	mvns	r3, r3
 80025ec:	401a      	ands	r2, r3
 80025ee:	68bb      	ldr	r3, [r7, #8]
 80025f0:	0d1b      	lsrs	r3, r3, #20
 80025f2:	f003 031f 	and.w	r3, r3, #31
 80025f6:	6879      	ldr	r1, [r7, #4]
 80025f8:	fa01 f303 	lsl.w	r3, r1, r3
 80025fc:	431a      	orrs	r2, r3
 80025fe:	697b      	ldr	r3, [r7, #20]
 8002600:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8002602:	bf00      	nop
 8002604:	371c      	adds	r7, #28
 8002606:	46bd      	mov	sp, r7
 8002608:	f85d 7b04 	ldr.w	r7, [sp], #4
 800260c:	4770      	bx	lr
	...

08002610 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8002610:	b480      	push	{r7}
 8002612:	b085      	sub	sp, #20
 8002614:	af00      	add	r7, sp, #0
 8002616:	60f8      	str	r0, [r7, #12]
 8002618:	60b9      	str	r1, [r7, #8]
 800261a:	607a      	str	r2, [r7, #4]
  }
#else  /* ADC_VER_V5_V90 */
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 800261c:	68fb      	ldr	r3, [r7, #12]
 800261e:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
 8002622:	68bb      	ldr	r3, [r7, #8]
 8002624:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002628:	43db      	mvns	r3, r3
 800262a:	401a      	ands	r2, r3
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	f003 0318 	and.w	r3, r3, #24
 8002632:	4908      	ldr	r1, [pc, #32]	; (8002654 <LL_ADC_SetChannelSingleDiff+0x44>)
 8002634:	40d9      	lsrs	r1, r3
 8002636:	68bb      	ldr	r3, [r7, #8]
 8002638:	400b      	ands	r3, r1
 800263a:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800263e:	431a      	orrs	r2, r3
 8002640:	68fb      	ldr	r3, [r7, #12]
 8002642:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
#endif
}
 8002646:	bf00      	nop
 8002648:	3714      	adds	r7, #20
 800264a:	46bd      	mov	sp, r7
 800264c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002650:	4770      	bx	lr
 8002652:	bf00      	nop
 8002654:	000fffff 	.word	0x000fffff

08002658 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8002658:	b480      	push	{r7}
 800265a:	b083      	sub	sp, #12
 800265c:	af00      	add	r7, sp, #0
 800265e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	689a      	ldr	r2, [r3, #8]
 8002664:	4b04      	ldr	r3, [pc, #16]	; (8002678 <LL_ADC_DisableDeepPowerDown+0x20>)
 8002666:	4013      	ands	r3, r2
 8002668:	687a      	ldr	r2, [r7, #4]
 800266a:	6093      	str	r3, [r2, #8]
}
 800266c:	bf00      	nop
 800266e:	370c      	adds	r7, #12
 8002670:	46bd      	mov	sp, r7
 8002672:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002676:	4770      	bx	lr
 8002678:	5fffffc0 	.word	0x5fffffc0

0800267c <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 800267c:	b480      	push	{r7}
 800267e:	b083      	sub	sp, #12
 8002680:	af00      	add	r7, sp, #0
 8002682:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	689b      	ldr	r3, [r3, #8]
 8002688:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800268c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002690:	d101      	bne.n	8002696 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8002692:	2301      	movs	r3, #1
 8002694:	e000      	b.n	8002698 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8002696:	2300      	movs	r3, #0
}
 8002698:	4618      	mov	r0, r3
 800269a:	370c      	adds	r7, #12
 800269c:	46bd      	mov	sp, r7
 800269e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026a2:	4770      	bx	lr

080026a4 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 80026a4:	b480      	push	{r7}
 80026a6:	b083      	sub	sp, #12
 80026a8:	af00      	add	r7, sp, #0
 80026aa:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	689a      	ldr	r2, [r3, #8]
 80026b0:	4b05      	ldr	r3, [pc, #20]	; (80026c8 <LL_ADC_EnableInternalRegulator+0x24>)
 80026b2:	4013      	ands	r3, r2
 80026b4:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 80026bc:	bf00      	nop
 80026be:	370c      	adds	r7, #12
 80026c0:	46bd      	mov	sp, r7
 80026c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026c6:	4770      	bx	lr
 80026c8:	6fffffc0 	.word	0x6fffffc0

080026cc <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 80026cc:	b480      	push	{r7}
 80026ce:	b083      	sub	sp, #12
 80026d0:	af00      	add	r7, sp, #0
 80026d2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	689b      	ldr	r3, [r3, #8]
 80026d8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80026dc:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80026e0:	d101      	bne.n	80026e6 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 80026e2:	2301      	movs	r3, #1
 80026e4:	e000      	b.n	80026e8 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 80026e6:	2300      	movs	r3, #0
}
 80026e8:	4618      	mov	r0, r3
 80026ea:	370c      	adds	r7, #12
 80026ec:	46bd      	mov	sp, r7
 80026ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026f2:	4770      	bx	lr

080026f4 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 80026f4:	b480      	push	{r7}
 80026f6:	b083      	sub	sp, #12
 80026f8:	af00      	add	r7, sp, #0
 80026fa:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	689b      	ldr	r3, [r3, #8]
 8002700:	f003 0301 	and.w	r3, r3, #1
 8002704:	2b01      	cmp	r3, #1
 8002706:	d101      	bne.n	800270c <LL_ADC_IsEnabled+0x18>
 8002708:	2301      	movs	r3, #1
 800270a:	e000      	b.n	800270e <LL_ADC_IsEnabled+0x1a>
 800270c:	2300      	movs	r3, #0
}
 800270e:	4618      	mov	r0, r3
 8002710:	370c      	adds	r7, #12
 8002712:	46bd      	mov	sp, r7
 8002714:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002718:	4770      	bx	lr

0800271a <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 800271a:	b480      	push	{r7}
 800271c:	b083      	sub	sp, #12
 800271e:	af00      	add	r7, sp, #0
 8002720:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	689b      	ldr	r3, [r3, #8]
 8002726:	f003 0304 	and.w	r3, r3, #4
 800272a:	2b04      	cmp	r3, #4
 800272c:	d101      	bne.n	8002732 <LL_ADC_REG_IsConversionOngoing+0x18>
 800272e:	2301      	movs	r3, #1
 8002730:	e000      	b.n	8002734 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8002732:	2300      	movs	r3, #0
}
 8002734:	4618      	mov	r0, r3
 8002736:	370c      	adds	r7, #12
 8002738:	46bd      	mov	sp, r7
 800273a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800273e:	4770      	bx	lr

08002740 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8002740:	b480      	push	{r7}
 8002742:	b083      	sub	sp, #12
 8002744:	af00      	add	r7, sp, #0
 8002746:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	689b      	ldr	r3, [r3, #8]
 800274c:	f003 0308 	and.w	r3, r3, #8
 8002750:	2b08      	cmp	r3, #8
 8002752:	d101      	bne.n	8002758 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8002754:	2301      	movs	r3, #1
 8002756:	e000      	b.n	800275a <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8002758:	2300      	movs	r3, #0
}
 800275a:	4618      	mov	r0, r3
 800275c:	370c      	adds	r7, #12
 800275e:	46bd      	mov	sp, r7
 8002760:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002764:	4770      	bx	lr
	...

08002768 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8002768:	b590      	push	{r4, r7, lr}
 800276a:	b089      	sub	sp, #36	; 0x24
 800276c:	af00      	add	r7, sp, #0
 800276e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002770:	2300      	movs	r3, #0
 8002772:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8002774:	2300      	movs	r3, #0
 8002776:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	2b00      	cmp	r3, #0
 800277c:	d101      	bne.n	8002782 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 800277e:	2301      	movs	r3, #1
 8002780:	e18f      	b.n	8002aa2 <HAL_ADC_Init+0x33a>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	68db      	ldr	r3, [r3, #12]
 8002786:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800278c:	2b00      	cmp	r3, #0
 800278e:	d109      	bne.n	80027a4 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002790:	6878      	ldr	r0, [r7, #4]
 8002792:	f7fe f8c5 	bl	8000920 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	2200      	movs	r2, #0
 800279a:	659a      	str	r2, [r3, #88]	; 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	2200      	movs	r2, #0
 80027a0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	681b      	ldr	r3, [r3, #0]
 80027a8:	4618      	mov	r0, r3
 80027aa:	f7ff ff67 	bl	800267c <LL_ADC_IsDeepPowerDownEnabled>
 80027ae:	4603      	mov	r3, r0
 80027b0:	2b00      	cmp	r3, #0
 80027b2:	d004      	beq.n	80027be <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	681b      	ldr	r3, [r3, #0]
 80027b8:	4618      	mov	r0, r3
 80027ba:	f7ff ff4d 	bl	8002658 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	681b      	ldr	r3, [r3, #0]
 80027c2:	4618      	mov	r0, r3
 80027c4:	f7ff ff82 	bl	80026cc <LL_ADC_IsInternalRegulatorEnabled>
 80027c8:	4603      	mov	r3, r0
 80027ca:	2b00      	cmp	r3, #0
 80027cc:	d114      	bne.n	80027f8 <HAL_ADC_Init+0x90>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	681b      	ldr	r3, [r3, #0]
 80027d2:	4618      	mov	r0, r3
 80027d4:	f7ff ff66 	bl	80026a4 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80027d8:	4b87      	ldr	r3, [pc, #540]	; (80029f8 <HAL_ADC_Init+0x290>)
 80027da:	681b      	ldr	r3, [r3, #0]
 80027dc:	099b      	lsrs	r3, r3, #6
 80027de:	4a87      	ldr	r2, [pc, #540]	; (80029fc <HAL_ADC_Init+0x294>)
 80027e0:	fba2 2303 	umull	r2, r3, r2, r3
 80027e4:	099b      	lsrs	r3, r3, #6
 80027e6:	3301      	adds	r3, #1
 80027e8:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 80027ea:	e002      	b.n	80027f2 <HAL_ADC_Init+0x8a>
    {
      wait_loop_index--;
 80027ec:	68bb      	ldr	r3, [r7, #8]
 80027ee:	3b01      	subs	r3, #1
 80027f0:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 80027f2:	68bb      	ldr	r3, [r7, #8]
 80027f4:	2b00      	cmp	r3, #0
 80027f6:	d1f9      	bne.n	80027ec <HAL_ADC_Init+0x84>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	681b      	ldr	r3, [r3, #0]
 80027fc:	4618      	mov	r0, r3
 80027fe:	f7ff ff65 	bl	80026cc <LL_ADC_IsInternalRegulatorEnabled>
 8002802:	4603      	mov	r3, r0
 8002804:	2b00      	cmp	r3, #0
 8002806:	d10d      	bne.n	8002824 <HAL_ADC_Init+0xbc>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800280c:	f043 0210 	orr.w	r2, r3, #16
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002818:	f043 0201 	orr.w	r2, r3, #1
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8002820:	2301      	movs	r3, #1
 8002822:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	681b      	ldr	r3, [r3, #0]
 8002828:	4618      	mov	r0, r3
 800282a:	f7ff ff76 	bl	800271a <LL_ADC_REG_IsConversionOngoing>
 800282e:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002834:	f003 0310 	and.w	r3, r3, #16
 8002838:	2b00      	cmp	r3, #0
 800283a:	f040 8129 	bne.w	8002a90 <HAL_ADC_Init+0x328>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 800283e:	697b      	ldr	r3, [r7, #20]
 8002840:	2b00      	cmp	r3, #0
 8002842:	f040 8125 	bne.w	8002a90 <HAL_ADC_Init+0x328>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800284a:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 800284e:	f043 0202 	orr.w	r2, r3, #2
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	655a      	str	r2, [r3, #84]	; 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	681b      	ldr	r3, [r3, #0]
 800285a:	4618      	mov	r0, r3
 800285c:	f7ff ff4a 	bl	80026f4 <LL_ADC_IsEnabled>
 8002860:	4603      	mov	r3, r0
 8002862:	2b00      	cmp	r3, #0
 8002864:	d136      	bne.n	80028d4 <HAL_ADC_Init+0x16c>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	681b      	ldr	r3, [r3, #0]
 800286a:	4a65      	ldr	r2, [pc, #404]	; (8002a00 <HAL_ADC_Init+0x298>)
 800286c:	4293      	cmp	r3, r2
 800286e:	d004      	beq.n	800287a <HAL_ADC_Init+0x112>
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	681b      	ldr	r3, [r3, #0]
 8002874:	4a63      	ldr	r2, [pc, #396]	; (8002a04 <HAL_ADC_Init+0x29c>)
 8002876:	4293      	cmp	r3, r2
 8002878:	d10e      	bne.n	8002898 <HAL_ADC_Init+0x130>
 800287a:	4861      	ldr	r0, [pc, #388]	; (8002a00 <HAL_ADC_Init+0x298>)
 800287c:	f7ff ff3a 	bl	80026f4 <LL_ADC_IsEnabled>
 8002880:	4604      	mov	r4, r0
 8002882:	4860      	ldr	r0, [pc, #384]	; (8002a04 <HAL_ADC_Init+0x29c>)
 8002884:	f7ff ff36 	bl	80026f4 <LL_ADC_IsEnabled>
 8002888:	4603      	mov	r3, r0
 800288a:	4323      	orrs	r3, r4
 800288c:	2b00      	cmp	r3, #0
 800288e:	bf0c      	ite	eq
 8002890:	2301      	moveq	r3, #1
 8002892:	2300      	movne	r3, #0
 8002894:	b2db      	uxtb	r3, r3
 8002896:	e008      	b.n	80028aa <HAL_ADC_Init+0x142>
 8002898:	485b      	ldr	r0, [pc, #364]	; (8002a08 <HAL_ADC_Init+0x2a0>)
 800289a:	f7ff ff2b 	bl	80026f4 <LL_ADC_IsEnabled>
 800289e:	4603      	mov	r3, r0
 80028a0:	2b00      	cmp	r3, #0
 80028a2:	bf0c      	ite	eq
 80028a4:	2301      	moveq	r3, #1
 80028a6:	2300      	movne	r3, #0
 80028a8:	b2db      	uxtb	r3, r3
 80028aa:	2b00      	cmp	r3, #0
 80028ac:	d012      	beq.n	80028d4 <HAL_ADC_Init+0x16c>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	681b      	ldr	r3, [r3, #0]
 80028b2:	4a53      	ldr	r2, [pc, #332]	; (8002a00 <HAL_ADC_Init+0x298>)
 80028b4:	4293      	cmp	r3, r2
 80028b6:	d004      	beq.n	80028c2 <HAL_ADC_Init+0x15a>
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	681b      	ldr	r3, [r3, #0]
 80028bc:	4a51      	ldr	r2, [pc, #324]	; (8002a04 <HAL_ADC_Init+0x29c>)
 80028be:	4293      	cmp	r3, r2
 80028c0:	d101      	bne.n	80028c6 <HAL_ADC_Init+0x15e>
 80028c2:	4a52      	ldr	r2, [pc, #328]	; (8002a0c <HAL_ADC_Init+0x2a4>)
 80028c4:	e000      	b.n	80028c8 <HAL_ADC_Init+0x160>
 80028c6:	4a52      	ldr	r2, [pc, #328]	; (8002a10 <HAL_ADC_Init+0x2a8>)
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	685b      	ldr	r3, [r3, #4]
 80028cc:	4619      	mov	r1, r3
 80028ce:	4610      	mov	r0, r2
 80028d0:	f7ff fdbe 	bl	8002450 <LL_ADC_SetCommonClock>
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
    }

#else

    if ((HAL_GetREVID() > REV_ID_Y) && (ADC_RESOLUTION_8B == hadc->Init.Resolution))
 80028d4:	f7ff fd9c 	bl	8002410 <HAL_GetREVID>
 80028d8:	4603      	mov	r3, r0
 80028da:	f241 0203 	movw	r2, #4099	; 0x1003
 80028de:	4293      	cmp	r3, r2
 80028e0:	d914      	bls.n	800290c <HAL_ADC_Init+0x1a4>
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	689b      	ldr	r3, [r3, #8]
 80028e6:	2b10      	cmp	r3, #16
 80028e8:	d110      	bne.n	800290c <HAL_ADC_Init+0x1a4>
    {
      /* for STM32H7 silicon rev.B and above , ADC_CFGR_RES value for 8bits resolution is : b111 */
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	7d5b      	ldrb	r3, [r3, #21]
 80028ee:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 80028f4:	431a      	orrs	r2, r3
                  hadc->Init.Resolution | (ADC_CFGR_RES_1 | ADC_CFGR_RES_0)                |
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 80028fa:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	7f1b      	ldrb	r3, [r3, #28]
 8002900:	041b      	lsls	r3, r3, #16
                  hadc->Init.Resolution | (ADC_CFGR_RES_1 | ADC_CFGR_RES_0)                |
 8002902:	4313      	orrs	r3, r2
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8002904:	f043 030c 	orr.w	r3, r3, #12
 8002908:	61bb      	str	r3, [r7, #24]
 800290a:	e00d      	b.n	8002928 <HAL_ADC_Init+0x1c0>
    }
    else
    {

      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	7d5b      	ldrb	r3, [r3, #21]
 8002910:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	6b1b      	ldr	r3, [r3, #48]	; 0x30
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8002916:	431a      	orrs	r2, r3
                  hadc->Init.Resolution                                                 |
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 800291c:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	7f1b      	ldrb	r3, [r3, #28]
 8002922:	041b      	lsls	r3, r3, #16
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8002924:	4313      	orrs	r3, r2
 8002926:	61bb      	str	r3, [r7, #24]
    }

#endif /* ADC_VER_V5_3 */

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	7f1b      	ldrb	r3, [r3, #28]
 800292c:	2b01      	cmp	r3, #1
 800292e:	d106      	bne.n	800293e <HAL_ADC_Init+0x1d6>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	6a1b      	ldr	r3, [r3, #32]
 8002934:	3b01      	subs	r3, #1
 8002936:	045b      	lsls	r3, r3, #17
 8002938:	69ba      	ldr	r2, [r7, #24]
 800293a:	4313      	orrs	r3, r2
 800293c:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002942:	2b00      	cmp	r3, #0
 8002944:	d009      	beq.n	800295a <HAL_ADC_Init+0x1f2>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800294a:	f403 7278 	and.w	r2, r3, #992	; 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002952:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8002954:	69ba      	ldr	r2, [r7, #24]
 8002956:	4313      	orrs	r3, r2
 8002958:	61bb      	str	r3, [r7, #24]
      /* Update Configuration Register CFGR */
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
    }
#else
    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	681b      	ldr	r3, [r3, #0]
 800295e:	68da      	ldr	r2, [r3, #12]
 8002960:	4b2c      	ldr	r3, [pc, #176]	; (8002a14 <HAL_ADC_Init+0x2ac>)
 8002962:	4013      	ands	r3, r2
 8002964:	687a      	ldr	r2, [r7, #4]
 8002966:	6812      	ldr	r2, [r2, #0]
 8002968:	69b9      	ldr	r1, [r7, #24]
 800296a:	430b      	orrs	r3, r1
 800296c:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - Conversion data management      Init.ConversionDataManagement       */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	681b      	ldr	r3, [r3, #0]
 8002972:	4618      	mov	r0, r3
 8002974:	f7ff fed1 	bl	800271a <LL_ADC_REG_IsConversionOngoing>
 8002978:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	681b      	ldr	r3, [r3, #0]
 800297e:	4618      	mov	r0, r3
 8002980:	f7ff fede 	bl	8002740 <LL_ADC_INJ_IsConversionOngoing>
 8002984:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8002986:	693b      	ldr	r3, [r7, #16]
 8002988:	2b00      	cmp	r3, #0
 800298a:	d15f      	bne.n	8002a4c <HAL_ADC_Init+0x2e4>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 800298c:	68fb      	ldr	r3, [r7, #12]
 800298e:	2b00      	cmp	r3, #0
 8002990:	d15c      	bne.n	8002a4c <HAL_ADC_Init+0x2e4>
                    ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
                    ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
      }
#else
      tmpCFGR = (
                  ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	7d1b      	ldrb	r3, [r3, #20]
 8002996:	039a      	lsls	r2, r3, #14
                  ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
      tmpCFGR = (
 800299c:	4313      	orrs	r3, r2
 800299e:	61bb      	str	r3, [r7, #24]
#endif

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	681b      	ldr	r3, [r3, #0]
 80029a4:	68da      	ldr	r2, [r3, #12]
 80029a6:	4b1c      	ldr	r3, [pc, #112]	; (8002a18 <HAL_ADC_Init+0x2b0>)
 80029a8:	4013      	ands	r3, r2
 80029aa:	687a      	ldr	r2, [r7, #4]
 80029ac:	6812      	ldr	r2, [r2, #0]
 80029ae:	69b9      	ldr	r1, [r7, #24]
 80029b0:	430b      	orrs	r3, r1
 80029b2:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80029ba:	2b01      	cmp	r3, #1
 80029bc:	d130      	bne.n	8002a20 <HAL_ADC_Init+0x2b8>
#endif
        assert_param(IS_ADC_RIGHT_BIT_SHIFT(hadc->Init.Oversampling.RightBitShift));
        assert_param(IS_ADC_TRIGGERED_OVERSAMPLING_MODE(hadc->Init.Oversampling.TriggeredMode));
        assert_param(IS_ADC_REGOVERSAMPLING_MODE(hadc->Init.Oversampling.OversamplingStopReset));

        if ((hadc->Init.ExternalTrigConv == ADC_SOFTWARE_START)
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029c2:	2b00      	cmp	r3, #0
        /*  - Oversampling Ratio                                               */
        /*  - Right bit shift                                                  */
        /*  - Left bit shift                                                   */
        /*  - Triggered mode                                                   */
        /*  - Oversampling mode (continued/resumed)                            */
        MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_FIELDS,
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	681b      	ldr	r3, [r3, #0]
 80029c8:	691a      	ldr	r2, [r3, #16]
 80029ca:	4b14      	ldr	r3, [pc, #80]	; (8002a1c <HAL_ADC_Init+0x2b4>)
 80029cc:	4013      	ands	r3, r2
 80029ce:	687a      	ldr	r2, [r7, #4]
 80029d0:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 80029d2:	3a01      	subs	r2, #1
 80029d4:	0411      	lsls	r1, r2, #16
 80029d6:	687a      	ldr	r2, [r7, #4]
 80029d8:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80029da:	4311      	orrs	r1, r2
 80029dc:	687a      	ldr	r2, [r7, #4]
 80029de:	6c52      	ldr	r2, [r2, #68]	; 0x44
 80029e0:	4311      	orrs	r1, r2
 80029e2:	687a      	ldr	r2, [r7, #4]
 80029e4:	6c92      	ldr	r2, [r2, #72]	; 0x48
 80029e6:	430a      	orrs	r2, r1
 80029e8:	431a      	orrs	r2, r3
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	681b      	ldr	r3, [r3, #0]
 80029ee:	f042 0201 	orr.w	r2, r2, #1
 80029f2:	611a      	str	r2, [r3, #16]
 80029f4:	e01c      	b.n	8002a30 <HAL_ADC_Init+0x2c8>
 80029f6:	bf00      	nop
 80029f8:	24000000 	.word	0x24000000
 80029fc:	053e2d63 	.word	0x053e2d63
 8002a00:	40022000 	.word	0x40022000
 8002a04:	40022100 	.word	0x40022100
 8002a08:	58026000 	.word	0x58026000
 8002a0c:	40022300 	.word	0x40022300
 8002a10:	58026300 	.word	0x58026300
 8002a14:	fff0c003 	.word	0xfff0c003
 8002a18:	ffffbffc 	.word	0xffffbffc
 8002a1c:	fc00f81e 	.word	0xfc00f81e

      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	681b      	ldr	r3, [r3, #0]
 8002a24:	691a      	ldr	r2, [r3, #16]
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	681b      	ldr	r3, [r3, #0]
 8002a2a:	f022 0201 	bic.w	r2, r2, #1
 8002a2e:	611a      	str	r2, [r3, #16]
      }

      /* Set the LeftShift parameter: it is applied to the final result with or without oversampling */
      MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_LSHIFT, hadc->Init.LeftBitShift);
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	681b      	ldr	r3, [r3, #0]
 8002a34:	691b      	ldr	r3, [r3, #16]
 8002a36:	f023 4170 	bic.w	r1, r3, #4026531840	; 0xf0000000
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	681b      	ldr	r3, [r3, #0]
 8002a42:	430a      	orrs	r2, r1
 8002a44:	611a      	str	r2, [r3, #16]
        /* Configure the BOOST Mode */
        ADC_ConfigureBoostMode(hadc);
      }
#else
      /* Configure the BOOST Mode */
      ADC_ConfigureBoostMode(hadc);
 8002a46:	6878      	ldr	r0, [r7, #4]
 8002a48:	f000 fb80 	bl	800314c <ADC_ConfigureBoostMode>
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	68db      	ldr	r3, [r3, #12]
 8002a50:	2b01      	cmp	r3, #1
 8002a52:	d10c      	bne.n	8002a6e <HAL_ADC_Init+0x306>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	681b      	ldr	r3, [r3, #0]
 8002a58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a5a:	f023 010f 	bic.w	r1, r3, #15
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	699b      	ldr	r3, [r3, #24]
 8002a62:	1e5a      	subs	r2, r3, #1
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	681b      	ldr	r3, [r3, #0]
 8002a68:	430a      	orrs	r2, r1
 8002a6a:	631a      	str	r2, [r3, #48]	; 0x30
 8002a6c:	e007      	b.n	8002a7e <HAL_ADC_Init+0x316>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	681b      	ldr	r3, [r3, #0]
 8002a72:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	681b      	ldr	r3, [r3, #0]
 8002a78:	f022 020f 	bic.w	r2, r2, #15
 8002a7c:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002a82:	f023 0303 	bic.w	r3, r3, #3
 8002a86:	f043 0201 	orr.w	r2, r3, #1
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	655a      	str	r2, [r3, #84]	; 0x54
 8002a8e:	e007      	b.n	8002aa0 <HAL_ADC_Init+0x338>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002a94:	f043 0210 	orr.w	r2, r3, #16
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8002a9c:	2301      	movs	r3, #1
 8002a9e:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8002aa0:	7ffb      	ldrb	r3, [r7, #31]
}
 8002aa2:	4618      	mov	r0, r3
 8002aa4:	3724      	adds	r7, #36	; 0x24
 8002aa6:	46bd      	mov	sp, r7
 8002aa8:	bd90      	pop	{r4, r7, pc}
 8002aaa:	bf00      	nop

08002aac <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8002aac:	b590      	push	{r4, r7, lr}
 8002aae:	b0a1      	sub	sp, #132	; 0x84
 8002ab0:	af00      	add	r7, sp, #0
 8002ab2:	6078      	str	r0, [r7, #4]
 8002ab4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002ab6:	2300      	movs	r3, #0
 8002ab8:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0;
 8002abc:	2300      	movs	r3, #0
 8002abe:	60bb      	str	r3, [r7, #8]
  /* if ROVSE is set, the value of the OFFSETy_EN bit in ADCx_OFRy register is
     ignored (considered as reset) */
  assert_param(!((sConfig->OffsetNumber != ADC_OFFSET_NONE) && (hadc->Init.OversamplingMode == ENABLE)));

  /* Verification of channel number */
  if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 8002ac0:	683b      	ldr	r3, [r7, #0]
 8002ac2:	68db      	ldr	r3, [r3, #12]
 8002ac4:	4a9d      	ldr	r2, [pc, #628]	; (8002d3c <HAL_ADC_ConfigChannel+0x290>)
 8002ac6:	4293      	cmp	r3, r2
    }
#endif
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8002ace:	2b01      	cmp	r3, #1
 8002ad0:	d101      	bne.n	8002ad6 <HAL_ADC_ConfigChannel+0x2a>
 8002ad2:	2302      	movs	r3, #2
 8002ad4:	e321      	b.n	800311a <HAL_ADC_ConfigChannel+0x66e>
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	2201      	movs	r2, #1
 8002ada:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	681b      	ldr	r3, [r3, #0]
 8002ae2:	4618      	mov	r0, r3
 8002ae4:	f7ff fe19 	bl	800271a <LL_ADC_REG_IsConversionOngoing>
 8002ae8:	4603      	mov	r3, r0
 8002aea:	2b00      	cmp	r3, #0
 8002aec:	f040 8306 	bne.w	80030fc <HAL_ADC_ConfigChannel+0x650>
      /* ADC channels preselection */
      hadc->Instance->PCSEL_RES0 |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
    }
#else
    /* ADC channels preselection */
    hadc->Instance->PCSEL |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
 8002af0:	683b      	ldr	r3, [r7, #0]
 8002af2:	681b      	ldr	r3, [r3, #0]
 8002af4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002af8:	2b00      	cmp	r3, #0
 8002afa:	d108      	bne.n	8002b0e <HAL_ADC_ConfigChannel+0x62>
 8002afc:	683b      	ldr	r3, [r7, #0]
 8002afe:	681b      	ldr	r3, [r3, #0]
 8002b00:	0e9b      	lsrs	r3, r3, #26
 8002b02:	f003 031f 	and.w	r3, r3, #31
 8002b06:	2201      	movs	r2, #1
 8002b08:	fa02 f303 	lsl.w	r3, r2, r3
 8002b0c:	e016      	b.n	8002b3c <HAL_ADC_ConfigChannel+0x90>
 8002b0e:	683b      	ldr	r3, [r7, #0]
 8002b10:	681b      	ldr	r3, [r3, #0]
 8002b12:	667b      	str	r3, [r7, #100]	; 0x64
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b14:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002b16:	fa93 f3a3 	rbit	r3, r3
 8002b1a:	663b      	str	r3, [r7, #96]	; 0x60
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8002b1c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002b1e:	66bb      	str	r3, [r7, #104]	; 0x68
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8002b20:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002b22:	2b00      	cmp	r3, #0
 8002b24:	d101      	bne.n	8002b2a <HAL_ADC_ConfigChannel+0x7e>
  {
    return 32U;
 8002b26:	2320      	movs	r3, #32
 8002b28:	e003      	b.n	8002b32 <HAL_ADC_ConfigChannel+0x86>
  }
  return __builtin_clz(value);
 8002b2a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002b2c:	fab3 f383 	clz	r3, r3
 8002b30:	b2db      	uxtb	r3, r3
 8002b32:	f003 031f 	and.w	r3, r3, #31
 8002b36:	2201      	movs	r2, #1
 8002b38:	fa02 f303 	lsl.w	r3, r2, r3
 8002b3c:	687a      	ldr	r2, [r7, #4]
 8002b3e:	6812      	ldr	r2, [r2, #0]
 8002b40:	69d1      	ldr	r1, [r2, #28]
 8002b42:	687a      	ldr	r2, [r7, #4]
 8002b44:	6812      	ldr	r2, [r2, #0]
 8002b46:	430b      	orrs	r3, r1
 8002b48:	61d3      	str	r3, [r2, #28]
#endif /* ADC_VER_V5_V90 */

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	6818      	ldr	r0, [r3, #0]
 8002b4e:	683b      	ldr	r3, [r7, #0]
 8002b50:	6859      	ldr	r1, [r3, #4]
 8002b52:	683b      	ldr	r3, [r7, #0]
 8002b54:	681b      	ldr	r3, [r3, #0]
 8002b56:	461a      	mov	r2, r3
 8002b58:	f7ff fd02 	bl	8002560 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	681b      	ldr	r3, [r3, #0]
 8002b60:	4618      	mov	r0, r3
 8002b62:	f7ff fdda 	bl	800271a <LL_ADC_REG_IsConversionOngoing>
 8002b66:	67b8      	str	r0, [r7, #120]	; 0x78
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	681b      	ldr	r3, [r3, #0]
 8002b6c:	4618      	mov	r0, r3
 8002b6e:	f7ff fde7 	bl	8002740 <LL_ADC_INJ_IsConversionOngoing>
 8002b72:	6778      	str	r0, [r7, #116]	; 0x74
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8002b74:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002b76:	2b00      	cmp	r3, #0
 8002b78:	f040 80b3 	bne.w	8002ce2 <HAL_ADC_ConfigChannel+0x236>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8002b7c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002b7e:	2b00      	cmp	r3, #0
 8002b80:	f040 80af 	bne.w	8002ce2 <HAL_ADC_ConfigChannel+0x236>
       )
    {
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	6818      	ldr	r0, [r3, #0]
 8002b88:	683b      	ldr	r3, [r7, #0]
 8002b8a:	6819      	ldr	r1, [r3, #0]
 8002b8c:	683b      	ldr	r3, [r7, #0]
 8002b8e:	689b      	ldr	r3, [r3, #8]
 8002b90:	461a      	mov	r2, r3
 8002b92:	f7ff fd11 	bl	80025b8 <LL_ADC_SetChannelSamplingTime>
        tmpOffsetShifted = ADC3_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
      }
      else
#endif /* ADC_VER_V5_V90 */
      {
        tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8002b96:	4b6a      	ldr	r3, [pc, #424]	; (8002d40 <HAL_ADC_ConfigChannel+0x294>)
 8002b98:	681b      	ldr	r3, [r3, #0]
 8002b9a:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 8002b9e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002ba2:	d10b      	bne.n	8002bbc <HAL_ADC_ConfigChannel+0x110>
 8002ba4:	683b      	ldr	r3, [r7, #0]
 8002ba6:	695a      	ldr	r2, [r3, #20]
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	681b      	ldr	r3, [r3, #0]
 8002bac:	68db      	ldr	r3, [r3, #12]
 8002bae:	089b      	lsrs	r3, r3, #2
 8002bb0:	f003 0307 	and.w	r3, r3, #7
 8002bb4:	005b      	lsls	r3, r3, #1
 8002bb6:	fa02 f303 	lsl.w	r3, r2, r3
 8002bba:	e01d      	b.n	8002bf8 <HAL_ADC_ConfigChannel+0x14c>
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	681b      	ldr	r3, [r3, #0]
 8002bc0:	68db      	ldr	r3, [r3, #12]
 8002bc2:	f003 0310 	and.w	r3, r3, #16
 8002bc6:	2b00      	cmp	r3, #0
 8002bc8:	d10b      	bne.n	8002be2 <HAL_ADC_ConfigChannel+0x136>
 8002bca:	683b      	ldr	r3, [r7, #0]
 8002bcc:	695a      	ldr	r2, [r3, #20]
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	681b      	ldr	r3, [r3, #0]
 8002bd2:	68db      	ldr	r3, [r3, #12]
 8002bd4:	089b      	lsrs	r3, r3, #2
 8002bd6:	f003 0307 	and.w	r3, r3, #7
 8002bda:	005b      	lsls	r3, r3, #1
 8002bdc:	fa02 f303 	lsl.w	r3, r2, r3
 8002be0:	e00a      	b.n	8002bf8 <HAL_ADC_ConfigChannel+0x14c>
 8002be2:	683b      	ldr	r3, [r7, #0]
 8002be4:	695a      	ldr	r2, [r3, #20]
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	681b      	ldr	r3, [r3, #0]
 8002bea:	68db      	ldr	r3, [r3, #12]
 8002bec:	089b      	lsrs	r3, r3, #2
 8002bee:	f003 0304 	and.w	r3, r3, #4
 8002bf2:	005b      	lsls	r3, r3, #1
 8002bf4:	fa02 f303 	lsl.w	r3, r2, r3
 8002bf8:	673b      	str	r3, [r7, #112]	; 0x70
      }
      
      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8002bfa:	683b      	ldr	r3, [r7, #0]
 8002bfc:	691b      	ldr	r3, [r3, #16]
 8002bfe:	2b04      	cmp	r3, #4
 8002c00:	d027      	beq.n	8002c52 <HAL_ADC_ConfigChannel+0x1a6>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	6818      	ldr	r0, [r3, #0]
 8002c06:	683b      	ldr	r3, [r7, #0]
 8002c08:	6919      	ldr	r1, [r3, #16]
 8002c0a:	683b      	ldr	r3, [r7, #0]
 8002c0c:	681a      	ldr	r2, [r3, #0]
 8002c0e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002c10:	f7ff fc52 	bl	80024b8 <LL_ADC_SetOffset>
        else
#endif /* ADC_VER_V5_V90 */
        {
          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSignedSaturation));
          /* Set ADC selected offset signed saturation */
          LL_ADC_SetOffsetSignedSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSignedSaturation == ENABLE) ? LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE : LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE);
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	6818      	ldr	r0, [r3, #0]
 8002c18:	683b      	ldr	r3, [r7, #0]
 8002c1a:	6919      	ldr	r1, [r3, #16]
 8002c1c:	683b      	ldr	r3, [r7, #0]
 8002c1e:	7e5b      	ldrb	r3, [r3, #25]
 8002c20:	2b01      	cmp	r3, #1
 8002c22:	d102      	bne.n	8002c2a <HAL_ADC_ConfigChannel+0x17e>
 8002c24:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8002c28:	e000      	b.n	8002c2c <HAL_ADC_ConfigChannel+0x180>
 8002c2a:	2300      	movs	r3, #0
 8002c2c:	461a      	mov	r2, r3
 8002c2e:	f7ff fc7c 	bl	800252a <LL_ADC_SetOffsetSignedSaturation>

          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetRightShift));
          /* Set ADC selected offset right shift */
          LL_ADC_SetDataRightShift(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetRightShift == ENABLE) ? LL_ADC_OFFSET_RSHIFT_ENABLE : LL_ADC_OFFSET_RSHIFT_DISABLE);
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	6818      	ldr	r0, [r3, #0]
 8002c36:	683b      	ldr	r3, [r7, #0]
 8002c38:	6919      	ldr	r1, [r3, #16]
 8002c3a:	683b      	ldr	r3, [r7, #0]
 8002c3c:	7e1b      	ldrb	r3, [r3, #24]
 8002c3e:	2b01      	cmp	r3, #1
 8002c40:	d102      	bne.n	8002c48 <HAL_ADC_ConfigChannel+0x19c>
 8002c42:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8002c46:	e000      	b.n	8002c4a <HAL_ADC_ConfigChannel+0x19e>
 8002c48:	2300      	movs	r3, #0
 8002c4a:	461a      	mov	r2, r3
 8002c4c:	f7ff fc54 	bl	80024f8 <LL_ADC_SetDataRightShift>
 8002c50:	e047      	b.n	8002ce2 <HAL_ADC_ConfigChannel+0x236>
          }
        }
        else
#endif /* ADC_VER_V5_V90 */
        {
          if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	681b      	ldr	r3, [r3, #0]
 8002c56:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002c58:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002c5c:	683b      	ldr	r3, [r7, #0]
 8002c5e:	681b      	ldr	r3, [r3, #0]
 8002c60:	069b      	lsls	r3, r3, #26
 8002c62:	429a      	cmp	r2, r3
 8002c64:	d107      	bne.n	8002c76 <HAL_ADC_ConfigChannel+0x1ca>
          {
            CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_SSATE);
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	681b      	ldr	r3, [r3, #0]
 8002c6a:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	681b      	ldr	r3, [r3, #0]
 8002c70:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8002c74:	661a      	str	r2, [r3, #96]	; 0x60
          }
          if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	681b      	ldr	r3, [r3, #0]
 8002c7a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002c7c:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002c80:	683b      	ldr	r3, [r7, #0]
 8002c82:	681b      	ldr	r3, [r3, #0]
 8002c84:	069b      	lsls	r3, r3, #26
 8002c86:	429a      	cmp	r2, r3
 8002c88:	d107      	bne.n	8002c9a <HAL_ADC_ConfigChannel+0x1ee>
          {
            CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_SSATE);
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	681b      	ldr	r3, [r3, #0]
 8002c8e:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	681b      	ldr	r3, [r3, #0]
 8002c94:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8002c98:	665a      	str	r2, [r3, #100]	; 0x64
          }
          if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	681b      	ldr	r3, [r3, #0]
 8002c9e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002ca0:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002ca4:	683b      	ldr	r3, [r7, #0]
 8002ca6:	681b      	ldr	r3, [r3, #0]
 8002ca8:	069b      	lsls	r3, r3, #26
 8002caa:	429a      	cmp	r2, r3
 8002cac:	d107      	bne.n	8002cbe <HAL_ADC_ConfigChannel+0x212>
          {
            CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_SSATE);
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	681b      	ldr	r3, [r3, #0]
 8002cb2:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	681b      	ldr	r3, [r3, #0]
 8002cb8:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8002cbc:	669a      	str	r2, [r3, #104]	; 0x68
          }
          if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	681b      	ldr	r3, [r3, #0]
 8002cc2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002cc4:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002cc8:	683b      	ldr	r3, [r7, #0]
 8002cca:	681b      	ldr	r3, [r3, #0]
 8002ccc:	069b      	lsls	r3, r3, #26
 8002cce:	429a      	cmp	r2, r3
 8002cd0:	d107      	bne.n	8002ce2 <HAL_ADC_ConfigChannel+0x236>
          {
            CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_SSATE);
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	681b      	ldr	r3, [r3, #0]
 8002cd6:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	681b      	ldr	r3, [r3, #0]
 8002cdc:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8002ce0:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	681b      	ldr	r3, [r3, #0]
 8002ce6:	4618      	mov	r0, r3
 8002ce8:	f7ff fd04 	bl	80026f4 <LL_ADC_IsEnabled>
 8002cec:	4603      	mov	r3, r0
 8002cee:	2b00      	cmp	r3, #0
 8002cf0:	f040 820d 	bne.w	800310e <HAL_ADC_ConfigChannel+0x662>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	6818      	ldr	r0, [r3, #0]
 8002cf8:	683b      	ldr	r3, [r7, #0]
 8002cfa:	6819      	ldr	r1, [r3, #0]
 8002cfc:	683b      	ldr	r3, [r7, #0]
 8002cfe:	68db      	ldr	r3, [r3, #12]
 8002d00:	461a      	mov	r2, r3
 8002d02:	f7ff fc85 	bl	8002610 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8002d06:	683b      	ldr	r3, [r7, #0]
 8002d08:	68db      	ldr	r3, [r3, #12]
 8002d0a:	4a0c      	ldr	r2, [pc, #48]	; (8002d3c <HAL_ADC_ConfigChannel+0x290>)
 8002d0c:	4293      	cmp	r3, r2
 8002d0e:	f040 8133 	bne.w	8002f78 <HAL_ADC_ConfigChannel+0x4cc>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8002d16:	683b      	ldr	r3, [r7, #0]
 8002d18:	681b      	ldr	r3, [r3, #0]
 8002d1a:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002d1e:	2b00      	cmp	r3, #0
 8002d20:	d110      	bne.n	8002d44 <HAL_ADC_ConfigChannel+0x298>
 8002d22:	683b      	ldr	r3, [r7, #0]
 8002d24:	681b      	ldr	r3, [r3, #0]
 8002d26:	0e9b      	lsrs	r3, r3, #26
 8002d28:	3301      	adds	r3, #1
 8002d2a:	f003 031f 	and.w	r3, r3, #31
 8002d2e:	2b09      	cmp	r3, #9
 8002d30:	bf94      	ite	ls
 8002d32:	2301      	movls	r3, #1
 8002d34:	2300      	movhi	r3, #0
 8002d36:	b2db      	uxtb	r3, r3
 8002d38:	e01e      	b.n	8002d78 <HAL_ADC_ConfigChannel+0x2cc>
 8002d3a:	bf00      	nop
 8002d3c:	47ff0000 	.word	0x47ff0000
 8002d40:	5c001000 	.word	0x5c001000
 8002d44:	683b      	ldr	r3, [r7, #0]
 8002d46:	681b      	ldr	r3, [r3, #0]
 8002d48:	65bb      	str	r3, [r7, #88]	; 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d4a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002d4c:	fa93 f3a3 	rbit	r3, r3
 8002d50:	657b      	str	r3, [r7, #84]	; 0x54
  return result;
 8002d52:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002d54:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (value == 0U)
 8002d56:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002d58:	2b00      	cmp	r3, #0
 8002d5a:	d101      	bne.n	8002d60 <HAL_ADC_ConfigChannel+0x2b4>
    return 32U;
 8002d5c:	2320      	movs	r3, #32
 8002d5e:	e003      	b.n	8002d68 <HAL_ADC_ConfigChannel+0x2bc>
  return __builtin_clz(value);
 8002d60:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002d62:	fab3 f383 	clz	r3, r3
 8002d66:	b2db      	uxtb	r3, r3
 8002d68:	3301      	adds	r3, #1
 8002d6a:	f003 031f 	and.w	r3, r3, #31
 8002d6e:	2b09      	cmp	r3, #9
 8002d70:	bf94      	ite	ls
 8002d72:	2301      	movls	r3, #1
 8002d74:	2300      	movhi	r3, #0
 8002d76:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002d78:	2b00      	cmp	r3, #0
 8002d7a:	d079      	beq.n	8002e70 <HAL_ADC_ConfigChannel+0x3c4>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8002d7c:	683b      	ldr	r3, [r7, #0]
 8002d7e:	681b      	ldr	r3, [r3, #0]
 8002d80:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002d84:	2b00      	cmp	r3, #0
 8002d86:	d107      	bne.n	8002d98 <HAL_ADC_ConfigChannel+0x2ec>
 8002d88:	683b      	ldr	r3, [r7, #0]
 8002d8a:	681b      	ldr	r3, [r3, #0]
 8002d8c:	0e9b      	lsrs	r3, r3, #26
 8002d8e:	3301      	adds	r3, #1
 8002d90:	069b      	lsls	r3, r3, #26
 8002d92:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002d96:	e015      	b.n	8002dc4 <HAL_ADC_ConfigChannel+0x318>
 8002d98:	683b      	ldr	r3, [r7, #0]
 8002d9a:	681b      	ldr	r3, [r3, #0]
 8002d9c:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d9e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002da0:	fa93 f3a3 	rbit	r3, r3
 8002da4:	64bb      	str	r3, [r7, #72]	; 0x48
  return result;
 8002da6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002da8:	653b      	str	r3, [r7, #80]	; 0x50
  if (value == 0U)
 8002daa:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002dac:	2b00      	cmp	r3, #0
 8002dae:	d101      	bne.n	8002db4 <HAL_ADC_ConfigChannel+0x308>
    return 32U;
 8002db0:	2320      	movs	r3, #32
 8002db2:	e003      	b.n	8002dbc <HAL_ADC_ConfigChannel+0x310>
  return __builtin_clz(value);
 8002db4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002db6:	fab3 f383 	clz	r3, r3
 8002dba:	b2db      	uxtb	r3, r3
 8002dbc:	3301      	adds	r3, #1
 8002dbe:	069b      	lsls	r3, r3, #26
 8002dc0:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002dc4:	683b      	ldr	r3, [r7, #0]
 8002dc6:	681b      	ldr	r3, [r3, #0]
 8002dc8:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002dcc:	2b00      	cmp	r3, #0
 8002dce:	d109      	bne.n	8002de4 <HAL_ADC_ConfigChannel+0x338>
 8002dd0:	683b      	ldr	r3, [r7, #0]
 8002dd2:	681b      	ldr	r3, [r3, #0]
 8002dd4:	0e9b      	lsrs	r3, r3, #26
 8002dd6:	3301      	adds	r3, #1
 8002dd8:	f003 031f 	and.w	r3, r3, #31
 8002ddc:	2101      	movs	r1, #1
 8002dde:	fa01 f303 	lsl.w	r3, r1, r3
 8002de2:	e017      	b.n	8002e14 <HAL_ADC_ConfigChannel+0x368>
 8002de4:	683b      	ldr	r3, [r7, #0]
 8002de6:	681b      	ldr	r3, [r3, #0]
 8002de8:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002dea:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002dec:	fa93 f3a3 	rbit	r3, r3
 8002df0:	63fb      	str	r3, [r7, #60]	; 0x3c
  return result;
 8002df2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002df4:	647b      	str	r3, [r7, #68]	; 0x44
  if (value == 0U)
 8002df6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002df8:	2b00      	cmp	r3, #0
 8002dfa:	d101      	bne.n	8002e00 <HAL_ADC_ConfigChannel+0x354>
    return 32U;
 8002dfc:	2320      	movs	r3, #32
 8002dfe:	e003      	b.n	8002e08 <HAL_ADC_ConfigChannel+0x35c>
  return __builtin_clz(value);
 8002e00:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002e02:	fab3 f383 	clz	r3, r3
 8002e06:	b2db      	uxtb	r3, r3
 8002e08:	3301      	adds	r3, #1
 8002e0a:	f003 031f 	and.w	r3, r3, #31
 8002e0e:	2101      	movs	r1, #1
 8002e10:	fa01 f303 	lsl.w	r3, r1, r3
 8002e14:	ea42 0103 	orr.w	r1, r2, r3
 8002e18:	683b      	ldr	r3, [r7, #0]
 8002e1a:	681b      	ldr	r3, [r3, #0]
 8002e1c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002e20:	2b00      	cmp	r3, #0
 8002e22:	d10a      	bne.n	8002e3a <HAL_ADC_ConfigChannel+0x38e>
 8002e24:	683b      	ldr	r3, [r7, #0]
 8002e26:	681b      	ldr	r3, [r3, #0]
 8002e28:	0e9b      	lsrs	r3, r3, #26
 8002e2a:	3301      	adds	r3, #1
 8002e2c:	f003 021f 	and.w	r2, r3, #31
 8002e30:	4613      	mov	r3, r2
 8002e32:	005b      	lsls	r3, r3, #1
 8002e34:	4413      	add	r3, r2
 8002e36:	051b      	lsls	r3, r3, #20
 8002e38:	e018      	b.n	8002e6c <HAL_ADC_ConfigChannel+0x3c0>
 8002e3a:	683b      	ldr	r3, [r7, #0]
 8002e3c:	681b      	ldr	r3, [r3, #0]
 8002e3e:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e40:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002e42:	fa93 f3a3 	rbit	r3, r3
 8002e46:	633b      	str	r3, [r7, #48]	; 0x30
  return result;
 8002e48:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002e4a:	63bb      	str	r3, [r7, #56]	; 0x38
  if (value == 0U)
 8002e4c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002e4e:	2b00      	cmp	r3, #0
 8002e50:	d101      	bne.n	8002e56 <HAL_ADC_ConfigChannel+0x3aa>
    return 32U;
 8002e52:	2320      	movs	r3, #32
 8002e54:	e003      	b.n	8002e5e <HAL_ADC_ConfigChannel+0x3b2>
  return __builtin_clz(value);
 8002e56:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002e58:	fab3 f383 	clz	r3, r3
 8002e5c:	b2db      	uxtb	r3, r3
 8002e5e:	3301      	adds	r3, #1
 8002e60:	f003 021f 	and.w	r2, r3, #31
 8002e64:	4613      	mov	r3, r2
 8002e66:	005b      	lsls	r3, r3, #1
 8002e68:	4413      	add	r3, r2
 8002e6a:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002e6c:	430b      	orrs	r3, r1
 8002e6e:	e07e      	b.n	8002f6e <HAL_ADC_ConfigChannel+0x4c2>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8002e70:	683b      	ldr	r3, [r7, #0]
 8002e72:	681b      	ldr	r3, [r3, #0]
 8002e74:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002e78:	2b00      	cmp	r3, #0
 8002e7a:	d107      	bne.n	8002e8c <HAL_ADC_ConfigChannel+0x3e0>
 8002e7c:	683b      	ldr	r3, [r7, #0]
 8002e7e:	681b      	ldr	r3, [r3, #0]
 8002e80:	0e9b      	lsrs	r3, r3, #26
 8002e82:	3301      	adds	r3, #1
 8002e84:	069b      	lsls	r3, r3, #26
 8002e86:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002e8a:	e015      	b.n	8002eb8 <HAL_ADC_ConfigChannel+0x40c>
 8002e8c:	683b      	ldr	r3, [r7, #0]
 8002e8e:	681b      	ldr	r3, [r3, #0]
 8002e90:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e92:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002e94:	fa93 f3a3 	rbit	r3, r3
 8002e98:	627b      	str	r3, [r7, #36]	; 0x24
  return result;
 8002e9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e9c:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (value == 0U)
 8002e9e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002ea0:	2b00      	cmp	r3, #0
 8002ea2:	d101      	bne.n	8002ea8 <HAL_ADC_ConfigChannel+0x3fc>
    return 32U;
 8002ea4:	2320      	movs	r3, #32
 8002ea6:	e003      	b.n	8002eb0 <HAL_ADC_ConfigChannel+0x404>
  return __builtin_clz(value);
 8002ea8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002eaa:	fab3 f383 	clz	r3, r3
 8002eae:	b2db      	uxtb	r3, r3
 8002eb0:	3301      	adds	r3, #1
 8002eb2:	069b      	lsls	r3, r3, #26
 8002eb4:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002eb8:	683b      	ldr	r3, [r7, #0]
 8002eba:	681b      	ldr	r3, [r3, #0]
 8002ebc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002ec0:	2b00      	cmp	r3, #0
 8002ec2:	d109      	bne.n	8002ed8 <HAL_ADC_ConfigChannel+0x42c>
 8002ec4:	683b      	ldr	r3, [r7, #0]
 8002ec6:	681b      	ldr	r3, [r3, #0]
 8002ec8:	0e9b      	lsrs	r3, r3, #26
 8002eca:	3301      	adds	r3, #1
 8002ecc:	f003 031f 	and.w	r3, r3, #31
 8002ed0:	2101      	movs	r1, #1
 8002ed2:	fa01 f303 	lsl.w	r3, r1, r3
 8002ed6:	e017      	b.n	8002f08 <HAL_ADC_ConfigChannel+0x45c>
 8002ed8:	683b      	ldr	r3, [r7, #0]
 8002eda:	681b      	ldr	r3, [r3, #0]
 8002edc:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ede:	69fb      	ldr	r3, [r7, #28]
 8002ee0:	fa93 f3a3 	rbit	r3, r3
 8002ee4:	61bb      	str	r3, [r7, #24]
  return result;
 8002ee6:	69bb      	ldr	r3, [r7, #24]
 8002ee8:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 8002eea:	6a3b      	ldr	r3, [r7, #32]
 8002eec:	2b00      	cmp	r3, #0
 8002eee:	d101      	bne.n	8002ef4 <HAL_ADC_ConfigChannel+0x448>
    return 32U;
 8002ef0:	2320      	movs	r3, #32
 8002ef2:	e003      	b.n	8002efc <HAL_ADC_ConfigChannel+0x450>
  return __builtin_clz(value);
 8002ef4:	6a3b      	ldr	r3, [r7, #32]
 8002ef6:	fab3 f383 	clz	r3, r3
 8002efa:	b2db      	uxtb	r3, r3
 8002efc:	3301      	adds	r3, #1
 8002efe:	f003 031f 	and.w	r3, r3, #31
 8002f02:	2101      	movs	r1, #1
 8002f04:	fa01 f303 	lsl.w	r3, r1, r3
 8002f08:	ea42 0103 	orr.w	r1, r2, r3
 8002f0c:	683b      	ldr	r3, [r7, #0]
 8002f0e:	681b      	ldr	r3, [r3, #0]
 8002f10:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002f14:	2b00      	cmp	r3, #0
 8002f16:	d10d      	bne.n	8002f34 <HAL_ADC_ConfigChannel+0x488>
 8002f18:	683b      	ldr	r3, [r7, #0]
 8002f1a:	681b      	ldr	r3, [r3, #0]
 8002f1c:	0e9b      	lsrs	r3, r3, #26
 8002f1e:	3301      	adds	r3, #1
 8002f20:	f003 021f 	and.w	r2, r3, #31
 8002f24:	4613      	mov	r3, r2
 8002f26:	005b      	lsls	r3, r3, #1
 8002f28:	4413      	add	r3, r2
 8002f2a:	3b1e      	subs	r3, #30
 8002f2c:	051b      	lsls	r3, r3, #20
 8002f2e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002f32:	e01b      	b.n	8002f6c <HAL_ADC_ConfigChannel+0x4c0>
 8002f34:	683b      	ldr	r3, [r7, #0]
 8002f36:	681b      	ldr	r3, [r3, #0]
 8002f38:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f3a:	693b      	ldr	r3, [r7, #16]
 8002f3c:	fa93 f3a3 	rbit	r3, r3
 8002f40:	60fb      	str	r3, [r7, #12]
  return result;
 8002f42:	68fb      	ldr	r3, [r7, #12]
 8002f44:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 8002f46:	697b      	ldr	r3, [r7, #20]
 8002f48:	2b00      	cmp	r3, #0
 8002f4a:	d101      	bne.n	8002f50 <HAL_ADC_ConfigChannel+0x4a4>
    return 32U;
 8002f4c:	2320      	movs	r3, #32
 8002f4e:	e003      	b.n	8002f58 <HAL_ADC_ConfigChannel+0x4ac>
  return __builtin_clz(value);
 8002f50:	697b      	ldr	r3, [r7, #20]
 8002f52:	fab3 f383 	clz	r3, r3
 8002f56:	b2db      	uxtb	r3, r3
 8002f58:	3301      	adds	r3, #1
 8002f5a:	f003 021f 	and.w	r2, r3, #31
 8002f5e:	4613      	mov	r3, r2
 8002f60:	005b      	lsls	r3, r3, #1
 8002f62:	4413      	add	r3, r2
 8002f64:	3b1e      	subs	r3, #30
 8002f66:	051b      	lsls	r3, r3, #20
 8002f68:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002f6c:	430b      	orrs	r3, r1
 8002f6e:	683a      	ldr	r2, [r7, #0]
 8002f70:	6892      	ldr	r2, [r2, #8]
 8002f72:	4619      	mov	r1, r3
 8002f74:	f7ff fb20 	bl	80025b8 <LL_ADC_SetChannelSamplingTime>
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      /* Note: these internal measurement paths can be disabled using           */
      /* HAL_ADC_DeInit().                                                      */

      if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8002f78:	683b      	ldr	r3, [r7, #0]
 8002f7a:	681b      	ldr	r3, [r3, #0]
 8002f7c:	2b00      	cmp	r3, #0
 8002f7e:	f280 80c6 	bge.w	800310e <HAL_ADC_ConfigChannel+0x662>
      {
        /* Configuration of common ADC parameters                                 */

        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	681b      	ldr	r3, [r3, #0]
 8002f86:	4a67      	ldr	r2, [pc, #412]	; (8003124 <HAL_ADC_ConfigChannel+0x678>)
 8002f88:	4293      	cmp	r3, r2
 8002f8a:	d004      	beq.n	8002f96 <HAL_ADC_ConfigChannel+0x4ea>
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	681b      	ldr	r3, [r3, #0]
 8002f90:	4a65      	ldr	r2, [pc, #404]	; (8003128 <HAL_ADC_ConfigChannel+0x67c>)
 8002f92:	4293      	cmp	r3, r2
 8002f94:	d101      	bne.n	8002f9a <HAL_ADC_ConfigChannel+0x4ee>
 8002f96:	4b65      	ldr	r3, [pc, #404]	; (800312c <HAL_ADC_ConfigChannel+0x680>)
 8002f98:	e000      	b.n	8002f9c <HAL_ADC_ConfigChannel+0x4f0>
 8002f9a:	4b65      	ldr	r3, [pc, #404]	; (8003130 <HAL_ADC_ConfigChannel+0x684>)
 8002f9c:	4618      	mov	r0, r3
 8002f9e:	f7ff fa7d 	bl	800249c <LL_ADC_GetCommonPathInternalCh>
 8002fa2:	66f8      	str	r0, [r7, #108]	; 0x6c

        /* Software is allowed to change common parameters only when all ADCs   */
        /* of the common group are disabled.                                    */
        if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	681b      	ldr	r3, [r3, #0]
 8002fa8:	4a5e      	ldr	r2, [pc, #376]	; (8003124 <HAL_ADC_ConfigChannel+0x678>)
 8002faa:	4293      	cmp	r3, r2
 8002fac:	d004      	beq.n	8002fb8 <HAL_ADC_ConfigChannel+0x50c>
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	681b      	ldr	r3, [r3, #0]
 8002fb2:	4a5d      	ldr	r2, [pc, #372]	; (8003128 <HAL_ADC_ConfigChannel+0x67c>)
 8002fb4:	4293      	cmp	r3, r2
 8002fb6:	d10e      	bne.n	8002fd6 <HAL_ADC_ConfigChannel+0x52a>
 8002fb8:	485a      	ldr	r0, [pc, #360]	; (8003124 <HAL_ADC_ConfigChannel+0x678>)
 8002fba:	f7ff fb9b 	bl	80026f4 <LL_ADC_IsEnabled>
 8002fbe:	4604      	mov	r4, r0
 8002fc0:	4859      	ldr	r0, [pc, #356]	; (8003128 <HAL_ADC_ConfigChannel+0x67c>)
 8002fc2:	f7ff fb97 	bl	80026f4 <LL_ADC_IsEnabled>
 8002fc6:	4603      	mov	r3, r0
 8002fc8:	4323      	orrs	r3, r4
 8002fca:	2b00      	cmp	r3, #0
 8002fcc:	bf0c      	ite	eq
 8002fce:	2301      	moveq	r3, #1
 8002fd0:	2300      	movne	r3, #0
 8002fd2:	b2db      	uxtb	r3, r3
 8002fd4:	e008      	b.n	8002fe8 <HAL_ADC_ConfigChannel+0x53c>
 8002fd6:	4857      	ldr	r0, [pc, #348]	; (8003134 <HAL_ADC_ConfigChannel+0x688>)
 8002fd8:	f7ff fb8c 	bl	80026f4 <LL_ADC_IsEnabled>
 8002fdc:	4603      	mov	r3, r0
 8002fde:	2b00      	cmp	r3, #0
 8002fe0:	bf0c      	ite	eq
 8002fe2:	2301      	moveq	r3, #1
 8002fe4:	2300      	movne	r3, #0
 8002fe6:	b2db      	uxtb	r3, r3
 8002fe8:	2b00      	cmp	r3, #0
 8002fea:	d07d      	beq.n	80030e8 <HAL_ADC_ConfigChannel+0x63c>
        {
          /* If the requested internal measurement path has already been enabled, */
          /* bypass the configuration processing.                                 */
          if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8002fec:	683b      	ldr	r3, [r7, #0]
 8002fee:	681b      	ldr	r3, [r3, #0]
 8002ff0:	4a51      	ldr	r2, [pc, #324]	; (8003138 <HAL_ADC_ConfigChannel+0x68c>)
 8002ff2:	4293      	cmp	r3, r2
 8002ff4:	d130      	bne.n	8003058 <HAL_ADC_ConfigChannel+0x5ac>
 8002ff6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002ff8:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002ffc:	2b00      	cmp	r3, #0
 8002ffe:	d12b      	bne.n	8003058 <HAL_ADC_ConfigChannel+0x5ac>
          {
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	681b      	ldr	r3, [r3, #0]
 8003004:	4a4b      	ldr	r2, [pc, #300]	; (8003134 <HAL_ADC_ConfigChannel+0x688>)
 8003006:	4293      	cmp	r3, r2
 8003008:	f040 8081 	bne.w	800310e <HAL_ADC_ConfigChannel+0x662>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_TEMPSENSOR | tmp_config_internal_channel);
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	681b      	ldr	r3, [r3, #0]
 8003010:	4a44      	ldr	r2, [pc, #272]	; (8003124 <HAL_ADC_ConfigChannel+0x678>)
 8003012:	4293      	cmp	r3, r2
 8003014:	d004      	beq.n	8003020 <HAL_ADC_ConfigChannel+0x574>
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	681b      	ldr	r3, [r3, #0]
 800301a:	4a43      	ldr	r2, [pc, #268]	; (8003128 <HAL_ADC_ConfigChannel+0x67c>)
 800301c:	4293      	cmp	r3, r2
 800301e:	d101      	bne.n	8003024 <HAL_ADC_ConfigChannel+0x578>
 8003020:	4a42      	ldr	r2, [pc, #264]	; (800312c <HAL_ADC_ConfigChannel+0x680>)
 8003022:	e000      	b.n	8003026 <HAL_ADC_ConfigChannel+0x57a>
 8003024:	4a42      	ldr	r2, [pc, #264]	; (8003130 <HAL_ADC_ConfigChannel+0x684>)
 8003026:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003028:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800302c:	4619      	mov	r1, r3
 800302e:	4610      	mov	r0, r2
 8003030:	f7ff fa21 	bl	8002476 <LL_ADC_SetCommonPathInternalCh>
              /* Delay for temperature sensor stabilization time */
              /* Wait loop initialization and execution */
              /* Note: Variable divided by 2 to compensate partially              */
              /*       CPU processing cycles, scaling in us split to not          */
              /*       exceed 32 bits register capacity and handle low frequency. */
              wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8003034:	4b41      	ldr	r3, [pc, #260]	; (800313c <HAL_ADC_ConfigChannel+0x690>)
 8003036:	681b      	ldr	r3, [r3, #0]
 8003038:	099b      	lsrs	r3, r3, #6
 800303a:	4a41      	ldr	r2, [pc, #260]	; (8003140 <HAL_ADC_ConfigChannel+0x694>)
 800303c:	fba2 2303 	umull	r2, r3, r2, r3
 8003040:	099b      	lsrs	r3, r3, #6
 8003042:	3301      	adds	r3, #1
 8003044:	005b      	lsls	r3, r3, #1
 8003046:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 8003048:	e002      	b.n	8003050 <HAL_ADC_ConfigChannel+0x5a4>
              {
                wait_loop_index--;
 800304a:	68bb      	ldr	r3, [r7, #8]
 800304c:	3b01      	subs	r3, #1
 800304e:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 8003050:	68bb      	ldr	r3, [r7, #8]
 8003052:	2b00      	cmp	r3, #0
 8003054:	d1f9      	bne.n	800304a <HAL_ADC_ConfigChannel+0x59e>
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8003056:	e05a      	b.n	800310e <HAL_ADC_ConfigChannel+0x662>
              }
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8003058:	683b      	ldr	r3, [r7, #0]
 800305a:	681b      	ldr	r3, [r3, #0]
 800305c:	4a39      	ldr	r2, [pc, #228]	; (8003144 <HAL_ADC_ConfigChannel+0x698>)
 800305e:	4293      	cmp	r3, r2
 8003060:	d11e      	bne.n	80030a0 <HAL_ADC_ConfigChannel+0x5f4>
 8003062:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003064:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003068:	2b00      	cmp	r3, #0
 800306a:	d119      	bne.n	80030a0 <HAL_ADC_ConfigChannel+0x5f4>
          {
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	681b      	ldr	r3, [r3, #0]
 8003070:	4a30      	ldr	r2, [pc, #192]	; (8003134 <HAL_ADC_ConfigChannel+0x688>)
 8003072:	4293      	cmp	r3, r2
 8003074:	d14b      	bne.n	800310e <HAL_ADC_ConfigChannel+0x662>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	681b      	ldr	r3, [r3, #0]
 800307a:	4a2a      	ldr	r2, [pc, #168]	; (8003124 <HAL_ADC_ConfigChannel+0x678>)
 800307c:	4293      	cmp	r3, r2
 800307e:	d004      	beq.n	800308a <HAL_ADC_ConfigChannel+0x5de>
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	681b      	ldr	r3, [r3, #0]
 8003084:	4a28      	ldr	r2, [pc, #160]	; (8003128 <HAL_ADC_ConfigChannel+0x67c>)
 8003086:	4293      	cmp	r3, r2
 8003088:	d101      	bne.n	800308e <HAL_ADC_ConfigChannel+0x5e2>
 800308a:	4a28      	ldr	r2, [pc, #160]	; (800312c <HAL_ADC_ConfigChannel+0x680>)
 800308c:	e000      	b.n	8003090 <HAL_ADC_ConfigChannel+0x5e4>
 800308e:	4a28      	ldr	r2, [pc, #160]	; (8003130 <HAL_ADC_ConfigChannel+0x684>)
 8003090:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003092:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003096:	4619      	mov	r1, r3
 8003098:	4610      	mov	r0, r2
 800309a:	f7ff f9ec 	bl	8002476 <LL_ADC_SetCommonPathInternalCh>
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 800309e:	e036      	b.n	800310e <HAL_ADC_ConfigChannel+0x662>
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 80030a0:	683b      	ldr	r3, [r7, #0]
 80030a2:	681b      	ldr	r3, [r3, #0]
 80030a4:	4a28      	ldr	r2, [pc, #160]	; (8003148 <HAL_ADC_ConfigChannel+0x69c>)
 80030a6:	4293      	cmp	r3, r2
 80030a8:	d131      	bne.n	800310e <HAL_ADC_ConfigChannel+0x662>
 80030aa:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80030ac:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80030b0:	2b00      	cmp	r3, #0
 80030b2:	d12c      	bne.n	800310e <HAL_ADC_ConfigChannel+0x662>
          {
            if (ADC_VREFINT_INSTANCE(hadc))
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	681b      	ldr	r3, [r3, #0]
 80030b8:	4a1e      	ldr	r2, [pc, #120]	; (8003134 <HAL_ADC_ConfigChannel+0x688>)
 80030ba:	4293      	cmp	r3, r2
 80030bc:	d127      	bne.n	800310e <HAL_ADC_ConfigChannel+0x662>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VREFINT | tmp_config_internal_channel);
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	681b      	ldr	r3, [r3, #0]
 80030c2:	4a18      	ldr	r2, [pc, #96]	; (8003124 <HAL_ADC_ConfigChannel+0x678>)
 80030c4:	4293      	cmp	r3, r2
 80030c6:	d004      	beq.n	80030d2 <HAL_ADC_ConfigChannel+0x626>
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	681b      	ldr	r3, [r3, #0]
 80030cc:	4a16      	ldr	r2, [pc, #88]	; (8003128 <HAL_ADC_ConfigChannel+0x67c>)
 80030ce:	4293      	cmp	r3, r2
 80030d0:	d101      	bne.n	80030d6 <HAL_ADC_ConfigChannel+0x62a>
 80030d2:	4a16      	ldr	r2, [pc, #88]	; (800312c <HAL_ADC_ConfigChannel+0x680>)
 80030d4:	e000      	b.n	80030d8 <HAL_ADC_ConfigChannel+0x62c>
 80030d6:	4a16      	ldr	r2, [pc, #88]	; (8003130 <HAL_ADC_ConfigChannel+0x684>)
 80030d8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80030da:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80030de:	4619      	mov	r1, r3
 80030e0:	4610      	mov	r0, r2
 80030e2:	f7ff f9c8 	bl	8002476 <LL_ADC_SetCommonPathInternalCh>
 80030e6:	e012      	b.n	800310e <HAL_ADC_ConfigChannel+0x662>
        /* enabled and other ADC of the common group are enabled, internal      */
        /* measurement paths cannot be enabled.                                 */
        else
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80030ec:	f043 0220 	orr.w	r2, r3, #32
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	655a      	str	r2, [r3, #84]	; 0x54

          tmp_hal_status = HAL_ERROR;
 80030f4:	2301      	movs	r3, #1
 80030f6:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
 80030fa:	e008      	b.n	800310e <HAL_ADC_ConfigChannel+0x662>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003100:	f043 0220 	orr.w	r2, r3, #32
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8003108:	2301      	movs	r3, #1
 800310a:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	2200      	movs	r2, #0
 8003112:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 8003116:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
}
 800311a:	4618      	mov	r0, r3
 800311c:	3784      	adds	r7, #132	; 0x84
 800311e:	46bd      	mov	sp, r7
 8003120:	bd90      	pop	{r4, r7, pc}
 8003122:	bf00      	nop
 8003124:	40022000 	.word	0x40022000
 8003128:	40022100 	.word	0x40022100
 800312c:	40022300 	.word	0x40022300
 8003130:	58026300 	.word	0x58026300
 8003134:	58026000 	.word	0x58026000
 8003138:	cb840000 	.word	0xcb840000
 800313c:	24000000 	.word	0x24000000
 8003140:	053e2d63 	.word	0x053e2d63
 8003144:	c7520000 	.word	0xc7520000
 8003148:	cfb80000 	.word	0xcfb80000

0800314c <ADC_ConfigureBoostMode>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval None.
  */
void ADC_ConfigureBoostMode(ADC_HandleTypeDef *hadc)
{
 800314c:	b580      	push	{r7, lr}
 800314e:	b084      	sub	sp, #16
 8003150:	af00      	add	r7, sp, #0
 8003152:	6078      	str	r0, [r7, #4]
  uint32_t freq;
  if (ADC_IS_SYNCHRONOUS_CLOCK_MODE(hadc))
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	681b      	ldr	r3, [r3, #0]
 8003158:	4a79      	ldr	r2, [pc, #484]	; (8003340 <ADC_ConfigureBoostMode+0x1f4>)
 800315a:	4293      	cmp	r3, r2
 800315c:	d004      	beq.n	8003168 <ADC_ConfigureBoostMode+0x1c>
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	681b      	ldr	r3, [r3, #0]
 8003162:	4a78      	ldr	r2, [pc, #480]	; (8003344 <ADC_ConfigureBoostMode+0x1f8>)
 8003164:	4293      	cmp	r3, r2
 8003166:	d109      	bne.n	800317c <ADC_ConfigureBoostMode+0x30>
 8003168:	4b77      	ldr	r3, [pc, #476]	; (8003348 <ADC_ConfigureBoostMode+0x1fc>)
 800316a:	689b      	ldr	r3, [r3, #8]
 800316c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003170:	2b00      	cmp	r3, #0
 8003172:	bf14      	ite	ne
 8003174:	2301      	movne	r3, #1
 8003176:	2300      	moveq	r3, #0
 8003178:	b2db      	uxtb	r3, r3
 800317a:	e008      	b.n	800318e <ADC_ConfigureBoostMode+0x42>
 800317c:	4b73      	ldr	r3, [pc, #460]	; (800334c <ADC_ConfigureBoostMode+0x200>)
 800317e:	689b      	ldr	r3, [r3, #8]
 8003180:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003184:	2b00      	cmp	r3, #0
 8003186:	bf14      	ite	ne
 8003188:	2301      	movne	r3, #1
 800318a:	2300      	moveq	r3, #0
 800318c:	b2db      	uxtb	r3, r3
 800318e:	2b00      	cmp	r3, #0
 8003190:	d01c      	beq.n	80031cc <ADC_ConfigureBoostMode+0x80>
  {
    freq = HAL_RCC_GetHCLKFreq();
 8003192:	f004 fd15 	bl	8007bc0 <HAL_RCC_GetHCLKFreq>
 8003196:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	685b      	ldr	r3, [r3, #4]
 800319c:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80031a0:	d010      	beq.n	80031c4 <ADC_ConfigureBoostMode+0x78>
 80031a2:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80031a6:	d871      	bhi.n	800328c <ADC_ConfigureBoostMode+0x140>
 80031a8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80031ac:	d002      	beq.n	80031b4 <ADC_ConfigureBoostMode+0x68>
 80031ae:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80031b2:	d16b      	bne.n	800328c <ADC_ConfigureBoostMode+0x140>
    {
      case ADC_CLOCK_SYNC_PCLK_DIV1:
      case ADC_CLOCK_SYNC_PCLK_DIV2:
        freq /= (hadc->Init.ClockPrescaler >> ADC_CCR_CKMODE_Pos);
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	685b      	ldr	r3, [r3, #4]
 80031b8:	0c1b      	lsrs	r3, r3, #16
 80031ba:	68fa      	ldr	r2, [r7, #12]
 80031bc:	fbb2 f3f3 	udiv	r3, r2, r3
 80031c0:	60fb      	str	r3, [r7, #12]
        break;
 80031c2:	e066      	b.n	8003292 <ADC_ConfigureBoostMode+0x146>
      case ADC_CLOCK_SYNC_PCLK_DIV4:
        freq /= 4UL;
 80031c4:	68fb      	ldr	r3, [r7, #12]
 80031c6:	089b      	lsrs	r3, r3, #2
 80031c8:	60fb      	str	r3, [r7, #12]
        break;
 80031ca:	e062      	b.n	8003292 <ADC_ConfigureBoostMode+0x146>
        break;
    }
  }
  else
  {
    freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC);
 80031cc:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 80031d0:	f005 fc98 	bl	8008b04 <HAL_RCCEx_GetPeriphCLKFreq>
 80031d4:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	685b      	ldr	r3, [r3, #4]
 80031da:	f5b3 1f30 	cmp.w	r3, #2883584	; 0x2c0000
 80031de:	d051      	beq.n	8003284 <ADC_ConfigureBoostMode+0x138>
 80031e0:	f5b3 1f30 	cmp.w	r3, #2883584	; 0x2c0000
 80031e4:	d854      	bhi.n	8003290 <ADC_ConfigureBoostMode+0x144>
 80031e6:	f5b3 1f20 	cmp.w	r3, #2621440	; 0x280000
 80031ea:	d047      	beq.n	800327c <ADC_ConfigureBoostMode+0x130>
 80031ec:	f5b3 1f20 	cmp.w	r3, #2621440	; 0x280000
 80031f0:	d84e      	bhi.n	8003290 <ADC_ConfigureBoostMode+0x144>
 80031f2:	f5b3 1f10 	cmp.w	r3, #2359296	; 0x240000
 80031f6:	d03d      	beq.n	8003274 <ADC_ConfigureBoostMode+0x128>
 80031f8:	f5b3 1f10 	cmp.w	r3, #2359296	; 0x240000
 80031fc:	d848      	bhi.n	8003290 <ADC_ConfigureBoostMode+0x144>
 80031fe:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003202:	d033      	beq.n	800326c <ADC_ConfigureBoostMode+0x120>
 8003204:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003208:	d842      	bhi.n	8003290 <ADC_ConfigureBoostMode+0x144>
 800320a:	f5b3 1fe0 	cmp.w	r3, #1835008	; 0x1c0000
 800320e:	d029      	beq.n	8003264 <ADC_ConfigureBoostMode+0x118>
 8003210:	f5b3 1fe0 	cmp.w	r3, #1835008	; 0x1c0000
 8003214:	d83c      	bhi.n	8003290 <ADC_ConfigureBoostMode+0x144>
 8003216:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 800321a:	d01a      	beq.n	8003252 <ADC_ConfigureBoostMode+0x106>
 800321c:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 8003220:	d836      	bhi.n	8003290 <ADC_ConfigureBoostMode+0x144>
 8003222:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
 8003226:	d014      	beq.n	8003252 <ADC_ConfigureBoostMode+0x106>
 8003228:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
 800322c:	d830      	bhi.n	8003290 <ADC_ConfigureBoostMode+0x144>
 800322e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003232:	d00e      	beq.n	8003252 <ADC_ConfigureBoostMode+0x106>
 8003234:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003238:	d82a      	bhi.n	8003290 <ADC_ConfigureBoostMode+0x144>
 800323a:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 800323e:	d008      	beq.n	8003252 <ADC_ConfigureBoostMode+0x106>
 8003240:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8003244:	d824      	bhi.n	8003290 <ADC_ConfigureBoostMode+0x144>
 8003246:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800324a:	d002      	beq.n	8003252 <ADC_ConfigureBoostMode+0x106>
 800324c:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8003250:	d11e      	bne.n	8003290 <ADC_ConfigureBoostMode+0x144>
      case ADC_CLOCK_ASYNC_DIV4:
      case ADC_CLOCK_ASYNC_DIV6:
      case ADC_CLOCK_ASYNC_DIV8:
      case ADC_CLOCK_ASYNC_DIV10:
      case ADC_CLOCK_ASYNC_DIV12:
        freq /= ((hadc->Init.ClockPrescaler >> ADC_CCR_PRESC_Pos) << 1UL);
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	685b      	ldr	r3, [r3, #4]
 8003256:	0c9b      	lsrs	r3, r3, #18
 8003258:	005b      	lsls	r3, r3, #1
 800325a:	68fa      	ldr	r2, [r7, #12]
 800325c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003260:	60fb      	str	r3, [r7, #12]
        break;
 8003262:	e016      	b.n	8003292 <ADC_ConfigureBoostMode+0x146>
      case ADC_CLOCK_ASYNC_DIV16:
        freq /= 16UL;
 8003264:	68fb      	ldr	r3, [r7, #12]
 8003266:	091b      	lsrs	r3, r3, #4
 8003268:	60fb      	str	r3, [r7, #12]
        break;
 800326a:	e012      	b.n	8003292 <ADC_ConfigureBoostMode+0x146>
      case ADC_CLOCK_ASYNC_DIV32:
        freq /= 32UL;
 800326c:	68fb      	ldr	r3, [r7, #12]
 800326e:	095b      	lsrs	r3, r3, #5
 8003270:	60fb      	str	r3, [r7, #12]
        break;
 8003272:	e00e      	b.n	8003292 <ADC_ConfigureBoostMode+0x146>
      case ADC_CLOCK_ASYNC_DIV64:
        freq /= 64UL;
 8003274:	68fb      	ldr	r3, [r7, #12]
 8003276:	099b      	lsrs	r3, r3, #6
 8003278:	60fb      	str	r3, [r7, #12]
        break;
 800327a:	e00a      	b.n	8003292 <ADC_ConfigureBoostMode+0x146>
      case ADC_CLOCK_ASYNC_DIV128:
        freq /= 128UL;
 800327c:	68fb      	ldr	r3, [r7, #12]
 800327e:	09db      	lsrs	r3, r3, #7
 8003280:	60fb      	str	r3, [r7, #12]
        break;
 8003282:	e006      	b.n	8003292 <ADC_ConfigureBoostMode+0x146>
      case ADC_CLOCK_ASYNC_DIV256:
        freq /= 256UL;
 8003284:	68fb      	ldr	r3, [r7, #12]
 8003286:	0a1b      	lsrs	r3, r3, #8
 8003288:	60fb      	str	r3, [r7, #12]
        break;
 800328a:	e002      	b.n	8003292 <ADC_ConfigureBoostMode+0x146>
        break;
 800328c:	bf00      	nop
 800328e:	e000      	b.n	8003292 <ADC_ConfigureBoostMode+0x146>
      default:
        break;
 8003290:	bf00      	nop
  else /* if(freq > 25000000UL) */
  {
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
  }
#else
  if (HAL_GetREVID() <= REV_ID_Y) /* STM32H7 silicon Rev.Y */
 8003292:	f7ff f8bd 	bl	8002410 <HAL_GetREVID>
 8003296:	4603      	mov	r3, r0
 8003298:	f241 0203 	movw	r2, #4099	; 0x1003
 800329c:	4293      	cmp	r3, r2
 800329e:	d815      	bhi.n	80032cc <ADC_ConfigureBoostMode+0x180>
  {
    if (freq > 20000000UL)
 80032a0:	68fb      	ldr	r3, [r7, #12]
 80032a2:	4a2b      	ldr	r2, [pc, #172]	; (8003350 <ADC_ConfigureBoostMode+0x204>)
 80032a4:	4293      	cmp	r3, r2
 80032a6:	d908      	bls.n	80032ba <ADC_ConfigureBoostMode+0x16e>
    {
      SET_BIT(hadc->Instance->CR, ADC_CR_BOOST_0);
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	681b      	ldr	r3, [r3, #0]
 80032ac:	689a      	ldr	r2, [r3, #8]
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	681b      	ldr	r3, [r3, #0]
 80032b2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80032b6:	609a      	str	r2, [r3, #8]
    {
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
    }
  }
#endif /* ADC_VER_V5_3 */
}
 80032b8:	e03e      	b.n	8003338 <ADC_ConfigureBoostMode+0x1ec>
      CLEAR_BIT(hadc->Instance->CR, ADC_CR_BOOST_0);
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	681b      	ldr	r3, [r3, #0]
 80032be:	689a      	ldr	r2, [r3, #8]
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	681b      	ldr	r3, [r3, #0]
 80032c4:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80032c8:	609a      	str	r2, [r3, #8]
}
 80032ca:	e035      	b.n	8003338 <ADC_ConfigureBoostMode+0x1ec>
    freq /= 2U; /* divider by 2 for Rev.V */
 80032cc:	68fb      	ldr	r3, [r7, #12]
 80032ce:	085b      	lsrs	r3, r3, #1
 80032d0:	60fb      	str	r3, [r7, #12]
    if (freq <= 6250000UL)
 80032d2:	68fb      	ldr	r3, [r7, #12]
 80032d4:	4a1f      	ldr	r2, [pc, #124]	; (8003354 <ADC_ConfigureBoostMode+0x208>)
 80032d6:	4293      	cmp	r3, r2
 80032d8:	d808      	bhi.n	80032ec <ADC_ConfigureBoostMode+0x1a0>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, 0UL);
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	681b      	ldr	r3, [r3, #0]
 80032de:	689a      	ldr	r2, [r3, #8]
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	681b      	ldr	r3, [r3, #0]
 80032e4:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 80032e8:	609a      	str	r2, [r3, #8]
}
 80032ea:	e025      	b.n	8003338 <ADC_ConfigureBoostMode+0x1ec>
    else if (freq <= 12500000UL)
 80032ec:	68fb      	ldr	r3, [r7, #12]
 80032ee:	4a1a      	ldr	r2, [pc, #104]	; (8003358 <ADC_ConfigureBoostMode+0x20c>)
 80032f0:	4293      	cmp	r3, r2
 80032f2:	d80a      	bhi.n	800330a <ADC_ConfigureBoostMode+0x1be>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_0);
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	681b      	ldr	r3, [r3, #0]
 80032f8:	689b      	ldr	r3, [r3, #8]
 80032fa:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	681b      	ldr	r3, [r3, #0]
 8003302:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003306:	609a      	str	r2, [r3, #8]
}
 8003308:	e016      	b.n	8003338 <ADC_ConfigureBoostMode+0x1ec>
    else if (freq <= 25000000UL)
 800330a:	68fb      	ldr	r3, [r7, #12]
 800330c:	4a13      	ldr	r2, [pc, #76]	; (800335c <ADC_ConfigureBoostMode+0x210>)
 800330e:	4293      	cmp	r3, r2
 8003310:	d80a      	bhi.n	8003328 <ADC_ConfigureBoostMode+0x1dc>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1);
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	681b      	ldr	r3, [r3, #0]
 8003316:	689b      	ldr	r3, [r3, #8]
 8003318:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	681b      	ldr	r3, [r3, #0]
 8003320:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003324:	609a      	str	r2, [r3, #8]
}
 8003326:	e007      	b.n	8003338 <ADC_ConfigureBoostMode+0x1ec>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	681b      	ldr	r3, [r3, #0]
 800332c:	689a      	ldr	r2, [r3, #8]
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	681b      	ldr	r3, [r3, #0]
 8003332:	f442 7240 	orr.w	r2, r2, #768	; 0x300
 8003336:	609a      	str	r2, [r3, #8]
}
 8003338:	bf00      	nop
 800333a:	3710      	adds	r7, #16
 800333c:	46bd      	mov	sp, r7
 800333e:	bd80      	pop	{r7, pc}
 8003340:	40022000 	.word	0x40022000
 8003344:	40022100 	.word	0x40022100
 8003348:	40022300 	.word	0x40022300
 800334c:	58026300 	.word	0x58026300
 8003350:	01312d00 	.word	0x01312d00
 8003354:	005f5e10 	.word	0x005f5e10
 8003358:	00bebc20 	.word	0x00bebc20
 800335c:	017d7840 	.word	0x017d7840

08003360 <LL_ADC_IsEnabled>:
{
 8003360:	b480      	push	{r7}
 8003362:	b083      	sub	sp, #12
 8003364:	af00      	add	r7, sp, #0
 8003366:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	689b      	ldr	r3, [r3, #8]
 800336c:	f003 0301 	and.w	r3, r3, #1
 8003370:	2b01      	cmp	r3, #1
 8003372:	d101      	bne.n	8003378 <LL_ADC_IsEnabled+0x18>
 8003374:	2301      	movs	r3, #1
 8003376:	e000      	b.n	800337a <LL_ADC_IsEnabled+0x1a>
 8003378:	2300      	movs	r3, #0
}
 800337a:	4618      	mov	r0, r3
 800337c:	370c      	adds	r7, #12
 800337e:	46bd      	mov	sp, r7
 8003380:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003384:	4770      	bx	lr

08003386 <LL_ADC_REG_IsConversionOngoing>:
{
 8003386:	b480      	push	{r7}
 8003388:	b083      	sub	sp, #12
 800338a:	af00      	add	r7, sp, #0
 800338c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	689b      	ldr	r3, [r3, #8]
 8003392:	f003 0304 	and.w	r3, r3, #4
 8003396:	2b04      	cmp	r3, #4
 8003398:	d101      	bne.n	800339e <LL_ADC_REG_IsConversionOngoing+0x18>
 800339a:	2301      	movs	r3, #1
 800339c:	e000      	b.n	80033a0 <LL_ADC_REG_IsConversionOngoing+0x1a>
 800339e:	2300      	movs	r3, #0
}
 80033a0:	4618      	mov	r0, r3
 80033a2:	370c      	adds	r7, #12
 80033a4:	46bd      	mov	sp, r7
 80033a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033aa:	4770      	bx	lr

080033ac <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 80033ac:	b590      	push	{r4, r7, lr}
 80033ae:	b09f      	sub	sp, #124	; 0x7c
 80033b0:	af00      	add	r7, sp, #0
 80033b2:	6078      	str	r0, [r7, #4]
 80033b4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80033b6:	2300      	movs	r3, #0
 80033b8:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
    assert_param(IS_ADC_DUAL_DATA_MODE(multimode->DualModeData));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80033c2:	2b01      	cmp	r3, #1
 80033c4:	d101      	bne.n	80033ca <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 80033c6:	2302      	movs	r3, #2
 80033c8:	e0be      	b.n	8003548 <HAL_ADCEx_MultiModeConfigChannel+0x19c>
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	2201      	movs	r2, #1
 80033ce:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  tmphadcSlave.State = HAL_ADC_STATE_RESET;
 80033d2:	2300      	movs	r3, #0
 80033d4:	65fb      	str	r3, [r7, #92]	; 0x5c
  tmphadcSlave.ErrorCode = HAL_ADC_ERROR_NONE;
 80033d6:	2300      	movs	r3, #0
 80033d8:	663b      	str	r3, [r7, #96]	; 0x60

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	681b      	ldr	r3, [r3, #0]
 80033de:	4a5c      	ldr	r2, [pc, #368]	; (8003550 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 80033e0:	4293      	cmp	r3, r2
 80033e2:	d102      	bne.n	80033ea <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 80033e4:	4b5b      	ldr	r3, [pc, #364]	; (8003554 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 80033e6:	60bb      	str	r3, [r7, #8]
 80033e8:	e001      	b.n	80033ee <HAL_ADCEx_MultiModeConfigChannel+0x42>
 80033ea:	2300      	movs	r3, #0
 80033ec:	60bb      	str	r3, [r7, #8]

  if (tmphadcSlave.Instance == NULL)
 80033ee:	68bb      	ldr	r3, [r7, #8]
 80033f0:	2b00      	cmp	r3, #0
 80033f2:	d10b      	bne.n	800340c <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80033f8:	f043 0220 	orr.w	r2, r3, #32
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	2200      	movs	r2, #0
 8003404:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    return HAL_ERROR;
 8003408:	2301      	movs	r3, #1
 800340a:	e09d      	b.n	8003548 <HAL_ADCEx_MultiModeConfigChannel+0x19c>

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DATA Format configuration                                   */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 800340c:	68bb      	ldr	r3, [r7, #8]
 800340e:	4618      	mov	r0, r3
 8003410:	f7ff ffb9 	bl	8003386 <LL_ADC_REG_IsConversionOngoing>
 8003414:	6738      	str	r0, [r7, #112]	; 0x70
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	681b      	ldr	r3, [r3, #0]
 800341a:	4618      	mov	r0, r3
 800341c:	f7ff ffb3 	bl	8003386 <LL_ADC_REG_IsConversionOngoing>
 8003420:	4603      	mov	r3, r0
 8003422:	2b00      	cmp	r3, #0
 8003424:	d17f      	bne.n	8003526 <HAL_ADCEx_MultiModeConfigChannel+0x17a>
      && (tmphadcSlave_conversion_on_going == 0UL))
 8003426:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003428:	2b00      	cmp	r3, #0
 800342a:	d17c      	bne.n	8003526 <HAL_ADCEx_MultiModeConfigChannel+0x17a>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	681b      	ldr	r3, [r3, #0]
 8003430:	4a47      	ldr	r2, [pc, #284]	; (8003550 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 8003432:	4293      	cmp	r3, r2
 8003434:	d004      	beq.n	8003440 <HAL_ADCEx_MultiModeConfigChannel+0x94>
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	681b      	ldr	r3, [r3, #0]
 800343a:	4a46      	ldr	r2, [pc, #280]	; (8003554 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 800343c:	4293      	cmp	r3, r2
 800343e:	d101      	bne.n	8003444 <HAL_ADCEx_MultiModeConfigChannel+0x98>
 8003440:	4b45      	ldr	r3, [pc, #276]	; (8003558 <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 8003442:	e000      	b.n	8003446 <HAL_ADCEx_MultiModeConfigChannel+0x9a>
 8003444:	4b45      	ldr	r3, [pc, #276]	; (800355c <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 8003446:	66fb      	str	r3, [r7, #108]	; 0x6c

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8003448:	683b      	ldr	r3, [r7, #0]
 800344a:	681b      	ldr	r3, [r3, #0]
 800344c:	2b00      	cmp	r3, #0
 800344e:	d039      	beq.n	80034c4 <HAL_ADCEx_MultiModeConfigChannel+0x118>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_DAMDF, multimode->DualModeData);
 8003450:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003452:	689b      	ldr	r3, [r3, #8]
 8003454:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8003458:	683b      	ldr	r3, [r7, #0]
 800345a:	685b      	ldr	r3, [r3, #4]
 800345c:	431a      	orrs	r2, r3
 800345e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003460:	609a      	str	r2, [r3, #8]
      /*      from 1 to 8 clock cycles for 12 bits                              */
      /*      from 1 to 6 clock cycles for 10 and 8 bits                        */
      /*    If a higher delay is selected, it will be clipped to maximum delay  */
      /*    range                                                               */

      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	681b      	ldr	r3, [r3, #0]
 8003466:	4a3a      	ldr	r2, [pc, #232]	; (8003550 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 8003468:	4293      	cmp	r3, r2
 800346a:	d004      	beq.n	8003476 <HAL_ADCEx_MultiModeConfigChannel+0xca>
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	681b      	ldr	r3, [r3, #0]
 8003470:	4a38      	ldr	r2, [pc, #224]	; (8003554 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 8003472:	4293      	cmp	r3, r2
 8003474:	d10e      	bne.n	8003494 <HAL_ADCEx_MultiModeConfigChannel+0xe8>
 8003476:	4836      	ldr	r0, [pc, #216]	; (8003550 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 8003478:	f7ff ff72 	bl	8003360 <LL_ADC_IsEnabled>
 800347c:	4604      	mov	r4, r0
 800347e:	4835      	ldr	r0, [pc, #212]	; (8003554 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 8003480:	f7ff ff6e 	bl	8003360 <LL_ADC_IsEnabled>
 8003484:	4603      	mov	r3, r0
 8003486:	4323      	orrs	r3, r4
 8003488:	2b00      	cmp	r3, #0
 800348a:	bf0c      	ite	eq
 800348c:	2301      	moveq	r3, #1
 800348e:	2300      	movne	r3, #0
 8003490:	b2db      	uxtb	r3, r3
 8003492:	e008      	b.n	80034a6 <HAL_ADCEx_MultiModeConfigChannel+0xfa>
 8003494:	4832      	ldr	r0, [pc, #200]	; (8003560 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>)
 8003496:	f7ff ff63 	bl	8003360 <LL_ADC_IsEnabled>
 800349a:	4603      	mov	r3, r0
 800349c:	2b00      	cmp	r3, #0
 800349e:	bf0c      	ite	eq
 80034a0:	2301      	moveq	r3, #1
 80034a2:	2300      	movne	r3, #0
 80034a4:	b2db      	uxtb	r3, r3
 80034a6:	2b00      	cmp	r3, #0
 80034a8:	d047      	beq.n	800353a <HAL_ADCEx_MultiModeConfigChannel+0x18e>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 80034aa:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80034ac:	689a      	ldr	r2, [r3, #8]
 80034ae:	4b2d      	ldr	r3, [pc, #180]	; (8003564 <HAL_ADCEx_MultiModeConfigChannel+0x1b8>)
 80034b0:	4013      	ands	r3, r2
 80034b2:	683a      	ldr	r2, [r7, #0]
 80034b4:	6811      	ldr	r1, [r2, #0]
 80034b6:	683a      	ldr	r2, [r7, #0]
 80034b8:	6892      	ldr	r2, [r2, #8]
 80034ba:	430a      	orrs	r2, r1
 80034bc:	431a      	orrs	r2, r3
 80034be:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80034c0:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 80034c2:	e03a      	b.n	800353a <HAL_ADCEx_MultiModeConfigChannel+0x18e>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DAMDF);
 80034c4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80034c6:	689b      	ldr	r3, [r3, #8]
 80034c8:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80034cc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80034ce:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	681b      	ldr	r3, [r3, #0]
 80034d4:	4a1e      	ldr	r2, [pc, #120]	; (8003550 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 80034d6:	4293      	cmp	r3, r2
 80034d8:	d004      	beq.n	80034e4 <HAL_ADCEx_MultiModeConfigChannel+0x138>
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	681b      	ldr	r3, [r3, #0]
 80034de:	4a1d      	ldr	r2, [pc, #116]	; (8003554 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 80034e0:	4293      	cmp	r3, r2
 80034e2:	d10e      	bne.n	8003502 <HAL_ADCEx_MultiModeConfigChannel+0x156>
 80034e4:	481a      	ldr	r0, [pc, #104]	; (8003550 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 80034e6:	f7ff ff3b 	bl	8003360 <LL_ADC_IsEnabled>
 80034ea:	4604      	mov	r4, r0
 80034ec:	4819      	ldr	r0, [pc, #100]	; (8003554 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 80034ee:	f7ff ff37 	bl	8003360 <LL_ADC_IsEnabled>
 80034f2:	4603      	mov	r3, r0
 80034f4:	4323      	orrs	r3, r4
 80034f6:	2b00      	cmp	r3, #0
 80034f8:	bf0c      	ite	eq
 80034fa:	2301      	moveq	r3, #1
 80034fc:	2300      	movne	r3, #0
 80034fe:	b2db      	uxtb	r3, r3
 8003500:	e008      	b.n	8003514 <HAL_ADCEx_MultiModeConfigChannel+0x168>
 8003502:	4817      	ldr	r0, [pc, #92]	; (8003560 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>)
 8003504:	f7ff ff2c 	bl	8003360 <LL_ADC_IsEnabled>
 8003508:	4603      	mov	r3, r0
 800350a:	2b00      	cmp	r3, #0
 800350c:	bf0c      	ite	eq
 800350e:	2301      	moveq	r3, #1
 8003510:	2300      	movne	r3, #0
 8003512:	b2db      	uxtb	r3, r3
 8003514:	2b00      	cmp	r3, #0
 8003516:	d010      	beq.n	800353a <HAL_ADCEx_MultiModeConfigChannel+0x18e>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8003518:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800351a:	689a      	ldr	r2, [r3, #8]
 800351c:	4b11      	ldr	r3, [pc, #68]	; (8003564 <HAL_ADCEx_MultiModeConfigChannel+0x1b8>)
 800351e:	4013      	ands	r3, r2
 8003520:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8003522:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8003524:	e009      	b.n	800353a <HAL_ADCEx_MultiModeConfigChannel+0x18e>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800352a:	f043 0220 	orr.w	r2, r3, #32
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8003532:	2301      	movs	r3, #1
 8003534:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
 8003538:	e000      	b.n	800353c <HAL_ADCEx_MultiModeConfigChannel+0x190>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 800353a:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	2200      	movs	r2, #0
 8003540:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 8003544:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
}
 8003548:	4618      	mov	r0, r3
 800354a:	377c      	adds	r7, #124	; 0x7c
 800354c:	46bd      	mov	sp, r7
 800354e:	bd90      	pop	{r4, r7, pc}
 8003550:	40022000 	.word	0x40022000
 8003554:	40022100 	.word	0x40022100
 8003558:	40022300 	.word	0x40022300
 800355c:	58026300 	.word	0x58026300
 8003560:	58026000 	.word	0x58026000
 8003564:	fffff0e0 	.word	0xfffff0e0

08003568 <__NVIC_SetPriorityGrouping>:
{
 8003568:	b480      	push	{r7}
 800356a:	b085      	sub	sp, #20
 800356c:	af00      	add	r7, sp, #0
 800356e:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	f003 0307 	and.w	r3, r3, #7
 8003576:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003578:	4b0b      	ldr	r3, [pc, #44]	; (80035a8 <__NVIC_SetPriorityGrouping+0x40>)
 800357a:	68db      	ldr	r3, [r3, #12]
 800357c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800357e:	68ba      	ldr	r2, [r7, #8]
 8003580:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003584:	4013      	ands	r3, r2
 8003586:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003588:	68fb      	ldr	r3, [r7, #12]
 800358a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800358c:	68bb      	ldr	r3, [r7, #8]
 800358e:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8003590:	4b06      	ldr	r3, [pc, #24]	; (80035ac <__NVIC_SetPriorityGrouping+0x44>)
 8003592:	4313      	orrs	r3, r2
 8003594:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003596:	4a04      	ldr	r2, [pc, #16]	; (80035a8 <__NVIC_SetPriorityGrouping+0x40>)
 8003598:	68bb      	ldr	r3, [r7, #8]
 800359a:	60d3      	str	r3, [r2, #12]
}
 800359c:	bf00      	nop
 800359e:	3714      	adds	r7, #20
 80035a0:	46bd      	mov	sp, r7
 80035a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035a6:	4770      	bx	lr
 80035a8:	e000ed00 	.word	0xe000ed00
 80035ac:	05fa0000 	.word	0x05fa0000

080035b0 <__NVIC_GetPriorityGrouping>:
{
 80035b0:	b480      	push	{r7}
 80035b2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80035b4:	4b04      	ldr	r3, [pc, #16]	; (80035c8 <__NVIC_GetPriorityGrouping+0x18>)
 80035b6:	68db      	ldr	r3, [r3, #12]
 80035b8:	0a1b      	lsrs	r3, r3, #8
 80035ba:	f003 0307 	and.w	r3, r3, #7
}
 80035be:	4618      	mov	r0, r3
 80035c0:	46bd      	mov	sp, r7
 80035c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035c6:	4770      	bx	lr
 80035c8:	e000ed00 	.word	0xe000ed00

080035cc <__NVIC_EnableIRQ>:
{
 80035cc:	b480      	push	{r7}
 80035ce:	b083      	sub	sp, #12
 80035d0:	af00      	add	r7, sp, #0
 80035d2:	4603      	mov	r3, r0
 80035d4:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80035d6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80035da:	2b00      	cmp	r3, #0
 80035dc:	db0b      	blt.n	80035f6 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80035de:	88fb      	ldrh	r3, [r7, #6]
 80035e0:	f003 021f 	and.w	r2, r3, #31
 80035e4:	4907      	ldr	r1, [pc, #28]	; (8003604 <__NVIC_EnableIRQ+0x38>)
 80035e6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80035ea:	095b      	lsrs	r3, r3, #5
 80035ec:	2001      	movs	r0, #1
 80035ee:	fa00 f202 	lsl.w	r2, r0, r2
 80035f2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 80035f6:	bf00      	nop
 80035f8:	370c      	adds	r7, #12
 80035fa:	46bd      	mov	sp, r7
 80035fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003600:	4770      	bx	lr
 8003602:	bf00      	nop
 8003604:	e000e100 	.word	0xe000e100

08003608 <__NVIC_SetPriority>:
{
 8003608:	b480      	push	{r7}
 800360a:	b083      	sub	sp, #12
 800360c:	af00      	add	r7, sp, #0
 800360e:	4603      	mov	r3, r0
 8003610:	6039      	str	r1, [r7, #0]
 8003612:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8003614:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003618:	2b00      	cmp	r3, #0
 800361a:	db0a      	blt.n	8003632 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800361c:	683b      	ldr	r3, [r7, #0]
 800361e:	b2da      	uxtb	r2, r3
 8003620:	490c      	ldr	r1, [pc, #48]	; (8003654 <__NVIC_SetPriority+0x4c>)
 8003622:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003626:	0112      	lsls	r2, r2, #4
 8003628:	b2d2      	uxtb	r2, r2
 800362a:	440b      	add	r3, r1
 800362c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8003630:	e00a      	b.n	8003648 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003632:	683b      	ldr	r3, [r7, #0]
 8003634:	b2da      	uxtb	r2, r3
 8003636:	4908      	ldr	r1, [pc, #32]	; (8003658 <__NVIC_SetPriority+0x50>)
 8003638:	88fb      	ldrh	r3, [r7, #6]
 800363a:	f003 030f 	and.w	r3, r3, #15
 800363e:	3b04      	subs	r3, #4
 8003640:	0112      	lsls	r2, r2, #4
 8003642:	b2d2      	uxtb	r2, r2
 8003644:	440b      	add	r3, r1
 8003646:	761a      	strb	r2, [r3, #24]
}
 8003648:	bf00      	nop
 800364a:	370c      	adds	r7, #12
 800364c:	46bd      	mov	sp, r7
 800364e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003652:	4770      	bx	lr
 8003654:	e000e100 	.word	0xe000e100
 8003658:	e000ed00 	.word	0xe000ed00

0800365c <NVIC_EncodePriority>:
{
 800365c:	b480      	push	{r7}
 800365e:	b089      	sub	sp, #36	; 0x24
 8003660:	af00      	add	r7, sp, #0
 8003662:	60f8      	str	r0, [r7, #12]
 8003664:	60b9      	str	r1, [r7, #8]
 8003666:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003668:	68fb      	ldr	r3, [r7, #12]
 800366a:	f003 0307 	and.w	r3, r3, #7
 800366e:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003670:	69fb      	ldr	r3, [r7, #28]
 8003672:	f1c3 0307 	rsb	r3, r3, #7
 8003676:	2b04      	cmp	r3, #4
 8003678:	bf28      	it	cs
 800367a:	2304      	movcs	r3, #4
 800367c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800367e:	69fb      	ldr	r3, [r7, #28]
 8003680:	3304      	adds	r3, #4
 8003682:	2b06      	cmp	r3, #6
 8003684:	d902      	bls.n	800368c <NVIC_EncodePriority+0x30>
 8003686:	69fb      	ldr	r3, [r7, #28]
 8003688:	3b03      	subs	r3, #3
 800368a:	e000      	b.n	800368e <NVIC_EncodePriority+0x32>
 800368c:	2300      	movs	r3, #0
 800368e:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003690:	f04f 32ff 	mov.w	r2, #4294967295
 8003694:	69bb      	ldr	r3, [r7, #24]
 8003696:	fa02 f303 	lsl.w	r3, r2, r3
 800369a:	43da      	mvns	r2, r3
 800369c:	68bb      	ldr	r3, [r7, #8]
 800369e:	401a      	ands	r2, r3
 80036a0:	697b      	ldr	r3, [r7, #20]
 80036a2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80036a4:	f04f 31ff 	mov.w	r1, #4294967295
 80036a8:	697b      	ldr	r3, [r7, #20]
 80036aa:	fa01 f303 	lsl.w	r3, r1, r3
 80036ae:	43d9      	mvns	r1, r3
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80036b4:	4313      	orrs	r3, r2
}
 80036b6:	4618      	mov	r0, r3
 80036b8:	3724      	adds	r7, #36	; 0x24
 80036ba:	46bd      	mov	sp, r7
 80036bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036c0:	4770      	bx	lr
	...

080036c4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80036c4:	b580      	push	{r7, lr}
 80036c6:	b082      	sub	sp, #8
 80036c8:	af00      	add	r7, sp, #0
 80036ca:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	3b01      	subs	r3, #1
 80036d0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80036d4:	d301      	bcc.n	80036da <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80036d6:	2301      	movs	r3, #1
 80036d8:	e00f      	b.n	80036fa <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80036da:	4a0a      	ldr	r2, [pc, #40]	; (8003704 <SysTick_Config+0x40>)
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	3b01      	subs	r3, #1
 80036e0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80036e2:	210f      	movs	r1, #15
 80036e4:	f04f 30ff 	mov.w	r0, #4294967295
 80036e8:	f7ff ff8e 	bl	8003608 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80036ec:	4b05      	ldr	r3, [pc, #20]	; (8003704 <SysTick_Config+0x40>)
 80036ee:	2200      	movs	r2, #0
 80036f0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80036f2:	4b04      	ldr	r3, [pc, #16]	; (8003704 <SysTick_Config+0x40>)
 80036f4:	2207      	movs	r2, #7
 80036f6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80036f8:	2300      	movs	r3, #0
}
 80036fa:	4618      	mov	r0, r3
 80036fc:	3708      	adds	r7, #8
 80036fe:	46bd      	mov	sp, r7
 8003700:	bd80      	pop	{r7, pc}
 8003702:	bf00      	nop
 8003704:	e000e010 	.word	0xe000e010

08003708 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003708:	b580      	push	{r7, lr}
 800370a:	b082      	sub	sp, #8
 800370c:	af00      	add	r7, sp, #0
 800370e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003710:	6878      	ldr	r0, [r7, #4]
 8003712:	f7ff ff29 	bl	8003568 <__NVIC_SetPriorityGrouping>
}
 8003716:	bf00      	nop
 8003718:	3708      	adds	r7, #8
 800371a:	46bd      	mov	sp, r7
 800371c:	bd80      	pop	{r7, pc}

0800371e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800371e:	b580      	push	{r7, lr}
 8003720:	b086      	sub	sp, #24
 8003722:	af00      	add	r7, sp, #0
 8003724:	4603      	mov	r3, r0
 8003726:	60b9      	str	r1, [r7, #8]
 8003728:	607a      	str	r2, [r7, #4]
 800372a:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800372c:	f7ff ff40 	bl	80035b0 <__NVIC_GetPriorityGrouping>
 8003730:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003732:	687a      	ldr	r2, [r7, #4]
 8003734:	68b9      	ldr	r1, [r7, #8]
 8003736:	6978      	ldr	r0, [r7, #20]
 8003738:	f7ff ff90 	bl	800365c <NVIC_EncodePriority>
 800373c:	4602      	mov	r2, r0
 800373e:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8003742:	4611      	mov	r1, r2
 8003744:	4618      	mov	r0, r3
 8003746:	f7ff ff5f 	bl	8003608 <__NVIC_SetPriority>
}
 800374a:	bf00      	nop
 800374c:	3718      	adds	r7, #24
 800374e:	46bd      	mov	sp, r7
 8003750:	bd80      	pop	{r7, pc}

08003752 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003752:	b580      	push	{r7, lr}
 8003754:	b082      	sub	sp, #8
 8003756:	af00      	add	r7, sp, #0
 8003758:	4603      	mov	r3, r0
 800375a:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800375c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003760:	4618      	mov	r0, r3
 8003762:	f7ff ff33 	bl	80035cc <__NVIC_EnableIRQ>
}
 8003766:	bf00      	nop
 8003768:	3708      	adds	r7, #8
 800376a:	46bd      	mov	sp, r7
 800376c:	bd80      	pop	{r7, pc}

0800376e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800376e:	b580      	push	{r7, lr}
 8003770:	b082      	sub	sp, #8
 8003772:	af00      	add	r7, sp, #0
 8003774:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003776:	6878      	ldr	r0, [r7, #4]
 8003778:	f7ff ffa4 	bl	80036c4 <SysTick_Config>
 800377c:	4603      	mov	r3, r0
}
 800377e:	4618      	mov	r0, r3
 8003780:	3708      	adds	r7, #8
 8003782:	46bd      	mov	sp, r7
 8003784:	bd80      	pop	{r7, pc}

08003786 <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 8003786:	b580      	push	{r7, lr}
 8003788:	b082      	sub	sp, #8
 800378a:	af00      	add	r7, sp, #0
 800378c:	6078      	str	r0, [r7, #4]
  /* Check DAC handle */
  if (hdac == NULL)
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	2b00      	cmp	r3, #0
 8003792:	d101      	bne.n	8003798 <HAL_DAC_Init+0x12>
  {
    return HAL_ERROR;
 8003794:	2301      	movs	r3, #1
 8003796:	e014      	b.n	80037c2 <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	791b      	ldrb	r3, [r3, #4]
 800379c:	b2db      	uxtb	r3, r3
 800379e:	2b00      	cmp	r3, #0
 80037a0:	d105      	bne.n	80037ae <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	2200      	movs	r2, #0
 80037a6:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 80037a8:	6878      	ldr	r0, [r7, #4]
 80037aa:	f7fd fa89 	bl	8000cc0 <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	2202      	movs	r2, #2
 80037b2:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	2200      	movs	r2, #0
 80037b8:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	2201      	movs	r2, #1
 80037be:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 80037c0:	2300      	movs	r3, #0
}
 80037c2:	4618      	mov	r0, r3
 80037c4:	3708      	adds	r7, #8
 80037c6:	46bd      	mov	sp, r7
 80037c8:	bd80      	pop	{r7, pc}
	...

080037cc <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac, DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 80037cc:	b580      	push	{r7, lr}
 80037ce:	b088      	sub	sp, #32
 80037d0:	af00      	add	r7, sp, #0
 80037d2:	60f8      	str	r0, [r7, #12]
 80037d4:	60b9      	str	r1, [r7, #8]
 80037d6:	607a      	str	r2, [r7, #4]
    assert_param(IS_DAC_REFRESHTIME(sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime));
  }
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 80037d8:	68fb      	ldr	r3, [r7, #12]
 80037da:	795b      	ldrb	r3, [r3, #5]
 80037dc:	2b01      	cmp	r3, #1
 80037de:	d101      	bne.n	80037e4 <HAL_DAC_ConfigChannel+0x18>
 80037e0:	2302      	movs	r3, #2
 80037e2:	e11d      	b.n	8003a20 <HAL_DAC_ConfigChannel+0x254>
 80037e4:	68fb      	ldr	r3, [r7, #12]
 80037e6:	2201      	movs	r2, #1
 80037e8:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 80037ea:	68fb      	ldr	r3, [r7, #12]
 80037ec:	2202      	movs	r2, #2
 80037ee:	711a      	strb	r2, [r3, #4]

  /* Sample and hold configuration */
  if (sConfig->DAC_SampleAndHold == DAC_SAMPLEANDHOLD_ENABLE)
 80037f0:	68bb      	ldr	r3, [r7, #8]
 80037f2:	681b      	ldr	r3, [r3, #0]
 80037f4:	2b04      	cmp	r3, #4
 80037f6:	d174      	bne.n	80038e2 <HAL_DAC_ConfigChannel+0x116>
  {
    /* Get timeout */
    tickstart = HAL_GetTick();
 80037f8:	f7fe fdda 	bl	80023b0 <HAL_GetTick>
 80037fc:	61b8      	str	r0, [r7, #24]

    if (Channel == DAC_CHANNEL_1)
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	2b00      	cmp	r3, #0
 8003802:	d134      	bne.n	800386e <HAL_DAC_ConfigChannel+0xa2>
    {
      /* SHSR1 can be written when BWST1 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8003804:	e011      	b.n	800382a <HAL_DAC_ConfigChannel+0x5e>
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 8003806:	f7fe fdd3 	bl	80023b0 <HAL_GetTick>
 800380a:	4602      	mov	r2, r0
 800380c:	69bb      	ldr	r3, [r7, #24]
 800380e:	1ad3      	subs	r3, r2, r3
 8003810:	2b01      	cmp	r3, #1
 8003812:	d90a      	bls.n	800382a <HAL_DAC_ConfigChannel+0x5e>
        {
          /* Update error code */
          SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 8003814:	68fb      	ldr	r3, [r7, #12]
 8003816:	691b      	ldr	r3, [r3, #16]
 8003818:	f043 0208 	orr.w	r2, r3, #8
 800381c:	68fb      	ldr	r3, [r7, #12]
 800381e:	611a      	str	r2, [r3, #16]

          /* Change the DMA state */
          hdac->State = HAL_DAC_STATE_TIMEOUT;
 8003820:	68fb      	ldr	r3, [r7, #12]
 8003822:	2203      	movs	r2, #3
 8003824:	711a      	strb	r2, [r3, #4]

          return HAL_TIMEOUT;
 8003826:	2303      	movs	r3, #3
 8003828:	e0fa      	b.n	8003a20 <HAL_DAC_ConfigChannel+0x254>
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 800382a:	68fb      	ldr	r3, [r7, #12]
 800382c:	681b      	ldr	r3, [r3, #0]
 800382e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003830:	4b7d      	ldr	r3, [pc, #500]	; (8003a28 <HAL_DAC_ConfigChannel+0x25c>)
 8003832:	4013      	ands	r3, r2
 8003834:	2b00      	cmp	r3, #0
 8003836:	d1e6      	bne.n	8003806 <HAL_DAC_ConfigChannel+0x3a>
        }
      }
      HAL_Delay(1);
 8003838:	2001      	movs	r0, #1
 800383a:	f7fe fdc5 	bl	80023c8 <HAL_Delay>
      hdac->Instance->SHSR1 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 800383e:	68fb      	ldr	r3, [r7, #12]
 8003840:	681b      	ldr	r3, [r3, #0]
 8003842:	68ba      	ldr	r2, [r7, #8]
 8003844:	6992      	ldr	r2, [r2, #24]
 8003846:	641a      	str	r2, [r3, #64]	; 0x40
 8003848:	e01e      	b.n	8003888 <HAL_DAC_ConfigChannel+0xbc>
    {
      /* SHSR2 can be written when BWST2 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 800384a:	f7fe fdb1 	bl	80023b0 <HAL_GetTick>
 800384e:	4602      	mov	r2, r0
 8003850:	69bb      	ldr	r3, [r7, #24]
 8003852:	1ad3      	subs	r3, r2, r3
 8003854:	2b01      	cmp	r3, #1
 8003856:	d90a      	bls.n	800386e <HAL_DAC_ConfigChannel+0xa2>
        {
          /* Update error code */
          SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 8003858:	68fb      	ldr	r3, [r7, #12]
 800385a:	691b      	ldr	r3, [r3, #16]
 800385c:	f043 0208 	orr.w	r2, r3, #8
 8003860:	68fb      	ldr	r3, [r7, #12]
 8003862:	611a      	str	r2, [r3, #16]

          /* Change the DMA state */
          hdac->State = HAL_DAC_STATE_TIMEOUT;
 8003864:	68fb      	ldr	r3, [r7, #12]
 8003866:	2203      	movs	r2, #3
 8003868:	711a      	strb	r2, [r3, #4]

          return HAL_TIMEOUT;
 800386a:	2303      	movs	r3, #3
 800386c:	e0d8      	b.n	8003a20 <HAL_DAC_ConfigChannel+0x254>
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 800386e:	68fb      	ldr	r3, [r7, #12]
 8003870:	681b      	ldr	r3, [r3, #0]
 8003872:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003874:	2b00      	cmp	r3, #0
 8003876:	dbe8      	blt.n	800384a <HAL_DAC_ConfigChannel+0x7e>
        }
      }
      HAL_Delay(1U);
 8003878:	2001      	movs	r0, #1
 800387a:	f7fe fda5 	bl	80023c8 <HAL_Delay>
      hdac->Instance->SHSR2 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 800387e:	68fb      	ldr	r3, [r7, #12]
 8003880:	681b      	ldr	r3, [r3, #0]
 8003882:	68ba      	ldr	r2, [r7, #8]
 8003884:	6992      	ldr	r2, [r2, #24]
 8003886:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* HoldTime */
    MODIFY_REG(hdac->Instance->SHHR, DAC_SHHR_THOLD1 << (Channel & 0x10UL),
 8003888:	68fb      	ldr	r3, [r7, #12]
 800388a:	681b      	ldr	r3, [r3, #0]
 800388c:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	f003 0310 	and.w	r3, r3, #16
 8003894:	f240 31ff 	movw	r1, #1023	; 0x3ff
 8003898:	fa01 f303 	lsl.w	r3, r1, r3
 800389c:	43db      	mvns	r3, r3
 800389e:	ea02 0103 	and.w	r1, r2, r3
 80038a2:	68bb      	ldr	r3, [r7, #8]
 80038a4:	69da      	ldr	r2, [r3, #28]
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	f003 0310 	and.w	r3, r3, #16
 80038ac:	409a      	lsls	r2, r3
 80038ae:	68fb      	ldr	r3, [r7, #12]
 80038b0:	681b      	ldr	r3, [r3, #0]
 80038b2:	430a      	orrs	r2, r1
 80038b4:	649a      	str	r2, [r3, #72]	; 0x48
               (sConfig->DAC_SampleAndHoldConfig.DAC_HoldTime) << (Channel & 0x10UL));
    /* RefreshTime */
    MODIFY_REG(hdac->Instance->SHRR, DAC_SHRR_TREFRESH1 << (Channel & 0x10UL),
 80038b6:	68fb      	ldr	r3, [r7, #12]
 80038b8:	681b      	ldr	r3, [r3, #0]
 80038ba:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	f003 0310 	and.w	r3, r3, #16
 80038c2:	21ff      	movs	r1, #255	; 0xff
 80038c4:	fa01 f303 	lsl.w	r3, r1, r3
 80038c8:	43db      	mvns	r3, r3
 80038ca:	ea02 0103 	and.w	r1, r2, r3
 80038ce:	68bb      	ldr	r3, [r7, #8]
 80038d0:	6a1a      	ldr	r2, [r3, #32]
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	f003 0310 	and.w	r3, r3, #16
 80038d8:	409a      	lsls	r2, r3
 80038da:	68fb      	ldr	r3, [r7, #12]
 80038dc:	681b      	ldr	r3, [r3, #0]
 80038de:	430a      	orrs	r2, r1
 80038e0:	64da      	str	r2, [r3, #76]	; 0x4c
               (sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime) << (Channel & 0x10UL));
  }

  if (sConfig->DAC_UserTrimming == DAC_TRIMMING_USER)
 80038e2:	68bb      	ldr	r3, [r7, #8]
 80038e4:	691b      	ldr	r3, [r3, #16]
 80038e6:	2b01      	cmp	r3, #1
 80038e8:	d11d      	bne.n	8003926 <HAL_DAC_ConfigChannel+0x15a>
    /* USER TRIMMING */
  {
    /* Get the DAC CCR value */
    tmpreg1 = hdac->Instance->CCR;
 80038ea:	68fb      	ldr	r3, [r7, #12]
 80038ec:	681b      	ldr	r3, [r3, #0]
 80038ee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80038f0:	617b      	str	r3, [r7, #20]
    /* Clear trimming value */
    tmpreg1 &= ~(((uint32_t)(DAC_CCR_OTRIM1)) << (Channel & 0x10UL));
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	f003 0310 	and.w	r3, r3, #16
 80038f8:	221f      	movs	r2, #31
 80038fa:	fa02 f303 	lsl.w	r3, r2, r3
 80038fe:	43db      	mvns	r3, r3
 8003900:	697a      	ldr	r2, [r7, #20]
 8003902:	4013      	ands	r3, r2
 8003904:	617b      	str	r3, [r7, #20]
    /* Configure for the selected trimming offset */
    tmpreg2 = sConfig->DAC_TrimmingValue;
 8003906:	68bb      	ldr	r3, [r7, #8]
 8003908:	695b      	ldr	r3, [r3, #20]
 800390a:	613b      	str	r3, [r7, #16]
    /* Calculate CCR register value depending on DAC_Channel */
    tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	f003 0310 	and.w	r3, r3, #16
 8003912:	693a      	ldr	r2, [r7, #16]
 8003914:	fa02 f303 	lsl.w	r3, r2, r3
 8003918:	697a      	ldr	r2, [r7, #20]
 800391a:	4313      	orrs	r3, r2
 800391c:	617b      	str	r3, [r7, #20]
    /* Write to DAC CCR */
    hdac->Instance->CCR = tmpreg1;
 800391e:	68fb      	ldr	r3, [r7, #12]
 8003920:	681b      	ldr	r3, [r3, #0]
 8003922:	697a      	ldr	r2, [r7, #20]
 8003924:	639a      	str	r2, [r3, #56]	; 0x38
  }
  /* else factory trimming is used (factory setting are available at reset)*/
  /* SW Nothing has nothing to do */

  /* Get the DAC MCR value */
  tmpreg1 = hdac->Instance->MCR;
 8003926:	68fb      	ldr	r3, [r7, #12]
 8003928:	681b      	ldr	r3, [r3, #0]
 800392a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800392c:	617b      	str	r3, [r7, #20]
  /* Clear DAC_MCR_MODEx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_MODE1)) << (Channel & 0x10UL));
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	f003 0310 	and.w	r3, r3, #16
 8003934:	2207      	movs	r2, #7
 8003936:	fa02 f303 	lsl.w	r3, r2, r3
 800393a:	43db      	mvns	r3, r3
 800393c:	697a      	ldr	r2, [r7, #20]
 800393e:	4013      	ands	r3, r2
 8003940:	617b      	str	r3, [r7, #20]
  /* Configure for the selected DAC channel: mode, buffer output & on chip peripheral connect */
  if (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_EXTERNAL)
 8003942:	68bb      	ldr	r3, [r7, #8]
 8003944:	68db      	ldr	r3, [r3, #12]
 8003946:	2b01      	cmp	r3, #1
 8003948:	d102      	bne.n	8003950 <HAL_DAC_ConfigChannel+0x184>
  {
    connectOnChip = 0x00000000UL;
 800394a:	2300      	movs	r3, #0
 800394c:	61fb      	str	r3, [r7, #28]
 800394e:	e00f      	b.n	8003970 <HAL_DAC_ConfigChannel+0x1a4>
  }
  else if (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_INTERNAL)
 8003950:	68bb      	ldr	r3, [r7, #8]
 8003952:	68db      	ldr	r3, [r3, #12]
 8003954:	2b02      	cmp	r3, #2
 8003956:	d102      	bne.n	800395e <HAL_DAC_ConfigChannel+0x192>
  {
    connectOnChip = DAC_MCR_MODE1_0;
 8003958:	2301      	movs	r3, #1
 800395a:	61fb      	str	r3, [r7, #28]
 800395c:	e008      	b.n	8003970 <HAL_DAC_ConfigChannel+0x1a4>
  }
  else /* (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_BOTH) */
  {
    if (sConfig->DAC_OutputBuffer == DAC_OUTPUTBUFFER_ENABLE)
 800395e:	68bb      	ldr	r3, [r7, #8]
 8003960:	689b      	ldr	r3, [r3, #8]
 8003962:	2b00      	cmp	r3, #0
 8003964:	d102      	bne.n	800396c <HAL_DAC_ConfigChannel+0x1a0>
    {
      connectOnChip = DAC_MCR_MODE1_0;
 8003966:	2301      	movs	r3, #1
 8003968:	61fb      	str	r3, [r7, #28]
 800396a:	e001      	b.n	8003970 <HAL_DAC_ConfigChannel+0x1a4>
    }
    else
    {
      connectOnChip = 0x00000000UL;
 800396c:	2300      	movs	r3, #0
 800396e:	61fb      	str	r3, [r7, #28]
    }
  }
  tmpreg2 = (sConfig->DAC_SampleAndHold | sConfig->DAC_OutputBuffer | connectOnChip);
 8003970:	68bb      	ldr	r3, [r7, #8]
 8003972:	681a      	ldr	r2, [r3, #0]
 8003974:	68bb      	ldr	r3, [r7, #8]
 8003976:	689b      	ldr	r3, [r3, #8]
 8003978:	4313      	orrs	r3, r2
 800397a:	69fa      	ldr	r2, [r7, #28]
 800397c:	4313      	orrs	r3, r2
 800397e:	613b      	str	r3, [r7, #16]
  /* Calculate MCR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	f003 0310 	and.w	r3, r3, #16
 8003986:	693a      	ldr	r2, [r7, #16]
 8003988:	fa02 f303 	lsl.w	r3, r2, r3
 800398c:	697a      	ldr	r2, [r7, #20]
 800398e:	4313      	orrs	r3, r2
 8003990:	617b      	str	r3, [r7, #20]
  /* Write to DAC MCR */
  hdac->Instance->MCR = tmpreg1;
 8003992:	68fb      	ldr	r3, [r7, #12]
 8003994:	681b      	ldr	r3, [r3, #0]
 8003996:	697a      	ldr	r2, [r7, #20]
 8003998:	63da      	str	r2, [r3, #60]	; 0x3c

  /* DAC in normal operating mode hence clear DAC_CR_CENx bit */
  CLEAR_BIT(hdac->Instance->CR, DAC_CR_CEN1 << (Channel & 0x10UL));
 800399a:	68fb      	ldr	r3, [r7, #12]
 800399c:	681b      	ldr	r3, [r3, #0]
 800399e:	6819      	ldr	r1, [r3, #0]
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	f003 0310 	and.w	r3, r3, #16
 80039a6:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80039aa:	fa02 f303 	lsl.w	r3, r2, r3
 80039ae:	43da      	mvns	r2, r3
 80039b0:	68fb      	ldr	r3, [r7, #12]
 80039b2:	681b      	ldr	r3, [r3, #0]
 80039b4:	400a      	ands	r2, r1
 80039b6:	601a      	str	r2, [r3, #0]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 80039b8:	68fb      	ldr	r3, [r7, #12]
 80039ba:	681b      	ldr	r3, [r3, #0]
 80039bc:	681b      	ldr	r3, [r3, #0]
 80039be:	617b      	str	r3, [r7, #20]
  /* Clear TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1)) << (Channel & 0x10UL));
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	f003 0310 	and.w	r3, r3, #16
 80039c6:	f640 72fe 	movw	r2, #4094	; 0xffe
 80039ca:	fa02 f303 	lsl.w	r3, r2, r3
 80039ce:	43db      	mvns	r3, r3
 80039d0:	697a      	ldr	r2, [r7, #20]
 80039d2:	4013      	ands	r3, r2
 80039d4:	617b      	str	r3, [r7, #20]
  /* Configure for the selected DAC channel: trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  tmpreg2 = sConfig->DAC_Trigger;
 80039d6:	68bb      	ldr	r3, [r7, #8]
 80039d8:	685b      	ldr	r3, [r3, #4]
 80039da:	613b      	str	r3, [r7, #16]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	f003 0310 	and.w	r3, r3, #16
 80039e2:	693a      	ldr	r2, [r7, #16]
 80039e4:	fa02 f303 	lsl.w	r3, r2, r3
 80039e8:	697a      	ldr	r2, [r7, #20]
 80039ea:	4313      	orrs	r3, r2
 80039ec:	617b      	str	r3, [r7, #20]
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 80039ee:	68fb      	ldr	r3, [r7, #12]
 80039f0:	681b      	ldr	r3, [r3, #0]
 80039f2:	697a      	ldr	r2, [r7, #20]
 80039f4:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  hdac->Instance->CR &= ~(DAC_CR_WAVE1 << (Channel & 0x10UL));
 80039f6:	68fb      	ldr	r3, [r7, #12]
 80039f8:	681b      	ldr	r3, [r3, #0]
 80039fa:	6819      	ldr	r1, [r3, #0]
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	f003 0310 	and.w	r3, r3, #16
 8003a02:	22c0      	movs	r2, #192	; 0xc0
 8003a04:	fa02 f303 	lsl.w	r3, r2, r3
 8003a08:	43da      	mvns	r2, r3
 8003a0a:	68fb      	ldr	r3, [r7, #12]
 8003a0c:	681b      	ldr	r3, [r3, #0]
 8003a0e:	400a      	ands	r2, r1
 8003a10:	601a      	str	r2, [r3, #0]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8003a12:	68fb      	ldr	r3, [r7, #12]
 8003a14:	2201      	movs	r2, #1
 8003a16:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8003a18:	68fb      	ldr	r3, [r7, #12]
 8003a1a:	2200      	movs	r2, #0
 8003a1c:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8003a1e:	2300      	movs	r3, #0
}
 8003a20:	4618      	mov	r0, r3
 8003a22:	3720      	adds	r7, #32
 8003a24:	46bd      	mov	sp, r7
 8003a26:	bd80      	pop	{r7, pc}
 8003a28:	20008000 	.word	0x20008000

08003a2c <HAL_DMA2D_Init>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Init(DMA2D_HandleTypeDef *hdma2d)
{
 8003a2c:	b580      	push	{r7, lr}
 8003a2e:	b082      	sub	sp, #8
 8003a30:	af00      	add	r7, sp, #0
 8003a32:	6078      	str	r0, [r7, #4]
  /* Check the DMA2D peripheral state */
  if (hdma2d == NULL)
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	2b00      	cmp	r3, #0
 8003a38:	d101      	bne.n	8003a3e <HAL_DMA2D_Init+0x12>
  {
    return HAL_ERROR;
 8003a3a:	2301      	movs	r3, #1
 8003a3c:	e04f      	b.n	8003ade <HAL_DMA2D_Init+0xb2>

    /* Init the low level hardware */
    hdma2d->MspInitCallback(hdma2d);
  }
#else
  if (hdma2d->State == HAL_DMA2D_STATE_RESET)
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	f893 3061 	ldrb.w	r3, [r3, #97]	; 0x61
 8003a44:	b2db      	uxtb	r3, r3
 8003a46:	2b00      	cmp	r3, #0
 8003a48:	d106      	bne.n	8003a58 <HAL_DMA2D_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hdma2d->Lock = HAL_UNLOCKED;
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	2200      	movs	r2, #0
 8003a4e:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
    /* Init the low level hardware */
    HAL_DMA2D_MspInit(hdma2d);
 8003a52:	6878      	ldr	r0, [r7, #4]
 8003a54:	f7fd f9b4 	bl	8000dc0 <HAL_DMA2D_MspInit>
  }
#endif /* (USE_HAL_DMA2D_REGISTER_CALLBACKS) */

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	2202      	movs	r2, #2
 8003a5c:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61

  /* DMA2D CR register configuration -------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE | DMA2D_CR_LOM, hdma2d->Init.Mode | hdma2d->Init.LineOffsetMode);
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	681b      	ldr	r3, [r3, #0]
 8003a64:	681a      	ldr	r2, [r3, #0]
 8003a66:	4b20      	ldr	r3, [pc, #128]	; (8003ae8 <HAL_DMA2D_Init+0xbc>)
 8003a68:	4013      	ands	r3, r2
 8003a6a:	687a      	ldr	r2, [r7, #4]
 8003a6c:	6851      	ldr	r1, [r2, #4]
 8003a6e:	687a      	ldr	r2, [r7, #4]
 8003a70:	69d2      	ldr	r2, [r2, #28]
 8003a72:	4311      	orrs	r1, r2
 8003a74:	687a      	ldr	r2, [r7, #4]
 8003a76:	6812      	ldr	r2, [r2, #0]
 8003a78:	430b      	orrs	r3, r1
 8003a7a:	6013      	str	r3, [r2, #0]

  /* DMA2D OPFCCR register configuration ---------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM | DMA2D_OPFCCR_SB,
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	681b      	ldr	r3, [r3, #0]
 8003a80:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003a82:	4b1a      	ldr	r3, [pc, #104]	; (8003aec <HAL_DMA2D_Init+0xc0>)
 8003a84:	4013      	ands	r3, r2
 8003a86:	687a      	ldr	r2, [r7, #4]
 8003a88:	6891      	ldr	r1, [r2, #8]
 8003a8a:	687a      	ldr	r2, [r7, #4]
 8003a8c:	6992      	ldr	r2, [r2, #24]
 8003a8e:	4311      	orrs	r1, r2
 8003a90:	687a      	ldr	r2, [r7, #4]
 8003a92:	6812      	ldr	r2, [r2, #0]
 8003a94:	430b      	orrs	r3, r1
 8003a96:	6353      	str	r3, [r2, #52]	; 0x34
             hdma2d->Init.ColorMode | hdma2d->Init.BytesSwap);

  /* DMA2D OOR register configuration ------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OOR, DMA2D_OOR_LO, hdma2d->Init.OutputOffset);
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	681b      	ldr	r3, [r3, #0]
 8003a9c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003a9e:	4b14      	ldr	r3, [pc, #80]	; (8003af0 <HAL_DMA2D_Init+0xc4>)
 8003aa0:	4013      	ands	r3, r2
 8003aa2:	687a      	ldr	r2, [r7, #4]
 8003aa4:	68d1      	ldr	r1, [r2, #12]
 8003aa6:	687a      	ldr	r2, [r7, #4]
 8003aa8:	6812      	ldr	r2, [r2, #0]
 8003aaa:	430b      	orrs	r3, r1
 8003aac:	6413      	str	r3, [r2, #64]	; 0x40
  /* DMA2D OPFCCR AI and RBS fields setting (Output Alpha Inversion)*/
  MODIFY_REG(hdma2d->Instance->OPFCCR, (DMA2D_OPFCCR_AI | DMA2D_OPFCCR_RBS),
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	681b      	ldr	r3, [r3, #0]
 8003ab2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003ab4:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	691b      	ldr	r3, [r3, #16]
 8003abc:	051a      	lsls	r2, r3, #20
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	695b      	ldr	r3, [r3, #20]
 8003ac2:	055b      	lsls	r3, r3, #21
 8003ac4:	431a      	orrs	r2, r3
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	681b      	ldr	r3, [r3, #0]
 8003aca:	430a      	orrs	r2, r1
 8003acc:	635a      	str	r2, [r3, #52]	; 0x34
             ((hdma2d->Init.AlphaInverted << DMA2D_OPFCCR_AI_Pos) | \
              (hdma2d->Init.RedBlueSwap << DMA2D_OPFCCR_RBS_Pos)));


  /* Update error code */
  hdma2d->ErrorCode = HAL_DMA2D_ERROR_NONE;
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	2200      	movs	r2, #0
 8003ad2:	665a      	str	r2, [r3, #100]	; 0x64

  /* Initialize the DMA2D state*/
  hdma2d->State  = HAL_DMA2D_STATE_READY;
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	2201      	movs	r2, #1
 8003ad8:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61

  return HAL_OK;
 8003adc:	2300      	movs	r3, #0
}
 8003ade:	4618      	mov	r0, r3
 8003ae0:	3708      	adds	r7, #8
 8003ae2:	46bd      	mov	sp, r7
 8003ae4:	bd80      	pop	{r7, pc}
 8003ae6:	bf00      	nop
 8003ae8:	fff8ffbf 	.word	0xfff8ffbf
 8003aec:	fffffef8 	.word	0xfffffef8
 8003af0:	ffff0000 	.word	0xffff0000

08003af4 <HAL_DMA2D_ConfigLayer>:
  *                   This parameter can be one of the following values:
  *                   DMA2D_BACKGROUND_LAYER(0) / DMA2D_FOREGROUND_LAYER(1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_ConfigLayer(DMA2D_HandleTypeDef *hdma2d, uint32_t LayerIdx)
{
 8003af4:	b480      	push	{r7}
 8003af6:	b087      	sub	sp, #28
 8003af8:	af00      	add	r7, sp, #0
 8003afa:	6078      	str	r0, [r7, #4]
 8003afc:	6039      	str	r1, [r7, #0]
  uint32_t regValue;

  /* Check the parameters */
  assert_param(IS_DMA2D_LAYER(LayerIdx));
  assert_param(IS_DMA2D_OFFSET(hdma2d->LayerCfg[LayerIdx].InputOffset));
  if (hdma2d->Init.Mode != DMA2D_R2M)
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	685b      	ldr	r3, [r3, #4]
 8003b02:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
    }
  }
  assert_param(IS_DMA2D_ALPHA_INVERTED(hdma2d->LayerCfg[LayerIdx].AlphaInverted));
  assert_param(IS_DMA2D_RB_SWAP(hdma2d->LayerCfg[LayerIdx].RedBlueSwap));

  if ((LayerIdx == DMA2D_FOREGROUND_LAYER) && (hdma2d->LayerCfg[LayerIdx].InputColorMode == DMA2D_INPUT_YCBCR))
 8003b06:	683b      	ldr	r3, [r7, #0]
 8003b08:	2b01      	cmp	r3, #1
  {
    assert_param(IS_DMA2D_CHROMA_SUB_SAMPLING(hdma2d->LayerCfg[LayerIdx].ChromaSubSampling));
  }

  /* Process locked */
  __HAL_LOCK(hdma2d);
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	f893 3060 	ldrb.w	r3, [r3, #96]	; 0x60
 8003b10:	2b01      	cmp	r3, #1
 8003b12:	d101      	bne.n	8003b18 <HAL_DMA2D_ConfigLayer+0x24>
 8003b14:	2302      	movs	r3, #2
 8003b16:	e092      	b.n	8003c3e <HAL_DMA2D_ConfigLayer+0x14a>
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	2201      	movs	r2, #1
 8003b1c:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	2202      	movs	r2, #2
 8003b24:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61

  pLayerCfg = &hdma2d->LayerCfg[LayerIdx];
 8003b28:	683a      	ldr	r2, [r7, #0]
 8003b2a:	4613      	mov	r3, r2
 8003b2c:	00db      	lsls	r3, r3, #3
 8003b2e:	1a9b      	subs	r3, r3, r2
 8003b30:	009b      	lsls	r3, r3, #2
 8003b32:	3328      	adds	r3, #40	; 0x28
 8003b34:	687a      	ldr	r2, [r7, #4]
 8003b36:	4413      	add	r3, r2
 8003b38:	60fb      	str	r3, [r7, #12]

  /* Prepare the value to be written to the BGPFCCR or FGPFCCR register */
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos) | \
 8003b3a:	68fb      	ldr	r3, [r7, #12]
 8003b3c:	685a      	ldr	r2, [r3, #4]
 8003b3e:	68fb      	ldr	r3, [r7, #12]
 8003b40:	689b      	ldr	r3, [r3, #8]
 8003b42:	041b      	lsls	r3, r3, #16
 8003b44:	431a      	orrs	r2, r3
             (pLayerCfg->AlphaInverted << DMA2D_BGPFCCR_AI_Pos) | (pLayerCfg->RedBlueSwap << DMA2D_BGPFCCR_RBS_Pos);
 8003b46:	68fb      	ldr	r3, [r7, #12]
 8003b48:	691b      	ldr	r3, [r3, #16]
 8003b4a:	051b      	lsls	r3, r3, #20
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos) | \
 8003b4c:	431a      	orrs	r2, r3
             (pLayerCfg->AlphaInverted << DMA2D_BGPFCCR_AI_Pos) | (pLayerCfg->RedBlueSwap << DMA2D_BGPFCCR_RBS_Pos);
 8003b4e:	68fb      	ldr	r3, [r7, #12]
 8003b50:	695b      	ldr	r3, [r3, #20]
 8003b52:	055b      	lsls	r3, r3, #21
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos) | \
 8003b54:	4313      	orrs	r3, r2
 8003b56:	613b      	str	r3, [r7, #16]
  regMask  = (DMA2D_BGPFCCR_CM | DMA2D_BGPFCCR_AM | DMA2D_BGPFCCR_ALPHA | DMA2D_BGPFCCR_AI | DMA2D_BGPFCCR_RBS);
 8003b58:	4b3c      	ldr	r3, [pc, #240]	; (8003c4c <HAL_DMA2D_ConfigLayer+0x158>)
 8003b5a:	617b      	str	r3, [r7, #20]


  if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8003b5c:	68fb      	ldr	r3, [r7, #12]
 8003b5e:	685b      	ldr	r3, [r3, #4]
 8003b60:	2b0a      	cmp	r3, #10
 8003b62:	d003      	beq.n	8003b6c <HAL_DMA2D_ConfigLayer+0x78>
 8003b64:	68fb      	ldr	r3, [r7, #12]
 8003b66:	685b      	ldr	r3, [r3, #4]
 8003b68:	2b09      	cmp	r3, #9
 8003b6a:	d107      	bne.n	8003b7c <HAL_DMA2D_ConfigLayer+0x88>
  {
    regValue |= (pLayerCfg->InputAlpha & DMA2D_BGPFCCR_ALPHA);
 8003b6c:	68fb      	ldr	r3, [r7, #12]
 8003b6e:	68db      	ldr	r3, [r3, #12]
 8003b70:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8003b74:	693a      	ldr	r2, [r7, #16]
 8003b76:	4313      	orrs	r3, r2
 8003b78:	613b      	str	r3, [r7, #16]
 8003b7a:	e005      	b.n	8003b88 <HAL_DMA2D_ConfigLayer+0x94>
  }
  else
  {
    regValue |= (pLayerCfg->InputAlpha << DMA2D_BGPFCCR_ALPHA_Pos);
 8003b7c:	68fb      	ldr	r3, [r7, #12]
 8003b7e:	68db      	ldr	r3, [r3, #12]
 8003b80:	061b      	lsls	r3, r3, #24
 8003b82:	693a      	ldr	r2, [r7, #16]
 8003b84:	4313      	orrs	r3, r2
 8003b86:	613b      	str	r3, [r7, #16]
  }

  /* Configure the background DMA2D layer */
  if (LayerIdx == DMA2D_BACKGROUND_LAYER)
 8003b88:	683b      	ldr	r3, [r7, #0]
 8003b8a:	2b00      	cmp	r3, #0
 8003b8c:	d120      	bne.n	8003bd0 <HAL_DMA2D_ConfigLayer+0xdc>
  {
    /* Write DMA2D BGPFCCR register */
    MODIFY_REG(hdma2d->Instance->BGPFCCR, regMask, regValue);
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	681b      	ldr	r3, [r3, #0]
 8003b92:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003b94:	697b      	ldr	r3, [r7, #20]
 8003b96:	43db      	mvns	r3, r3
 8003b98:	ea02 0103 	and.w	r1, r2, r3
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	681b      	ldr	r3, [r3, #0]
 8003ba0:	693a      	ldr	r2, [r7, #16]
 8003ba2:	430a      	orrs	r2, r1
 8003ba4:	625a      	str	r2, [r3, #36]	; 0x24

    /* DMA2D BGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->BGOR, pLayerCfg->InputOffset);
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	681b      	ldr	r3, [r3, #0]
 8003baa:	68fa      	ldr	r2, [r7, #12]
 8003bac:	6812      	ldr	r2, [r2, #0]
 8003bae:	619a      	str	r2, [r3, #24]

    /* DMA2D BGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8003bb0:	68fb      	ldr	r3, [r7, #12]
 8003bb2:	685b      	ldr	r3, [r3, #4]
 8003bb4:	2b0a      	cmp	r3, #10
 8003bb6:	d003      	beq.n	8003bc0 <HAL_DMA2D_ConfigLayer+0xcc>
 8003bb8:	68fb      	ldr	r3, [r7, #12]
 8003bba:	685b      	ldr	r3, [r3, #4]
 8003bbc:	2b09      	cmp	r3, #9
 8003bbe:	d135      	bne.n	8003c2c <HAL_DMA2D_ConfigLayer+0x138>
    {
      WRITE_REG(hdma2d->Instance->BGCOLR, pLayerCfg->InputAlpha & (DMA2D_BGCOLR_BLUE | DMA2D_BGCOLR_GREEN | \
 8003bc0:	68fb      	ldr	r3, [r7, #12]
 8003bc2:	68da      	ldr	r2, [r3, #12]
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	681b      	ldr	r3, [r3, #0]
 8003bc8:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
 8003bcc:	629a      	str	r2, [r3, #40]	; 0x28
 8003bce:	e02d      	b.n	8003c2c <HAL_DMA2D_ConfigLayer+0x138>
  }
  /* Configure the foreground DMA2D layer */
  else
  {

    if (pLayerCfg->InputColorMode == DMA2D_INPUT_YCBCR)
 8003bd0:	68fb      	ldr	r3, [r7, #12]
 8003bd2:	685b      	ldr	r3, [r3, #4]
 8003bd4:	2b0b      	cmp	r3, #11
 8003bd6:	d109      	bne.n	8003bec <HAL_DMA2D_ConfigLayer+0xf8>
    {
      regValue |= (pLayerCfg->ChromaSubSampling << DMA2D_FGPFCCR_CSS_Pos);
 8003bd8:	68fb      	ldr	r3, [r7, #12]
 8003bda:	699b      	ldr	r3, [r3, #24]
 8003bdc:	049b      	lsls	r3, r3, #18
 8003bde:	693a      	ldr	r2, [r7, #16]
 8003be0:	4313      	orrs	r3, r2
 8003be2:	613b      	str	r3, [r7, #16]
      regMask  |= DMA2D_FGPFCCR_CSS;
 8003be4:	697b      	ldr	r3, [r7, #20]
 8003be6:	f443 2340 	orr.w	r3, r3, #786432	; 0xc0000
 8003bea:	617b      	str	r3, [r7, #20]
    }

    /* Write DMA2D FGPFCCR register */
    MODIFY_REG(hdma2d->Instance->FGPFCCR, regMask, regValue);
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	681b      	ldr	r3, [r3, #0]
 8003bf0:	69da      	ldr	r2, [r3, #28]
 8003bf2:	697b      	ldr	r3, [r7, #20]
 8003bf4:	43db      	mvns	r3, r3
 8003bf6:	ea02 0103 	and.w	r1, r2, r3
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	681b      	ldr	r3, [r3, #0]
 8003bfe:	693a      	ldr	r2, [r7, #16]
 8003c00:	430a      	orrs	r2, r1
 8003c02:	61da      	str	r2, [r3, #28]

    /* DMA2D FGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->FGOR, pLayerCfg->InputOffset);
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	681b      	ldr	r3, [r3, #0]
 8003c08:	68fa      	ldr	r2, [r7, #12]
 8003c0a:	6812      	ldr	r2, [r2, #0]
 8003c0c:	611a      	str	r2, [r3, #16]

    /* DMA2D FGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8003c0e:	68fb      	ldr	r3, [r7, #12]
 8003c10:	685b      	ldr	r3, [r3, #4]
 8003c12:	2b0a      	cmp	r3, #10
 8003c14:	d003      	beq.n	8003c1e <HAL_DMA2D_ConfigLayer+0x12a>
 8003c16:	68fb      	ldr	r3, [r7, #12]
 8003c18:	685b      	ldr	r3, [r3, #4]
 8003c1a:	2b09      	cmp	r3, #9
 8003c1c:	d106      	bne.n	8003c2c <HAL_DMA2D_ConfigLayer+0x138>
    {
      WRITE_REG(hdma2d->Instance->FGCOLR, pLayerCfg->InputAlpha & (DMA2D_FGCOLR_BLUE | DMA2D_FGCOLR_GREEN | \
 8003c1e:	68fb      	ldr	r3, [r7, #12]
 8003c20:	68da      	ldr	r2, [r3, #12]
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	681b      	ldr	r3, [r3, #0]
 8003c26:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
 8003c2a:	621a      	str	r2, [r3, #32]
                                                                   DMA2D_FGCOLR_RED));
    }
  }
  /* Initialize the DMA2D state*/
  hdma2d->State = HAL_DMA2D_STATE_READY;
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	2201      	movs	r2, #1
 8003c30:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61

  /* Process unlocked */
  __HAL_UNLOCK(hdma2d);
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	2200      	movs	r2, #0
 8003c38:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60

  return HAL_OK;
 8003c3c:	2300      	movs	r3, #0
}
 8003c3e:	4618      	mov	r0, r3
 8003c40:	371c      	adds	r7, #28
 8003c42:	46bd      	mov	sp, r7
 8003c44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c48:	4770      	bx	lr
 8003c4a:	bf00      	nop
 8003c4c:	ff33000f 	.word	0xff33000f

08003c50 <HAL_FDCAN_Init>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Init(FDCAN_HandleTypeDef *hfdcan)
{
 8003c50:	b580      	push	{r7, lr}
 8003c52:	b098      	sub	sp, #96	; 0x60
 8003c54:	af00      	add	r7, sp, #0
 8003c56:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  const uint32_t CvtEltSize[] = {0, 0, 0, 0, 0, 1, 2, 3, 4, 0, 5, 0, 0, 0, 6, 0, 0, 0, 7};
 8003c58:	4a84      	ldr	r2, [pc, #528]	; (8003e6c <HAL_FDCAN_Init+0x21c>)
 8003c5a:	f107 030c 	add.w	r3, r7, #12
 8003c5e:	4611      	mov	r1, r2
 8003c60:	224c      	movs	r2, #76	; 0x4c
 8003c62:	4618      	mov	r0, r3
 8003c64:	f00f fea2 	bl	80139ac <memcpy>

  /* Check FDCAN handle */
  if (hfdcan == NULL)
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	2b00      	cmp	r3, #0
 8003c6c:	d101      	bne.n	8003c72 <HAL_FDCAN_Init+0x22>
  {
    return HAL_ERROR;
 8003c6e:	2301      	movs	r3, #1
 8003c70:	e1c6      	b.n	8004000 <HAL_FDCAN_Init+0x3b0>
  }

  /* Check FDCAN instance */
  if (hfdcan->Instance == FDCAN1)
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	681b      	ldr	r3, [r3, #0]
 8003c76:	4a7e      	ldr	r2, [pc, #504]	; (8003e70 <HAL_FDCAN_Init+0x220>)
 8003c78:	4293      	cmp	r3, r2
 8003c7a:	d106      	bne.n	8003c8a <HAL_FDCAN_Init+0x3a>
  {
    hfdcan->ttcan = (TTCAN_TypeDef *)((uint32_t)hfdcan->Instance + 0x100U);
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	681b      	ldr	r3, [r3, #0]
 8003c80:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8003c84:	461a      	mov	r2, r3
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	605a      	str	r2, [r3, #4]

    /* Init the low level hardware: CLOCK, NVIC */
    hfdcan->MspInitCallback(hfdcan);
  }
#else
  if (hfdcan->State == HAL_FDCAN_STATE_RESET)
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 8003c90:	b2db      	uxtb	r3, r3
 8003c92:	2b00      	cmp	r3, #0
 8003c94:	d106      	bne.n	8003ca4 <HAL_FDCAN_Init+0x54>
  {
    /* Allocate lock resource and initialize it */
    hfdcan->Lock = HAL_UNLOCKED;
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	2200      	movs	r2, #0
 8003c9a:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99

    /* Init the low level hardware: CLOCK, NVIC */
    HAL_FDCAN_MspInit(hfdcan);
 8003c9e:	6878      	ldr	r0, [r7, #4]
 8003ca0:	f7fd f914 	bl	8000ecc <HAL_FDCAN_MspInit>
  }
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */

  /* Exit from Sleep mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CSR);
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	681b      	ldr	r3, [r3, #0]
 8003ca8:	699a      	ldr	r2, [r3, #24]
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	681b      	ldr	r3, [r3, #0]
 8003cae:	f022 0210 	bic.w	r2, r2, #16
 8003cb2:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003cb4:	f7fe fb7c 	bl	80023b0 <HAL_GetTick>
 8003cb8:	65f8      	str	r0, [r7, #92]	; 0x5c

  /* Check Sleep mode acknowledge */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 8003cba:	e014      	b.n	8003ce6 <HAL_FDCAN_Init+0x96>
  {
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 8003cbc:	f7fe fb78 	bl	80023b0 <HAL_GetTick>
 8003cc0:	4602      	mov	r2, r0
 8003cc2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003cc4:	1ad3      	subs	r3, r2, r3
 8003cc6:	2b0a      	cmp	r3, #10
 8003cc8:	d90d      	bls.n	8003ce6 <HAL_FDCAN_Init+0x96>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003cd0:	f043 0201 	orr.w	r2, r3, #1
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	2203      	movs	r2, #3
 8003cde:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

      return HAL_ERROR;
 8003ce2:	2301      	movs	r3, #1
 8003ce4:	e18c      	b.n	8004000 <HAL_FDCAN_Init+0x3b0>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	681b      	ldr	r3, [r3, #0]
 8003cea:	699b      	ldr	r3, [r3, #24]
 8003cec:	f003 0308 	and.w	r3, r3, #8
 8003cf0:	2b08      	cmp	r3, #8
 8003cf2:	d0e3      	beq.n	8003cbc <HAL_FDCAN_Init+0x6c>
    }
  }

  /* Request initialisation */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	681b      	ldr	r3, [r3, #0]
 8003cf8:	699a      	ldr	r2, [r3, #24]
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	681b      	ldr	r3, [r3, #0]
 8003cfe:	f042 0201 	orr.w	r2, r2, #1
 8003d02:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003d04:	f7fe fb54 	bl	80023b0 <HAL_GetTick>
 8003d08:	65f8      	str	r0, [r7, #92]	; 0x5c

  /* Wait until the INIT bit into CCCR register is set */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 8003d0a:	e014      	b.n	8003d36 <HAL_FDCAN_Init+0xe6>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 8003d0c:	f7fe fb50 	bl	80023b0 <HAL_GetTick>
 8003d10:	4602      	mov	r2, r0
 8003d12:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003d14:	1ad3      	subs	r3, r2, r3
 8003d16:	2b0a      	cmp	r3, #10
 8003d18:	d90d      	bls.n	8003d36 <HAL_FDCAN_Init+0xe6>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003d20:	f043 0201 	orr.w	r2, r3, #1
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	2203      	movs	r2, #3
 8003d2e:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

      return HAL_ERROR;
 8003d32:	2301      	movs	r3, #1
 8003d34:	e164      	b.n	8004000 <HAL_FDCAN_Init+0x3b0>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	681b      	ldr	r3, [r3, #0]
 8003d3a:	699b      	ldr	r3, [r3, #24]
 8003d3c:	f003 0301 	and.w	r3, r3, #1
 8003d40:	2b00      	cmp	r3, #0
 8003d42:	d0e3      	beq.n	8003d0c <HAL_FDCAN_Init+0xbc>
    }
  }

  /* Enable configuration change */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CCE);
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	681b      	ldr	r3, [r3, #0]
 8003d48:	699a      	ldr	r2, [r3, #24]
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	681b      	ldr	r3, [r3, #0]
 8003d4e:	f042 0202 	orr.w	r2, r2, #2
 8003d52:	619a      	str	r2, [r3, #24]

  /* Set the no automatic retransmission */
  if (hfdcan->Init.AutoRetransmission == ENABLE)
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	7c1b      	ldrb	r3, [r3, #16]
 8003d58:	2b01      	cmp	r3, #1
 8003d5a:	d108      	bne.n	8003d6e <HAL_FDCAN_Init+0x11e>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	681b      	ldr	r3, [r3, #0]
 8003d60:	699a      	ldr	r2, [r3, #24]
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	681b      	ldr	r3, [r3, #0]
 8003d66:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003d6a:	619a      	str	r2, [r3, #24]
 8003d6c:	e007      	b.n	8003d7e <HAL_FDCAN_Init+0x12e>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	681b      	ldr	r3, [r3, #0]
 8003d72:	699a      	ldr	r2, [r3, #24]
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	681b      	ldr	r3, [r3, #0]
 8003d78:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003d7c:	619a      	str	r2, [r3, #24]
  }

  /* Set the transmit pause feature */
  if (hfdcan->Init.TransmitPause == ENABLE)
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	7c5b      	ldrb	r3, [r3, #17]
 8003d82:	2b01      	cmp	r3, #1
 8003d84:	d108      	bne.n	8003d98 <HAL_FDCAN_Init+0x148>
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	681b      	ldr	r3, [r3, #0]
 8003d8a:	699a      	ldr	r2, [r3, #24]
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	681b      	ldr	r3, [r3, #0]
 8003d90:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003d94:	619a      	str	r2, [r3, #24]
 8003d96:	e007      	b.n	8003da8 <HAL_FDCAN_Init+0x158>
  }
  else
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	681b      	ldr	r3, [r3, #0]
 8003d9c:	699a      	ldr	r2, [r3, #24]
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	681b      	ldr	r3, [r3, #0]
 8003da2:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8003da6:	619a      	str	r2, [r3, #24]
  }

  /* Set the Protocol Exception Handling */
  if (hfdcan->Init.ProtocolException == ENABLE)
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	7c9b      	ldrb	r3, [r3, #18]
 8003dac:	2b01      	cmp	r3, #1
 8003dae:	d108      	bne.n	8003dc2 <HAL_FDCAN_Init+0x172>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	681b      	ldr	r3, [r3, #0]
 8003db4:	699a      	ldr	r2, [r3, #24]
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	681b      	ldr	r3, [r3, #0]
 8003dba:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8003dbe:	619a      	str	r2, [r3, #24]
 8003dc0:	e007      	b.n	8003dd2 <HAL_FDCAN_Init+0x182>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	681b      	ldr	r3, [r3, #0]
 8003dc6:	699a      	ldr	r2, [r3, #24]
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	681b      	ldr	r3, [r3, #0]
 8003dcc:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8003dd0:	619a      	str	r2, [r3, #24]
  }

  /* Set FDCAN Frame Format */
  MODIFY_REG(hfdcan->Instance->CCCR, FDCAN_FRAME_FD_BRS, hfdcan->Init.FrameFormat);
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	681b      	ldr	r3, [r3, #0]
 8003dd6:	699b      	ldr	r3, [r3, #24]
 8003dd8:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	689a      	ldr	r2, [r3, #8]
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	681b      	ldr	r3, [r3, #0]
 8003de4:	430a      	orrs	r2, r1
 8003de6:	619a      	str	r2, [r3, #24]

  /* Reset FDCAN Operation Mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, (FDCAN_CCCR_TEST | FDCAN_CCCR_MON | FDCAN_CCCR_ASM));
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	681b      	ldr	r3, [r3, #0]
 8003dec:	699a      	ldr	r2, [r3, #24]
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	681b      	ldr	r3, [r3, #0]
 8003df2:	f022 02a4 	bic.w	r2, r2, #164	; 0xa4
 8003df6:	619a      	str	r2, [r3, #24]
  CLEAR_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	681b      	ldr	r3, [r3, #0]
 8003dfc:	691a      	ldr	r2, [r3, #16]
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	681b      	ldr	r3, [r3, #0]
 8003e02:	f022 0210 	bic.w	r2, r2, #16
 8003e06:	611a      	str	r2, [r3, #16]
     CCCR.TEST |   0    |     0      |     0      |    1     |    1
     CCCR.MON  |   0    |     0      |     1      |    1     |    0
     TEST.LBCK |   0    |     0      |     0      |    1     |    1
     CCCR.ASM  |   0    |     1      |     0      |    0     |    0
  */
  if (hfdcan->Init.Mode == FDCAN_MODE_RESTRICTED_OPERATION)
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	68db      	ldr	r3, [r3, #12]
 8003e0c:	2b01      	cmp	r3, #1
 8003e0e:	d108      	bne.n	8003e22 <HAL_FDCAN_Init+0x1d2>
  {
    /* Enable Restricted Operation mode */
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_ASM);
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	681b      	ldr	r3, [r3, #0]
 8003e14:	699a      	ldr	r2, [r3, #24]
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	681b      	ldr	r3, [r3, #0]
 8003e1a:	f042 0204 	orr.w	r2, r2, #4
 8003e1e:	619a      	str	r2, [r3, #24]
 8003e20:	e030      	b.n	8003e84 <HAL_FDCAN_Init+0x234>
  }
  else if (hfdcan->Init.Mode != FDCAN_MODE_NORMAL)
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	68db      	ldr	r3, [r3, #12]
 8003e26:	2b00      	cmp	r3, #0
 8003e28:	d02c      	beq.n	8003e84 <HAL_FDCAN_Init+0x234>
  {
    if (hfdcan->Init.Mode != FDCAN_MODE_BUS_MONITORING)
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	68db      	ldr	r3, [r3, #12]
 8003e2e:	2b02      	cmp	r3, #2
 8003e30:	d020      	beq.n	8003e74 <HAL_FDCAN_Init+0x224>
    {
      /* Enable write access to TEST register */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TEST);
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	681b      	ldr	r3, [r3, #0]
 8003e36:	699a      	ldr	r2, [r3, #24]
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	681b      	ldr	r3, [r3, #0]
 8003e3c:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8003e40:	619a      	str	r2, [r3, #24]

      /* Enable LoopBack mode */
      SET_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	681b      	ldr	r3, [r3, #0]
 8003e46:	691a      	ldr	r2, [r3, #16]
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	681b      	ldr	r3, [r3, #0]
 8003e4c:	f042 0210 	orr.w	r2, r2, #16
 8003e50:	611a      	str	r2, [r3, #16]

      if (hfdcan->Init.Mode == FDCAN_MODE_INTERNAL_LOOPBACK)
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	68db      	ldr	r3, [r3, #12]
 8003e56:	2b03      	cmp	r3, #3
 8003e58:	d114      	bne.n	8003e84 <HAL_FDCAN_Init+0x234>
      {
        SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	681b      	ldr	r3, [r3, #0]
 8003e5e:	699a      	ldr	r2, [r3, #24]
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	681b      	ldr	r3, [r3, #0]
 8003e64:	f042 0220 	orr.w	r2, r2, #32
 8003e68:	619a      	str	r2, [r3, #24]
 8003e6a:	e00b      	b.n	8003e84 <HAL_FDCAN_Init+0x234>
 8003e6c:	08016680 	.word	0x08016680
 8003e70:	4000a000 	.word	0x4000a000
      }
    }
    else
    {
      /* Enable bus monitoring mode */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	681b      	ldr	r3, [r3, #0]
 8003e78:	699a      	ldr	r2, [r3, #24]
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	681b      	ldr	r3, [r3, #0]
 8003e7e:	f042 0220 	orr.w	r2, r2, #32
 8003e82:	619a      	str	r2, [r3, #24]
  {
    /* Nothing to do: normal mode */
  }

  /* Set the nominal bit timing register */
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	699b      	ldr	r3, [r3, #24]
 8003e88:	3b01      	subs	r3, #1
 8003e8a:	065a      	lsls	r2, r3, #25
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	69db      	ldr	r3, [r3, #28]
 8003e90:	3b01      	subs	r3, #1
 8003e92:	021b      	lsls	r3, r3, #8
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8003e94:	431a      	orrs	r2, r3
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	6a1b      	ldr	r3, [r3, #32]
 8003e9a:	3b01      	subs	r3, #1
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 8003e9c:	ea42 0103 	orr.w	r1, r2, r3
                            (((uint32_t)hfdcan->Init.NominalPrescaler - 1U) << FDCAN_NBTP_NBRP_Pos));
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	695b      	ldr	r3, [r3, #20]
 8003ea4:	3b01      	subs	r3, #1
 8003ea6:	041a      	lsls	r2, r3, #16
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	681b      	ldr	r3, [r3, #0]
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 8003eac:	430a      	orrs	r2, r1
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8003eae:	61da      	str	r2, [r3, #28]

  /* If FD operation with BRS is selected, set the data bit timing register */
  if (hfdcan->Init.FrameFormat == FDCAN_FRAME_FD_BRS)
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	689b      	ldr	r3, [r3, #8]
 8003eb4:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003eb8:	d115      	bne.n	8003ee6 <HAL_FDCAN_Init+0x296>
  {
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos) | \
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003ebe:	1e5a      	subs	r2, r3, #1
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)    | \
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ec4:	3b01      	subs	r3, #1
 8003ec6:	021b      	lsls	r3, r3, #8
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos) | \
 8003ec8:	431a      	orrs	r2, r3
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)    | \
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ece:	3b01      	subs	r3, #1
 8003ed0:	011b      	lsls	r3, r3, #4
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)    | \
 8003ed2:	ea42 0103 	orr.w	r1, r2, r3
                              (((uint32_t)hfdcan->Init.DataPrescaler - 1U) << FDCAN_DBTP_DBRP_Pos));
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003eda:	3b01      	subs	r3, #1
 8003edc:	041a      	lsls	r2, r3, #16
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos) | \
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	681b      	ldr	r3, [r3, #0]
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)    | \
 8003ee2:	430a      	orrs	r2, r1
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos) | \
 8003ee4:	60da      	str	r2, [r3, #12]
  }

  if (hfdcan->Init.TxFifoQueueElmtsNbr > 0U)
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003eea:	2b00      	cmp	r3, #0
 8003eec:	d00a      	beq.n	8003f04 <HAL_FDCAN_Init+0x2b4>
  {
    /* Select between Tx FIFO and Tx Queue operation modes */
    SET_BIT(hfdcan->Instance->TXBC, hfdcan->Init.TxFifoQueueMode);
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	681b      	ldr	r3, [r3, #0]
 8003ef2:	f8d3 10c0 	ldr.w	r1, [r3, #192]	; 0xc0
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	681b      	ldr	r3, [r3, #0]
 8003efe:	430a      	orrs	r2, r1
 8003f00:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
  }

  /* Configure Tx element size */
  if ((hfdcan->Init.TxBuffersNbr + hfdcan->Init.TxFifoQueueElmtsNbr) > 0U)
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003f0c:	4413      	add	r3, r2
 8003f0e:	2b00      	cmp	r3, #0
 8003f10:	d011      	beq.n	8003f36 <HAL_FDCAN_Init+0x2e6>
  {
    MODIFY_REG(hfdcan->Instance->TXESC, FDCAN_TXESC_TBDS, CvtEltSize[hfdcan->Init.TxElmtSize]);
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	681b      	ldr	r3, [r3, #0]
 8003f16:	f8d3 30c8 	ldr.w	r3, [r3, #200]	; 0xc8
 8003f1a:	f023 0107 	bic.w	r1, r3, #7
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003f22:	009b      	lsls	r3, r3, #2
 8003f24:	3360      	adds	r3, #96	; 0x60
 8003f26:	443b      	add	r3, r7
 8003f28:	f853 2c54 	ldr.w	r2, [r3, #-84]
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	681b      	ldr	r3, [r3, #0]
 8003f30:	430a      	orrs	r2, r1
 8003f32:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
  }

  /* Configure Rx FIFO 0 element size */
  if (hfdcan->Init.RxFifo0ElmtsNbr > 0U)
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f3a:	2b00      	cmp	r3, #0
 8003f3c:	d011      	beq.n	8003f62 <HAL_FDCAN_Init+0x312>
  {
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_F0DS, (CvtEltSize[hfdcan->Init.RxFifo0ElmtSize] << FDCAN_RXESC_F0DS_Pos));
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	681b      	ldr	r3, [r3, #0]
 8003f42:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 8003f46:	f023 0107 	bic.w	r1, r3, #7
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003f4e:	009b      	lsls	r3, r3, #2
 8003f50:	3360      	adds	r3, #96	; 0x60
 8003f52:	443b      	add	r3, r7
 8003f54:	f853 2c54 	ldr.w	r2, [r3, #-84]
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	681b      	ldr	r3, [r3, #0]
 8003f5c:	430a      	orrs	r2, r1
 8003f5e:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
  }

  /* Configure Rx FIFO 1 element size */
  if (hfdcan->Init.RxFifo1ElmtsNbr > 0U)
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003f66:	2b00      	cmp	r3, #0
 8003f68:	d012      	beq.n	8003f90 <HAL_FDCAN_Init+0x340>
  {
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_F1DS, (CvtEltSize[hfdcan->Init.RxFifo1ElmtSize] << FDCAN_RXESC_F1DS_Pos));
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	681b      	ldr	r3, [r3, #0]
 8003f6e:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 8003f72:	f023 0170 	bic.w	r1, r3, #112	; 0x70
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003f7a:	009b      	lsls	r3, r3, #2
 8003f7c:	3360      	adds	r3, #96	; 0x60
 8003f7e:	443b      	add	r3, r7
 8003f80:	f853 3c54 	ldr.w	r3, [r3, #-84]
 8003f84:	011a      	lsls	r2, r3, #4
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	681b      	ldr	r3, [r3, #0]
 8003f8a:	430a      	orrs	r2, r1
 8003f8c:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
  }

  /* Configure Rx buffer element size */
  if (hfdcan->Init.RxBuffersNbr > 0U)
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003f94:	2b00      	cmp	r3, #0
 8003f96:	d012      	beq.n	8003fbe <HAL_FDCAN_Init+0x36e>
  {
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_RBDS, (CvtEltSize[hfdcan->Init.RxBufferSize] << FDCAN_RXESC_RBDS_Pos));
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	681b      	ldr	r3, [r3, #0]
 8003f9c:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 8003fa0:	f423 61e0 	bic.w	r1, r3, #1792	; 0x700
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003fa8:	009b      	lsls	r3, r3, #2
 8003faa:	3360      	adds	r3, #96	; 0x60
 8003fac:	443b      	add	r3, r7
 8003fae:	f853 3c54 	ldr.w	r3, [r3, #-84]
 8003fb2:	021a      	lsls	r2, r3, #8
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	681b      	ldr	r3, [r3, #0]
 8003fb8:	430a      	orrs	r2, r1
 8003fba:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
  }

  /* By default operation mode is set to Event-driven communication.
     If Time-triggered communication is needed, user should call the
     HAL_FDCAN_TT_ConfigOperation function just after the HAL_FDCAN_Init */
  if (hfdcan->Instance == FDCAN1)
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	681b      	ldr	r3, [r3, #0]
 8003fc2:	4a11      	ldr	r2, [pc, #68]	; (8004008 <HAL_FDCAN_Init+0x3b8>)
 8003fc4:	4293      	cmp	r3, r2
 8003fc6:	d107      	bne.n	8003fd8 <HAL_FDCAN_Init+0x388>
  {
    CLEAR_BIT(hfdcan->ttcan->TTOCF, FDCAN_TTOCF_OM);
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	685b      	ldr	r3, [r3, #4]
 8003fcc:	689a      	ldr	r2, [r3, #8]
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	685b      	ldr	r3, [r3, #4]
 8003fd2:	f022 0203 	bic.w	r2, r2, #3
 8003fd6:	609a      	str	r2, [r3, #8]
  }

  /* Initialize the Latest Tx FIFO/Queue request buffer index */
  hfdcan->LatestTxFifoQRequest = 0U;
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	2200      	movs	r2, #0
 8003fdc:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94

  /* Initialize the error code */
  hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	2200      	movs	r2, #0
 8003fe4:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

  /* Initialize the FDCAN state */
  hfdcan->State = HAL_FDCAN_STATE_READY;
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	2201      	movs	r2, #1
 8003fec:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

  /* Calculate each RAM block address */
  status = FDCAN_CalcultateRamBlockAddresses(hfdcan);
 8003ff0:	6878      	ldr	r0, [r7, #4]
 8003ff2:	f000 fb1f 	bl	8004634 <FDCAN_CalcultateRamBlockAddresses>
 8003ff6:	4603      	mov	r3, r0
 8003ff8:	f887 305b 	strb.w	r3, [r7, #91]	; 0x5b

  /* Return function status */
  return status;
 8003ffc:	f897 305b 	ldrb.w	r3, [r7, #91]	; 0x5b
}
 8004000:	4618      	mov	r0, r3
 8004002:	3760      	adds	r7, #96	; 0x60
 8004004:	46bd      	mov	sp, r7
 8004006:	bd80      	pop	{r7, pc}
 8004008:	4000a000 	.word	0x4000a000

0800400c <HAL_FDCAN_IRQHandler>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
void HAL_FDCAN_IRQHandler(FDCAN_HandleTypeDef *hfdcan)
{
 800400c:	b580      	push	{r7, lr}
 800400e:	b092      	sub	sp, #72	; 0x48
 8004010:	af00      	add	r7, sp, #0
 8004012:	6078      	str	r0, [r7, #4]
  uint32_t TTDistErrors;
  uint32_t TTFatalErrors;
  uint32_t SWTime;
  uint32_t SWCycleCount;

  ClkCalibrationITs = (FDCAN_CCU->IR << 30);
 8004014:	4b90      	ldr	r3, [pc, #576]	; (8004258 <HAL_FDCAN_IRQHandler+0x24c>)
 8004016:	691b      	ldr	r3, [r3, #16]
 8004018:	079b      	lsls	r3, r3, #30
 800401a:	647b      	str	r3, [r7, #68]	; 0x44
  ClkCalibrationITs &= (FDCAN_CCU->IE << 30);
 800401c:	4b8e      	ldr	r3, [pc, #568]	; (8004258 <HAL_FDCAN_IRQHandler+0x24c>)
 800401e:	695b      	ldr	r3, [r3, #20]
 8004020:	079b      	lsls	r3, r3, #30
 8004022:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004024:	4013      	ands	r3, r2
 8004026:	647b      	str	r3, [r7, #68]	; 0x44
  TxEventFifoITs = hfdcan->Instance->IR & FDCAN_TX_EVENT_FIFO_MASK;
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	681b      	ldr	r3, [r3, #0]
 800402c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800402e:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 8004032:	643b      	str	r3, [r7, #64]	; 0x40
  TxEventFifoITs &= hfdcan->Instance->IE;
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	681b      	ldr	r3, [r3, #0]
 8004038:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800403a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800403c:	4013      	ands	r3, r2
 800403e:	643b      	str	r3, [r7, #64]	; 0x40
  RxFifo0ITs = hfdcan->Instance->IR & FDCAN_RX_FIFO0_MASK;
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	681b      	ldr	r3, [r3, #0]
 8004044:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004046:	f003 030f 	and.w	r3, r3, #15
 800404a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RxFifo0ITs &= hfdcan->Instance->IE;
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	681b      	ldr	r3, [r3, #0]
 8004050:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004052:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8004054:	4013      	ands	r3, r2
 8004056:	63fb      	str	r3, [r7, #60]	; 0x3c
  RxFifo1ITs = hfdcan->Instance->IR & FDCAN_RX_FIFO1_MASK;
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	681b      	ldr	r3, [r3, #0]
 800405c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800405e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004062:	63bb      	str	r3, [r7, #56]	; 0x38
  RxFifo1ITs &= hfdcan->Instance->IE;
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	681b      	ldr	r3, [r3, #0]
 8004068:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800406a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800406c:	4013      	ands	r3, r2
 800406e:	63bb      	str	r3, [r7, #56]	; 0x38
  Errors = hfdcan->Instance->IR & FDCAN_ERROR_MASK;
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	681b      	ldr	r3, [r3, #0]
 8004074:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004076:	f003 5371 	and.w	r3, r3, #1010827264	; 0x3c400000
 800407a:	637b      	str	r3, [r7, #52]	; 0x34
  Errors &= hfdcan->Instance->IE;
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	681b      	ldr	r3, [r3, #0]
 8004080:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004082:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004084:	4013      	ands	r3, r2
 8004086:	637b      	str	r3, [r7, #52]	; 0x34
  ErrorStatusITs = hfdcan->Instance->IR & FDCAN_ERROR_STATUS_MASK;
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	681b      	ldr	r3, [r3, #0]
 800408c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800408e:	f003 7360 	and.w	r3, r3, #58720256	; 0x3800000
 8004092:	633b      	str	r3, [r7, #48]	; 0x30
  ErrorStatusITs &= hfdcan->Instance->IE;
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	681b      	ldr	r3, [r3, #0]
 8004098:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800409a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800409c:	4013      	ands	r3, r2
 800409e:	633b      	str	r3, [r7, #48]	; 0x30

  /* High Priority Message interrupt management *******************************/
  if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_RX_HIGH_PRIORITY_MSG) != 0U)
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	681b      	ldr	r3, [r3, #0]
 80040a4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80040a6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80040aa:	2b00      	cmp	r3, #0
 80040ac:	d011      	beq.n	80040d2 <HAL_FDCAN_IRQHandler+0xc6>
  {
    if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_RX_HIGH_PRIORITY_MSG) != 0U)
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	681b      	ldr	r3, [r3, #0]
 80040b2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80040b4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80040b8:	2b00      	cmp	r3, #0
 80040ba:	d00a      	beq.n	80040d2 <HAL_FDCAN_IRQHandler+0xc6>
    {
      /* Clear the High Priority Message flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_RX_HIGH_PRIORITY_MSG);
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	681b      	ldr	r3, [r3, #0]
 80040c0:	f44f 7280 	mov.w	r2, #256	; 0x100
 80040c4:	651a      	str	r2, [r3, #80]	; 0x50
 80040c6:	4b64      	ldr	r3, [pc, #400]	; (8004258 <HAL_FDCAN_IRQHandler+0x24c>)
 80040c8:	2200      	movs	r2, #0
 80040ca:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->HighPriorityMessageCallback(hfdcan);
#else
      /* High Priority Message Callback */
      HAL_FDCAN_HighPriorityMessageCallback(hfdcan);
 80040cc:	6878      	ldr	r0, [r7, #4]
 80040ce:	f000 fa65 	bl	800459c <HAL_FDCAN_HighPriorityMessageCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Transmission Abort interrupt management **********************************/
  if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_TX_ABORT_COMPLETE) != 0U)
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	681b      	ldr	r3, [r3, #0]
 80040d6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80040d8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80040dc:	2b00      	cmp	r3, #0
 80040de:	d01e      	beq.n	800411e <HAL_FDCAN_IRQHandler+0x112>
  {
    if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_TX_ABORT_COMPLETE) != 0U)
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	681b      	ldr	r3, [r3, #0]
 80040e4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80040e6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80040ea:	2b00      	cmp	r3, #0
 80040ec:	d017      	beq.n	800411e <HAL_FDCAN_IRQHandler+0x112>
    {
      /* List of aborted monitored buffers */
      AbortedBuffers = hfdcan->Instance->TXBCF;
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	681b      	ldr	r3, [r3, #0]
 80040f2:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 80040f6:	62fb      	str	r3, [r7, #44]	; 0x2c
      AbortedBuffers &= hfdcan->Instance->TXBCIE;
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	681b      	ldr	r3, [r3, #0]
 80040fc:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8004100:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004102:	4013      	ands	r3, r2
 8004104:	62fb      	str	r3, [r7, #44]	; 0x2c

      /* Clear the Transmission Cancellation flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_ABORT_COMPLETE);
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	681b      	ldr	r3, [r3, #0]
 800410a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800410e:	651a      	str	r2, [r3, #80]	; 0x50
 8004110:	4b51      	ldr	r3, [pc, #324]	; (8004258 <HAL_FDCAN_IRQHandler+0x24c>)
 8004112:	2200      	movs	r2, #0
 8004114:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxBufferAbortCallback(hfdcan, AbortedBuffers);
#else
      /* Transmission Cancellation Callback */
      HAL_FDCAN_TxBufferAbortCallback(hfdcan, AbortedBuffers);
 8004116:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004118:	6878      	ldr	r0, [r7, #4]
 800411a:	f000 fa16 	bl	800454a <HAL_FDCAN_TxBufferAbortCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Clock calibration unit interrupts management *****************************/
  if (ClkCalibrationITs != 0U)
 800411e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004120:	2b00      	cmp	r3, #0
 8004122:	d00d      	beq.n	8004140 <HAL_FDCAN_IRQHandler+0x134>
  {
    /* Clear the Clock Calibration flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, ClkCalibrationITs);
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	681a      	ldr	r2, [r3, #0]
 8004128:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800412a:	4b4c      	ldr	r3, [pc, #304]	; (800425c <HAL_FDCAN_IRQHandler+0x250>)
 800412c:	400b      	ands	r3, r1
 800412e:	6513      	str	r3, [r2, #80]	; 0x50
 8004130:	4a49      	ldr	r2, [pc, #292]	; (8004258 <HAL_FDCAN_IRQHandler+0x24c>)
 8004132:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004134:	0f9b      	lsrs	r3, r3, #30
 8004136:	6113      	str	r3, [r2, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->ClockCalibrationCallback(hfdcan, ClkCalibrationITs);
#else
    /* Clock Calibration Callback */
    HAL_FDCAN_ClockCalibrationCallback(hfdcan, ClkCalibrationITs);
 8004138:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800413a:	6878      	ldr	r0, [r7, #4]
 800413c:	f000 f9c4 	bl	80044c8 <HAL_FDCAN_ClockCalibrationCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Tx event FIFO interrupts management **************************************/
  if (TxEventFifoITs != 0U)
 8004140:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004142:	2b00      	cmp	r3, #0
 8004144:	d00d      	beq.n	8004162 <HAL_FDCAN_IRQHandler+0x156>
  {
    /* Clear the Tx Event FIFO flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, TxEventFifoITs);
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	681a      	ldr	r2, [r3, #0]
 800414a:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800414c:	4b43      	ldr	r3, [pc, #268]	; (800425c <HAL_FDCAN_IRQHandler+0x250>)
 800414e:	400b      	ands	r3, r1
 8004150:	6513      	str	r3, [r2, #80]	; 0x50
 8004152:	4a41      	ldr	r2, [pc, #260]	; (8004258 <HAL_FDCAN_IRQHandler+0x24c>)
 8004154:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004156:	0f9b      	lsrs	r3, r3, #30
 8004158:	6113      	str	r3, [r2, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->TxEventFifoCallback(hfdcan, TxEventFifoITs);
#else
    /* Tx Event FIFO Callback */
    HAL_FDCAN_TxEventFifoCallback(hfdcan, TxEventFifoITs);
 800415a:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800415c:	6878      	ldr	r0, [r7, #4]
 800415e:	f000 f9be 	bl	80044de <HAL_FDCAN_TxEventFifoCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Rx FIFO 0 interrupts management ******************************************/
  if (RxFifo0ITs != 0U)
 8004162:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004164:	2b00      	cmp	r3, #0
 8004166:	d00d      	beq.n	8004184 <HAL_FDCAN_IRQHandler+0x178>
  {
    /* Clear the Rx FIFO 0 flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, RxFifo0ITs);
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	681a      	ldr	r2, [r3, #0]
 800416c:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800416e:	4b3b      	ldr	r3, [pc, #236]	; (800425c <HAL_FDCAN_IRQHandler+0x250>)
 8004170:	400b      	ands	r3, r1
 8004172:	6513      	str	r3, [r2, #80]	; 0x50
 8004174:	4a38      	ldr	r2, [pc, #224]	; (8004258 <HAL_FDCAN_IRQHandler+0x24c>)
 8004176:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004178:	0f9b      	lsrs	r3, r3, #30
 800417a:	6113      	str	r3, [r2, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->RxFifo0Callback(hfdcan, RxFifo0ITs);
#else
    /* Rx FIFO 0 Callback */
    HAL_FDCAN_RxFifo0Callback(hfdcan, RxFifo0ITs);
 800417c:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800417e:	6878      	ldr	r0, [r7, #4]
 8004180:	f000 f9b8 	bl	80044f4 <HAL_FDCAN_RxFifo0Callback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Rx FIFO 1 interrupts management ******************************************/
  if (RxFifo1ITs != 0U)
 8004184:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004186:	2b00      	cmp	r3, #0
 8004188:	d00d      	beq.n	80041a6 <HAL_FDCAN_IRQHandler+0x19a>
  {
    /* Clear the Rx FIFO 1 flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, RxFifo1ITs);
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	681a      	ldr	r2, [r3, #0]
 800418e:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8004190:	4b32      	ldr	r3, [pc, #200]	; (800425c <HAL_FDCAN_IRQHandler+0x250>)
 8004192:	400b      	ands	r3, r1
 8004194:	6513      	str	r3, [r2, #80]	; 0x50
 8004196:	4a30      	ldr	r2, [pc, #192]	; (8004258 <HAL_FDCAN_IRQHandler+0x24c>)
 8004198:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800419a:	0f9b      	lsrs	r3, r3, #30
 800419c:	6113      	str	r3, [r2, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->RxFifo1Callback(hfdcan, RxFifo1ITs);
#else
    /* Rx FIFO 1 Callback */
    HAL_FDCAN_RxFifo1Callback(hfdcan, RxFifo1ITs);
 800419e:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80041a0:	6878      	ldr	r0, [r7, #4]
 80041a2:	f000 f9b2 	bl	800450a <HAL_FDCAN_RxFifo1Callback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Tx FIFO empty interrupt management ***************************************/
  if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_TX_FIFO_EMPTY) != 0U)
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	681b      	ldr	r3, [r3, #0]
 80041aa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80041ac:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80041b0:	2b00      	cmp	r3, #0
 80041b2:	d011      	beq.n	80041d8 <HAL_FDCAN_IRQHandler+0x1cc>
  {
    if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_TX_FIFO_EMPTY) != 0U)
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	681b      	ldr	r3, [r3, #0]
 80041b8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80041ba:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80041be:	2b00      	cmp	r3, #0
 80041c0:	d00a      	beq.n	80041d8 <HAL_FDCAN_IRQHandler+0x1cc>
    {
      /* Clear the Tx FIFO empty flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_FIFO_EMPTY);
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	681b      	ldr	r3, [r3, #0]
 80041c6:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80041ca:	651a      	str	r2, [r3, #80]	; 0x50
 80041cc:	4b22      	ldr	r3, [pc, #136]	; (8004258 <HAL_FDCAN_IRQHandler+0x24c>)
 80041ce:	2200      	movs	r2, #0
 80041d0:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxFifoEmptyCallback(hfdcan);
#else
      /* Tx FIFO empty Callback */
      HAL_FDCAN_TxFifoEmptyCallback(hfdcan);
 80041d2:	6878      	ldr	r0, [r7, #4]
 80041d4:	f000 f9a4 	bl	8004520 <HAL_FDCAN_TxFifoEmptyCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Transmission Complete interrupt management *******************************/
  if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_TX_COMPLETE) != 0U)
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	681b      	ldr	r3, [r3, #0]
 80041dc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80041de:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80041e2:	2b00      	cmp	r3, #0
 80041e4:	d01e      	beq.n	8004224 <HAL_FDCAN_IRQHandler+0x218>
  {
    if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_TX_COMPLETE) != 0U)
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	681b      	ldr	r3, [r3, #0]
 80041ea:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80041ec:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80041f0:	2b00      	cmp	r3, #0
 80041f2:	d017      	beq.n	8004224 <HAL_FDCAN_IRQHandler+0x218>
    {
      /* List of transmitted monitored buffers */
      TransmittedBuffers = hfdcan->Instance->TXBTO;
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	681b      	ldr	r3, [r3, #0]
 80041f8:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80041fc:	62bb      	str	r3, [r7, #40]	; 0x28
      TransmittedBuffers &= hfdcan->Instance->TXBTIE;
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	681b      	ldr	r3, [r3, #0]
 8004202:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8004206:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004208:	4013      	ands	r3, r2
 800420a:	62bb      	str	r3, [r7, #40]	; 0x28

      /* Clear the Transmission Complete flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_COMPLETE);
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	681b      	ldr	r3, [r3, #0]
 8004210:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004214:	651a      	str	r2, [r3, #80]	; 0x50
 8004216:	4b10      	ldr	r3, [pc, #64]	; (8004258 <HAL_FDCAN_IRQHandler+0x24c>)
 8004218:	2200      	movs	r2, #0
 800421a:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxBufferCompleteCallback(hfdcan, TransmittedBuffers);
#else
      /* Transmission Complete Callback */
      HAL_FDCAN_TxBufferCompleteCallback(hfdcan, TransmittedBuffers);
 800421c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800421e:	6878      	ldr	r0, [r7, #4]
 8004220:	f000 f988 	bl	8004534 <HAL_FDCAN_TxBufferCompleteCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Rx Buffer New Message interrupt management *******************************/
  if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_RX_BUFFER_NEW_MESSAGE) != 0U)
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	681b      	ldr	r3, [r3, #0]
 8004228:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800422a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800422e:	2b00      	cmp	r3, #0
 8004230:	d016      	beq.n	8004260 <HAL_FDCAN_IRQHandler+0x254>
  {
    if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_RX_BUFFER_NEW_MESSAGE) != 0U)
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	681b      	ldr	r3, [r3, #0]
 8004236:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004238:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800423c:	2b00      	cmp	r3, #0
 800423e:	d00f      	beq.n	8004260 <HAL_FDCAN_IRQHandler+0x254>
    {
      /* Clear the Rx Buffer New Message flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_RX_BUFFER_NEW_MESSAGE);
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	681b      	ldr	r3, [r3, #0]
 8004244:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8004248:	651a      	str	r2, [r3, #80]	; 0x50
 800424a:	4b03      	ldr	r3, [pc, #12]	; (8004258 <HAL_FDCAN_IRQHandler+0x24c>)
 800424c:	2200      	movs	r2, #0
 800424e:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->RxBufferNewMessageCallback(hfdcan);
#else
      /* Rx Buffer New Message Callback */
      HAL_FDCAN_RxBufferNewMessageCallback(hfdcan);
 8004250:	6878      	ldr	r0, [r7, #4]
 8004252:	f000 f985 	bl	8004560 <HAL_FDCAN_RxBufferNewMessageCallback>
 8004256:	e003      	b.n	8004260 <HAL_FDCAN_IRQHandler+0x254>
 8004258:	4000a800 	.word	0x4000a800
 800425c:	3fcfffff 	.word	0x3fcfffff
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Timestamp Wraparound interrupt management ********************************/
  if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_TIMESTAMP_WRAPAROUND) != 0U)
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	681b      	ldr	r3, [r3, #0]
 8004264:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004266:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800426a:	2b00      	cmp	r3, #0
 800426c:	d011      	beq.n	8004292 <HAL_FDCAN_IRQHandler+0x286>
  {
    if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_TIMESTAMP_WRAPAROUND) != 0U)
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	681b      	ldr	r3, [r3, #0]
 8004272:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004274:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004278:	2b00      	cmp	r3, #0
 800427a:	d00a      	beq.n	8004292 <HAL_FDCAN_IRQHandler+0x286>
    {
      /* Clear the Timestamp Wraparound flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TIMESTAMP_WRAPAROUND);
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	681b      	ldr	r3, [r3, #0]
 8004280:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8004284:	651a      	str	r2, [r3, #80]	; 0x50
 8004286:	4b8d      	ldr	r3, [pc, #564]	; (80044bc <HAL_FDCAN_IRQHandler+0x4b0>)
 8004288:	2200      	movs	r2, #0
 800428a:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TimestampWraparoundCallback(hfdcan);
#else
      /* Timestamp Wraparound Callback */
      HAL_FDCAN_TimestampWraparoundCallback(hfdcan);
 800428c:	6878      	ldr	r0, [r7, #4]
 800428e:	f000 f971 	bl	8004574 <HAL_FDCAN_TimestampWraparoundCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Timeout Occurred interrupt management ************************************/
  if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_TIMEOUT_OCCURRED) != 0U)
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	681b      	ldr	r3, [r3, #0]
 8004296:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004298:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800429c:	2b00      	cmp	r3, #0
 800429e:	d011      	beq.n	80042c4 <HAL_FDCAN_IRQHandler+0x2b8>
  {
    if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_TIMEOUT_OCCURRED) != 0U)
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	681b      	ldr	r3, [r3, #0]
 80042a4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80042a6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80042aa:	2b00      	cmp	r3, #0
 80042ac:	d00a      	beq.n	80042c4 <HAL_FDCAN_IRQHandler+0x2b8>
    {
      /* Clear the Timeout Occurred flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TIMEOUT_OCCURRED);
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	681b      	ldr	r3, [r3, #0]
 80042b2:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 80042b6:	651a      	str	r2, [r3, #80]	; 0x50
 80042b8:	4b80      	ldr	r3, [pc, #512]	; (80044bc <HAL_FDCAN_IRQHandler+0x4b0>)
 80042ba:	2200      	movs	r2, #0
 80042bc:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TimeoutOccurredCallback(hfdcan);
#else
      /* Timeout Occurred Callback */
      HAL_FDCAN_TimeoutOccurredCallback(hfdcan);
 80042be:	6878      	ldr	r0, [r7, #4]
 80042c0:	f000 f962 	bl	8004588 <HAL_FDCAN_TimeoutOccurredCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Message RAM access failure interrupt management **************************/
  if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_RAM_ACCESS_FAILURE) != 0U)
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	681b      	ldr	r3, [r3, #0]
 80042c8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80042ca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80042ce:	2b00      	cmp	r3, #0
 80042d0:	d016      	beq.n	8004300 <HAL_FDCAN_IRQHandler+0x2f4>
  {
    if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_RAM_ACCESS_FAILURE) != 0U)
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	681b      	ldr	r3, [r3, #0]
 80042d6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80042d8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80042dc:	2b00      	cmp	r3, #0
 80042de:	d00f      	beq.n	8004300 <HAL_FDCAN_IRQHandler+0x2f4>
    {
      /* Clear the Message RAM access failure flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_RAM_ACCESS_FAILURE);
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	681b      	ldr	r3, [r3, #0]
 80042e4:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80042e8:	651a      	str	r2, [r3, #80]	; 0x50
 80042ea:	4b74      	ldr	r3, [pc, #464]	; (80044bc <HAL_FDCAN_IRQHandler+0x4b0>)
 80042ec:	2200      	movs	r2, #0
 80042ee:	611a      	str	r2, [r3, #16]

      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_RAM_ACCESS;
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80042f6:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
    }
  }

  /* Error Status interrupts management ***************************************/
  if (ErrorStatusITs != 0U)
 8004300:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004302:	2b00      	cmp	r3, #0
 8004304:	d00d      	beq.n	8004322 <HAL_FDCAN_IRQHandler+0x316>
  {
    /* Clear the Error flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, ErrorStatusITs);
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	681a      	ldr	r2, [r3, #0]
 800430a:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800430c:	4b6c      	ldr	r3, [pc, #432]	; (80044c0 <HAL_FDCAN_IRQHandler+0x4b4>)
 800430e:	400b      	ands	r3, r1
 8004310:	6513      	str	r3, [r2, #80]	; 0x50
 8004312:	4a6a      	ldr	r2, [pc, #424]	; (80044bc <HAL_FDCAN_IRQHandler+0x4b0>)
 8004314:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004316:	0f9b      	lsrs	r3, r3, #30
 8004318:	6113      	str	r3, [r2, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->ErrorStatusCallback(hfdcan, ErrorStatusITs);
#else
    /* Error Status Callback */
    HAL_FDCAN_ErrorStatusCallback(hfdcan, ErrorStatusITs);
 800431a:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800431c:	6878      	ldr	r0, [r7, #4]
 800431e:	f000 f951 	bl	80045c4 <HAL_FDCAN_ErrorStatusCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Error interrupts management **********************************************/
  if (Errors != 0U)
 8004322:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004324:	2b00      	cmp	r3, #0
 8004326:	d011      	beq.n	800434c <HAL_FDCAN_IRQHandler+0x340>
  {
    /* Clear the Error flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, Errors);
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	681a      	ldr	r2, [r3, #0]
 800432c:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800432e:	4b64      	ldr	r3, [pc, #400]	; (80044c0 <HAL_FDCAN_IRQHandler+0x4b4>)
 8004330:	400b      	ands	r3, r1
 8004332:	6513      	str	r3, [r2, #80]	; 0x50
 8004334:	4a61      	ldr	r2, [pc, #388]	; (80044bc <HAL_FDCAN_IRQHandler+0x4b0>)
 8004336:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004338:	0f9b      	lsrs	r3, r3, #30
 800433a:	6113      	str	r3, [r2, #16]

    /* Update error code */
    hfdcan->ErrorCode |= Errors;
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	f8d3 209c 	ldr.w	r2, [r3, #156]	; 0x9c
 8004342:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004344:	431a      	orrs	r2, r3
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
  }

  if (hfdcan->Instance == FDCAN1)
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	681b      	ldr	r3, [r3, #0]
 8004350:	4a5c      	ldr	r2, [pc, #368]	; (80044c4 <HAL_FDCAN_IRQHandler+0x4b8>)
 8004352:	4293      	cmp	r3, r2
 8004354:	f040 80a6 	bne.w	80044a4 <HAL_FDCAN_IRQHandler+0x498>
  {
    if ((hfdcan->ttcan->TTOCF & FDCAN_TTOCF_OM) != 0U)
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	685b      	ldr	r3, [r3, #4]
 800435c:	689b      	ldr	r3, [r3, #8]
 800435e:	f003 0303 	and.w	r3, r3, #3
 8004362:	2b00      	cmp	r3, #0
 8004364:	f000 809e 	beq.w	80044a4 <HAL_FDCAN_IRQHandler+0x498>
    {
      TTSchedSyncITs = hfdcan->ttcan->TTIR & FDCAN_TT_SCHEDULE_SYNC_MASK;
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	685b      	ldr	r3, [r3, #4]
 800436c:	6a1b      	ldr	r3, [r3, #32]
 800436e:	f003 030f 	and.w	r3, r3, #15
 8004372:	627b      	str	r3, [r7, #36]	; 0x24
      TTSchedSyncITs &= hfdcan->ttcan->TTIE;
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	685b      	ldr	r3, [r3, #4]
 8004378:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800437a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800437c:	4013      	ands	r3, r2
 800437e:	627b      	str	r3, [r7, #36]	; 0x24
      TTTimeMarkITs = hfdcan->ttcan->TTIR & FDCAN_TT_TIME_MARK_MASK;
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	685b      	ldr	r3, [r3, #4]
 8004384:	6a1b      	ldr	r3, [r3, #32]
 8004386:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800438a:	623b      	str	r3, [r7, #32]
      TTTimeMarkITs &= hfdcan->ttcan->TTIE;
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	685b      	ldr	r3, [r3, #4]
 8004390:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004392:	6a3a      	ldr	r2, [r7, #32]
 8004394:	4013      	ands	r3, r2
 8004396:	623b      	str	r3, [r7, #32]
      TTGlobTimeITs = hfdcan->ttcan->TTIR & FDCAN_TT_GLOBAL_TIME_MASK;
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	685b      	ldr	r3, [r3, #4]
 800439c:	6a1b      	ldr	r3, [r3, #32]
 800439e:	f403 73c0 	and.w	r3, r3, #384	; 0x180
 80043a2:	61fb      	str	r3, [r7, #28]
      TTGlobTimeITs &= hfdcan->ttcan->TTIE;
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	685b      	ldr	r3, [r3, #4]
 80043a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043aa:	69fa      	ldr	r2, [r7, #28]
 80043ac:	4013      	ands	r3, r2
 80043ae:	61fb      	str	r3, [r7, #28]
      TTDistErrors = hfdcan->ttcan->TTIR & FDCAN_TT_DISTURBING_ERROR_MASK;
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	685b      	ldr	r3, [r3, #4]
 80043b4:	6a1b      	ldr	r3, [r3, #32]
 80043b6:	f403 43fc 	and.w	r3, r3, #32256	; 0x7e00
 80043ba:	61bb      	str	r3, [r7, #24]
      TTDistErrors &= hfdcan->ttcan->TTIE;
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	685b      	ldr	r3, [r3, #4]
 80043c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043c2:	69ba      	ldr	r2, [r7, #24]
 80043c4:	4013      	ands	r3, r2
 80043c6:	61bb      	str	r3, [r7, #24]
      TTFatalErrors = hfdcan->ttcan->TTIR & FDCAN_TT_FATAL_ERROR_MASK;
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	685b      	ldr	r3, [r3, #4]
 80043cc:	6a1b      	ldr	r3, [r3, #32]
 80043ce:	f403 23f0 	and.w	r3, r3, #491520	; 0x78000
 80043d2:	617b      	str	r3, [r7, #20]
      TTFatalErrors &= hfdcan->ttcan->TTIE;
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	685b      	ldr	r3, [r3, #4]
 80043d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043da:	697a      	ldr	r2, [r7, #20]
 80043dc:	4013      	ands	r3, r2
 80043de:	617b      	str	r3, [r7, #20]

      /* TT Schedule Synchronization interrupts management **********************/
      if (TTSchedSyncITs != 0U)
 80043e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043e2:	2b00      	cmp	r3, #0
 80043e4:	d007      	beq.n	80043f6 <HAL_FDCAN_IRQHandler+0x3ea>
      {
        /* Clear the TT Schedule Synchronization flags */
        __HAL_FDCAN_TT_CLEAR_FLAG(hfdcan, TTSchedSyncITs);
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	685b      	ldr	r3, [r3, #4]
 80043ea:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80043ec:	621a      	str	r2, [r3, #32]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hfdcan->TT_ScheduleSyncCallback(hfdcan, TTSchedSyncITs);
#else
        /* TT Schedule Synchronization Callback */
        HAL_FDCAN_TT_ScheduleSyncCallback(hfdcan, TTSchedSyncITs);
 80043ee:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80043f0:	6878      	ldr	r0, [r7, #4]
 80043f2:	f000 f8f2 	bl	80045da <HAL_FDCAN_TT_ScheduleSyncCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
      }

      /* TT Time Mark interrupts management *************************************/
      if (TTTimeMarkITs != 0U)
 80043f6:	6a3b      	ldr	r3, [r7, #32]
 80043f8:	2b00      	cmp	r3, #0
 80043fa:	d007      	beq.n	800440c <HAL_FDCAN_IRQHandler+0x400>
      {
        /* Clear the TT Time Mark flags */
        __HAL_FDCAN_TT_CLEAR_FLAG(hfdcan, TTTimeMarkITs);
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	685b      	ldr	r3, [r3, #4]
 8004400:	6a3a      	ldr	r2, [r7, #32]
 8004402:	621a      	str	r2, [r3, #32]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hfdcan->TT_TimeMarkCallback(hfdcan, TTTimeMarkITs);
#else
        /* TT Time Mark Callback */
        HAL_FDCAN_TT_TimeMarkCallback(hfdcan, TTTimeMarkITs);
 8004404:	6a39      	ldr	r1, [r7, #32]
 8004406:	6878      	ldr	r0, [r7, #4]
 8004408:	f000 f8f2 	bl	80045f0 <HAL_FDCAN_TT_TimeMarkCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
      }

      /* TT Stop Watch interrupt management *************************************/
      if (__HAL_FDCAN_TT_GET_IT_SOURCE(hfdcan, FDCAN_TT_IT_STOP_WATCH) != 0U)
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	685b      	ldr	r3, [r3, #4]
 8004410:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004412:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004416:	2b00      	cmp	r3, #0
 8004418:	d01b      	beq.n	8004452 <HAL_FDCAN_IRQHandler+0x446>
      {
        if (__HAL_FDCAN_TT_GET_FLAG(hfdcan, FDCAN_TT_FLAG_STOP_WATCH) != 0U)
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	685b      	ldr	r3, [r3, #4]
 800441e:	6a1b      	ldr	r3, [r3, #32]
 8004420:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004424:	2b00      	cmp	r3, #0
 8004426:	d014      	beq.n	8004452 <HAL_FDCAN_IRQHandler+0x446>
        {
          /* Retrieve Stop watch Time and Cycle count */
          SWTime = ((hfdcan->ttcan->TTCPT & FDCAN_TTCPT_SWV) >> FDCAN_TTCPT_SWV_Pos);
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	685b      	ldr	r3, [r3, #4]
 800442c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800442e:	0c1b      	lsrs	r3, r3, #16
 8004430:	b29b      	uxth	r3, r3
 8004432:	613b      	str	r3, [r7, #16]
          SWCycleCount = ((hfdcan->ttcan->TTCPT & FDCAN_TTCPT_CCV) >> FDCAN_TTCPT_CCV_Pos);
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	685b      	ldr	r3, [r3, #4]
 8004438:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800443a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800443e:	60fb      	str	r3, [r7, #12]

          /* Clear the TT Stop Watch flag */
          __HAL_FDCAN_TT_CLEAR_FLAG(hfdcan, FDCAN_TT_FLAG_STOP_WATCH);
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	685b      	ldr	r3, [r3, #4]
 8004444:	2240      	movs	r2, #64	; 0x40
 8004446:	621a      	str	r2, [r3, #32]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hfdcan->TT_StopWatchCallback(hfdcan, SWTime, SWCycleCount);
#else
          /* TT Stop Watch Callback */
          HAL_FDCAN_TT_StopWatchCallback(hfdcan, SWTime, SWCycleCount);
 8004448:	68fa      	ldr	r2, [r7, #12]
 800444a:	6939      	ldr	r1, [r7, #16]
 800444c:	6878      	ldr	r0, [r7, #4]
 800444e:	f000 f8da 	bl	8004606 <HAL_FDCAN_TT_StopWatchCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
        }
      }

      /* TT Global Time interrupts management ***********************************/
      if (TTGlobTimeITs != 0U)
 8004452:	69fb      	ldr	r3, [r7, #28]
 8004454:	2b00      	cmp	r3, #0
 8004456:	d007      	beq.n	8004468 <HAL_FDCAN_IRQHandler+0x45c>
      {
        /* Clear the TT Global Time flags */
        __HAL_FDCAN_TT_CLEAR_FLAG(hfdcan, TTGlobTimeITs);
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	685b      	ldr	r3, [r3, #4]
 800445c:	69fa      	ldr	r2, [r7, #28]
 800445e:	621a      	str	r2, [r3, #32]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hfdcan->TT_GlobalTimeCallback(hfdcan, TTGlobTimeITs);
#else
        /* TT Global Time Callback */
        HAL_FDCAN_TT_GlobalTimeCallback(hfdcan, TTGlobTimeITs);
 8004460:	69f9      	ldr	r1, [r7, #28]
 8004462:	6878      	ldr	r0, [r7, #4]
 8004464:	f000 f8db 	bl	800461e <HAL_FDCAN_TT_GlobalTimeCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
      }

      /* TT Disturbing Error interrupts management ******************************/
      if (TTDistErrors != 0U)
 8004468:	69bb      	ldr	r3, [r7, #24]
 800446a:	2b00      	cmp	r3, #0
 800446c:	d00b      	beq.n	8004486 <HAL_FDCAN_IRQHandler+0x47a>
      {
        /* Clear the TT Disturbing Error flags */
        __HAL_FDCAN_TT_CLEAR_FLAG(hfdcan, TTDistErrors);
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	685b      	ldr	r3, [r3, #4]
 8004472:	69ba      	ldr	r2, [r7, #24]
 8004474:	621a      	str	r2, [r3, #32]

        /* Update error code */
        hfdcan->ErrorCode |= TTDistErrors;
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	f8d3 209c 	ldr.w	r2, [r3, #156]	; 0x9c
 800447c:	69bb      	ldr	r3, [r7, #24]
 800447e:	431a      	orrs	r2, r3
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
      }

      /* TT Fatal Error interrupts management ***********************************/
      if (TTFatalErrors != 0U)
 8004486:	697b      	ldr	r3, [r7, #20]
 8004488:	2b00      	cmp	r3, #0
 800448a:	d00b      	beq.n	80044a4 <HAL_FDCAN_IRQHandler+0x498>
      {
        /* Clear the TT Fatal Error flags */
        __HAL_FDCAN_TT_CLEAR_FLAG(hfdcan, TTFatalErrors);
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	685b      	ldr	r3, [r3, #4]
 8004490:	697a      	ldr	r2, [r7, #20]
 8004492:	621a      	str	r2, [r3, #32]

        /* Update error code */
        hfdcan->ErrorCode |= TTFatalErrors;
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	f8d3 209c 	ldr.w	r2, [r3, #156]	; 0x9c
 800449a:	697b      	ldr	r3, [r7, #20]
 800449c:	431a      	orrs	r2, r3
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
      }
    }
  }

  if (hfdcan->ErrorCode != HAL_FDCAN_ERROR_NONE)
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80044aa:	2b00      	cmp	r3, #0
 80044ac:	d002      	beq.n	80044b4 <HAL_FDCAN_IRQHandler+0x4a8>
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->ErrorCallback(hfdcan);
#else
    /* Error Callback */
    HAL_FDCAN_ErrorCallback(hfdcan);
 80044ae:	6878      	ldr	r0, [r7, #4]
 80044b0:	f000 f87e 	bl	80045b0 <HAL_FDCAN_ErrorCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }
}
 80044b4:	bf00      	nop
 80044b6:	3748      	adds	r7, #72	; 0x48
 80044b8:	46bd      	mov	sp, r7
 80044ba:	bd80      	pop	{r7, pc}
 80044bc:	4000a800 	.word	0x4000a800
 80044c0:	3fcfffff 	.word	0x3fcfffff
 80044c4:	4000a000 	.word	0x4000a000

080044c8 <HAL_FDCAN_ClockCalibrationCallback>:
  * @param  ClkCalibrationITs indicates which Clock Calibration interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Clock_Calibration_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_ClockCalibrationCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t ClkCalibrationITs)
{
 80044c8:	b480      	push	{r7}
 80044ca:	b083      	sub	sp, #12
 80044cc:	af00      	add	r7, sp, #0
 80044ce:	6078      	str	r0, [r7, #4]
 80044d0:	6039      	str	r1, [r7, #0]
  UNUSED(ClkCalibrationITs);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_ClockCalibrationCallback could be implemented in the user file
   */
}
 80044d2:	bf00      	nop
 80044d4:	370c      	adds	r7, #12
 80044d6:	46bd      	mov	sp, r7
 80044d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044dc:	4770      	bx	lr

080044de <HAL_FDCAN_TxEventFifoCallback>:
  * @param  TxEventFifoITs indicates which Tx Event FIFO interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Tx_Event_Fifo_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_TxEventFifoCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t TxEventFifoITs)
{
 80044de:	b480      	push	{r7}
 80044e0:	b083      	sub	sp, #12
 80044e2:	af00      	add	r7, sp, #0
 80044e4:	6078      	str	r0, [r7, #4]
 80044e6:	6039      	str	r1, [r7, #0]
  UNUSED(TxEventFifoITs);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxEventFifoCallback could be implemented in the user file
   */
}
 80044e8:	bf00      	nop
 80044ea:	370c      	adds	r7, #12
 80044ec:	46bd      	mov	sp, r7
 80044ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044f2:	4770      	bx	lr

080044f4 <HAL_FDCAN_RxFifo0Callback>:
  * @param  RxFifo0ITs indicates which Rx FIFO 0 interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Rx_Fifo0_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_RxFifo0Callback(FDCAN_HandleTypeDef *hfdcan, uint32_t RxFifo0ITs)
{
 80044f4:	b480      	push	{r7}
 80044f6:	b083      	sub	sp, #12
 80044f8:	af00      	add	r7, sp, #0
 80044fa:	6078      	str	r0, [r7, #4]
 80044fc:	6039      	str	r1, [r7, #0]
  UNUSED(RxFifo0ITs);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_RxFifo0Callback could be implemented in the user file
   */
}
 80044fe:	bf00      	nop
 8004500:	370c      	adds	r7, #12
 8004502:	46bd      	mov	sp, r7
 8004504:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004508:	4770      	bx	lr

0800450a <HAL_FDCAN_RxFifo1Callback>:
  * @param  RxFifo1ITs indicates which Rx FIFO 1 interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Rx_Fifo1_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_RxFifo1Callback(FDCAN_HandleTypeDef *hfdcan, uint32_t RxFifo1ITs)
{
 800450a:	b480      	push	{r7}
 800450c:	b083      	sub	sp, #12
 800450e:	af00      	add	r7, sp, #0
 8004510:	6078      	str	r0, [r7, #4]
 8004512:	6039      	str	r1, [r7, #0]
  UNUSED(RxFifo1ITs);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_RxFifo1Callback could be implemented in the user file
   */
}
 8004514:	bf00      	nop
 8004516:	370c      	adds	r7, #12
 8004518:	46bd      	mov	sp, r7
 800451a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800451e:	4770      	bx	lr

08004520 <HAL_FDCAN_TxFifoEmptyCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TxFifoEmptyCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8004520:	b480      	push	{r7}
 8004522:	b083      	sub	sp, #12
 8004524:	af00      	add	r7, sp, #0
 8004526:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxFifoEmptyCallback could be implemented in the user file
   */
}
 8004528:	bf00      	nop
 800452a:	370c      	adds	r7, #12
 800452c:	46bd      	mov	sp, r7
 800452e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004532:	4770      	bx	lr

08004534 <HAL_FDCAN_TxBufferCompleteCallback>:
  * @param  BufferIndexes Indexes of the transmitted buffers.
  *         This parameter can be any combination of @arg FDCAN_Tx_location.
  * @retval None
  */
__weak void HAL_FDCAN_TxBufferCompleteCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t BufferIndexes)
{
 8004534:	b480      	push	{r7}
 8004536:	b083      	sub	sp, #12
 8004538:	af00      	add	r7, sp, #0
 800453a:	6078      	str	r0, [r7, #4]
 800453c:	6039      	str	r1, [r7, #0]
  UNUSED(BufferIndexes);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxBufferCompleteCallback could be implemented in the user file
   */
}
 800453e:	bf00      	nop
 8004540:	370c      	adds	r7, #12
 8004542:	46bd      	mov	sp, r7
 8004544:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004548:	4770      	bx	lr

0800454a <HAL_FDCAN_TxBufferAbortCallback>:
  * @param  BufferIndexes Indexes of the aborted buffers.
  *         This parameter can be any combination of @arg FDCAN_Tx_location.
  * @retval None
  */
__weak void HAL_FDCAN_TxBufferAbortCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t BufferIndexes)
{
 800454a:	b480      	push	{r7}
 800454c:	b083      	sub	sp, #12
 800454e:	af00      	add	r7, sp, #0
 8004550:	6078      	str	r0, [r7, #4]
 8004552:	6039      	str	r1, [r7, #0]
  UNUSED(BufferIndexes);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxBufferAbortCallback could be implemented in the user file
   */
}
 8004554:	bf00      	nop
 8004556:	370c      	adds	r7, #12
 8004558:	46bd      	mov	sp, r7
 800455a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800455e:	4770      	bx	lr

08004560 <HAL_FDCAN_RxBufferNewMessageCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_RxBufferNewMessageCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8004560:	b480      	push	{r7}
 8004562:	b083      	sub	sp, #12
 8004564:	af00      	add	r7, sp, #0
 8004566:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_RxBufferNewMessageCallback could be implemented in the user file
   */
}
 8004568:	bf00      	nop
 800456a:	370c      	adds	r7, #12
 800456c:	46bd      	mov	sp, r7
 800456e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004572:	4770      	bx	lr

08004574 <HAL_FDCAN_TimestampWraparoundCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TimestampWraparoundCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8004574:	b480      	push	{r7}
 8004576:	b083      	sub	sp, #12
 8004578:	af00      	add	r7, sp, #0
 800457a:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TimestampWraparoundCallback could be implemented in the user file
   */
}
 800457c:	bf00      	nop
 800457e:	370c      	adds	r7, #12
 8004580:	46bd      	mov	sp, r7
 8004582:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004586:	4770      	bx	lr

08004588 <HAL_FDCAN_TimeoutOccurredCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TimeoutOccurredCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8004588:	b480      	push	{r7}
 800458a:	b083      	sub	sp, #12
 800458c:	af00      	add	r7, sp, #0
 800458e:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TimeoutOccurredCallback could be implemented in the user file
   */
}
 8004590:	bf00      	nop
 8004592:	370c      	adds	r7, #12
 8004594:	46bd      	mov	sp, r7
 8004596:	f85d 7b04 	ldr.w	r7, [sp], #4
 800459a:	4770      	bx	lr

0800459c <HAL_FDCAN_HighPriorityMessageCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_HighPriorityMessageCallback(FDCAN_HandleTypeDef *hfdcan)
{
 800459c:	b480      	push	{r7}
 800459e:	b083      	sub	sp, #12
 80045a0:	af00      	add	r7, sp, #0
 80045a2:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_HighPriorityMessageCallback could be implemented in the user file
   */
}
 80045a4:	bf00      	nop
 80045a6:	370c      	adds	r7, #12
 80045a8:	46bd      	mov	sp, r7
 80045aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045ae:	4770      	bx	lr

080045b0 <HAL_FDCAN_ErrorCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_ErrorCallback(FDCAN_HandleTypeDef *hfdcan)
{
 80045b0:	b480      	push	{r7}
 80045b2:	b083      	sub	sp, #12
 80045b4:	af00      	add	r7, sp, #0
 80045b6:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_ErrorCallback could be implemented in the user file
   */
}
 80045b8:	bf00      	nop
 80045ba:	370c      	adds	r7, #12
 80045bc:	46bd      	mov	sp, r7
 80045be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045c2:	4770      	bx	lr

080045c4 <HAL_FDCAN_ErrorStatusCallback>:
  * @param  ErrorStatusITs indicates which Error Status interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Error_Status_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_ErrorStatusCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t ErrorStatusITs)
{
 80045c4:	b480      	push	{r7}
 80045c6:	b083      	sub	sp, #12
 80045c8:	af00      	add	r7, sp, #0
 80045ca:	6078      	str	r0, [r7, #4]
 80045cc:	6039      	str	r1, [r7, #0]
  UNUSED(ErrorStatusITs);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_ErrorStatusCallback could be implemented in the user file
   */
}
 80045ce:	bf00      	nop
 80045d0:	370c      	adds	r7, #12
 80045d2:	46bd      	mov	sp, r7
 80045d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045d8:	4770      	bx	lr

080045da <HAL_FDCAN_TT_ScheduleSyncCallback>:
  * @param  TTSchedSyncITs indicates which TT Schedule Synchronization interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_TTScheduleSynchronization_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_TT_ScheduleSyncCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t TTSchedSyncITs)
{
 80045da:	b480      	push	{r7}
 80045dc:	b083      	sub	sp, #12
 80045de:	af00      	add	r7, sp, #0
 80045e0:	6078      	str	r0, [r7, #4]
 80045e2:	6039      	str	r1, [r7, #0]
  UNUSED(TTSchedSyncITs);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TT_ScheduleSyncCallback could be implemented in the user file
   */
}
 80045e4:	bf00      	nop
 80045e6:	370c      	adds	r7, #12
 80045e8:	46bd      	mov	sp, r7
 80045ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045ee:	4770      	bx	lr

080045f0 <HAL_FDCAN_TT_TimeMarkCallback>:
  * @param  TTTimeMarkITs indicates which TT Schedule Synchronization interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_TTTimeMark_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_TT_TimeMarkCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t TTTimeMarkITs)
{
 80045f0:	b480      	push	{r7}
 80045f2:	b083      	sub	sp, #12
 80045f4:	af00      	add	r7, sp, #0
 80045f6:	6078      	str	r0, [r7, #4]
 80045f8:	6039      	str	r1, [r7, #0]
  UNUSED(TTTimeMarkITs);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TT_TimeMarkCallback could be implemented in the user file
   */
}
 80045fa:	bf00      	nop
 80045fc:	370c      	adds	r7, #12
 80045fe:	46bd      	mov	sp, r7
 8004600:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004604:	4770      	bx	lr

08004606 <HAL_FDCAN_TT_StopWatchCallback>:
  * @param  SWCycleCount Cycle count value captured together with SWTime.
  *         This parameter is a number between 0 and 0x3F.
  * @retval None
  */
__weak void HAL_FDCAN_TT_StopWatchCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t SWTime, uint32_t SWCycleCount)
{
 8004606:	b480      	push	{r7}
 8004608:	b085      	sub	sp, #20
 800460a:	af00      	add	r7, sp, #0
 800460c:	60f8      	str	r0, [r7, #12]
 800460e:	60b9      	str	r1, [r7, #8]
 8004610:	607a      	str	r2, [r7, #4]
  UNUSED(SWCycleCount);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TT_StopWatchCallback could be implemented in the user file
   */
}
 8004612:	bf00      	nop
 8004614:	3714      	adds	r7, #20
 8004616:	46bd      	mov	sp, r7
 8004618:	f85d 7b04 	ldr.w	r7, [sp], #4
 800461c:	4770      	bx	lr

0800461e <HAL_FDCAN_TT_GlobalTimeCallback>:
  * @param  TTGlobTimeITs indicates which TT Global Time interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_TTGlobalTime_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_TT_GlobalTimeCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t TTGlobTimeITs)
{
 800461e:	b480      	push	{r7}
 8004620:	b083      	sub	sp, #12
 8004622:	af00      	add	r7, sp, #0
 8004624:	6078      	str	r0, [r7, #4]
 8004626:	6039      	str	r1, [r7, #0]
  UNUSED(TTGlobTimeITs);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TT_GlobalTimeCallback could be implemented in the user file
   */
}
 8004628:	bf00      	nop
 800462a:	370c      	adds	r7, #12
 800462c:	46bd      	mov	sp, r7
 800462e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004632:	4770      	bx	lr

08004634 <FDCAN_CalcultateRamBlockAddresses>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
 */
static HAL_StatusTypeDef FDCAN_CalcultateRamBlockAddresses(FDCAN_HandleTypeDef *hfdcan)
{
 8004634:	b480      	push	{r7}
 8004636:	b085      	sub	sp, #20
 8004638:	af00      	add	r7, sp, #0
 800463a:	6078      	str	r0, [r7, #4]
  uint32_t RAMcounter;
  uint32_t StartAddress;

  StartAddress = hfdcan->Init.MessageRAMOffset;
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004640:	60bb      	str	r3, [r7, #8]

  /* Standard filter list start address */
  MODIFY_REG(hfdcan->Instance->SIDFC, FDCAN_SIDFC_FLSSA, (StartAddress << FDCAN_SIDFC_FLSSA_Pos));
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	681b      	ldr	r3, [r3, #0]
 8004646:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 800464a:	4ba7      	ldr	r3, [pc, #668]	; (80048e8 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 800464c:	4013      	ands	r3, r2
 800464e:	68ba      	ldr	r2, [r7, #8]
 8004650:	0091      	lsls	r1, r2, #2
 8004652:	687a      	ldr	r2, [r7, #4]
 8004654:	6812      	ldr	r2, [r2, #0]
 8004656:	430b      	orrs	r3, r1
 8004658:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84

  /* Standard filter elements number */
  MODIFY_REG(hfdcan->Instance->SIDFC, FDCAN_SIDFC_LSS, (hfdcan->Init.StdFiltersNbr << FDCAN_SIDFC_LSS_Pos));
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	681b      	ldr	r3, [r3, #0]
 8004660:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004664:	f423 017f 	bic.w	r1, r3, #16711680	; 0xff0000
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800466c:	041a      	lsls	r2, r3, #16
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	681b      	ldr	r3, [r3, #0]
 8004672:	430a      	orrs	r2, r1
 8004674:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Extended filter list start address */
  StartAddress += hfdcan->Init.StdFiltersNbr;
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800467c:	68ba      	ldr	r2, [r7, #8]
 800467e:	4413      	add	r3, r2
 8004680:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->XIDFC, FDCAN_XIDFC_FLESA, (StartAddress << FDCAN_XIDFC_FLESA_Pos));
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	681b      	ldr	r3, [r3, #0]
 8004686:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 800468a:	4b97      	ldr	r3, [pc, #604]	; (80048e8 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 800468c:	4013      	ands	r3, r2
 800468e:	68ba      	ldr	r2, [r7, #8]
 8004690:	0091      	lsls	r1, r2, #2
 8004692:	687a      	ldr	r2, [r7, #4]
 8004694:	6812      	ldr	r2, [r2, #0]
 8004696:	430b      	orrs	r3, r1
 8004698:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Extended filter elements number */
  MODIFY_REG(hfdcan->Instance->XIDFC, FDCAN_XIDFC_LSE, (hfdcan->Init.ExtFiltersNbr << FDCAN_XIDFC_LSE_Pos));
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	681b      	ldr	r3, [r3, #0]
 80046a0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80046a4:	f423 01fe 	bic.w	r1, r3, #8323072	; 0x7f0000
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80046ac:	041a      	lsls	r2, r3, #16
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	681b      	ldr	r3, [r3, #0]
 80046b2:	430a      	orrs	r2, r1
 80046b4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Rx FIFO 0 start address */
  StartAddress += (hfdcan->Init.ExtFiltersNbr * 2U);
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80046bc:	005b      	lsls	r3, r3, #1
 80046be:	68ba      	ldr	r2, [r7, #8]
 80046c0:	4413      	add	r3, r2
 80046c2:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->RXF0C, FDCAN_RXF0C_F0SA, (StartAddress << FDCAN_RXF0C_F0SA_Pos));
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	681b      	ldr	r3, [r3, #0]
 80046c8:	f8d3 20a0 	ldr.w	r2, [r3, #160]	; 0xa0
 80046cc:	4b86      	ldr	r3, [pc, #536]	; (80048e8 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 80046ce:	4013      	ands	r3, r2
 80046d0:	68ba      	ldr	r2, [r7, #8]
 80046d2:	0091      	lsls	r1, r2, #2
 80046d4:	687a      	ldr	r2, [r7, #4]
 80046d6:	6812      	ldr	r2, [r2, #0]
 80046d8:	430b      	orrs	r3, r1
 80046da:	f8c2 30a0 	str.w	r3, [r2, #160]	; 0xa0

  /* Rx FIFO 0 elements number */
  MODIFY_REG(hfdcan->Instance->RXF0C, FDCAN_RXF0C_F0S, (hfdcan->Init.RxFifo0ElmtsNbr << FDCAN_RXF0C_F0S_Pos));
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	681b      	ldr	r3, [r3, #0]
 80046e2:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 80046e6:	f423 01fe 	bic.w	r1, r3, #8323072	; 0x7f0000
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80046ee:	041a      	lsls	r2, r3, #16
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	681b      	ldr	r3, [r3, #0]
 80046f4:	430a      	orrs	r2, r1
 80046f6:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0

  /* Rx FIFO 1 start address */
  StartAddress += (hfdcan->Init.RxFifo0ElmtsNbr * hfdcan->Init.RxFifo0ElmtSize);
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80046fe:	687a      	ldr	r2, [r7, #4]
 8004700:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8004702:	fb02 f303 	mul.w	r3, r2, r3
 8004706:	68ba      	ldr	r2, [r7, #8]
 8004708:	4413      	add	r3, r2
 800470a:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->RXF1C, FDCAN_RXF1C_F1SA, (StartAddress << FDCAN_RXF1C_F1SA_Pos));
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	681b      	ldr	r3, [r3, #0]
 8004710:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8004714:	4b74      	ldr	r3, [pc, #464]	; (80048e8 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8004716:	4013      	ands	r3, r2
 8004718:	68ba      	ldr	r2, [r7, #8]
 800471a:	0091      	lsls	r1, r2, #2
 800471c:	687a      	ldr	r2, [r7, #4]
 800471e:	6812      	ldr	r2, [r2, #0]
 8004720:	430b      	orrs	r3, r1
 8004722:	f8c2 30b0 	str.w	r3, [r2, #176]	; 0xb0

  /* Rx FIFO 1 elements number */
  MODIFY_REG(hfdcan->Instance->RXF1C, FDCAN_RXF1C_F1S, (hfdcan->Init.RxFifo1ElmtsNbr << FDCAN_RXF1C_F1S_Pos));
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	681b      	ldr	r3, [r3, #0]
 800472a:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800472e:	f423 01fe 	bic.w	r1, r3, #8323072	; 0x7f0000
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004736:	041a      	lsls	r2, r3, #16
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	681b      	ldr	r3, [r3, #0]
 800473c:	430a      	orrs	r2, r1
 800473e:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0

  /* Rx buffer list start address */
  StartAddress += (hfdcan->Init.RxFifo1ElmtsNbr * hfdcan->Init.RxFifo1ElmtSize);
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004746:	687a      	ldr	r2, [r7, #4]
 8004748:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 800474a:	fb02 f303 	mul.w	r3, r2, r3
 800474e:	68ba      	ldr	r2, [r7, #8]
 8004750:	4413      	add	r3, r2
 8004752:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->RXBC, FDCAN_RXBC_RBSA, (StartAddress << FDCAN_RXBC_RBSA_Pos));
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	681b      	ldr	r3, [r3, #0]
 8004758:	f8d3 20ac 	ldr.w	r2, [r3, #172]	; 0xac
 800475c:	4b62      	ldr	r3, [pc, #392]	; (80048e8 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 800475e:	4013      	ands	r3, r2
 8004760:	68ba      	ldr	r2, [r7, #8]
 8004762:	0091      	lsls	r1, r2, #2
 8004764:	687a      	ldr	r2, [r7, #4]
 8004766:	6812      	ldr	r2, [r2, #0]
 8004768:	430b      	orrs	r3, r1
 800476a:	f8c2 30ac 	str.w	r3, [r2, #172]	; 0xac

  /* Tx event FIFO start address */
  StartAddress += (hfdcan->Init.RxBuffersNbr * hfdcan->Init.RxBufferSize);
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004772:	687a      	ldr	r2, [r7, #4]
 8004774:	6d52      	ldr	r2, [r2, #84]	; 0x54
 8004776:	fb02 f303 	mul.w	r3, r2, r3
 800477a:	68ba      	ldr	r2, [r7, #8]
 800477c:	4413      	add	r3, r2
 800477e:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->TXEFC, FDCAN_TXEFC_EFSA, (StartAddress << FDCAN_TXEFC_EFSA_Pos));
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	681b      	ldr	r3, [r3, #0]
 8004784:	f8d3 20f0 	ldr.w	r2, [r3, #240]	; 0xf0
 8004788:	4b57      	ldr	r3, [pc, #348]	; (80048e8 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 800478a:	4013      	ands	r3, r2
 800478c:	68ba      	ldr	r2, [r7, #8]
 800478e:	0091      	lsls	r1, r2, #2
 8004790:	687a      	ldr	r2, [r7, #4]
 8004792:	6812      	ldr	r2, [r2, #0]
 8004794:	430b      	orrs	r3, r1
 8004796:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0

  /* Tx event FIFO elements number */
  MODIFY_REG(hfdcan->Instance->TXEFC, FDCAN_TXEFC_EFS, (hfdcan->Init.TxEventsNbr << FDCAN_TXEFC_EFS_Pos));
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	681b      	ldr	r3, [r3, #0]
 800479e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80047a2:	f423 117c 	bic.w	r1, r3, #4128768	; 0x3f0000
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80047aa:	041a      	lsls	r2, r3, #16
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	681b      	ldr	r3, [r3, #0]
 80047b0:	430a      	orrs	r2, r1
 80047b2:	f8c3 20f0 	str.w	r2, [r3, #240]	; 0xf0

  /* Tx buffer list start address */
  StartAddress += (hfdcan->Init.TxEventsNbr * 2U);
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80047ba:	005b      	lsls	r3, r3, #1
 80047bc:	68ba      	ldr	r2, [r7, #8]
 80047be:	4413      	add	r3, r2
 80047c0:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_TBSA, (StartAddress << FDCAN_TXBC_TBSA_Pos));
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	681b      	ldr	r3, [r3, #0]
 80047c6:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
 80047ca:	4b47      	ldr	r3, [pc, #284]	; (80048e8 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 80047cc:	4013      	ands	r3, r2
 80047ce:	68ba      	ldr	r2, [r7, #8]
 80047d0:	0091      	lsls	r1, r2, #2
 80047d2:	687a      	ldr	r2, [r7, #4]
 80047d4:	6812      	ldr	r2, [r2, #0]
 80047d6:	430b      	orrs	r3, r1
 80047d8:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0

  /* Dedicated Tx buffers number */
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_NDTB, (hfdcan->Init.TxBuffersNbr << FDCAN_TXBC_NDTB_Pos));
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	681b      	ldr	r3, [r3, #0]
 80047e0:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 80047e4:	f423 117c 	bic.w	r1, r3, #4128768	; 0x3f0000
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80047ec:	041a      	lsls	r2, r3, #16
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	681b      	ldr	r3, [r3, #0]
 80047f2:	430a      	orrs	r2, r1
 80047f4:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0

  /* Tx FIFO/queue elements number */
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_TFQS, (hfdcan->Init.TxFifoQueueElmtsNbr << FDCAN_TXBC_TFQS_Pos));
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	681b      	ldr	r3, [r3, #0]
 80047fc:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8004800:	f023 517c 	bic.w	r1, r3, #1056964608	; 0x3f000000
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004808:	061a      	lsls	r2, r3, #24
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	681b      	ldr	r3, [r3, #0]
 800480e:	430a      	orrs	r2, r1
 8004810:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0

  hfdcan->msgRam.StandardFilterSA = SRAMCAN_BASE + (hfdcan->Init.MessageRAMOffset * 4U);
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004818:	4b34      	ldr	r3, [pc, #208]	; (80048ec <FDCAN_CalcultateRamBlockAddresses+0x2b8>)
 800481a:	4413      	add	r3, r2
 800481c:	009a      	lsls	r2, r3, #2
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	66da      	str	r2, [r3, #108]	; 0x6c
  hfdcan->msgRam.ExtendedFilterSA = hfdcan->msgRam.StandardFilterSA + (hfdcan->Init.StdFiltersNbr * 4U);
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800482a:	009b      	lsls	r3, r3, #2
 800482c:	441a      	add	r2, r3
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	671a      	str	r2, [r3, #112]	; 0x70
  hfdcan->msgRam.RxFIFO0SA = hfdcan->msgRam.ExtendedFilterSA + (hfdcan->Init.ExtFiltersNbr * 2U * 4U);
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800483a:	00db      	lsls	r3, r3, #3
 800483c:	441a      	add	r2, r3
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	675a      	str	r2, [r3, #116]	; 0x74
  hfdcan->msgRam.RxFIFO1SA = hfdcan->msgRam.RxFIFO0SA + (hfdcan->Init.RxFifo0ElmtsNbr * hfdcan->Init.RxFifo0ElmtSize * 4U);
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	6f5a      	ldr	r2, [r3, #116]	; 0x74
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800484a:	6879      	ldr	r1, [r7, #4]
 800484c:	6c49      	ldr	r1, [r1, #68]	; 0x44
 800484e:	fb01 f303 	mul.w	r3, r1, r3
 8004852:	009b      	lsls	r3, r3, #2
 8004854:	441a      	add	r2, r3
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	679a      	str	r2, [r3, #120]	; 0x78
  hfdcan->msgRam.RxBufferSA = hfdcan->msgRam.RxFIFO1SA + (hfdcan->Init.RxFifo1ElmtsNbr * hfdcan->Init.RxFifo1ElmtSize * 4U);
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	6f9a      	ldr	r2, [r3, #120]	; 0x78
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004862:	6879      	ldr	r1, [r7, #4]
 8004864:	6cc9      	ldr	r1, [r1, #76]	; 0x4c
 8004866:	fb01 f303 	mul.w	r3, r1, r3
 800486a:	009b      	lsls	r3, r3, #2
 800486c:	441a      	add	r2, r3
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	67da      	str	r2, [r3, #124]	; 0x7c
  hfdcan->msgRam.TxEventFIFOSA = hfdcan->msgRam.RxBufferSA + (hfdcan->Init.RxBuffersNbr * hfdcan->Init.RxBufferSize * 4U);
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	6fda      	ldr	r2, [r3, #124]	; 0x7c
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800487a:	6879      	ldr	r1, [r7, #4]
 800487c:	6d49      	ldr	r1, [r1, #84]	; 0x54
 800487e:	fb01 f303 	mul.w	r3, r1, r3
 8004882:	009b      	lsls	r3, r3, #2
 8004884:	441a      	add	r2, r3
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  hfdcan->msgRam.TxBufferSA = hfdcan->msgRam.TxEventFIFOSA + (hfdcan->Init.TxEventsNbr * 2U * 4U);
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004896:	00db      	lsls	r3, r3, #3
 8004898:	441a      	add	r2, r3
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hfdcan->msgRam.TxFIFOQSA = hfdcan->msgRam.TxBufferSA + (hfdcan->Init.TxBuffersNbr * hfdcan->Init.TxElmtSize * 4U);
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80048aa:	6879      	ldr	r1, [r7, #4]
 80048ac:	6e89      	ldr	r1, [r1, #104]	; 0x68
 80048ae:	fb01 f303 	mul.w	r3, r1, r3
 80048b2:	009b      	lsls	r3, r3, #2
 80048b4:	441a      	add	r2, r3
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  hfdcan->msgRam.EndAddress = hfdcan->msgRam.TxFIFOQSA + (hfdcan->Init.TxFifoQueueElmtsNbr * hfdcan->Init.TxElmtSize * 4U);
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80048c6:	6879      	ldr	r1, [r7, #4]
 80048c8:	6e89      	ldr	r1, [r1, #104]	; 0x68
 80048ca:	fb01 f303 	mul.w	r3, r1, r3
 80048ce:	009b      	lsls	r3, r3, #2
 80048d0:	441a      	add	r2, r3
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  if (hfdcan->msgRam.EndAddress > FDCAN_MESSAGE_RAM_END_ADDRESS) /* Last address of the Message RAM */
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80048de:	4a04      	ldr	r2, [pc, #16]	; (80048f0 <FDCAN_CalcultateRamBlockAddresses+0x2bc>)
 80048e0:	4293      	cmp	r3, r2
 80048e2:	d915      	bls.n	8004910 <FDCAN_CalcultateRamBlockAddresses+0x2dc>
 80048e4:	e006      	b.n	80048f4 <FDCAN_CalcultateRamBlockAddresses+0x2c0>
 80048e6:	bf00      	nop
 80048e8:	ffff0003 	.word	0xffff0003
 80048ec:	10002b00 	.word	0x10002b00
 80048f0:	4000d3fc 	.word	0x4000d3fc
  {
    /* Update error code.
       Message RAM overflow */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_PARAM;
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80048fa:	f043 0220 	orr.w	r2, r3, #32
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

    /* Change FDCAN state */
    hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	2203      	movs	r2, #3
 8004908:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

    return HAL_ERROR;
 800490c:	2301      	movs	r3, #1
 800490e:	e010      	b.n	8004932 <FDCAN_CalcultateRamBlockAddresses+0x2fe>
  }
  else
  {
    /* Flush the allocated Message RAM area */
    for (RAMcounter = hfdcan->msgRam.StandardFilterSA; RAMcounter < hfdcan->msgRam.EndAddress; RAMcounter += 4U)
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004914:	60fb      	str	r3, [r7, #12]
 8004916:	e005      	b.n	8004924 <FDCAN_CalcultateRamBlockAddresses+0x2f0>
    {
      *(uint32_t *)(RAMcounter) = 0x00000000;
 8004918:	68fb      	ldr	r3, [r7, #12]
 800491a:	2200      	movs	r2, #0
 800491c:	601a      	str	r2, [r3, #0]
    for (RAMcounter = hfdcan->msgRam.StandardFilterSA; RAMcounter < hfdcan->msgRam.EndAddress; RAMcounter += 4U)
 800491e:	68fb      	ldr	r3, [r7, #12]
 8004920:	3304      	adds	r3, #4
 8004922:	60fb      	str	r3, [r7, #12]
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800492a:	68fa      	ldr	r2, [r7, #12]
 800492c:	429a      	cmp	r2, r3
 800492e:	d3f3      	bcc.n	8004918 <FDCAN_CalcultateRamBlockAddresses+0x2e4>
    }
  }

  /* Return function status */
  return HAL_OK;
 8004930:	2300      	movs	r3, #0
}
 8004932:	4618      	mov	r0, r3
 8004934:	3714      	adds	r7, #20
 8004936:	46bd      	mov	sp, r7
 8004938:	f85d 7b04 	ldr.w	r7, [sp], #4
 800493c:	4770      	bx	lr
 800493e:	bf00      	nop

08004940 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004940:	b480      	push	{r7}
 8004942:	b089      	sub	sp, #36	; 0x24
 8004944:	af00      	add	r7, sp, #0
 8004946:	6078      	str	r0, [r7, #4]
 8004948:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800494a:	2300      	movs	r3, #0
 800494c:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 800494e:	4b89      	ldr	r3, [pc, #548]	; (8004b74 <HAL_GPIO_Init+0x234>)
 8004950:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8004952:	e194      	b.n	8004c7e <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8004954:	683b      	ldr	r3, [r7, #0]
 8004956:	681a      	ldr	r2, [r3, #0]
 8004958:	2101      	movs	r1, #1
 800495a:	69fb      	ldr	r3, [r7, #28]
 800495c:	fa01 f303 	lsl.w	r3, r1, r3
 8004960:	4013      	ands	r3, r2
 8004962:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8004964:	693b      	ldr	r3, [r7, #16]
 8004966:	2b00      	cmp	r3, #0
 8004968:	f000 8186 	beq.w	8004c78 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800496c:	683b      	ldr	r3, [r7, #0]
 800496e:	685b      	ldr	r3, [r3, #4]
 8004970:	2b01      	cmp	r3, #1
 8004972:	d00b      	beq.n	800498c <HAL_GPIO_Init+0x4c>
 8004974:	683b      	ldr	r3, [r7, #0]
 8004976:	685b      	ldr	r3, [r3, #4]
 8004978:	2b02      	cmp	r3, #2
 800497a:	d007      	beq.n	800498c <HAL_GPIO_Init+0x4c>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800497c:	683b      	ldr	r3, [r7, #0]
 800497e:	685b      	ldr	r3, [r3, #4]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8004980:	2b11      	cmp	r3, #17
 8004982:	d003      	beq.n	800498c <HAL_GPIO_Init+0x4c>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8004984:	683b      	ldr	r3, [r7, #0]
 8004986:	685b      	ldr	r3, [r3, #4]
 8004988:	2b12      	cmp	r3, #18
 800498a:	d130      	bne.n	80049ee <HAL_GPIO_Init+0xae>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	689b      	ldr	r3, [r3, #8]
 8004990:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8004992:	69fb      	ldr	r3, [r7, #28]
 8004994:	005b      	lsls	r3, r3, #1
 8004996:	2203      	movs	r2, #3
 8004998:	fa02 f303 	lsl.w	r3, r2, r3
 800499c:	43db      	mvns	r3, r3
 800499e:	69ba      	ldr	r2, [r7, #24]
 80049a0:	4013      	ands	r3, r2
 80049a2:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80049a4:	683b      	ldr	r3, [r7, #0]
 80049a6:	68da      	ldr	r2, [r3, #12]
 80049a8:	69fb      	ldr	r3, [r7, #28]
 80049aa:	005b      	lsls	r3, r3, #1
 80049ac:	fa02 f303 	lsl.w	r3, r2, r3
 80049b0:	69ba      	ldr	r2, [r7, #24]
 80049b2:	4313      	orrs	r3, r2
 80049b4:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	69ba      	ldr	r2, [r7, #24]
 80049ba:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	685b      	ldr	r3, [r3, #4]
 80049c0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80049c2:	2201      	movs	r2, #1
 80049c4:	69fb      	ldr	r3, [r7, #28]
 80049c6:	fa02 f303 	lsl.w	r3, r2, r3
 80049ca:	43db      	mvns	r3, r3
 80049cc:	69ba      	ldr	r2, [r7, #24]
 80049ce:	4013      	ands	r3, r2
 80049d0:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 80049d2:	683b      	ldr	r3, [r7, #0]
 80049d4:	685b      	ldr	r3, [r3, #4]
 80049d6:	091b      	lsrs	r3, r3, #4
 80049d8:	f003 0201 	and.w	r2, r3, #1
 80049dc:	69fb      	ldr	r3, [r7, #28]
 80049de:	fa02 f303 	lsl.w	r3, r2, r3
 80049e2:	69ba      	ldr	r2, [r7, #24]
 80049e4:	4313      	orrs	r3, r2
 80049e6:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	69ba      	ldr	r2, [r7, #24]
 80049ec:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	68db      	ldr	r3, [r3, #12]
 80049f2:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80049f4:	69fb      	ldr	r3, [r7, #28]
 80049f6:	005b      	lsls	r3, r3, #1
 80049f8:	2203      	movs	r2, #3
 80049fa:	fa02 f303 	lsl.w	r3, r2, r3
 80049fe:	43db      	mvns	r3, r3
 8004a00:	69ba      	ldr	r2, [r7, #24]
 8004a02:	4013      	ands	r3, r2
 8004a04:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004a06:	683b      	ldr	r3, [r7, #0]
 8004a08:	689a      	ldr	r2, [r3, #8]
 8004a0a:	69fb      	ldr	r3, [r7, #28]
 8004a0c:	005b      	lsls	r3, r3, #1
 8004a0e:	fa02 f303 	lsl.w	r3, r2, r3
 8004a12:	69ba      	ldr	r2, [r7, #24]
 8004a14:	4313      	orrs	r3, r2
 8004a16:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	69ba      	ldr	r2, [r7, #24]
 8004a1c:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8004a1e:	683b      	ldr	r3, [r7, #0]
 8004a20:	685b      	ldr	r3, [r3, #4]
 8004a22:	2b02      	cmp	r3, #2
 8004a24:	d003      	beq.n	8004a2e <HAL_GPIO_Init+0xee>
 8004a26:	683b      	ldr	r3, [r7, #0]
 8004a28:	685b      	ldr	r3, [r3, #4]
 8004a2a:	2b12      	cmp	r3, #18
 8004a2c:	d123      	bne.n	8004a76 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8004a2e:	69fb      	ldr	r3, [r7, #28]
 8004a30:	08da      	lsrs	r2, r3, #3
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	3208      	adds	r2, #8
 8004a36:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004a3a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8004a3c:	69fb      	ldr	r3, [r7, #28]
 8004a3e:	f003 0307 	and.w	r3, r3, #7
 8004a42:	009b      	lsls	r3, r3, #2
 8004a44:	220f      	movs	r2, #15
 8004a46:	fa02 f303 	lsl.w	r3, r2, r3
 8004a4a:	43db      	mvns	r3, r3
 8004a4c:	69ba      	ldr	r2, [r7, #24]
 8004a4e:	4013      	ands	r3, r2
 8004a50:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8004a52:	683b      	ldr	r3, [r7, #0]
 8004a54:	691a      	ldr	r2, [r3, #16]
 8004a56:	69fb      	ldr	r3, [r7, #28]
 8004a58:	f003 0307 	and.w	r3, r3, #7
 8004a5c:	009b      	lsls	r3, r3, #2
 8004a5e:	fa02 f303 	lsl.w	r3, r2, r3
 8004a62:	69ba      	ldr	r2, [r7, #24]
 8004a64:	4313      	orrs	r3, r2
 8004a66:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8004a68:	69fb      	ldr	r3, [r7, #28]
 8004a6a:	08da      	lsrs	r2, r3, #3
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	3208      	adds	r2, #8
 8004a70:	69b9      	ldr	r1, [r7, #24]
 8004a72:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	681b      	ldr	r3, [r3, #0]
 8004a7a:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8004a7c:	69fb      	ldr	r3, [r7, #28]
 8004a7e:	005b      	lsls	r3, r3, #1
 8004a80:	2203      	movs	r2, #3
 8004a82:	fa02 f303 	lsl.w	r3, r2, r3
 8004a86:	43db      	mvns	r3, r3
 8004a88:	69ba      	ldr	r2, [r7, #24]
 8004a8a:	4013      	ands	r3, r2
 8004a8c:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8004a8e:	683b      	ldr	r3, [r7, #0]
 8004a90:	685b      	ldr	r3, [r3, #4]
 8004a92:	f003 0203 	and.w	r2, r3, #3
 8004a96:	69fb      	ldr	r3, [r7, #28]
 8004a98:	005b      	lsls	r3, r3, #1
 8004a9a:	fa02 f303 	lsl.w	r3, r2, r3
 8004a9e:	69ba      	ldr	r2, [r7, #24]
 8004aa0:	4313      	orrs	r3, r2
 8004aa2:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	69ba      	ldr	r2, [r7, #24]
 8004aa8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8004aaa:	683b      	ldr	r3, [r7, #0]
 8004aac:	685b      	ldr	r3, [r3, #4]
 8004aae:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004ab2:	2b00      	cmp	r3, #0
 8004ab4:	f000 80e0 	beq.w	8004c78 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004ab8:	4b2f      	ldr	r3, [pc, #188]	; (8004b78 <HAL_GPIO_Init+0x238>)
 8004aba:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8004abe:	4a2e      	ldr	r2, [pc, #184]	; (8004b78 <HAL_GPIO_Init+0x238>)
 8004ac0:	f043 0302 	orr.w	r3, r3, #2
 8004ac4:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8004ac8:	4b2b      	ldr	r3, [pc, #172]	; (8004b78 <HAL_GPIO_Init+0x238>)
 8004aca:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8004ace:	f003 0302 	and.w	r3, r3, #2
 8004ad2:	60fb      	str	r3, [r7, #12]
 8004ad4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8004ad6:	4a29      	ldr	r2, [pc, #164]	; (8004b7c <HAL_GPIO_Init+0x23c>)
 8004ad8:	69fb      	ldr	r3, [r7, #28]
 8004ada:	089b      	lsrs	r3, r3, #2
 8004adc:	3302      	adds	r3, #2
 8004ade:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004ae2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8004ae4:	69fb      	ldr	r3, [r7, #28]
 8004ae6:	f003 0303 	and.w	r3, r3, #3
 8004aea:	009b      	lsls	r3, r3, #2
 8004aec:	220f      	movs	r2, #15
 8004aee:	fa02 f303 	lsl.w	r3, r2, r3
 8004af2:	43db      	mvns	r3, r3
 8004af4:	69ba      	ldr	r2, [r7, #24]
 8004af6:	4013      	ands	r3, r2
 8004af8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	4a20      	ldr	r2, [pc, #128]	; (8004b80 <HAL_GPIO_Init+0x240>)
 8004afe:	4293      	cmp	r3, r2
 8004b00:	d052      	beq.n	8004ba8 <HAL_GPIO_Init+0x268>
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	4a1f      	ldr	r2, [pc, #124]	; (8004b84 <HAL_GPIO_Init+0x244>)
 8004b06:	4293      	cmp	r3, r2
 8004b08:	d031      	beq.n	8004b6e <HAL_GPIO_Init+0x22e>
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	4a1e      	ldr	r2, [pc, #120]	; (8004b88 <HAL_GPIO_Init+0x248>)
 8004b0e:	4293      	cmp	r3, r2
 8004b10:	d02b      	beq.n	8004b6a <HAL_GPIO_Init+0x22a>
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	4a1d      	ldr	r2, [pc, #116]	; (8004b8c <HAL_GPIO_Init+0x24c>)
 8004b16:	4293      	cmp	r3, r2
 8004b18:	d025      	beq.n	8004b66 <HAL_GPIO_Init+0x226>
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	4a1c      	ldr	r2, [pc, #112]	; (8004b90 <HAL_GPIO_Init+0x250>)
 8004b1e:	4293      	cmp	r3, r2
 8004b20:	d01f      	beq.n	8004b62 <HAL_GPIO_Init+0x222>
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	4a1b      	ldr	r2, [pc, #108]	; (8004b94 <HAL_GPIO_Init+0x254>)
 8004b26:	4293      	cmp	r3, r2
 8004b28:	d019      	beq.n	8004b5e <HAL_GPIO_Init+0x21e>
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	4a1a      	ldr	r2, [pc, #104]	; (8004b98 <HAL_GPIO_Init+0x258>)
 8004b2e:	4293      	cmp	r3, r2
 8004b30:	d013      	beq.n	8004b5a <HAL_GPIO_Init+0x21a>
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	4a19      	ldr	r2, [pc, #100]	; (8004b9c <HAL_GPIO_Init+0x25c>)
 8004b36:	4293      	cmp	r3, r2
 8004b38:	d00d      	beq.n	8004b56 <HAL_GPIO_Init+0x216>
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	4a18      	ldr	r2, [pc, #96]	; (8004ba0 <HAL_GPIO_Init+0x260>)
 8004b3e:	4293      	cmp	r3, r2
 8004b40:	d007      	beq.n	8004b52 <HAL_GPIO_Init+0x212>
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	4a17      	ldr	r2, [pc, #92]	; (8004ba4 <HAL_GPIO_Init+0x264>)
 8004b46:	4293      	cmp	r3, r2
 8004b48:	d101      	bne.n	8004b4e <HAL_GPIO_Init+0x20e>
 8004b4a:	2309      	movs	r3, #9
 8004b4c:	e02d      	b.n	8004baa <HAL_GPIO_Init+0x26a>
 8004b4e:	230a      	movs	r3, #10
 8004b50:	e02b      	b.n	8004baa <HAL_GPIO_Init+0x26a>
 8004b52:	2308      	movs	r3, #8
 8004b54:	e029      	b.n	8004baa <HAL_GPIO_Init+0x26a>
 8004b56:	2307      	movs	r3, #7
 8004b58:	e027      	b.n	8004baa <HAL_GPIO_Init+0x26a>
 8004b5a:	2306      	movs	r3, #6
 8004b5c:	e025      	b.n	8004baa <HAL_GPIO_Init+0x26a>
 8004b5e:	2305      	movs	r3, #5
 8004b60:	e023      	b.n	8004baa <HAL_GPIO_Init+0x26a>
 8004b62:	2304      	movs	r3, #4
 8004b64:	e021      	b.n	8004baa <HAL_GPIO_Init+0x26a>
 8004b66:	2303      	movs	r3, #3
 8004b68:	e01f      	b.n	8004baa <HAL_GPIO_Init+0x26a>
 8004b6a:	2302      	movs	r3, #2
 8004b6c:	e01d      	b.n	8004baa <HAL_GPIO_Init+0x26a>
 8004b6e:	2301      	movs	r3, #1
 8004b70:	e01b      	b.n	8004baa <HAL_GPIO_Init+0x26a>
 8004b72:	bf00      	nop
 8004b74:	58000080 	.word	0x58000080
 8004b78:	58024400 	.word	0x58024400
 8004b7c:	58000400 	.word	0x58000400
 8004b80:	58020000 	.word	0x58020000
 8004b84:	58020400 	.word	0x58020400
 8004b88:	58020800 	.word	0x58020800
 8004b8c:	58020c00 	.word	0x58020c00
 8004b90:	58021000 	.word	0x58021000
 8004b94:	58021400 	.word	0x58021400
 8004b98:	58021800 	.word	0x58021800
 8004b9c:	58021c00 	.word	0x58021c00
 8004ba0:	58022000 	.word	0x58022000
 8004ba4:	58022400 	.word	0x58022400
 8004ba8:	2300      	movs	r3, #0
 8004baa:	69fa      	ldr	r2, [r7, #28]
 8004bac:	f002 0203 	and.w	r2, r2, #3
 8004bb0:	0092      	lsls	r2, r2, #2
 8004bb2:	4093      	lsls	r3, r2
 8004bb4:	69ba      	ldr	r2, [r7, #24]
 8004bb6:	4313      	orrs	r3, r2
 8004bb8:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8004bba:	4938      	ldr	r1, [pc, #224]	; (8004c9c <HAL_GPIO_Init+0x35c>)
 8004bbc:	69fb      	ldr	r3, [r7, #28]
 8004bbe:	089b      	lsrs	r3, r3, #2
 8004bc0:	3302      	adds	r3, #2
 8004bc2:	69ba      	ldr	r2, [r7, #24]
 8004bc4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8004bc8:	697b      	ldr	r3, [r7, #20]
 8004bca:	681b      	ldr	r3, [r3, #0]
 8004bcc:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8004bce:	693b      	ldr	r3, [r7, #16]
 8004bd0:	43db      	mvns	r3, r3
 8004bd2:	69ba      	ldr	r2, [r7, #24]
 8004bd4:	4013      	ands	r3, r2
 8004bd6:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8004bd8:	683b      	ldr	r3, [r7, #0]
 8004bda:	685b      	ldr	r3, [r3, #4]
 8004bdc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004be0:	2b00      	cmp	r3, #0
 8004be2:	d003      	beq.n	8004bec <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8004be4:	69ba      	ldr	r2, [r7, #24]
 8004be6:	693b      	ldr	r3, [r7, #16]
 8004be8:	4313      	orrs	r3, r2
 8004bea:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8004bec:	697b      	ldr	r3, [r7, #20]
 8004bee:	69ba      	ldr	r2, [r7, #24]
 8004bf0:	601a      	str	r2, [r3, #0]

        temp = EXTI_CurrentCPU->EMR1;
 8004bf2:	697b      	ldr	r3, [r7, #20]
 8004bf4:	685b      	ldr	r3, [r3, #4]
 8004bf6:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8004bf8:	693b      	ldr	r3, [r7, #16]
 8004bfa:	43db      	mvns	r3, r3
 8004bfc:	69ba      	ldr	r2, [r7, #24]
 8004bfe:	4013      	ands	r3, r2
 8004c00:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8004c02:	683b      	ldr	r3, [r7, #0]
 8004c04:	685b      	ldr	r3, [r3, #4]
 8004c06:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004c0a:	2b00      	cmp	r3, #0
 8004c0c:	d003      	beq.n	8004c16 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8004c0e:	69ba      	ldr	r2, [r7, #24]
 8004c10:	693b      	ldr	r3, [r7, #16]
 8004c12:	4313      	orrs	r3, r2
 8004c14:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8004c16:	697b      	ldr	r3, [r7, #20]
 8004c18:	69ba      	ldr	r2, [r7, #24]
 8004c1a:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8004c1c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004c20:	681b      	ldr	r3, [r3, #0]
 8004c22:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8004c24:	693b      	ldr	r3, [r7, #16]
 8004c26:	43db      	mvns	r3, r3
 8004c28:	69ba      	ldr	r2, [r7, #24]
 8004c2a:	4013      	ands	r3, r2
 8004c2c:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8004c2e:	683b      	ldr	r3, [r7, #0]
 8004c30:	685b      	ldr	r3, [r3, #4]
 8004c32:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004c36:	2b00      	cmp	r3, #0
 8004c38:	d003      	beq.n	8004c42 <HAL_GPIO_Init+0x302>
        {
          temp |= iocurrent;
 8004c3a:	69ba      	ldr	r2, [r7, #24]
 8004c3c:	693b      	ldr	r3, [r7, #16]
 8004c3e:	4313      	orrs	r3, r2
 8004c40:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8004c42:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004c46:	69bb      	ldr	r3, [r7, #24]
 8004c48:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8004c4a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004c4e:	685b      	ldr	r3, [r3, #4]
 8004c50:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8004c52:	693b      	ldr	r3, [r7, #16]
 8004c54:	43db      	mvns	r3, r3
 8004c56:	69ba      	ldr	r2, [r7, #24]
 8004c58:	4013      	ands	r3, r2
 8004c5a:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8004c5c:	683b      	ldr	r3, [r7, #0]
 8004c5e:	685b      	ldr	r3, [r3, #4]
 8004c60:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004c64:	2b00      	cmp	r3, #0
 8004c66:	d003      	beq.n	8004c70 <HAL_GPIO_Init+0x330>
        {
          temp |= iocurrent;
 8004c68:	69ba      	ldr	r2, [r7, #24]
 8004c6a:	693b      	ldr	r3, [r7, #16]
 8004c6c:	4313      	orrs	r3, r2
 8004c6e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8004c70:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004c74:	69bb      	ldr	r3, [r7, #24]
 8004c76:	6053      	str	r3, [r2, #4]
      }
    }

    position++;
 8004c78:	69fb      	ldr	r3, [r7, #28]
 8004c7a:	3301      	adds	r3, #1
 8004c7c:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8004c7e:	683b      	ldr	r3, [r7, #0]
 8004c80:	681a      	ldr	r2, [r3, #0]
 8004c82:	69fb      	ldr	r3, [r7, #28]
 8004c84:	fa22 f303 	lsr.w	r3, r2, r3
 8004c88:	2b00      	cmp	r3, #0
 8004c8a:	f47f ae63 	bne.w	8004954 <HAL_GPIO_Init+0x14>
  }
}
 8004c8e:	bf00      	nop
 8004c90:	bf00      	nop
 8004c92:	3724      	adds	r7, #36	; 0x24
 8004c94:	46bd      	mov	sp, r7
 8004c96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c9a:	4770      	bx	lr
 8004c9c:	58000400 	.word	0x58000400

08004ca0 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8004ca0:	b480      	push	{r7}
 8004ca2:	b085      	sub	sp, #20
 8004ca4:	af00      	add	r7, sp, #0
 8004ca6:	6078      	str	r0, [r7, #4]
 8004ca8:	460b      	mov	r3, r1
 8004caa:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	691a      	ldr	r2, [r3, #16]
 8004cb0:	887b      	ldrh	r3, [r7, #2]
 8004cb2:	4013      	ands	r3, r2
 8004cb4:	2b00      	cmp	r3, #0
 8004cb6:	d002      	beq.n	8004cbe <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8004cb8:	2301      	movs	r3, #1
 8004cba:	73fb      	strb	r3, [r7, #15]
 8004cbc:	e001      	b.n	8004cc2 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8004cbe:	2300      	movs	r3, #0
 8004cc0:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8004cc2:	7bfb      	ldrb	r3, [r7, #15]
}
 8004cc4:	4618      	mov	r0, r3
 8004cc6:	3714      	adds	r7, #20
 8004cc8:	46bd      	mov	sp, r7
 8004cca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cce:	4770      	bx	lr

08004cd0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004cd0:	b480      	push	{r7}
 8004cd2:	b083      	sub	sp, #12
 8004cd4:	af00      	add	r7, sp, #0
 8004cd6:	6078      	str	r0, [r7, #4]
 8004cd8:	460b      	mov	r3, r1
 8004cda:	807b      	strh	r3, [r7, #2]
 8004cdc:	4613      	mov	r3, r2
 8004cde:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8004ce0:	787b      	ldrb	r3, [r7, #1]
 8004ce2:	2b00      	cmp	r3, #0
 8004ce4:	d003      	beq.n	8004cee <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8004ce6:	887a      	ldrh	r2, [r7, #2]
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8004cec:	e003      	b.n	8004cf6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8004cee:	887b      	ldrh	r3, [r7, #2]
 8004cf0:	041a      	lsls	r2, r3, #16
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	619a      	str	r2, [r3, #24]
}
 8004cf6:	bf00      	nop
 8004cf8:	370c      	adds	r7, #12
 8004cfa:	46bd      	mov	sp, r7
 8004cfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d00:	4770      	bx	lr
	...

08004d04 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8004d04:	b580      	push	{r7, lr}
 8004d06:	b082      	sub	sp, #8
 8004d08:	af00      	add	r7, sp, #0
 8004d0a:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	2b00      	cmp	r3, #0
 8004d10:	d101      	bne.n	8004d16 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8004d12:	2301      	movs	r3, #1
 8004d14:	e07f      	b.n	8004e16 <HAL_I2C_Init+0x112>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004d1c:	b2db      	uxtb	r3, r3
 8004d1e:	2b00      	cmp	r3, #0
 8004d20:	d106      	bne.n	8004d30 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	2200      	movs	r2, #0
 8004d26:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8004d2a:	6878      	ldr	r0, [r7, #4]
 8004d2c:	f7fc fc04 	bl	8001538 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	2224      	movs	r2, #36	; 0x24
 8004d34:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	681b      	ldr	r3, [r3, #0]
 8004d3c:	681a      	ldr	r2, [r3, #0]
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	681b      	ldr	r3, [r3, #0]
 8004d42:	f022 0201 	bic.w	r2, r2, #1
 8004d46:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	685a      	ldr	r2, [r3, #4]
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	681b      	ldr	r3, [r3, #0]
 8004d50:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8004d54:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	681b      	ldr	r3, [r3, #0]
 8004d5a:	689a      	ldr	r2, [r3, #8]
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	681b      	ldr	r3, [r3, #0]
 8004d60:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8004d64:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	68db      	ldr	r3, [r3, #12]
 8004d6a:	2b01      	cmp	r3, #1
 8004d6c:	d107      	bne.n	8004d7e <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	689a      	ldr	r2, [r3, #8]
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	681b      	ldr	r3, [r3, #0]
 8004d76:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004d7a:	609a      	str	r2, [r3, #8]
 8004d7c:	e006      	b.n	8004d8c <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	689a      	ldr	r2, [r3, #8]
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	681b      	ldr	r3, [r3, #0]
 8004d86:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8004d8a:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	68db      	ldr	r3, [r3, #12]
 8004d90:	2b02      	cmp	r3, #2
 8004d92:	d104      	bne.n	8004d9e <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	681b      	ldr	r3, [r3, #0]
 8004d98:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004d9c:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	681b      	ldr	r3, [r3, #0]
 8004da2:	6859      	ldr	r1, [r3, #4]
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	681a      	ldr	r2, [r3, #0]
 8004da8:	4b1d      	ldr	r3, [pc, #116]	; (8004e20 <HAL_I2C_Init+0x11c>)
 8004daa:	430b      	orrs	r3, r1
 8004dac:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	681b      	ldr	r3, [r3, #0]
 8004db2:	68da      	ldr	r2, [r3, #12]
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	681b      	ldr	r3, [r3, #0]
 8004db8:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8004dbc:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	691a      	ldr	r2, [r3, #16]
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	695b      	ldr	r3, [r3, #20]
 8004dc6:	ea42 0103 	orr.w	r1, r2, r3
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	699b      	ldr	r3, [r3, #24]
 8004dce:	021a      	lsls	r2, r3, #8
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	681b      	ldr	r3, [r3, #0]
 8004dd4:	430a      	orrs	r2, r1
 8004dd6:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	69d9      	ldr	r1, [r3, #28]
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	6a1a      	ldr	r2, [r3, #32]
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	681b      	ldr	r3, [r3, #0]
 8004de4:	430a      	orrs	r2, r1
 8004de6:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	681b      	ldr	r3, [r3, #0]
 8004dec:	681a      	ldr	r2, [r3, #0]
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	681b      	ldr	r3, [r3, #0]
 8004df2:	f042 0201 	orr.w	r2, r2, #1
 8004df6:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	2200      	movs	r2, #0
 8004dfc:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	2220      	movs	r2, #32
 8004e02:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	2200      	movs	r2, #0
 8004e0a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	2200      	movs	r2, #0
 8004e10:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8004e14:	2300      	movs	r3, #0
}
 8004e16:	4618      	mov	r0, r3
 8004e18:	3708      	adds	r7, #8
 8004e1a:	46bd      	mov	sp, r7
 8004e1c:	bd80      	pop	{r7, pc}
 8004e1e:	bf00      	nop
 8004e20:	02008000 	.word	0x02008000

08004e24 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size,
                                          uint32_t Timeout)
{
 8004e24:	b580      	push	{r7, lr}
 8004e26:	b088      	sub	sp, #32
 8004e28:	af02      	add	r7, sp, #8
 8004e2a:	60f8      	str	r0, [r7, #12]
 8004e2c:	607a      	str	r2, [r7, #4]
 8004e2e:	461a      	mov	r2, r3
 8004e30:	460b      	mov	r3, r1
 8004e32:	817b      	strh	r3, [r7, #10]
 8004e34:	4613      	mov	r3, r2
 8004e36:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004e38:	68fb      	ldr	r3, [r7, #12]
 8004e3a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004e3e:	b2db      	uxtb	r3, r3
 8004e40:	2b20      	cmp	r3, #32
 8004e42:	f040 80da 	bne.w	8004ffa <HAL_I2C_Master_Transmit+0x1d6>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004e46:	68fb      	ldr	r3, [r7, #12]
 8004e48:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004e4c:	2b01      	cmp	r3, #1
 8004e4e:	d101      	bne.n	8004e54 <HAL_I2C_Master_Transmit+0x30>
 8004e50:	2302      	movs	r3, #2
 8004e52:	e0d3      	b.n	8004ffc <HAL_I2C_Master_Transmit+0x1d8>
 8004e54:	68fb      	ldr	r3, [r7, #12]
 8004e56:	2201      	movs	r2, #1
 8004e58:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8004e5c:	f7fd faa8 	bl	80023b0 <HAL_GetTick>
 8004e60:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8004e62:	697b      	ldr	r3, [r7, #20]
 8004e64:	9300      	str	r3, [sp, #0]
 8004e66:	2319      	movs	r3, #25
 8004e68:	2201      	movs	r2, #1
 8004e6a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8004e6e:	68f8      	ldr	r0, [r7, #12]
 8004e70:	f000 f9e6 	bl	8005240 <I2C_WaitOnFlagUntilTimeout>
 8004e74:	4603      	mov	r3, r0
 8004e76:	2b00      	cmp	r3, #0
 8004e78:	d001      	beq.n	8004e7e <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 8004e7a:	2301      	movs	r3, #1
 8004e7c:	e0be      	b.n	8004ffc <HAL_I2C_Master_Transmit+0x1d8>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8004e7e:	68fb      	ldr	r3, [r7, #12]
 8004e80:	2221      	movs	r2, #33	; 0x21
 8004e82:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8004e86:	68fb      	ldr	r3, [r7, #12]
 8004e88:	2210      	movs	r2, #16
 8004e8a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004e8e:	68fb      	ldr	r3, [r7, #12]
 8004e90:	2200      	movs	r2, #0
 8004e92:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8004e94:	68fb      	ldr	r3, [r7, #12]
 8004e96:	687a      	ldr	r2, [r7, #4]
 8004e98:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8004e9a:	68fb      	ldr	r3, [r7, #12]
 8004e9c:	893a      	ldrh	r2, [r7, #8]
 8004e9e:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8004ea0:	68fb      	ldr	r3, [r7, #12]
 8004ea2:	2200      	movs	r2, #0
 8004ea4:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004ea6:	68fb      	ldr	r3, [r7, #12]
 8004ea8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004eaa:	b29b      	uxth	r3, r3
 8004eac:	2bff      	cmp	r3, #255	; 0xff
 8004eae:	d90e      	bls.n	8004ece <HAL_I2C_Master_Transmit+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8004eb0:	68fb      	ldr	r3, [r7, #12]
 8004eb2:	22ff      	movs	r2, #255	; 0xff
 8004eb4:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8004eb6:	68fb      	ldr	r3, [r7, #12]
 8004eb8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004eba:	b2da      	uxtb	r2, r3
 8004ebc:	8979      	ldrh	r1, [r7, #10]
 8004ebe:	4b51      	ldr	r3, [pc, #324]	; (8005004 <HAL_I2C_Master_Transmit+0x1e0>)
 8004ec0:	9300      	str	r3, [sp, #0]
 8004ec2:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8004ec6:	68f8      	ldr	r0, [r7, #12]
 8004ec8:	f000 fb48 	bl	800555c <I2C_TransferConfig>
 8004ecc:	e06c      	b.n	8004fa8 <HAL_I2C_Master_Transmit+0x184>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8004ece:	68fb      	ldr	r3, [r7, #12]
 8004ed0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004ed2:	b29a      	uxth	r2, r3
 8004ed4:	68fb      	ldr	r3, [r7, #12]
 8004ed6:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_WRITE);
 8004ed8:	68fb      	ldr	r3, [r7, #12]
 8004eda:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004edc:	b2da      	uxtb	r2, r3
 8004ede:	8979      	ldrh	r1, [r7, #10]
 8004ee0:	4b48      	ldr	r3, [pc, #288]	; (8005004 <HAL_I2C_Master_Transmit+0x1e0>)
 8004ee2:	9300      	str	r3, [sp, #0]
 8004ee4:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8004ee8:	68f8      	ldr	r0, [r7, #12]
 8004eea:	f000 fb37 	bl	800555c <I2C_TransferConfig>
    }

    while (hi2c->XferCount > 0U)
 8004eee:	e05b      	b.n	8004fa8 <HAL_I2C_Master_Transmit+0x184>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004ef0:	697a      	ldr	r2, [r7, #20]
 8004ef2:	6a39      	ldr	r1, [r7, #32]
 8004ef4:	68f8      	ldr	r0, [r7, #12]
 8004ef6:	f000 f9e3 	bl	80052c0 <I2C_WaitOnTXISFlagUntilTimeout>
 8004efa:	4603      	mov	r3, r0
 8004efc:	2b00      	cmp	r3, #0
 8004efe:	d001      	beq.n	8004f04 <HAL_I2C_Master_Transmit+0xe0>
      {
        return HAL_ERROR;
 8004f00:	2301      	movs	r3, #1
 8004f02:	e07b      	b.n	8004ffc <HAL_I2C_Master_Transmit+0x1d8>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8004f04:	68fb      	ldr	r3, [r7, #12]
 8004f06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f08:	781a      	ldrb	r2, [r3, #0]
 8004f0a:	68fb      	ldr	r3, [r7, #12]
 8004f0c:	681b      	ldr	r3, [r3, #0]
 8004f0e:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004f10:	68fb      	ldr	r3, [r7, #12]
 8004f12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f14:	1c5a      	adds	r2, r3, #1
 8004f16:	68fb      	ldr	r3, [r7, #12]
 8004f18:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8004f1a:	68fb      	ldr	r3, [r7, #12]
 8004f1c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004f1e:	b29b      	uxth	r3, r3
 8004f20:	3b01      	subs	r3, #1
 8004f22:	b29a      	uxth	r2, r3
 8004f24:	68fb      	ldr	r3, [r7, #12]
 8004f26:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8004f28:	68fb      	ldr	r3, [r7, #12]
 8004f2a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004f2c:	3b01      	subs	r3, #1
 8004f2e:	b29a      	uxth	r2, r3
 8004f30:	68fb      	ldr	r3, [r7, #12]
 8004f32:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8004f34:	68fb      	ldr	r3, [r7, #12]
 8004f36:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004f38:	b29b      	uxth	r3, r3
 8004f3a:	2b00      	cmp	r3, #0
 8004f3c:	d034      	beq.n	8004fa8 <HAL_I2C_Master_Transmit+0x184>
 8004f3e:	68fb      	ldr	r3, [r7, #12]
 8004f40:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004f42:	2b00      	cmp	r3, #0
 8004f44:	d130      	bne.n	8004fa8 <HAL_I2C_Master_Transmit+0x184>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8004f46:	697b      	ldr	r3, [r7, #20]
 8004f48:	9300      	str	r3, [sp, #0]
 8004f4a:	6a3b      	ldr	r3, [r7, #32]
 8004f4c:	2200      	movs	r2, #0
 8004f4e:	2180      	movs	r1, #128	; 0x80
 8004f50:	68f8      	ldr	r0, [r7, #12]
 8004f52:	f000 f975 	bl	8005240 <I2C_WaitOnFlagUntilTimeout>
 8004f56:	4603      	mov	r3, r0
 8004f58:	2b00      	cmp	r3, #0
 8004f5a:	d001      	beq.n	8004f60 <HAL_I2C_Master_Transmit+0x13c>
        {
          return HAL_ERROR;
 8004f5c:	2301      	movs	r3, #1
 8004f5e:	e04d      	b.n	8004ffc <HAL_I2C_Master_Transmit+0x1d8>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004f60:	68fb      	ldr	r3, [r7, #12]
 8004f62:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004f64:	b29b      	uxth	r3, r3
 8004f66:	2bff      	cmp	r3, #255	; 0xff
 8004f68:	d90e      	bls.n	8004f88 <HAL_I2C_Master_Transmit+0x164>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8004f6a:	68fb      	ldr	r3, [r7, #12]
 8004f6c:	22ff      	movs	r2, #255	; 0xff
 8004f6e:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8004f70:	68fb      	ldr	r3, [r7, #12]
 8004f72:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004f74:	b2da      	uxtb	r2, r3
 8004f76:	8979      	ldrh	r1, [r7, #10]
 8004f78:	2300      	movs	r3, #0
 8004f7a:	9300      	str	r3, [sp, #0]
 8004f7c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8004f80:	68f8      	ldr	r0, [r7, #12]
 8004f82:	f000 faeb 	bl	800555c <I2C_TransferConfig>
 8004f86:	e00f      	b.n	8004fa8 <HAL_I2C_Master_Transmit+0x184>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8004f88:	68fb      	ldr	r3, [r7, #12]
 8004f8a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004f8c:	b29a      	uxth	r2, r3
 8004f8e:	68fb      	ldr	r3, [r7, #12]
 8004f90:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8004f92:	68fb      	ldr	r3, [r7, #12]
 8004f94:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004f96:	b2da      	uxtb	r2, r3
 8004f98:	8979      	ldrh	r1, [r7, #10]
 8004f9a:	2300      	movs	r3, #0
 8004f9c:	9300      	str	r3, [sp, #0]
 8004f9e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8004fa2:	68f8      	ldr	r0, [r7, #12]
 8004fa4:	f000 fada 	bl	800555c <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8004fa8:	68fb      	ldr	r3, [r7, #12]
 8004faa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004fac:	b29b      	uxth	r3, r3
 8004fae:	2b00      	cmp	r3, #0
 8004fb0:	d19e      	bne.n	8004ef0 <HAL_I2C_Master_Transmit+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004fb2:	697a      	ldr	r2, [r7, #20]
 8004fb4:	6a39      	ldr	r1, [r7, #32]
 8004fb6:	68f8      	ldr	r0, [r7, #12]
 8004fb8:	f000 f9c2 	bl	8005340 <I2C_WaitOnSTOPFlagUntilTimeout>
 8004fbc:	4603      	mov	r3, r0
 8004fbe:	2b00      	cmp	r3, #0
 8004fc0:	d001      	beq.n	8004fc6 <HAL_I2C_Master_Transmit+0x1a2>
    {
      return HAL_ERROR;
 8004fc2:	2301      	movs	r3, #1
 8004fc4:	e01a      	b.n	8004ffc <HAL_I2C_Master_Transmit+0x1d8>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004fc6:	68fb      	ldr	r3, [r7, #12]
 8004fc8:	681b      	ldr	r3, [r3, #0]
 8004fca:	2220      	movs	r2, #32
 8004fcc:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8004fce:	68fb      	ldr	r3, [r7, #12]
 8004fd0:	681b      	ldr	r3, [r3, #0]
 8004fd2:	6859      	ldr	r1, [r3, #4]
 8004fd4:	68fb      	ldr	r3, [r7, #12]
 8004fd6:	681a      	ldr	r2, [r3, #0]
 8004fd8:	4b0b      	ldr	r3, [pc, #44]	; (8005008 <HAL_I2C_Master_Transmit+0x1e4>)
 8004fda:	400b      	ands	r3, r1
 8004fdc:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8004fde:	68fb      	ldr	r3, [r7, #12]
 8004fe0:	2220      	movs	r2, #32
 8004fe2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8004fe6:	68fb      	ldr	r3, [r7, #12]
 8004fe8:	2200      	movs	r2, #0
 8004fea:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004fee:	68fb      	ldr	r3, [r7, #12]
 8004ff0:	2200      	movs	r2, #0
 8004ff2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8004ff6:	2300      	movs	r3, #0
 8004ff8:	e000      	b.n	8004ffc <HAL_I2C_Master_Transmit+0x1d8>
  }
  else
  {
    return HAL_BUSY;
 8004ffa:	2302      	movs	r3, #2
  }
}
 8004ffc:	4618      	mov	r0, r3
 8004ffe:	3718      	adds	r7, #24
 8005000:	46bd      	mov	sp, r7
 8005002:	bd80      	pop	{r7, pc}
 8005004:	80002000 	.word	0x80002000
 8005008:	fe00e800 	.word	0xfe00e800

0800500c <HAL_I2C_Master_Receive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size,
                                         uint32_t Timeout)
{
 800500c:	b580      	push	{r7, lr}
 800500e:	b088      	sub	sp, #32
 8005010:	af02      	add	r7, sp, #8
 8005012:	60f8      	str	r0, [r7, #12]
 8005014:	607a      	str	r2, [r7, #4]
 8005016:	461a      	mov	r2, r3
 8005018:	460b      	mov	r3, r1
 800501a:	817b      	strh	r3, [r7, #10]
 800501c:	4613      	mov	r3, r2
 800501e:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005020:	68fb      	ldr	r3, [r7, #12]
 8005022:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005026:	b2db      	uxtb	r3, r3
 8005028:	2b20      	cmp	r3, #32
 800502a:	f040 80db 	bne.w	80051e4 <HAL_I2C_Master_Receive+0x1d8>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800502e:	68fb      	ldr	r3, [r7, #12]
 8005030:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005034:	2b01      	cmp	r3, #1
 8005036:	d101      	bne.n	800503c <HAL_I2C_Master_Receive+0x30>
 8005038:	2302      	movs	r3, #2
 800503a:	e0d4      	b.n	80051e6 <HAL_I2C_Master_Receive+0x1da>
 800503c:	68fb      	ldr	r3, [r7, #12]
 800503e:	2201      	movs	r2, #1
 8005040:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8005044:	f7fd f9b4 	bl	80023b0 <HAL_GetTick>
 8005048:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800504a:	697b      	ldr	r3, [r7, #20]
 800504c:	9300      	str	r3, [sp, #0]
 800504e:	2319      	movs	r3, #25
 8005050:	2201      	movs	r2, #1
 8005052:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8005056:	68f8      	ldr	r0, [r7, #12]
 8005058:	f000 f8f2 	bl	8005240 <I2C_WaitOnFlagUntilTimeout>
 800505c:	4603      	mov	r3, r0
 800505e:	2b00      	cmp	r3, #0
 8005060:	d001      	beq.n	8005066 <HAL_I2C_Master_Receive+0x5a>
    {
      return HAL_ERROR;
 8005062:	2301      	movs	r3, #1
 8005064:	e0bf      	b.n	80051e6 <HAL_I2C_Master_Receive+0x1da>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8005066:	68fb      	ldr	r3, [r7, #12]
 8005068:	2222      	movs	r2, #34	; 0x22
 800506a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 800506e:	68fb      	ldr	r3, [r7, #12]
 8005070:	2210      	movs	r2, #16
 8005072:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005076:	68fb      	ldr	r3, [r7, #12]
 8005078:	2200      	movs	r2, #0
 800507a:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800507c:	68fb      	ldr	r3, [r7, #12]
 800507e:	687a      	ldr	r2, [r7, #4]
 8005080:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8005082:	68fb      	ldr	r3, [r7, #12]
 8005084:	893a      	ldrh	r2, [r7, #8]
 8005086:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8005088:	68fb      	ldr	r3, [r7, #12]
 800508a:	2200      	movs	r2, #0
 800508c:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800508e:	68fb      	ldr	r3, [r7, #12]
 8005090:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005092:	b29b      	uxth	r3, r3
 8005094:	2bff      	cmp	r3, #255	; 0xff
 8005096:	d90e      	bls.n	80050b6 <HAL_I2C_Master_Receive+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8005098:	68fb      	ldr	r3, [r7, #12]
 800509a:	22ff      	movs	r2, #255	; 0xff
 800509c:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_READ);
 800509e:	68fb      	ldr	r3, [r7, #12]
 80050a0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80050a2:	b2da      	uxtb	r2, r3
 80050a4:	8979      	ldrh	r1, [r7, #10]
 80050a6:	4b52      	ldr	r3, [pc, #328]	; (80051f0 <HAL_I2C_Master_Receive+0x1e4>)
 80050a8:	9300      	str	r3, [sp, #0]
 80050aa:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80050ae:	68f8      	ldr	r0, [r7, #12]
 80050b0:	f000 fa54 	bl	800555c <I2C_TransferConfig>
 80050b4:	e06d      	b.n	8005192 <HAL_I2C_Master_Receive+0x186>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80050b6:	68fb      	ldr	r3, [r7, #12]
 80050b8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80050ba:	b29a      	uxth	r2, r3
 80050bc:	68fb      	ldr	r3, [r7, #12]
 80050be:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_READ);
 80050c0:	68fb      	ldr	r3, [r7, #12]
 80050c2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80050c4:	b2da      	uxtb	r2, r3
 80050c6:	8979      	ldrh	r1, [r7, #10]
 80050c8:	4b49      	ldr	r3, [pc, #292]	; (80051f0 <HAL_I2C_Master_Receive+0x1e4>)
 80050ca:	9300      	str	r3, [sp, #0]
 80050cc:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80050d0:	68f8      	ldr	r0, [r7, #12]
 80050d2:	f000 fa43 	bl	800555c <I2C_TransferConfig>
    }

    while (hi2c->XferCount > 0U)
 80050d6:	e05c      	b.n	8005192 <HAL_I2C_Master_Receive+0x186>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80050d8:	697a      	ldr	r2, [r7, #20]
 80050da:	6a39      	ldr	r1, [r7, #32]
 80050dc:	68f8      	ldr	r0, [r7, #12]
 80050de:	f000 f96b 	bl	80053b8 <I2C_WaitOnRXNEFlagUntilTimeout>
 80050e2:	4603      	mov	r3, r0
 80050e4:	2b00      	cmp	r3, #0
 80050e6:	d001      	beq.n	80050ec <HAL_I2C_Master_Receive+0xe0>
      {
        return HAL_ERROR;
 80050e8:	2301      	movs	r3, #1
 80050ea:	e07c      	b.n	80051e6 <HAL_I2C_Master_Receive+0x1da>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80050ec:	68fb      	ldr	r3, [r7, #12]
 80050ee:	681b      	ldr	r3, [r3, #0]
 80050f0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80050f2:	68fb      	ldr	r3, [r7, #12]
 80050f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80050f6:	b2d2      	uxtb	r2, r2
 80050f8:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80050fa:	68fb      	ldr	r3, [r7, #12]
 80050fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80050fe:	1c5a      	adds	r2, r3, #1
 8005100:	68fb      	ldr	r3, [r7, #12]
 8005102:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8005104:	68fb      	ldr	r3, [r7, #12]
 8005106:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005108:	3b01      	subs	r3, #1
 800510a:	b29a      	uxth	r2, r3
 800510c:	68fb      	ldr	r3, [r7, #12]
 800510e:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8005110:	68fb      	ldr	r3, [r7, #12]
 8005112:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005114:	b29b      	uxth	r3, r3
 8005116:	3b01      	subs	r3, #1
 8005118:	b29a      	uxth	r2, r3
 800511a:	68fb      	ldr	r3, [r7, #12]
 800511c:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800511e:	68fb      	ldr	r3, [r7, #12]
 8005120:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005122:	b29b      	uxth	r3, r3
 8005124:	2b00      	cmp	r3, #0
 8005126:	d034      	beq.n	8005192 <HAL_I2C_Master_Receive+0x186>
 8005128:	68fb      	ldr	r3, [r7, #12]
 800512a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800512c:	2b00      	cmp	r3, #0
 800512e:	d130      	bne.n	8005192 <HAL_I2C_Master_Receive+0x186>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8005130:	697b      	ldr	r3, [r7, #20]
 8005132:	9300      	str	r3, [sp, #0]
 8005134:	6a3b      	ldr	r3, [r7, #32]
 8005136:	2200      	movs	r2, #0
 8005138:	2180      	movs	r1, #128	; 0x80
 800513a:	68f8      	ldr	r0, [r7, #12]
 800513c:	f000 f880 	bl	8005240 <I2C_WaitOnFlagUntilTimeout>
 8005140:	4603      	mov	r3, r0
 8005142:	2b00      	cmp	r3, #0
 8005144:	d001      	beq.n	800514a <HAL_I2C_Master_Receive+0x13e>
        {
          return HAL_ERROR;
 8005146:	2301      	movs	r3, #1
 8005148:	e04d      	b.n	80051e6 <HAL_I2C_Master_Receive+0x1da>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800514a:	68fb      	ldr	r3, [r7, #12]
 800514c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800514e:	b29b      	uxth	r3, r3
 8005150:	2bff      	cmp	r3, #255	; 0xff
 8005152:	d90e      	bls.n	8005172 <HAL_I2C_Master_Receive+0x166>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8005154:	68fb      	ldr	r3, [r7, #12]
 8005156:	22ff      	movs	r2, #255	; 0xff
 8005158:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 800515a:	68fb      	ldr	r3, [r7, #12]
 800515c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800515e:	b2da      	uxtb	r2, r3
 8005160:	8979      	ldrh	r1, [r7, #10]
 8005162:	2300      	movs	r3, #0
 8005164:	9300      	str	r3, [sp, #0]
 8005166:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800516a:	68f8      	ldr	r0, [r7, #12]
 800516c:	f000 f9f6 	bl	800555c <I2C_TransferConfig>
 8005170:	e00f      	b.n	8005192 <HAL_I2C_Master_Receive+0x186>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8005172:	68fb      	ldr	r3, [r7, #12]
 8005174:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005176:	b29a      	uxth	r2, r3
 8005178:	68fb      	ldr	r3, [r7, #12]
 800517a:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 800517c:	68fb      	ldr	r3, [r7, #12]
 800517e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005180:	b2da      	uxtb	r2, r3
 8005182:	8979      	ldrh	r1, [r7, #10]
 8005184:	2300      	movs	r3, #0
 8005186:	9300      	str	r3, [sp, #0]
 8005188:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800518c:	68f8      	ldr	r0, [r7, #12]
 800518e:	f000 f9e5 	bl	800555c <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8005192:	68fb      	ldr	r3, [r7, #12]
 8005194:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005196:	b29b      	uxth	r3, r3
 8005198:	2b00      	cmp	r3, #0
 800519a:	d19d      	bne.n	80050d8 <HAL_I2C_Master_Receive+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800519c:	697a      	ldr	r2, [r7, #20]
 800519e:	6a39      	ldr	r1, [r7, #32]
 80051a0:	68f8      	ldr	r0, [r7, #12]
 80051a2:	f000 f8cd 	bl	8005340 <I2C_WaitOnSTOPFlagUntilTimeout>
 80051a6:	4603      	mov	r3, r0
 80051a8:	2b00      	cmp	r3, #0
 80051aa:	d001      	beq.n	80051b0 <HAL_I2C_Master_Receive+0x1a4>
    {
      return HAL_ERROR;
 80051ac:	2301      	movs	r3, #1
 80051ae:	e01a      	b.n	80051e6 <HAL_I2C_Master_Receive+0x1da>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80051b0:	68fb      	ldr	r3, [r7, #12]
 80051b2:	681b      	ldr	r3, [r3, #0]
 80051b4:	2220      	movs	r2, #32
 80051b6:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80051b8:	68fb      	ldr	r3, [r7, #12]
 80051ba:	681b      	ldr	r3, [r3, #0]
 80051bc:	6859      	ldr	r1, [r3, #4]
 80051be:	68fb      	ldr	r3, [r7, #12]
 80051c0:	681a      	ldr	r2, [r3, #0]
 80051c2:	4b0c      	ldr	r3, [pc, #48]	; (80051f4 <HAL_I2C_Master_Receive+0x1e8>)
 80051c4:	400b      	ands	r3, r1
 80051c6:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80051c8:	68fb      	ldr	r3, [r7, #12]
 80051ca:	2220      	movs	r2, #32
 80051cc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80051d0:	68fb      	ldr	r3, [r7, #12]
 80051d2:	2200      	movs	r2, #0
 80051d4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80051d8:	68fb      	ldr	r3, [r7, #12]
 80051da:	2200      	movs	r2, #0
 80051dc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80051e0:	2300      	movs	r3, #0
 80051e2:	e000      	b.n	80051e6 <HAL_I2C_Master_Receive+0x1da>
  }
  else
  {
    return HAL_BUSY;
 80051e4:	2302      	movs	r3, #2
  }
}
 80051e6:	4618      	mov	r0, r3
 80051e8:	3718      	adds	r7, #24
 80051ea:	46bd      	mov	sp, r7
 80051ec:	bd80      	pop	{r7, pc}
 80051ee:	bf00      	nop
 80051f0:	80002400 	.word	0x80002400
 80051f4:	fe00e800 	.word	0xfe00e800

080051f8 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 80051f8:	b480      	push	{r7}
 80051fa:	b083      	sub	sp, #12
 80051fc:	af00      	add	r7, sp, #0
 80051fe:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	681b      	ldr	r3, [r3, #0]
 8005204:	699b      	ldr	r3, [r3, #24]
 8005206:	f003 0302 	and.w	r3, r3, #2
 800520a:	2b02      	cmp	r3, #2
 800520c:	d103      	bne.n	8005216 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 800520e:	687b      	ldr	r3, [r7, #4]
 8005210:	681b      	ldr	r3, [r3, #0]
 8005212:	2200      	movs	r2, #0
 8005214:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8005216:	687b      	ldr	r3, [r7, #4]
 8005218:	681b      	ldr	r3, [r3, #0]
 800521a:	699b      	ldr	r3, [r3, #24]
 800521c:	f003 0301 	and.w	r3, r3, #1
 8005220:	2b01      	cmp	r3, #1
 8005222:	d007      	beq.n	8005234 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	681b      	ldr	r3, [r3, #0]
 8005228:	699a      	ldr	r2, [r3, #24]
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	681b      	ldr	r3, [r3, #0]
 800522e:	f042 0201 	orr.w	r2, r2, #1
 8005232:	619a      	str	r2, [r3, #24]
  }
}
 8005234:	bf00      	nop
 8005236:	370c      	adds	r7, #12
 8005238:	46bd      	mov	sp, r7
 800523a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800523e:	4770      	bx	lr

08005240 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8005240:	b580      	push	{r7, lr}
 8005242:	b084      	sub	sp, #16
 8005244:	af00      	add	r7, sp, #0
 8005246:	60f8      	str	r0, [r7, #12]
 8005248:	60b9      	str	r1, [r7, #8]
 800524a:	603b      	str	r3, [r7, #0]
 800524c:	4613      	mov	r3, r2
 800524e:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005250:	e022      	b.n	8005298 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005252:	683b      	ldr	r3, [r7, #0]
 8005254:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005258:	d01e      	beq.n	8005298 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800525a:	f7fd f8a9 	bl	80023b0 <HAL_GetTick>
 800525e:	4602      	mov	r2, r0
 8005260:	69bb      	ldr	r3, [r7, #24]
 8005262:	1ad3      	subs	r3, r2, r3
 8005264:	683a      	ldr	r2, [r7, #0]
 8005266:	429a      	cmp	r2, r3
 8005268:	d302      	bcc.n	8005270 <I2C_WaitOnFlagUntilTimeout+0x30>
 800526a:	683b      	ldr	r3, [r7, #0]
 800526c:	2b00      	cmp	r3, #0
 800526e:	d113      	bne.n	8005298 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8005270:	68fb      	ldr	r3, [r7, #12]
 8005272:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005274:	f043 0220 	orr.w	r2, r3, #32
 8005278:	68fb      	ldr	r3, [r7, #12]
 800527a:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800527c:	68fb      	ldr	r3, [r7, #12]
 800527e:	2220      	movs	r2, #32
 8005280:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8005284:	68fb      	ldr	r3, [r7, #12]
 8005286:	2200      	movs	r2, #0
 8005288:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800528c:	68fb      	ldr	r3, [r7, #12]
 800528e:	2200      	movs	r2, #0
 8005290:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 8005294:	2301      	movs	r3, #1
 8005296:	e00f      	b.n	80052b8 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005298:	68fb      	ldr	r3, [r7, #12]
 800529a:	681b      	ldr	r3, [r3, #0]
 800529c:	699a      	ldr	r2, [r3, #24]
 800529e:	68bb      	ldr	r3, [r7, #8]
 80052a0:	4013      	ands	r3, r2
 80052a2:	68ba      	ldr	r2, [r7, #8]
 80052a4:	429a      	cmp	r2, r3
 80052a6:	bf0c      	ite	eq
 80052a8:	2301      	moveq	r3, #1
 80052aa:	2300      	movne	r3, #0
 80052ac:	b2db      	uxtb	r3, r3
 80052ae:	461a      	mov	r2, r3
 80052b0:	79fb      	ldrb	r3, [r7, #7]
 80052b2:	429a      	cmp	r2, r3
 80052b4:	d0cd      	beq.n	8005252 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80052b6:	2300      	movs	r3, #0
}
 80052b8:	4618      	mov	r0, r3
 80052ba:	3710      	adds	r7, #16
 80052bc:	46bd      	mov	sp, r7
 80052be:	bd80      	pop	{r7, pc}

080052c0 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80052c0:	b580      	push	{r7, lr}
 80052c2:	b084      	sub	sp, #16
 80052c4:	af00      	add	r7, sp, #0
 80052c6:	60f8      	str	r0, [r7, #12]
 80052c8:	60b9      	str	r1, [r7, #8]
 80052ca:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80052cc:	e02c      	b.n	8005328 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 80052ce:	687a      	ldr	r2, [r7, #4]
 80052d0:	68b9      	ldr	r1, [r7, #8]
 80052d2:	68f8      	ldr	r0, [r7, #12]
 80052d4:	f000 f8dc 	bl	8005490 <I2C_IsAcknowledgeFailed>
 80052d8:	4603      	mov	r3, r0
 80052da:	2b00      	cmp	r3, #0
 80052dc:	d001      	beq.n	80052e2 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80052de:	2301      	movs	r3, #1
 80052e0:	e02a      	b.n	8005338 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80052e2:	68bb      	ldr	r3, [r7, #8]
 80052e4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80052e8:	d01e      	beq.n	8005328 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80052ea:	f7fd f861 	bl	80023b0 <HAL_GetTick>
 80052ee:	4602      	mov	r2, r0
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	1ad3      	subs	r3, r2, r3
 80052f4:	68ba      	ldr	r2, [r7, #8]
 80052f6:	429a      	cmp	r2, r3
 80052f8:	d302      	bcc.n	8005300 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 80052fa:	68bb      	ldr	r3, [r7, #8]
 80052fc:	2b00      	cmp	r3, #0
 80052fe:	d113      	bne.n	8005328 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8005300:	68fb      	ldr	r3, [r7, #12]
 8005302:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005304:	f043 0220 	orr.w	r2, r3, #32
 8005308:	68fb      	ldr	r3, [r7, #12]
 800530a:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800530c:	68fb      	ldr	r3, [r7, #12]
 800530e:	2220      	movs	r2, #32
 8005310:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8005314:	68fb      	ldr	r3, [r7, #12]
 8005316:	2200      	movs	r2, #0
 8005318:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800531c:	68fb      	ldr	r3, [r7, #12]
 800531e:	2200      	movs	r2, #0
 8005320:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8005324:	2301      	movs	r3, #1
 8005326:	e007      	b.n	8005338 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8005328:	68fb      	ldr	r3, [r7, #12]
 800532a:	681b      	ldr	r3, [r3, #0]
 800532c:	699b      	ldr	r3, [r3, #24]
 800532e:	f003 0302 	and.w	r3, r3, #2
 8005332:	2b02      	cmp	r3, #2
 8005334:	d1cb      	bne.n	80052ce <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8005336:	2300      	movs	r3, #0
}
 8005338:	4618      	mov	r0, r3
 800533a:	3710      	adds	r7, #16
 800533c:	46bd      	mov	sp, r7
 800533e:	bd80      	pop	{r7, pc}

08005340 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005340:	b580      	push	{r7, lr}
 8005342:	b084      	sub	sp, #16
 8005344:	af00      	add	r7, sp, #0
 8005346:	60f8      	str	r0, [r7, #12]
 8005348:	60b9      	str	r1, [r7, #8]
 800534a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800534c:	e028      	b.n	80053a0 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 800534e:	687a      	ldr	r2, [r7, #4]
 8005350:	68b9      	ldr	r1, [r7, #8]
 8005352:	68f8      	ldr	r0, [r7, #12]
 8005354:	f000 f89c 	bl	8005490 <I2C_IsAcknowledgeFailed>
 8005358:	4603      	mov	r3, r0
 800535a:	2b00      	cmp	r3, #0
 800535c:	d001      	beq.n	8005362 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800535e:	2301      	movs	r3, #1
 8005360:	e026      	b.n	80053b0 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005362:	f7fd f825 	bl	80023b0 <HAL_GetTick>
 8005366:	4602      	mov	r2, r0
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	1ad3      	subs	r3, r2, r3
 800536c:	68ba      	ldr	r2, [r7, #8]
 800536e:	429a      	cmp	r2, r3
 8005370:	d302      	bcc.n	8005378 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8005372:	68bb      	ldr	r3, [r7, #8]
 8005374:	2b00      	cmp	r3, #0
 8005376:	d113      	bne.n	80053a0 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8005378:	68fb      	ldr	r3, [r7, #12]
 800537a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800537c:	f043 0220 	orr.w	r2, r3, #32
 8005380:	68fb      	ldr	r3, [r7, #12]
 8005382:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8005384:	68fb      	ldr	r3, [r7, #12]
 8005386:	2220      	movs	r2, #32
 8005388:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800538c:	68fb      	ldr	r3, [r7, #12]
 800538e:	2200      	movs	r2, #0
 8005390:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005394:	68fb      	ldr	r3, [r7, #12]
 8005396:	2200      	movs	r2, #0
 8005398:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 800539c:	2301      	movs	r3, #1
 800539e:	e007      	b.n	80053b0 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80053a0:	68fb      	ldr	r3, [r7, #12]
 80053a2:	681b      	ldr	r3, [r3, #0]
 80053a4:	699b      	ldr	r3, [r3, #24]
 80053a6:	f003 0320 	and.w	r3, r3, #32
 80053aa:	2b20      	cmp	r3, #32
 80053ac:	d1cf      	bne.n	800534e <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 80053ae:	2300      	movs	r3, #0
}
 80053b0:	4618      	mov	r0, r3
 80053b2:	3710      	adds	r7, #16
 80053b4:	46bd      	mov	sp, r7
 80053b6:	bd80      	pop	{r7, pc}

080053b8 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80053b8:	b580      	push	{r7, lr}
 80053ba:	b084      	sub	sp, #16
 80053bc:	af00      	add	r7, sp, #0
 80053be:	60f8      	str	r0, [r7, #12]
 80053c0:	60b9      	str	r1, [r7, #8]
 80053c2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80053c4:	e055      	b.n	8005472 <I2C_WaitOnRXNEFlagUntilTimeout+0xba>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 80053c6:	687a      	ldr	r2, [r7, #4]
 80053c8:	68b9      	ldr	r1, [r7, #8]
 80053ca:	68f8      	ldr	r0, [r7, #12]
 80053cc:	f000 f860 	bl	8005490 <I2C_IsAcknowledgeFailed>
 80053d0:	4603      	mov	r3, r0
 80053d2:	2b00      	cmp	r3, #0
 80053d4:	d001      	beq.n	80053da <I2C_WaitOnRXNEFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80053d6:	2301      	movs	r3, #1
 80053d8:	e053      	b.n	8005482 <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
    }

    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80053da:	68fb      	ldr	r3, [r7, #12]
 80053dc:	681b      	ldr	r3, [r3, #0]
 80053de:	699b      	ldr	r3, [r3, #24]
 80053e0:	f003 0320 	and.w	r3, r3, #32
 80053e4:	2b20      	cmp	r3, #32
 80053e6:	d129      	bne.n	800543c <I2C_WaitOnRXNEFlagUntilTimeout+0x84>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 80053e8:	68fb      	ldr	r3, [r7, #12]
 80053ea:	681b      	ldr	r3, [r3, #0]
 80053ec:	699b      	ldr	r3, [r3, #24]
 80053ee:	f003 0304 	and.w	r3, r3, #4
 80053f2:	2b04      	cmp	r3, #4
 80053f4:	d105      	bne.n	8005402 <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
 80053f6:	68fb      	ldr	r3, [r7, #12]
 80053f8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80053fa:	2b00      	cmp	r3, #0
 80053fc:	d001      	beq.n	8005402 <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        return HAL_OK;
 80053fe:	2300      	movs	r3, #0
 8005400:	e03f      	b.n	8005482 <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
      }
      else
      {
        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005402:	68fb      	ldr	r3, [r7, #12]
 8005404:	681b      	ldr	r3, [r3, #0]
 8005406:	2220      	movs	r2, #32
 8005408:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 800540a:	68fb      	ldr	r3, [r7, #12]
 800540c:	681b      	ldr	r3, [r3, #0]
 800540e:	6859      	ldr	r1, [r3, #4]
 8005410:	68fb      	ldr	r3, [r7, #12]
 8005412:	681a      	ldr	r2, [r3, #0]
 8005414:	4b1d      	ldr	r3, [pc, #116]	; (800548c <I2C_WaitOnRXNEFlagUntilTimeout+0xd4>)
 8005416:	400b      	ands	r3, r1
 8005418:	6053      	str	r3, [r2, #4]

        hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800541a:	68fb      	ldr	r3, [r7, #12]
 800541c:	2200      	movs	r2, #0
 800541e:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8005420:	68fb      	ldr	r3, [r7, #12]
 8005422:	2220      	movs	r2, #32
 8005424:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8005428:	68fb      	ldr	r3, [r7, #12]
 800542a:	2200      	movs	r2, #0
 800542c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005430:	68fb      	ldr	r3, [r7, #12]
 8005432:	2200      	movs	r2, #0
 8005434:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8005438:	2301      	movs	r3, #1
 800543a:	e022      	b.n	8005482 <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
      }
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800543c:	f7fc ffb8 	bl	80023b0 <HAL_GetTick>
 8005440:	4602      	mov	r2, r0
 8005442:	687b      	ldr	r3, [r7, #4]
 8005444:	1ad3      	subs	r3, r2, r3
 8005446:	68ba      	ldr	r2, [r7, #8]
 8005448:	429a      	cmp	r2, r3
 800544a:	d302      	bcc.n	8005452 <I2C_WaitOnRXNEFlagUntilTimeout+0x9a>
 800544c:	68bb      	ldr	r3, [r7, #8]
 800544e:	2b00      	cmp	r3, #0
 8005450:	d10f      	bne.n	8005472 <I2C_WaitOnRXNEFlagUntilTimeout+0xba>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8005452:	68fb      	ldr	r3, [r7, #12]
 8005454:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005456:	f043 0220 	orr.w	r2, r3, #32
 800545a:	68fb      	ldr	r3, [r7, #12]
 800545c:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 800545e:	68fb      	ldr	r3, [r7, #12]
 8005460:	2220      	movs	r2, #32
 8005462:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005466:	68fb      	ldr	r3, [r7, #12]
 8005468:	2200      	movs	r2, #0
 800546a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 800546e:	2301      	movs	r3, #1
 8005470:	e007      	b.n	8005482 <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8005472:	68fb      	ldr	r3, [r7, #12]
 8005474:	681b      	ldr	r3, [r3, #0]
 8005476:	699b      	ldr	r3, [r3, #24]
 8005478:	f003 0304 	and.w	r3, r3, #4
 800547c:	2b04      	cmp	r3, #4
 800547e:	d1a2      	bne.n	80053c6 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8005480:	2300      	movs	r3, #0
}
 8005482:	4618      	mov	r0, r3
 8005484:	3710      	adds	r7, #16
 8005486:	46bd      	mov	sp, r7
 8005488:	bd80      	pop	{r7, pc}
 800548a:	bf00      	nop
 800548c:	fe00e800 	.word	0xfe00e800

08005490 <I2C_IsAcknowledgeFailed>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005490:	b580      	push	{r7, lr}
 8005492:	b084      	sub	sp, #16
 8005494:	af00      	add	r7, sp, #0
 8005496:	60f8      	str	r0, [r7, #12]
 8005498:	60b9      	str	r1, [r7, #8]
 800549a:	607a      	str	r2, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800549c:	68fb      	ldr	r3, [r7, #12]
 800549e:	681b      	ldr	r3, [r3, #0]
 80054a0:	699b      	ldr	r3, [r3, #24]
 80054a2:	f003 0310 	and.w	r3, r3, #16
 80054a6:	2b10      	cmp	r3, #16
 80054a8:	d151      	bne.n	800554e <I2C_IsAcknowledgeFailed+0xbe>
  {
    /* Wait until STOP Flag is reset */
    /* AutoEnd should be initiate after AF */
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80054aa:	e022      	b.n	80054f2 <I2C_IsAcknowledgeFailed+0x62>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 80054ac:	68bb      	ldr	r3, [r7, #8]
 80054ae:	f1b3 3fff 	cmp.w	r3, #4294967295
 80054b2:	d01e      	beq.n	80054f2 <I2C_IsAcknowledgeFailed+0x62>
      {
        if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80054b4:	f7fc ff7c 	bl	80023b0 <HAL_GetTick>
 80054b8:	4602      	mov	r2, r0
 80054ba:	687b      	ldr	r3, [r7, #4]
 80054bc:	1ad3      	subs	r3, r2, r3
 80054be:	68ba      	ldr	r2, [r7, #8]
 80054c0:	429a      	cmp	r2, r3
 80054c2:	d302      	bcc.n	80054ca <I2C_IsAcknowledgeFailed+0x3a>
 80054c4:	68bb      	ldr	r3, [r7, #8]
 80054c6:	2b00      	cmp	r3, #0
 80054c8:	d113      	bne.n	80054f2 <I2C_IsAcknowledgeFailed+0x62>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80054ca:	68fb      	ldr	r3, [r7, #12]
 80054cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80054ce:	f043 0220 	orr.w	r2, r3, #32
 80054d2:	68fb      	ldr	r3, [r7, #12]
 80054d4:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 80054d6:	68fb      	ldr	r3, [r7, #12]
 80054d8:	2220      	movs	r2, #32
 80054da:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80054de:	68fb      	ldr	r3, [r7, #12]
 80054e0:	2200      	movs	r2, #0
 80054e2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80054e6:	68fb      	ldr	r3, [r7, #12]
 80054e8:	2200      	movs	r2, #0
 80054ea:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 80054ee:	2301      	movs	r3, #1
 80054f0:	e02e      	b.n	8005550 <I2C_IsAcknowledgeFailed+0xc0>
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80054f2:	68fb      	ldr	r3, [r7, #12]
 80054f4:	681b      	ldr	r3, [r3, #0]
 80054f6:	699b      	ldr	r3, [r3, #24]
 80054f8:	f003 0320 	and.w	r3, r3, #32
 80054fc:	2b20      	cmp	r3, #32
 80054fe:	d1d5      	bne.n	80054ac <I2C_IsAcknowledgeFailed+0x1c>
        }
      }
    }

    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005500:	68fb      	ldr	r3, [r7, #12]
 8005502:	681b      	ldr	r3, [r3, #0]
 8005504:	2210      	movs	r2, #16
 8005506:	61da      	str	r2, [r3, #28]

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005508:	68fb      	ldr	r3, [r7, #12]
 800550a:	681b      	ldr	r3, [r3, #0]
 800550c:	2220      	movs	r2, #32
 800550e:	61da      	str	r2, [r3, #28]

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8005510:	68f8      	ldr	r0, [r7, #12]
 8005512:	f7ff fe71 	bl	80051f8 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8005516:	68fb      	ldr	r3, [r7, #12]
 8005518:	681b      	ldr	r3, [r3, #0]
 800551a:	6859      	ldr	r1, [r3, #4]
 800551c:	68fb      	ldr	r3, [r7, #12]
 800551e:	681a      	ldr	r2, [r3, #0]
 8005520:	4b0d      	ldr	r3, [pc, #52]	; (8005558 <I2C_IsAcknowledgeFailed+0xc8>)
 8005522:	400b      	ands	r3, r1
 8005524:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8005526:	68fb      	ldr	r3, [r7, #12]
 8005528:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800552a:	f043 0204 	orr.w	r2, r3, #4
 800552e:	68fb      	ldr	r3, [r7, #12]
 8005530:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8005532:	68fb      	ldr	r3, [r7, #12]
 8005534:	2220      	movs	r2, #32
 8005536:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800553a:	68fb      	ldr	r3, [r7, #12]
 800553c:	2200      	movs	r2, #0
 800553e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005542:	68fb      	ldr	r3, [r7, #12]
 8005544:	2200      	movs	r2, #0
 8005546:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_ERROR;
 800554a:	2301      	movs	r3, #1
 800554c:	e000      	b.n	8005550 <I2C_IsAcknowledgeFailed+0xc0>
  }
  return HAL_OK;
 800554e:	2300      	movs	r3, #0
}
 8005550:	4618      	mov	r0, r3
 8005552:	3710      	adds	r7, #16
 8005554:	46bd      	mov	sp, r7
 8005556:	bd80      	pop	{r7, pc}
 8005558:	fe00e800 	.word	0xfe00e800

0800555c <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 800555c:	b480      	push	{r7}
 800555e:	b085      	sub	sp, #20
 8005560:	af00      	add	r7, sp, #0
 8005562:	60f8      	str	r0, [r7, #12]
 8005564:	607b      	str	r3, [r7, #4]
 8005566:	460b      	mov	r3, r1
 8005568:	817b      	strh	r3, [r7, #10]
 800556a:	4613      	mov	r3, r2
 800556c:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2,
 800556e:	68fb      	ldr	r3, [r7, #12]
 8005570:	681b      	ldr	r3, [r3, #0]
 8005572:	685a      	ldr	r2, [r3, #4]
 8005574:	69bb      	ldr	r3, [r7, #24]
 8005576:	0d5b      	lsrs	r3, r3, #21
 8005578:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 800557c:	4b0d      	ldr	r3, [pc, #52]	; (80055b4 <I2C_TransferConfig+0x58>)
 800557e:	430b      	orrs	r3, r1
 8005580:	43db      	mvns	r3, r3
 8005582:	ea02 0103 	and.w	r1, r2, r3
 8005586:	897b      	ldrh	r3, [r7, #10]
 8005588:	f3c3 0209 	ubfx	r2, r3, #0, #10
 800558c:	7a7b      	ldrb	r3, [r7, #9]
 800558e:	041b      	lsls	r3, r3, #16
 8005590:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8005594:	431a      	orrs	r2, r3
 8005596:	687b      	ldr	r3, [r7, #4]
 8005598:	431a      	orrs	r2, r3
 800559a:	69bb      	ldr	r3, [r7, #24]
 800559c:	431a      	orrs	r2, r3
 800559e:	68fb      	ldr	r3, [r7, #12]
 80055a0:	681b      	ldr	r3, [r3, #0]
 80055a2:	430a      	orrs	r2, r1
 80055a4:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
             (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) |
                        (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | (uint32_t)Mode | (uint32_t)Request));
}
 80055a6:	bf00      	nop
 80055a8:	3714      	adds	r7, #20
 80055aa:	46bd      	mov	sp, r7
 80055ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055b0:	4770      	bx	lr
 80055b2:	bf00      	nop
 80055b4:	03ff63ff 	.word	0x03ff63ff

080055b8 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80055b8:	b480      	push	{r7}
 80055ba:	b083      	sub	sp, #12
 80055bc:	af00      	add	r7, sp, #0
 80055be:	6078      	str	r0, [r7, #4]
 80055c0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80055c2:	687b      	ldr	r3, [r7, #4]
 80055c4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80055c8:	b2db      	uxtb	r3, r3
 80055ca:	2b20      	cmp	r3, #32
 80055cc:	d138      	bne.n	8005640 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80055d4:	2b01      	cmp	r3, #1
 80055d6:	d101      	bne.n	80055dc <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80055d8:	2302      	movs	r3, #2
 80055da:	e032      	b.n	8005642 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80055dc:	687b      	ldr	r3, [r7, #4]
 80055de:	2201      	movs	r2, #1
 80055e0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	2224      	movs	r2, #36	; 0x24
 80055e8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80055ec:	687b      	ldr	r3, [r7, #4]
 80055ee:	681b      	ldr	r3, [r3, #0]
 80055f0:	681a      	ldr	r2, [r3, #0]
 80055f2:	687b      	ldr	r3, [r7, #4]
 80055f4:	681b      	ldr	r3, [r3, #0]
 80055f6:	f022 0201 	bic.w	r2, r2, #1
 80055fa:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80055fc:	687b      	ldr	r3, [r7, #4]
 80055fe:	681b      	ldr	r3, [r3, #0]
 8005600:	681a      	ldr	r2, [r3, #0]
 8005602:	687b      	ldr	r3, [r7, #4]
 8005604:	681b      	ldr	r3, [r3, #0]
 8005606:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800560a:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 800560c:	687b      	ldr	r3, [r7, #4]
 800560e:	681b      	ldr	r3, [r3, #0]
 8005610:	6819      	ldr	r1, [r3, #0]
 8005612:	687b      	ldr	r3, [r7, #4]
 8005614:	681b      	ldr	r3, [r3, #0]
 8005616:	683a      	ldr	r2, [r7, #0]
 8005618:	430a      	orrs	r2, r1
 800561a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800561c:	687b      	ldr	r3, [r7, #4]
 800561e:	681b      	ldr	r3, [r3, #0]
 8005620:	681a      	ldr	r2, [r3, #0]
 8005622:	687b      	ldr	r3, [r7, #4]
 8005624:	681b      	ldr	r3, [r3, #0]
 8005626:	f042 0201 	orr.w	r2, r2, #1
 800562a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	2220      	movs	r2, #32
 8005630:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005634:	687b      	ldr	r3, [r7, #4]
 8005636:	2200      	movs	r2, #0
 8005638:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800563c:	2300      	movs	r3, #0
 800563e:	e000      	b.n	8005642 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8005640:	2302      	movs	r3, #2
  }
}
 8005642:	4618      	mov	r0, r3
 8005644:	370c      	adds	r7, #12
 8005646:	46bd      	mov	sp, r7
 8005648:	f85d 7b04 	ldr.w	r7, [sp], #4
 800564c:	4770      	bx	lr

0800564e <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800564e:	b480      	push	{r7}
 8005650:	b085      	sub	sp, #20
 8005652:	af00      	add	r7, sp, #0
 8005654:	6078      	str	r0, [r7, #4]
 8005656:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005658:	687b      	ldr	r3, [r7, #4]
 800565a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800565e:	b2db      	uxtb	r3, r3
 8005660:	2b20      	cmp	r3, #32
 8005662:	d139      	bne.n	80056d8 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800566a:	2b01      	cmp	r3, #1
 800566c:	d101      	bne.n	8005672 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 800566e:	2302      	movs	r3, #2
 8005670:	e033      	b.n	80056da <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8005672:	687b      	ldr	r3, [r7, #4]
 8005674:	2201      	movs	r2, #1
 8005676:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800567a:	687b      	ldr	r3, [r7, #4]
 800567c:	2224      	movs	r2, #36	; 0x24
 800567e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8005682:	687b      	ldr	r3, [r7, #4]
 8005684:	681b      	ldr	r3, [r3, #0]
 8005686:	681a      	ldr	r2, [r3, #0]
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	681b      	ldr	r3, [r3, #0]
 800568c:	f022 0201 	bic.w	r2, r2, #1
 8005690:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8005692:	687b      	ldr	r3, [r7, #4]
 8005694:	681b      	ldr	r3, [r3, #0]
 8005696:	681b      	ldr	r3, [r3, #0]
 8005698:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800569a:	68fb      	ldr	r3, [r7, #12]
 800569c:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80056a0:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80056a2:	683b      	ldr	r3, [r7, #0]
 80056a4:	021b      	lsls	r3, r3, #8
 80056a6:	68fa      	ldr	r2, [r7, #12]
 80056a8:	4313      	orrs	r3, r2
 80056aa:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80056ac:	687b      	ldr	r3, [r7, #4]
 80056ae:	681b      	ldr	r3, [r3, #0]
 80056b0:	68fa      	ldr	r2, [r7, #12]
 80056b2:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80056b4:	687b      	ldr	r3, [r7, #4]
 80056b6:	681b      	ldr	r3, [r3, #0]
 80056b8:	681a      	ldr	r2, [r3, #0]
 80056ba:	687b      	ldr	r3, [r7, #4]
 80056bc:	681b      	ldr	r3, [r3, #0]
 80056be:	f042 0201 	orr.w	r2, r2, #1
 80056c2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80056c4:	687b      	ldr	r3, [r7, #4]
 80056c6:	2220      	movs	r2, #32
 80056c8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80056cc:	687b      	ldr	r3, [r7, #4]
 80056ce:	2200      	movs	r2, #0
 80056d0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80056d4:	2300      	movs	r3, #0
 80056d6:	e000      	b.n	80056da <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80056d8:	2302      	movs	r3, #2
  }
}
 80056da:	4618      	mov	r0, r3
 80056dc:	3714      	adds	r7, #20
 80056de:	46bd      	mov	sp, r7
 80056e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056e4:	4770      	bx	lr
	...

080056e8 <HAL_I2S_Init>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Init(I2S_HandleTypeDef *hi2s)
{
 80056e8:	b580      	push	{r7, lr}
 80056ea:	b088      	sub	sp, #32
 80056ec:	af00      	add	r7, sp, #0
 80056ee:	6078      	str	r0, [r7, #4]
  uint32_t tmp;
  uint32_t i2sclk;
  uint32_t ispcm;

  /* Check the I2S handle allocation */
  if (hi2s == NULL)
 80056f0:	687b      	ldr	r3, [r7, #4]
 80056f2:	2b00      	cmp	r3, #0
 80056f4:	d101      	bne.n	80056fa <HAL_I2S_Init+0x12>
  {
    return HAL_ERROR;
 80056f6:	2301      	movs	r3, #1
 80056f8:	e10b      	b.n	8005912 <HAL_I2S_Init+0x22a>
  assert_param(IS_I2S_FIRST_BIT(hi2s->Init.FirstBit));
  assert_param(IS_I2S_WS_INVERSION(hi2s->Init.WSInversion));
  assert_param(IS_I2S_DATA_24BIT_ALIGNMENT(hi2s->Init.Data24BitAlignment));
  assert_param(IS_I2S_MASTER_KEEP_IO_STATE(hi2s->Init.MasterKeepIOState));

  if (hi2s->State == HAL_I2S_STATE_RESET)
 80056fa:	687b      	ldr	r3, [r7, #4]
 80056fc:	f893 304d 	ldrb.w	r3, [r3, #77]	; 0x4d
 8005700:	b2db      	uxtb	r3, r3
 8005702:	2b00      	cmp	r3, #0
 8005704:	d106      	bne.n	8005714 <HAL_I2S_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2s->Lock = HAL_UNLOCKED;
 8005706:	687b      	ldr	r3, [r7, #4]
 8005708:	2200      	movs	r2, #0
 800570a:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hi2s->MspInitCallback(hi2s);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2S_MspInit(hi2s);
 800570e:	6878      	ldr	r0, [r7, #4]
 8005710:	f7fb ffaa 	bl	8001668 <HAL_I2S_MspInit>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }

  hi2s->State = HAL_I2S_STATE_BUSY;
 8005714:	687b      	ldr	r3, [r7, #4]
 8005716:	2202      	movs	r2, #2
 8005718:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d

  /* Disable the selected I2S peripheral */
  if ((hi2s->Instance->CR1 & SPI_CR1_SPE) == SPI_CR1_SPE)
 800571c:	687b      	ldr	r3, [r7, #4]
 800571e:	681b      	ldr	r3, [r3, #0]
 8005720:	681b      	ldr	r3, [r3, #0]
 8005722:	f003 0301 	and.w	r3, r3, #1
 8005726:	2b01      	cmp	r3, #1
 8005728:	d107      	bne.n	800573a <HAL_I2S_Init+0x52>
  {
    /* Disable I2S peripheral */
    __HAL_I2S_DISABLE(hi2s);
 800572a:	687b      	ldr	r3, [r7, #4]
 800572c:	681b      	ldr	r3, [r3, #0]
 800572e:	681a      	ldr	r2, [r3, #0]
 8005730:	687b      	ldr	r3, [r7, #4]
 8005732:	681b      	ldr	r3, [r3, #0]
 8005734:	f022 0201 	bic.w	r2, r2, #1
 8005738:	601a      	str	r2, [r3, #0]
  }

  /* Clear I2S configuration register */
  CLEAR_REG(hi2s->Instance->I2SCFGR);
 800573a:	687b      	ldr	r3, [r7, #4]
 800573c:	681b      	ldr	r3, [r3, #0]
 800573e:	2200      	movs	r2, #0
 8005740:	651a      	str	r2, [r3, #80]	; 0x50

  if (IS_I2S_MASTER(hi2s->Init.Mode))
 8005742:	687b      	ldr	r3, [r7, #4]
 8005744:	685b      	ldr	r3, [r3, #4]
 8005746:	2b04      	cmp	r3, #4
 8005748:	d008      	beq.n	800575c <HAL_I2S_Init+0x74>
 800574a:	687b      	ldr	r3, [r7, #4]
 800574c:	685b      	ldr	r3, [r3, #4]
 800574e:	2b06      	cmp	r3, #6
 8005750:	d004      	beq.n	800575c <HAL_I2S_Init+0x74>
 8005752:	687b      	ldr	r3, [r7, #4]
 8005754:	685b      	ldr	r3, [r3, #4]
 8005756:	2b0a      	cmp	r3, #10
 8005758:	f040 8085 	bne.w	8005866 <HAL_I2S_Init+0x17e>
  {
    /*------------------------- I2SDIV and ODD Calculation ---------------------*/
    /* If the requested audio frequency is not the default, compute the prescaler */
    if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 800575c:	687b      	ldr	r3, [r7, #4]
 800575e:	695b      	ldr	r3, [r3, #20]
 8005760:	2b02      	cmp	r3, #2
 8005762:	d058      	beq.n	8005816 <HAL_I2S_Init+0x12e>
    {
      /* Check the frame length (For the Prescaler computing) ********************/
      if (hi2s->Init.DataFormat != I2S_DATAFORMAT_16B)
 8005764:	687b      	ldr	r3, [r7, #4]
 8005766:	68db      	ldr	r3, [r3, #12]
 8005768:	2b00      	cmp	r3, #0
 800576a:	d002      	beq.n	8005772 <HAL_I2S_Init+0x8a>
      {
        /* Channel length is 32 bits */
        packetlength = 2UL;
 800576c:	2302      	movs	r3, #2
 800576e:	617b      	str	r3, [r7, #20]
 8005770:	e001      	b.n	8005776 <HAL_I2S_Init+0x8e>
      }
      else
      {
        /* Channel length is 16 bits */
        packetlength = 1UL;
 8005772:	2301      	movs	r3, #1
 8005774:	617b      	str	r3, [r7, #20]
      }

      /* Check if PCM standard is used */
      if ((hi2s->Init.Standard == I2S_STANDARD_PCM_SHORT) ||
 8005776:	687b      	ldr	r3, [r7, #4]
 8005778:	689b      	ldr	r3, [r3, #8]
 800577a:	2b30      	cmp	r3, #48	; 0x30
 800577c:	d003      	beq.n	8005786 <HAL_I2S_Init+0x9e>
          (hi2s->Init.Standard == I2S_STANDARD_PCM_LONG))
 800577e:	687b      	ldr	r3, [r7, #4]
 8005780:	689b      	ldr	r3, [r3, #8]
      if ((hi2s->Init.Standard == I2S_STANDARD_PCM_SHORT) ||
 8005782:	2bb0      	cmp	r3, #176	; 0xb0
 8005784:	d102      	bne.n	800578c <HAL_I2S_Init+0xa4>
      {
        ispcm = 1UL;
 8005786:	2301      	movs	r3, #1
 8005788:	60fb      	str	r3, [r7, #12]
 800578a:	e001      	b.n	8005790 <HAL_I2S_Init+0xa8>
      }
      else
      {
        ispcm = 0UL;
 800578c:	2300      	movs	r3, #0
 800578e:	60fb      	str	r3, [r7, #12]
        /* SPI1,SPI2 and SPI3 share the same source clock */
        i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SPI123);
      }
#else
      /* SPI1,SPI2 and SPI3 share the same source clock */
      i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SPI123);
 8005790:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8005794:	f003 f9b6 	bl	8008b04 <HAL_RCCEx_GetPeriphCLKFreq>
 8005798:	60b8      	str	r0, [r7, #8]
#endif

      /* Compute the Real divider depending on the MCLK output state, with a floating point */
      if (hi2s->Init.MCLKOutput == I2S_MCLKOUTPUT_ENABLE)
 800579a:	687b      	ldr	r3, [r7, #4]
 800579c:	691b      	ldr	r3, [r3, #16]
 800579e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80057a2:	d113      	bne.n	80057cc <HAL_I2S_Init+0xe4>
      {
        /* MCLK output is enabled */
        tmp = (uint32_t)((((i2sclk / (256UL >> ispcm)) * 10UL) / hi2s->Init.AudioFreq) + 5UL);
 80057a4:	f44f 7280 	mov.w	r2, #256	; 0x100
 80057a8:	68fb      	ldr	r3, [r7, #12]
 80057aa:	fa22 f303 	lsr.w	r3, r2, r3
 80057ae:	68ba      	ldr	r2, [r7, #8]
 80057b0:	fbb2 f2f3 	udiv	r2, r2, r3
 80057b4:	4613      	mov	r3, r2
 80057b6:	009b      	lsls	r3, r3, #2
 80057b8:	4413      	add	r3, r2
 80057ba:	005b      	lsls	r3, r3, #1
 80057bc:	461a      	mov	r2, r3
 80057be:	687b      	ldr	r3, [r7, #4]
 80057c0:	695b      	ldr	r3, [r3, #20]
 80057c2:	fbb2 f3f3 	udiv	r3, r2, r3
 80057c6:	3305      	adds	r3, #5
 80057c8:	613b      	str	r3, [r7, #16]
 80057ca:	e014      	b.n	80057f6 <HAL_I2S_Init+0x10e>
      }
      else
      {
        /* MCLK output is disabled */
        tmp = (uint32_t)((((i2sclk / ((32UL >> ispcm) * packetlength)) * 10UL) / hi2s->Init.AudioFreq) + 5UL);
 80057cc:	2220      	movs	r2, #32
 80057ce:	68fb      	ldr	r3, [r7, #12]
 80057d0:	fa22 f303 	lsr.w	r3, r2, r3
 80057d4:	697a      	ldr	r2, [r7, #20]
 80057d6:	fb02 f303 	mul.w	r3, r2, r3
 80057da:	68ba      	ldr	r2, [r7, #8]
 80057dc:	fbb2 f2f3 	udiv	r2, r2, r3
 80057e0:	4613      	mov	r3, r2
 80057e2:	009b      	lsls	r3, r3, #2
 80057e4:	4413      	add	r3, r2
 80057e6:	005b      	lsls	r3, r3, #1
 80057e8:	461a      	mov	r2, r3
 80057ea:	687b      	ldr	r3, [r7, #4]
 80057ec:	695b      	ldr	r3, [r3, #20]
 80057ee:	fbb2 f3f3 	udiv	r3, r2, r3
 80057f2:	3305      	adds	r3, #5
 80057f4:	613b      	str	r3, [r7, #16]
      }

      /* Remove the flatting point */
      tmp = tmp / 10UL;
 80057f6:	693b      	ldr	r3, [r7, #16]
 80057f8:	4a48      	ldr	r2, [pc, #288]	; (800591c <HAL_I2S_Init+0x234>)
 80057fa:	fba2 2303 	umull	r2, r3, r2, r3
 80057fe:	08db      	lsrs	r3, r3, #3
 8005800:	613b      	str	r3, [r7, #16]

      /* Check the parity of the divider */
      i2sodd = (uint32_t)(tmp & (uint32_t)1UL);
 8005802:	693b      	ldr	r3, [r7, #16]
 8005804:	f003 0301 	and.w	r3, r3, #1
 8005808:	61bb      	str	r3, [r7, #24]

      /* Compute the i2sdiv prescaler */
      i2sdiv = (uint32_t)((tmp - i2sodd) / 2UL);
 800580a:	693a      	ldr	r2, [r7, #16]
 800580c:	69bb      	ldr	r3, [r7, #24]
 800580e:	1ad3      	subs	r3, r2, r3
 8005810:	085b      	lsrs	r3, r3, #1
 8005812:	61fb      	str	r3, [r7, #28]
 8005814:	e003      	b.n	800581e <HAL_I2S_Init+0x136>
    }
    else
    {
      /* Set the default values */
      i2sdiv = 2UL;
 8005816:	2302      	movs	r3, #2
 8005818:	61fb      	str	r3, [r7, #28]
      i2sodd = 0UL;
 800581a:	2300      	movs	r3, #0
 800581c:	61bb      	str	r3, [r7, #24]
    }

    /* Test if the obtain values are forbidden or out of range */
    if (((i2sodd == 1UL) && (i2sdiv == 1UL)) || (i2sdiv > 0xFFUL))
 800581e:	69bb      	ldr	r3, [r7, #24]
 8005820:	2b01      	cmp	r3, #1
 8005822:	d102      	bne.n	800582a <HAL_I2S_Init+0x142>
 8005824:	69fb      	ldr	r3, [r7, #28]
 8005826:	2b01      	cmp	r3, #1
 8005828:	d002      	beq.n	8005830 <HAL_I2S_Init+0x148>
 800582a:	69fb      	ldr	r3, [r7, #28]
 800582c:	2bff      	cmp	r3, #255	; 0xff
 800582e:	d907      	bls.n	8005840 <HAL_I2S_Init+0x158>
    {
      /* Set the error code */
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_PRESCALER);
 8005830:	687b      	ldr	r3, [r7, #4]
 8005832:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005834:	f043 0210 	orr.w	r2, r3, #16
 8005838:	687b      	ldr	r3, [r7, #4]
 800583a:	651a      	str	r2, [r3, #80]	; 0x50
      return  HAL_ERROR;
 800583c:	2301      	movs	r3, #1
 800583e:	e068      	b.n	8005912 <HAL_I2S_Init+0x22a>
    }

    /* Force i2smod to 1 just to be sure that (2xi2sdiv + i2sodd) is always higher than 0 */
    if (i2sdiv == 0UL)
 8005840:	69fb      	ldr	r3, [r7, #28]
 8005842:	2b00      	cmp	r3, #0
 8005844:	d101      	bne.n	800584a <HAL_I2S_Init+0x162>
    {
      i2sodd = 1UL;
 8005846:	2301      	movs	r3, #1
 8005848:	61bb      	str	r3, [r7, #24]
    }

    MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_I2SDIV                 | SPI_I2SCFGR_ODD),
 800584a:	687b      	ldr	r3, [r7, #4]
 800584c:	681b      	ldr	r3, [r3, #0]
 800584e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8005850:	4b33      	ldr	r3, [pc, #204]	; (8005920 <HAL_I2S_Init+0x238>)
 8005852:	4013      	ands	r3, r2
 8005854:	69fa      	ldr	r2, [r7, #28]
 8005856:	0411      	lsls	r1, r2, #16
 8005858:	69ba      	ldr	r2, [r7, #24]
 800585a:	0612      	lsls	r2, r2, #24
 800585c:	4311      	orrs	r1, r2
 800585e:	687a      	ldr	r2, [r7, #4]
 8005860:	6812      	ldr	r2, [r2, #0]
 8005862:	430b      	orrs	r3, r1
 8005864:	6513      	str	r3, [r2, #80]	; 0x50
  }

  /*-------------------------- I2Sx I2SCFGR Configuration --------------------*/
  /* Configure I2SMOD, I2SCFG, I2SSTD, PCMSYNC, DATLEN ,CHLEN ,CKPOL, WSINV, DATAFMT, I2SDIV, ODD and MCKOE bits bits */
  /* And configure the I2S with the I2S_InitStruct values */
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_I2SMOD   | SPI_I2SCFGR_I2SCFG     | \
 8005866:	687b      	ldr	r3, [r7, #4]
 8005868:	681b      	ldr	r3, [r3, #0]
 800586a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800586c:	4b2d      	ldr	r3, [pc, #180]	; (8005924 <HAL_I2S_Init+0x23c>)
 800586e:	4013      	ands	r3, r2
 8005870:	687a      	ldr	r2, [r7, #4]
 8005872:	6851      	ldr	r1, [r2, #4]
 8005874:	687a      	ldr	r2, [r7, #4]
 8005876:	6892      	ldr	r2, [r2, #8]
 8005878:	4311      	orrs	r1, r2
 800587a:	687a      	ldr	r2, [r7, #4]
 800587c:	68d2      	ldr	r2, [r2, #12]
 800587e:	4311      	orrs	r1, r2
 8005880:	687a      	ldr	r2, [r7, #4]
 8005882:	6992      	ldr	r2, [r2, #24]
 8005884:	4311      	orrs	r1, r2
 8005886:	687a      	ldr	r2, [r7, #4]
 8005888:	6a12      	ldr	r2, [r2, #32]
 800588a:	4311      	orrs	r1, r2
 800588c:	687a      	ldr	r2, [r7, #4]
 800588e:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8005890:	4311      	orrs	r1, r2
 8005892:	687a      	ldr	r2, [r7, #4]
 8005894:	6912      	ldr	r2, [r2, #16]
 8005896:	430a      	orrs	r2, r1
 8005898:	431a      	orrs	r2, r3
 800589a:	687b      	ldr	r3, [r7, #4]
 800589c:	681b      	ldr	r3, [r3, #0]
 800589e:	f042 0201 	orr.w	r2, r2, #1
 80058a2:	651a      	str	r2, [r3, #80]	; 0x50
                                      (SPI_I2SCFGR_I2SMOD   | hi2s->Init.Mode        | \
                                       hi2s->Init.Standard  | hi2s->Init.DataFormat  | \
                                       hi2s->Init.CPOL      | hi2s->Init.WSInversion | \
                                       hi2s->Init.Data24BitAlignment | hi2s->Init.MCLKOutput));
  /*Clear status register*/
  WRITE_REG(hi2s->Instance->IFCR, 0x0FF8);
 80058a4:	687b      	ldr	r3, [r7, #4]
 80058a6:	681b      	ldr	r3, [r3, #0]
 80058a8:	f640 72f8 	movw	r2, #4088	; 0xff8
 80058ac:	619a      	str	r2, [r3, #24]

  /*---------------------------- I2Sx CFG2 Configuration ----------------------*/

  /* Unlock the AF configuration to configure CFG2 register*/
  CLEAR_BIT(hi2s->Instance->CR1, SPI_CR1_IOLOCK);
 80058ae:	687b      	ldr	r3, [r7, #4]
 80058b0:	681b      	ldr	r3, [r3, #0]
 80058b2:	681a      	ldr	r2, [r3, #0]
 80058b4:	687b      	ldr	r3, [r7, #4]
 80058b6:	681b      	ldr	r3, [r3, #0]
 80058b8:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 80058bc:	601a      	str	r2, [r3, #0]

  MODIFY_REG(hi2s->Instance->CFG2, SPI_CFG2_LSBFRST, hi2s->Init.FirstBit);
 80058be:	687b      	ldr	r3, [r7, #4]
 80058c0:	681b      	ldr	r3, [r3, #0]
 80058c2:	68db      	ldr	r3, [r3, #12]
 80058c4:	f423 0100 	bic.w	r1, r3, #8388608	; 0x800000
 80058c8:	687b      	ldr	r3, [r7, #4]
 80058ca:	69da      	ldr	r2, [r3, #28]
 80058cc:	687b      	ldr	r3, [r7, #4]
 80058ce:	681b      	ldr	r3, [r3, #0]
 80058d0:	430a      	orrs	r2, r1
 80058d2:	60da      	str	r2, [r3, #12]

  /* Insure that AFCNTR is managed only by Master */
  if (IS_I2S_MASTER(hi2s->Init.Mode))
 80058d4:	687b      	ldr	r3, [r7, #4]
 80058d6:	685b      	ldr	r3, [r3, #4]
 80058d8:	2b04      	cmp	r3, #4
 80058da:	d007      	beq.n	80058ec <HAL_I2S_Init+0x204>
 80058dc:	687b      	ldr	r3, [r7, #4]
 80058de:	685b      	ldr	r3, [r3, #4]
 80058e0:	2b06      	cmp	r3, #6
 80058e2:	d003      	beq.n	80058ec <HAL_I2S_Init+0x204>
 80058e4:	687b      	ldr	r3, [r7, #4]
 80058e6:	685b      	ldr	r3, [r3, #4]
 80058e8:	2b0a      	cmp	r3, #10
 80058ea:	d10a      	bne.n	8005902 <HAL_I2S_Init+0x21a>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hi2s->Instance->CFG2, SPI_CFG2_AFCNTR, (hi2s->Init.MasterKeepIOState));
 80058ec:	687b      	ldr	r3, [r7, #4]
 80058ee:	681b      	ldr	r3, [r3, #0]
 80058f0:	68db      	ldr	r3, [r3, #12]
 80058f2:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 80058f6:	687b      	ldr	r3, [r7, #4]
 80058f8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80058fa:	687b      	ldr	r3, [r7, #4]
 80058fc:	681b      	ldr	r3, [r3, #0]
 80058fe:	430a      	orrs	r2, r1
 8005900:	60da      	str	r2, [r3, #12]
  }

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 8005902:	687b      	ldr	r3, [r7, #4]
 8005904:	2200      	movs	r2, #0
 8005906:	651a      	str	r2, [r3, #80]	; 0x50
  hi2s->State     = HAL_I2S_STATE_READY;
 8005908:	687b      	ldr	r3, [r7, #4]
 800590a:	2201      	movs	r2, #1
 800590c:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d

  return HAL_OK;
 8005910:	2300      	movs	r3, #0
}
 8005912:	4618      	mov	r0, r3
 8005914:	3720      	adds	r7, #32
 8005916:	46bd      	mov	sp, r7
 8005918:	bd80      	pop	{r7, pc}
 800591a:	bf00      	nop
 800591c:	cccccccd 	.word	0xcccccccd
 8005920:	fe00ffff 	.word	0xfe00ffff
 8005924:	fdff9040 	.word	0xfdff9040

08005928 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8005928:	b5f0      	push	{r4, r5, r6, r7, lr}
 800592a:	b08f      	sub	sp, #60	; 0x3c
 800592c:	af0a      	add	r7, sp, #40	; 0x28
 800592e:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8005930:	687b      	ldr	r3, [r7, #4]
 8005932:	2b00      	cmp	r3, #0
 8005934:	d101      	bne.n	800593a <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8005936:	2301      	movs	r3, #1
 8005938:	e116      	b.n	8005b68 <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 800593a:	687b      	ldr	r3, [r7, #4]
 800593c:	681b      	ldr	r3, [r3, #0]
 800593e:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8005940:	687b      	ldr	r3, [r7, #4]
 8005942:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 8005946:	b2db      	uxtb	r3, r3
 8005948:	2b00      	cmp	r3, #0
 800594a:	d106      	bne.n	800595a <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 800594c:	687b      	ldr	r3, [r7, #4]
 800594e:	2200      	movs	r2, #0
 8005950:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8005954:	6878      	ldr	r0, [r7, #4]
 8005956:	f00c f9b7 	bl	8011cc8 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 800595a:	687b      	ldr	r3, [r7, #4]
 800595c:	2203      	movs	r2, #3
 800595e:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8005962:	68bb      	ldr	r3, [r7, #8]
 8005964:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005966:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800596a:	2b00      	cmp	r3, #0
 800596c:	d102      	bne.n	8005974 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 800596e:	687b      	ldr	r3, [r7, #4]
 8005970:	2200      	movs	r2, #0
 8005972:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8005974:	687b      	ldr	r3, [r7, #4]
 8005976:	681b      	ldr	r3, [r3, #0]
 8005978:	4618      	mov	r0, r3
 800597a:	f008 ff8e 	bl	800e89a <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800597e:	687b      	ldr	r3, [r7, #4]
 8005980:	681b      	ldr	r3, [r3, #0]
 8005982:	603b      	str	r3, [r7, #0]
 8005984:	687e      	ldr	r6, [r7, #4]
 8005986:	466d      	mov	r5, sp
 8005988:	f106 0410 	add.w	r4, r6, #16
 800598c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800598e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8005990:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8005992:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8005994:	e894 0003 	ldmia.w	r4, {r0, r1}
 8005998:	e885 0003 	stmia.w	r5, {r0, r1}
 800599c:	1d33      	adds	r3, r6, #4
 800599e:	cb0e      	ldmia	r3, {r1, r2, r3}
 80059a0:	6838      	ldr	r0, [r7, #0]
 80059a2:	f008 fe59 	bl	800e658 <USB_CoreInit>
 80059a6:	4603      	mov	r3, r0
 80059a8:	2b00      	cmp	r3, #0
 80059aa:	d005      	beq.n	80059b8 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80059ac:	687b      	ldr	r3, [r7, #4]
 80059ae:	2202      	movs	r2, #2
 80059b0:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 80059b4:	2301      	movs	r3, #1
 80059b6:	e0d7      	b.n	8005b68 <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 80059b8:	687b      	ldr	r3, [r7, #4]
 80059ba:	681b      	ldr	r3, [r3, #0]
 80059bc:	2100      	movs	r1, #0
 80059be:	4618      	mov	r0, r3
 80059c0:	f008 ff7c 	bl	800e8bc <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80059c4:	2300      	movs	r3, #0
 80059c6:	73fb      	strb	r3, [r7, #15]
 80059c8:	e04a      	b.n	8005a60 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80059ca:	7bfa      	ldrb	r2, [r7, #15]
 80059cc:	6879      	ldr	r1, [r7, #4]
 80059ce:	4613      	mov	r3, r2
 80059d0:	00db      	lsls	r3, r3, #3
 80059d2:	1a9b      	subs	r3, r3, r2
 80059d4:	009b      	lsls	r3, r3, #2
 80059d6:	440b      	add	r3, r1
 80059d8:	333d      	adds	r3, #61	; 0x3d
 80059da:	2201      	movs	r2, #1
 80059dc:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80059de:	7bfa      	ldrb	r2, [r7, #15]
 80059e0:	6879      	ldr	r1, [r7, #4]
 80059e2:	4613      	mov	r3, r2
 80059e4:	00db      	lsls	r3, r3, #3
 80059e6:	1a9b      	subs	r3, r3, r2
 80059e8:	009b      	lsls	r3, r3, #2
 80059ea:	440b      	add	r3, r1
 80059ec:	333c      	adds	r3, #60	; 0x3c
 80059ee:	7bfa      	ldrb	r2, [r7, #15]
 80059f0:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 80059f2:	7bfa      	ldrb	r2, [r7, #15]
 80059f4:	7bfb      	ldrb	r3, [r7, #15]
 80059f6:	b298      	uxth	r0, r3
 80059f8:	6879      	ldr	r1, [r7, #4]
 80059fa:	4613      	mov	r3, r2
 80059fc:	00db      	lsls	r3, r3, #3
 80059fe:	1a9b      	subs	r3, r3, r2
 8005a00:	009b      	lsls	r3, r3, #2
 8005a02:	440b      	add	r3, r1
 8005a04:	3342      	adds	r3, #66	; 0x42
 8005a06:	4602      	mov	r2, r0
 8005a08:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8005a0a:	7bfa      	ldrb	r2, [r7, #15]
 8005a0c:	6879      	ldr	r1, [r7, #4]
 8005a0e:	4613      	mov	r3, r2
 8005a10:	00db      	lsls	r3, r3, #3
 8005a12:	1a9b      	subs	r3, r3, r2
 8005a14:	009b      	lsls	r3, r3, #2
 8005a16:	440b      	add	r3, r1
 8005a18:	333f      	adds	r3, #63	; 0x3f
 8005a1a:	2200      	movs	r2, #0
 8005a1c:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8005a1e:	7bfa      	ldrb	r2, [r7, #15]
 8005a20:	6879      	ldr	r1, [r7, #4]
 8005a22:	4613      	mov	r3, r2
 8005a24:	00db      	lsls	r3, r3, #3
 8005a26:	1a9b      	subs	r3, r3, r2
 8005a28:	009b      	lsls	r3, r3, #2
 8005a2a:	440b      	add	r3, r1
 8005a2c:	3344      	adds	r3, #68	; 0x44
 8005a2e:	2200      	movs	r2, #0
 8005a30:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8005a32:	7bfa      	ldrb	r2, [r7, #15]
 8005a34:	6879      	ldr	r1, [r7, #4]
 8005a36:	4613      	mov	r3, r2
 8005a38:	00db      	lsls	r3, r3, #3
 8005a3a:	1a9b      	subs	r3, r3, r2
 8005a3c:	009b      	lsls	r3, r3, #2
 8005a3e:	440b      	add	r3, r1
 8005a40:	3348      	adds	r3, #72	; 0x48
 8005a42:	2200      	movs	r2, #0
 8005a44:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8005a46:	7bfa      	ldrb	r2, [r7, #15]
 8005a48:	6879      	ldr	r1, [r7, #4]
 8005a4a:	4613      	mov	r3, r2
 8005a4c:	00db      	lsls	r3, r3, #3
 8005a4e:	1a9b      	subs	r3, r3, r2
 8005a50:	009b      	lsls	r3, r3, #2
 8005a52:	440b      	add	r3, r1
 8005a54:	3350      	adds	r3, #80	; 0x50
 8005a56:	2200      	movs	r2, #0
 8005a58:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005a5a:	7bfb      	ldrb	r3, [r7, #15]
 8005a5c:	3301      	adds	r3, #1
 8005a5e:	73fb      	strb	r3, [r7, #15]
 8005a60:	7bfa      	ldrb	r2, [r7, #15]
 8005a62:	687b      	ldr	r3, [r7, #4]
 8005a64:	685b      	ldr	r3, [r3, #4]
 8005a66:	429a      	cmp	r2, r3
 8005a68:	d3af      	bcc.n	80059ca <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005a6a:	2300      	movs	r3, #0
 8005a6c:	73fb      	strb	r3, [r7, #15]
 8005a6e:	e044      	b.n	8005afa <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8005a70:	7bfa      	ldrb	r2, [r7, #15]
 8005a72:	6879      	ldr	r1, [r7, #4]
 8005a74:	4613      	mov	r3, r2
 8005a76:	00db      	lsls	r3, r3, #3
 8005a78:	1a9b      	subs	r3, r3, r2
 8005a7a:	009b      	lsls	r3, r3, #2
 8005a7c:	440b      	add	r3, r1
 8005a7e:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 8005a82:	2200      	movs	r2, #0
 8005a84:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8005a86:	7bfa      	ldrb	r2, [r7, #15]
 8005a88:	6879      	ldr	r1, [r7, #4]
 8005a8a:	4613      	mov	r3, r2
 8005a8c:	00db      	lsls	r3, r3, #3
 8005a8e:	1a9b      	subs	r3, r3, r2
 8005a90:	009b      	lsls	r3, r3, #2
 8005a92:	440b      	add	r3, r1
 8005a94:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 8005a98:	7bfa      	ldrb	r2, [r7, #15]
 8005a9a:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8005a9c:	7bfa      	ldrb	r2, [r7, #15]
 8005a9e:	6879      	ldr	r1, [r7, #4]
 8005aa0:	4613      	mov	r3, r2
 8005aa2:	00db      	lsls	r3, r3, #3
 8005aa4:	1a9b      	subs	r3, r3, r2
 8005aa6:	009b      	lsls	r3, r3, #2
 8005aa8:	440b      	add	r3, r1
 8005aaa:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 8005aae:	2200      	movs	r2, #0
 8005ab0:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8005ab2:	7bfa      	ldrb	r2, [r7, #15]
 8005ab4:	6879      	ldr	r1, [r7, #4]
 8005ab6:	4613      	mov	r3, r2
 8005ab8:	00db      	lsls	r3, r3, #3
 8005aba:	1a9b      	subs	r3, r3, r2
 8005abc:	009b      	lsls	r3, r3, #2
 8005abe:	440b      	add	r3, r1
 8005ac0:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8005ac4:	2200      	movs	r2, #0
 8005ac6:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8005ac8:	7bfa      	ldrb	r2, [r7, #15]
 8005aca:	6879      	ldr	r1, [r7, #4]
 8005acc:	4613      	mov	r3, r2
 8005ace:	00db      	lsls	r3, r3, #3
 8005ad0:	1a9b      	subs	r3, r3, r2
 8005ad2:	009b      	lsls	r3, r3, #2
 8005ad4:	440b      	add	r3, r1
 8005ad6:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8005ada:	2200      	movs	r2, #0
 8005adc:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8005ade:	7bfa      	ldrb	r2, [r7, #15]
 8005ae0:	6879      	ldr	r1, [r7, #4]
 8005ae2:	4613      	mov	r3, r2
 8005ae4:	00db      	lsls	r3, r3, #3
 8005ae6:	1a9b      	subs	r3, r3, r2
 8005ae8:	009b      	lsls	r3, r3, #2
 8005aea:	440b      	add	r3, r1
 8005aec:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8005af0:	2200      	movs	r2, #0
 8005af2:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005af4:	7bfb      	ldrb	r3, [r7, #15]
 8005af6:	3301      	adds	r3, #1
 8005af8:	73fb      	strb	r3, [r7, #15]
 8005afa:	7bfa      	ldrb	r2, [r7, #15]
 8005afc:	687b      	ldr	r3, [r7, #4]
 8005afe:	685b      	ldr	r3, [r3, #4]
 8005b00:	429a      	cmp	r2, r3
 8005b02:	d3b5      	bcc.n	8005a70 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8005b04:	687b      	ldr	r3, [r7, #4]
 8005b06:	681b      	ldr	r3, [r3, #0]
 8005b08:	603b      	str	r3, [r7, #0]
 8005b0a:	687e      	ldr	r6, [r7, #4]
 8005b0c:	466d      	mov	r5, sp
 8005b0e:	f106 0410 	add.w	r4, r6, #16
 8005b12:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8005b14:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8005b16:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8005b18:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8005b1a:	e894 0003 	ldmia.w	r4, {r0, r1}
 8005b1e:	e885 0003 	stmia.w	r5, {r0, r1}
 8005b22:	1d33      	adds	r3, r6, #4
 8005b24:	cb0e      	ldmia	r3, {r1, r2, r3}
 8005b26:	6838      	ldr	r0, [r7, #0]
 8005b28:	f008 fef2 	bl	800e910 <USB_DevInit>
 8005b2c:	4603      	mov	r3, r0
 8005b2e:	2b00      	cmp	r3, #0
 8005b30:	d005      	beq.n	8005b3e <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8005b32:	687b      	ldr	r3, [r7, #4]
 8005b34:	2202      	movs	r2, #2
 8005b36:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8005b3a:	2301      	movs	r3, #1
 8005b3c:	e014      	b.n	8005b68 <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 8005b3e:	687b      	ldr	r3, [r7, #4]
 8005b40:	2200      	movs	r2, #0
 8005b42:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8005b46:	687b      	ldr	r3, [r7, #4]
 8005b48:	2201      	movs	r2, #1
 8005b4a:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
  
  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8005b4e:	687b      	ldr	r3, [r7, #4]
 8005b50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b52:	2b01      	cmp	r3, #1
 8005b54:	d102      	bne.n	8005b5c <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8005b56:	6878      	ldr	r0, [r7, #4]
 8005b58:	f001 f87a 	bl	8006c50 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 8005b5c:	687b      	ldr	r3, [r7, #4]
 8005b5e:	681b      	ldr	r3, [r3, #0]
 8005b60:	4618      	mov	r0, r3
 8005b62:	f009 ff72 	bl	800fa4a <USB_DevDisconnect>

  return HAL_OK;
 8005b66:	2300      	movs	r3, #0
}
 8005b68:	4618      	mov	r0, r3
 8005b6a:	3714      	adds	r7, #20
 8005b6c:	46bd      	mov	sp, r7
 8005b6e:	bdf0      	pop	{r4, r5, r6, r7, pc}

08005b70 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8005b70:	b580      	push	{r7, lr}
 8005b72:	b084      	sub	sp, #16
 8005b74:	af00      	add	r7, sp, #0
 8005b76:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8005b78:	687b      	ldr	r3, [r7, #4]
 8005b7a:	681b      	ldr	r3, [r3, #0]
 8005b7c:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 8005b7e:	687b      	ldr	r3, [r7, #4]
 8005b80:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8005b84:	2b01      	cmp	r3, #1
 8005b86:	d101      	bne.n	8005b8c <HAL_PCD_Start+0x1c>
 8005b88:	2302      	movs	r3, #2
 8005b8a:	e020      	b.n	8005bce <HAL_PCD_Start+0x5e>
 8005b8c:	687b      	ldr	r3, [r7, #4]
 8005b8e:	2201      	movs	r2, #1
 8005b90:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8005b94:	687b      	ldr	r3, [r7, #4]
 8005b96:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005b98:	2b01      	cmp	r3, #1
 8005b9a:	d109      	bne.n	8005bb0 <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 8005b9c:	687b      	ldr	r3, [r7, #4]
 8005b9e:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8005ba0:	2b01      	cmp	r3, #1
 8005ba2:	d005      	beq.n	8005bb0 <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8005ba4:	68fb      	ldr	r3, [r7, #12]
 8005ba6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005ba8:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8005bac:	68fb      	ldr	r3, [r7, #12]
 8005bae:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 8005bb0:	687b      	ldr	r3, [r7, #4]
 8005bb2:	681b      	ldr	r3, [r3, #0]
 8005bb4:	4618      	mov	r0, r3
 8005bb6:	f008 fe5f 	bl	800e878 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8005bba:	687b      	ldr	r3, [r7, #4]
 8005bbc:	681b      	ldr	r3, [r3, #0]
 8005bbe:	4618      	mov	r0, r3
 8005bc0:	f009 ff22 	bl	800fa08 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8005bc4:	687b      	ldr	r3, [r7, #4]
 8005bc6:	2200      	movs	r2, #0
 8005bc8:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8005bcc:	2300      	movs	r3, #0
}
 8005bce:	4618      	mov	r0, r3
 8005bd0:	3710      	adds	r7, #16
 8005bd2:	46bd      	mov	sp, r7
 8005bd4:	bd80      	pop	{r7, pc}

08005bd6 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8005bd6:	b590      	push	{r4, r7, lr}
 8005bd8:	b08d      	sub	sp, #52	; 0x34
 8005bda:	af00      	add	r7, sp, #0
 8005bdc:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8005bde:	687b      	ldr	r3, [r7, #4]
 8005be0:	681b      	ldr	r3, [r3, #0]
 8005be2:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005be4:	6a3b      	ldr	r3, [r7, #32]
 8005be6:	61fb      	str	r3, [r7, #28]
  uint32_t i, ep_intr, epint, epnum;
  uint32_t fifoemptymsk, temp;
  USB_OTG_EPTypeDef *ep;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8005be8:	687b      	ldr	r3, [r7, #4]
 8005bea:	681b      	ldr	r3, [r3, #0]
 8005bec:	4618      	mov	r0, r3
 8005bee:	f009 ffe0 	bl	800fbb2 <USB_GetMode>
 8005bf2:	4603      	mov	r3, r0
 8005bf4:	2b00      	cmp	r3, #0
 8005bf6:	f040 83ca 	bne.w	800638e <HAL_PCD_IRQHandler+0x7b8>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8005bfa:	687b      	ldr	r3, [r7, #4]
 8005bfc:	681b      	ldr	r3, [r3, #0]
 8005bfe:	4618      	mov	r0, r3
 8005c00:	f009 ff44 	bl	800fa8c <USB_ReadInterrupts>
 8005c04:	4603      	mov	r3, r0
 8005c06:	2b00      	cmp	r3, #0
 8005c08:	f000 83c0 	beq.w	800638c <HAL_PCD_IRQHandler+0x7b6>
    {
      return;
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8005c0c:	687b      	ldr	r3, [r7, #4]
 8005c0e:	681b      	ldr	r3, [r3, #0]
 8005c10:	4618      	mov	r0, r3
 8005c12:	f009 ff3b 	bl	800fa8c <USB_ReadInterrupts>
 8005c16:	4603      	mov	r3, r0
 8005c18:	f003 0302 	and.w	r3, r3, #2
 8005c1c:	2b02      	cmp	r3, #2
 8005c1e:	d107      	bne.n	8005c30 <HAL_PCD_IRQHandler+0x5a>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8005c20:	687b      	ldr	r3, [r7, #4]
 8005c22:	681b      	ldr	r3, [r3, #0]
 8005c24:	695a      	ldr	r2, [r3, #20]
 8005c26:	687b      	ldr	r3, [r7, #4]
 8005c28:	681b      	ldr	r3, [r3, #0]
 8005c2a:	f002 0202 	and.w	r2, r2, #2
 8005c2e:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8005c30:	687b      	ldr	r3, [r7, #4]
 8005c32:	681b      	ldr	r3, [r3, #0]
 8005c34:	4618      	mov	r0, r3
 8005c36:	f009 ff29 	bl	800fa8c <USB_ReadInterrupts>
 8005c3a:	4603      	mov	r3, r0
 8005c3c:	f003 0310 	and.w	r3, r3, #16
 8005c40:	2b10      	cmp	r3, #16
 8005c42:	d161      	bne.n	8005d08 <HAL_PCD_IRQHandler+0x132>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8005c44:	687b      	ldr	r3, [r7, #4]
 8005c46:	681b      	ldr	r3, [r3, #0]
 8005c48:	699a      	ldr	r2, [r3, #24]
 8005c4a:	687b      	ldr	r3, [r7, #4]
 8005c4c:	681b      	ldr	r3, [r3, #0]
 8005c4e:	f022 0210 	bic.w	r2, r2, #16
 8005c52:	619a      	str	r2, [r3, #24]

      temp = USBx->GRXSTSP;
 8005c54:	6a3b      	ldr	r3, [r7, #32]
 8005c56:	6a1b      	ldr	r3, [r3, #32]
 8005c58:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[temp & USB_OTG_GRXSTSP_EPNUM];
 8005c5a:	69bb      	ldr	r3, [r7, #24]
 8005c5c:	f003 020f 	and.w	r2, r3, #15
 8005c60:	4613      	mov	r3, r2
 8005c62:	00db      	lsls	r3, r3, #3
 8005c64:	1a9b      	subs	r3, r3, r2
 8005c66:	009b      	lsls	r3, r3, #2
 8005c68:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8005c6c:	687a      	ldr	r2, [r7, #4]
 8005c6e:	4413      	add	r3, r2
 8005c70:	3304      	adds	r3, #4
 8005c72:	617b      	str	r3, [r7, #20]

      if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8005c74:	69bb      	ldr	r3, [r7, #24]
 8005c76:	0c5b      	lsrs	r3, r3, #17
 8005c78:	f003 030f 	and.w	r3, r3, #15
 8005c7c:	2b02      	cmp	r3, #2
 8005c7e:	d124      	bne.n	8005cca <HAL_PCD_IRQHandler+0xf4>
      {
        if ((temp & USB_OTG_GRXSTSP_BCNT) != 0U)
 8005c80:	69ba      	ldr	r2, [r7, #24]
 8005c82:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 8005c86:	4013      	ands	r3, r2
 8005c88:	2b00      	cmp	r3, #0
 8005c8a:	d035      	beq.n	8005cf8 <HAL_PCD_IRQHandler+0x122>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8005c8c:	697b      	ldr	r3, [r7, #20]
 8005c8e:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((temp & USB_OTG_GRXSTSP_BCNT) >> 4));
 8005c90:	69bb      	ldr	r3, [r7, #24]
 8005c92:	091b      	lsrs	r3, r3, #4
 8005c94:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8005c96:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8005c9a:	b29b      	uxth	r3, r3
 8005c9c:	461a      	mov	r2, r3
 8005c9e:	6a38      	ldr	r0, [r7, #32]
 8005ca0:	f009 fd60 	bl	800f764 <USB_ReadPacket>

          ep->xfer_buff += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8005ca4:	697b      	ldr	r3, [r7, #20]
 8005ca6:	68da      	ldr	r2, [r3, #12]
 8005ca8:	69bb      	ldr	r3, [r7, #24]
 8005caa:	091b      	lsrs	r3, r3, #4
 8005cac:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8005cb0:	441a      	add	r2, r3
 8005cb2:	697b      	ldr	r3, [r7, #20]
 8005cb4:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8005cb6:	697b      	ldr	r3, [r7, #20]
 8005cb8:	699a      	ldr	r2, [r3, #24]
 8005cba:	69bb      	ldr	r3, [r7, #24]
 8005cbc:	091b      	lsrs	r3, r3, #4
 8005cbe:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8005cc2:	441a      	add	r2, r3
 8005cc4:	697b      	ldr	r3, [r7, #20]
 8005cc6:	619a      	str	r2, [r3, #24]
 8005cc8:	e016      	b.n	8005cf8 <HAL_PCD_IRQHandler+0x122>
        }
      }
      else if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_SETUP_UPDT)
 8005cca:	69bb      	ldr	r3, [r7, #24]
 8005ccc:	0c5b      	lsrs	r3, r3, #17
 8005cce:	f003 030f 	and.w	r3, r3, #15
 8005cd2:	2b06      	cmp	r3, #6
 8005cd4:	d110      	bne.n	8005cf8 <HAL_PCD_IRQHandler+0x122>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8005cd6:	687b      	ldr	r3, [r7, #4]
 8005cd8:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8005cdc:	2208      	movs	r2, #8
 8005cde:	4619      	mov	r1, r3
 8005ce0:	6a38      	ldr	r0, [r7, #32]
 8005ce2:	f009 fd3f 	bl	800f764 <USB_ReadPacket>
        ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8005ce6:	697b      	ldr	r3, [r7, #20]
 8005ce8:	699a      	ldr	r2, [r3, #24]
 8005cea:	69bb      	ldr	r3, [r7, #24]
 8005cec:	091b      	lsrs	r3, r3, #4
 8005cee:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8005cf2:	441a      	add	r2, r3
 8005cf4:	697b      	ldr	r3, [r7, #20]
 8005cf6:	619a      	str	r2, [r3, #24]
      }
      else
      {
        /* ... */
      }
      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8005cf8:	687b      	ldr	r3, [r7, #4]
 8005cfa:	681b      	ldr	r3, [r3, #0]
 8005cfc:	699a      	ldr	r2, [r3, #24]
 8005cfe:	687b      	ldr	r3, [r7, #4]
 8005d00:	681b      	ldr	r3, [r3, #0]
 8005d02:	f042 0210 	orr.w	r2, r2, #16
 8005d06:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8005d08:	687b      	ldr	r3, [r7, #4]
 8005d0a:	681b      	ldr	r3, [r3, #0]
 8005d0c:	4618      	mov	r0, r3
 8005d0e:	f009 febd 	bl	800fa8c <USB_ReadInterrupts>
 8005d12:	4603      	mov	r3, r0
 8005d14:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8005d18:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8005d1c:	d16e      	bne.n	8005dfc <HAL_PCD_IRQHandler+0x226>
    {
      epnum = 0U;
 8005d1e:	2300      	movs	r3, #0
 8005d20:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8005d22:	687b      	ldr	r3, [r7, #4]
 8005d24:	681b      	ldr	r3, [r3, #0]
 8005d26:	4618      	mov	r0, r3
 8005d28:	f009 fec3 	bl	800fab2 <USB_ReadDevAllOutEpInterrupt>
 8005d2c:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 8005d2e:	e062      	b.n	8005df6 <HAL_PCD_IRQHandler+0x220>
      {
        if ((ep_intr & 0x1U) != 0U)
 8005d30:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005d32:	f003 0301 	and.w	r3, r3, #1
 8005d36:	2b00      	cmp	r3, #0
 8005d38:	d057      	beq.n	8005dea <HAL_PCD_IRQHandler+0x214>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8005d3a:	687b      	ldr	r3, [r7, #4]
 8005d3c:	681b      	ldr	r3, [r3, #0]
 8005d3e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005d40:	b2d2      	uxtb	r2, r2
 8005d42:	4611      	mov	r1, r2
 8005d44:	4618      	mov	r0, r3
 8005d46:	f009 fee8 	bl	800fb1a <USB_ReadDevOutEPInterrupt>
 8005d4a:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8005d4c:	693b      	ldr	r3, [r7, #16]
 8005d4e:	f003 0301 	and.w	r3, r3, #1
 8005d52:	2b00      	cmp	r3, #0
 8005d54:	d00c      	beq.n	8005d70 <HAL_PCD_IRQHandler+0x19a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8005d56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d58:	015a      	lsls	r2, r3, #5
 8005d5a:	69fb      	ldr	r3, [r7, #28]
 8005d5c:	4413      	add	r3, r2
 8005d5e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005d62:	461a      	mov	r2, r3
 8005d64:	2301      	movs	r3, #1
 8005d66:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8005d68:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8005d6a:	6878      	ldr	r0, [r7, #4]
 8005d6c:	f000 fdc6 	bl	80068fc <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8005d70:	693b      	ldr	r3, [r7, #16]
 8005d72:	f003 0308 	and.w	r3, r3, #8
 8005d76:	2b00      	cmp	r3, #0
 8005d78:	d00c      	beq.n	8005d94 <HAL_PCD_IRQHandler+0x1be>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8005d7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d7c:	015a      	lsls	r2, r3, #5
 8005d7e:	69fb      	ldr	r3, [r7, #28]
 8005d80:	4413      	add	r3, r2
 8005d82:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005d86:	461a      	mov	r2, r3
 8005d88:	2308      	movs	r3, #8
 8005d8a:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8005d8c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8005d8e:	6878      	ldr	r0, [r7, #4]
 8005d90:	f000 fec0 	bl	8006b14 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8005d94:	693b      	ldr	r3, [r7, #16]
 8005d96:	f003 0310 	and.w	r3, r3, #16
 8005d9a:	2b00      	cmp	r3, #0
 8005d9c:	d008      	beq.n	8005db0 <HAL_PCD_IRQHandler+0x1da>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8005d9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005da0:	015a      	lsls	r2, r3, #5
 8005da2:	69fb      	ldr	r3, [r7, #28]
 8005da4:	4413      	add	r3, r2
 8005da6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005daa:	461a      	mov	r2, r3
 8005dac:	2310      	movs	r3, #16
 8005dae:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8005db0:	693b      	ldr	r3, [r7, #16]
 8005db2:	f003 0320 	and.w	r3, r3, #32
 8005db6:	2b00      	cmp	r3, #0
 8005db8:	d008      	beq.n	8005dcc <HAL_PCD_IRQHandler+0x1f6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8005dba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005dbc:	015a      	lsls	r2, r3, #5
 8005dbe:	69fb      	ldr	r3, [r7, #28]
 8005dc0:	4413      	add	r3, r2
 8005dc2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005dc6:	461a      	mov	r2, r3
 8005dc8:	2320      	movs	r3, #32
 8005dca:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8005dcc:	693b      	ldr	r3, [r7, #16]
 8005dce:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005dd2:	2b00      	cmp	r3, #0
 8005dd4:	d009      	beq.n	8005dea <HAL_PCD_IRQHandler+0x214>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8005dd6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005dd8:	015a      	lsls	r2, r3, #5
 8005dda:	69fb      	ldr	r3, [r7, #28]
 8005ddc:	4413      	add	r3, r2
 8005dde:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005de2:	461a      	mov	r2, r3
 8005de4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8005de8:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8005dea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005dec:	3301      	adds	r3, #1
 8005dee:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8005df0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005df2:	085b      	lsrs	r3, r3, #1
 8005df4:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8005df6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005df8:	2b00      	cmp	r3, #0
 8005dfa:	d199      	bne.n	8005d30 <HAL_PCD_IRQHandler+0x15a>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8005dfc:	687b      	ldr	r3, [r7, #4]
 8005dfe:	681b      	ldr	r3, [r3, #0]
 8005e00:	4618      	mov	r0, r3
 8005e02:	f009 fe43 	bl	800fa8c <USB_ReadInterrupts>
 8005e06:	4603      	mov	r3, r0
 8005e08:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005e0c:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8005e10:	f040 80c0 	bne.w	8005f94 <HAL_PCD_IRQHandler+0x3be>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8005e14:	687b      	ldr	r3, [r7, #4]
 8005e16:	681b      	ldr	r3, [r3, #0]
 8005e18:	4618      	mov	r0, r3
 8005e1a:	f009 fe64 	bl	800fae6 <USB_ReadDevAllInEpInterrupt>
 8005e1e:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 8005e20:	2300      	movs	r3, #0
 8005e22:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 8005e24:	e0b2      	b.n	8005f8c <HAL_PCD_IRQHandler+0x3b6>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8005e26:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005e28:	f003 0301 	and.w	r3, r3, #1
 8005e2c:	2b00      	cmp	r3, #0
 8005e2e:	f000 80a7 	beq.w	8005f80 <HAL_PCD_IRQHandler+0x3aa>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8005e32:	687b      	ldr	r3, [r7, #4]
 8005e34:	681b      	ldr	r3, [r3, #0]
 8005e36:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005e38:	b2d2      	uxtb	r2, r2
 8005e3a:	4611      	mov	r1, r2
 8005e3c:	4618      	mov	r0, r3
 8005e3e:	f009 fe8a 	bl	800fb56 <USB_ReadDevInEPInterrupt>
 8005e42:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8005e44:	693b      	ldr	r3, [r7, #16]
 8005e46:	f003 0301 	and.w	r3, r3, #1
 8005e4a:	2b00      	cmp	r3, #0
 8005e4c:	d057      	beq.n	8005efe <HAL_PCD_IRQHandler+0x328>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8005e4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e50:	f003 030f 	and.w	r3, r3, #15
 8005e54:	2201      	movs	r2, #1
 8005e56:	fa02 f303 	lsl.w	r3, r2, r3
 8005e5a:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8005e5c:	69fb      	ldr	r3, [r7, #28]
 8005e5e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005e62:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005e64:	68fb      	ldr	r3, [r7, #12]
 8005e66:	43db      	mvns	r3, r3
 8005e68:	69f9      	ldr	r1, [r7, #28]
 8005e6a:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005e6e:	4013      	ands	r3, r2
 8005e70:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8005e72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e74:	015a      	lsls	r2, r3, #5
 8005e76:	69fb      	ldr	r3, [r7, #28]
 8005e78:	4413      	add	r3, r2
 8005e7a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005e7e:	461a      	mov	r2, r3
 8005e80:	2301      	movs	r3, #1
 8005e82:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8005e84:	687b      	ldr	r3, [r7, #4]
 8005e86:	691b      	ldr	r3, [r3, #16]
 8005e88:	2b01      	cmp	r3, #1
 8005e8a:	d132      	bne.n	8005ef2 <HAL_PCD_IRQHandler+0x31c>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8005e8c:	6879      	ldr	r1, [r7, #4]
 8005e8e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005e90:	4613      	mov	r3, r2
 8005e92:	00db      	lsls	r3, r3, #3
 8005e94:	1a9b      	subs	r3, r3, r2
 8005e96:	009b      	lsls	r3, r3, #2
 8005e98:	440b      	add	r3, r1
 8005e9a:	3348      	adds	r3, #72	; 0x48
 8005e9c:	6819      	ldr	r1, [r3, #0]
 8005e9e:	6878      	ldr	r0, [r7, #4]
 8005ea0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005ea2:	4613      	mov	r3, r2
 8005ea4:	00db      	lsls	r3, r3, #3
 8005ea6:	1a9b      	subs	r3, r3, r2
 8005ea8:	009b      	lsls	r3, r3, #2
 8005eaa:	4403      	add	r3, r0
 8005eac:	3344      	adds	r3, #68	; 0x44
 8005eae:	681b      	ldr	r3, [r3, #0]
 8005eb0:	4419      	add	r1, r3
 8005eb2:	6878      	ldr	r0, [r7, #4]
 8005eb4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005eb6:	4613      	mov	r3, r2
 8005eb8:	00db      	lsls	r3, r3, #3
 8005eba:	1a9b      	subs	r3, r3, r2
 8005ebc:	009b      	lsls	r3, r3, #2
 8005ebe:	4403      	add	r3, r0
 8005ec0:	3348      	adds	r3, #72	; 0x48
 8005ec2:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8005ec4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ec6:	2b00      	cmp	r3, #0
 8005ec8:	d113      	bne.n	8005ef2 <HAL_PCD_IRQHandler+0x31c>
 8005eca:	6879      	ldr	r1, [r7, #4]
 8005ecc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005ece:	4613      	mov	r3, r2
 8005ed0:	00db      	lsls	r3, r3, #3
 8005ed2:	1a9b      	subs	r3, r3, r2
 8005ed4:	009b      	lsls	r3, r3, #2
 8005ed6:	440b      	add	r3, r1
 8005ed8:	3350      	adds	r3, #80	; 0x50
 8005eda:	681b      	ldr	r3, [r3, #0]
 8005edc:	2b00      	cmp	r3, #0
 8005ede:	d108      	bne.n	8005ef2 <HAL_PCD_IRQHandler+0x31c>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8005ee0:	687b      	ldr	r3, [r7, #4]
 8005ee2:	6818      	ldr	r0, [r3, #0]
 8005ee4:	687b      	ldr	r3, [r7, #4]
 8005ee6:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8005eea:	461a      	mov	r2, r3
 8005eec:	2101      	movs	r1, #1
 8005eee:	f009 fe93 	bl	800fc18 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8005ef2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ef4:	b2db      	uxtb	r3, r3
 8005ef6:	4619      	mov	r1, r3
 8005ef8:	6878      	ldr	r0, [r7, #4]
 8005efa:	f00b ff84 	bl	8011e06 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8005efe:	693b      	ldr	r3, [r7, #16]
 8005f00:	f003 0308 	and.w	r3, r3, #8
 8005f04:	2b00      	cmp	r3, #0
 8005f06:	d008      	beq.n	8005f1a <HAL_PCD_IRQHandler+0x344>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8005f08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f0a:	015a      	lsls	r2, r3, #5
 8005f0c:	69fb      	ldr	r3, [r7, #28]
 8005f0e:	4413      	add	r3, r2
 8005f10:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005f14:	461a      	mov	r2, r3
 8005f16:	2308      	movs	r3, #8
 8005f18:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8005f1a:	693b      	ldr	r3, [r7, #16]
 8005f1c:	f003 0310 	and.w	r3, r3, #16
 8005f20:	2b00      	cmp	r3, #0
 8005f22:	d008      	beq.n	8005f36 <HAL_PCD_IRQHandler+0x360>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8005f24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f26:	015a      	lsls	r2, r3, #5
 8005f28:	69fb      	ldr	r3, [r7, #28]
 8005f2a:	4413      	add	r3, r2
 8005f2c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005f30:	461a      	mov	r2, r3
 8005f32:	2310      	movs	r3, #16
 8005f34:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8005f36:	693b      	ldr	r3, [r7, #16]
 8005f38:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005f3c:	2b00      	cmp	r3, #0
 8005f3e:	d008      	beq.n	8005f52 <HAL_PCD_IRQHandler+0x37c>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8005f40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f42:	015a      	lsls	r2, r3, #5
 8005f44:	69fb      	ldr	r3, [r7, #28]
 8005f46:	4413      	add	r3, r2
 8005f48:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005f4c:	461a      	mov	r2, r3
 8005f4e:	2340      	movs	r3, #64	; 0x40
 8005f50:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8005f52:	693b      	ldr	r3, [r7, #16]
 8005f54:	f003 0302 	and.w	r3, r3, #2
 8005f58:	2b00      	cmp	r3, #0
 8005f5a:	d008      	beq.n	8005f6e <HAL_PCD_IRQHandler+0x398>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8005f5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f5e:	015a      	lsls	r2, r3, #5
 8005f60:	69fb      	ldr	r3, [r7, #28]
 8005f62:	4413      	add	r3, r2
 8005f64:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005f68:	461a      	mov	r2, r3
 8005f6a:	2302      	movs	r3, #2
 8005f6c:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8005f6e:	693b      	ldr	r3, [r7, #16]
 8005f70:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005f74:	2b00      	cmp	r3, #0
 8005f76:	d003      	beq.n	8005f80 <HAL_PCD_IRQHandler+0x3aa>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8005f78:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8005f7a:	6878      	ldr	r0, [r7, #4]
 8005f7c:	f000 fc30 	bl	80067e0 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8005f80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f82:	3301      	adds	r3, #1
 8005f84:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8005f86:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005f88:	085b      	lsrs	r3, r3, #1
 8005f8a:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8005f8c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005f8e:	2b00      	cmp	r3, #0
 8005f90:	f47f af49 	bne.w	8005e26 <HAL_PCD_IRQHandler+0x250>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8005f94:	687b      	ldr	r3, [r7, #4]
 8005f96:	681b      	ldr	r3, [r3, #0]
 8005f98:	4618      	mov	r0, r3
 8005f9a:	f009 fd77 	bl	800fa8c <USB_ReadInterrupts>
 8005f9e:	4603      	mov	r3, r0
 8005fa0:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005fa4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005fa8:	d122      	bne.n	8005ff0 <HAL_PCD_IRQHandler+0x41a>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8005faa:	69fb      	ldr	r3, [r7, #28]
 8005fac:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005fb0:	685b      	ldr	r3, [r3, #4]
 8005fb2:	69fa      	ldr	r2, [r7, #28]
 8005fb4:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005fb8:	f023 0301 	bic.w	r3, r3, #1
 8005fbc:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8005fbe:	687b      	ldr	r3, [r7, #4]
 8005fc0:	f893 33f4 	ldrb.w	r3, [r3, #1012]	; 0x3f4
 8005fc4:	2b01      	cmp	r3, #1
 8005fc6:	d108      	bne.n	8005fda <HAL_PCD_IRQHandler+0x404>
      {
        hpcd->LPM_State = LPM_L0;
 8005fc8:	687b      	ldr	r3, [r7, #4]
 8005fca:	2200      	movs	r2, #0
 8005fcc:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8005fd0:	2100      	movs	r1, #0
 8005fd2:	6878      	ldr	r0, [r7, #4]
 8005fd4:	f000 fe60 	bl	8006c98 <HAL_PCDEx_LPM_Callback>
 8005fd8:	e002      	b.n	8005fe0 <HAL_PCD_IRQHandler+0x40a>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8005fda:	6878      	ldr	r0, [r7, #4]
 8005fdc:	f00b ff8a 	bl	8011ef4 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8005fe0:	687b      	ldr	r3, [r7, #4]
 8005fe2:	681b      	ldr	r3, [r3, #0]
 8005fe4:	695a      	ldr	r2, [r3, #20]
 8005fe6:	687b      	ldr	r3, [r7, #4]
 8005fe8:	681b      	ldr	r3, [r3, #0]
 8005fea:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 8005fee:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8005ff0:	687b      	ldr	r3, [r7, #4]
 8005ff2:	681b      	ldr	r3, [r3, #0]
 8005ff4:	4618      	mov	r0, r3
 8005ff6:	f009 fd49 	bl	800fa8c <USB_ReadInterrupts>
 8005ffa:	4603      	mov	r3, r0
 8005ffc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006000:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006004:	d112      	bne.n	800602c <HAL_PCD_IRQHandler+0x456>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8006006:	69fb      	ldr	r3, [r7, #28]
 8006008:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800600c:	689b      	ldr	r3, [r3, #8]
 800600e:	f003 0301 	and.w	r3, r3, #1
 8006012:	2b01      	cmp	r3, #1
 8006014:	d102      	bne.n	800601c <HAL_PCD_IRQHandler+0x446>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8006016:	6878      	ldr	r0, [r7, #4]
 8006018:	f00b ff46 	bl	8011ea8 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 800601c:	687b      	ldr	r3, [r7, #4]
 800601e:	681b      	ldr	r3, [r3, #0]
 8006020:	695a      	ldr	r2, [r3, #20]
 8006022:	687b      	ldr	r3, [r7, #4]
 8006024:	681b      	ldr	r3, [r3, #0]
 8006026:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 800602a:	615a      	str	r2, [r3, #20]
    }

    /* Handle LPM Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT))
 800602c:	687b      	ldr	r3, [r7, #4]
 800602e:	681b      	ldr	r3, [r3, #0]
 8006030:	4618      	mov	r0, r3
 8006032:	f009 fd2b 	bl	800fa8c <USB_ReadInterrupts>
 8006036:	4603      	mov	r3, r0
 8006038:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800603c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006040:	d121      	bne.n	8006086 <HAL_PCD_IRQHandler+0x4b0>
    {
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT);
 8006042:	687b      	ldr	r3, [r7, #4]
 8006044:	681b      	ldr	r3, [r3, #0]
 8006046:	695a      	ldr	r2, [r3, #20]
 8006048:	687b      	ldr	r3, [r7, #4]
 800604a:	681b      	ldr	r3, [r3, #0]
 800604c:	f002 6200 	and.w	r2, r2, #134217728	; 0x8000000
 8006050:	615a      	str	r2, [r3, #20]

      if (hpcd->LPM_State == LPM_L0)
 8006052:	687b      	ldr	r3, [r7, #4]
 8006054:	f893 33f4 	ldrb.w	r3, [r3, #1012]	; 0x3f4
 8006058:	2b00      	cmp	r3, #0
 800605a:	d111      	bne.n	8006080 <HAL_PCD_IRQHandler+0x4aa>
      {
        hpcd->LPM_State = LPM_L1;
 800605c:	687b      	ldr	r3, [r7, #4]
 800605e:	2201      	movs	r2, #1
 8006060:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4
        hpcd->BESL = (hpcd->Instance->GLPMCFG & USB_OTG_GLPMCFG_BESL) >> 2U;
 8006064:	687b      	ldr	r3, [r7, #4]
 8006066:	681b      	ldr	r3, [r3, #0]
 8006068:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800606a:	089b      	lsrs	r3, r3, #2
 800606c:	f003 020f 	and.w	r2, r3, #15
 8006070:	687b      	ldr	r3, [r7, #4]
 8006072:	f8c3 23f8 	str.w	r2, [r3, #1016]	; 0x3f8

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 8006076:	2101      	movs	r1, #1
 8006078:	6878      	ldr	r0, [r7, #4]
 800607a:	f000 fe0d 	bl	8006c98 <HAL_PCDEx_LPM_Callback>
 800607e:	e002      	b.n	8006086 <HAL_PCD_IRQHandler+0x4b0>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8006080:	6878      	ldr	r0, [r7, #4]
 8006082:	f00b ff11 	bl	8011ea8 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8006086:	687b      	ldr	r3, [r7, #4]
 8006088:	681b      	ldr	r3, [r3, #0]
 800608a:	4618      	mov	r0, r3
 800608c:	f009 fcfe 	bl	800fa8c <USB_ReadInterrupts>
 8006090:	4603      	mov	r3, r0
 8006092:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8006096:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800609a:	f040 80c7 	bne.w	800622c <HAL_PCD_IRQHandler+0x656>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 800609e:	69fb      	ldr	r3, [r7, #28]
 80060a0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80060a4:	685b      	ldr	r3, [r3, #4]
 80060a6:	69fa      	ldr	r2, [r7, #28]
 80060a8:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80060ac:	f023 0301 	bic.w	r3, r3, #1
 80060b0:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 80060b2:	687b      	ldr	r3, [r7, #4]
 80060b4:	681b      	ldr	r3, [r3, #0]
 80060b6:	2110      	movs	r1, #16
 80060b8:	4618      	mov	r0, r3
 80060ba:	f008 fd87 	bl	800ebcc <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80060be:	2300      	movs	r3, #0
 80060c0:	62fb      	str	r3, [r7, #44]	; 0x2c
 80060c2:	e056      	b.n	8006172 <HAL_PCD_IRQHandler+0x59c>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 80060c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80060c6:	015a      	lsls	r2, r3, #5
 80060c8:	69fb      	ldr	r3, [r7, #28]
 80060ca:	4413      	add	r3, r2
 80060cc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80060d0:	461a      	mov	r2, r3
 80060d2:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80060d6:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 80060d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80060da:	015a      	lsls	r2, r3, #5
 80060dc:	69fb      	ldr	r3, [r7, #28]
 80060de:	4413      	add	r3, r2
 80060e0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80060e4:	681b      	ldr	r3, [r3, #0]
 80060e6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80060e8:	0151      	lsls	r1, r2, #5
 80060ea:	69fa      	ldr	r2, [r7, #28]
 80060ec:	440a      	add	r2, r1
 80060ee:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80060f2:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80060f6:	6013      	str	r3, [r2, #0]
        USBx_INEP(i)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 80060f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80060fa:	015a      	lsls	r2, r3, #5
 80060fc:	69fb      	ldr	r3, [r7, #28]
 80060fe:	4413      	add	r3, r2
 8006100:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006104:	681b      	ldr	r3, [r3, #0]
 8006106:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006108:	0151      	lsls	r1, r2, #5
 800610a:	69fa      	ldr	r2, [r7, #28]
 800610c:	440a      	add	r2, r1
 800610e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006112:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8006116:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8006118:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800611a:	015a      	lsls	r2, r3, #5
 800611c:	69fb      	ldr	r3, [r7, #28]
 800611e:	4413      	add	r3, r2
 8006120:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006124:	461a      	mov	r2, r3
 8006126:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800612a:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800612c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800612e:	015a      	lsls	r2, r3, #5
 8006130:	69fb      	ldr	r3, [r7, #28]
 8006132:	4413      	add	r3, r2
 8006134:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006138:	681b      	ldr	r3, [r3, #0]
 800613a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800613c:	0151      	lsls	r1, r2, #5
 800613e:	69fa      	ldr	r2, [r7, #28]
 8006140:	440a      	add	r2, r1
 8006142:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006146:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800614a:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 800614c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800614e:	015a      	lsls	r2, r3, #5
 8006150:	69fb      	ldr	r3, [r7, #28]
 8006152:	4413      	add	r3, r2
 8006154:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006158:	681b      	ldr	r3, [r3, #0]
 800615a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800615c:	0151      	lsls	r1, r2, #5
 800615e:	69fa      	ldr	r2, [r7, #28]
 8006160:	440a      	add	r2, r1
 8006162:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006166:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800616a:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800616c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800616e:	3301      	adds	r3, #1
 8006170:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006172:	687b      	ldr	r3, [r7, #4]
 8006174:	685b      	ldr	r3, [r3, #4]
 8006176:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006178:	429a      	cmp	r2, r3
 800617a:	d3a3      	bcc.n	80060c4 <HAL_PCD_IRQHandler+0x4ee>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 800617c:	69fb      	ldr	r3, [r7, #28]
 800617e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006182:	69db      	ldr	r3, [r3, #28]
 8006184:	69fa      	ldr	r2, [r7, #28]
 8006186:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800618a:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 800618e:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8006190:	687b      	ldr	r3, [r7, #4]
 8006192:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006194:	2b00      	cmp	r3, #0
 8006196:	d016      	beq.n	80061c6 <HAL_PCD_IRQHandler+0x5f0>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8006198:	69fb      	ldr	r3, [r7, #28]
 800619a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800619e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80061a2:	69fa      	ldr	r2, [r7, #28]
 80061a4:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80061a8:	f043 030b 	orr.w	r3, r3, #11
 80061ac:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 80061b0:	69fb      	ldr	r3, [r7, #28]
 80061b2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80061b6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80061b8:	69fa      	ldr	r2, [r7, #28]
 80061ba:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80061be:	f043 030b 	orr.w	r3, r3, #11
 80061c2:	6453      	str	r3, [r2, #68]	; 0x44
 80061c4:	e015      	b.n	80061f2 <HAL_PCD_IRQHandler+0x61c>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 80061c6:	69fb      	ldr	r3, [r7, #28]
 80061c8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80061cc:	695a      	ldr	r2, [r3, #20]
 80061ce:	69fb      	ldr	r3, [r7, #28]
 80061d0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80061d4:	4619      	mov	r1, r3
 80061d6:	f242 032b 	movw	r3, #8235	; 0x202b
 80061da:	4313      	orrs	r3, r2
 80061dc:	614b      	str	r3, [r1, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 80061de:	69fb      	ldr	r3, [r7, #28]
 80061e0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80061e4:	691b      	ldr	r3, [r3, #16]
 80061e6:	69fa      	ldr	r2, [r7, #28]
 80061e8:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80061ec:	f043 030b 	orr.w	r3, r3, #11
 80061f0:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 80061f2:	69fb      	ldr	r3, [r7, #28]
 80061f4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80061f8:	681b      	ldr	r3, [r3, #0]
 80061fa:	69fa      	ldr	r2, [r7, #28]
 80061fc:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006200:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8006204:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8006206:	687b      	ldr	r3, [r7, #4]
 8006208:	6818      	ldr	r0, [r3, #0]
 800620a:	687b      	ldr	r3, [r7, #4]
 800620c:	691b      	ldr	r3, [r3, #16]
 800620e:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 8006210:	687b      	ldr	r3, [r7, #4]
 8006212:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8006216:	461a      	mov	r2, r3
 8006218:	f009 fcfe 	bl	800fc18 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 800621c:	687b      	ldr	r3, [r7, #4]
 800621e:	681b      	ldr	r3, [r3, #0]
 8006220:	695a      	ldr	r2, [r3, #20]
 8006222:	687b      	ldr	r3, [r7, #4]
 8006224:	681b      	ldr	r3, [r3, #0]
 8006226:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 800622a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 800622c:	687b      	ldr	r3, [r7, #4]
 800622e:	681b      	ldr	r3, [r3, #0]
 8006230:	4618      	mov	r0, r3
 8006232:	f009 fc2b 	bl	800fa8c <USB_ReadInterrupts>
 8006236:	4603      	mov	r3, r0
 8006238:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800623c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006240:	d124      	bne.n	800628c <HAL_PCD_IRQHandler+0x6b6>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8006242:	687b      	ldr	r3, [r7, #4]
 8006244:	681b      	ldr	r3, [r3, #0]
 8006246:	4618      	mov	r0, r3
 8006248:	f009 fcc2 	bl	800fbd0 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 800624c:	687b      	ldr	r3, [r7, #4]
 800624e:	681b      	ldr	r3, [r3, #0]
 8006250:	4618      	mov	r0, r3
 8006252:	f008 fd1c 	bl	800ec8e <USB_GetDevSpeed>
 8006256:	4603      	mov	r3, r0
 8006258:	461a      	mov	r2, r3
 800625a:	687b      	ldr	r3, [r7, #4]
 800625c:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 800625e:	687b      	ldr	r3, [r7, #4]
 8006260:	681c      	ldr	r4, [r3, #0]
 8006262:	f001 fcad 	bl	8007bc0 <HAL_RCC_GetHCLKFreq>
 8006266:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8006268:	687b      	ldr	r3, [r7, #4]
 800626a:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 800626c:	b2db      	uxtb	r3, r3
 800626e:	461a      	mov	r2, r3
 8006270:	4620      	mov	r0, r4
 8006272:	f008 fa5f 	bl	800e734 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8006276:	6878      	ldr	r0, [r7, #4]
 8006278:	f00b fded 	bl	8011e56 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 800627c:	687b      	ldr	r3, [r7, #4]
 800627e:	681b      	ldr	r3, [r3, #0]
 8006280:	695a      	ldr	r2, [r3, #20]
 8006282:	687b      	ldr	r3, [r7, #4]
 8006284:	681b      	ldr	r3, [r3, #0]
 8006286:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 800628a:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 800628c:	687b      	ldr	r3, [r7, #4]
 800628e:	681b      	ldr	r3, [r3, #0]
 8006290:	4618      	mov	r0, r3
 8006292:	f009 fbfb 	bl	800fa8c <USB_ReadInterrupts>
 8006296:	4603      	mov	r3, r0
 8006298:	f003 0308 	and.w	r3, r3, #8
 800629c:	2b08      	cmp	r3, #8
 800629e:	d10a      	bne.n	80062b6 <HAL_PCD_IRQHandler+0x6e0>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 80062a0:	6878      	ldr	r0, [r7, #4]
 80062a2:	f00b fdca 	bl	8011e3a <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 80062a6:	687b      	ldr	r3, [r7, #4]
 80062a8:	681b      	ldr	r3, [r3, #0]
 80062aa:	695a      	ldr	r2, [r3, #20]
 80062ac:	687b      	ldr	r3, [r7, #4]
 80062ae:	681b      	ldr	r3, [r3, #0]
 80062b0:	f002 0208 	and.w	r2, r2, #8
 80062b4:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 80062b6:	687b      	ldr	r3, [r7, #4]
 80062b8:	681b      	ldr	r3, [r3, #0]
 80062ba:	4618      	mov	r0, r3
 80062bc:	f009 fbe6 	bl	800fa8c <USB_ReadInterrupts>
 80062c0:	4603      	mov	r3, r0
 80062c2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80062c6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80062ca:	d10f      	bne.n	80062ec <HAL_PCD_IRQHandler+0x716>
    {
      /* Keep application checking the corresponding Iso IN endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 80062cc:	2300      	movs	r3, #0
 80062ce:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 80062d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80062d2:	b2db      	uxtb	r3, r3
 80062d4:	4619      	mov	r1, r3
 80062d6:	6878      	ldr	r0, [r7, #4]
 80062d8:	f00b fe2c 	bl	8011f34 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 80062dc:	687b      	ldr	r3, [r7, #4]
 80062de:	681b      	ldr	r3, [r3, #0]
 80062e0:	695a      	ldr	r2, [r3, #20]
 80062e2:	687b      	ldr	r3, [r7, #4]
 80062e4:	681b      	ldr	r3, [r3, #0]
 80062e6:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 80062ea:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 80062ec:	687b      	ldr	r3, [r7, #4]
 80062ee:	681b      	ldr	r3, [r3, #0]
 80062f0:	4618      	mov	r0, r3
 80062f2:	f009 fbcb 	bl	800fa8c <USB_ReadInterrupts>
 80062f6:	4603      	mov	r3, r0
 80062f8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80062fc:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8006300:	d10f      	bne.n	8006322 <HAL_PCD_IRQHandler+0x74c>
    {
      /* Keep application checking the corresponding Iso OUT endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 8006302:	2300      	movs	r3, #0
 8006304:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8006306:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006308:	b2db      	uxtb	r3, r3
 800630a:	4619      	mov	r1, r3
 800630c:	6878      	ldr	r0, [r7, #4]
 800630e:	f00b fdff 	bl	8011f10 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8006312:	687b      	ldr	r3, [r7, #4]
 8006314:	681b      	ldr	r3, [r3, #0]
 8006316:	695a      	ldr	r2, [r3, #20]
 8006318:	687b      	ldr	r3, [r7, #4]
 800631a:	681b      	ldr	r3, [r3, #0]
 800631c:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 8006320:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8006322:	687b      	ldr	r3, [r7, #4]
 8006324:	681b      	ldr	r3, [r3, #0]
 8006326:	4618      	mov	r0, r3
 8006328:	f009 fbb0 	bl	800fa8c <USB_ReadInterrupts>
 800632c:	4603      	mov	r3, r0
 800632e:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8006332:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006336:	d10a      	bne.n	800634e <HAL_PCD_IRQHandler+0x778>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8006338:	6878      	ldr	r0, [r7, #4]
 800633a:	f00b fe0d 	bl	8011f58 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 800633e:	687b      	ldr	r3, [r7, #4]
 8006340:	681b      	ldr	r3, [r3, #0]
 8006342:	695a      	ldr	r2, [r3, #20]
 8006344:	687b      	ldr	r3, [r7, #4]
 8006346:	681b      	ldr	r3, [r3, #0]
 8006348:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 800634c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 800634e:	687b      	ldr	r3, [r7, #4]
 8006350:	681b      	ldr	r3, [r3, #0]
 8006352:	4618      	mov	r0, r3
 8006354:	f009 fb9a 	bl	800fa8c <USB_ReadInterrupts>
 8006358:	4603      	mov	r3, r0
 800635a:	f003 0304 	and.w	r3, r3, #4
 800635e:	2b04      	cmp	r3, #4
 8006360:	d115      	bne.n	800638e <HAL_PCD_IRQHandler+0x7b8>
    {
      temp = hpcd->Instance->GOTGINT;
 8006362:	687b      	ldr	r3, [r7, #4]
 8006364:	681b      	ldr	r3, [r3, #0]
 8006366:	685b      	ldr	r3, [r3, #4]
 8006368:	61bb      	str	r3, [r7, #24]

      if ((temp & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 800636a:	69bb      	ldr	r3, [r7, #24]
 800636c:	f003 0304 	and.w	r3, r3, #4
 8006370:	2b00      	cmp	r3, #0
 8006372:	d002      	beq.n	800637a <HAL_PCD_IRQHandler+0x7a4>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8006374:	6878      	ldr	r0, [r7, #4]
 8006376:	f00b fdfd 	bl	8011f74 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= temp;
 800637a:	687b      	ldr	r3, [r7, #4]
 800637c:	681b      	ldr	r3, [r3, #0]
 800637e:	6859      	ldr	r1, [r3, #4]
 8006380:	687b      	ldr	r3, [r7, #4]
 8006382:	681b      	ldr	r3, [r3, #0]
 8006384:	69ba      	ldr	r2, [r7, #24]
 8006386:	430a      	orrs	r2, r1
 8006388:	605a      	str	r2, [r3, #4]
 800638a:	e000      	b.n	800638e <HAL_PCD_IRQHandler+0x7b8>
      return;
 800638c:	bf00      	nop
    }
  }
}
 800638e:	3734      	adds	r7, #52	; 0x34
 8006390:	46bd      	mov	sp, r7
 8006392:	bd90      	pop	{r4, r7, pc}

08006394 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8006394:	b580      	push	{r7, lr}
 8006396:	b082      	sub	sp, #8
 8006398:	af00      	add	r7, sp, #0
 800639a:	6078      	str	r0, [r7, #4]
 800639c:	460b      	mov	r3, r1
 800639e:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 80063a0:	687b      	ldr	r3, [r7, #4]
 80063a2:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 80063a6:	2b01      	cmp	r3, #1
 80063a8:	d101      	bne.n	80063ae <HAL_PCD_SetAddress+0x1a>
 80063aa:	2302      	movs	r3, #2
 80063ac:	e013      	b.n	80063d6 <HAL_PCD_SetAddress+0x42>
 80063ae:	687b      	ldr	r3, [r7, #4]
 80063b0:	2201      	movs	r2, #1
 80063b2:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  hpcd->USB_Address = address;
 80063b6:	687b      	ldr	r3, [r7, #4]
 80063b8:	78fa      	ldrb	r2, [r7, #3]
 80063ba:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 80063be:	687b      	ldr	r3, [r7, #4]
 80063c0:	681b      	ldr	r3, [r3, #0]
 80063c2:	78fa      	ldrb	r2, [r7, #3]
 80063c4:	4611      	mov	r1, r2
 80063c6:	4618      	mov	r0, r3
 80063c8:	f009 faf8 	bl	800f9bc <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 80063cc:	687b      	ldr	r3, [r7, #4]
 80063ce:	2200      	movs	r2, #0
 80063d0:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 80063d4:	2300      	movs	r3, #0
}
 80063d6:	4618      	mov	r0, r3
 80063d8:	3708      	adds	r7, #8
 80063da:	46bd      	mov	sp, r7
 80063dc:	bd80      	pop	{r7, pc}

080063de <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 80063de:	b580      	push	{r7, lr}
 80063e0:	b084      	sub	sp, #16
 80063e2:	af00      	add	r7, sp, #0
 80063e4:	6078      	str	r0, [r7, #4]
 80063e6:	4608      	mov	r0, r1
 80063e8:	4611      	mov	r1, r2
 80063ea:	461a      	mov	r2, r3
 80063ec:	4603      	mov	r3, r0
 80063ee:	70fb      	strb	r3, [r7, #3]
 80063f0:	460b      	mov	r3, r1
 80063f2:	803b      	strh	r3, [r7, #0]
 80063f4:	4613      	mov	r3, r2
 80063f6:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 80063f8:	2300      	movs	r3, #0
 80063fa:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80063fc:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8006400:	2b00      	cmp	r3, #0
 8006402:	da0f      	bge.n	8006424 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8006404:	78fb      	ldrb	r3, [r7, #3]
 8006406:	f003 020f 	and.w	r2, r3, #15
 800640a:	4613      	mov	r3, r2
 800640c:	00db      	lsls	r3, r3, #3
 800640e:	1a9b      	subs	r3, r3, r2
 8006410:	009b      	lsls	r3, r3, #2
 8006412:	3338      	adds	r3, #56	; 0x38
 8006414:	687a      	ldr	r2, [r7, #4]
 8006416:	4413      	add	r3, r2
 8006418:	3304      	adds	r3, #4
 800641a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800641c:	68fb      	ldr	r3, [r7, #12]
 800641e:	2201      	movs	r2, #1
 8006420:	705a      	strb	r2, [r3, #1]
 8006422:	e00f      	b.n	8006444 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8006424:	78fb      	ldrb	r3, [r7, #3]
 8006426:	f003 020f 	and.w	r2, r3, #15
 800642a:	4613      	mov	r3, r2
 800642c:	00db      	lsls	r3, r3, #3
 800642e:	1a9b      	subs	r3, r3, r2
 8006430:	009b      	lsls	r3, r3, #2
 8006432:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8006436:	687a      	ldr	r2, [r7, #4]
 8006438:	4413      	add	r3, r2
 800643a:	3304      	adds	r3, #4
 800643c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800643e:	68fb      	ldr	r3, [r7, #12]
 8006440:	2200      	movs	r2, #0
 8006442:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8006444:	78fb      	ldrb	r3, [r7, #3]
 8006446:	f003 030f 	and.w	r3, r3, #15
 800644a:	b2da      	uxtb	r2, r3
 800644c:	68fb      	ldr	r3, [r7, #12]
 800644e:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8006450:	883a      	ldrh	r2, [r7, #0]
 8006452:	68fb      	ldr	r3, [r7, #12]
 8006454:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 8006456:	68fb      	ldr	r3, [r7, #12]
 8006458:	78ba      	ldrb	r2, [r7, #2]
 800645a:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 800645c:	68fb      	ldr	r3, [r7, #12]
 800645e:	785b      	ldrb	r3, [r3, #1]
 8006460:	2b00      	cmp	r3, #0
 8006462:	d004      	beq.n	800646e <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8006464:	68fb      	ldr	r3, [r7, #12]
 8006466:	781b      	ldrb	r3, [r3, #0]
 8006468:	b29a      	uxth	r2, r3
 800646a:	68fb      	ldr	r3, [r7, #12]
 800646c:	80da      	strh	r2, [r3, #6]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 800646e:	78bb      	ldrb	r3, [r7, #2]
 8006470:	2b02      	cmp	r3, #2
 8006472:	d102      	bne.n	800647a <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 8006474:	68fb      	ldr	r3, [r7, #12]
 8006476:	2200      	movs	r2, #0
 8006478:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 800647a:	687b      	ldr	r3, [r7, #4]
 800647c:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8006480:	2b01      	cmp	r3, #1
 8006482:	d101      	bne.n	8006488 <HAL_PCD_EP_Open+0xaa>
 8006484:	2302      	movs	r3, #2
 8006486:	e00e      	b.n	80064a6 <HAL_PCD_EP_Open+0xc8>
 8006488:	687b      	ldr	r3, [r7, #4]
 800648a:	2201      	movs	r2, #1
 800648c:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8006490:	687b      	ldr	r3, [r7, #4]
 8006492:	681b      	ldr	r3, [r3, #0]
 8006494:	68f9      	ldr	r1, [r7, #12]
 8006496:	4618      	mov	r0, r3
 8006498:	f008 fc1e 	bl	800ecd8 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800649c:	687b      	ldr	r3, [r7, #4]
 800649e:	2200      	movs	r2, #0
 80064a0:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return ret;
 80064a4:	7afb      	ldrb	r3, [r7, #11]
}
 80064a6:	4618      	mov	r0, r3
 80064a8:	3710      	adds	r7, #16
 80064aa:	46bd      	mov	sp, r7
 80064ac:	bd80      	pop	{r7, pc}

080064ae <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80064ae:	b580      	push	{r7, lr}
 80064b0:	b084      	sub	sp, #16
 80064b2:	af00      	add	r7, sp, #0
 80064b4:	6078      	str	r0, [r7, #4]
 80064b6:	460b      	mov	r3, r1
 80064b8:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80064ba:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80064be:	2b00      	cmp	r3, #0
 80064c0:	da0f      	bge.n	80064e2 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80064c2:	78fb      	ldrb	r3, [r7, #3]
 80064c4:	f003 020f 	and.w	r2, r3, #15
 80064c8:	4613      	mov	r3, r2
 80064ca:	00db      	lsls	r3, r3, #3
 80064cc:	1a9b      	subs	r3, r3, r2
 80064ce:	009b      	lsls	r3, r3, #2
 80064d0:	3338      	adds	r3, #56	; 0x38
 80064d2:	687a      	ldr	r2, [r7, #4]
 80064d4:	4413      	add	r3, r2
 80064d6:	3304      	adds	r3, #4
 80064d8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80064da:	68fb      	ldr	r3, [r7, #12]
 80064dc:	2201      	movs	r2, #1
 80064de:	705a      	strb	r2, [r3, #1]
 80064e0:	e00f      	b.n	8006502 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80064e2:	78fb      	ldrb	r3, [r7, #3]
 80064e4:	f003 020f 	and.w	r2, r3, #15
 80064e8:	4613      	mov	r3, r2
 80064ea:	00db      	lsls	r3, r3, #3
 80064ec:	1a9b      	subs	r3, r3, r2
 80064ee:	009b      	lsls	r3, r3, #2
 80064f0:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 80064f4:	687a      	ldr	r2, [r7, #4]
 80064f6:	4413      	add	r3, r2
 80064f8:	3304      	adds	r3, #4
 80064fa:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80064fc:	68fb      	ldr	r3, [r7, #12]
 80064fe:	2200      	movs	r2, #0
 8006500:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8006502:	78fb      	ldrb	r3, [r7, #3]
 8006504:	f003 030f 	and.w	r3, r3, #15
 8006508:	b2da      	uxtb	r2, r3
 800650a:	68fb      	ldr	r3, [r7, #12]
 800650c:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800650e:	687b      	ldr	r3, [r7, #4]
 8006510:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8006514:	2b01      	cmp	r3, #1
 8006516:	d101      	bne.n	800651c <HAL_PCD_EP_Close+0x6e>
 8006518:	2302      	movs	r3, #2
 800651a:	e00e      	b.n	800653a <HAL_PCD_EP_Close+0x8c>
 800651c:	687b      	ldr	r3, [r7, #4]
 800651e:	2201      	movs	r2, #1
 8006520:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8006524:	687b      	ldr	r3, [r7, #4]
 8006526:	681b      	ldr	r3, [r3, #0]
 8006528:	68f9      	ldr	r1, [r7, #12]
 800652a:	4618      	mov	r0, r3
 800652c:	f008 fc5c 	bl	800ede8 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8006530:	687b      	ldr	r3, [r7, #4]
 8006532:	2200      	movs	r2, #0
 8006534:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  return HAL_OK;
 8006538:	2300      	movs	r3, #0
}
 800653a:	4618      	mov	r0, r3
 800653c:	3710      	adds	r7, #16
 800653e:	46bd      	mov	sp, r7
 8006540:	bd80      	pop	{r7, pc}

08006542 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8006542:	b580      	push	{r7, lr}
 8006544:	b086      	sub	sp, #24
 8006546:	af00      	add	r7, sp, #0
 8006548:	60f8      	str	r0, [r7, #12]
 800654a:	607a      	str	r2, [r7, #4]
 800654c:	603b      	str	r3, [r7, #0]
 800654e:	460b      	mov	r3, r1
 8006550:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8006552:	7afb      	ldrb	r3, [r7, #11]
 8006554:	f003 020f 	and.w	r2, r3, #15
 8006558:	4613      	mov	r3, r2
 800655a:	00db      	lsls	r3, r3, #3
 800655c:	1a9b      	subs	r3, r3, r2
 800655e:	009b      	lsls	r3, r3, #2
 8006560:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8006564:	68fa      	ldr	r2, [r7, #12]
 8006566:	4413      	add	r3, r2
 8006568:	3304      	adds	r3, #4
 800656a:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800656c:	697b      	ldr	r3, [r7, #20]
 800656e:	687a      	ldr	r2, [r7, #4]
 8006570:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8006572:	697b      	ldr	r3, [r7, #20]
 8006574:	683a      	ldr	r2, [r7, #0]
 8006576:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 8006578:	697b      	ldr	r3, [r7, #20]
 800657a:	2200      	movs	r2, #0
 800657c:	619a      	str	r2, [r3, #24]
  ep->is_in = 0U;
 800657e:	697b      	ldr	r3, [r7, #20]
 8006580:	2200      	movs	r2, #0
 8006582:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8006584:	7afb      	ldrb	r3, [r7, #11]
 8006586:	f003 030f 	and.w	r3, r3, #15
 800658a:	b2da      	uxtb	r2, r3
 800658c:	697b      	ldr	r3, [r7, #20]
 800658e:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8006590:	68fb      	ldr	r3, [r7, #12]
 8006592:	691b      	ldr	r3, [r3, #16]
 8006594:	2b01      	cmp	r3, #1
 8006596:	d102      	bne.n	800659e <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8006598:	687a      	ldr	r2, [r7, #4]
 800659a:	697b      	ldr	r3, [r7, #20]
 800659c:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800659e:	7afb      	ldrb	r3, [r7, #11]
 80065a0:	f003 030f 	and.w	r3, r3, #15
 80065a4:	2b00      	cmp	r3, #0
 80065a6:	d109      	bne.n	80065bc <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80065a8:	68fb      	ldr	r3, [r7, #12]
 80065aa:	6818      	ldr	r0, [r3, #0]
 80065ac:	68fb      	ldr	r3, [r7, #12]
 80065ae:	691b      	ldr	r3, [r3, #16]
 80065b0:	b2db      	uxtb	r3, r3
 80065b2:	461a      	mov	r2, r3
 80065b4:	6979      	ldr	r1, [r7, #20]
 80065b6:	f008 ff3f 	bl	800f438 <USB_EP0StartXfer>
 80065ba:	e008      	b.n	80065ce <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80065bc:	68fb      	ldr	r3, [r7, #12]
 80065be:	6818      	ldr	r0, [r3, #0]
 80065c0:	68fb      	ldr	r3, [r7, #12]
 80065c2:	691b      	ldr	r3, [r3, #16]
 80065c4:	b2db      	uxtb	r3, r3
 80065c6:	461a      	mov	r2, r3
 80065c8:	6979      	ldr	r1, [r7, #20]
 80065ca:	f008 fce9 	bl	800efa0 <USB_EPStartXfer>
  }

  return HAL_OK;
 80065ce:	2300      	movs	r3, #0
}
 80065d0:	4618      	mov	r0, r3
 80065d2:	3718      	adds	r7, #24
 80065d4:	46bd      	mov	sp, r7
 80065d6:	bd80      	pop	{r7, pc}

080065d8 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80065d8:	b580      	push	{r7, lr}
 80065da:	b086      	sub	sp, #24
 80065dc:	af00      	add	r7, sp, #0
 80065de:	60f8      	str	r0, [r7, #12]
 80065e0:	607a      	str	r2, [r7, #4]
 80065e2:	603b      	str	r3, [r7, #0]
 80065e4:	460b      	mov	r3, r1
 80065e6:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80065e8:	7afb      	ldrb	r3, [r7, #11]
 80065ea:	f003 020f 	and.w	r2, r3, #15
 80065ee:	4613      	mov	r3, r2
 80065f0:	00db      	lsls	r3, r3, #3
 80065f2:	1a9b      	subs	r3, r3, r2
 80065f4:	009b      	lsls	r3, r3, #2
 80065f6:	3338      	adds	r3, #56	; 0x38
 80065f8:	68fa      	ldr	r2, [r7, #12]
 80065fa:	4413      	add	r3, r2
 80065fc:	3304      	adds	r3, #4
 80065fe:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8006600:	697b      	ldr	r3, [r7, #20]
 8006602:	687a      	ldr	r2, [r7, #4]
 8006604:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8006606:	697b      	ldr	r3, [r7, #20]
 8006608:	683a      	ldr	r2, [r7, #0]
 800660a:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 800660c:	697b      	ldr	r3, [r7, #20]
 800660e:	2200      	movs	r2, #0
 8006610:	619a      	str	r2, [r3, #24]
  ep->is_in = 1U;
 8006612:	697b      	ldr	r3, [r7, #20]
 8006614:	2201      	movs	r2, #1
 8006616:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8006618:	7afb      	ldrb	r3, [r7, #11]
 800661a:	f003 030f 	and.w	r3, r3, #15
 800661e:	b2da      	uxtb	r2, r3
 8006620:	697b      	ldr	r3, [r7, #20]
 8006622:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8006624:	68fb      	ldr	r3, [r7, #12]
 8006626:	691b      	ldr	r3, [r3, #16]
 8006628:	2b01      	cmp	r3, #1
 800662a:	d102      	bne.n	8006632 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 800662c:	687a      	ldr	r2, [r7, #4]
 800662e:	697b      	ldr	r3, [r7, #20]
 8006630:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8006632:	7afb      	ldrb	r3, [r7, #11]
 8006634:	f003 030f 	and.w	r3, r3, #15
 8006638:	2b00      	cmp	r3, #0
 800663a:	d109      	bne.n	8006650 <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800663c:	68fb      	ldr	r3, [r7, #12]
 800663e:	6818      	ldr	r0, [r3, #0]
 8006640:	68fb      	ldr	r3, [r7, #12]
 8006642:	691b      	ldr	r3, [r3, #16]
 8006644:	b2db      	uxtb	r3, r3
 8006646:	461a      	mov	r2, r3
 8006648:	6979      	ldr	r1, [r7, #20]
 800664a:	f008 fef5 	bl	800f438 <USB_EP0StartXfer>
 800664e:	e008      	b.n	8006662 <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8006650:	68fb      	ldr	r3, [r7, #12]
 8006652:	6818      	ldr	r0, [r3, #0]
 8006654:	68fb      	ldr	r3, [r7, #12]
 8006656:	691b      	ldr	r3, [r3, #16]
 8006658:	b2db      	uxtb	r3, r3
 800665a:	461a      	mov	r2, r3
 800665c:	6979      	ldr	r1, [r7, #20]
 800665e:	f008 fc9f 	bl	800efa0 <USB_EPStartXfer>
  }

  return HAL_OK;
 8006662:	2300      	movs	r3, #0
}
 8006664:	4618      	mov	r0, r3
 8006666:	3718      	adds	r7, #24
 8006668:	46bd      	mov	sp, r7
 800666a:	bd80      	pop	{r7, pc}

0800666c <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800666c:	b580      	push	{r7, lr}
 800666e:	b084      	sub	sp, #16
 8006670:	af00      	add	r7, sp, #0
 8006672:	6078      	str	r0, [r7, #4]
 8006674:	460b      	mov	r3, r1
 8006676:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8006678:	78fb      	ldrb	r3, [r7, #3]
 800667a:	f003 020f 	and.w	r2, r3, #15
 800667e:	687b      	ldr	r3, [r7, #4]
 8006680:	685b      	ldr	r3, [r3, #4]
 8006682:	429a      	cmp	r2, r3
 8006684:	d901      	bls.n	800668a <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8006686:	2301      	movs	r3, #1
 8006688:	e050      	b.n	800672c <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800668a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800668e:	2b00      	cmp	r3, #0
 8006690:	da0f      	bge.n	80066b2 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8006692:	78fb      	ldrb	r3, [r7, #3]
 8006694:	f003 020f 	and.w	r2, r3, #15
 8006698:	4613      	mov	r3, r2
 800669a:	00db      	lsls	r3, r3, #3
 800669c:	1a9b      	subs	r3, r3, r2
 800669e:	009b      	lsls	r3, r3, #2
 80066a0:	3338      	adds	r3, #56	; 0x38
 80066a2:	687a      	ldr	r2, [r7, #4]
 80066a4:	4413      	add	r3, r2
 80066a6:	3304      	adds	r3, #4
 80066a8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80066aa:	68fb      	ldr	r3, [r7, #12]
 80066ac:	2201      	movs	r2, #1
 80066ae:	705a      	strb	r2, [r3, #1]
 80066b0:	e00d      	b.n	80066ce <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 80066b2:	78fa      	ldrb	r2, [r7, #3]
 80066b4:	4613      	mov	r3, r2
 80066b6:	00db      	lsls	r3, r3, #3
 80066b8:	1a9b      	subs	r3, r3, r2
 80066ba:	009b      	lsls	r3, r3, #2
 80066bc:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 80066c0:	687a      	ldr	r2, [r7, #4]
 80066c2:	4413      	add	r3, r2
 80066c4:	3304      	adds	r3, #4
 80066c6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80066c8:	68fb      	ldr	r3, [r7, #12]
 80066ca:	2200      	movs	r2, #0
 80066cc:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 80066ce:	68fb      	ldr	r3, [r7, #12]
 80066d0:	2201      	movs	r2, #1
 80066d2:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80066d4:	78fb      	ldrb	r3, [r7, #3]
 80066d6:	f003 030f 	and.w	r3, r3, #15
 80066da:	b2da      	uxtb	r2, r3
 80066dc:	68fb      	ldr	r3, [r7, #12]
 80066de:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80066e0:	687b      	ldr	r3, [r7, #4]
 80066e2:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 80066e6:	2b01      	cmp	r3, #1
 80066e8:	d101      	bne.n	80066ee <HAL_PCD_EP_SetStall+0x82>
 80066ea:	2302      	movs	r3, #2
 80066ec:	e01e      	b.n	800672c <HAL_PCD_EP_SetStall+0xc0>
 80066ee:	687b      	ldr	r3, [r7, #4]
 80066f0:	2201      	movs	r2, #1
 80066f2:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 80066f6:	687b      	ldr	r3, [r7, #4]
 80066f8:	681b      	ldr	r3, [r3, #0]
 80066fa:	68f9      	ldr	r1, [r7, #12]
 80066fc:	4618      	mov	r0, r3
 80066fe:	f009 f889 	bl	800f814 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8006702:	78fb      	ldrb	r3, [r7, #3]
 8006704:	f003 030f 	and.w	r3, r3, #15
 8006708:	2b00      	cmp	r3, #0
 800670a:	d10a      	bne.n	8006722 <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 800670c:	687b      	ldr	r3, [r7, #4]
 800670e:	6818      	ldr	r0, [r3, #0]
 8006710:	687b      	ldr	r3, [r7, #4]
 8006712:	691b      	ldr	r3, [r3, #16]
 8006714:	b2d9      	uxtb	r1, r3
 8006716:	687b      	ldr	r3, [r7, #4]
 8006718:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 800671c:	461a      	mov	r2, r3
 800671e:	f009 fa7b 	bl	800fc18 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8006722:	687b      	ldr	r3, [r7, #4]
 8006724:	2200      	movs	r2, #0
 8006726:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 800672a:	2300      	movs	r3, #0
}
 800672c:	4618      	mov	r0, r3
 800672e:	3710      	adds	r7, #16
 8006730:	46bd      	mov	sp, r7
 8006732:	bd80      	pop	{r7, pc}

08006734 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8006734:	b580      	push	{r7, lr}
 8006736:	b084      	sub	sp, #16
 8006738:	af00      	add	r7, sp, #0
 800673a:	6078      	str	r0, [r7, #4]
 800673c:	460b      	mov	r3, r1
 800673e:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8006740:	78fb      	ldrb	r3, [r7, #3]
 8006742:	f003 020f 	and.w	r2, r3, #15
 8006746:	687b      	ldr	r3, [r7, #4]
 8006748:	685b      	ldr	r3, [r3, #4]
 800674a:	429a      	cmp	r2, r3
 800674c:	d901      	bls.n	8006752 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 800674e:	2301      	movs	r3, #1
 8006750:	e042      	b.n	80067d8 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8006752:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8006756:	2b00      	cmp	r3, #0
 8006758:	da0f      	bge.n	800677a <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800675a:	78fb      	ldrb	r3, [r7, #3]
 800675c:	f003 020f 	and.w	r2, r3, #15
 8006760:	4613      	mov	r3, r2
 8006762:	00db      	lsls	r3, r3, #3
 8006764:	1a9b      	subs	r3, r3, r2
 8006766:	009b      	lsls	r3, r3, #2
 8006768:	3338      	adds	r3, #56	; 0x38
 800676a:	687a      	ldr	r2, [r7, #4]
 800676c:	4413      	add	r3, r2
 800676e:	3304      	adds	r3, #4
 8006770:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8006772:	68fb      	ldr	r3, [r7, #12]
 8006774:	2201      	movs	r2, #1
 8006776:	705a      	strb	r2, [r3, #1]
 8006778:	e00f      	b.n	800679a <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800677a:	78fb      	ldrb	r3, [r7, #3]
 800677c:	f003 020f 	and.w	r2, r3, #15
 8006780:	4613      	mov	r3, r2
 8006782:	00db      	lsls	r3, r3, #3
 8006784:	1a9b      	subs	r3, r3, r2
 8006786:	009b      	lsls	r3, r3, #2
 8006788:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 800678c:	687a      	ldr	r2, [r7, #4]
 800678e:	4413      	add	r3, r2
 8006790:	3304      	adds	r3, #4
 8006792:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8006794:	68fb      	ldr	r3, [r7, #12]
 8006796:	2200      	movs	r2, #0
 8006798:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 800679a:	68fb      	ldr	r3, [r7, #12]
 800679c:	2200      	movs	r2, #0
 800679e:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80067a0:	78fb      	ldrb	r3, [r7, #3]
 80067a2:	f003 030f 	and.w	r3, r3, #15
 80067a6:	b2da      	uxtb	r2, r3
 80067a8:	68fb      	ldr	r3, [r7, #12]
 80067aa:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80067ac:	687b      	ldr	r3, [r7, #4]
 80067ae:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 80067b2:	2b01      	cmp	r3, #1
 80067b4:	d101      	bne.n	80067ba <HAL_PCD_EP_ClrStall+0x86>
 80067b6:	2302      	movs	r3, #2
 80067b8:	e00e      	b.n	80067d8 <HAL_PCD_EP_ClrStall+0xa4>
 80067ba:	687b      	ldr	r3, [r7, #4]
 80067bc:	2201      	movs	r2, #1
 80067be:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 80067c2:	687b      	ldr	r3, [r7, #4]
 80067c4:	681b      	ldr	r3, [r3, #0]
 80067c6:	68f9      	ldr	r1, [r7, #12]
 80067c8:	4618      	mov	r0, r3
 80067ca:	f009 f891 	bl	800f8f0 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 80067ce:	687b      	ldr	r3, [r7, #4]
 80067d0:	2200      	movs	r2, #0
 80067d2:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 80067d6:	2300      	movs	r3, #0
}
 80067d8:	4618      	mov	r0, r3
 80067da:	3710      	adds	r7, #16
 80067dc:	46bd      	mov	sp, r7
 80067de:	bd80      	pop	{r7, pc}

080067e0 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80067e0:	b580      	push	{r7, lr}
 80067e2:	b08a      	sub	sp, #40	; 0x28
 80067e4:	af02      	add	r7, sp, #8
 80067e6:	6078      	str	r0, [r7, #4]
 80067e8:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80067ea:	687b      	ldr	r3, [r7, #4]
 80067ec:	681b      	ldr	r3, [r3, #0]
 80067ee:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80067f0:	697b      	ldr	r3, [r7, #20]
 80067f2:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 80067f4:	683a      	ldr	r2, [r7, #0]
 80067f6:	4613      	mov	r3, r2
 80067f8:	00db      	lsls	r3, r3, #3
 80067fa:	1a9b      	subs	r3, r3, r2
 80067fc:	009b      	lsls	r3, r3, #2
 80067fe:	3338      	adds	r3, #56	; 0x38
 8006800:	687a      	ldr	r2, [r7, #4]
 8006802:	4413      	add	r3, r2
 8006804:	3304      	adds	r3, #4
 8006806:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8006808:	68fb      	ldr	r3, [r7, #12]
 800680a:	699a      	ldr	r2, [r3, #24]
 800680c:	68fb      	ldr	r3, [r7, #12]
 800680e:	695b      	ldr	r3, [r3, #20]
 8006810:	429a      	cmp	r2, r3
 8006812:	d901      	bls.n	8006818 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8006814:	2301      	movs	r3, #1
 8006816:	e06c      	b.n	80068f2 <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 8006818:	68fb      	ldr	r3, [r7, #12]
 800681a:	695a      	ldr	r2, [r3, #20]
 800681c:	68fb      	ldr	r3, [r7, #12]
 800681e:	699b      	ldr	r3, [r3, #24]
 8006820:	1ad3      	subs	r3, r2, r3
 8006822:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8006824:	68fb      	ldr	r3, [r7, #12]
 8006826:	689b      	ldr	r3, [r3, #8]
 8006828:	69fa      	ldr	r2, [r7, #28]
 800682a:	429a      	cmp	r2, r3
 800682c:	d902      	bls.n	8006834 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 800682e:	68fb      	ldr	r3, [r7, #12]
 8006830:	689b      	ldr	r3, [r3, #8]
 8006832:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8006834:	69fb      	ldr	r3, [r7, #28]
 8006836:	3303      	adds	r3, #3
 8006838:	089b      	lsrs	r3, r3, #2
 800683a:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800683c:	e02b      	b.n	8006896 <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 800683e:	68fb      	ldr	r3, [r7, #12]
 8006840:	695a      	ldr	r2, [r3, #20]
 8006842:	68fb      	ldr	r3, [r7, #12]
 8006844:	699b      	ldr	r3, [r3, #24]
 8006846:	1ad3      	subs	r3, r2, r3
 8006848:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 800684a:	68fb      	ldr	r3, [r7, #12]
 800684c:	689b      	ldr	r3, [r3, #8]
 800684e:	69fa      	ldr	r2, [r7, #28]
 8006850:	429a      	cmp	r2, r3
 8006852:	d902      	bls.n	800685a <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8006854:	68fb      	ldr	r3, [r7, #12]
 8006856:	689b      	ldr	r3, [r3, #8]
 8006858:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 800685a:	69fb      	ldr	r3, [r7, #28]
 800685c:	3303      	adds	r3, #3
 800685e:	089b      	lsrs	r3, r3, #2
 8006860:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8006862:	68fb      	ldr	r3, [r7, #12]
 8006864:	68d9      	ldr	r1, [r3, #12]
 8006866:	683b      	ldr	r3, [r7, #0]
 8006868:	b2da      	uxtb	r2, r3
 800686a:	69fb      	ldr	r3, [r7, #28]
 800686c:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 800686e:	687b      	ldr	r3, [r7, #4]
 8006870:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8006872:	b2db      	uxtb	r3, r3
 8006874:	9300      	str	r3, [sp, #0]
 8006876:	4603      	mov	r3, r0
 8006878:	6978      	ldr	r0, [r7, #20]
 800687a:	f008 ff35 	bl	800f6e8 <USB_WritePacket>

    ep->xfer_buff  += len;
 800687e:	68fb      	ldr	r3, [r7, #12]
 8006880:	68da      	ldr	r2, [r3, #12]
 8006882:	69fb      	ldr	r3, [r7, #28]
 8006884:	441a      	add	r2, r3
 8006886:	68fb      	ldr	r3, [r7, #12]
 8006888:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 800688a:	68fb      	ldr	r3, [r7, #12]
 800688c:	699a      	ldr	r2, [r3, #24]
 800688e:	69fb      	ldr	r3, [r7, #28]
 8006890:	441a      	add	r2, r3
 8006892:	68fb      	ldr	r3, [r7, #12]
 8006894:	619a      	str	r2, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8006896:	683b      	ldr	r3, [r7, #0]
 8006898:	015a      	lsls	r2, r3, #5
 800689a:	693b      	ldr	r3, [r7, #16]
 800689c:	4413      	add	r3, r2
 800689e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80068a2:	699b      	ldr	r3, [r3, #24]
 80068a4:	b29b      	uxth	r3, r3
 80068a6:	69ba      	ldr	r2, [r7, #24]
 80068a8:	429a      	cmp	r2, r3
 80068aa:	d809      	bhi.n	80068c0 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 80068ac:	68fb      	ldr	r3, [r7, #12]
 80068ae:	699a      	ldr	r2, [r3, #24]
 80068b0:	68fb      	ldr	r3, [r7, #12]
 80068b2:	695b      	ldr	r3, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80068b4:	429a      	cmp	r2, r3
 80068b6:	d203      	bcs.n	80068c0 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 80068b8:	68fb      	ldr	r3, [r7, #12]
 80068ba:	695b      	ldr	r3, [r3, #20]
 80068bc:	2b00      	cmp	r3, #0
 80068be:	d1be      	bne.n	800683e <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 80068c0:	68fb      	ldr	r3, [r7, #12]
 80068c2:	695a      	ldr	r2, [r3, #20]
 80068c4:	68fb      	ldr	r3, [r7, #12]
 80068c6:	699b      	ldr	r3, [r3, #24]
 80068c8:	429a      	cmp	r2, r3
 80068ca:	d811      	bhi.n	80068f0 <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 80068cc:	683b      	ldr	r3, [r7, #0]
 80068ce:	f003 030f 	and.w	r3, r3, #15
 80068d2:	2201      	movs	r2, #1
 80068d4:	fa02 f303 	lsl.w	r3, r2, r3
 80068d8:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80068da:	693b      	ldr	r3, [r7, #16]
 80068dc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80068e0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80068e2:	68bb      	ldr	r3, [r7, #8]
 80068e4:	43db      	mvns	r3, r3
 80068e6:	6939      	ldr	r1, [r7, #16]
 80068e8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80068ec:	4013      	ands	r3, r2
 80068ee:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 80068f0:	2300      	movs	r3, #0
}
 80068f2:	4618      	mov	r0, r3
 80068f4:	3720      	adds	r7, #32
 80068f6:	46bd      	mov	sp, r7
 80068f8:	bd80      	pop	{r7, pc}
	...

080068fc <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80068fc:	b580      	push	{r7, lr}
 80068fe:	b086      	sub	sp, #24
 8006900:	af00      	add	r7, sp, #0
 8006902:	6078      	str	r0, [r7, #4]
 8006904:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8006906:	687b      	ldr	r3, [r7, #4]
 8006908:	681b      	ldr	r3, [r3, #0]
 800690a:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800690c:	697b      	ldr	r3, [r7, #20]
 800690e:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8006910:	697b      	ldr	r3, [r7, #20]
 8006912:	333c      	adds	r3, #60	; 0x3c
 8006914:	3304      	adds	r3, #4
 8006916:	681b      	ldr	r3, [r3, #0]
 8006918:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800691a:	683b      	ldr	r3, [r7, #0]
 800691c:	015a      	lsls	r2, r3, #5
 800691e:	693b      	ldr	r3, [r7, #16]
 8006920:	4413      	add	r3, r2
 8006922:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006926:	689b      	ldr	r3, [r3, #8]
 8006928:	60bb      	str	r3, [r7, #8]

  if (hpcd->Init.dma_enable == 1U)
 800692a:	687b      	ldr	r3, [r7, #4]
 800692c:	691b      	ldr	r3, [r3, #16]
 800692e:	2b01      	cmp	r3, #1
 8006930:	f040 80a0 	bne.w	8006a74 <PCD_EP_OutXfrComplete_int+0x178>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8006934:	68bb      	ldr	r3, [r7, #8]
 8006936:	f003 0308 	and.w	r3, r3, #8
 800693a:	2b00      	cmp	r3, #0
 800693c:	d015      	beq.n	800696a <PCD_EP_OutXfrComplete_int+0x6e>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800693e:	68fb      	ldr	r3, [r7, #12]
 8006940:	4a72      	ldr	r2, [pc, #456]	; (8006b0c <PCD_EP_OutXfrComplete_int+0x210>)
 8006942:	4293      	cmp	r3, r2
 8006944:	f240 80dd 	bls.w	8006b02 <PCD_EP_OutXfrComplete_int+0x206>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8006948:	68bb      	ldr	r3, [r7, #8]
 800694a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800694e:	2b00      	cmp	r3, #0
 8006950:	f000 80d7 	beq.w	8006b02 <PCD_EP_OutXfrComplete_int+0x206>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8006954:	683b      	ldr	r3, [r7, #0]
 8006956:	015a      	lsls	r2, r3, #5
 8006958:	693b      	ldr	r3, [r7, #16]
 800695a:	4413      	add	r3, r2
 800695c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006960:	461a      	mov	r2, r3
 8006962:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006966:	6093      	str	r3, [r2, #8]
 8006968:	e0cb      	b.n	8006b02 <PCD_EP_OutXfrComplete_int+0x206>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 800696a:	68bb      	ldr	r3, [r7, #8]
 800696c:	f003 0320 	and.w	r3, r3, #32
 8006970:	2b00      	cmp	r3, #0
 8006972:	d009      	beq.n	8006988 <PCD_EP_OutXfrComplete_int+0x8c>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8006974:	683b      	ldr	r3, [r7, #0]
 8006976:	015a      	lsls	r2, r3, #5
 8006978:	693b      	ldr	r3, [r7, #16]
 800697a:	4413      	add	r3, r2
 800697c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006980:	461a      	mov	r2, r3
 8006982:	2320      	movs	r3, #32
 8006984:	6093      	str	r3, [r2, #8]
 8006986:	e0bc      	b.n	8006b02 <PCD_EP_OutXfrComplete_int+0x206>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8006988:	68bb      	ldr	r3, [r7, #8]
 800698a:	f003 0328 	and.w	r3, r3, #40	; 0x28
 800698e:	2b00      	cmp	r3, #0
 8006990:	f040 80b7 	bne.w	8006b02 <PCD_EP_OutXfrComplete_int+0x206>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8006994:	68fb      	ldr	r3, [r7, #12]
 8006996:	4a5d      	ldr	r2, [pc, #372]	; (8006b0c <PCD_EP_OutXfrComplete_int+0x210>)
 8006998:	4293      	cmp	r3, r2
 800699a:	d90f      	bls.n	80069bc <PCD_EP_OutXfrComplete_int+0xc0>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800699c:	68bb      	ldr	r3, [r7, #8]
 800699e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80069a2:	2b00      	cmp	r3, #0
 80069a4:	d00a      	beq.n	80069bc <PCD_EP_OutXfrComplete_int+0xc0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80069a6:	683b      	ldr	r3, [r7, #0]
 80069a8:	015a      	lsls	r2, r3, #5
 80069aa:	693b      	ldr	r3, [r7, #16]
 80069ac:	4413      	add	r3, r2
 80069ae:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80069b2:	461a      	mov	r2, r3
 80069b4:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80069b8:	6093      	str	r3, [r2, #8]
 80069ba:	e0a2      	b.n	8006b02 <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        /* out data packet received over EP0 */
        hpcd->OUT_ep[epnum].xfer_count =
          hpcd->OUT_ep[epnum].maxpacket -
 80069bc:	6879      	ldr	r1, [r7, #4]
 80069be:	683a      	ldr	r2, [r7, #0]
 80069c0:	4613      	mov	r3, r2
 80069c2:	00db      	lsls	r3, r3, #3
 80069c4:	1a9b      	subs	r3, r3, r2
 80069c6:	009b      	lsls	r3, r3, #2
 80069c8:	440b      	add	r3, r1
 80069ca:	f503 7301 	add.w	r3, r3, #516	; 0x204
 80069ce:	681a      	ldr	r2, [r3, #0]
          (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 80069d0:	683b      	ldr	r3, [r7, #0]
 80069d2:	0159      	lsls	r1, r3, #5
 80069d4:	693b      	ldr	r3, [r7, #16]
 80069d6:	440b      	add	r3, r1
 80069d8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80069dc:	691b      	ldr	r3, [r3, #16]
 80069de:	f3c3 0312 	ubfx	r3, r3, #0, #19
          hpcd->OUT_ep[epnum].maxpacket -
 80069e2:	1ad1      	subs	r1, r2, r3
        hpcd->OUT_ep[epnum].xfer_count =
 80069e4:	6878      	ldr	r0, [r7, #4]
 80069e6:	683a      	ldr	r2, [r7, #0]
 80069e8:	4613      	mov	r3, r2
 80069ea:	00db      	lsls	r3, r3, #3
 80069ec:	1a9b      	subs	r3, r3, r2
 80069ee:	009b      	lsls	r3, r3, #2
 80069f0:	4403      	add	r3, r0
 80069f2:	f503 7305 	add.w	r3, r3, #532	; 0x214
 80069f6:	6019      	str	r1, [r3, #0]

        hpcd->OUT_ep[epnum].xfer_buff += hpcd->OUT_ep[epnum].maxpacket;
 80069f8:	6879      	ldr	r1, [r7, #4]
 80069fa:	683a      	ldr	r2, [r7, #0]
 80069fc:	4613      	mov	r3, r2
 80069fe:	00db      	lsls	r3, r3, #3
 8006a00:	1a9b      	subs	r3, r3, r2
 8006a02:	009b      	lsls	r3, r3, #2
 8006a04:	440b      	add	r3, r1
 8006a06:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8006a0a:	6819      	ldr	r1, [r3, #0]
 8006a0c:	6878      	ldr	r0, [r7, #4]
 8006a0e:	683a      	ldr	r2, [r7, #0]
 8006a10:	4613      	mov	r3, r2
 8006a12:	00db      	lsls	r3, r3, #3
 8006a14:	1a9b      	subs	r3, r3, r2
 8006a16:	009b      	lsls	r3, r3, #2
 8006a18:	4403      	add	r3, r0
 8006a1a:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8006a1e:	681b      	ldr	r3, [r3, #0]
 8006a20:	4419      	add	r1, r3
 8006a22:	6878      	ldr	r0, [r7, #4]
 8006a24:	683a      	ldr	r2, [r7, #0]
 8006a26:	4613      	mov	r3, r2
 8006a28:	00db      	lsls	r3, r3, #3
 8006a2a:	1a9b      	subs	r3, r3, r2
 8006a2c:	009b      	lsls	r3, r3, #2
 8006a2e:	4403      	add	r3, r0
 8006a30:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8006a34:	6019      	str	r1, [r3, #0]

        if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8006a36:	683b      	ldr	r3, [r7, #0]
 8006a38:	2b00      	cmp	r3, #0
 8006a3a:	d114      	bne.n	8006a66 <PCD_EP_OutXfrComplete_int+0x16a>
 8006a3c:	6879      	ldr	r1, [r7, #4]
 8006a3e:	683a      	ldr	r2, [r7, #0]
 8006a40:	4613      	mov	r3, r2
 8006a42:	00db      	lsls	r3, r3, #3
 8006a44:	1a9b      	subs	r3, r3, r2
 8006a46:	009b      	lsls	r3, r3, #2
 8006a48:	440b      	add	r3, r1
 8006a4a:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8006a4e:	681b      	ldr	r3, [r3, #0]
 8006a50:	2b00      	cmp	r3, #0
 8006a52:	d108      	bne.n	8006a66 <PCD_EP_OutXfrComplete_int+0x16a>
        {
          /* this is ZLP, so prepare EP0 for next setup */
          (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8006a54:	687b      	ldr	r3, [r7, #4]
 8006a56:	6818      	ldr	r0, [r3, #0]
 8006a58:	687b      	ldr	r3, [r7, #4]
 8006a5a:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8006a5e:	461a      	mov	r2, r3
 8006a60:	2101      	movs	r1, #1
 8006a62:	f009 f8d9 	bl	800fc18 <USB_EP0_OutStart>
        }
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8006a66:	683b      	ldr	r3, [r7, #0]
 8006a68:	b2db      	uxtb	r3, r3
 8006a6a:	4619      	mov	r1, r3
 8006a6c:	6878      	ldr	r0, [r7, #4]
 8006a6e:	f00b f9af 	bl	8011dd0 <HAL_PCD_DataOutStageCallback>
 8006a72:	e046      	b.n	8006b02 <PCD_EP_OutXfrComplete_int+0x206>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8006a74:	68fb      	ldr	r3, [r7, #12]
 8006a76:	4a26      	ldr	r2, [pc, #152]	; (8006b10 <PCD_EP_OutXfrComplete_int+0x214>)
 8006a78:	4293      	cmp	r3, r2
 8006a7a:	d124      	bne.n	8006ac6 <PCD_EP_OutXfrComplete_int+0x1ca>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8006a7c:	68bb      	ldr	r3, [r7, #8]
 8006a7e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006a82:	2b00      	cmp	r3, #0
 8006a84:	d00a      	beq.n	8006a9c <PCD_EP_OutXfrComplete_int+0x1a0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8006a86:	683b      	ldr	r3, [r7, #0]
 8006a88:	015a      	lsls	r2, r3, #5
 8006a8a:	693b      	ldr	r3, [r7, #16]
 8006a8c:	4413      	add	r3, r2
 8006a8e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006a92:	461a      	mov	r2, r3
 8006a94:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006a98:	6093      	str	r3, [r2, #8]
 8006a9a:	e032      	b.n	8006b02 <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8006a9c:	68bb      	ldr	r3, [r7, #8]
 8006a9e:	f003 0320 	and.w	r3, r3, #32
 8006aa2:	2b00      	cmp	r3, #0
 8006aa4:	d008      	beq.n	8006ab8 <PCD_EP_OutXfrComplete_int+0x1bc>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8006aa6:	683b      	ldr	r3, [r7, #0]
 8006aa8:	015a      	lsls	r2, r3, #5
 8006aaa:	693b      	ldr	r3, [r7, #16]
 8006aac:	4413      	add	r3, r2
 8006aae:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006ab2:	461a      	mov	r2, r3
 8006ab4:	2320      	movs	r3, #32
 8006ab6:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8006ab8:	683b      	ldr	r3, [r7, #0]
 8006aba:	b2db      	uxtb	r3, r3
 8006abc:	4619      	mov	r1, r3
 8006abe:	6878      	ldr	r0, [r7, #4]
 8006ac0:	f00b f986 	bl	8011dd0 <HAL_PCD_DataOutStageCallback>
 8006ac4:	e01d      	b.n	8006b02 <PCD_EP_OutXfrComplete_int+0x206>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8006ac6:	683b      	ldr	r3, [r7, #0]
 8006ac8:	2b00      	cmp	r3, #0
 8006aca:	d114      	bne.n	8006af6 <PCD_EP_OutXfrComplete_int+0x1fa>
 8006acc:	6879      	ldr	r1, [r7, #4]
 8006ace:	683a      	ldr	r2, [r7, #0]
 8006ad0:	4613      	mov	r3, r2
 8006ad2:	00db      	lsls	r3, r3, #3
 8006ad4:	1a9b      	subs	r3, r3, r2
 8006ad6:	009b      	lsls	r3, r3, #2
 8006ad8:	440b      	add	r3, r1
 8006ada:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8006ade:	681b      	ldr	r3, [r3, #0]
 8006ae0:	2b00      	cmp	r3, #0
 8006ae2:	d108      	bne.n	8006af6 <PCD_EP_OutXfrComplete_int+0x1fa>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 8006ae4:	687b      	ldr	r3, [r7, #4]
 8006ae6:	6818      	ldr	r0, [r3, #0]
 8006ae8:	687b      	ldr	r3, [r7, #4]
 8006aea:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8006aee:	461a      	mov	r2, r3
 8006af0:	2100      	movs	r1, #0
 8006af2:	f009 f891 	bl	800fc18 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8006af6:	683b      	ldr	r3, [r7, #0]
 8006af8:	b2db      	uxtb	r3, r3
 8006afa:	4619      	mov	r1, r3
 8006afc:	6878      	ldr	r0, [r7, #4]
 8006afe:	f00b f967 	bl	8011dd0 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8006b02:	2300      	movs	r3, #0
}
 8006b04:	4618      	mov	r0, r3
 8006b06:	3718      	adds	r7, #24
 8006b08:	46bd      	mov	sp, r7
 8006b0a:	bd80      	pop	{r7, pc}
 8006b0c:	4f54300a 	.word	0x4f54300a
 8006b10:	4f54310a 	.word	0x4f54310a

08006b14 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8006b14:	b580      	push	{r7, lr}
 8006b16:	b086      	sub	sp, #24
 8006b18:	af00      	add	r7, sp, #0
 8006b1a:	6078      	str	r0, [r7, #4]
 8006b1c:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8006b1e:	687b      	ldr	r3, [r7, #4]
 8006b20:	681b      	ldr	r3, [r3, #0]
 8006b22:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006b24:	697b      	ldr	r3, [r7, #20]
 8006b26:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8006b28:	697b      	ldr	r3, [r7, #20]
 8006b2a:	333c      	adds	r3, #60	; 0x3c
 8006b2c:	3304      	adds	r3, #4
 8006b2e:	681b      	ldr	r3, [r3, #0]
 8006b30:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8006b32:	683b      	ldr	r3, [r7, #0]
 8006b34:	015a      	lsls	r2, r3, #5
 8006b36:	693b      	ldr	r3, [r7, #16]
 8006b38:	4413      	add	r3, r2
 8006b3a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006b3e:	689b      	ldr	r3, [r3, #8]
 8006b40:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8006b42:	68fb      	ldr	r3, [r7, #12]
 8006b44:	4a15      	ldr	r2, [pc, #84]	; (8006b9c <PCD_EP_OutSetupPacket_int+0x88>)
 8006b46:	4293      	cmp	r3, r2
 8006b48:	d90e      	bls.n	8006b68 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8006b4a:	68bb      	ldr	r3, [r7, #8]
 8006b4c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8006b50:	2b00      	cmp	r3, #0
 8006b52:	d009      	beq.n	8006b68 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8006b54:	683b      	ldr	r3, [r7, #0]
 8006b56:	015a      	lsls	r2, r3, #5
 8006b58:	693b      	ldr	r3, [r7, #16]
 8006b5a:	4413      	add	r3, r2
 8006b5c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006b60:	461a      	mov	r2, r3
 8006b62:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006b66:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8006b68:	6878      	ldr	r0, [r7, #4]
 8006b6a:	f00b f91f 	bl	8011dac <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 8006b6e:	68fb      	ldr	r3, [r7, #12]
 8006b70:	4a0a      	ldr	r2, [pc, #40]	; (8006b9c <PCD_EP_OutSetupPacket_int+0x88>)
 8006b72:	4293      	cmp	r3, r2
 8006b74:	d90c      	bls.n	8006b90 <PCD_EP_OutSetupPacket_int+0x7c>
 8006b76:	687b      	ldr	r3, [r7, #4]
 8006b78:	691b      	ldr	r3, [r3, #16]
 8006b7a:	2b01      	cmp	r3, #1
 8006b7c:	d108      	bne.n	8006b90 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8006b7e:	687b      	ldr	r3, [r7, #4]
 8006b80:	6818      	ldr	r0, [r3, #0]
 8006b82:	687b      	ldr	r3, [r7, #4]
 8006b84:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8006b88:	461a      	mov	r2, r3
 8006b8a:	2101      	movs	r1, #1
 8006b8c:	f009 f844 	bl	800fc18 <USB_EP0_OutStart>
  }

  return HAL_OK;
 8006b90:	2300      	movs	r3, #0
}
 8006b92:	4618      	mov	r0, r3
 8006b94:	3718      	adds	r7, #24
 8006b96:	46bd      	mov	sp, r7
 8006b98:	bd80      	pop	{r7, pc}
 8006b9a:	bf00      	nop
 8006b9c:	4f54300a 	.word	0x4f54300a

08006ba0 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8006ba0:	b480      	push	{r7}
 8006ba2:	b085      	sub	sp, #20
 8006ba4:	af00      	add	r7, sp, #0
 8006ba6:	6078      	str	r0, [r7, #4]
 8006ba8:	460b      	mov	r3, r1
 8006baa:	70fb      	strb	r3, [r7, #3]
 8006bac:	4613      	mov	r3, r2
 8006bae:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8006bb0:	687b      	ldr	r3, [r7, #4]
 8006bb2:	681b      	ldr	r3, [r3, #0]
 8006bb4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006bb6:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8006bb8:	78fb      	ldrb	r3, [r7, #3]
 8006bba:	2b00      	cmp	r3, #0
 8006bbc:	d107      	bne.n	8006bce <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8006bbe:	883b      	ldrh	r3, [r7, #0]
 8006bc0:	0419      	lsls	r1, r3, #16
 8006bc2:	687b      	ldr	r3, [r7, #4]
 8006bc4:	681b      	ldr	r3, [r3, #0]
 8006bc6:	68ba      	ldr	r2, [r7, #8]
 8006bc8:	430a      	orrs	r2, r1
 8006bca:	629a      	str	r2, [r3, #40]	; 0x28
 8006bcc:	e028      	b.n	8006c20 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8006bce:	687b      	ldr	r3, [r7, #4]
 8006bd0:	681b      	ldr	r3, [r3, #0]
 8006bd2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006bd4:	0c1b      	lsrs	r3, r3, #16
 8006bd6:	68ba      	ldr	r2, [r7, #8]
 8006bd8:	4413      	add	r3, r2
 8006bda:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8006bdc:	2300      	movs	r3, #0
 8006bde:	73fb      	strb	r3, [r7, #15]
 8006be0:	e00d      	b.n	8006bfe <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8006be2:	687b      	ldr	r3, [r7, #4]
 8006be4:	681a      	ldr	r2, [r3, #0]
 8006be6:	7bfb      	ldrb	r3, [r7, #15]
 8006be8:	3340      	adds	r3, #64	; 0x40
 8006bea:	009b      	lsls	r3, r3, #2
 8006bec:	4413      	add	r3, r2
 8006bee:	685b      	ldr	r3, [r3, #4]
 8006bf0:	0c1b      	lsrs	r3, r3, #16
 8006bf2:	68ba      	ldr	r2, [r7, #8]
 8006bf4:	4413      	add	r3, r2
 8006bf6:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8006bf8:	7bfb      	ldrb	r3, [r7, #15]
 8006bfa:	3301      	adds	r3, #1
 8006bfc:	73fb      	strb	r3, [r7, #15]
 8006bfe:	7bfa      	ldrb	r2, [r7, #15]
 8006c00:	78fb      	ldrb	r3, [r7, #3]
 8006c02:	3b01      	subs	r3, #1
 8006c04:	429a      	cmp	r2, r3
 8006c06:	d3ec      	bcc.n	8006be2 <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8006c08:	883b      	ldrh	r3, [r7, #0]
 8006c0a:	0418      	lsls	r0, r3, #16
 8006c0c:	687b      	ldr	r3, [r7, #4]
 8006c0e:	6819      	ldr	r1, [r3, #0]
 8006c10:	78fb      	ldrb	r3, [r7, #3]
 8006c12:	3b01      	subs	r3, #1
 8006c14:	68ba      	ldr	r2, [r7, #8]
 8006c16:	4302      	orrs	r2, r0
 8006c18:	3340      	adds	r3, #64	; 0x40
 8006c1a:	009b      	lsls	r3, r3, #2
 8006c1c:	440b      	add	r3, r1
 8006c1e:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8006c20:	2300      	movs	r3, #0
}
 8006c22:	4618      	mov	r0, r3
 8006c24:	3714      	adds	r7, #20
 8006c26:	46bd      	mov	sp, r7
 8006c28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c2c:	4770      	bx	lr

08006c2e <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 8006c2e:	b480      	push	{r7}
 8006c30:	b083      	sub	sp, #12
 8006c32:	af00      	add	r7, sp, #0
 8006c34:	6078      	str	r0, [r7, #4]
 8006c36:	460b      	mov	r3, r1
 8006c38:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 8006c3a:	687b      	ldr	r3, [r7, #4]
 8006c3c:	681b      	ldr	r3, [r3, #0]
 8006c3e:	887a      	ldrh	r2, [r7, #2]
 8006c40:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8006c42:	2300      	movs	r3, #0
}
 8006c44:	4618      	mov	r0, r3
 8006c46:	370c      	adds	r7, #12
 8006c48:	46bd      	mov	sp, r7
 8006c4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c4e:	4770      	bx	lr

08006c50 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8006c50:	b480      	push	{r7}
 8006c52:	b085      	sub	sp, #20
 8006c54:	af00      	add	r7, sp, #0
 8006c56:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8006c58:	687b      	ldr	r3, [r7, #4]
 8006c5a:	681b      	ldr	r3, [r3, #0]
 8006c5c:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 8006c5e:	687b      	ldr	r3, [r7, #4]
 8006c60:	2201      	movs	r2, #1
 8006c62:	f8c3 23fc 	str.w	r2, [r3, #1020]	; 0x3fc
  hpcd->LPM_State = LPM_L0;
 8006c66:	687b      	ldr	r3, [r7, #4]
 8006c68:	2200      	movs	r2, #0
 8006c6a:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8006c6e:	68fb      	ldr	r3, [r7, #12]
 8006c70:	699b      	ldr	r3, [r3, #24]
 8006c72:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8006c76:	68fb      	ldr	r3, [r7, #12]
 8006c78:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8006c7a:	68fb      	ldr	r3, [r7, #12]
 8006c7c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8006c7e:	4b05      	ldr	r3, [pc, #20]	; (8006c94 <HAL_PCDEx_ActivateLPM+0x44>)
 8006c80:	4313      	orrs	r3, r2
 8006c82:	68fa      	ldr	r2, [r7, #12]
 8006c84:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 8006c86:	2300      	movs	r3, #0
}
 8006c88:	4618      	mov	r0, r3
 8006c8a:	3714      	adds	r7, #20
 8006c8c:	46bd      	mov	sp, r7
 8006c8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c92:	4770      	bx	lr
 8006c94:	10000003 	.word	0x10000003

08006c98 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8006c98:	b480      	push	{r7}
 8006c9a:	b083      	sub	sp, #12
 8006c9c:	af00      	add	r7, sp, #0
 8006c9e:	6078      	str	r0, [r7, #4]
 8006ca0:	460b      	mov	r3, r1
 8006ca2:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8006ca4:	bf00      	nop
 8006ca6:	370c      	adds	r7, #12
 8006ca8:	46bd      	mov	sp, r7
 8006caa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cae:	4770      	bx	lr

08006cb0 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8006cb0:	b580      	push	{r7, lr}
 8006cb2:	b084      	sub	sp, #16
 8006cb4:	af00      	add	r7, sp, #0
 8006cb6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 8006cb8:	4b19      	ldr	r3, [pc, #100]	; (8006d20 <HAL_PWREx_ConfigSupply+0x70>)
 8006cba:	68db      	ldr	r3, [r3, #12]
 8006cbc:	f003 0304 	and.w	r3, r3, #4
 8006cc0:	2b04      	cmp	r3, #4
 8006cc2:	d00a      	beq.n	8006cda <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8006cc4:	4b16      	ldr	r3, [pc, #88]	; (8006d20 <HAL_PWREx_ConfigSupply+0x70>)
 8006cc6:	68db      	ldr	r3, [r3, #12]
 8006cc8:	f003 0307 	and.w	r3, r3, #7
 8006ccc:	687a      	ldr	r2, [r7, #4]
 8006cce:	429a      	cmp	r2, r3
 8006cd0:	d001      	beq.n	8006cd6 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8006cd2:	2301      	movs	r3, #1
 8006cd4:	e01f      	b.n	8006d16 <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8006cd6:	2300      	movs	r3, #0
 8006cd8:	e01d      	b.n	8006d16 <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8006cda:	4b11      	ldr	r3, [pc, #68]	; (8006d20 <HAL_PWREx_ConfigSupply+0x70>)
 8006cdc:	68db      	ldr	r3, [r3, #12]
 8006cde:	f023 0207 	bic.w	r2, r3, #7
 8006ce2:	490f      	ldr	r1, [pc, #60]	; (8006d20 <HAL_PWREx_ConfigSupply+0x70>)
 8006ce4:	687b      	ldr	r3, [r7, #4]
 8006ce6:	4313      	orrs	r3, r2
 8006ce8:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8006cea:	f7fb fb61 	bl	80023b0 <HAL_GetTick>
 8006cee:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8006cf0:	e009      	b.n	8006d06 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8006cf2:	f7fb fb5d 	bl	80023b0 <HAL_GetTick>
 8006cf6:	4602      	mov	r2, r0
 8006cf8:	68fb      	ldr	r3, [r7, #12]
 8006cfa:	1ad3      	subs	r3, r2, r3
 8006cfc:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8006d00:	d901      	bls.n	8006d06 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8006d02:	2301      	movs	r3, #1
 8006d04:	e007      	b.n	8006d16 <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8006d06:	4b06      	ldr	r3, [pc, #24]	; (8006d20 <HAL_PWREx_ConfigSupply+0x70>)
 8006d08:	685b      	ldr	r3, [r3, #4]
 8006d0a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8006d0e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006d12:	d1ee      	bne.n	8006cf2 <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8006d14:	2300      	movs	r3, #0
}
 8006d16:	4618      	mov	r0, r3
 8006d18:	3710      	adds	r7, #16
 8006d1a:	46bd      	mov	sp, r7
 8006d1c:	bd80      	pop	{r7, pc}
 8006d1e:	bf00      	nop
 8006d20:	58024800 	.word	0x58024800

08006d24 <HAL_PWREx_EnableUSBVoltageDetector>:
/**
  * @brief Enable the USB voltage level detector.
  * @retval None.
  */
void HAL_PWREx_EnableUSBVoltageDetector (void)
{
 8006d24:	b480      	push	{r7}
 8006d26:	af00      	add	r7, sp, #0
  /* Enable the USB voltage detector */
  SET_BIT (PWR->CR3, PWR_CR3_USB33DEN);
 8006d28:	4b05      	ldr	r3, [pc, #20]	; (8006d40 <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 8006d2a:	68db      	ldr	r3, [r3, #12]
 8006d2c:	4a04      	ldr	r2, [pc, #16]	; (8006d40 <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 8006d2e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8006d32:	60d3      	str	r3, [r2, #12]
}
 8006d34:	bf00      	nop
 8006d36:	46bd      	mov	sp, r7
 8006d38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d3c:	4770      	bx	lr
 8006d3e:	bf00      	nop
 8006d40:	58024800 	.word	0x58024800

08006d44 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8006d44:	b580      	push	{r7, lr}
 8006d46:	b08c      	sub	sp, #48	; 0x30
 8006d48:	af00      	add	r7, sp, #0
 8006d4a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

    /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8006d4c:	687b      	ldr	r3, [r7, #4]
 8006d4e:	2b00      	cmp	r3, #0
 8006d50:	d101      	bne.n	8006d56 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8006d52:	2301      	movs	r3, #1
 8006d54:	e3fd      	b.n	8007552 <HAL_RCC_OscConfig+0x80e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8006d56:	687b      	ldr	r3, [r7, #4]
 8006d58:	681b      	ldr	r3, [r3, #0]
 8006d5a:	f003 0301 	and.w	r3, r3, #1
 8006d5e:	2b00      	cmp	r3, #0
 8006d60:	f000 8087 	beq.w	8006e72 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8006d64:	4b99      	ldr	r3, [pc, #612]	; (8006fcc <HAL_RCC_OscConfig+0x288>)
 8006d66:	691b      	ldr	r3, [r3, #16]
 8006d68:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8006d6c:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8006d6e:	4b97      	ldr	r3, [pc, #604]	; (8006fcc <HAL_RCC_OscConfig+0x288>)
 8006d70:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006d72:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8006d74:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006d76:	2b10      	cmp	r3, #16
 8006d78:	d007      	beq.n	8006d8a <HAL_RCC_OscConfig+0x46>
 8006d7a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006d7c:	2b18      	cmp	r3, #24
 8006d7e:	d110      	bne.n	8006da2 <HAL_RCC_OscConfig+0x5e>
 8006d80:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006d82:	f003 0303 	and.w	r3, r3, #3
 8006d86:	2b02      	cmp	r3, #2
 8006d88:	d10b      	bne.n	8006da2 <HAL_RCC_OscConfig+0x5e>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006d8a:	4b90      	ldr	r3, [pc, #576]	; (8006fcc <HAL_RCC_OscConfig+0x288>)
 8006d8c:	681b      	ldr	r3, [r3, #0]
 8006d8e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006d92:	2b00      	cmp	r3, #0
 8006d94:	d06c      	beq.n	8006e70 <HAL_RCC_OscConfig+0x12c>
 8006d96:	687b      	ldr	r3, [r7, #4]
 8006d98:	685b      	ldr	r3, [r3, #4]
 8006d9a:	2b00      	cmp	r3, #0
 8006d9c:	d168      	bne.n	8006e70 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8006d9e:	2301      	movs	r3, #1
 8006da0:	e3d7      	b.n	8007552 <HAL_RCC_OscConfig+0x80e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8006da2:	687b      	ldr	r3, [r7, #4]
 8006da4:	685b      	ldr	r3, [r3, #4]
 8006da6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006daa:	d106      	bne.n	8006dba <HAL_RCC_OscConfig+0x76>
 8006dac:	4b87      	ldr	r3, [pc, #540]	; (8006fcc <HAL_RCC_OscConfig+0x288>)
 8006dae:	681b      	ldr	r3, [r3, #0]
 8006db0:	4a86      	ldr	r2, [pc, #536]	; (8006fcc <HAL_RCC_OscConfig+0x288>)
 8006db2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006db6:	6013      	str	r3, [r2, #0]
 8006db8:	e02e      	b.n	8006e18 <HAL_RCC_OscConfig+0xd4>
 8006dba:	687b      	ldr	r3, [r7, #4]
 8006dbc:	685b      	ldr	r3, [r3, #4]
 8006dbe:	2b00      	cmp	r3, #0
 8006dc0:	d10c      	bne.n	8006ddc <HAL_RCC_OscConfig+0x98>
 8006dc2:	4b82      	ldr	r3, [pc, #520]	; (8006fcc <HAL_RCC_OscConfig+0x288>)
 8006dc4:	681b      	ldr	r3, [r3, #0]
 8006dc6:	4a81      	ldr	r2, [pc, #516]	; (8006fcc <HAL_RCC_OscConfig+0x288>)
 8006dc8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006dcc:	6013      	str	r3, [r2, #0]
 8006dce:	4b7f      	ldr	r3, [pc, #508]	; (8006fcc <HAL_RCC_OscConfig+0x288>)
 8006dd0:	681b      	ldr	r3, [r3, #0]
 8006dd2:	4a7e      	ldr	r2, [pc, #504]	; (8006fcc <HAL_RCC_OscConfig+0x288>)
 8006dd4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006dd8:	6013      	str	r3, [r2, #0]
 8006dda:	e01d      	b.n	8006e18 <HAL_RCC_OscConfig+0xd4>
 8006ddc:	687b      	ldr	r3, [r7, #4]
 8006dde:	685b      	ldr	r3, [r3, #4]
 8006de0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8006de4:	d10c      	bne.n	8006e00 <HAL_RCC_OscConfig+0xbc>
 8006de6:	4b79      	ldr	r3, [pc, #484]	; (8006fcc <HAL_RCC_OscConfig+0x288>)
 8006de8:	681b      	ldr	r3, [r3, #0]
 8006dea:	4a78      	ldr	r2, [pc, #480]	; (8006fcc <HAL_RCC_OscConfig+0x288>)
 8006dec:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8006df0:	6013      	str	r3, [r2, #0]
 8006df2:	4b76      	ldr	r3, [pc, #472]	; (8006fcc <HAL_RCC_OscConfig+0x288>)
 8006df4:	681b      	ldr	r3, [r3, #0]
 8006df6:	4a75      	ldr	r2, [pc, #468]	; (8006fcc <HAL_RCC_OscConfig+0x288>)
 8006df8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006dfc:	6013      	str	r3, [r2, #0]
 8006dfe:	e00b      	b.n	8006e18 <HAL_RCC_OscConfig+0xd4>
 8006e00:	4b72      	ldr	r3, [pc, #456]	; (8006fcc <HAL_RCC_OscConfig+0x288>)
 8006e02:	681b      	ldr	r3, [r3, #0]
 8006e04:	4a71      	ldr	r2, [pc, #452]	; (8006fcc <HAL_RCC_OscConfig+0x288>)
 8006e06:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006e0a:	6013      	str	r3, [r2, #0]
 8006e0c:	4b6f      	ldr	r3, [pc, #444]	; (8006fcc <HAL_RCC_OscConfig+0x288>)
 8006e0e:	681b      	ldr	r3, [r3, #0]
 8006e10:	4a6e      	ldr	r2, [pc, #440]	; (8006fcc <HAL_RCC_OscConfig+0x288>)
 8006e12:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006e16:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8006e18:	687b      	ldr	r3, [r7, #4]
 8006e1a:	685b      	ldr	r3, [r3, #4]
 8006e1c:	2b00      	cmp	r3, #0
 8006e1e:	d013      	beq.n	8006e48 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006e20:	f7fb fac6 	bl	80023b0 <HAL_GetTick>
 8006e24:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8006e26:	e008      	b.n	8006e3a <HAL_RCC_OscConfig+0xf6>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8006e28:	f7fb fac2 	bl	80023b0 <HAL_GetTick>
 8006e2c:	4602      	mov	r2, r0
 8006e2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e30:	1ad3      	subs	r3, r2, r3
 8006e32:	2b64      	cmp	r3, #100	; 0x64
 8006e34:	d901      	bls.n	8006e3a <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8006e36:	2303      	movs	r3, #3
 8006e38:	e38b      	b.n	8007552 <HAL_RCC_OscConfig+0x80e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8006e3a:	4b64      	ldr	r3, [pc, #400]	; (8006fcc <HAL_RCC_OscConfig+0x288>)
 8006e3c:	681b      	ldr	r3, [r3, #0]
 8006e3e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006e42:	2b00      	cmp	r3, #0
 8006e44:	d0f0      	beq.n	8006e28 <HAL_RCC_OscConfig+0xe4>
 8006e46:	e014      	b.n	8006e72 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006e48:	f7fb fab2 	bl	80023b0 <HAL_GetTick>
 8006e4c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8006e4e:	e008      	b.n	8006e62 <HAL_RCC_OscConfig+0x11e>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8006e50:	f7fb faae 	bl	80023b0 <HAL_GetTick>
 8006e54:	4602      	mov	r2, r0
 8006e56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e58:	1ad3      	subs	r3, r2, r3
 8006e5a:	2b64      	cmp	r3, #100	; 0x64
 8006e5c:	d901      	bls.n	8006e62 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8006e5e:	2303      	movs	r3, #3
 8006e60:	e377      	b.n	8007552 <HAL_RCC_OscConfig+0x80e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8006e62:	4b5a      	ldr	r3, [pc, #360]	; (8006fcc <HAL_RCC_OscConfig+0x288>)
 8006e64:	681b      	ldr	r3, [r3, #0]
 8006e66:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006e6a:	2b00      	cmp	r3, #0
 8006e6c:	d1f0      	bne.n	8006e50 <HAL_RCC_OscConfig+0x10c>
 8006e6e:	e000      	b.n	8006e72 <HAL_RCC_OscConfig+0x12e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006e70:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8006e72:	687b      	ldr	r3, [r7, #4]
 8006e74:	681b      	ldr	r3, [r3, #0]
 8006e76:	f003 0302 	and.w	r3, r3, #2
 8006e7a:	2b00      	cmp	r3, #0
 8006e7c:	f000 80ae 	beq.w	8006fdc <HAL_RCC_OscConfig+0x298>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8006e80:	4b52      	ldr	r3, [pc, #328]	; (8006fcc <HAL_RCC_OscConfig+0x288>)
 8006e82:	691b      	ldr	r3, [r3, #16]
 8006e84:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8006e88:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8006e8a:	4b50      	ldr	r3, [pc, #320]	; (8006fcc <HAL_RCC_OscConfig+0x288>)
 8006e8c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006e8e:	61fb      	str	r3, [r7, #28]
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8006e90:	6a3b      	ldr	r3, [r7, #32]
 8006e92:	2b00      	cmp	r3, #0
 8006e94:	d007      	beq.n	8006ea6 <HAL_RCC_OscConfig+0x162>
 8006e96:	6a3b      	ldr	r3, [r7, #32]
 8006e98:	2b18      	cmp	r3, #24
 8006e9a:	d13a      	bne.n	8006f12 <HAL_RCC_OscConfig+0x1ce>
 8006e9c:	69fb      	ldr	r3, [r7, #28]
 8006e9e:	f003 0303 	and.w	r3, r3, #3
 8006ea2:	2b00      	cmp	r3, #0
 8006ea4:	d135      	bne.n	8006f12 <HAL_RCC_OscConfig+0x1ce>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8006ea6:	4b49      	ldr	r3, [pc, #292]	; (8006fcc <HAL_RCC_OscConfig+0x288>)
 8006ea8:	681b      	ldr	r3, [r3, #0]
 8006eaa:	f003 0304 	and.w	r3, r3, #4
 8006eae:	2b00      	cmp	r3, #0
 8006eb0:	d005      	beq.n	8006ebe <HAL_RCC_OscConfig+0x17a>
 8006eb2:	687b      	ldr	r3, [r7, #4]
 8006eb4:	68db      	ldr	r3, [r3, #12]
 8006eb6:	2b00      	cmp	r3, #0
 8006eb8:	d101      	bne.n	8006ebe <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8006eba:	2301      	movs	r3, #1
 8006ebc:	e349      	b.n	8007552 <HAL_RCC_OscConfig+0x80e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006ebe:	f7fb faa7 	bl	8002410 <HAL_GetREVID>
 8006ec2:	4603      	mov	r3, r0
 8006ec4:	f241 0203 	movw	r2, #4099	; 0x1003
 8006ec8:	4293      	cmp	r3, r2
 8006eca:	d817      	bhi.n	8006efc <HAL_RCC_OscConfig+0x1b8>
 8006ecc:	687b      	ldr	r3, [r7, #4]
 8006ece:	691b      	ldr	r3, [r3, #16]
 8006ed0:	2b40      	cmp	r3, #64	; 0x40
 8006ed2:	d108      	bne.n	8006ee6 <HAL_RCC_OscConfig+0x1a2>
 8006ed4:	4b3d      	ldr	r3, [pc, #244]	; (8006fcc <HAL_RCC_OscConfig+0x288>)
 8006ed6:	685b      	ldr	r3, [r3, #4]
 8006ed8:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8006edc:	4a3b      	ldr	r2, [pc, #236]	; (8006fcc <HAL_RCC_OscConfig+0x288>)
 8006ede:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006ee2:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8006ee4:	e07a      	b.n	8006fdc <HAL_RCC_OscConfig+0x298>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006ee6:	4b39      	ldr	r3, [pc, #228]	; (8006fcc <HAL_RCC_OscConfig+0x288>)
 8006ee8:	685b      	ldr	r3, [r3, #4]
 8006eea:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8006eee:	687b      	ldr	r3, [r7, #4]
 8006ef0:	691b      	ldr	r3, [r3, #16]
 8006ef2:	031b      	lsls	r3, r3, #12
 8006ef4:	4935      	ldr	r1, [pc, #212]	; (8006fcc <HAL_RCC_OscConfig+0x288>)
 8006ef6:	4313      	orrs	r3, r2
 8006ef8:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8006efa:	e06f      	b.n	8006fdc <HAL_RCC_OscConfig+0x298>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006efc:	4b33      	ldr	r3, [pc, #204]	; (8006fcc <HAL_RCC_OscConfig+0x288>)
 8006efe:	685b      	ldr	r3, [r3, #4]
 8006f00:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8006f04:	687b      	ldr	r3, [r7, #4]
 8006f06:	691b      	ldr	r3, [r3, #16]
 8006f08:	061b      	lsls	r3, r3, #24
 8006f0a:	4930      	ldr	r1, [pc, #192]	; (8006fcc <HAL_RCC_OscConfig+0x288>)
 8006f0c:	4313      	orrs	r3, r2
 8006f0e:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8006f10:	e064      	b.n	8006fdc <HAL_RCC_OscConfig+0x298>
    }

    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8006f12:	687b      	ldr	r3, [r7, #4]
 8006f14:	68db      	ldr	r3, [r3, #12]
 8006f16:	2b00      	cmp	r3, #0
 8006f18:	d045      	beq.n	8006fa6 <HAL_RCC_OscConfig+0x262>
      {
     /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8006f1a:	4b2c      	ldr	r3, [pc, #176]	; (8006fcc <HAL_RCC_OscConfig+0x288>)
 8006f1c:	681b      	ldr	r3, [r3, #0]
 8006f1e:	f023 0219 	bic.w	r2, r3, #25
 8006f22:	687b      	ldr	r3, [r7, #4]
 8006f24:	68db      	ldr	r3, [r3, #12]
 8006f26:	4929      	ldr	r1, [pc, #164]	; (8006fcc <HAL_RCC_OscConfig+0x288>)
 8006f28:	4313      	orrs	r3, r2
 8006f2a:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006f2c:	f7fb fa40 	bl	80023b0 <HAL_GetTick>
 8006f30:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8006f32:	e008      	b.n	8006f46 <HAL_RCC_OscConfig+0x202>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8006f34:	f7fb fa3c 	bl	80023b0 <HAL_GetTick>
 8006f38:	4602      	mov	r2, r0
 8006f3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f3c:	1ad3      	subs	r3, r2, r3
 8006f3e:	2b02      	cmp	r3, #2
 8006f40:	d901      	bls.n	8006f46 <HAL_RCC_OscConfig+0x202>
          {
            return HAL_TIMEOUT;
 8006f42:	2303      	movs	r3, #3
 8006f44:	e305      	b.n	8007552 <HAL_RCC_OscConfig+0x80e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8006f46:	4b21      	ldr	r3, [pc, #132]	; (8006fcc <HAL_RCC_OscConfig+0x288>)
 8006f48:	681b      	ldr	r3, [r3, #0]
 8006f4a:	f003 0304 	and.w	r3, r3, #4
 8006f4e:	2b00      	cmp	r3, #0
 8006f50:	d0f0      	beq.n	8006f34 <HAL_RCC_OscConfig+0x1f0>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006f52:	f7fb fa5d 	bl	8002410 <HAL_GetREVID>
 8006f56:	4603      	mov	r3, r0
 8006f58:	f241 0203 	movw	r2, #4099	; 0x1003
 8006f5c:	4293      	cmp	r3, r2
 8006f5e:	d817      	bhi.n	8006f90 <HAL_RCC_OscConfig+0x24c>
 8006f60:	687b      	ldr	r3, [r7, #4]
 8006f62:	691b      	ldr	r3, [r3, #16]
 8006f64:	2b40      	cmp	r3, #64	; 0x40
 8006f66:	d108      	bne.n	8006f7a <HAL_RCC_OscConfig+0x236>
 8006f68:	4b18      	ldr	r3, [pc, #96]	; (8006fcc <HAL_RCC_OscConfig+0x288>)
 8006f6a:	685b      	ldr	r3, [r3, #4]
 8006f6c:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8006f70:	4a16      	ldr	r2, [pc, #88]	; (8006fcc <HAL_RCC_OscConfig+0x288>)
 8006f72:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006f76:	6053      	str	r3, [r2, #4]
 8006f78:	e030      	b.n	8006fdc <HAL_RCC_OscConfig+0x298>
 8006f7a:	4b14      	ldr	r3, [pc, #80]	; (8006fcc <HAL_RCC_OscConfig+0x288>)
 8006f7c:	685b      	ldr	r3, [r3, #4]
 8006f7e:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8006f82:	687b      	ldr	r3, [r7, #4]
 8006f84:	691b      	ldr	r3, [r3, #16]
 8006f86:	031b      	lsls	r3, r3, #12
 8006f88:	4910      	ldr	r1, [pc, #64]	; (8006fcc <HAL_RCC_OscConfig+0x288>)
 8006f8a:	4313      	orrs	r3, r2
 8006f8c:	604b      	str	r3, [r1, #4]
 8006f8e:	e025      	b.n	8006fdc <HAL_RCC_OscConfig+0x298>
 8006f90:	4b0e      	ldr	r3, [pc, #56]	; (8006fcc <HAL_RCC_OscConfig+0x288>)
 8006f92:	685b      	ldr	r3, [r3, #4]
 8006f94:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8006f98:	687b      	ldr	r3, [r7, #4]
 8006f9a:	691b      	ldr	r3, [r3, #16]
 8006f9c:	061b      	lsls	r3, r3, #24
 8006f9e:	490b      	ldr	r1, [pc, #44]	; (8006fcc <HAL_RCC_OscConfig+0x288>)
 8006fa0:	4313      	orrs	r3, r2
 8006fa2:	604b      	str	r3, [r1, #4]
 8006fa4:	e01a      	b.n	8006fdc <HAL_RCC_OscConfig+0x298>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8006fa6:	4b09      	ldr	r3, [pc, #36]	; (8006fcc <HAL_RCC_OscConfig+0x288>)
 8006fa8:	681b      	ldr	r3, [r3, #0]
 8006faa:	4a08      	ldr	r2, [pc, #32]	; (8006fcc <HAL_RCC_OscConfig+0x288>)
 8006fac:	f023 0301 	bic.w	r3, r3, #1
 8006fb0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006fb2:	f7fb f9fd 	bl	80023b0 <HAL_GetTick>
 8006fb6:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8006fb8:	e00a      	b.n	8006fd0 <HAL_RCC_OscConfig+0x28c>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8006fba:	f7fb f9f9 	bl	80023b0 <HAL_GetTick>
 8006fbe:	4602      	mov	r2, r0
 8006fc0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006fc2:	1ad3      	subs	r3, r2, r3
 8006fc4:	2b02      	cmp	r3, #2
 8006fc6:	d903      	bls.n	8006fd0 <HAL_RCC_OscConfig+0x28c>
          {
            return HAL_TIMEOUT;
 8006fc8:	2303      	movs	r3, #3
 8006fca:	e2c2      	b.n	8007552 <HAL_RCC_OscConfig+0x80e>
 8006fcc:	58024400 	.word	0x58024400
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8006fd0:	4b94      	ldr	r3, [pc, #592]	; (8007224 <HAL_RCC_OscConfig+0x4e0>)
 8006fd2:	681b      	ldr	r3, [r3, #0]
 8006fd4:	f003 0304 	and.w	r3, r3, #4
 8006fd8:	2b00      	cmp	r3, #0
 8006fda:	d1ee      	bne.n	8006fba <HAL_RCC_OscConfig+0x276>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8006fdc:	687b      	ldr	r3, [r7, #4]
 8006fde:	681b      	ldr	r3, [r3, #0]
 8006fe0:	f003 0310 	and.w	r3, r3, #16
 8006fe4:	2b00      	cmp	r3, #0
 8006fe6:	f000 80a9 	beq.w	800713c <HAL_RCC_OscConfig+0x3f8>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8006fea:	4b8e      	ldr	r3, [pc, #568]	; (8007224 <HAL_RCC_OscConfig+0x4e0>)
 8006fec:	691b      	ldr	r3, [r3, #16]
 8006fee:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8006ff2:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8006ff4:	4b8b      	ldr	r3, [pc, #556]	; (8007224 <HAL_RCC_OscConfig+0x4e0>)
 8006ff6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006ff8:	617b      	str	r3, [r7, #20]
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8006ffa:	69bb      	ldr	r3, [r7, #24]
 8006ffc:	2b08      	cmp	r3, #8
 8006ffe:	d007      	beq.n	8007010 <HAL_RCC_OscConfig+0x2cc>
 8007000:	69bb      	ldr	r3, [r7, #24]
 8007002:	2b18      	cmp	r3, #24
 8007004:	d13a      	bne.n	800707c <HAL_RCC_OscConfig+0x338>
 8007006:	697b      	ldr	r3, [r7, #20]
 8007008:	f003 0303 	and.w	r3, r3, #3
 800700c:	2b01      	cmp	r3, #1
 800700e:	d135      	bne.n	800707c <HAL_RCC_OscConfig+0x338>
    {
      /* When CSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8007010:	4b84      	ldr	r3, [pc, #528]	; (8007224 <HAL_RCC_OscConfig+0x4e0>)
 8007012:	681b      	ldr	r3, [r3, #0]
 8007014:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007018:	2b00      	cmp	r3, #0
 800701a:	d005      	beq.n	8007028 <HAL_RCC_OscConfig+0x2e4>
 800701c:	687b      	ldr	r3, [r7, #4]
 800701e:	69db      	ldr	r3, [r3, #28]
 8007020:	2b80      	cmp	r3, #128	; 0x80
 8007022:	d001      	beq.n	8007028 <HAL_RCC_OscConfig+0x2e4>
      {
        return HAL_ERROR;
 8007024:	2301      	movs	r3, #1
 8007026:	e294      	b.n	8007552 <HAL_RCC_OscConfig+0x80e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8007028:	f7fb f9f2 	bl	8002410 <HAL_GetREVID>
 800702c:	4603      	mov	r3, r0
 800702e:	f241 0203 	movw	r2, #4099	; 0x1003
 8007032:	4293      	cmp	r3, r2
 8007034:	d817      	bhi.n	8007066 <HAL_RCC_OscConfig+0x322>
 8007036:	687b      	ldr	r3, [r7, #4]
 8007038:	6a1b      	ldr	r3, [r3, #32]
 800703a:	2b20      	cmp	r3, #32
 800703c:	d108      	bne.n	8007050 <HAL_RCC_OscConfig+0x30c>
 800703e:	4b79      	ldr	r3, [pc, #484]	; (8007224 <HAL_RCC_OscConfig+0x4e0>)
 8007040:	685b      	ldr	r3, [r3, #4]
 8007042:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8007046:	4a77      	ldr	r2, [pc, #476]	; (8007224 <HAL_RCC_OscConfig+0x4e0>)
 8007048:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800704c:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800704e:	e075      	b.n	800713c <HAL_RCC_OscConfig+0x3f8>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8007050:	4b74      	ldr	r3, [pc, #464]	; (8007224 <HAL_RCC_OscConfig+0x4e0>)
 8007052:	685b      	ldr	r3, [r3, #4]
 8007054:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8007058:	687b      	ldr	r3, [r7, #4]
 800705a:	6a1b      	ldr	r3, [r3, #32]
 800705c:	069b      	lsls	r3, r3, #26
 800705e:	4971      	ldr	r1, [pc, #452]	; (8007224 <HAL_RCC_OscConfig+0x4e0>)
 8007060:	4313      	orrs	r3, r2
 8007062:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8007064:	e06a      	b.n	800713c <HAL_RCC_OscConfig+0x3f8>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8007066:	4b6f      	ldr	r3, [pc, #444]	; (8007224 <HAL_RCC_OscConfig+0x4e0>)
 8007068:	68db      	ldr	r3, [r3, #12]
 800706a:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 800706e:	687b      	ldr	r3, [r7, #4]
 8007070:	6a1b      	ldr	r3, [r3, #32]
 8007072:	061b      	lsls	r3, r3, #24
 8007074:	496b      	ldr	r1, [pc, #428]	; (8007224 <HAL_RCC_OscConfig+0x4e0>)
 8007076:	4313      	orrs	r3, r2
 8007078:	60cb      	str	r3, [r1, #12]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800707a:	e05f      	b.n	800713c <HAL_RCC_OscConfig+0x3f8>
      }
    }
    else
    {
      /* Check the CSI State */
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 800707c:	687b      	ldr	r3, [r7, #4]
 800707e:	69db      	ldr	r3, [r3, #28]
 8007080:	2b00      	cmp	r3, #0
 8007082:	d042      	beq.n	800710a <HAL_RCC_OscConfig+0x3c6>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8007084:	4b67      	ldr	r3, [pc, #412]	; (8007224 <HAL_RCC_OscConfig+0x4e0>)
 8007086:	681b      	ldr	r3, [r3, #0]
 8007088:	4a66      	ldr	r2, [pc, #408]	; (8007224 <HAL_RCC_OscConfig+0x4e0>)
 800708a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800708e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007090:	f7fb f98e 	bl	80023b0 <HAL_GetTick>
 8007094:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8007096:	e008      	b.n	80070aa <HAL_RCC_OscConfig+0x366>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8007098:	f7fb f98a 	bl	80023b0 <HAL_GetTick>
 800709c:	4602      	mov	r2, r0
 800709e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80070a0:	1ad3      	subs	r3, r2, r3
 80070a2:	2b02      	cmp	r3, #2
 80070a4:	d901      	bls.n	80070aa <HAL_RCC_OscConfig+0x366>
          {
            return HAL_TIMEOUT;
 80070a6:	2303      	movs	r3, #3
 80070a8:	e253      	b.n	8007552 <HAL_RCC_OscConfig+0x80e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80070aa:	4b5e      	ldr	r3, [pc, #376]	; (8007224 <HAL_RCC_OscConfig+0x4e0>)
 80070ac:	681b      	ldr	r3, [r3, #0]
 80070ae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80070b2:	2b00      	cmp	r3, #0
 80070b4:	d0f0      	beq.n	8007098 <HAL_RCC_OscConfig+0x354>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80070b6:	f7fb f9ab 	bl	8002410 <HAL_GetREVID>
 80070ba:	4603      	mov	r3, r0
 80070bc:	f241 0203 	movw	r2, #4099	; 0x1003
 80070c0:	4293      	cmp	r3, r2
 80070c2:	d817      	bhi.n	80070f4 <HAL_RCC_OscConfig+0x3b0>
 80070c4:	687b      	ldr	r3, [r7, #4]
 80070c6:	6a1b      	ldr	r3, [r3, #32]
 80070c8:	2b20      	cmp	r3, #32
 80070ca:	d108      	bne.n	80070de <HAL_RCC_OscConfig+0x39a>
 80070cc:	4b55      	ldr	r3, [pc, #340]	; (8007224 <HAL_RCC_OscConfig+0x4e0>)
 80070ce:	685b      	ldr	r3, [r3, #4]
 80070d0:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 80070d4:	4a53      	ldr	r2, [pc, #332]	; (8007224 <HAL_RCC_OscConfig+0x4e0>)
 80070d6:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80070da:	6053      	str	r3, [r2, #4]
 80070dc:	e02e      	b.n	800713c <HAL_RCC_OscConfig+0x3f8>
 80070de:	4b51      	ldr	r3, [pc, #324]	; (8007224 <HAL_RCC_OscConfig+0x4e0>)
 80070e0:	685b      	ldr	r3, [r3, #4]
 80070e2:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 80070e6:	687b      	ldr	r3, [r7, #4]
 80070e8:	6a1b      	ldr	r3, [r3, #32]
 80070ea:	069b      	lsls	r3, r3, #26
 80070ec:	494d      	ldr	r1, [pc, #308]	; (8007224 <HAL_RCC_OscConfig+0x4e0>)
 80070ee:	4313      	orrs	r3, r2
 80070f0:	604b      	str	r3, [r1, #4]
 80070f2:	e023      	b.n	800713c <HAL_RCC_OscConfig+0x3f8>
 80070f4:	4b4b      	ldr	r3, [pc, #300]	; (8007224 <HAL_RCC_OscConfig+0x4e0>)
 80070f6:	68db      	ldr	r3, [r3, #12]
 80070f8:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 80070fc:	687b      	ldr	r3, [r7, #4]
 80070fe:	6a1b      	ldr	r3, [r3, #32]
 8007100:	061b      	lsls	r3, r3, #24
 8007102:	4948      	ldr	r1, [pc, #288]	; (8007224 <HAL_RCC_OscConfig+0x4e0>)
 8007104:	4313      	orrs	r3, r2
 8007106:	60cb      	str	r3, [r1, #12]
 8007108:	e018      	b.n	800713c <HAL_RCC_OscConfig+0x3f8>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 800710a:	4b46      	ldr	r3, [pc, #280]	; (8007224 <HAL_RCC_OscConfig+0x4e0>)
 800710c:	681b      	ldr	r3, [r3, #0]
 800710e:	4a45      	ldr	r2, [pc, #276]	; (8007224 <HAL_RCC_OscConfig+0x4e0>)
 8007110:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007114:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007116:	f7fb f94b 	bl	80023b0 <HAL_GetTick>
 800711a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 800711c:	e008      	b.n	8007130 <HAL_RCC_OscConfig+0x3ec>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 800711e:	f7fb f947 	bl	80023b0 <HAL_GetTick>
 8007122:	4602      	mov	r2, r0
 8007124:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007126:	1ad3      	subs	r3, r2, r3
 8007128:	2b02      	cmp	r3, #2
 800712a:	d901      	bls.n	8007130 <HAL_RCC_OscConfig+0x3ec>
          {
            return HAL_TIMEOUT;
 800712c:	2303      	movs	r3, #3
 800712e:	e210      	b.n	8007552 <HAL_RCC_OscConfig+0x80e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8007130:	4b3c      	ldr	r3, [pc, #240]	; (8007224 <HAL_RCC_OscConfig+0x4e0>)
 8007132:	681b      	ldr	r3, [r3, #0]
 8007134:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007138:	2b00      	cmp	r3, #0
 800713a:	d1f0      	bne.n	800711e <HAL_RCC_OscConfig+0x3da>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800713c:	687b      	ldr	r3, [r7, #4]
 800713e:	681b      	ldr	r3, [r3, #0]
 8007140:	f003 0308 	and.w	r3, r3, #8
 8007144:	2b00      	cmp	r3, #0
 8007146:	d036      	beq.n	80071b6 <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8007148:	687b      	ldr	r3, [r7, #4]
 800714a:	695b      	ldr	r3, [r3, #20]
 800714c:	2b00      	cmp	r3, #0
 800714e:	d019      	beq.n	8007184 <HAL_RCC_OscConfig+0x440>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8007150:	4b34      	ldr	r3, [pc, #208]	; (8007224 <HAL_RCC_OscConfig+0x4e0>)
 8007152:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007154:	4a33      	ldr	r2, [pc, #204]	; (8007224 <HAL_RCC_OscConfig+0x4e0>)
 8007156:	f043 0301 	orr.w	r3, r3, #1
 800715a:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800715c:	f7fb f928 	bl	80023b0 <HAL_GetTick>
 8007160:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8007162:	e008      	b.n	8007176 <HAL_RCC_OscConfig+0x432>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8007164:	f7fb f924 	bl	80023b0 <HAL_GetTick>
 8007168:	4602      	mov	r2, r0
 800716a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800716c:	1ad3      	subs	r3, r2, r3
 800716e:	2b02      	cmp	r3, #2
 8007170:	d901      	bls.n	8007176 <HAL_RCC_OscConfig+0x432>
        {
          return HAL_TIMEOUT;
 8007172:	2303      	movs	r3, #3
 8007174:	e1ed      	b.n	8007552 <HAL_RCC_OscConfig+0x80e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8007176:	4b2b      	ldr	r3, [pc, #172]	; (8007224 <HAL_RCC_OscConfig+0x4e0>)
 8007178:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800717a:	f003 0302 	and.w	r3, r3, #2
 800717e:	2b00      	cmp	r3, #0
 8007180:	d0f0      	beq.n	8007164 <HAL_RCC_OscConfig+0x420>
 8007182:	e018      	b.n	80071b6 <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8007184:	4b27      	ldr	r3, [pc, #156]	; (8007224 <HAL_RCC_OscConfig+0x4e0>)
 8007186:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007188:	4a26      	ldr	r2, [pc, #152]	; (8007224 <HAL_RCC_OscConfig+0x4e0>)
 800718a:	f023 0301 	bic.w	r3, r3, #1
 800718e:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007190:	f7fb f90e 	bl	80023b0 <HAL_GetTick>
 8007194:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8007196:	e008      	b.n	80071aa <HAL_RCC_OscConfig+0x466>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8007198:	f7fb f90a 	bl	80023b0 <HAL_GetTick>
 800719c:	4602      	mov	r2, r0
 800719e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80071a0:	1ad3      	subs	r3, r2, r3
 80071a2:	2b02      	cmp	r3, #2
 80071a4:	d901      	bls.n	80071aa <HAL_RCC_OscConfig+0x466>
        {
          return HAL_TIMEOUT;
 80071a6:	2303      	movs	r3, #3
 80071a8:	e1d3      	b.n	8007552 <HAL_RCC_OscConfig+0x80e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80071aa:	4b1e      	ldr	r3, [pc, #120]	; (8007224 <HAL_RCC_OscConfig+0x4e0>)
 80071ac:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80071ae:	f003 0302 	and.w	r3, r3, #2
 80071b2:	2b00      	cmp	r3, #0
 80071b4:	d1f0      	bne.n	8007198 <HAL_RCC_OscConfig+0x454>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80071b6:	687b      	ldr	r3, [r7, #4]
 80071b8:	681b      	ldr	r3, [r3, #0]
 80071ba:	f003 0320 	and.w	r3, r3, #32
 80071be:	2b00      	cmp	r3, #0
 80071c0:	d038      	beq.n	8007234 <HAL_RCC_OscConfig+0x4f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 80071c2:	687b      	ldr	r3, [r7, #4]
 80071c4:	699b      	ldr	r3, [r3, #24]
 80071c6:	2b00      	cmp	r3, #0
 80071c8:	d019      	beq.n	80071fe <HAL_RCC_OscConfig+0x4ba>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80071ca:	4b16      	ldr	r3, [pc, #88]	; (8007224 <HAL_RCC_OscConfig+0x4e0>)
 80071cc:	681b      	ldr	r3, [r3, #0]
 80071ce:	4a15      	ldr	r2, [pc, #84]	; (8007224 <HAL_RCC_OscConfig+0x4e0>)
 80071d0:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80071d4:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 80071d6:	f7fb f8eb 	bl	80023b0 <HAL_GetTick>
 80071da:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80071dc:	e008      	b.n	80071f0 <HAL_RCC_OscConfig+0x4ac>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 80071de:	f7fb f8e7 	bl	80023b0 <HAL_GetTick>
 80071e2:	4602      	mov	r2, r0
 80071e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80071e6:	1ad3      	subs	r3, r2, r3
 80071e8:	2b02      	cmp	r3, #2
 80071ea:	d901      	bls.n	80071f0 <HAL_RCC_OscConfig+0x4ac>
        {
          return HAL_TIMEOUT;
 80071ec:	2303      	movs	r3, #3
 80071ee:	e1b0      	b.n	8007552 <HAL_RCC_OscConfig+0x80e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80071f0:	4b0c      	ldr	r3, [pc, #48]	; (8007224 <HAL_RCC_OscConfig+0x4e0>)
 80071f2:	681b      	ldr	r3, [r3, #0]
 80071f4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80071f8:	2b00      	cmp	r3, #0
 80071fa:	d0f0      	beq.n	80071de <HAL_RCC_OscConfig+0x49a>
 80071fc:	e01a      	b.n	8007234 <HAL_RCC_OscConfig+0x4f0>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80071fe:	4b09      	ldr	r3, [pc, #36]	; (8007224 <HAL_RCC_OscConfig+0x4e0>)
 8007200:	681b      	ldr	r3, [r3, #0]
 8007202:	4a08      	ldr	r2, [pc, #32]	; (8007224 <HAL_RCC_OscConfig+0x4e0>)
 8007204:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8007208:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 800720a:	f7fb f8d1 	bl	80023b0 <HAL_GetTick>
 800720e:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8007210:	e00a      	b.n	8007228 <HAL_RCC_OscConfig+0x4e4>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8007212:	f7fb f8cd 	bl	80023b0 <HAL_GetTick>
 8007216:	4602      	mov	r2, r0
 8007218:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800721a:	1ad3      	subs	r3, r2, r3
 800721c:	2b02      	cmp	r3, #2
 800721e:	d903      	bls.n	8007228 <HAL_RCC_OscConfig+0x4e4>
        {
          return HAL_TIMEOUT;
 8007220:	2303      	movs	r3, #3
 8007222:	e196      	b.n	8007552 <HAL_RCC_OscConfig+0x80e>
 8007224:	58024400 	.word	0x58024400
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8007228:	4b99      	ldr	r3, [pc, #612]	; (8007490 <HAL_RCC_OscConfig+0x74c>)
 800722a:	681b      	ldr	r3, [r3, #0]
 800722c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8007230:	2b00      	cmp	r3, #0
 8007232:	d1ee      	bne.n	8007212 <HAL_RCC_OscConfig+0x4ce>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8007234:	687b      	ldr	r3, [r7, #4]
 8007236:	681b      	ldr	r3, [r3, #0]
 8007238:	f003 0304 	and.w	r3, r3, #4
 800723c:	2b00      	cmp	r3, #0
 800723e:	f000 8081 	beq.w	8007344 <HAL_RCC_OscConfig+0x600>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8007242:	4b94      	ldr	r3, [pc, #592]	; (8007494 <HAL_RCC_OscConfig+0x750>)
 8007244:	681b      	ldr	r3, [r3, #0]
 8007246:	4a93      	ldr	r2, [pc, #588]	; (8007494 <HAL_RCC_OscConfig+0x750>)
 8007248:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800724c:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800724e:	f7fb f8af 	bl	80023b0 <HAL_GetTick>
 8007252:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8007254:	e008      	b.n	8007268 <HAL_RCC_OscConfig+0x524>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8007256:	f7fb f8ab 	bl	80023b0 <HAL_GetTick>
 800725a:	4602      	mov	r2, r0
 800725c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800725e:	1ad3      	subs	r3, r2, r3
 8007260:	2b64      	cmp	r3, #100	; 0x64
 8007262:	d901      	bls.n	8007268 <HAL_RCC_OscConfig+0x524>
      {
        return HAL_TIMEOUT;
 8007264:	2303      	movs	r3, #3
 8007266:	e174      	b.n	8007552 <HAL_RCC_OscConfig+0x80e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8007268:	4b8a      	ldr	r3, [pc, #552]	; (8007494 <HAL_RCC_OscConfig+0x750>)
 800726a:	681b      	ldr	r3, [r3, #0]
 800726c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007270:	2b00      	cmp	r3, #0
 8007272:	d0f0      	beq.n	8007256 <HAL_RCC_OscConfig+0x512>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8007274:	687b      	ldr	r3, [r7, #4]
 8007276:	689b      	ldr	r3, [r3, #8]
 8007278:	2b01      	cmp	r3, #1
 800727a:	d106      	bne.n	800728a <HAL_RCC_OscConfig+0x546>
 800727c:	4b84      	ldr	r3, [pc, #528]	; (8007490 <HAL_RCC_OscConfig+0x74c>)
 800727e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007280:	4a83      	ldr	r2, [pc, #524]	; (8007490 <HAL_RCC_OscConfig+0x74c>)
 8007282:	f043 0301 	orr.w	r3, r3, #1
 8007286:	6713      	str	r3, [r2, #112]	; 0x70
 8007288:	e02d      	b.n	80072e6 <HAL_RCC_OscConfig+0x5a2>
 800728a:	687b      	ldr	r3, [r7, #4]
 800728c:	689b      	ldr	r3, [r3, #8]
 800728e:	2b00      	cmp	r3, #0
 8007290:	d10c      	bne.n	80072ac <HAL_RCC_OscConfig+0x568>
 8007292:	4b7f      	ldr	r3, [pc, #508]	; (8007490 <HAL_RCC_OscConfig+0x74c>)
 8007294:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007296:	4a7e      	ldr	r2, [pc, #504]	; (8007490 <HAL_RCC_OscConfig+0x74c>)
 8007298:	f023 0301 	bic.w	r3, r3, #1
 800729c:	6713      	str	r3, [r2, #112]	; 0x70
 800729e:	4b7c      	ldr	r3, [pc, #496]	; (8007490 <HAL_RCC_OscConfig+0x74c>)
 80072a0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80072a2:	4a7b      	ldr	r2, [pc, #492]	; (8007490 <HAL_RCC_OscConfig+0x74c>)
 80072a4:	f023 0304 	bic.w	r3, r3, #4
 80072a8:	6713      	str	r3, [r2, #112]	; 0x70
 80072aa:	e01c      	b.n	80072e6 <HAL_RCC_OscConfig+0x5a2>
 80072ac:	687b      	ldr	r3, [r7, #4]
 80072ae:	689b      	ldr	r3, [r3, #8]
 80072b0:	2b05      	cmp	r3, #5
 80072b2:	d10c      	bne.n	80072ce <HAL_RCC_OscConfig+0x58a>
 80072b4:	4b76      	ldr	r3, [pc, #472]	; (8007490 <HAL_RCC_OscConfig+0x74c>)
 80072b6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80072b8:	4a75      	ldr	r2, [pc, #468]	; (8007490 <HAL_RCC_OscConfig+0x74c>)
 80072ba:	f043 0304 	orr.w	r3, r3, #4
 80072be:	6713      	str	r3, [r2, #112]	; 0x70
 80072c0:	4b73      	ldr	r3, [pc, #460]	; (8007490 <HAL_RCC_OscConfig+0x74c>)
 80072c2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80072c4:	4a72      	ldr	r2, [pc, #456]	; (8007490 <HAL_RCC_OscConfig+0x74c>)
 80072c6:	f043 0301 	orr.w	r3, r3, #1
 80072ca:	6713      	str	r3, [r2, #112]	; 0x70
 80072cc:	e00b      	b.n	80072e6 <HAL_RCC_OscConfig+0x5a2>
 80072ce:	4b70      	ldr	r3, [pc, #448]	; (8007490 <HAL_RCC_OscConfig+0x74c>)
 80072d0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80072d2:	4a6f      	ldr	r2, [pc, #444]	; (8007490 <HAL_RCC_OscConfig+0x74c>)
 80072d4:	f023 0301 	bic.w	r3, r3, #1
 80072d8:	6713      	str	r3, [r2, #112]	; 0x70
 80072da:	4b6d      	ldr	r3, [pc, #436]	; (8007490 <HAL_RCC_OscConfig+0x74c>)
 80072dc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80072de:	4a6c      	ldr	r2, [pc, #432]	; (8007490 <HAL_RCC_OscConfig+0x74c>)
 80072e0:	f023 0304 	bic.w	r3, r3, #4
 80072e4:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80072e6:	687b      	ldr	r3, [r7, #4]
 80072e8:	689b      	ldr	r3, [r3, #8]
 80072ea:	2b00      	cmp	r3, #0
 80072ec:	d015      	beq.n	800731a <HAL_RCC_OscConfig+0x5d6>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80072ee:	f7fb f85f 	bl	80023b0 <HAL_GetTick>
 80072f2:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80072f4:	e00a      	b.n	800730c <HAL_RCC_OscConfig+0x5c8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80072f6:	f7fb f85b 	bl	80023b0 <HAL_GetTick>
 80072fa:	4602      	mov	r2, r0
 80072fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80072fe:	1ad3      	subs	r3, r2, r3
 8007300:	f241 3288 	movw	r2, #5000	; 0x1388
 8007304:	4293      	cmp	r3, r2
 8007306:	d901      	bls.n	800730c <HAL_RCC_OscConfig+0x5c8>
        {
          return HAL_TIMEOUT;
 8007308:	2303      	movs	r3, #3
 800730a:	e122      	b.n	8007552 <HAL_RCC_OscConfig+0x80e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800730c:	4b60      	ldr	r3, [pc, #384]	; (8007490 <HAL_RCC_OscConfig+0x74c>)
 800730e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007310:	f003 0302 	and.w	r3, r3, #2
 8007314:	2b00      	cmp	r3, #0
 8007316:	d0ee      	beq.n	80072f6 <HAL_RCC_OscConfig+0x5b2>
 8007318:	e014      	b.n	8007344 <HAL_RCC_OscConfig+0x600>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800731a:	f7fb f849 	bl	80023b0 <HAL_GetTick>
 800731e:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8007320:	e00a      	b.n	8007338 <HAL_RCC_OscConfig+0x5f4>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8007322:	f7fb f845 	bl	80023b0 <HAL_GetTick>
 8007326:	4602      	mov	r2, r0
 8007328:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800732a:	1ad3      	subs	r3, r2, r3
 800732c:	f241 3288 	movw	r2, #5000	; 0x1388
 8007330:	4293      	cmp	r3, r2
 8007332:	d901      	bls.n	8007338 <HAL_RCC_OscConfig+0x5f4>
        {
          return HAL_TIMEOUT;
 8007334:	2303      	movs	r3, #3
 8007336:	e10c      	b.n	8007552 <HAL_RCC_OscConfig+0x80e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8007338:	4b55      	ldr	r3, [pc, #340]	; (8007490 <HAL_RCC_OscConfig+0x74c>)
 800733a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800733c:	f003 0302 	and.w	r3, r3, #2
 8007340:	2b00      	cmp	r3, #0
 8007342:	d1ee      	bne.n	8007322 <HAL_RCC_OscConfig+0x5de>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8007344:	687b      	ldr	r3, [r7, #4]
 8007346:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007348:	2b00      	cmp	r3, #0
 800734a:	f000 8101 	beq.w	8007550 <HAL_RCC_OscConfig+0x80c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 800734e:	4b50      	ldr	r3, [pc, #320]	; (8007490 <HAL_RCC_OscConfig+0x74c>)
 8007350:	691b      	ldr	r3, [r3, #16]
 8007352:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8007356:	2b18      	cmp	r3, #24
 8007358:	f000 80bc 	beq.w	80074d4 <HAL_RCC_OscConfig+0x790>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800735c:	687b      	ldr	r3, [r7, #4]
 800735e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007360:	2b02      	cmp	r3, #2
 8007362:	f040 809d 	bne.w	80074a0 <HAL_RCC_OscConfig+0x75c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007366:	4b4a      	ldr	r3, [pc, #296]	; (8007490 <HAL_RCC_OscConfig+0x74c>)
 8007368:	681b      	ldr	r3, [r3, #0]
 800736a:	4a49      	ldr	r2, [pc, #292]	; (8007490 <HAL_RCC_OscConfig+0x74c>)
 800736c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8007370:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007372:	f7fb f81d 	bl	80023b0 <HAL_GetTick>
 8007376:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8007378:	e008      	b.n	800738c <HAL_RCC_OscConfig+0x648>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800737a:	f7fb f819 	bl	80023b0 <HAL_GetTick>
 800737e:	4602      	mov	r2, r0
 8007380:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007382:	1ad3      	subs	r3, r2, r3
 8007384:	2b02      	cmp	r3, #2
 8007386:	d901      	bls.n	800738c <HAL_RCC_OscConfig+0x648>
          {
            return HAL_TIMEOUT;
 8007388:	2303      	movs	r3, #3
 800738a:	e0e2      	b.n	8007552 <HAL_RCC_OscConfig+0x80e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800738c:	4b40      	ldr	r3, [pc, #256]	; (8007490 <HAL_RCC_OscConfig+0x74c>)
 800738e:	681b      	ldr	r3, [r3, #0]
 8007390:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007394:	2b00      	cmp	r3, #0
 8007396:	d1f0      	bne.n	800737a <HAL_RCC_OscConfig+0x636>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8007398:	4b3d      	ldr	r3, [pc, #244]	; (8007490 <HAL_RCC_OscConfig+0x74c>)
 800739a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800739c:	4b3e      	ldr	r3, [pc, #248]	; (8007498 <HAL_RCC_OscConfig+0x754>)
 800739e:	4013      	ands	r3, r2
 80073a0:	687a      	ldr	r2, [r7, #4]
 80073a2:	6a91      	ldr	r1, [r2, #40]	; 0x28
 80073a4:	687a      	ldr	r2, [r7, #4]
 80073a6:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 80073a8:	0112      	lsls	r2, r2, #4
 80073aa:	430a      	orrs	r2, r1
 80073ac:	4938      	ldr	r1, [pc, #224]	; (8007490 <HAL_RCC_OscConfig+0x74c>)
 80073ae:	4313      	orrs	r3, r2
 80073b0:	628b      	str	r3, [r1, #40]	; 0x28
 80073b2:	687b      	ldr	r3, [r7, #4]
 80073b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80073b6:	3b01      	subs	r3, #1
 80073b8:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80073bc:	687b      	ldr	r3, [r7, #4]
 80073be:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80073c0:	3b01      	subs	r3, #1
 80073c2:	025b      	lsls	r3, r3, #9
 80073c4:	b29b      	uxth	r3, r3
 80073c6:	431a      	orrs	r2, r3
 80073c8:	687b      	ldr	r3, [r7, #4]
 80073ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80073cc:	3b01      	subs	r3, #1
 80073ce:	041b      	lsls	r3, r3, #16
 80073d0:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 80073d4:	431a      	orrs	r2, r3
 80073d6:	687b      	ldr	r3, [r7, #4]
 80073d8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80073da:	3b01      	subs	r3, #1
 80073dc:	061b      	lsls	r3, r3, #24
 80073de:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 80073e2:	492b      	ldr	r1, [pc, #172]	; (8007490 <HAL_RCC_OscConfig+0x74c>)
 80073e4:	4313      	orrs	r3, r2
 80073e6:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

         /* Disable PLLFRACN . */
         __HAL_RCC_PLLFRACN_DISABLE();
 80073e8:	4b29      	ldr	r3, [pc, #164]	; (8007490 <HAL_RCC_OscConfig+0x74c>)
 80073ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80073ec:	4a28      	ldr	r2, [pc, #160]	; (8007490 <HAL_RCC_OscConfig+0x74c>)
 80073ee:	f023 0301 	bic.w	r3, r3, #1
 80073f2:	62d3      	str	r3, [r2, #44]	; 0x2c

         /* Configure PLL PLL1FRACN */
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 80073f4:	4b26      	ldr	r3, [pc, #152]	; (8007490 <HAL_RCC_OscConfig+0x74c>)
 80073f6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80073f8:	4b28      	ldr	r3, [pc, #160]	; (800749c <HAL_RCC_OscConfig+0x758>)
 80073fa:	4013      	ands	r3, r2
 80073fc:	687a      	ldr	r2, [r7, #4]
 80073fe:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8007400:	00d2      	lsls	r2, r2, #3
 8007402:	4923      	ldr	r1, [pc, #140]	; (8007490 <HAL_RCC_OscConfig+0x74c>)
 8007404:	4313      	orrs	r3, r2
 8007406:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8007408:	4b21      	ldr	r3, [pc, #132]	; (8007490 <HAL_RCC_OscConfig+0x74c>)
 800740a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800740c:	f023 020c 	bic.w	r2, r3, #12
 8007410:	687b      	ldr	r3, [r7, #4]
 8007412:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007414:	491e      	ldr	r1, [pc, #120]	; (8007490 <HAL_RCC_OscConfig+0x74c>)
 8007416:	4313      	orrs	r3, r2
 8007418:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 800741a:	4b1d      	ldr	r3, [pc, #116]	; (8007490 <HAL_RCC_OscConfig+0x74c>)
 800741c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800741e:	f023 0202 	bic.w	r2, r3, #2
 8007422:	687b      	ldr	r3, [r7, #4]
 8007424:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007426:	491a      	ldr	r1, [pc, #104]	; (8007490 <HAL_RCC_OscConfig+0x74c>)
 8007428:	4313      	orrs	r3, r2
 800742a:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 800742c:	4b18      	ldr	r3, [pc, #96]	; (8007490 <HAL_RCC_OscConfig+0x74c>)
 800742e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007430:	4a17      	ldr	r2, [pc, #92]	; (8007490 <HAL_RCC_OscConfig+0x74c>)
 8007432:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007436:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007438:	4b15      	ldr	r3, [pc, #84]	; (8007490 <HAL_RCC_OscConfig+0x74c>)
 800743a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800743c:	4a14      	ldr	r2, [pc, #80]	; (8007490 <HAL_RCC_OscConfig+0x74c>)
 800743e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007442:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8007444:	4b12      	ldr	r3, [pc, #72]	; (8007490 <HAL_RCC_OscConfig+0x74c>)
 8007446:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007448:	4a11      	ldr	r2, [pc, #68]	; (8007490 <HAL_RCC_OscConfig+0x74c>)
 800744a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800744e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
         __HAL_RCC_PLLFRACN_ENABLE();
 8007450:	4b0f      	ldr	r3, [pc, #60]	; (8007490 <HAL_RCC_OscConfig+0x74c>)
 8007452:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007454:	4a0e      	ldr	r2, [pc, #56]	; (8007490 <HAL_RCC_OscConfig+0x74c>)
 8007456:	f043 0301 	orr.w	r3, r3, #1
 800745a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800745c:	4b0c      	ldr	r3, [pc, #48]	; (8007490 <HAL_RCC_OscConfig+0x74c>)
 800745e:	681b      	ldr	r3, [r3, #0]
 8007460:	4a0b      	ldr	r2, [pc, #44]	; (8007490 <HAL_RCC_OscConfig+0x74c>)
 8007462:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8007466:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007468:	f7fa ffa2 	bl	80023b0 <HAL_GetTick>
 800746c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800746e:	e008      	b.n	8007482 <HAL_RCC_OscConfig+0x73e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8007470:	f7fa ff9e 	bl	80023b0 <HAL_GetTick>
 8007474:	4602      	mov	r2, r0
 8007476:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007478:	1ad3      	subs	r3, r2, r3
 800747a:	2b02      	cmp	r3, #2
 800747c:	d901      	bls.n	8007482 <HAL_RCC_OscConfig+0x73e>
          {
            return HAL_TIMEOUT;
 800747e:	2303      	movs	r3, #3
 8007480:	e067      	b.n	8007552 <HAL_RCC_OscConfig+0x80e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8007482:	4b03      	ldr	r3, [pc, #12]	; (8007490 <HAL_RCC_OscConfig+0x74c>)
 8007484:	681b      	ldr	r3, [r3, #0]
 8007486:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800748a:	2b00      	cmp	r3, #0
 800748c:	d0f0      	beq.n	8007470 <HAL_RCC_OscConfig+0x72c>
 800748e:	e05f      	b.n	8007550 <HAL_RCC_OscConfig+0x80c>
 8007490:	58024400 	.word	0x58024400
 8007494:	58024800 	.word	0x58024800
 8007498:	fffffc0c 	.word	0xfffffc0c
 800749c:	ffff0007 	.word	0xffff0007
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80074a0:	4b2e      	ldr	r3, [pc, #184]	; (800755c <HAL_RCC_OscConfig+0x818>)
 80074a2:	681b      	ldr	r3, [r3, #0]
 80074a4:	4a2d      	ldr	r2, [pc, #180]	; (800755c <HAL_RCC_OscConfig+0x818>)
 80074a6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80074aa:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80074ac:	f7fa ff80 	bl	80023b0 <HAL_GetTick>
 80074b0:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80074b2:	e008      	b.n	80074c6 <HAL_RCC_OscConfig+0x782>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80074b4:	f7fa ff7c 	bl	80023b0 <HAL_GetTick>
 80074b8:	4602      	mov	r2, r0
 80074ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80074bc:	1ad3      	subs	r3, r2, r3
 80074be:	2b02      	cmp	r3, #2
 80074c0:	d901      	bls.n	80074c6 <HAL_RCC_OscConfig+0x782>
          {
            return HAL_TIMEOUT;
 80074c2:	2303      	movs	r3, #3
 80074c4:	e045      	b.n	8007552 <HAL_RCC_OscConfig+0x80e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80074c6:	4b25      	ldr	r3, [pc, #148]	; (800755c <HAL_RCC_OscConfig+0x818>)
 80074c8:	681b      	ldr	r3, [r3, #0]
 80074ca:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80074ce:	2b00      	cmp	r3, #0
 80074d0:	d1f0      	bne.n	80074b4 <HAL_RCC_OscConfig+0x770>
 80074d2:	e03d      	b.n	8007550 <HAL_RCC_OscConfig+0x80c>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 80074d4:	4b21      	ldr	r3, [pc, #132]	; (800755c <HAL_RCC_OscConfig+0x818>)
 80074d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80074d8:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 80074da:	4b20      	ldr	r3, [pc, #128]	; (800755c <HAL_RCC_OscConfig+0x818>)
 80074dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80074de:	60fb      	str	r3, [r7, #12]
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80074e0:	687b      	ldr	r3, [r7, #4]
 80074e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80074e4:	2b01      	cmp	r3, #1
 80074e6:	d031      	beq.n	800754c <HAL_RCC_OscConfig+0x808>
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80074e8:	693b      	ldr	r3, [r7, #16]
 80074ea:	f003 0203 	and.w	r2, r3, #3
 80074ee:	687b      	ldr	r3, [r7, #4]
 80074f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80074f2:	429a      	cmp	r2, r3
 80074f4:	d12a      	bne.n	800754c <HAL_RCC_OscConfig+0x808>
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 80074f6:	693b      	ldr	r3, [r7, #16]
 80074f8:	091b      	lsrs	r3, r3, #4
 80074fa:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80074fe:	687b      	ldr	r3, [r7, #4]
 8007500:	6adb      	ldr	r3, [r3, #44]	; 0x2c
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007502:	429a      	cmp	r2, r3
 8007504:	d122      	bne.n	800754c <HAL_RCC_OscConfig+0x808>
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8007506:	68fb      	ldr	r3, [r7, #12]
 8007508:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800750c:	687b      	ldr	r3, [r7, #4]
 800750e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007510:	3b01      	subs	r3, #1
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8007512:	429a      	cmp	r2, r3
 8007514:	d11a      	bne.n	800754c <HAL_RCC_OscConfig+0x808>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8007516:	68fb      	ldr	r3, [r7, #12]
 8007518:	0a5b      	lsrs	r3, r3, #9
 800751a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800751e:	687b      	ldr	r3, [r7, #4]
 8007520:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007522:	3b01      	subs	r3, #1
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8007524:	429a      	cmp	r2, r3
 8007526:	d111      	bne.n	800754c <HAL_RCC_OscConfig+0x808>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8007528:	68fb      	ldr	r3, [r7, #12]
 800752a:	0c1b      	lsrs	r3, r3, #16
 800752c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8007530:	687b      	ldr	r3, [r7, #4]
 8007532:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007534:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8007536:	429a      	cmp	r2, r3
 8007538:	d108      	bne.n	800754c <HAL_RCC_OscConfig+0x808>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 800753a:	68fb      	ldr	r3, [r7, #12]
 800753c:	0e1b      	lsrs	r3, r3, #24
 800753e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8007542:	687b      	ldr	r3, [r7, #4]
 8007544:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007546:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8007548:	429a      	cmp	r2, r3
 800754a:	d001      	beq.n	8007550 <HAL_RCC_OscConfig+0x80c>
      {
        return HAL_ERROR;
 800754c:	2301      	movs	r3, #1
 800754e:	e000      	b.n	8007552 <HAL_RCC_OscConfig+0x80e>
      }
    }
  }
  return HAL_OK;
 8007550:	2300      	movs	r3, #0
}
 8007552:	4618      	mov	r0, r3
 8007554:	3730      	adds	r7, #48	; 0x30
 8007556:	46bd      	mov	sp, r7
 8007558:	bd80      	pop	{r7, pc}
 800755a:	bf00      	nop
 800755c:	58024400 	.word	0x58024400

08007560 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8007560:	b580      	push	{r7, lr}
 8007562:	b086      	sub	sp, #24
 8007564:	af00      	add	r7, sp, #0
 8007566:	6078      	str	r0, [r7, #4]
 8007568:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

   /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800756a:	687b      	ldr	r3, [r7, #4]
 800756c:	2b00      	cmp	r3, #0
 800756e:	d101      	bne.n	8007574 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8007570:	2301      	movs	r3, #1
 8007572:	e19c      	b.n	80078ae <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8007574:	4b8a      	ldr	r3, [pc, #552]	; (80077a0 <HAL_RCC_ClockConfig+0x240>)
 8007576:	681b      	ldr	r3, [r3, #0]
 8007578:	f003 030f 	and.w	r3, r3, #15
 800757c:	683a      	ldr	r2, [r7, #0]
 800757e:	429a      	cmp	r2, r3
 8007580:	d910      	bls.n	80075a4 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007582:	4b87      	ldr	r3, [pc, #540]	; (80077a0 <HAL_RCC_ClockConfig+0x240>)
 8007584:	681b      	ldr	r3, [r3, #0]
 8007586:	f023 020f 	bic.w	r2, r3, #15
 800758a:	4985      	ldr	r1, [pc, #532]	; (80077a0 <HAL_RCC_ClockConfig+0x240>)
 800758c:	683b      	ldr	r3, [r7, #0]
 800758e:	4313      	orrs	r3, r2
 8007590:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8007592:	4b83      	ldr	r3, [pc, #524]	; (80077a0 <HAL_RCC_ClockConfig+0x240>)
 8007594:	681b      	ldr	r3, [r3, #0]
 8007596:	f003 030f 	and.w	r3, r3, #15
 800759a:	683a      	ldr	r2, [r7, #0]
 800759c:	429a      	cmp	r2, r3
 800759e:	d001      	beq.n	80075a4 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80075a0:	2301      	movs	r3, #1
 80075a2:	e184      	b.n	80078ae <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 80075a4:	687b      	ldr	r3, [r7, #4]
 80075a6:	681b      	ldr	r3, [r3, #0]
 80075a8:	f003 0304 	and.w	r3, r3, #4
 80075ac:	2b00      	cmp	r3, #0
 80075ae:	d010      	beq.n	80075d2 <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 80075b0:	687b      	ldr	r3, [r7, #4]
 80075b2:	691a      	ldr	r2, [r3, #16]
 80075b4:	4b7b      	ldr	r3, [pc, #492]	; (80077a4 <HAL_RCC_ClockConfig+0x244>)
 80075b6:	699b      	ldr	r3, [r3, #24]
 80075b8:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80075bc:	429a      	cmp	r2, r3
 80075be:	d908      	bls.n	80075d2 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80075c0:	4b78      	ldr	r3, [pc, #480]	; (80077a4 <HAL_RCC_ClockConfig+0x244>)
 80075c2:	699b      	ldr	r3, [r3, #24]
 80075c4:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80075c8:	687b      	ldr	r3, [r7, #4]
 80075ca:	691b      	ldr	r3, [r3, #16]
 80075cc:	4975      	ldr	r1, [pc, #468]	; (80077a4 <HAL_RCC_ClockConfig+0x244>)
 80075ce:	4313      	orrs	r3, r2
 80075d0:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80075d2:	687b      	ldr	r3, [r7, #4]
 80075d4:	681b      	ldr	r3, [r3, #0]
 80075d6:	f003 0308 	and.w	r3, r3, #8
 80075da:	2b00      	cmp	r3, #0
 80075dc:	d010      	beq.n	8007600 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 80075de:	687b      	ldr	r3, [r7, #4]
 80075e0:	695a      	ldr	r2, [r3, #20]
 80075e2:	4b70      	ldr	r3, [pc, #448]	; (80077a4 <HAL_RCC_ClockConfig+0x244>)
 80075e4:	69db      	ldr	r3, [r3, #28]
 80075e6:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80075ea:	429a      	cmp	r2, r3
 80075ec:	d908      	bls.n	8007600 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80075ee:	4b6d      	ldr	r3, [pc, #436]	; (80077a4 <HAL_RCC_ClockConfig+0x244>)
 80075f0:	69db      	ldr	r3, [r3, #28]
 80075f2:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80075f6:	687b      	ldr	r3, [r7, #4]
 80075f8:	695b      	ldr	r3, [r3, #20]
 80075fa:	496a      	ldr	r1, [pc, #424]	; (80077a4 <HAL_RCC_ClockConfig+0x244>)
 80075fc:	4313      	orrs	r3, r2
 80075fe:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
  }
#endif
    }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007600:	687b      	ldr	r3, [r7, #4]
 8007602:	681b      	ldr	r3, [r3, #0]
 8007604:	f003 0310 	and.w	r3, r3, #16
 8007608:	2b00      	cmp	r3, #0
 800760a:	d010      	beq.n	800762e <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 800760c:	687b      	ldr	r3, [r7, #4]
 800760e:	699a      	ldr	r2, [r3, #24]
 8007610:	4b64      	ldr	r3, [pc, #400]	; (80077a4 <HAL_RCC_ClockConfig+0x244>)
 8007612:	69db      	ldr	r3, [r3, #28]
 8007614:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8007618:	429a      	cmp	r2, r3
 800761a:	d908      	bls.n	800762e <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 800761c:	4b61      	ldr	r3, [pc, #388]	; (80077a4 <HAL_RCC_ClockConfig+0x244>)
 800761e:	69db      	ldr	r3, [r3, #28]
 8007620:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8007624:	687b      	ldr	r3, [r7, #4]
 8007626:	699b      	ldr	r3, [r3, #24]
 8007628:	495e      	ldr	r1, [pc, #376]	; (80077a4 <HAL_RCC_ClockConfig+0x244>)
 800762a:	4313      	orrs	r3, r2
 800762c:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800762e:	687b      	ldr	r3, [r7, #4]
 8007630:	681b      	ldr	r3, [r3, #0]
 8007632:	f003 0320 	and.w	r3, r3, #32
 8007636:	2b00      	cmp	r3, #0
 8007638:	d010      	beq.n	800765c <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800763a:	687b      	ldr	r3, [r7, #4]
 800763c:	69da      	ldr	r2, [r3, #28]
 800763e:	4b59      	ldr	r3, [pc, #356]	; (80077a4 <HAL_RCC_ClockConfig+0x244>)
 8007640:	6a1b      	ldr	r3, [r3, #32]
 8007642:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8007646:	429a      	cmp	r2, r3
 8007648:	d908      	bls.n	800765c <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 800764a:	4b56      	ldr	r3, [pc, #344]	; (80077a4 <HAL_RCC_ClockConfig+0x244>)
 800764c:	6a1b      	ldr	r3, [r3, #32]
 800764e:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8007652:	687b      	ldr	r3, [r7, #4]
 8007654:	69db      	ldr	r3, [r3, #28]
 8007656:	4953      	ldr	r1, [pc, #332]	; (80077a4 <HAL_RCC_ClockConfig+0x244>)
 8007658:	4313      	orrs	r3, r2
 800765a:	620b      	str	r3, [r1, #32]
    }
#endif
  }

   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800765c:	687b      	ldr	r3, [r7, #4]
 800765e:	681b      	ldr	r3, [r3, #0]
 8007660:	f003 0302 	and.w	r3, r3, #2
 8007664:	2b00      	cmp	r3, #0
 8007666:	d010      	beq.n	800768a <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8007668:	687b      	ldr	r3, [r7, #4]
 800766a:	68da      	ldr	r2, [r3, #12]
 800766c:	4b4d      	ldr	r3, [pc, #308]	; (80077a4 <HAL_RCC_ClockConfig+0x244>)
 800766e:	699b      	ldr	r3, [r3, #24]
 8007670:	f003 030f 	and.w	r3, r3, #15
 8007674:	429a      	cmp	r2, r3
 8007676:	d908      	bls.n	800768a <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8007678:	4b4a      	ldr	r3, [pc, #296]	; (80077a4 <HAL_RCC_ClockConfig+0x244>)
 800767a:	699b      	ldr	r3, [r3, #24]
 800767c:	f023 020f 	bic.w	r2, r3, #15
 8007680:	687b      	ldr	r3, [r7, #4]
 8007682:	68db      	ldr	r3, [r3, #12]
 8007684:	4947      	ldr	r1, [pc, #284]	; (80077a4 <HAL_RCC_ClockConfig+0x244>)
 8007686:	4313      	orrs	r3, r2
 8007688:	618b      	str	r3, [r1, #24]
    }
#endif
  }

    /*------------------------- SYSCLK Configuration -------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800768a:	687b      	ldr	r3, [r7, #4]
 800768c:	681b      	ldr	r3, [r3, #0]
 800768e:	f003 0301 	and.w	r3, r3, #1
 8007692:	2b00      	cmp	r3, #0
 8007694:	d055      	beq.n	8007742 <HAL_RCC_ClockConfig+0x1e2>
    {
      assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8007696:	4b43      	ldr	r3, [pc, #268]	; (80077a4 <HAL_RCC_ClockConfig+0x244>)
 8007698:	699b      	ldr	r3, [r3, #24]
 800769a:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 800769e:	687b      	ldr	r3, [r7, #4]
 80076a0:	689b      	ldr	r3, [r3, #8]
 80076a2:	4940      	ldr	r1, [pc, #256]	; (80077a4 <HAL_RCC_ClockConfig+0x244>)
 80076a4:	4313      	orrs	r3, r2
 80076a6:	618b      	str	r3, [r1, #24]
#else
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80076a8:	687b      	ldr	r3, [r7, #4]
 80076aa:	685b      	ldr	r3, [r3, #4]
 80076ac:	2b02      	cmp	r3, #2
 80076ae:	d107      	bne.n	80076c0 <HAL_RCC_ClockConfig+0x160>
      {
        /* Check the HSE ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80076b0:	4b3c      	ldr	r3, [pc, #240]	; (80077a4 <HAL_RCC_ClockConfig+0x244>)
 80076b2:	681b      	ldr	r3, [r3, #0]
 80076b4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80076b8:	2b00      	cmp	r3, #0
 80076ba:	d121      	bne.n	8007700 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 80076bc:	2301      	movs	r3, #1
 80076be:	e0f6      	b.n	80078ae <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* PLL is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80076c0:	687b      	ldr	r3, [r7, #4]
 80076c2:	685b      	ldr	r3, [r3, #4]
 80076c4:	2b03      	cmp	r3, #3
 80076c6:	d107      	bne.n	80076d8 <HAL_RCC_ClockConfig+0x178>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80076c8:	4b36      	ldr	r3, [pc, #216]	; (80077a4 <HAL_RCC_ClockConfig+0x244>)
 80076ca:	681b      	ldr	r3, [r3, #0]
 80076cc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80076d0:	2b00      	cmp	r3, #0
 80076d2:	d115      	bne.n	8007700 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 80076d4:	2301      	movs	r3, #1
 80076d6:	e0ea      	b.n	80078ae <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* CSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 80076d8:	687b      	ldr	r3, [r7, #4]
 80076da:	685b      	ldr	r3, [r3, #4]
 80076dc:	2b01      	cmp	r3, #1
 80076de:	d107      	bne.n	80076f0 <HAL_RCC_ClockConfig+0x190>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80076e0:	4b30      	ldr	r3, [pc, #192]	; (80077a4 <HAL_RCC_ClockConfig+0x244>)
 80076e2:	681b      	ldr	r3, [r3, #0]
 80076e4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80076e8:	2b00      	cmp	r3, #0
 80076ea:	d109      	bne.n	8007700 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 80076ec:	2301      	movs	r3, #1
 80076ee:	e0de      	b.n	80078ae <HAL_RCC_ClockConfig+0x34e>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80076f0:	4b2c      	ldr	r3, [pc, #176]	; (80077a4 <HAL_RCC_ClockConfig+0x244>)
 80076f2:	681b      	ldr	r3, [r3, #0]
 80076f4:	f003 0304 	and.w	r3, r3, #4
 80076f8:	2b00      	cmp	r3, #0
 80076fa:	d101      	bne.n	8007700 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 80076fc:	2301      	movs	r3, #1
 80076fe:	e0d6      	b.n	80078ae <HAL_RCC_ClockConfig+0x34e>
        }
      }
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8007700:	4b28      	ldr	r3, [pc, #160]	; (80077a4 <HAL_RCC_ClockConfig+0x244>)
 8007702:	691b      	ldr	r3, [r3, #16]
 8007704:	f023 0207 	bic.w	r2, r3, #7
 8007708:	687b      	ldr	r3, [r7, #4]
 800770a:	685b      	ldr	r3, [r3, #4]
 800770c:	4925      	ldr	r1, [pc, #148]	; (80077a4 <HAL_RCC_ClockConfig+0x244>)
 800770e:	4313      	orrs	r3, r2
 8007710:	610b      	str	r3, [r1, #16]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007712:	f7fa fe4d 	bl	80023b0 <HAL_GetTick>
 8007716:	6178      	str	r0, [r7, #20]

        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007718:	e00a      	b.n	8007730 <HAL_RCC_ClockConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800771a:	f7fa fe49 	bl	80023b0 <HAL_GetTick>
 800771e:	4602      	mov	r2, r0
 8007720:	697b      	ldr	r3, [r7, #20]
 8007722:	1ad3      	subs	r3, r2, r3
 8007724:	f241 3288 	movw	r2, #5000	; 0x1388
 8007728:	4293      	cmp	r3, r2
 800772a:	d901      	bls.n	8007730 <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 800772c:	2303      	movs	r3, #3
 800772e:	e0be      	b.n	80078ae <HAL_RCC_ClockConfig+0x34e>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007730:	4b1c      	ldr	r3, [pc, #112]	; (80077a4 <HAL_RCC_ClockConfig+0x244>)
 8007732:	691b      	ldr	r3, [r3, #16]
 8007734:	f003 0238 	and.w	r2, r3, #56	; 0x38
 8007738:	687b      	ldr	r3, [r7, #4]
 800773a:	685b      	ldr	r3, [r3, #4]
 800773c:	00db      	lsls	r3, r3, #3
 800773e:	429a      	cmp	r2, r3
 8007740:	d1eb      	bne.n	800771a <HAL_RCC_ClockConfig+0x1ba>

    }

    /* Decreasing the BUS frequency divider */
   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8007742:	687b      	ldr	r3, [r7, #4]
 8007744:	681b      	ldr	r3, [r3, #0]
 8007746:	f003 0302 	and.w	r3, r3, #2
 800774a:	2b00      	cmp	r3, #0
 800774c:	d010      	beq.n	8007770 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 800774e:	687b      	ldr	r3, [r7, #4]
 8007750:	68da      	ldr	r2, [r3, #12]
 8007752:	4b14      	ldr	r3, [pc, #80]	; (80077a4 <HAL_RCC_ClockConfig+0x244>)
 8007754:	699b      	ldr	r3, [r3, #24]
 8007756:	f003 030f 	and.w	r3, r3, #15
 800775a:	429a      	cmp	r2, r3
 800775c:	d208      	bcs.n	8007770 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800775e:	4b11      	ldr	r3, [pc, #68]	; (80077a4 <HAL_RCC_ClockConfig+0x244>)
 8007760:	699b      	ldr	r3, [r3, #24]
 8007762:	f023 020f 	bic.w	r2, r3, #15
 8007766:	687b      	ldr	r3, [r7, #4]
 8007768:	68db      	ldr	r3, [r3, #12]
 800776a:	490e      	ldr	r1, [pc, #56]	; (80077a4 <HAL_RCC_ClockConfig+0x244>)
 800776c:	4313      	orrs	r3, r2
 800776e:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8007770:	4b0b      	ldr	r3, [pc, #44]	; (80077a0 <HAL_RCC_ClockConfig+0x240>)
 8007772:	681b      	ldr	r3, [r3, #0]
 8007774:	f003 030f 	and.w	r3, r3, #15
 8007778:	683a      	ldr	r2, [r7, #0]
 800777a:	429a      	cmp	r2, r3
 800777c:	d214      	bcs.n	80077a8 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800777e:	4b08      	ldr	r3, [pc, #32]	; (80077a0 <HAL_RCC_ClockConfig+0x240>)
 8007780:	681b      	ldr	r3, [r3, #0]
 8007782:	f023 020f 	bic.w	r2, r3, #15
 8007786:	4906      	ldr	r1, [pc, #24]	; (80077a0 <HAL_RCC_ClockConfig+0x240>)
 8007788:	683b      	ldr	r3, [r7, #0]
 800778a:	4313      	orrs	r3, r2
 800778c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800778e:	4b04      	ldr	r3, [pc, #16]	; (80077a0 <HAL_RCC_ClockConfig+0x240>)
 8007790:	681b      	ldr	r3, [r3, #0]
 8007792:	f003 030f 	and.w	r3, r3, #15
 8007796:	683a      	ldr	r2, [r7, #0]
 8007798:	429a      	cmp	r2, r3
 800779a:	d005      	beq.n	80077a8 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 800779c:	2301      	movs	r3, #1
 800779e:	e086      	b.n	80078ae <HAL_RCC_ClockConfig+0x34e>
 80077a0:	52002000 	.word	0x52002000
 80077a4:	58024400 	.word	0x58024400
    }
 }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 80077a8:	687b      	ldr	r3, [r7, #4]
 80077aa:	681b      	ldr	r3, [r3, #0]
 80077ac:	f003 0304 	and.w	r3, r3, #4
 80077b0:	2b00      	cmp	r3, #0
 80077b2:	d010      	beq.n	80077d6 <HAL_RCC_ClockConfig+0x276>
 {
#if defined(RCC_D1CFGR_D1PPRE)
   if((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 80077b4:	687b      	ldr	r3, [r7, #4]
 80077b6:	691a      	ldr	r2, [r3, #16]
 80077b8:	4b3f      	ldr	r3, [pc, #252]	; (80078b8 <HAL_RCC_ClockConfig+0x358>)
 80077ba:	699b      	ldr	r3, [r3, #24]
 80077bc:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80077c0:	429a      	cmp	r2, r3
 80077c2:	d208      	bcs.n	80077d6 <HAL_RCC_ClockConfig+0x276>
   {
     assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
     MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80077c4:	4b3c      	ldr	r3, [pc, #240]	; (80078b8 <HAL_RCC_ClockConfig+0x358>)
 80077c6:	699b      	ldr	r3, [r3, #24]
 80077c8:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80077cc:	687b      	ldr	r3, [r7, #4]
 80077ce:	691b      	ldr	r3, [r3, #16]
 80077d0:	4939      	ldr	r1, [pc, #228]	; (80078b8 <HAL_RCC_ClockConfig+0x358>)
 80077d2:	4313      	orrs	r3, r2
 80077d4:	618b      	str	r3, [r1, #24]
   }
#endif
 }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80077d6:	687b      	ldr	r3, [r7, #4]
 80077d8:	681b      	ldr	r3, [r3, #0]
 80077da:	f003 0308 	and.w	r3, r3, #8
 80077de:	2b00      	cmp	r3, #0
 80077e0:	d010      	beq.n	8007804 <HAL_RCC_ClockConfig+0x2a4>
 {
#if defined(RCC_D2CFGR_D2PPRE1)
   if((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 80077e2:	687b      	ldr	r3, [r7, #4]
 80077e4:	695a      	ldr	r2, [r3, #20]
 80077e6:	4b34      	ldr	r3, [pc, #208]	; (80078b8 <HAL_RCC_ClockConfig+0x358>)
 80077e8:	69db      	ldr	r3, [r3, #28]
 80077ea:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80077ee:	429a      	cmp	r2, r3
 80077f0:	d208      	bcs.n	8007804 <HAL_RCC_ClockConfig+0x2a4>
   {
     assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80077f2:	4b31      	ldr	r3, [pc, #196]	; (80078b8 <HAL_RCC_ClockConfig+0x358>)
 80077f4:	69db      	ldr	r3, [r3, #28]
 80077f6:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80077fa:	687b      	ldr	r3, [r7, #4]
 80077fc:	695b      	ldr	r3, [r3, #20]
 80077fe:	492e      	ldr	r1, [pc, #184]	; (80078b8 <HAL_RCC_ClockConfig+0x358>)
 8007800:	4313      	orrs	r3, r2
 8007802:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007804:	687b      	ldr	r3, [r7, #4]
 8007806:	681b      	ldr	r3, [r3, #0]
 8007808:	f003 0310 	and.w	r3, r3, #16
 800780c:	2b00      	cmp	r3, #0
 800780e:	d010      	beq.n	8007832 <HAL_RCC_ClockConfig+0x2d2>
 {
#if defined (RCC_D2CFGR_D2PPRE2)
   if((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8007810:	687b      	ldr	r3, [r7, #4]
 8007812:	699a      	ldr	r2, [r3, #24]
 8007814:	4b28      	ldr	r3, [pc, #160]	; (80078b8 <HAL_RCC_ClockConfig+0x358>)
 8007816:	69db      	ldr	r3, [r3, #28]
 8007818:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800781c:	429a      	cmp	r2, r3
 800781e:	d208      	bcs.n	8007832 <HAL_RCC_ClockConfig+0x2d2>
   {
     assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8007820:	4b25      	ldr	r3, [pc, #148]	; (80078b8 <HAL_RCC_ClockConfig+0x358>)
 8007822:	69db      	ldr	r3, [r3, #28]
 8007824:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8007828:	687b      	ldr	r3, [r7, #4]
 800782a:	699b      	ldr	r3, [r3, #24]
 800782c:	4922      	ldr	r1, [pc, #136]	; (80078b8 <HAL_RCC_ClockConfig+0x358>)
 800782e:	4313      	orrs	r3, r2
 8007830:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8007832:	687b      	ldr	r3, [r7, #4]
 8007834:	681b      	ldr	r3, [r3, #0]
 8007836:	f003 0320 	and.w	r3, r3, #32
 800783a:	2b00      	cmp	r3, #0
 800783c:	d010      	beq.n	8007860 <HAL_RCC_ClockConfig+0x300>
 {
#if defined(RCC_D3CFGR_D3PPRE)
   if((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800783e:	687b      	ldr	r3, [r7, #4]
 8007840:	69da      	ldr	r2, [r3, #28]
 8007842:	4b1d      	ldr	r3, [pc, #116]	; (80078b8 <HAL_RCC_ClockConfig+0x358>)
 8007844:	6a1b      	ldr	r3, [r3, #32]
 8007846:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800784a:	429a      	cmp	r2, r3
 800784c:	d208      	bcs.n	8007860 <HAL_RCC_ClockConfig+0x300>
   {
     assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
     MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 800784e:	4b1a      	ldr	r3, [pc, #104]	; (80078b8 <HAL_RCC_ClockConfig+0x358>)
 8007850:	6a1b      	ldr	r3, [r3, #32]
 8007852:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8007856:	687b      	ldr	r3, [r7, #4]
 8007858:	69db      	ldr	r3, [r3, #28]
 800785a:	4917      	ldr	r1, [pc, #92]	; (80078b8 <HAL_RCC_ClockConfig+0x358>)
 800785c:	4313      	orrs	r3, r2
 800785e:	620b      	str	r3, [r1, #32]
#endif
 }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8007860:	f000 f834 	bl	80078cc <HAL_RCC_GetSysClockFreq>
 8007864:	4602      	mov	r2, r0
 8007866:	4b14      	ldr	r3, [pc, #80]	; (80078b8 <HAL_RCC_ClockConfig+0x358>)
 8007868:	699b      	ldr	r3, [r3, #24]
 800786a:	0a1b      	lsrs	r3, r3, #8
 800786c:	f003 030f 	and.w	r3, r3, #15
 8007870:	4912      	ldr	r1, [pc, #72]	; (80078bc <HAL_RCC_ClockConfig+0x35c>)
 8007872:	5ccb      	ldrb	r3, [r1, r3]
 8007874:	f003 031f 	and.w	r3, r3, #31
 8007878:	fa22 f303 	lsr.w	r3, r2, r3
 800787c:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800787e:	4b0e      	ldr	r3, [pc, #56]	; (80078b8 <HAL_RCC_ClockConfig+0x358>)
 8007880:	699b      	ldr	r3, [r3, #24]
 8007882:	f003 030f 	and.w	r3, r3, #15
 8007886:	4a0d      	ldr	r2, [pc, #52]	; (80078bc <HAL_RCC_ClockConfig+0x35c>)
 8007888:	5cd3      	ldrb	r3, [r2, r3]
 800788a:	f003 031f 	and.w	r3, r3, #31
 800788e:	693a      	ldr	r2, [r7, #16]
 8007890:	fa22 f303 	lsr.w	r3, r2, r3
 8007894:	4a0a      	ldr	r2, [pc, #40]	; (80078c0 <HAL_RCC_ClockConfig+0x360>)
 8007896:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8007898:	4a0a      	ldr	r2, [pc, #40]	; (80078c4 <HAL_RCC_ClockConfig+0x364>)
 800789a:	693b      	ldr	r3, [r7, #16]
 800789c:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick (uwTickPrio);
 800789e:	4b0a      	ldr	r3, [pc, #40]	; (80078c8 <HAL_RCC_ClockConfig+0x368>)
 80078a0:	681b      	ldr	r3, [r3, #0]
 80078a2:	4618      	mov	r0, r3
 80078a4:	f7fa fd3a 	bl	800231c <HAL_InitTick>
 80078a8:	4603      	mov	r3, r0
 80078aa:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 80078ac:	7bfb      	ldrb	r3, [r7, #15]
}
 80078ae:	4618      	mov	r0, r3
 80078b0:	3718      	adds	r7, #24
 80078b2:	46bd      	mov	sp, r7
 80078b4:	bd80      	pop	{r7, pc}
 80078b6:	bf00      	nop
 80078b8:	58024400 	.word	0x58024400
 80078bc:	08016790 	.word	0x08016790
 80078c0:	24000004 	.word	0x24000004
 80078c4:	24000000 	.word	0x24000000
 80078c8:	24000008 	.word	0x24000008

080078cc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80078cc:	b480      	push	{r7}
 80078ce:	b089      	sub	sp, #36	; 0x24
 80078d0:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 80078d2:	4bb3      	ldr	r3, [pc, #716]	; (8007ba0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80078d4:	691b      	ldr	r3, [r3, #16]
 80078d6:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80078da:	2b18      	cmp	r3, #24
 80078dc:	f200 8155 	bhi.w	8007b8a <HAL_RCC_GetSysClockFreq+0x2be>
 80078e0:	a201      	add	r2, pc, #4	; (adr r2, 80078e8 <HAL_RCC_GetSysClockFreq+0x1c>)
 80078e2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80078e6:	bf00      	nop
 80078e8:	0800794d 	.word	0x0800794d
 80078ec:	08007b8b 	.word	0x08007b8b
 80078f0:	08007b8b 	.word	0x08007b8b
 80078f4:	08007b8b 	.word	0x08007b8b
 80078f8:	08007b8b 	.word	0x08007b8b
 80078fc:	08007b8b 	.word	0x08007b8b
 8007900:	08007b8b 	.word	0x08007b8b
 8007904:	08007b8b 	.word	0x08007b8b
 8007908:	08007973 	.word	0x08007973
 800790c:	08007b8b 	.word	0x08007b8b
 8007910:	08007b8b 	.word	0x08007b8b
 8007914:	08007b8b 	.word	0x08007b8b
 8007918:	08007b8b 	.word	0x08007b8b
 800791c:	08007b8b 	.word	0x08007b8b
 8007920:	08007b8b 	.word	0x08007b8b
 8007924:	08007b8b 	.word	0x08007b8b
 8007928:	08007979 	.word	0x08007979
 800792c:	08007b8b 	.word	0x08007b8b
 8007930:	08007b8b 	.word	0x08007b8b
 8007934:	08007b8b 	.word	0x08007b8b
 8007938:	08007b8b 	.word	0x08007b8b
 800793c:	08007b8b 	.word	0x08007b8b
 8007940:	08007b8b 	.word	0x08007b8b
 8007944:	08007b8b 	.word	0x08007b8b
 8007948:	0800797f 	.word	0x0800797f
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800794c:	4b94      	ldr	r3, [pc, #592]	; (8007ba0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800794e:	681b      	ldr	r3, [r3, #0]
 8007950:	f003 0320 	and.w	r3, r3, #32
 8007954:	2b00      	cmp	r3, #0
 8007956:	d009      	beq.n	800796c <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8007958:	4b91      	ldr	r3, [pc, #580]	; (8007ba0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800795a:	681b      	ldr	r3, [r3, #0]
 800795c:	08db      	lsrs	r3, r3, #3
 800795e:	f003 0303 	and.w	r3, r3, #3
 8007962:	4a90      	ldr	r2, [pc, #576]	; (8007ba4 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8007964:	fa22 f303 	lsr.w	r3, r2, r3
 8007968:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

    break;
 800796a:	e111      	b.n	8007b90 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 800796c:	4b8d      	ldr	r3, [pc, #564]	; (8007ba4 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800796e:	61bb      	str	r3, [r7, #24]
    break;
 8007970:	e10e      	b.n	8007b90 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 8007972:	4b8d      	ldr	r3, [pc, #564]	; (8007ba8 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8007974:	61bb      	str	r3, [r7, #24]
    break;
 8007976:	e10b      	b.n	8007b90 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
 8007978:	4b8c      	ldr	r3, [pc, #560]	; (8007bac <HAL_RCC_GetSysClockFreq+0x2e0>)
 800797a:	61bb      	str	r3, [r7, #24]
    break;
 800797c:	e108      	b.n	8007b90 <HAL_RCC_GetSysClockFreq+0x2c4>
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800797e:	4b88      	ldr	r3, [pc, #544]	; (8007ba0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007980:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007982:	f003 0303 	and.w	r3, r3, #3
 8007986:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 8007988:	4b85      	ldr	r3, [pc, #532]	; (8007ba0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800798a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800798c:	091b      	lsrs	r3, r3, #4
 800798e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8007992:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 8007994:	4b82      	ldr	r3, [pc, #520]	; (8007ba0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007996:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007998:	f003 0301 	and.w	r3, r3, #1
 800799c:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 800799e:	4b80      	ldr	r3, [pc, #512]	; (8007ba0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80079a0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80079a2:	08db      	lsrs	r3, r3, #3
 80079a4:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80079a8:	68fa      	ldr	r2, [r7, #12]
 80079aa:	fb02 f303 	mul.w	r3, r2, r3
 80079ae:	ee07 3a90 	vmov	s15, r3
 80079b2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80079b6:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 80079ba:	693b      	ldr	r3, [r7, #16]
 80079bc:	2b00      	cmp	r3, #0
 80079be:	f000 80e1 	beq.w	8007b84 <HAL_RCC_GetSysClockFreq+0x2b8>
 80079c2:	697b      	ldr	r3, [r7, #20]
 80079c4:	2b02      	cmp	r3, #2
 80079c6:	f000 8083 	beq.w	8007ad0 <HAL_RCC_GetSysClockFreq+0x204>
 80079ca:	697b      	ldr	r3, [r7, #20]
 80079cc:	2b02      	cmp	r3, #2
 80079ce:	f200 80a1 	bhi.w	8007b14 <HAL_RCC_GetSysClockFreq+0x248>
 80079d2:	697b      	ldr	r3, [r7, #20]
 80079d4:	2b00      	cmp	r3, #0
 80079d6:	d003      	beq.n	80079e0 <HAL_RCC_GetSysClockFreq+0x114>
 80079d8:	697b      	ldr	r3, [r7, #20]
 80079da:	2b01      	cmp	r3, #1
 80079dc:	d056      	beq.n	8007a8c <HAL_RCC_GetSysClockFreq+0x1c0>
 80079de:	e099      	b.n	8007b14 <HAL_RCC_GetSysClockFreq+0x248>
    {
      switch (pllsource)
      {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80079e0:	4b6f      	ldr	r3, [pc, #444]	; (8007ba0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80079e2:	681b      	ldr	r3, [r3, #0]
 80079e4:	f003 0320 	and.w	r3, r3, #32
 80079e8:	2b00      	cmp	r3, #0
 80079ea:	d02d      	beq.n	8007a48 <HAL_RCC_GetSysClockFreq+0x17c>
        {
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80079ec:	4b6c      	ldr	r3, [pc, #432]	; (8007ba0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80079ee:	681b      	ldr	r3, [r3, #0]
 80079f0:	08db      	lsrs	r3, r3, #3
 80079f2:	f003 0303 	and.w	r3, r3, #3
 80079f6:	4a6b      	ldr	r2, [pc, #428]	; (8007ba4 <HAL_RCC_GetSysClockFreq+0x2d8>)
 80079f8:	fa22 f303 	lsr.w	r3, r2, r3
 80079fc:	607b      	str	r3, [r7, #4]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80079fe:	687b      	ldr	r3, [r7, #4]
 8007a00:	ee07 3a90 	vmov	s15, r3
 8007a04:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007a08:	693b      	ldr	r3, [r7, #16]
 8007a0a:	ee07 3a90 	vmov	s15, r3
 8007a0e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007a12:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007a16:	4b62      	ldr	r3, [pc, #392]	; (8007ba0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007a18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007a1a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007a1e:	ee07 3a90 	vmov	s15, r3
 8007a22:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007a26:	ed97 6a02 	vldr	s12, [r7, #8]
 8007a2a:	eddf 5a61 	vldr	s11, [pc, #388]	; 8007bb0 <HAL_RCC_GetSysClockFreq+0x2e4>
 8007a2e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007a32:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007a36:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007a3a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007a3e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007a42:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        }
        break;
 8007a46:	e087      	b.n	8007b58 <HAL_RCC_GetSysClockFreq+0x28c>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8007a48:	693b      	ldr	r3, [r7, #16]
 8007a4a:	ee07 3a90 	vmov	s15, r3
 8007a4e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007a52:	eddf 6a58 	vldr	s13, [pc, #352]	; 8007bb4 <HAL_RCC_GetSysClockFreq+0x2e8>
 8007a56:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007a5a:	4b51      	ldr	r3, [pc, #324]	; (8007ba0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007a5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007a5e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007a62:	ee07 3a90 	vmov	s15, r3
 8007a66:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007a6a:	ed97 6a02 	vldr	s12, [r7, #8]
 8007a6e:	eddf 5a50 	vldr	s11, [pc, #320]	; 8007bb0 <HAL_RCC_GetSysClockFreq+0x2e4>
 8007a72:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007a76:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007a7a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007a7e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007a82:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007a86:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8007a8a:	e065      	b.n	8007b58 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8007a8c:	693b      	ldr	r3, [r7, #16]
 8007a8e:	ee07 3a90 	vmov	s15, r3
 8007a92:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007a96:	eddf 6a48 	vldr	s13, [pc, #288]	; 8007bb8 <HAL_RCC_GetSysClockFreq+0x2ec>
 8007a9a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007a9e:	4b40      	ldr	r3, [pc, #256]	; (8007ba0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007aa0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007aa2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007aa6:	ee07 3a90 	vmov	s15, r3
 8007aaa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007aae:	ed97 6a02 	vldr	s12, [r7, #8]
 8007ab2:	eddf 5a3f 	vldr	s11, [pc, #252]	; 8007bb0 <HAL_RCC_GetSysClockFreq+0x2e4>
 8007ab6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007aba:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007abe:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007ac2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007ac6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007aca:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8007ace:	e043      	b.n	8007b58 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8007ad0:	693b      	ldr	r3, [r7, #16]
 8007ad2:	ee07 3a90 	vmov	s15, r3
 8007ad6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007ada:	eddf 6a38 	vldr	s13, [pc, #224]	; 8007bbc <HAL_RCC_GetSysClockFreq+0x2f0>
 8007ade:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007ae2:	4b2f      	ldr	r3, [pc, #188]	; (8007ba0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007ae4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007ae6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007aea:	ee07 3a90 	vmov	s15, r3
 8007aee:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007af2:	ed97 6a02 	vldr	s12, [r7, #8]
 8007af6:	eddf 5a2e 	vldr	s11, [pc, #184]	; 8007bb0 <HAL_RCC_GetSysClockFreq+0x2e4>
 8007afa:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007afe:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007b02:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007b06:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007b0a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007b0e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8007b12:	e021      	b.n	8007b58 <HAL_RCC_GetSysClockFreq+0x28c>

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8007b14:	693b      	ldr	r3, [r7, #16]
 8007b16:	ee07 3a90 	vmov	s15, r3
 8007b1a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007b1e:	eddf 6a26 	vldr	s13, [pc, #152]	; 8007bb8 <HAL_RCC_GetSysClockFreq+0x2ec>
 8007b22:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007b26:	4b1e      	ldr	r3, [pc, #120]	; (8007ba0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007b28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007b2a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007b2e:	ee07 3a90 	vmov	s15, r3
 8007b32:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007b36:	ed97 6a02 	vldr	s12, [r7, #8]
 8007b3a:	eddf 5a1d 	vldr	s11, [pc, #116]	; 8007bb0 <HAL_RCC_GetSysClockFreq+0x2e4>
 8007b3e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007b42:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007b46:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007b4a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007b4e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007b52:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8007b56:	bf00      	nop
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 8007b58:	4b11      	ldr	r3, [pc, #68]	; (8007ba0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007b5a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007b5c:	0a5b      	lsrs	r3, r3, #9
 8007b5e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007b62:	3301      	adds	r3, #1
 8007b64:	603b      	str	r3, [r7, #0]
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 8007b66:	683b      	ldr	r3, [r7, #0]
 8007b68:	ee07 3a90 	vmov	s15, r3
 8007b6c:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8007b70:	edd7 6a07 	vldr	s13, [r7, #28]
 8007b74:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007b78:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007b7c:	ee17 3a90 	vmov	r3, s15
 8007b80:	61bb      	str	r3, [r7, #24]
    }
    else
    {
      sysclockfreq = 0U;
    }
    break;
 8007b82:	e005      	b.n	8007b90 <HAL_RCC_GetSysClockFreq+0x2c4>
      sysclockfreq = 0U;
 8007b84:	2300      	movs	r3, #0
 8007b86:	61bb      	str	r3, [r7, #24]
    break;
 8007b88:	e002      	b.n	8007b90 <HAL_RCC_GetSysClockFreq+0x2c4>

  default:
    sysclockfreq = CSI_VALUE;
 8007b8a:	4b07      	ldr	r3, [pc, #28]	; (8007ba8 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8007b8c:	61bb      	str	r3, [r7, #24]
    break;
 8007b8e:	bf00      	nop
  }

  return sysclockfreq;
 8007b90:	69bb      	ldr	r3, [r7, #24]
}
 8007b92:	4618      	mov	r0, r3
 8007b94:	3724      	adds	r7, #36	; 0x24
 8007b96:	46bd      	mov	sp, r7
 8007b98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b9c:	4770      	bx	lr
 8007b9e:	bf00      	nop
 8007ba0:	58024400 	.word	0x58024400
 8007ba4:	03d09000 	.word	0x03d09000
 8007ba8:	003d0900 	.word	0x003d0900
 8007bac:	017d7840 	.word	0x017d7840
 8007bb0:	46000000 	.word	0x46000000
 8007bb4:	4c742400 	.word	0x4c742400
 8007bb8:	4a742400 	.word	0x4a742400
 8007bbc:	4bbebc20 	.word	0x4bbebc20

08007bc0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8007bc0:	b580      	push	{r7, lr}
 8007bc2:	b082      	sub	sp, #8
 8007bc4:	af00      	add	r7, sp, #0
uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8007bc6:	f7ff fe81 	bl	80078cc <HAL_RCC_GetSysClockFreq>
 8007bca:	4602      	mov	r2, r0
 8007bcc:	4b10      	ldr	r3, [pc, #64]	; (8007c10 <HAL_RCC_GetHCLKFreq+0x50>)
 8007bce:	699b      	ldr	r3, [r3, #24]
 8007bd0:	0a1b      	lsrs	r3, r3, #8
 8007bd2:	f003 030f 	and.w	r3, r3, #15
 8007bd6:	490f      	ldr	r1, [pc, #60]	; (8007c14 <HAL_RCC_GetHCLKFreq+0x54>)
 8007bd8:	5ccb      	ldrb	r3, [r1, r3]
 8007bda:	f003 031f 	and.w	r3, r3, #31
 8007bde:	fa22 f303 	lsr.w	r3, r2, r3
 8007be2:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8007be4:	4b0a      	ldr	r3, [pc, #40]	; (8007c10 <HAL_RCC_GetHCLKFreq+0x50>)
 8007be6:	699b      	ldr	r3, [r3, #24]
 8007be8:	f003 030f 	and.w	r3, r3, #15
 8007bec:	4a09      	ldr	r2, [pc, #36]	; (8007c14 <HAL_RCC_GetHCLKFreq+0x54>)
 8007bee:	5cd3      	ldrb	r3, [r2, r3]
 8007bf0:	f003 031f 	and.w	r3, r3, #31
 8007bf4:	687a      	ldr	r2, [r7, #4]
 8007bf6:	fa22 f303 	lsr.w	r3, r2, r3
 8007bfa:	4a07      	ldr	r2, [pc, #28]	; (8007c18 <HAL_RCC_GetHCLKFreq+0x58>)
 8007bfc:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8007bfe:	4a07      	ldr	r2, [pc, #28]	; (8007c1c <HAL_RCC_GetHCLKFreq+0x5c>)
 8007c00:	687b      	ldr	r3, [r7, #4]
 8007c02:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8007c04:	4b04      	ldr	r3, [pc, #16]	; (8007c18 <HAL_RCC_GetHCLKFreq+0x58>)
 8007c06:	681b      	ldr	r3, [r3, #0]
}
 8007c08:	4618      	mov	r0, r3
 8007c0a:	3708      	adds	r7, #8
 8007c0c:	46bd      	mov	sp, r7
 8007c0e:	bd80      	pop	{r7, pc}
 8007c10:	58024400 	.word	0x58024400
 8007c14:	08016790 	.word	0x08016790
 8007c18:	24000004 	.word	0x24000004
 8007c1c:	24000000 	.word	0x24000000

08007c20 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8007c20:	b580      	push	{r7, lr}
 8007c22:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1)>> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8007c24:	f7ff ffcc 	bl	8007bc0 <HAL_RCC_GetHCLKFreq>
 8007c28:	4602      	mov	r2, r0
 8007c2a:	4b06      	ldr	r3, [pc, #24]	; (8007c44 <HAL_RCC_GetPCLK1Freq+0x24>)
 8007c2c:	69db      	ldr	r3, [r3, #28]
 8007c2e:	091b      	lsrs	r3, r3, #4
 8007c30:	f003 0307 	and.w	r3, r3, #7
 8007c34:	4904      	ldr	r1, [pc, #16]	; (8007c48 <HAL_RCC_GetPCLK1Freq+0x28>)
 8007c36:	5ccb      	ldrb	r3, [r1, r3]
 8007c38:	f003 031f 	and.w	r3, r3, #31
 8007c3c:	fa22 f303 	lsr.w	r3, r2, r3
#else
 /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1)>> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8007c40:	4618      	mov	r0, r3
 8007c42:	bd80      	pop	{r7, pc}
 8007c44:	58024400 	.word	0x58024400
 8007c48:	08016790 	.word	0x08016790

08007c4c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8007c4c:	b580      	push	{r7, lr}
 8007c4e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2)>> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8007c50:	f7ff ffb6 	bl	8007bc0 <HAL_RCC_GetHCLKFreq>
 8007c54:	4602      	mov	r2, r0
 8007c56:	4b06      	ldr	r3, [pc, #24]	; (8007c70 <HAL_RCC_GetPCLK2Freq+0x24>)
 8007c58:	69db      	ldr	r3, [r3, #28]
 8007c5a:	0a1b      	lsrs	r3, r3, #8
 8007c5c:	f003 0307 	and.w	r3, r3, #7
 8007c60:	4904      	ldr	r1, [pc, #16]	; (8007c74 <HAL_RCC_GetPCLK2Freq+0x28>)
 8007c62:	5ccb      	ldrb	r3, [r1, r3]
 8007c64:	f003 031f 	and.w	r3, r3, #31
 8007c68:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2)>> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 8007c6c:	4618      	mov	r0, r3
 8007c6e:	bd80      	pop	{r7, pc}
 8007c70:	58024400 	.word	0x58024400
 8007c74:	08016790 	.word	0x08016790

08007c78 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8007c78:	b580      	push	{r7, lr}
 8007c7a:	b086      	sub	sp, #24
 8007c7c:	af00      	add	r7, sp, #0
 8007c7e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8007c80:	2300      	movs	r3, #0
 8007c82:	75fb      	strb	r3, [r7, #23]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8007c84:	2300      	movs	r3, #0
 8007c86:	75bb      	strb	r3, [r7, #22]

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8007c88:	687b      	ldr	r3, [r7, #4]
 8007c8a:	681b      	ldr	r3, [r3, #0]
 8007c8c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007c90:	2b00      	cmp	r3, #0
 8007c92:	d03f      	beq.n	8007d14 <HAL_RCCEx_PeriphCLKConfig+0x9c>
  {

    switch(PeriphClkInit->SpdifrxClockSelection)
 8007c94:	687b      	ldr	r3, [r7, #4]
 8007c96:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007c98:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8007c9c:	d02a      	beq.n	8007cf4 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8007c9e:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8007ca2:	d824      	bhi.n	8007cee <HAL_RCCEx_PeriphCLKConfig+0x76>
 8007ca4:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8007ca8:	d018      	beq.n	8007cdc <HAL_RCCEx_PeriphCLKConfig+0x64>
 8007caa:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8007cae:	d81e      	bhi.n	8007cee <HAL_RCCEx_PeriphCLKConfig+0x76>
 8007cb0:	2b00      	cmp	r3, #0
 8007cb2:	d003      	beq.n	8007cbc <HAL_RCCEx_PeriphCLKConfig+0x44>
 8007cb4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007cb8:	d007      	beq.n	8007cca <HAL_RCCEx_PeriphCLKConfig+0x52>
 8007cba:	e018      	b.n	8007cee <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
      /* Enable PLL1Q Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007cbc:	4ba3      	ldr	r3, [pc, #652]	; (8007f4c <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8007cbe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007cc0:	4aa2      	ldr	r2, [pc, #648]	; (8007f4c <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8007cc2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007cc6:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8007cc8:	e015      	b.n	8007cf6 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8007cca:	687b      	ldr	r3, [r7, #4]
 8007ccc:	3304      	adds	r3, #4
 8007cce:	2102      	movs	r1, #2
 8007cd0:	4618      	mov	r0, r3
 8007cd2:	f001 fff9 	bl	8009cc8 <RCCEx_PLL2_Config>
 8007cd6:	4603      	mov	r3, r0
 8007cd8:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8007cda:	e00c      	b.n	8007cf6 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8007cdc:	687b      	ldr	r3, [r7, #4]
 8007cde:	3324      	adds	r3, #36	; 0x24
 8007ce0:	2102      	movs	r1, #2
 8007ce2:	4618      	mov	r0, r3
 8007ce4:	f002 f8a2 	bl	8009e2c <RCCEx_PLL3_Config>
 8007ce8:	4603      	mov	r3, r0
 8007cea:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8007cec:	e003      	b.n	8007cf6 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      /* Internal OSC clock is used as source of SPDIFRX clock*/
      /* SPDIFRX clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8007cee:	2301      	movs	r3, #1
 8007cf0:	75fb      	strb	r3, [r7, #23]
      break;
 8007cf2:	e000      	b.n	8007cf6 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8007cf4:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007cf6:	7dfb      	ldrb	r3, [r7, #23]
 8007cf8:	2b00      	cmp	r3, #0
 8007cfa:	d109      	bne.n	8007d10 <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8007cfc:	4b93      	ldr	r3, [pc, #588]	; (8007f4c <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8007cfe:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007d00:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8007d04:	687b      	ldr	r3, [r7, #4]
 8007d06:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007d08:	4990      	ldr	r1, [pc, #576]	; (8007f4c <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8007d0a:	4313      	orrs	r3, r2
 8007d0c:	650b      	str	r3, [r1, #80]	; 0x50
 8007d0e:	e001      	b.n	8007d14 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007d10:	7dfb      	ldrb	r3, [r7, #23]
 8007d12:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8007d14:	687b      	ldr	r3, [r7, #4]
 8007d16:	681b      	ldr	r3, [r3, #0]
 8007d18:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007d1c:	2b00      	cmp	r3, #0
 8007d1e:	d03d      	beq.n	8007d9c <HAL_RCCEx_PeriphCLKConfig+0x124>
  {
    switch(PeriphClkInit->Sai1ClockSelection)
 8007d20:	687b      	ldr	r3, [r7, #4]
 8007d22:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007d24:	2b04      	cmp	r3, #4
 8007d26:	d826      	bhi.n	8007d76 <HAL_RCCEx_PeriphCLKConfig+0xfe>
 8007d28:	a201      	add	r2, pc, #4	; (adr r2, 8007d30 <HAL_RCCEx_PeriphCLKConfig+0xb8>)
 8007d2a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007d2e:	bf00      	nop
 8007d30:	08007d45 	.word	0x08007d45
 8007d34:	08007d53 	.word	0x08007d53
 8007d38:	08007d65 	.word	0x08007d65
 8007d3c:	08007d7d 	.word	0x08007d7d
 8007d40:	08007d7d 	.word	0x08007d7d
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007d44:	4b81      	ldr	r3, [pc, #516]	; (8007f4c <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8007d46:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007d48:	4a80      	ldr	r2, [pc, #512]	; (8007f4c <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8007d4a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007d4e:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8007d50:	e015      	b.n	8007d7e <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8007d52:	687b      	ldr	r3, [r7, #4]
 8007d54:	3304      	adds	r3, #4
 8007d56:	2100      	movs	r1, #0
 8007d58:	4618      	mov	r0, r3
 8007d5a:	f001 ffb5 	bl	8009cc8 <RCCEx_PLL2_Config>
 8007d5e:	4603      	mov	r3, r0
 8007d60:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8007d62:	e00c      	b.n	8007d7e <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8007d64:	687b      	ldr	r3, [r7, #4]
 8007d66:	3324      	adds	r3, #36	; 0x24
 8007d68:	2100      	movs	r1, #0
 8007d6a:	4618      	mov	r0, r3
 8007d6c:	f002 f85e 	bl	8009e2c <RCCEx_PLL3_Config>
 8007d70:	4603      	mov	r3, r0
 8007d72:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8007d74:	e003      	b.n	8007d7e <HAL_RCCEx_PeriphCLKConfig+0x106>
      /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8007d76:	2301      	movs	r3, #1
 8007d78:	75fb      	strb	r3, [r7, #23]
      break;
 8007d7a:	e000      	b.n	8007d7e <HAL_RCCEx_PeriphCLKConfig+0x106>
      break;
 8007d7c:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007d7e:	7dfb      	ldrb	r3, [r7, #23]
 8007d80:	2b00      	cmp	r3, #0
 8007d82:	d109      	bne.n	8007d98 <HAL_RCCEx_PeriphCLKConfig+0x120>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8007d84:	4b71      	ldr	r3, [pc, #452]	; (8007f4c <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8007d86:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007d88:	f023 0207 	bic.w	r2, r3, #7
 8007d8c:	687b      	ldr	r3, [r7, #4]
 8007d8e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007d90:	496e      	ldr	r1, [pc, #440]	; (8007f4c <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8007d92:	4313      	orrs	r3, r2
 8007d94:	650b      	str	r3, [r1, #80]	; 0x50
 8007d96:	e001      	b.n	8007d9c <HAL_RCCEx_PeriphCLKConfig+0x124>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007d98:	7dfb      	ldrb	r3, [r7, #23]
 8007d9a:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 8007d9c:	687b      	ldr	r3, [r7, #4]
 8007d9e:	681b      	ldr	r3, [r3, #0]
 8007da0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8007da4:	2b00      	cmp	r3, #0
 8007da6:	d042      	beq.n	8007e2e <HAL_RCCEx_PeriphCLKConfig+0x1b6>
  {
    switch(PeriphClkInit->Sai23ClockSelection)
 8007da8:	687b      	ldr	r3, [r7, #4]
 8007daa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007dac:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007db0:	d02b      	beq.n	8007e0a <HAL_RCCEx_PeriphCLKConfig+0x192>
 8007db2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007db6:	d825      	bhi.n	8007e04 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8007db8:	2bc0      	cmp	r3, #192	; 0xc0
 8007dba:	d028      	beq.n	8007e0e <HAL_RCCEx_PeriphCLKConfig+0x196>
 8007dbc:	2bc0      	cmp	r3, #192	; 0xc0
 8007dbe:	d821      	bhi.n	8007e04 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8007dc0:	2b80      	cmp	r3, #128	; 0x80
 8007dc2:	d016      	beq.n	8007df2 <HAL_RCCEx_PeriphCLKConfig+0x17a>
 8007dc4:	2b80      	cmp	r3, #128	; 0x80
 8007dc6:	d81d      	bhi.n	8007e04 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8007dc8:	2b00      	cmp	r3, #0
 8007dca:	d002      	beq.n	8007dd2 <HAL_RCCEx_PeriphCLKConfig+0x15a>
 8007dcc:	2b40      	cmp	r3, #64	; 0x40
 8007dce:	d007      	beq.n	8007de0 <HAL_RCCEx_PeriphCLKConfig+0x168>
 8007dd0:	e018      	b.n	8007e04 <HAL_RCCEx_PeriphCLKConfig+0x18c>
    {
    case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007dd2:	4b5e      	ldr	r3, [pc, #376]	; (8007f4c <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8007dd4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007dd6:	4a5d      	ldr	r2, [pc, #372]	; (8007f4c <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8007dd8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007ddc:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8007dde:	e017      	b.n	8007e10 <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8007de0:	687b      	ldr	r3, [r7, #4]
 8007de2:	3304      	adds	r3, #4
 8007de4:	2100      	movs	r1, #0
 8007de6:	4618      	mov	r0, r3
 8007de8:	f001 ff6e 	bl	8009cc8 <RCCEx_PLL2_Config>
 8007dec:	4603      	mov	r3, r0
 8007dee:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8007df0:	e00e      	b.n	8007e10 <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8007df2:	687b      	ldr	r3, [r7, #4]
 8007df4:	3324      	adds	r3, #36	; 0x24
 8007df6:	2100      	movs	r1, #0
 8007df8:	4618      	mov	r0, r3
 8007dfa:	f002 f817 	bl	8009e2c <RCCEx_PLL3_Config>
 8007dfe:	4603      	mov	r3, r0
 8007e00:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8007e02:	e005      	b.n	8007e10 <HAL_RCCEx_PeriphCLKConfig+0x198>
      /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
      /* SAI2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8007e04:	2301      	movs	r3, #1
 8007e06:	75fb      	strb	r3, [r7, #23]
      break;
 8007e08:	e002      	b.n	8007e10 <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 8007e0a:	bf00      	nop
 8007e0c:	e000      	b.n	8007e10 <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 8007e0e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007e10:	7dfb      	ldrb	r3, [r7, #23]
 8007e12:	2b00      	cmp	r3, #0
 8007e14:	d109      	bne.n	8007e2a <HAL_RCCEx_PeriphCLKConfig+0x1b2>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 8007e16:	4b4d      	ldr	r3, [pc, #308]	; (8007f4c <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8007e18:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007e1a:	f423 72e0 	bic.w	r2, r3, #448	; 0x1c0
 8007e1e:	687b      	ldr	r3, [r7, #4]
 8007e20:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007e22:	494a      	ldr	r1, [pc, #296]	; (8007f4c <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8007e24:	4313      	orrs	r3, r2
 8007e26:	650b      	str	r3, [r1, #80]	; 0x50
 8007e28:	e001      	b.n	8007e2e <HAL_RCCEx_PeriphCLKConfig+0x1b6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007e2a:	7dfb      	ldrb	r3, [r7, #23]
 8007e2c:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8007e2e:	687b      	ldr	r3, [r7, #4]
 8007e30:	681b      	ldr	r3, [r3, #0]
 8007e32:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007e36:	2b00      	cmp	r3, #0
 8007e38:	d049      	beq.n	8007ece <HAL_RCCEx_PeriphCLKConfig+0x256>
  {
    switch(PeriphClkInit->Sai4AClockSelection)
 8007e3a:	687b      	ldr	r3, [r7, #4]
 8007e3c:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8007e40:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8007e44:	d030      	beq.n	8007ea8 <HAL_RCCEx_PeriphCLKConfig+0x230>
 8007e46:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8007e4a:	d82a      	bhi.n	8007ea2 <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8007e4c:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8007e50:	d02c      	beq.n	8007eac <HAL_RCCEx_PeriphCLKConfig+0x234>
 8007e52:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8007e56:	d824      	bhi.n	8007ea2 <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8007e58:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8007e5c:	d018      	beq.n	8007e90 <HAL_RCCEx_PeriphCLKConfig+0x218>
 8007e5e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8007e62:	d81e      	bhi.n	8007ea2 <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8007e64:	2b00      	cmp	r3, #0
 8007e66:	d003      	beq.n	8007e70 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
 8007e68:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8007e6c:	d007      	beq.n	8007e7e <HAL_RCCEx_PeriphCLKConfig+0x206>
 8007e6e:	e018      	b.n	8007ea2 <HAL_RCCEx_PeriphCLKConfig+0x22a>
    {
    case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007e70:	4b36      	ldr	r3, [pc, #216]	; (8007f4c <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8007e72:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007e74:	4a35      	ldr	r2, [pc, #212]	; (8007f4c <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8007e76:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007e7a:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8007e7c:	e017      	b.n	8007eae <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8007e7e:	687b      	ldr	r3, [r7, #4]
 8007e80:	3304      	adds	r3, #4
 8007e82:	2100      	movs	r1, #0
 8007e84:	4618      	mov	r0, r3
 8007e86:	f001 ff1f 	bl	8009cc8 <RCCEx_PLL2_Config>
 8007e8a:	4603      	mov	r3, r0
 8007e8c:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 8007e8e:	e00e      	b.n	8007eae <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8007e90:	687b      	ldr	r3, [r7, #4]
 8007e92:	3324      	adds	r3, #36	; 0x24
 8007e94:	2100      	movs	r1, #0
 8007e96:	4618      	mov	r0, r3
 8007e98:	f001 ffc8 	bl	8009e2c <RCCEx_PLL3_Config>
 8007e9c:	4603      	mov	r3, r0
 8007e9e:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8007ea0:	e005      	b.n	8007eae <HAL_RCCEx_PeriphCLKConfig+0x236>
      /* SAI4A clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 8007ea2:	2301      	movs	r3, #1
 8007ea4:	75fb      	strb	r3, [r7, #23]
      break;
 8007ea6:	e002      	b.n	8007eae <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 8007ea8:	bf00      	nop
 8007eaa:	e000      	b.n	8007eae <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 8007eac:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007eae:	7dfb      	ldrb	r3, [r7, #23]
 8007eb0:	2b00      	cmp	r3, #0
 8007eb2:	d10a      	bne.n	8007eca <HAL_RCCEx_PeriphCLKConfig+0x252>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8007eb4:	4b25      	ldr	r3, [pc, #148]	; (8007f4c <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8007eb6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007eb8:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 8007ebc:	687b      	ldr	r3, [r7, #4]
 8007ebe:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8007ec2:	4922      	ldr	r1, [pc, #136]	; (8007f4c <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8007ec4:	4313      	orrs	r3, r2
 8007ec6:	658b      	str	r3, [r1, #88]	; 0x58
 8007ec8:	e001      	b.n	8007ece <HAL_RCCEx_PeriphCLKConfig+0x256>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007eca:	7dfb      	ldrb	r3, [r7, #23]
 8007ecc:	75bb      	strb	r3, [r7, #22]
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8007ece:	687b      	ldr	r3, [r7, #4]
 8007ed0:	681b      	ldr	r3, [r3, #0]
 8007ed2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007ed6:	2b00      	cmp	r3, #0
 8007ed8:	d04b      	beq.n	8007f72 <HAL_RCCEx_PeriphCLKConfig+0x2fa>
  {
    switch(PeriphClkInit->Sai4BClockSelection)
 8007eda:	687b      	ldr	r3, [r7, #4]
 8007edc:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8007ee0:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8007ee4:	d030      	beq.n	8007f48 <HAL_RCCEx_PeriphCLKConfig+0x2d0>
 8007ee6:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8007eea:	d82a      	bhi.n	8007f42 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8007eec:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8007ef0:	d02e      	beq.n	8007f50 <HAL_RCCEx_PeriphCLKConfig+0x2d8>
 8007ef2:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8007ef6:	d824      	bhi.n	8007f42 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8007ef8:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8007efc:	d018      	beq.n	8007f30 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
 8007efe:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8007f02:	d81e      	bhi.n	8007f42 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8007f04:	2b00      	cmp	r3, #0
 8007f06:	d003      	beq.n	8007f10 <HAL_RCCEx_PeriphCLKConfig+0x298>
 8007f08:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8007f0c:	d007      	beq.n	8007f1e <HAL_RCCEx_PeriphCLKConfig+0x2a6>
 8007f0e:	e018      	b.n	8007f42 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
    {
    case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007f10:	4b0e      	ldr	r3, [pc, #56]	; (8007f4c <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8007f12:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007f14:	4a0d      	ldr	r2, [pc, #52]	; (8007f4c <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8007f16:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007f1a:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8007f1c:	e019      	b.n	8007f52 <HAL_RCCEx_PeriphCLKConfig+0x2da>

    case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8007f1e:	687b      	ldr	r3, [r7, #4]
 8007f20:	3304      	adds	r3, #4
 8007f22:	2100      	movs	r1, #0
 8007f24:	4618      	mov	r0, r3
 8007f26:	f001 fecf 	bl	8009cc8 <RCCEx_PLL2_Config>
 8007f2a:	4603      	mov	r3, r0
 8007f2c:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 8007f2e:	e010      	b.n	8007f52 <HAL_RCCEx_PeriphCLKConfig+0x2da>

    case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8007f30:	687b      	ldr	r3, [r7, #4]
 8007f32:	3324      	adds	r3, #36	; 0x24
 8007f34:	2100      	movs	r1, #0
 8007f36:	4618      	mov	r0, r3
 8007f38:	f001 ff78 	bl	8009e2c <RCCEx_PLL3_Config>
 8007f3c:	4603      	mov	r3, r0
 8007f3e:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8007f40:	e007      	b.n	8007f52 <HAL_RCCEx_PeriphCLKConfig+0x2da>
      /* SAI4B clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 8007f42:	2301      	movs	r3, #1
 8007f44:	75fb      	strb	r3, [r7, #23]
      break;
 8007f46:	e004      	b.n	8007f52 <HAL_RCCEx_PeriphCLKConfig+0x2da>
      break;
 8007f48:	bf00      	nop
 8007f4a:	e002      	b.n	8007f52 <HAL_RCCEx_PeriphCLKConfig+0x2da>
 8007f4c:	58024400 	.word	0x58024400
      break;
 8007f50:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007f52:	7dfb      	ldrb	r3, [r7, #23]
 8007f54:	2b00      	cmp	r3, #0
 8007f56:	d10a      	bne.n	8007f6e <HAL_RCCEx_PeriphCLKConfig+0x2f6>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8007f58:	4b99      	ldr	r3, [pc, #612]	; (80081c0 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8007f5a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007f5c:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 8007f60:	687b      	ldr	r3, [r7, #4]
 8007f62:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8007f66:	4996      	ldr	r1, [pc, #600]	; (80081c0 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8007f68:	4313      	orrs	r3, r2
 8007f6a:	658b      	str	r3, [r1, #88]	; 0x58
 8007f6c:	e001      	b.n	8007f72 <HAL_RCCEx_PeriphCLKConfig+0x2fa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007f6e:	7dfb      	ldrb	r3, [r7, #23]
 8007f70:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8007f72:	687b      	ldr	r3, [r7, #4]
 8007f74:	681b      	ldr	r3, [r3, #0]
 8007f76:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007f7a:	2b00      	cmp	r3, #0
 8007f7c:	d032      	beq.n	8007fe4 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    switch(PeriphClkInit->QspiClockSelection)
 8007f7e:	687b      	ldr	r3, [r7, #4]
 8007f80:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007f82:	2b30      	cmp	r3, #48	; 0x30
 8007f84:	d01c      	beq.n	8007fc0 <HAL_RCCEx_PeriphCLKConfig+0x348>
 8007f86:	2b30      	cmp	r3, #48	; 0x30
 8007f88:	d817      	bhi.n	8007fba <HAL_RCCEx_PeriphCLKConfig+0x342>
 8007f8a:	2b20      	cmp	r3, #32
 8007f8c:	d00c      	beq.n	8007fa8 <HAL_RCCEx_PeriphCLKConfig+0x330>
 8007f8e:	2b20      	cmp	r3, #32
 8007f90:	d813      	bhi.n	8007fba <HAL_RCCEx_PeriphCLKConfig+0x342>
 8007f92:	2b00      	cmp	r3, #0
 8007f94:	d016      	beq.n	8007fc4 <HAL_RCCEx_PeriphCLKConfig+0x34c>
 8007f96:	2b10      	cmp	r3, #16
 8007f98:	d10f      	bne.n	8007fba <HAL_RCCEx_PeriphCLKConfig+0x342>
    {
    case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
      /* Enable QSPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007f9a:	4b89      	ldr	r3, [pc, #548]	; (80081c0 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8007f9c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007f9e:	4a88      	ldr	r2, [pc, #544]	; (80081c0 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8007fa0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007fa4:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* QSPI clock source configuration done later after clock selection check */
      break;
 8007fa6:	e00e      	b.n	8007fc6 <HAL_RCCEx_PeriphCLKConfig+0x34e>

    case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8007fa8:	687b      	ldr	r3, [r7, #4]
 8007faa:	3304      	adds	r3, #4
 8007fac:	2102      	movs	r1, #2
 8007fae:	4618      	mov	r0, r3
 8007fb0:	f001 fe8a 	bl	8009cc8 <RCCEx_PLL2_Config>
 8007fb4:	4603      	mov	r3, r0
 8007fb6:	75fb      	strb	r3, [r7, #23]

      /* QSPI clock source configuration done later after clock selection check */
      break;
 8007fb8:	e005      	b.n	8007fc6 <HAL_RCCEx_PeriphCLKConfig+0x34e>
    case RCC_QSPICLKSOURCE_D1HCLK:
      /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8007fba:	2301      	movs	r3, #1
 8007fbc:	75fb      	strb	r3, [r7, #23]
      break;
 8007fbe:	e002      	b.n	8007fc6 <HAL_RCCEx_PeriphCLKConfig+0x34e>
      break;
 8007fc0:	bf00      	nop
 8007fc2:	e000      	b.n	8007fc6 <HAL_RCCEx_PeriphCLKConfig+0x34e>
      break;
 8007fc4:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007fc6:	7dfb      	ldrb	r3, [r7, #23]
 8007fc8:	2b00      	cmp	r3, #0
 8007fca:	d109      	bne.n	8007fe0 <HAL_RCCEx_PeriphCLKConfig+0x368>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8007fcc:	4b7c      	ldr	r3, [pc, #496]	; (80081c0 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8007fce:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007fd0:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8007fd4:	687b      	ldr	r3, [r7, #4]
 8007fd6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007fd8:	4979      	ldr	r1, [pc, #484]	; (80081c0 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8007fda:	4313      	orrs	r3, r2
 8007fdc:	64cb      	str	r3, [r1, #76]	; 0x4c
 8007fde:	e001      	b.n	8007fe4 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007fe0:	7dfb      	ldrb	r3, [r7, #23]
 8007fe2:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8007fe4:	687b      	ldr	r3, [r7, #4]
 8007fe6:	681b      	ldr	r3, [r3, #0]
 8007fe8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8007fec:	2b00      	cmp	r3, #0
 8007fee:	d047      	beq.n	8008080 <HAL_RCCEx_PeriphCLKConfig+0x408>
  {
    switch(PeriphClkInit->Spi123ClockSelection)
 8007ff0:	687b      	ldr	r3, [r7, #4]
 8007ff2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007ff4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8007ff8:	d030      	beq.n	800805c <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 8007ffa:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8007ffe:	d82a      	bhi.n	8008056 <HAL_RCCEx_PeriphCLKConfig+0x3de>
 8008000:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8008004:	d02c      	beq.n	8008060 <HAL_RCCEx_PeriphCLKConfig+0x3e8>
 8008006:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800800a:	d824      	bhi.n	8008056 <HAL_RCCEx_PeriphCLKConfig+0x3de>
 800800c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008010:	d018      	beq.n	8008044 <HAL_RCCEx_PeriphCLKConfig+0x3cc>
 8008012:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008016:	d81e      	bhi.n	8008056 <HAL_RCCEx_PeriphCLKConfig+0x3de>
 8008018:	2b00      	cmp	r3, #0
 800801a:	d003      	beq.n	8008024 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
 800801c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008020:	d007      	beq.n	8008032 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
 8008022:	e018      	b.n	8008056 <HAL_RCCEx_PeriphCLKConfig+0x3de>
    {
    case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
      /* Enable SPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008024:	4b66      	ldr	r3, [pc, #408]	; (80081c0 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8008026:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008028:	4a65      	ldr	r2, [pc, #404]	; (80081c0 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 800802a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800802e:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8008030:	e017      	b.n	8008062 <HAL_RCCEx_PeriphCLKConfig+0x3ea>

    case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8008032:	687b      	ldr	r3, [r7, #4]
 8008034:	3304      	adds	r3, #4
 8008036:	2100      	movs	r1, #0
 8008038:	4618      	mov	r0, r3
 800803a:	f001 fe45 	bl	8009cc8 <RCCEx_PLL2_Config>
 800803e:	4603      	mov	r3, r0
 8008040:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8008042:	e00e      	b.n	8008062 <HAL_RCCEx_PeriphCLKConfig+0x3ea>

    case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8008044:	687b      	ldr	r3, [r7, #4]
 8008046:	3324      	adds	r3, #36	; 0x24
 8008048:	2100      	movs	r1, #0
 800804a:	4618      	mov	r0, r3
 800804c:	f001 feee 	bl	8009e2c <RCCEx_PLL3_Config>
 8008050:	4603      	mov	r3, r0
 8008052:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8008054:	e005      	b.n	8008062 <HAL_RCCEx_PeriphCLKConfig+0x3ea>
      /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8008056:	2301      	movs	r3, #1
 8008058:	75fb      	strb	r3, [r7, #23]
      break;
 800805a:	e002      	b.n	8008062 <HAL_RCCEx_PeriphCLKConfig+0x3ea>
      break;
 800805c:	bf00      	nop
 800805e:	e000      	b.n	8008062 <HAL_RCCEx_PeriphCLKConfig+0x3ea>
      break;
 8008060:	bf00      	nop
    }

    if(ret == HAL_OK)
 8008062:	7dfb      	ldrb	r3, [r7, #23]
 8008064:	2b00      	cmp	r3, #0
 8008066:	d109      	bne.n	800807c <HAL_RCCEx_PeriphCLKConfig+0x404>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8008068:	4b55      	ldr	r3, [pc, #340]	; (80081c0 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 800806a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800806c:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 8008070:	687b      	ldr	r3, [r7, #4]
 8008072:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008074:	4952      	ldr	r1, [pc, #328]	; (80081c0 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8008076:	4313      	orrs	r3, r2
 8008078:	650b      	str	r3, [r1, #80]	; 0x50
 800807a:	e001      	b.n	8008080 <HAL_RCCEx_PeriphCLKConfig+0x408>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800807c:	7dfb      	ldrb	r3, [r7, #23]
 800807e:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8008080:	687b      	ldr	r3, [r7, #4]
 8008082:	681b      	ldr	r3, [r3, #0]
 8008084:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8008088:	2b00      	cmp	r3, #0
 800808a:	d049      	beq.n	8008120 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
  {
    switch(PeriphClkInit->Spi45ClockSelection)
 800808c:	687b      	ldr	r3, [r7, #4]
 800808e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008090:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8008094:	d02e      	beq.n	80080f4 <HAL_RCCEx_PeriphCLKConfig+0x47c>
 8008096:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800809a:	d828      	bhi.n	80080ee <HAL_RCCEx_PeriphCLKConfig+0x476>
 800809c:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80080a0:	d02a      	beq.n	80080f8 <HAL_RCCEx_PeriphCLKConfig+0x480>
 80080a2:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80080a6:	d822      	bhi.n	80080ee <HAL_RCCEx_PeriphCLKConfig+0x476>
 80080a8:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80080ac:	d026      	beq.n	80080fc <HAL_RCCEx_PeriphCLKConfig+0x484>
 80080ae:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80080b2:	d81c      	bhi.n	80080ee <HAL_RCCEx_PeriphCLKConfig+0x476>
 80080b4:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80080b8:	d010      	beq.n	80080dc <HAL_RCCEx_PeriphCLKConfig+0x464>
 80080ba:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80080be:	d816      	bhi.n	80080ee <HAL_RCCEx_PeriphCLKConfig+0x476>
 80080c0:	2b00      	cmp	r3, #0
 80080c2:	d01d      	beq.n	8008100 <HAL_RCCEx_PeriphCLKConfig+0x488>
 80080c4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80080c8:	d111      	bne.n	80080ee <HAL_RCCEx_PeriphCLKConfig+0x476>
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80080ca:	687b      	ldr	r3, [r7, #4]
 80080cc:	3304      	adds	r3, #4
 80080ce:	2101      	movs	r1, #1
 80080d0:	4618      	mov	r0, r3
 80080d2:	f001 fdf9 	bl	8009cc8 <RCCEx_PLL2_Config>
 80080d6:	4603      	mov	r3, r0
 80080d8:	75fb      	strb	r3, [r7, #23]

      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 80080da:	e012      	b.n	8008102 <HAL_RCCEx_PeriphCLKConfig+0x48a>
    case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80080dc:	687b      	ldr	r3, [r7, #4]
 80080de:	3324      	adds	r3, #36	; 0x24
 80080e0:	2101      	movs	r1, #1
 80080e2:	4618      	mov	r0, r3
 80080e4:	f001 fea2 	bl	8009e2c <RCCEx_PLL3_Config>
 80080e8:	4603      	mov	r3, r0
 80080ea:	75fb      	strb	r3, [r7, #23]
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 80080ec:	e009      	b.n	8008102 <HAL_RCCEx_PeriphCLKConfig+0x48a>
      /* HSE,  oscillator is used as source of SPI4/5 clock */
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80080ee:	2301      	movs	r3, #1
 80080f0:	75fb      	strb	r3, [r7, #23]
      break;
 80080f2:	e006      	b.n	8008102 <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 80080f4:	bf00      	nop
 80080f6:	e004      	b.n	8008102 <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 80080f8:	bf00      	nop
 80080fa:	e002      	b.n	8008102 <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 80080fc:	bf00      	nop
 80080fe:	e000      	b.n	8008102 <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 8008100:	bf00      	nop
    }

    if(ret == HAL_OK)
 8008102:	7dfb      	ldrb	r3, [r7, #23]
 8008104:	2b00      	cmp	r3, #0
 8008106:	d109      	bne.n	800811c <HAL_RCCEx_PeriphCLKConfig+0x4a4>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8008108:	4b2d      	ldr	r3, [pc, #180]	; (80081c0 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 800810a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800810c:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 8008110:	687b      	ldr	r3, [r7, #4]
 8008112:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008114:	492a      	ldr	r1, [pc, #168]	; (80081c0 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8008116:	4313      	orrs	r3, r2
 8008118:	650b      	str	r3, [r1, #80]	; 0x50
 800811a:	e001      	b.n	8008120 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800811c:	7dfb      	ldrb	r3, [r7, #23]
 800811e:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8008120:	687b      	ldr	r3, [r7, #4]
 8008122:	681b      	ldr	r3, [r3, #0]
 8008124:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8008128:	2b00      	cmp	r3, #0
 800812a:	d04d      	beq.n	80081c8 <HAL_RCCEx_PeriphCLKConfig+0x550>
  {
    switch(PeriphClkInit->Spi6ClockSelection)
 800812c:	687b      	ldr	r3, [r7, #4]
 800812e:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8008132:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8008136:	d02e      	beq.n	8008196 <HAL_RCCEx_PeriphCLKConfig+0x51e>
 8008138:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800813c:	d828      	bhi.n	8008190 <HAL_RCCEx_PeriphCLKConfig+0x518>
 800813e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008142:	d02a      	beq.n	800819a <HAL_RCCEx_PeriphCLKConfig+0x522>
 8008144:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008148:	d822      	bhi.n	8008190 <HAL_RCCEx_PeriphCLKConfig+0x518>
 800814a:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800814e:	d026      	beq.n	800819e <HAL_RCCEx_PeriphCLKConfig+0x526>
 8008150:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8008154:	d81c      	bhi.n	8008190 <HAL_RCCEx_PeriphCLKConfig+0x518>
 8008156:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800815a:	d010      	beq.n	800817e <HAL_RCCEx_PeriphCLKConfig+0x506>
 800815c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008160:	d816      	bhi.n	8008190 <HAL_RCCEx_PeriphCLKConfig+0x518>
 8008162:	2b00      	cmp	r3, #0
 8008164:	d01d      	beq.n	80081a2 <HAL_RCCEx_PeriphCLKConfig+0x52a>
 8008166:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800816a:	d111      	bne.n	8008190 <HAL_RCCEx_PeriphCLKConfig+0x518>
      /* SPI6 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800816c:	687b      	ldr	r3, [r7, #4]
 800816e:	3304      	adds	r3, #4
 8008170:	2101      	movs	r1, #1
 8008172:	4618      	mov	r0, r3
 8008174:	f001 fda8 	bl	8009cc8 <RCCEx_PLL2_Config>
 8008178:	4603      	mov	r3, r0
 800817a:	75fb      	strb	r3, [r7, #23]

      /* SPI6 clock source configuration done later after clock selection check */
      break;
 800817c:	e012      	b.n	80081a4 <HAL_RCCEx_PeriphCLKConfig+0x52c>
    case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800817e:	687b      	ldr	r3, [r7, #4]
 8008180:	3324      	adds	r3, #36	; 0x24
 8008182:	2101      	movs	r1, #1
 8008184:	4618      	mov	r0, r3
 8008186:	f001 fe51 	bl	8009e2c <RCCEx_PLL3_Config>
 800818a:	4603      	mov	r3, r0
 800818c:	75fb      	strb	r3, [r7, #23]
      /* SPI6 clock source configuration done later after clock selection check */
      break;
 800818e:	e009      	b.n	80081a4 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      /* SPI6 clock source configuration done later after clock selection check */
      break;
#endif

    default:
      ret = HAL_ERROR;
 8008190:	2301      	movs	r3, #1
 8008192:	75fb      	strb	r3, [r7, #23]
      break;
 8008194:	e006      	b.n	80081a4 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 8008196:	bf00      	nop
 8008198:	e004      	b.n	80081a4 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 800819a:	bf00      	nop
 800819c:	e002      	b.n	80081a4 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 800819e:	bf00      	nop
 80081a0:	e000      	b.n	80081a4 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 80081a2:	bf00      	nop
    }

    if(ret == HAL_OK)
 80081a4:	7dfb      	ldrb	r3, [r7, #23]
 80081a6:	2b00      	cmp	r3, #0
 80081a8:	d10c      	bne.n	80081c4 <HAL_RCCEx_PeriphCLKConfig+0x54c>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 80081aa:	4b05      	ldr	r3, [pc, #20]	; (80081c0 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 80081ac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80081ae:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 80081b2:	687b      	ldr	r3, [r7, #4]
 80081b4:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 80081b8:	4901      	ldr	r1, [pc, #4]	; (80081c0 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 80081ba:	4313      	orrs	r3, r2
 80081bc:	658b      	str	r3, [r1, #88]	; 0x58
 80081be:	e003      	b.n	80081c8 <HAL_RCCEx_PeriphCLKConfig+0x550>
 80081c0:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80081c4:	7dfb      	ldrb	r3, [r7, #23]
 80081c6:	75bb      	strb	r3, [r7, #22]
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 80081c8:	687b      	ldr	r3, [r7, #4]
 80081ca:	681b      	ldr	r3, [r3, #0]
 80081cc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80081d0:	2b00      	cmp	r3, #0
 80081d2:	d02f      	beq.n	8008234 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
  {
    switch(PeriphClkInit->FdcanClockSelection)
 80081d4:	687b      	ldr	r3, [r7, #4]
 80081d6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80081d8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80081dc:	d00e      	beq.n	80081fc <HAL_RCCEx_PeriphCLKConfig+0x584>
 80081de:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80081e2:	d814      	bhi.n	800820e <HAL_RCCEx_PeriphCLKConfig+0x596>
 80081e4:	2b00      	cmp	r3, #0
 80081e6:	d015      	beq.n	8008214 <HAL_RCCEx_PeriphCLKConfig+0x59c>
 80081e8:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80081ec:	d10f      	bne.n	800820e <HAL_RCCEx_PeriphCLKConfig+0x596>
    {
    case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
      /* Enable FDCAN Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80081ee:	4baf      	ldr	r3, [pc, #700]	; (80084ac <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80081f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80081f2:	4aae      	ldr	r2, [pc, #696]	; (80084ac <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80081f4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80081f8:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 80081fa:	e00c      	b.n	8008216 <HAL_RCCEx_PeriphCLKConfig+0x59e>

    case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80081fc:	687b      	ldr	r3, [r7, #4]
 80081fe:	3304      	adds	r3, #4
 8008200:	2101      	movs	r1, #1
 8008202:	4618      	mov	r0, r3
 8008204:	f001 fd60 	bl	8009cc8 <RCCEx_PLL2_Config>
 8008208:	4603      	mov	r3, r0
 800820a:	75fb      	strb	r3, [r7, #23]

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 800820c:	e003      	b.n	8008216 <HAL_RCCEx_PeriphCLKConfig+0x59e>
      /* HSE is used as clock source for FDCAN*/
      /* FDCAN clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800820e:	2301      	movs	r3, #1
 8008210:	75fb      	strb	r3, [r7, #23]
      break;
 8008212:	e000      	b.n	8008216 <HAL_RCCEx_PeriphCLKConfig+0x59e>
      break;
 8008214:	bf00      	nop
    }

    if(ret == HAL_OK)
 8008216:	7dfb      	ldrb	r3, [r7, #23]
 8008218:	2b00      	cmp	r3, #0
 800821a:	d109      	bne.n	8008230 <HAL_RCCEx_PeriphCLKConfig+0x5b8>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 800821c:	4ba3      	ldr	r3, [pc, #652]	; (80084ac <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800821e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008220:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8008224:	687b      	ldr	r3, [r7, #4]
 8008226:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008228:	49a0      	ldr	r1, [pc, #640]	; (80084ac <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800822a:	4313      	orrs	r3, r2
 800822c:	650b      	str	r3, [r1, #80]	; 0x50
 800822e:	e001      	b.n	8008234 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008230:	7dfb      	ldrb	r3, [r7, #23]
 8008232:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8008234:	687b      	ldr	r3, [r7, #4]
 8008236:	681b      	ldr	r3, [r3, #0]
 8008238:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800823c:	2b00      	cmp	r3, #0
 800823e:	d032      	beq.n	80082a6 <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    switch(PeriphClkInit->FmcClockSelection)
 8008240:	687b      	ldr	r3, [r7, #4]
 8008242:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008244:	2b03      	cmp	r3, #3
 8008246:	d81b      	bhi.n	8008280 <HAL_RCCEx_PeriphCLKConfig+0x608>
 8008248:	a201      	add	r2, pc, #4	; (adr r2, 8008250 <HAL_RCCEx_PeriphCLKConfig+0x5d8>)
 800824a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800824e:	bf00      	nop
 8008250:	08008287 	.word	0x08008287
 8008254:	08008261 	.word	0x08008261
 8008258:	0800826f 	.word	0x0800826f
 800825c:	08008287 	.word	0x08008287
    {
    case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
      /* Enable FMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008260:	4b92      	ldr	r3, [pc, #584]	; (80084ac <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8008262:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008264:	4a91      	ldr	r2, [pc, #580]	; (80084ac <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8008266:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800826a:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FMC clock source configuration done later after clock selection check */
      break;
 800826c:	e00c      	b.n	8008288 <HAL_RCCEx_PeriphCLKConfig+0x610>

    case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 800826e:	687b      	ldr	r3, [r7, #4]
 8008270:	3304      	adds	r3, #4
 8008272:	2102      	movs	r1, #2
 8008274:	4618      	mov	r0, r3
 8008276:	f001 fd27 	bl	8009cc8 <RCCEx_PLL2_Config>
 800827a:	4603      	mov	r3, r0
 800827c:	75fb      	strb	r3, [r7, #23]

      /* FMC clock source configuration done later after clock selection check */
      break;
 800827e:	e003      	b.n	8008288 <HAL_RCCEx_PeriphCLKConfig+0x610>
    case RCC_FMCCLKSOURCE_HCLK:
      /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8008280:	2301      	movs	r3, #1
 8008282:	75fb      	strb	r3, [r7, #23]
      break;
 8008284:	e000      	b.n	8008288 <HAL_RCCEx_PeriphCLKConfig+0x610>
      break;
 8008286:	bf00      	nop
    }

    if(ret == HAL_OK)
 8008288:	7dfb      	ldrb	r3, [r7, #23]
 800828a:	2b00      	cmp	r3, #0
 800828c:	d109      	bne.n	80082a2 <HAL_RCCEx_PeriphCLKConfig+0x62a>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 800828e:	4b87      	ldr	r3, [pc, #540]	; (80084ac <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8008290:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008292:	f023 0203 	bic.w	r2, r3, #3
 8008296:	687b      	ldr	r3, [r7, #4]
 8008298:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800829a:	4984      	ldr	r1, [pc, #528]	; (80084ac <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800829c:	4313      	orrs	r3, r2
 800829e:	64cb      	str	r3, [r1, #76]	; 0x4c
 80082a0:	e001      	b.n	80082a6 <HAL_RCCEx_PeriphCLKConfig+0x62e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80082a2:	7dfb      	ldrb	r3, [r7, #23]
 80082a4:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80082a6:	687b      	ldr	r3, [r7, #4]
 80082a8:	681b      	ldr	r3, [r3, #0]
 80082aa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80082ae:	2b00      	cmp	r3, #0
 80082b0:	f000 8086 	beq.w	80083c0 <HAL_RCCEx_PeriphCLKConfig+0x748>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80082b4:	4b7e      	ldr	r3, [pc, #504]	; (80084b0 <HAL_RCCEx_PeriphCLKConfig+0x838>)
 80082b6:	681b      	ldr	r3, [r3, #0]
 80082b8:	4a7d      	ldr	r2, [pc, #500]	; (80084b0 <HAL_RCCEx_PeriphCLKConfig+0x838>)
 80082ba:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80082be:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80082c0:	f7fa f876 	bl	80023b0 <HAL_GetTick>
 80082c4:	6138      	str	r0, [r7, #16]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80082c6:	e009      	b.n	80082dc <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80082c8:	f7fa f872 	bl	80023b0 <HAL_GetTick>
 80082cc:	4602      	mov	r2, r0
 80082ce:	693b      	ldr	r3, [r7, #16]
 80082d0:	1ad3      	subs	r3, r2, r3
 80082d2:	2b64      	cmp	r3, #100	; 0x64
 80082d4:	d902      	bls.n	80082dc <HAL_RCCEx_PeriphCLKConfig+0x664>
      {
        ret = HAL_TIMEOUT;
 80082d6:	2303      	movs	r3, #3
 80082d8:	75fb      	strb	r3, [r7, #23]
        break;
 80082da:	e005      	b.n	80082e8 <HAL_RCCEx_PeriphCLKConfig+0x670>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80082dc:	4b74      	ldr	r3, [pc, #464]	; (80084b0 <HAL_RCCEx_PeriphCLKConfig+0x838>)
 80082de:	681b      	ldr	r3, [r3, #0]
 80082e0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80082e4:	2b00      	cmp	r3, #0
 80082e6:	d0ef      	beq.n	80082c8 <HAL_RCCEx_PeriphCLKConfig+0x650>
      }
    }

    if(ret == HAL_OK)
 80082e8:	7dfb      	ldrb	r3, [r7, #23]
 80082ea:	2b00      	cmp	r3, #0
 80082ec:	d166      	bne.n	80083bc <HAL_RCCEx_PeriphCLKConfig+0x744>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 80082ee:	4b6f      	ldr	r3, [pc, #444]	; (80084ac <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80082f0:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80082f2:	687b      	ldr	r3, [r7, #4]
 80082f4:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80082f8:	4053      	eors	r3, r2
 80082fa:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80082fe:	2b00      	cmp	r3, #0
 8008300:	d013      	beq.n	800832a <HAL_RCCEx_PeriphCLKConfig+0x6b2>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8008302:	4b6a      	ldr	r3, [pc, #424]	; (80084ac <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8008304:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008306:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800830a:	60fb      	str	r3, [r7, #12]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800830c:	4b67      	ldr	r3, [pc, #412]	; (80084ac <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800830e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008310:	4a66      	ldr	r2, [pc, #408]	; (80084ac <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8008312:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8008316:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8008318:	4b64      	ldr	r3, [pc, #400]	; (80084ac <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800831a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800831c:	4a63      	ldr	r2, [pc, #396]	; (80084ac <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800831e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8008322:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8008324:	4a61      	ldr	r2, [pc, #388]	; (80084ac <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8008326:	68fb      	ldr	r3, [r7, #12]
 8008328:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if(PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 800832a:	687b      	ldr	r3, [r7, #4]
 800832c:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8008330:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008334:	d115      	bne.n	8008362 <HAL_RCCEx_PeriphCLKConfig+0x6ea>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008336:	f7fa f83b 	bl	80023b0 <HAL_GetTick>
 800833a:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800833c:	e00b      	b.n	8008356 <HAL_RCCEx_PeriphCLKConfig+0x6de>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800833e:	f7fa f837 	bl	80023b0 <HAL_GetTick>
 8008342:	4602      	mov	r2, r0
 8008344:	693b      	ldr	r3, [r7, #16]
 8008346:	1ad3      	subs	r3, r2, r3
 8008348:	f241 3288 	movw	r2, #5000	; 0x1388
 800834c:	4293      	cmp	r3, r2
 800834e:	d902      	bls.n	8008356 <HAL_RCCEx_PeriphCLKConfig+0x6de>
          {
            ret = HAL_TIMEOUT;
 8008350:	2303      	movs	r3, #3
 8008352:	75fb      	strb	r3, [r7, #23]
            break;
 8008354:	e005      	b.n	8008362 <HAL_RCCEx_PeriphCLKConfig+0x6ea>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8008356:	4b55      	ldr	r3, [pc, #340]	; (80084ac <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8008358:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800835a:	f003 0302 	and.w	r3, r3, #2
 800835e:	2b00      	cmp	r3, #0
 8008360:	d0ed      	beq.n	800833e <HAL_RCCEx_PeriphCLKConfig+0x6c6>
          }
        }
      }

      if(ret == HAL_OK)
 8008362:	7dfb      	ldrb	r3, [r7, #23]
 8008364:	2b00      	cmp	r3, #0
 8008366:	d126      	bne.n	80083b6 <HAL_RCCEx_PeriphCLKConfig+0x73e>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8008368:	687b      	ldr	r3, [r7, #4]
 800836a:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800836e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008372:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8008376:	d10d      	bne.n	8008394 <HAL_RCCEx_PeriphCLKConfig+0x71c>
 8008378:	4b4c      	ldr	r3, [pc, #304]	; (80084ac <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800837a:	691b      	ldr	r3, [r3, #16]
 800837c:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 8008380:	687b      	ldr	r3, [r7, #4]
 8008382:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8008386:	0919      	lsrs	r1, r3, #4
 8008388:	4b4a      	ldr	r3, [pc, #296]	; (80084b4 <HAL_RCCEx_PeriphCLKConfig+0x83c>)
 800838a:	400b      	ands	r3, r1
 800838c:	4947      	ldr	r1, [pc, #284]	; (80084ac <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800838e:	4313      	orrs	r3, r2
 8008390:	610b      	str	r3, [r1, #16]
 8008392:	e005      	b.n	80083a0 <HAL_RCCEx_PeriphCLKConfig+0x728>
 8008394:	4b45      	ldr	r3, [pc, #276]	; (80084ac <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8008396:	691b      	ldr	r3, [r3, #16]
 8008398:	4a44      	ldr	r2, [pc, #272]	; (80084ac <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800839a:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800839e:	6113      	str	r3, [r2, #16]
 80083a0:	4b42      	ldr	r3, [pc, #264]	; (80084ac <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80083a2:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80083a4:	687b      	ldr	r3, [r7, #4]
 80083a6:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80083aa:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80083ae:	493f      	ldr	r1, [pc, #252]	; (80084ac <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80083b0:	4313      	orrs	r3, r2
 80083b2:	670b      	str	r3, [r1, #112]	; 0x70
 80083b4:	e004      	b.n	80083c0 <HAL_RCCEx_PeriphCLKConfig+0x748>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80083b6:	7dfb      	ldrb	r3, [r7, #23]
 80083b8:	75bb      	strb	r3, [r7, #22]
 80083ba:	e001      	b.n	80083c0 <HAL_RCCEx_PeriphCLKConfig+0x748>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80083bc:	7dfb      	ldrb	r3, [r7, #23]
 80083be:	75bb      	strb	r3, [r7, #22]
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 80083c0:	687b      	ldr	r3, [r7, #4]
 80083c2:	681b      	ldr	r3, [r3, #0]
 80083c4:	f003 0301 	and.w	r3, r3, #1
 80083c8:	2b00      	cmp	r3, #0
 80083ca:	f000 8085 	beq.w	80084d8 <HAL_RCCEx_PeriphCLKConfig+0x860>
  {
    switch(PeriphClkInit->Usart16ClockSelection)
 80083ce:	687b      	ldr	r3, [r7, #4]
 80083d0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80083d2:	2b28      	cmp	r3, #40	; 0x28
 80083d4:	d866      	bhi.n	80084a4 <HAL_RCCEx_PeriphCLKConfig+0x82c>
 80083d6:	a201      	add	r2, pc, #4	; (adr r2, 80083dc <HAL_RCCEx_PeriphCLKConfig+0x764>)
 80083d8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80083dc:	080084b9 	.word	0x080084b9
 80083e0:	080084a5 	.word	0x080084a5
 80083e4:	080084a5 	.word	0x080084a5
 80083e8:	080084a5 	.word	0x080084a5
 80083ec:	080084a5 	.word	0x080084a5
 80083f0:	080084a5 	.word	0x080084a5
 80083f4:	080084a5 	.word	0x080084a5
 80083f8:	080084a5 	.word	0x080084a5
 80083fc:	08008481 	.word	0x08008481
 8008400:	080084a5 	.word	0x080084a5
 8008404:	080084a5 	.word	0x080084a5
 8008408:	080084a5 	.word	0x080084a5
 800840c:	080084a5 	.word	0x080084a5
 8008410:	080084a5 	.word	0x080084a5
 8008414:	080084a5 	.word	0x080084a5
 8008418:	080084a5 	.word	0x080084a5
 800841c:	08008493 	.word	0x08008493
 8008420:	080084a5 	.word	0x080084a5
 8008424:	080084a5 	.word	0x080084a5
 8008428:	080084a5 	.word	0x080084a5
 800842c:	080084a5 	.word	0x080084a5
 8008430:	080084a5 	.word	0x080084a5
 8008434:	080084a5 	.word	0x080084a5
 8008438:	080084a5 	.word	0x080084a5
 800843c:	080084b9 	.word	0x080084b9
 8008440:	080084a5 	.word	0x080084a5
 8008444:	080084a5 	.word	0x080084a5
 8008448:	080084a5 	.word	0x080084a5
 800844c:	080084a5 	.word	0x080084a5
 8008450:	080084a5 	.word	0x080084a5
 8008454:	080084a5 	.word	0x080084a5
 8008458:	080084a5 	.word	0x080084a5
 800845c:	080084b9 	.word	0x080084b9
 8008460:	080084a5 	.word	0x080084a5
 8008464:	080084a5 	.word	0x080084a5
 8008468:	080084a5 	.word	0x080084a5
 800846c:	080084a5 	.word	0x080084a5
 8008470:	080084a5 	.word	0x080084a5
 8008474:	080084a5 	.word	0x080084a5
 8008478:	080084a5 	.word	0x080084a5
 800847c:	080084b9 	.word	0x080084b9
    case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8008480:	687b      	ldr	r3, [r7, #4]
 8008482:	3304      	adds	r3, #4
 8008484:	2101      	movs	r1, #1
 8008486:	4618      	mov	r0, r3
 8008488:	f001 fc1e 	bl	8009cc8 <RCCEx_PLL2_Config>
 800848c:	4603      	mov	r3, r0
 800848e:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8008490:	e013      	b.n	80084ba <HAL_RCCEx_PeriphCLKConfig+0x842>

    case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8008492:	687b      	ldr	r3, [r7, #4]
 8008494:	3324      	adds	r3, #36	; 0x24
 8008496:	2101      	movs	r1, #1
 8008498:	4618      	mov	r0, r3
 800849a:	f001 fcc7 	bl	8009e2c <RCCEx_PLL3_Config>
 800849e:	4603      	mov	r3, r0
 80084a0:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 80084a2:	e00a      	b.n	80084ba <HAL_RCCEx_PeriphCLKConfig+0x842>
      /* LSE,  oscillator is used as source of USART1/6 clock */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80084a4:	2301      	movs	r3, #1
 80084a6:	75fb      	strb	r3, [r7, #23]
      break;
 80084a8:	e007      	b.n	80084ba <HAL_RCCEx_PeriphCLKConfig+0x842>
 80084aa:	bf00      	nop
 80084ac:	58024400 	.word	0x58024400
 80084b0:	58024800 	.word	0x58024800
 80084b4:	00ffffcf 	.word	0x00ffffcf
      break;
 80084b8:	bf00      	nop
    }

    if(ret == HAL_OK)
 80084ba:	7dfb      	ldrb	r3, [r7, #23]
 80084bc:	2b00      	cmp	r3, #0
 80084be:	d109      	bne.n	80084d4 <HAL_RCCEx_PeriphCLKConfig+0x85c>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 80084c0:	4b96      	ldr	r3, [pc, #600]	; (800871c <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 80084c2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80084c4:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 80084c8:	687b      	ldr	r3, [r7, #4]
 80084ca:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80084cc:	4993      	ldr	r1, [pc, #588]	; (800871c <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 80084ce:	4313      	orrs	r3, r2
 80084d0:	654b      	str	r3, [r1, #84]	; 0x54
 80084d2:	e001      	b.n	80084d8 <HAL_RCCEx_PeriphCLKConfig+0x860>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80084d4:	7dfb      	ldrb	r3, [r7, #23]
 80084d6:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 80084d8:	687b      	ldr	r3, [r7, #4]
 80084da:	681b      	ldr	r3, [r3, #0]
 80084dc:	f003 0302 	and.w	r3, r3, #2
 80084e0:	2b00      	cmp	r3, #0
 80084e2:	d038      	beq.n	8008556 <HAL_RCCEx_PeriphCLKConfig+0x8de>
  {
    switch(PeriphClkInit->Usart234578ClockSelection)
 80084e4:	687b      	ldr	r3, [r7, #4]
 80084e6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80084e8:	2b05      	cmp	r3, #5
 80084ea:	d821      	bhi.n	8008530 <HAL_RCCEx_PeriphCLKConfig+0x8b8>
 80084ec:	a201      	add	r2, pc, #4	; (adr r2, 80084f4 <HAL_RCCEx_PeriphCLKConfig+0x87c>)
 80084ee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80084f2:	bf00      	nop
 80084f4:	08008537 	.word	0x08008537
 80084f8:	0800850d 	.word	0x0800850d
 80084fc:	0800851f 	.word	0x0800851f
 8008500:	08008537 	.word	0x08008537
 8008504:	08008537 	.word	0x08008537
 8008508:	08008537 	.word	0x08008537
    case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800850c:	687b      	ldr	r3, [r7, #4]
 800850e:	3304      	adds	r3, #4
 8008510:	2101      	movs	r1, #1
 8008512:	4618      	mov	r0, r3
 8008514:	f001 fbd8 	bl	8009cc8 <RCCEx_PLL2_Config>
 8008518:	4603      	mov	r3, r0
 800851a:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 800851c:	e00c      	b.n	8008538 <HAL_RCCEx_PeriphCLKConfig+0x8c0>

    case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800851e:	687b      	ldr	r3, [r7, #4]
 8008520:	3324      	adds	r3, #36	; 0x24
 8008522:	2101      	movs	r1, #1
 8008524:	4618      	mov	r0, r3
 8008526:	f001 fc81 	bl	8009e2c <RCCEx_PLL3_Config>
 800852a:	4603      	mov	r3, r0
 800852c:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 800852e:	e003      	b.n	8008538 <HAL_RCCEx_PeriphCLKConfig+0x8c0>
      /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8008530:	2301      	movs	r3, #1
 8008532:	75fb      	strb	r3, [r7, #23]
      break;
 8008534:	e000      	b.n	8008538 <HAL_RCCEx_PeriphCLKConfig+0x8c0>
      break;
 8008536:	bf00      	nop
    }

    if(ret == HAL_OK)
 8008538:	7dfb      	ldrb	r3, [r7, #23]
 800853a:	2b00      	cmp	r3, #0
 800853c:	d109      	bne.n	8008552 <HAL_RCCEx_PeriphCLKConfig+0x8da>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 800853e:	4b77      	ldr	r3, [pc, #476]	; (800871c <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8008540:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008542:	f023 0207 	bic.w	r2, r3, #7
 8008546:	687b      	ldr	r3, [r7, #4]
 8008548:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800854a:	4974      	ldr	r1, [pc, #464]	; (800871c <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 800854c:	4313      	orrs	r3, r2
 800854e:	654b      	str	r3, [r1, #84]	; 0x54
 8008550:	e001      	b.n	8008556 <HAL_RCCEx_PeriphCLKConfig+0x8de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008552:	7dfb      	ldrb	r3, [r7, #23]
 8008554:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8008556:	687b      	ldr	r3, [r7, #4]
 8008558:	681b      	ldr	r3, [r3, #0]
 800855a:	f003 0304 	and.w	r3, r3, #4
 800855e:	2b00      	cmp	r3, #0
 8008560:	d03a      	beq.n	80085d8 <HAL_RCCEx_PeriphCLKConfig+0x960>
  {
    switch(PeriphClkInit->Lpuart1ClockSelection)
 8008562:	687b      	ldr	r3, [r7, #4]
 8008564:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008568:	2b05      	cmp	r3, #5
 800856a:	d821      	bhi.n	80085b0 <HAL_RCCEx_PeriphCLKConfig+0x938>
 800856c:	a201      	add	r2, pc, #4	; (adr r2, 8008574 <HAL_RCCEx_PeriphCLKConfig+0x8fc>)
 800856e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008572:	bf00      	nop
 8008574:	080085b7 	.word	0x080085b7
 8008578:	0800858d 	.word	0x0800858d
 800857c:	0800859f 	.word	0x0800859f
 8008580:	080085b7 	.word	0x080085b7
 8008584:	080085b7 	.word	0x080085b7
 8008588:	080085b7 	.word	0x080085b7
    case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800858c:	687b      	ldr	r3, [r7, #4]
 800858e:	3304      	adds	r3, #4
 8008590:	2101      	movs	r1, #1
 8008592:	4618      	mov	r0, r3
 8008594:	f001 fb98 	bl	8009cc8 <RCCEx_PLL2_Config>
 8008598:	4603      	mov	r3, r0
 800859a:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 800859c:	e00c      	b.n	80085b8 <HAL_RCCEx_PeriphCLKConfig+0x940>

    case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800859e:	687b      	ldr	r3, [r7, #4]
 80085a0:	3324      	adds	r3, #36	; 0x24
 80085a2:	2101      	movs	r1, #1
 80085a4:	4618      	mov	r0, r3
 80085a6:	f001 fc41 	bl	8009e2c <RCCEx_PLL3_Config>
 80085aa:	4603      	mov	r3, r0
 80085ac:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 80085ae:	e003      	b.n	80085b8 <HAL_RCCEx_PeriphCLKConfig+0x940>
      /* LSE,  oscillator is used as source of LPUART1 clock */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80085b0:	2301      	movs	r3, #1
 80085b2:	75fb      	strb	r3, [r7, #23]
      break;
 80085b4:	e000      	b.n	80085b8 <HAL_RCCEx_PeriphCLKConfig+0x940>
      break;
 80085b6:	bf00      	nop
    }

    if(ret == HAL_OK)
 80085b8:	7dfb      	ldrb	r3, [r7, #23]
 80085ba:	2b00      	cmp	r3, #0
 80085bc:	d10a      	bne.n	80085d4 <HAL_RCCEx_PeriphCLKConfig+0x95c>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80085be:	4b57      	ldr	r3, [pc, #348]	; (800871c <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 80085c0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80085c2:	f023 0207 	bic.w	r2, r3, #7
 80085c6:	687b      	ldr	r3, [r7, #4]
 80085c8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80085cc:	4953      	ldr	r1, [pc, #332]	; (800871c <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 80085ce:	4313      	orrs	r3, r2
 80085d0:	658b      	str	r3, [r1, #88]	; 0x58
 80085d2:	e001      	b.n	80085d8 <HAL_RCCEx_PeriphCLKConfig+0x960>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80085d4:	7dfb      	ldrb	r3, [r7, #23]
 80085d6:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80085d8:	687b      	ldr	r3, [r7, #4]
 80085da:	681b      	ldr	r3, [r3, #0]
 80085dc:	f003 0320 	and.w	r3, r3, #32
 80085e0:	2b00      	cmp	r3, #0
 80085e2:	d04b      	beq.n	800867c <HAL_RCCEx_PeriphCLKConfig+0xa04>
  {
    switch(PeriphClkInit->Lptim1ClockSelection)
 80085e4:	687b      	ldr	r3, [r7, #4]
 80085e6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80085ea:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80085ee:	d02e      	beq.n	800864e <HAL_RCCEx_PeriphCLKConfig+0x9d6>
 80085f0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80085f4:	d828      	bhi.n	8008648 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 80085f6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80085fa:	d02a      	beq.n	8008652 <HAL_RCCEx_PeriphCLKConfig+0x9da>
 80085fc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008600:	d822      	bhi.n	8008648 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 8008602:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8008606:	d026      	beq.n	8008656 <HAL_RCCEx_PeriphCLKConfig+0x9de>
 8008608:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800860c:	d81c      	bhi.n	8008648 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 800860e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008612:	d010      	beq.n	8008636 <HAL_RCCEx_PeriphCLKConfig+0x9be>
 8008614:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008618:	d816      	bhi.n	8008648 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 800861a:	2b00      	cmp	r3, #0
 800861c:	d01d      	beq.n	800865a <HAL_RCCEx_PeriphCLKConfig+0x9e2>
 800861e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8008622:	d111      	bne.n	8008648 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8008624:	687b      	ldr	r3, [r7, #4]
 8008626:	3304      	adds	r3, #4
 8008628:	2100      	movs	r1, #0
 800862a:	4618      	mov	r0, r3
 800862c:	f001 fb4c 	bl	8009cc8 <RCCEx_PLL2_Config>
 8008630:	4603      	mov	r3, r0
 8008632:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 8008634:	e012      	b.n	800865c <HAL_RCCEx_PeriphCLKConfig+0x9e4>

    case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8008636:	687b      	ldr	r3, [r7, #4]
 8008638:	3324      	adds	r3, #36	; 0x24
 800863a:	2102      	movs	r1, #2
 800863c:	4618      	mov	r0, r3
 800863e:	f001 fbf5 	bl	8009e2c <RCCEx_PLL3_Config>
 8008642:	4603      	mov	r3, r0
 8008644:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 8008646:	e009      	b.n	800865c <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8008648:	2301      	movs	r3, #1
 800864a:	75fb      	strb	r3, [r7, #23]
      break;
 800864c:	e006      	b.n	800865c <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 800864e:	bf00      	nop
 8008650:	e004      	b.n	800865c <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 8008652:	bf00      	nop
 8008654:	e002      	b.n	800865c <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 8008656:	bf00      	nop
 8008658:	e000      	b.n	800865c <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 800865a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800865c:	7dfb      	ldrb	r3, [r7, #23]
 800865e:	2b00      	cmp	r3, #0
 8008660:	d10a      	bne.n	8008678 <HAL_RCCEx_PeriphCLKConfig+0xa00>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8008662:	4b2e      	ldr	r3, [pc, #184]	; (800871c <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8008664:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008666:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 800866a:	687b      	ldr	r3, [r7, #4]
 800866c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008670:	492a      	ldr	r1, [pc, #168]	; (800871c <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8008672:	4313      	orrs	r3, r2
 8008674:	654b      	str	r3, [r1, #84]	; 0x54
 8008676:	e001      	b.n	800867c <HAL_RCCEx_PeriphCLKConfig+0xa04>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008678:	7dfb      	ldrb	r3, [r7, #23]
 800867a:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 800867c:	687b      	ldr	r3, [r7, #4]
 800867e:	681b      	ldr	r3, [r3, #0]
 8008680:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008684:	2b00      	cmp	r3, #0
 8008686:	d04d      	beq.n	8008724 <HAL_RCCEx_PeriphCLKConfig+0xaac>
  {
    switch(PeriphClkInit->Lptim2ClockSelection)
 8008688:	687b      	ldr	r3, [r7, #4]
 800868a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800868e:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8008692:	d02e      	beq.n	80086f2 <HAL_RCCEx_PeriphCLKConfig+0xa7a>
 8008694:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8008698:	d828      	bhi.n	80086ec <HAL_RCCEx_PeriphCLKConfig+0xa74>
 800869a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800869e:	d02a      	beq.n	80086f6 <HAL_RCCEx_PeriphCLKConfig+0xa7e>
 80086a0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80086a4:	d822      	bhi.n	80086ec <HAL_RCCEx_PeriphCLKConfig+0xa74>
 80086a6:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80086aa:	d026      	beq.n	80086fa <HAL_RCCEx_PeriphCLKConfig+0xa82>
 80086ac:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80086b0:	d81c      	bhi.n	80086ec <HAL_RCCEx_PeriphCLKConfig+0xa74>
 80086b2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80086b6:	d010      	beq.n	80086da <HAL_RCCEx_PeriphCLKConfig+0xa62>
 80086b8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80086bc:	d816      	bhi.n	80086ec <HAL_RCCEx_PeriphCLKConfig+0xa74>
 80086be:	2b00      	cmp	r3, #0
 80086c0:	d01d      	beq.n	80086fe <HAL_RCCEx_PeriphCLKConfig+0xa86>
 80086c2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80086c6:	d111      	bne.n	80086ec <HAL_RCCEx_PeriphCLKConfig+0xa74>
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80086c8:	687b      	ldr	r3, [r7, #4]
 80086ca:	3304      	adds	r3, #4
 80086cc:	2100      	movs	r1, #0
 80086ce:	4618      	mov	r0, r3
 80086d0:	f001 fafa 	bl	8009cc8 <RCCEx_PLL2_Config>
 80086d4:	4603      	mov	r3, r0
 80086d6:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 80086d8:	e012      	b.n	8008700 <HAL_RCCEx_PeriphCLKConfig+0xa88>

    case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80086da:	687b      	ldr	r3, [r7, #4]
 80086dc:	3324      	adds	r3, #36	; 0x24
 80086de:	2102      	movs	r1, #2
 80086e0:	4618      	mov	r0, r3
 80086e2:	f001 fba3 	bl	8009e2c <RCCEx_PLL3_Config>
 80086e6:	4603      	mov	r3, r0
 80086e8:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 80086ea:	e009      	b.n	8008700 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80086ec:	2301      	movs	r3, #1
 80086ee:	75fb      	strb	r3, [r7, #23]
      break;
 80086f0:	e006      	b.n	8008700 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 80086f2:	bf00      	nop
 80086f4:	e004      	b.n	8008700 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 80086f6:	bf00      	nop
 80086f8:	e002      	b.n	8008700 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 80086fa:	bf00      	nop
 80086fc:	e000      	b.n	8008700 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 80086fe:	bf00      	nop
    }

    if(ret == HAL_OK)
 8008700:	7dfb      	ldrb	r3, [r7, #23]
 8008702:	2b00      	cmp	r3, #0
 8008704:	d10c      	bne.n	8008720 <HAL_RCCEx_PeriphCLKConfig+0xaa8>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8008706:	4b05      	ldr	r3, [pc, #20]	; (800871c <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8008708:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800870a:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800870e:	687b      	ldr	r3, [r7, #4]
 8008710:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8008714:	4901      	ldr	r1, [pc, #4]	; (800871c <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8008716:	4313      	orrs	r3, r2
 8008718:	658b      	str	r3, [r1, #88]	; 0x58
 800871a:	e003      	b.n	8008724 <HAL_RCCEx_PeriphCLKConfig+0xaac>
 800871c:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008720:	7dfb      	ldrb	r3, [r7, #23]
 8008722:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8008724:	687b      	ldr	r3, [r7, #4]
 8008726:	681b      	ldr	r3, [r3, #0]
 8008728:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800872c:	2b00      	cmp	r3, #0
 800872e:	d04b      	beq.n	80087c8 <HAL_RCCEx_PeriphCLKConfig+0xb50>
  {
    switch(PeriphClkInit->Lptim345ClockSelection)
 8008730:	687b      	ldr	r3, [r7, #4]
 8008732:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8008736:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 800873a:	d02e      	beq.n	800879a <HAL_RCCEx_PeriphCLKConfig+0xb22>
 800873c:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8008740:	d828      	bhi.n	8008794 <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 8008742:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008746:	d02a      	beq.n	800879e <HAL_RCCEx_PeriphCLKConfig+0xb26>
 8008748:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800874c:	d822      	bhi.n	8008794 <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 800874e:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8008752:	d026      	beq.n	80087a2 <HAL_RCCEx_PeriphCLKConfig+0xb2a>
 8008754:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8008758:	d81c      	bhi.n	8008794 <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 800875a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800875e:	d010      	beq.n	8008782 <HAL_RCCEx_PeriphCLKConfig+0xb0a>
 8008760:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8008764:	d816      	bhi.n	8008794 <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 8008766:	2b00      	cmp	r3, #0
 8008768:	d01d      	beq.n	80087a6 <HAL_RCCEx_PeriphCLKConfig+0xb2e>
 800876a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800876e:	d111      	bne.n	8008794 <HAL_RCCEx_PeriphCLKConfig+0xb1c>
    case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8008770:	687b      	ldr	r3, [r7, #4]
 8008772:	3304      	adds	r3, #4
 8008774:	2100      	movs	r1, #0
 8008776:	4618      	mov	r0, r3
 8008778:	f001 faa6 	bl	8009cc8 <RCCEx_PLL2_Config>
 800877c:	4603      	mov	r3, r0
 800877e:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 8008780:	e012      	b.n	80087a8 <HAL_RCCEx_PeriphCLKConfig+0xb30>

    case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8008782:	687b      	ldr	r3, [r7, #4]
 8008784:	3324      	adds	r3, #36	; 0x24
 8008786:	2102      	movs	r1, #2
 8008788:	4618      	mov	r0, r3
 800878a:	f001 fb4f 	bl	8009e2c <RCCEx_PLL3_Config>
 800878e:	4603      	mov	r3, r0
 8008790:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 8008792:	e009      	b.n	80087a8 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8008794:	2301      	movs	r3, #1
 8008796:	75fb      	strb	r3, [r7, #23]
      break;
 8008798:	e006      	b.n	80087a8 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 800879a:	bf00      	nop
 800879c:	e004      	b.n	80087a8 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 800879e:	bf00      	nop
 80087a0:	e002      	b.n	80087a8 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 80087a2:	bf00      	nop
 80087a4:	e000      	b.n	80087a8 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 80087a6:	bf00      	nop
    }

    if(ret == HAL_OK)
 80087a8:	7dfb      	ldrb	r3, [r7, #23]
 80087aa:	2b00      	cmp	r3, #0
 80087ac:	d10a      	bne.n	80087c4 <HAL_RCCEx_PeriphCLKConfig+0xb4c>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 80087ae:	4b9d      	ldr	r3, [pc, #628]	; (8008a24 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80087b0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80087b2:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80087b6:	687b      	ldr	r3, [r7, #4]
 80087b8:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80087bc:	4999      	ldr	r1, [pc, #612]	; (8008a24 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80087be:	4313      	orrs	r3, r2
 80087c0:	658b      	str	r3, [r1, #88]	; 0x58
 80087c2:	e001      	b.n	80087c8 <HAL_RCCEx_PeriphCLKConfig+0xb50>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80087c4:	7dfb      	ldrb	r3, [r7, #23]
 80087c6:	75bb      	strb	r3, [r7, #22]

      __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 80087c8:	687b      	ldr	r3, [r7, #4]
 80087ca:	681b      	ldr	r3, [r3, #0]
 80087cc:	f003 0308 	and.w	r3, r3, #8
 80087d0:	2b00      	cmp	r3, #0
 80087d2:	d01a      	beq.n	800880a <HAL_RCCEx_PeriphCLKConfig+0xb92>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection )== RCC_I2C123CLKSOURCE_PLL3 )
 80087d4:	687b      	ldr	r3, [r7, #4]
 80087d6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80087da:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80087de:	d10a      	bne.n	80087f6 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
    {
        if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 80087e0:	687b      	ldr	r3, [r7, #4]
 80087e2:	3324      	adds	r3, #36	; 0x24
 80087e4:	2102      	movs	r1, #2
 80087e6:	4618      	mov	r0, r3
 80087e8:	f001 fb20 	bl	8009e2c <RCCEx_PLL3_Config>
 80087ec:	4603      	mov	r3, r0
 80087ee:	2b00      	cmp	r3, #0
 80087f0:	d001      	beq.n	80087f6 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        {
          status = HAL_ERROR;
 80087f2:	2301      	movs	r3, #1
 80087f4:	75bb      	strb	r3, [r7, #22]
        }
    }

      __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 80087f6:	4b8b      	ldr	r3, [pc, #556]	; (8008a24 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80087f8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80087fa:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80087fe:	687b      	ldr	r3, [r7, #4]
 8008800:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008804:	4987      	ldr	r1, [pc, #540]	; (8008a24 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8008806:	4313      	orrs	r3, r2
 8008808:	654b      	str	r3, [r1, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800880a:	687b      	ldr	r3, [r7, #4]
 800880c:	681b      	ldr	r3, [r3, #0]
 800880e:	f003 0310 	and.w	r3, r3, #16
 8008812:	2b00      	cmp	r3, #0
 8008814:	d01a      	beq.n	800884c <HAL_RCCEx_PeriphCLKConfig+0xbd4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3 )
 8008816:	687b      	ldr	r3, [r7, #4]
 8008818:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800881c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008820:	d10a      	bne.n	8008838 <HAL_RCCEx_PeriphCLKConfig+0xbc0>
    {
      if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8008822:	687b      	ldr	r3, [r7, #4]
 8008824:	3324      	adds	r3, #36	; 0x24
 8008826:	2102      	movs	r1, #2
 8008828:	4618      	mov	r0, r3
 800882a:	f001 faff 	bl	8009e2c <RCCEx_PLL3_Config>
 800882e:	4603      	mov	r3, r0
 8008830:	2b00      	cmp	r3, #0
 8008832:	d001      	beq.n	8008838 <HAL_RCCEx_PeriphCLKConfig+0xbc0>
      {
        status = HAL_ERROR;
 8008834:	2301      	movs	r3, #1
 8008836:	75bb      	strb	r3, [r7, #22]
      }
    }

      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8008838:	4b7a      	ldr	r3, [pc, #488]	; (8008a24 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800883a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800883c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8008840:	687b      	ldr	r3, [r7, #4]
 8008842:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8008846:	4977      	ldr	r1, [pc, #476]	; (8008a24 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8008848:	4313      	orrs	r3, r2
 800884a:	658b      	str	r3, [r1, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800884c:	687b      	ldr	r3, [r7, #4]
 800884e:	681b      	ldr	r3, [r3, #0]
 8008850:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8008854:	2b00      	cmp	r3, #0
 8008856:	d034      	beq.n	80088c2 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
  {
    switch(PeriphClkInit->AdcClockSelection)
 8008858:	687b      	ldr	r3, [r7, #4]
 800885a:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800885e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8008862:	d01d      	beq.n	80088a0 <HAL_RCCEx_PeriphCLKConfig+0xc28>
 8008864:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8008868:	d817      	bhi.n	800889a <HAL_RCCEx_PeriphCLKConfig+0xc22>
 800886a:	2b00      	cmp	r3, #0
 800886c:	d003      	beq.n	8008876 <HAL_RCCEx_PeriphCLKConfig+0xbfe>
 800886e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008872:	d009      	beq.n	8008888 <HAL_RCCEx_PeriphCLKConfig+0xc10>
 8008874:	e011      	b.n	800889a <HAL_RCCEx_PeriphCLKConfig+0xc22>
    {

    case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8008876:	687b      	ldr	r3, [r7, #4]
 8008878:	3304      	adds	r3, #4
 800887a:	2100      	movs	r1, #0
 800887c:	4618      	mov	r0, r3
 800887e:	f001 fa23 	bl	8009cc8 <RCCEx_PLL2_Config>
 8008882:	4603      	mov	r3, r0
 8008884:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 8008886:	e00c      	b.n	80088a2 <HAL_RCCEx_PeriphCLKConfig+0xc2a>

    case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8008888:	687b      	ldr	r3, [r7, #4]
 800888a:	3324      	adds	r3, #36	; 0x24
 800888c:	2102      	movs	r1, #2
 800888e:	4618      	mov	r0, r3
 8008890:	f001 facc 	bl	8009e2c <RCCEx_PLL3_Config>
 8008894:	4603      	mov	r3, r0
 8008896:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 8008898:	e003      	b.n	80088a2 <HAL_RCCEx_PeriphCLKConfig+0xc2a>
      /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
      /* ADC clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800889a:	2301      	movs	r3, #1
 800889c:	75fb      	strb	r3, [r7, #23]
      break;
 800889e:	e000      	b.n	80088a2 <HAL_RCCEx_PeriphCLKConfig+0xc2a>
      break;
 80088a0:	bf00      	nop
    }

    if(ret == HAL_OK)
 80088a2:	7dfb      	ldrb	r3, [r7, #23]
 80088a4:	2b00      	cmp	r3, #0
 80088a6:	d10a      	bne.n	80088be <HAL_RCCEx_PeriphCLKConfig+0xc46>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80088a8:	4b5e      	ldr	r3, [pc, #376]	; (8008a24 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80088aa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80088ac:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80088b0:	687b      	ldr	r3, [r7, #4]
 80088b2:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 80088b6:	495b      	ldr	r1, [pc, #364]	; (8008a24 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80088b8:	4313      	orrs	r3, r2
 80088ba:	658b      	str	r3, [r1, #88]	; 0x58
 80088bc:	e001      	b.n	80088c2 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80088be:	7dfb      	ldrb	r3, [r7, #23]
 80088c0:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80088c2:	687b      	ldr	r3, [r7, #4]
 80088c4:	681b      	ldr	r3, [r3, #0]
 80088c6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80088ca:	2b00      	cmp	r3, #0
 80088cc:	d033      	beq.n	8008936 <HAL_RCCEx_PeriphCLKConfig+0xcbe>
  {

    switch(PeriphClkInit->UsbClockSelection)
 80088ce:	687b      	ldr	r3, [r7, #4]
 80088d0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80088d4:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80088d8:	d01c      	beq.n	8008914 <HAL_RCCEx_PeriphCLKConfig+0xc9c>
 80088da:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80088de:	d816      	bhi.n	800890e <HAL_RCCEx_PeriphCLKConfig+0xc96>
 80088e0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80088e4:	d003      	beq.n	80088ee <HAL_RCCEx_PeriphCLKConfig+0xc76>
 80088e6:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80088ea:	d007      	beq.n	80088fc <HAL_RCCEx_PeriphCLKConfig+0xc84>
 80088ec:	e00f      	b.n	800890e <HAL_RCCEx_PeriphCLKConfig+0xc96>
    {
    case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
      /* Enable USB Clock output generated form System USB . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80088ee:	4b4d      	ldr	r3, [pc, #308]	; (8008a24 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80088f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80088f2:	4a4c      	ldr	r2, [pc, #304]	; (8008a24 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80088f4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80088f8:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* USB clock source configuration done later after clock selection check */
      break;
 80088fa:	e00c      	b.n	8008916 <HAL_RCCEx_PeriphCLKConfig+0xc9e>

    case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80088fc:	687b      	ldr	r3, [r7, #4]
 80088fe:	3324      	adds	r3, #36	; 0x24
 8008900:	2101      	movs	r1, #1
 8008902:	4618      	mov	r0, r3
 8008904:	f001 fa92 	bl	8009e2c <RCCEx_PLL3_Config>
 8008908:	4603      	mov	r3, r0
 800890a:	75fb      	strb	r3, [r7, #23]

      /* USB clock source configuration done later after clock selection check */
      break;
 800890c:	e003      	b.n	8008916 <HAL_RCCEx_PeriphCLKConfig+0xc9e>
      /* HSI48 oscillator is used as source of USB clock */
      /* USB clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800890e:	2301      	movs	r3, #1
 8008910:	75fb      	strb	r3, [r7, #23]
      break;
 8008912:	e000      	b.n	8008916 <HAL_RCCEx_PeriphCLKConfig+0xc9e>
      break;
 8008914:	bf00      	nop
    }

    if(ret == HAL_OK)
 8008916:	7dfb      	ldrb	r3, [r7, #23]
 8008918:	2b00      	cmp	r3, #0
 800891a:	d10a      	bne.n	8008932 <HAL_RCCEx_PeriphCLKConfig+0xcba>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800891c:	4b41      	ldr	r3, [pc, #260]	; (8008a24 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800891e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008920:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8008924:	687b      	ldr	r3, [r7, #4]
 8008926:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800892a:	493e      	ldr	r1, [pc, #248]	; (8008a24 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800892c:	4313      	orrs	r3, r2
 800892e:	654b      	str	r3, [r1, #84]	; 0x54
 8008930:	e001      	b.n	8008936 <HAL_RCCEx_PeriphCLKConfig+0xcbe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008932:	7dfb      	ldrb	r3, [r7, #23]
 8008934:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8008936:	687b      	ldr	r3, [r7, #4]
 8008938:	681b      	ldr	r3, [r3, #0]
 800893a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800893e:	2b00      	cmp	r3, #0
 8008940:	d029      	beq.n	8008996 <HAL_RCCEx_PeriphCLKConfig+0xd1e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch(PeriphClkInit->SdmmcClockSelection)
 8008942:	687b      	ldr	r3, [r7, #4]
 8008944:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008946:	2b00      	cmp	r3, #0
 8008948:	d003      	beq.n	8008952 <HAL_RCCEx_PeriphCLKConfig+0xcda>
 800894a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800894e:	d007      	beq.n	8008960 <HAL_RCCEx_PeriphCLKConfig+0xce8>
 8008950:	e00f      	b.n	8008972 <HAL_RCCEx_PeriphCLKConfig+0xcfa>
    {
    case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
      /* Enable SDMMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008952:	4b34      	ldr	r3, [pc, #208]	; (8008a24 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8008954:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008956:	4a33      	ldr	r2, [pc, #204]	; (8008a24 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8008958:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800895c:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 800895e:	e00b      	b.n	8008978 <HAL_RCCEx_PeriphCLKConfig+0xd00>

    case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8008960:	687b      	ldr	r3, [r7, #4]
 8008962:	3304      	adds	r3, #4
 8008964:	2102      	movs	r1, #2
 8008966:	4618      	mov	r0, r3
 8008968:	f001 f9ae 	bl	8009cc8 <RCCEx_PLL2_Config>
 800896c:	4603      	mov	r3, r0
 800896e:	75fb      	strb	r3, [r7, #23]

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 8008970:	e002      	b.n	8008978 <HAL_RCCEx_PeriphCLKConfig+0xd00>

    default:
      ret = HAL_ERROR;
 8008972:	2301      	movs	r3, #1
 8008974:	75fb      	strb	r3, [r7, #23]
      break;
 8008976:	bf00      	nop
    }

    if(ret == HAL_OK)
 8008978:	7dfb      	ldrb	r3, [r7, #23]
 800897a:	2b00      	cmp	r3, #0
 800897c:	d109      	bne.n	8008992 <HAL_RCCEx_PeriphCLKConfig+0xd1a>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 800897e:	4b29      	ldr	r3, [pc, #164]	; (8008a24 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8008980:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008982:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8008986:	687b      	ldr	r3, [r7, #4]
 8008988:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800898a:	4926      	ldr	r1, [pc, #152]	; (8008a24 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800898c:	4313      	orrs	r3, r2
 800898e:	64cb      	str	r3, [r1, #76]	; 0x4c
 8008990:	e001      	b.n	8008996 <HAL_RCCEx_PeriphCLKConfig+0xd1e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008992:	7dfb      	ldrb	r3, [r7, #23]
 8008994:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8008996:	687b      	ldr	r3, [r7, #4]
 8008998:	681b      	ldr	r3, [r3, #0]
 800899a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800899e:	2b00      	cmp	r3, #0
 80089a0:	d00a      	beq.n	80089b8 <HAL_RCCEx_PeriphCLKConfig+0xd40>
  {
    if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!=HAL_OK)
 80089a2:	687b      	ldr	r3, [r7, #4]
 80089a4:	3324      	adds	r3, #36	; 0x24
 80089a6:	2102      	movs	r1, #2
 80089a8:	4618      	mov	r0, r3
 80089aa:	f001 fa3f 	bl	8009e2c <RCCEx_PLL3_Config>
 80089ae:	4603      	mov	r3, r0
 80089b0:	2b00      	cmp	r3, #0
 80089b2:	d001      	beq.n	80089b8 <HAL_RCCEx_PeriphCLKConfig+0xd40>
    {
      status=HAL_ERROR;
 80089b4:	2301      	movs	r3, #1
 80089b6:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 80089b8:	687b      	ldr	r3, [r7, #4]
 80089ba:	681b      	ldr	r3, [r3, #0]
 80089bc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80089c0:	2b00      	cmp	r3, #0
 80089c2:	d033      	beq.n	8008a2c <HAL_RCCEx_PeriphCLKConfig+0xdb4>
  {

    switch(PeriphClkInit->RngClockSelection)
 80089c4:	687b      	ldr	r3, [r7, #4]
 80089c6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80089c8:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80089cc:	d017      	beq.n	80089fe <HAL_RCCEx_PeriphCLKConfig+0xd86>
 80089ce:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80089d2:	d811      	bhi.n	80089f8 <HAL_RCCEx_PeriphCLKConfig+0xd80>
 80089d4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80089d8:	d013      	beq.n	8008a02 <HAL_RCCEx_PeriphCLKConfig+0xd8a>
 80089da:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80089de:	d80b      	bhi.n	80089f8 <HAL_RCCEx_PeriphCLKConfig+0xd80>
 80089e0:	2b00      	cmp	r3, #0
 80089e2:	d010      	beq.n	8008a06 <HAL_RCCEx_PeriphCLKConfig+0xd8e>
 80089e4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80089e8:	d106      	bne.n	80089f8 <HAL_RCCEx_PeriphCLKConfig+0xd80>
    {
    case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
      /* Enable RNG Clock output generated form System RNG . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80089ea:	4b0e      	ldr	r3, [pc, #56]	; (8008a24 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80089ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80089ee:	4a0d      	ldr	r2, [pc, #52]	; (8008a24 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80089f0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80089f4:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* RNG clock source configuration done later after clock selection check */
      break;
 80089f6:	e007      	b.n	8008a08 <HAL_RCCEx_PeriphCLKConfig+0xd90>
      /* HSI48 oscillator is used as source of RNG clock */
      /* RNG clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80089f8:	2301      	movs	r3, #1
 80089fa:	75fb      	strb	r3, [r7, #23]
      break;
 80089fc:	e004      	b.n	8008a08 <HAL_RCCEx_PeriphCLKConfig+0xd90>
      break;
 80089fe:	bf00      	nop
 8008a00:	e002      	b.n	8008a08 <HAL_RCCEx_PeriphCLKConfig+0xd90>
      break;
 8008a02:	bf00      	nop
 8008a04:	e000      	b.n	8008a08 <HAL_RCCEx_PeriphCLKConfig+0xd90>
      break;
 8008a06:	bf00      	nop
    }

    if(ret == HAL_OK)
 8008a08:	7dfb      	ldrb	r3, [r7, #23]
 8008a0a:	2b00      	cmp	r3, #0
 8008a0c:	d10c      	bne.n	8008a28 <HAL_RCCEx_PeriphCLKConfig+0xdb0>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8008a0e:	4b05      	ldr	r3, [pc, #20]	; (8008a24 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8008a10:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008a12:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8008a16:	687b      	ldr	r3, [r7, #4]
 8008a18:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008a1a:	4902      	ldr	r1, [pc, #8]	; (8008a24 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8008a1c:	4313      	orrs	r3, r2
 8008a1e:	654b      	str	r3, [r1, #84]	; 0x54
 8008a20:	e004      	b.n	8008a2c <HAL_RCCEx_PeriphCLKConfig+0xdb4>
 8008a22:	bf00      	nop
 8008a24:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008a28:	7dfb      	ldrb	r3, [r7, #23]
 8008a2a:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8008a2c:	687b      	ldr	r3, [r7, #4]
 8008a2e:	681b      	ldr	r3, [r3, #0]
 8008a30:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8008a34:	2b00      	cmp	r3, #0
 8008a36:	d008      	beq.n	8008a4a <HAL_RCCEx_PeriphCLKConfig+0xdd2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8008a38:	4b31      	ldr	r3, [pc, #196]	; (8008b00 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8008a3a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008a3c:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8008a40:	687b      	ldr	r3, [r7, #4]
 8008a42:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008a44:	492e      	ldr	r1, [pc, #184]	; (8008b00 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8008a46:	4313      	orrs	r3, r2
 8008a48:	650b      	str	r3, [r1, #80]	; 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 8008a4a:	687b      	ldr	r3, [r7, #4]
 8008a4c:	681b      	ldr	r3, [r3, #0]
 8008a4e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008a52:	2b00      	cmp	r3, #0
 8008a54:	d009      	beq.n	8008a6a <HAL_RCCEx_PeriphCLKConfig+0xdf2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 8008a56:	4b2a      	ldr	r3, [pc, #168]	; (8008b00 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8008a58:	691b      	ldr	r3, [r3, #16]
 8008a5a:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8008a5e:	687b      	ldr	r3, [r7, #4]
 8008a60:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8008a64:	4926      	ldr	r1, [pc, #152]	; (8008b00 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8008a66:	4313      	orrs	r3, r2
 8008a68:	610b      	str	r3, [r1, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8008a6a:	687b      	ldr	r3, [r7, #4]
 8008a6c:	681b      	ldr	r3, [r3, #0]
 8008a6e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8008a72:	2b00      	cmp	r3, #0
 8008a74:	d008      	beq.n	8008a88 <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8008a76:	4b22      	ldr	r3, [pc, #136]	; (8008b00 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8008a78:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008a7a:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8008a7e:	687b      	ldr	r3, [r7, #4]
 8008a80:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8008a82:	491f      	ldr	r1, [pc, #124]	; (8008b00 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8008a84:	4313      	orrs	r3, r2
 8008a86:	650b      	str	r3, [r1, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8008a88:	687b      	ldr	r3, [r7, #4]
 8008a8a:	681b      	ldr	r3, [r3, #0]
 8008a8c:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8008a90:	2b00      	cmp	r3, #0
 8008a92:	d00d      	beq.n	8008ab0 <HAL_RCCEx_PeriphCLKConfig+0xe38>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8008a94:	4b1a      	ldr	r3, [pc, #104]	; (8008b00 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8008a96:	691b      	ldr	r3, [r3, #16]
 8008a98:	4a19      	ldr	r2, [pc, #100]	; (8008b00 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8008a9a:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8008a9e:	6113      	str	r3, [r2, #16]
 8008aa0:	4b17      	ldr	r3, [pc, #92]	; (8008b00 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8008aa2:	691a      	ldr	r2, [r3, #16]
 8008aa4:	687b      	ldr	r3, [r7, #4]
 8008aa6:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8008aaa:	4915      	ldr	r1, [pc, #84]	; (8008b00 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8008aac:	4313      	orrs	r3, r2
 8008aae:	610b      	str	r3, [r1, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8008ab0:	687b      	ldr	r3, [r7, #4]
 8008ab2:	681b      	ldr	r3, [r3, #0]
 8008ab4:	2b00      	cmp	r3, #0
 8008ab6:	da08      	bge.n	8008aca <HAL_RCCEx_PeriphCLKConfig+0xe52>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8008ab8:	4b11      	ldr	r3, [pc, #68]	; (8008b00 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8008aba:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008abc:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8008ac0:	687b      	ldr	r3, [r7, #4]
 8008ac2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008ac4:	490e      	ldr	r1, [pc, #56]	; (8008b00 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8008ac6:	4313      	orrs	r3, r2
 8008ac8:	64cb      	str	r3, [r1, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8008aca:	687b      	ldr	r3, [r7, #4]
 8008acc:	681b      	ldr	r3, [r3, #0]
 8008ace:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8008ad2:	2b00      	cmp	r3, #0
 8008ad4:	d009      	beq.n	8008aea <HAL_RCCEx_PeriphCLKConfig+0xe72>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8008ad6:	4b0a      	ldr	r3, [pc, #40]	; (8008b00 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8008ad8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008ada:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8008ade:	687b      	ldr	r3, [r7, #4]
 8008ae0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008ae4:	4906      	ldr	r1, [pc, #24]	; (8008b00 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8008ae6:	4313      	orrs	r3, r2
 8008ae8:	654b      	str	r3, [r1, #84]	; 0x54
  }

  if (status == HAL_OK)
 8008aea:	7dbb      	ldrb	r3, [r7, #22]
 8008aec:	2b00      	cmp	r3, #0
 8008aee:	d101      	bne.n	8008af4 <HAL_RCCEx_PeriphCLKConfig+0xe7c>
  {
    return HAL_OK;
 8008af0:	2300      	movs	r3, #0
 8008af2:	e000      	b.n	8008af6 <HAL_RCCEx_PeriphCLKConfig+0xe7e>
  }
  return HAL_ERROR;
 8008af4:	2301      	movs	r3, #1
}
 8008af6:	4618      	mov	r0, r3
 8008af8:	3718      	adds	r7, #24
 8008afa:	46bd      	mov	sp, r7
 8008afc:	bd80      	pop	{r7, pc}
 8008afe:	bf00      	nop
 8008b00:	58024400 	.word	0x58024400

08008b04 <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in KHz
  *
  *  (*) : Available on some STM32H7 lines only.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8008b04:	b580      	push	{r7, lr}
 8008b06:	b090      	sub	sp, #64	; 0x40
 8008b08:	af00      	add	r7, sp, #0
 8008b0a:	6078      	str	r0, [r7, #4]
  /* This variable is used to store the SAI and CKP clock source */
  uint32_t saiclocksource;
  uint32_t ckpclocksource;
  uint32_t srcclk;

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 8008b0c:	687b      	ldr	r3, [r7, #4]
 8008b0e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008b12:	f040 8095 	bne.w	8008c40 <HAL_RCCEx_GetPeriphCLKFreq+0x13c>
    {

      saiclocksource= __HAL_RCC_GET_SAI1_SOURCE();
 8008b16:	4b97      	ldr	r3, [pc, #604]	; (8008d74 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8008b18:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008b1a:	f003 0307 	and.w	r3, r3, #7
 8008b1e:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
 8008b20:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008b22:	2b04      	cmp	r3, #4
 8008b24:	f200 8088 	bhi.w	8008c38 <HAL_RCCEx_GetPeriphCLKFreq+0x134>
 8008b28:	a201      	add	r2, pc, #4	; (adr r2, 8008b30 <HAL_RCCEx_GetPeriphCLKFreq+0x2c>)
 8008b2a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008b2e:	bf00      	nop
 8008b30:	08008b45 	.word	0x08008b45
 8008b34:	08008b6d 	.word	0x08008b6d
 8008b38:	08008b95 	.word	0x08008b95
 8008b3c:	08008c31 	.word	0x08008c31
 8008b40:	08008bbd 	.word	0x08008bbd
      {
      case RCC_SAI1CLKSOURCE_PLL: /* PLL1 is the clock source for SAI1 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8008b44:	4b8b      	ldr	r3, [pc, #556]	; (8008d74 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8008b46:	681b      	ldr	r3, [r3, #0]
 8008b48:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008b4c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8008b50:	d108      	bne.n	8008b64 <HAL_RCCEx_GetPeriphCLKFreq+0x60>
         {
           HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8008b52:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8008b56:	4618      	mov	r0, r3
 8008b58:	f000 ff64 	bl	8009a24 <HAL_RCCEx_GetPLL1ClockFreq>
           frequency = pll1_clocks.PLL1_Q_Frequency;
 8008b5c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008b5e:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8008b60:	f000 bc94 	b.w	800948c <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 8008b64:	2300      	movs	r3, #0
 8008b66:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008b68:	f000 bc90 	b.w	800948c <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI1 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8008b6c:	4b81      	ldr	r3, [pc, #516]	; (8008d74 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8008b6e:	681b      	ldr	r3, [r3, #0]
 8008b70:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008b74:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8008b78:	d108      	bne.n	8008b8c <HAL_RCCEx_GetPeriphCLKFreq+0x88>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008b7a:	f107 0318 	add.w	r3, r7, #24
 8008b7e:	4618      	mov	r0, r3
 8008b80:	f000 fca8 	bl	80094d4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8008b84:	69bb      	ldr	r3, [r7, #24]
 8008b86:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8008b88:	f000 bc80 	b.w	800948c <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 8008b8c:	2300      	movs	r3, #0
 8008b8e:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008b90:	f000 bc7c 	b.w	800948c <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      case RCC_SAI1CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI1 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8008b94:	4b77      	ldr	r3, [pc, #476]	; (8008d74 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8008b96:	681b      	ldr	r3, [r3, #0]
 8008b98:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8008b9c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008ba0:	d108      	bne.n	8008bb4 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008ba2:	f107 030c 	add.w	r3, r7, #12
 8008ba6:	4618      	mov	r0, r3
 8008ba8:	f000 fde8 	bl	800977c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8008bac:	68fb      	ldr	r3, [r7, #12]
 8008bae:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8008bb0:	f000 bc6c 	b.w	800948c <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 8008bb4:	2300      	movs	r3, #0
 8008bb6:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008bb8:	f000 bc68 	b.w	800948c <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      case RCC_SAI1CLKSOURCE_CLKP: /* CKPER is the clock source for SAI1*/
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8008bbc:	4b6d      	ldr	r3, [pc, #436]	; (8008d74 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8008bbe:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008bc0:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8008bc4:	637b      	str	r3, [r7, #52]	; 0x34

          if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8008bc6:	4b6b      	ldr	r3, [pc, #428]	; (8008d74 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8008bc8:	681b      	ldr	r3, [r3, #0]
 8008bca:	f003 0304 	and.w	r3, r3, #4
 8008bce:	2b04      	cmp	r3, #4
 8008bd0:	d10c      	bne.n	8008bec <HAL_RCCEx_GetPeriphCLKFreq+0xe8>
 8008bd2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008bd4:	2b00      	cmp	r3, #0
 8008bd6:	d109      	bne.n	8008bec <HAL_RCCEx_GetPeriphCLKFreq+0xe8>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8008bd8:	4b66      	ldr	r3, [pc, #408]	; (8008d74 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8008bda:	681b      	ldr	r3, [r3, #0]
 8008bdc:	08db      	lsrs	r3, r3, #3
 8008bde:	f003 0303 	and.w	r3, r3, #3
 8008be2:	4a65      	ldr	r2, [pc, #404]	; (8008d78 <HAL_RCCEx_GetPeriphCLKFreq+0x274>)
 8008be4:	fa22 f303 	lsr.w	r3, r2, r3
 8008be8:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008bea:	e01f      	b.n	8008c2c <HAL_RCCEx_GetPeriphCLKFreq+0x128>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8008bec:	4b61      	ldr	r3, [pc, #388]	; (8008d74 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8008bee:	681b      	ldr	r3, [r3, #0]
 8008bf0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008bf4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008bf8:	d106      	bne.n	8008c08 <HAL_RCCEx_GetPeriphCLKFreq+0x104>
 8008bfa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008bfc:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8008c00:	d102      	bne.n	8008c08 <HAL_RCCEx_GetPeriphCLKFreq+0x104>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 8008c02:	4b5e      	ldr	r3, [pc, #376]	; (8008d7c <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 8008c04:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008c06:	e011      	b.n	8008c2c <HAL_RCCEx_GetPeriphCLKFreq+0x128>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8008c08:	4b5a      	ldr	r3, [pc, #360]	; (8008d74 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8008c0a:	681b      	ldr	r3, [r3, #0]
 8008c0c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008c10:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8008c14:	d106      	bne.n	8008c24 <HAL_RCCEx_GetPeriphCLKFreq+0x120>
 8008c16:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008c18:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008c1c:	d102      	bne.n	8008c24 <HAL_RCCEx_GetPeriphCLKFreq+0x120>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 8008c1e:	4b58      	ldr	r3, [pc, #352]	; (8008d80 <HAL_RCCEx_GetPeriphCLKFreq+0x27c>)
 8008c20:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008c22:	e003      	b.n	8008c2c <HAL_RCCEx_GetPeriphCLKFreq+0x128>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 8008c24:	2300      	movs	r3, #0
 8008c26:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 8008c28:	f000 bc30 	b.w	800948c <HAL_RCCEx_GetPeriphCLKFreq+0x988>
 8008c2c:	f000 bc2e 	b.w	800948c <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      case (RCC_SAI1CLKSOURCE_PIN): /* External clock is the clock source for SAI1 */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 8008c30:	4b54      	ldr	r3, [pc, #336]	; (8008d84 <HAL_RCCEx_GetPeriphCLKFreq+0x280>)
 8008c32:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008c34:	f000 bc2a 	b.w	800948c <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      default :
        {
          frequency = 0;
 8008c38:	2300      	movs	r3, #0
 8008c3a:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008c3c:	f000 bc26 	b.w	800948c <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      }
    }

#if defined(SAI3)
  else if (PeriphClk == RCC_PERIPHCLK_SAI23)
 8008c40:	687b      	ldr	r3, [r7, #4]
 8008c42:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008c46:	f040 809f 	bne.w	8008d88 <HAL_RCCEx_GetPeriphCLKFreq+0x284>
    {

      saiclocksource= __HAL_RCC_GET_SAI23_SOURCE();
 8008c4a:	4b4a      	ldr	r3, [pc, #296]	; (8008d74 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8008c4c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008c4e:	f403 73e0 	and.w	r3, r3, #448	; 0x1c0
 8008c52:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
 8008c54:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008c56:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008c5a:	d04d      	beq.n	8008cf8 <HAL_RCCEx_GetPeriphCLKFreq+0x1f4>
 8008c5c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008c5e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008c62:	f200 8084 	bhi.w	8008d6e <HAL_RCCEx_GetPeriphCLKFreq+0x26a>
 8008c66:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008c68:	2bc0      	cmp	r3, #192	; 0xc0
 8008c6a:	d07d      	beq.n	8008d68 <HAL_RCCEx_GetPeriphCLKFreq+0x264>
 8008c6c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008c6e:	2bc0      	cmp	r3, #192	; 0xc0
 8008c70:	d87d      	bhi.n	8008d6e <HAL_RCCEx_GetPeriphCLKFreq+0x26a>
 8008c72:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008c74:	2b80      	cmp	r3, #128	; 0x80
 8008c76:	d02d      	beq.n	8008cd4 <HAL_RCCEx_GetPeriphCLKFreq+0x1d0>
 8008c78:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008c7a:	2b80      	cmp	r3, #128	; 0x80
 8008c7c:	d877      	bhi.n	8008d6e <HAL_RCCEx_GetPeriphCLKFreq+0x26a>
 8008c7e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008c80:	2b00      	cmp	r3, #0
 8008c82:	d003      	beq.n	8008c8c <HAL_RCCEx_GetPeriphCLKFreq+0x188>
 8008c84:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008c86:	2b40      	cmp	r3, #64	; 0x40
 8008c88:	d012      	beq.n	8008cb0 <HAL_RCCEx_GetPeriphCLKFreq+0x1ac>
 8008c8a:	e070      	b.n	8008d6e <HAL_RCCEx_GetPeriphCLKFreq+0x26a>
      {
      case RCC_SAI23CLKSOURCE_PLL: /* PLL1 is the clock source for SAI2/3 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8008c8c:	4b39      	ldr	r3, [pc, #228]	; (8008d74 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8008c8e:	681b      	ldr	r3, [r3, #0]
 8008c90:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008c94:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8008c98:	d107      	bne.n	8008caa <HAL_RCCEx_GetPeriphCLKFreq+0x1a6>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8008c9a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8008c9e:	4618      	mov	r0, r3
 8008ca0:	f000 fec0 	bl	8009a24 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8008ca4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008ca6:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8008ca8:	e3f0      	b.n	800948c <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 8008caa:	2300      	movs	r3, #0
 8008cac:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008cae:	e3ed      	b.n	800948c <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI2/3 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8008cb0:	4b30      	ldr	r3, [pc, #192]	; (8008d74 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8008cb2:	681b      	ldr	r3, [r3, #0]
 8008cb4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008cb8:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8008cbc:	d107      	bne.n	8008cce <HAL_RCCEx_GetPeriphCLKFreq+0x1ca>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008cbe:	f107 0318 	add.w	r3, r7, #24
 8008cc2:	4618      	mov	r0, r3
 8008cc4:	f000 fc06 	bl	80094d4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8008cc8:	69bb      	ldr	r3, [r7, #24]
 8008cca:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8008ccc:	e3de      	b.n	800948c <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 8008cce:	2300      	movs	r3, #0
 8008cd0:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008cd2:	e3db      	b.n	800948c <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      case RCC_SAI23CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI2/3 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8008cd4:	4b27      	ldr	r3, [pc, #156]	; (8008d74 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8008cd6:	681b      	ldr	r3, [r3, #0]
 8008cd8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8008cdc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008ce0:	d107      	bne.n	8008cf2 <HAL_RCCEx_GetPeriphCLKFreq+0x1ee>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008ce2:	f107 030c 	add.w	r3, r7, #12
 8008ce6:	4618      	mov	r0, r3
 8008ce8:	f000 fd48 	bl	800977c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8008cec:	68fb      	ldr	r3, [r7, #12]
 8008cee:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8008cf0:	e3cc      	b.n	800948c <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 8008cf2:	2300      	movs	r3, #0
 8008cf4:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008cf6:	e3c9      	b.n	800948c <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      case RCC_SAI23CLKSOURCE_CLKP: /* CKPER is the clock source for SAI2/3 */
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8008cf8:	4b1e      	ldr	r3, [pc, #120]	; (8008d74 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8008cfa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008cfc:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8008d00:	637b      	str	r3, [r7, #52]	; 0x34

          if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8008d02:	4b1c      	ldr	r3, [pc, #112]	; (8008d74 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8008d04:	681b      	ldr	r3, [r3, #0]
 8008d06:	f003 0304 	and.w	r3, r3, #4
 8008d0a:	2b04      	cmp	r3, #4
 8008d0c:	d10c      	bne.n	8008d28 <HAL_RCCEx_GetPeriphCLKFreq+0x224>
 8008d0e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008d10:	2b00      	cmp	r3, #0
 8008d12:	d109      	bne.n	8008d28 <HAL_RCCEx_GetPeriphCLKFreq+0x224>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8008d14:	4b17      	ldr	r3, [pc, #92]	; (8008d74 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8008d16:	681b      	ldr	r3, [r3, #0]
 8008d18:	08db      	lsrs	r3, r3, #3
 8008d1a:	f003 0303 	and.w	r3, r3, #3
 8008d1e:	4a16      	ldr	r2, [pc, #88]	; (8008d78 <HAL_RCCEx_GetPeriphCLKFreq+0x274>)
 8008d20:	fa22 f303 	lsr.w	r3, r2, r3
 8008d24:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008d26:	e01e      	b.n	8008d66 <HAL_RCCEx_GetPeriphCLKFreq+0x262>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8008d28:	4b12      	ldr	r3, [pc, #72]	; (8008d74 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8008d2a:	681b      	ldr	r3, [r3, #0]
 8008d2c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008d30:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008d34:	d106      	bne.n	8008d44 <HAL_RCCEx_GetPeriphCLKFreq+0x240>
 8008d36:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008d38:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8008d3c:	d102      	bne.n	8008d44 <HAL_RCCEx_GetPeriphCLKFreq+0x240>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 8008d3e:	4b0f      	ldr	r3, [pc, #60]	; (8008d7c <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 8008d40:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008d42:	e010      	b.n	8008d66 <HAL_RCCEx_GetPeriphCLKFreq+0x262>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8008d44:	4b0b      	ldr	r3, [pc, #44]	; (8008d74 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8008d46:	681b      	ldr	r3, [r3, #0]
 8008d48:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008d4c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8008d50:	d106      	bne.n	8008d60 <HAL_RCCEx_GetPeriphCLKFreq+0x25c>
 8008d52:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008d54:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008d58:	d102      	bne.n	8008d60 <HAL_RCCEx_GetPeriphCLKFreq+0x25c>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 8008d5a:	4b09      	ldr	r3, [pc, #36]	; (8008d80 <HAL_RCCEx_GetPeriphCLKFreq+0x27c>)
 8008d5c:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008d5e:	e002      	b.n	8008d66 <HAL_RCCEx_GetPeriphCLKFreq+0x262>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 8008d60:	2300      	movs	r3, #0
 8008d62:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 8008d64:	e392      	b.n	800948c <HAL_RCCEx_GetPeriphCLKFreq+0x988>
 8008d66:	e391      	b.n	800948c <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      case (RCC_SAI23CLKSOURCE_PIN): /* External clock is the clock source for SAI2/3 */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 8008d68:	4b06      	ldr	r3, [pc, #24]	; (8008d84 <HAL_RCCEx_GetPeriphCLKFreq+0x280>)
 8008d6a:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008d6c:	e38e      	b.n	800948c <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      default :
        {
          frequency = 0;
 8008d6e:	2300      	movs	r3, #0
 8008d70:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008d72:	e38b      	b.n	800948c <HAL_RCCEx_GetPeriphCLKFreq+0x988>
 8008d74:	58024400 	.word	0x58024400
 8008d78:	03d09000 	.word	0x03d09000
 8008d7c:	003d0900 	.word	0x003d0900
 8008d80:	017d7840 	.word	0x017d7840
 8008d84:	00bb8000 	.word	0x00bb8000
      }
    }
#endif

#if defined(SAI4)
  else if (PeriphClk == RCC_PERIPHCLK_SAI4A)
 8008d88:	687b      	ldr	r3, [r7, #4]
 8008d8a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008d8e:	f040 809c 	bne.w	8008eca <HAL_RCCEx_GetPeriphCLKFreq+0x3c6>
    {

      saiclocksource= __HAL_RCC_GET_SAI4A_SOURCE();
 8008d92:	4b9d      	ldr	r3, [pc, #628]	; (8009008 <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 8008d94:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008d96:	f403 0360 	and.w	r3, r3, #14680064	; 0xe00000
 8008d9a:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
 8008d9c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008d9e:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8008da2:	d054      	beq.n	8008e4e <HAL_RCCEx_GetPeriphCLKFreq+0x34a>
 8008da4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008da6:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8008daa:	f200 808b 	bhi.w	8008ec4 <HAL_RCCEx_GetPeriphCLKFreq+0x3c0>
 8008dae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008db0:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8008db4:	f000 8083 	beq.w	8008ebe <HAL_RCCEx_GetPeriphCLKFreq+0x3ba>
 8008db8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008dba:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8008dbe:	f200 8081 	bhi.w	8008ec4 <HAL_RCCEx_GetPeriphCLKFreq+0x3c0>
 8008dc2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008dc4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8008dc8:	d02f      	beq.n	8008e2a <HAL_RCCEx_GetPeriphCLKFreq+0x326>
 8008dca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008dcc:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8008dd0:	d878      	bhi.n	8008ec4 <HAL_RCCEx_GetPeriphCLKFreq+0x3c0>
 8008dd2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008dd4:	2b00      	cmp	r3, #0
 8008dd6:	d004      	beq.n	8008de2 <HAL_RCCEx_GetPeriphCLKFreq+0x2de>
 8008dd8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008dda:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8008dde:	d012      	beq.n	8008e06 <HAL_RCCEx_GetPeriphCLKFreq+0x302>
 8008de0:	e070      	b.n	8008ec4 <HAL_RCCEx_GetPeriphCLKFreq+0x3c0>
      {
      case RCC_SAI4ACLKSOURCE_PLL: /* PLL1 is the clock source for SAI4A */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8008de2:	4b89      	ldr	r3, [pc, #548]	; (8009008 <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 8008de4:	681b      	ldr	r3, [r3, #0]
 8008de6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008dea:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8008dee:	d107      	bne.n	8008e00 <HAL_RCCEx_GetPeriphCLKFreq+0x2fc>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8008df0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8008df4:	4618      	mov	r0, r3
 8008df6:	f000 fe15 	bl	8009a24 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8008dfa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008dfc:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8008dfe:	e345      	b.n	800948c <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 8008e00:	2300      	movs	r3, #0
 8008e02:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008e04:	e342      	b.n	800948c <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      case RCC_SAI4ACLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4A */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8008e06:	4b80      	ldr	r3, [pc, #512]	; (8009008 <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 8008e08:	681b      	ldr	r3, [r3, #0]
 8008e0a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008e0e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8008e12:	d107      	bne.n	8008e24 <HAL_RCCEx_GetPeriphCLKFreq+0x320>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008e14:	f107 0318 	add.w	r3, r7, #24
 8008e18:	4618      	mov	r0, r3
 8008e1a:	f000 fb5b 	bl	80094d4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8008e1e:	69bb      	ldr	r3, [r7, #24]
 8008e20:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8008e22:	e333      	b.n	800948c <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 8008e24:	2300      	movs	r3, #0
 8008e26:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008e28:	e330      	b.n	800948c <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      case RCC_SAI4ACLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4A */
        {
          if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8008e2a:	4b77      	ldr	r3, [pc, #476]	; (8009008 <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 8008e2c:	681b      	ldr	r3, [r3, #0]
 8008e2e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8008e32:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008e36:	d107      	bne.n	8008e48 <HAL_RCCEx_GetPeriphCLKFreq+0x344>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008e38:	f107 030c 	add.w	r3, r7, #12
 8008e3c:	4618      	mov	r0, r3
 8008e3e:	f000 fc9d 	bl	800977c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8008e42:	68fb      	ldr	r3, [r7, #12]
 8008e44:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8008e46:	e321      	b.n	800948c <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 8008e48:	2300      	movs	r3, #0
 8008e4a:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008e4c:	e31e      	b.n	800948c <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      case RCC_SAI4ACLKSOURCE_CLKP: /* CKPER is the clock source for SAI4A*/
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8008e4e:	4b6e      	ldr	r3, [pc, #440]	; (8009008 <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 8008e50:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008e52:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8008e56:	637b      	str	r3, [r7, #52]	; 0x34

          if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8008e58:	4b6b      	ldr	r3, [pc, #428]	; (8009008 <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 8008e5a:	681b      	ldr	r3, [r3, #0]
 8008e5c:	f003 0304 	and.w	r3, r3, #4
 8008e60:	2b04      	cmp	r3, #4
 8008e62:	d10c      	bne.n	8008e7e <HAL_RCCEx_GetPeriphCLKFreq+0x37a>
 8008e64:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008e66:	2b00      	cmp	r3, #0
 8008e68:	d109      	bne.n	8008e7e <HAL_RCCEx_GetPeriphCLKFreq+0x37a>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8008e6a:	4b67      	ldr	r3, [pc, #412]	; (8009008 <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 8008e6c:	681b      	ldr	r3, [r3, #0]
 8008e6e:	08db      	lsrs	r3, r3, #3
 8008e70:	f003 0303 	and.w	r3, r3, #3
 8008e74:	4a65      	ldr	r2, [pc, #404]	; (800900c <HAL_RCCEx_GetPeriphCLKFreq+0x508>)
 8008e76:	fa22 f303 	lsr.w	r3, r2, r3
 8008e7a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008e7c:	e01e      	b.n	8008ebc <HAL_RCCEx_GetPeriphCLKFreq+0x3b8>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8008e7e:	4b62      	ldr	r3, [pc, #392]	; (8009008 <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 8008e80:	681b      	ldr	r3, [r3, #0]
 8008e82:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008e86:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008e8a:	d106      	bne.n	8008e9a <HAL_RCCEx_GetPeriphCLKFreq+0x396>
 8008e8c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008e8e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8008e92:	d102      	bne.n	8008e9a <HAL_RCCEx_GetPeriphCLKFreq+0x396>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 8008e94:	4b5e      	ldr	r3, [pc, #376]	; (8009010 <HAL_RCCEx_GetPeriphCLKFreq+0x50c>)
 8008e96:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008e98:	e010      	b.n	8008ebc <HAL_RCCEx_GetPeriphCLKFreq+0x3b8>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8008e9a:	4b5b      	ldr	r3, [pc, #364]	; (8009008 <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 8008e9c:	681b      	ldr	r3, [r3, #0]
 8008e9e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008ea2:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8008ea6:	d106      	bne.n	8008eb6 <HAL_RCCEx_GetPeriphCLKFreq+0x3b2>
 8008ea8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008eaa:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008eae:	d102      	bne.n	8008eb6 <HAL_RCCEx_GetPeriphCLKFreq+0x3b2>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 8008eb0:	4b58      	ldr	r3, [pc, #352]	; (8009014 <HAL_RCCEx_GetPeriphCLKFreq+0x510>)
 8008eb2:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008eb4:	e002      	b.n	8008ebc <HAL_RCCEx_GetPeriphCLKFreq+0x3b8>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 8008eb6:	2300      	movs	r3, #0
 8008eb8:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 8008eba:	e2e7      	b.n	800948c <HAL_RCCEx_GetPeriphCLKFreq+0x988>
 8008ebc:	e2e6      	b.n	800948c <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      case RCC_SAI4ACLKSOURCE_PIN: /* External clock is the clock source for SAI4A */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 8008ebe:	4b56      	ldr	r3, [pc, #344]	; (8009018 <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 8008ec0:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008ec2:	e2e3      	b.n	800948c <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      default :
        {
          frequency = 0;
 8008ec4:	2300      	movs	r3, #0
 8008ec6:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008ec8:	e2e0      	b.n	800948c <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      }
    }

  else if (PeriphClk == RCC_PERIPHCLK_SAI4B)
 8008eca:	687b      	ldr	r3, [r7, #4]
 8008ecc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008ed0:	f040 80a7 	bne.w	8009022 <HAL_RCCEx_GetPeriphCLKFreq+0x51e>
    {

      saiclocksource= __HAL_RCC_GET_SAI4B_SOURCE();
 8008ed4:	4b4c      	ldr	r3, [pc, #304]	; (8009008 <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 8008ed6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008ed8:	f003 63e0 	and.w	r3, r3, #117440512	; 0x7000000
 8008edc:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
 8008ede:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008ee0:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8008ee4:	d055      	beq.n	8008f92 <HAL_RCCEx_GetPeriphCLKFreq+0x48e>
 8008ee6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008ee8:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8008eec:	f200 8096 	bhi.w	800901c <HAL_RCCEx_GetPeriphCLKFreq+0x518>
 8008ef0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008ef2:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8008ef6:	f000 8084 	beq.w	8009002 <HAL_RCCEx_GetPeriphCLKFreq+0x4fe>
 8008efa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008efc:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8008f00:	f200 808c 	bhi.w	800901c <HAL_RCCEx_GetPeriphCLKFreq+0x518>
 8008f04:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008f06:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8008f0a:	d030      	beq.n	8008f6e <HAL_RCCEx_GetPeriphCLKFreq+0x46a>
 8008f0c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008f0e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8008f12:	f200 8083 	bhi.w	800901c <HAL_RCCEx_GetPeriphCLKFreq+0x518>
 8008f16:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008f18:	2b00      	cmp	r3, #0
 8008f1a:	d004      	beq.n	8008f26 <HAL_RCCEx_GetPeriphCLKFreq+0x422>
 8008f1c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008f1e:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8008f22:	d012      	beq.n	8008f4a <HAL_RCCEx_GetPeriphCLKFreq+0x446>
 8008f24:	e07a      	b.n	800901c <HAL_RCCEx_GetPeriphCLKFreq+0x518>
      {
      case RCC_SAI4BCLKSOURCE_PLL: /* PLL1 is the clock source for SAI4B */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8008f26:	4b38      	ldr	r3, [pc, #224]	; (8009008 <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 8008f28:	681b      	ldr	r3, [r3, #0]
 8008f2a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008f2e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8008f32:	d107      	bne.n	8008f44 <HAL_RCCEx_GetPeriphCLKFreq+0x440>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8008f34:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8008f38:	4618      	mov	r0, r3
 8008f3a:	f000 fd73 	bl	8009a24 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8008f3e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008f40:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8008f42:	e2a3      	b.n	800948c <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 8008f44:	2300      	movs	r3, #0
 8008f46:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008f48:	e2a0      	b.n	800948c <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      case RCC_SAI4BCLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4B */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8008f4a:	4b2f      	ldr	r3, [pc, #188]	; (8009008 <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 8008f4c:	681b      	ldr	r3, [r3, #0]
 8008f4e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008f52:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8008f56:	d107      	bne.n	8008f68 <HAL_RCCEx_GetPeriphCLKFreq+0x464>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008f58:	f107 0318 	add.w	r3, r7, #24
 8008f5c:	4618      	mov	r0, r3
 8008f5e:	f000 fab9 	bl	80094d4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8008f62:	69bb      	ldr	r3, [r7, #24]
 8008f64:	63fb      	str	r3, [r7, #60]	; 0x3c
          }
         else
         {
           frequency = 0;
         }
          break;
 8008f66:	e291      	b.n	800948c <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 8008f68:	2300      	movs	r3, #0
 8008f6a:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008f6c:	e28e      	b.n	800948c <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      case RCC_SAI4BCLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4B */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8008f6e:	4b26      	ldr	r3, [pc, #152]	; (8009008 <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 8008f70:	681b      	ldr	r3, [r3, #0]
 8008f72:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8008f76:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008f7a:	d107      	bne.n	8008f8c <HAL_RCCEx_GetPeriphCLKFreq+0x488>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008f7c:	f107 030c 	add.w	r3, r7, #12
 8008f80:	4618      	mov	r0, r3
 8008f82:	f000 fbfb 	bl	800977c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8008f86:	68fb      	ldr	r3, [r7, #12]
 8008f88:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8008f8a:	e27f      	b.n	800948c <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 8008f8c:	2300      	movs	r3, #0
 8008f8e:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008f90:	e27c      	b.n	800948c <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      case RCC_SAI4BCLKSOURCE_CLKP: /* CKPER is the clock source for SAI4B*/
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8008f92:	4b1d      	ldr	r3, [pc, #116]	; (8009008 <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 8008f94:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008f96:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8008f9a:	637b      	str	r3, [r7, #52]	; 0x34

         if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8008f9c:	4b1a      	ldr	r3, [pc, #104]	; (8009008 <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 8008f9e:	681b      	ldr	r3, [r3, #0]
 8008fa0:	f003 0304 	and.w	r3, r3, #4
 8008fa4:	2b04      	cmp	r3, #4
 8008fa6:	d10c      	bne.n	8008fc2 <HAL_RCCEx_GetPeriphCLKFreq+0x4be>
 8008fa8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008faa:	2b00      	cmp	r3, #0
 8008fac:	d109      	bne.n	8008fc2 <HAL_RCCEx_GetPeriphCLKFreq+0x4be>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8008fae:	4b16      	ldr	r3, [pc, #88]	; (8009008 <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 8008fb0:	681b      	ldr	r3, [r3, #0]
 8008fb2:	08db      	lsrs	r3, r3, #3
 8008fb4:	f003 0303 	and.w	r3, r3, #3
 8008fb8:	4a14      	ldr	r2, [pc, #80]	; (800900c <HAL_RCCEx_GetPeriphCLKFreq+0x508>)
 8008fba:	fa22 f303 	lsr.w	r3, r2, r3
 8008fbe:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008fc0:	e01e      	b.n	8009000 <HAL_RCCEx_GetPeriphCLKFreq+0x4fc>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8008fc2:	4b11      	ldr	r3, [pc, #68]	; (8009008 <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 8008fc4:	681b      	ldr	r3, [r3, #0]
 8008fc6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008fca:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008fce:	d106      	bne.n	8008fde <HAL_RCCEx_GetPeriphCLKFreq+0x4da>
 8008fd0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008fd2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8008fd6:	d102      	bne.n	8008fde <HAL_RCCEx_GetPeriphCLKFreq+0x4da>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 8008fd8:	4b0d      	ldr	r3, [pc, #52]	; (8009010 <HAL_RCCEx_GetPeriphCLKFreq+0x50c>)
 8008fda:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008fdc:	e010      	b.n	8009000 <HAL_RCCEx_GetPeriphCLKFreq+0x4fc>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8008fde:	4b0a      	ldr	r3, [pc, #40]	; (8009008 <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 8008fe0:	681b      	ldr	r3, [r3, #0]
 8008fe2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008fe6:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8008fea:	d106      	bne.n	8008ffa <HAL_RCCEx_GetPeriphCLKFreq+0x4f6>
 8008fec:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008fee:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008ff2:	d102      	bne.n	8008ffa <HAL_RCCEx_GetPeriphCLKFreq+0x4f6>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 8008ff4:	4b07      	ldr	r3, [pc, #28]	; (8009014 <HAL_RCCEx_GetPeriphCLKFreq+0x510>)
 8008ff6:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008ff8:	e002      	b.n	8009000 <HAL_RCCEx_GetPeriphCLKFreq+0x4fc>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 8008ffa:	2300      	movs	r3, #0
 8008ffc:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 8008ffe:	e245      	b.n	800948c <HAL_RCCEx_GetPeriphCLKFreq+0x988>
 8009000:	e244      	b.n	800948c <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      case RCC_SAI4BCLKSOURCE_PIN: /* External clock is the clock source for SAI4B */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 8009002:	4b05      	ldr	r3, [pc, #20]	; (8009018 <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 8009004:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8009006:	e241      	b.n	800948c <HAL_RCCEx_GetPeriphCLKFreq+0x988>
 8009008:	58024400 	.word	0x58024400
 800900c:	03d09000 	.word	0x03d09000
 8009010:	003d0900 	.word	0x003d0900
 8009014:	017d7840 	.word	0x017d7840
 8009018:	00bb8000 	.word	0x00bb8000
        }

      default :
        {
          frequency = 0;
 800901c:	2300      	movs	r3, #0
 800901e:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8009020:	e234      	b.n	800948c <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      }
    }
#endif /*SAI4*/
  else if (PeriphClk == RCC_PERIPHCLK_SPI123)
 8009022:	687b      	ldr	r3, [r7, #4]
 8009024:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009028:	f040 809c 	bne.w	8009164 <HAL_RCCEx_GetPeriphCLKFreq+0x660>
    {
      /* Get SPI1/2/3 clock source */
      srcclk= __HAL_RCC_GET_SPI123_SOURCE();
 800902c:	4b9b      	ldr	r3, [pc, #620]	; (800929c <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 800902e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009030:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
 8009034:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 8009036:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009038:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800903c:	d054      	beq.n	80090e8 <HAL_RCCEx_GetPeriphCLKFreq+0x5e4>
 800903e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009040:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8009044:	f200 808b 	bhi.w	800915e <HAL_RCCEx_GetPeriphCLKFreq+0x65a>
 8009048:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800904a:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800904e:	f000 8083 	beq.w	8009158 <HAL_RCCEx_GetPeriphCLKFreq+0x654>
 8009052:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009054:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8009058:	f200 8081 	bhi.w	800915e <HAL_RCCEx_GetPeriphCLKFreq+0x65a>
 800905c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800905e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009062:	d02f      	beq.n	80090c4 <HAL_RCCEx_GetPeriphCLKFreq+0x5c0>
 8009064:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009066:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800906a:	d878      	bhi.n	800915e <HAL_RCCEx_GetPeriphCLKFreq+0x65a>
 800906c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800906e:	2b00      	cmp	r3, #0
 8009070:	d004      	beq.n	800907c <HAL_RCCEx_GetPeriphCLKFreq+0x578>
 8009072:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009074:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009078:	d012      	beq.n	80090a0 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>
 800907a:	e070      	b.n	800915e <HAL_RCCEx_GetPeriphCLKFreq+0x65a>
      {
      case RCC_SPI123CLKSOURCE_PLL: /* PLL1 is the clock source for SPI123 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800907c:	4b87      	ldr	r3, [pc, #540]	; (800929c <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 800907e:	681b      	ldr	r3, [r3, #0]
 8009080:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009084:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8009088:	d107      	bne.n	800909a <HAL_RCCEx_GetPeriphCLKFreq+0x596>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800908a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800908e:	4618      	mov	r0, r3
 8009090:	f000 fcc8 	bl	8009a24 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8009094:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009096:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8009098:	e1f8      	b.n	800948c <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 800909a:	2300      	movs	r3, #0
 800909c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800909e:	e1f5      	b.n	800948c <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI123 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80090a0:	4b7e      	ldr	r3, [pc, #504]	; (800929c <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 80090a2:	681b      	ldr	r3, [r3, #0]
 80090a4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80090a8:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80090ac:	d107      	bne.n	80090be <HAL_RCCEx_GetPeriphCLKFreq+0x5ba>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80090ae:	f107 0318 	add.w	r3, r7, #24
 80090b2:	4618      	mov	r0, r3
 80090b4:	f000 fa0e 	bl	80094d4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 80090b8:	69bb      	ldr	r3, [r7, #24]
 80090ba:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 80090bc:	e1e6      	b.n	800948c <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 80090be:	2300      	movs	r3, #0
 80090c0:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80090c2:	e1e3      	b.n	800948c <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      case RCC_SPI123CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI123 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 80090c4:	4b75      	ldr	r3, [pc, #468]	; (800929c <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 80090c6:	681b      	ldr	r3, [r3, #0]
 80090c8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80090cc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80090d0:	d107      	bne.n	80090e2 <HAL_RCCEx_GetPeriphCLKFreq+0x5de>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80090d2:	f107 030c 	add.w	r3, r7, #12
 80090d6:	4618      	mov	r0, r3
 80090d8:	f000 fb50 	bl	800977c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 80090dc:	68fb      	ldr	r3, [r7, #12]
 80090de:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 80090e0:	e1d4      	b.n	800948c <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 80090e2:	2300      	movs	r3, #0
 80090e4:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80090e6:	e1d1      	b.n	800948c <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      case RCC_SPI123CLKSOURCE_CLKP: /* CKPER is the clock source for SPI123 */
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 80090e8:	4b6c      	ldr	r3, [pc, #432]	; (800929c <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 80090ea:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80090ec:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80090f0:	637b      	str	r3, [r7, #52]	; 0x34

         if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 80090f2:	4b6a      	ldr	r3, [pc, #424]	; (800929c <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 80090f4:	681b      	ldr	r3, [r3, #0]
 80090f6:	f003 0304 	and.w	r3, r3, #4
 80090fa:	2b04      	cmp	r3, #4
 80090fc:	d10c      	bne.n	8009118 <HAL_RCCEx_GetPeriphCLKFreq+0x614>
 80090fe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009100:	2b00      	cmp	r3, #0
 8009102:	d109      	bne.n	8009118 <HAL_RCCEx_GetPeriphCLKFreq+0x614>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8009104:	4b65      	ldr	r3, [pc, #404]	; (800929c <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 8009106:	681b      	ldr	r3, [r3, #0]
 8009108:	08db      	lsrs	r3, r3, #3
 800910a:	f003 0303 	and.w	r3, r3, #3
 800910e:	4a64      	ldr	r2, [pc, #400]	; (80092a0 <HAL_RCCEx_GetPeriphCLKFreq+0x79c>)
 8009110:	fa22 f303 	lsr.w	r3, r2, r3
 8009114:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009116:	e01e      	b.n	8009156 <HAL_RCCEx_GetPeriphCLKFreq+0x652>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8009118:	4b60      	ldr	r3, [pc, #384]	; (800929c <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 800911a:	681b      	ldr	r3, [r3, #0]
 800911c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009120:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009124:	d106      	bne.n	8009134 <HAL_RCCEx_GetPeriphCLKFreq+0x630>
 8009126:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009128:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800912c:	d102      	bne.n	8009134 <HAL_RCCEx_GetPeriphCLKFreq+0x630>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 800912e:	4b5d      	ldr	r3, [pc, #372]	; (80092a4 <HAL_RCCEx_GetPeriphCLKFreq+0x7a0>)
 8009130:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009132:	e010      	b.n	8009156 <HAL_RCCEx_GetPeriphCLKFreq+0x652>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8009134:	4b59      	ldr	r3, [pc, #356]	; (800929c <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 8009136:	681b      	ldr	r3, [r3, #0]
 8009138:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800913c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8009140:	d106      	bne.n	8009150 <HAL_RCCEx_GetPeriphCLKFreq+0x64c>
 8009142:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009144:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009148:	d102      	bne.n	8009150 <HAL_RCCEx_GetPeriphCLKFreq+0x64c>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 800914a:	4b57      	ldr	r3, [pc, #348]	; (80092a8 <HAL_RCCEx_GetPeriphCLKFreq+0x7a4>)
 800914c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800914e:	e002      	b.n	8009156 <HAL_RCCEx_GetPeriphCLKFreq+0x652>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 8009150:	2300      	movs	r3, #0
 8009152:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 8009154:	e19a      	b.n	800948c <HAL_RCCEx_GetPeriphCLKFreq+0x988>
 8009156:	e199      	b.n	800948c <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      case (RCC_SPI123CLKSOURCE_PIN): /* External clock is the clock source for I2S */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 8009158:	4b54      	ldr	r3, [pc, #336]	; (80092ac <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800915a:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800915c:	e196      	b.n	800948c <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      default :
        {
          frequency = 0;
 800915e:	2300      	movs	r3, #0
 8009160:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8009162:	e193      	b.n	800948c <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
 8009164:	687b      	ldr	r3, [r7, #4]
 8009166:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 800916a:	d173      	bne.n	8009254 <HAL_RCCEx_GetPeriphCLKFreq+0x750>
    {
      /* Get ADC clock source */
      srcclk= __HAL_RCC_GET_ADC_SOURCE();
 800916c:	4b4b      	ldr	r3, [pc, #300]	; (800929c <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 800916e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009170:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8009174:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 8009176:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009178:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800917c:	d02f      	beq.n	80091de <HAL_RCCEx_GetPeriphCLKFreq+0x6da>
 800917e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009180:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8009184:	d863      	bhi.n	800924e <HAL_RCCEx_GetPeriphCLKFreq+0x74a>
 8009186:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009188:	2b00      	cmp	r3, #0
 800918a:	d004      	beq.n	8009196 <HAL_RCCEx_GetPeriphCLKFreq+0x692>
 800918c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800918e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009192:	d012      	beq.n	80091ba <HAL_RCCEx_GetPeriphCLKFreq+0x6b6>
 8009194:	e05b      	b.n	800924e <HAL_RCCEx_GetPeriphCLKFreq+0x74a>
      {
      case RCC_ADCCLKSOURCE_PLL2:
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8009196:	4b41      	ldr	r3, [pc, #260]	; (800929c <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 8009198:	681b      	ldr	r3, [r3, #0]
 800919a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800919e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80091a2:	d107      	bne.n	80091b4 <HAL_RCCEx_GetPeriphCLKFreq+0x6b0>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80091a4:	f107 0318 	add.w	r3, r7, #24
 80091a8:	4618      	mov	r0, r3
 80091aa:	f000 f993 	bl	80094d4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 80091ae:	69bb      	ldr	r3, [r7, #24]
 80091b0:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 80091b2:	e16b      	b.n	800948c <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 80091b4:	2300      	movs	r3, #0
 80091b6:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80091b8:	e168      	b.n	800948c <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      case RCC_ADCCLKSOURCE_PLL3:
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 80091ba:	4b38      	ldr	r3, [pc, #224]	; (800929c <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 80091bc:	681b      	ldr	r3, [r3, #0]
 80091be:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80091c2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80091c6:	d107      	bne.n	80091d8 <HAL_RCCEx_GetPeriphCLKFreq+0x6d4>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80091c8:	f107 030c 	add.w	r3, r7, #12
 80091cc:	4618      	mov	r0, r3
 80091ce:	f000 fad5 	bl	800977c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 80091d2:	697b      	ldr	r3, [r7, #20]
 80091d4:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 80091d6:	e159      	b.n	800948c <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 80091d8:	2300      	movs	r3, #0
 80091da:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80091dc:	e156      	b.n	800948c <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      case RCC_ADCCLKSOURCE_CLKP:
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 80091de:	4b2f      	ldr	r3, [pc, #188]	; (800929c <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 80091e0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80091e2:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80091e6:	637b      	str	r3, [r7, #52]	; 0x34

         if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 80091e8:	4b2c      	ldr	r3, [pc, #176]	; (800929c <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 80091ea:	681b      	ldr	r3, [r3, #0]
 80091ec:	f003 0304 	and.w	r3, r3, #4
 80091f0:	2b04      	cmp	r3, #4
 80091f2:	d10c      	bne.n	800920e <HAL_RCCEx_GetPeriphCLKFreq+0x70a>
 80091f4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80091f6:	2b00      	cmp	r3, #0
 80091f8:	d109      	bne.n	800920e <HAL_RCCEx_GetPeriphCLKFreq+0x70a>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80091fa:	4b28      	ldr	r3, [pc, #160]	; (800929c <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 80091fc:	681b      	ldr	r3, [r3, #0]
 80091fe:	08db      	lsrs	r3, r3, #3
 8009200:	f003 0303 	and.w	r3, r3, #3
 8009204:	4a26      	ldr	r2, [pc, #152]	; (80092a0 <HAL_RCCEx_GetPeriphCLKFreq+0x79c>)
 8009206:	fa22 f303 	lsr.w	r3, r2, r3
 800920a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800920c:	e01e      	b.n	800924c <HAL_RCCEx_GetPeriphCLKFreq+0x748>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800920e:	4b23      	ldr	r3, [pc, #140]	; (800929c <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 8009210:	681b      	ldr	r3, [r3, #0]
 8009212:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009216:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800921a:	d106      	bne.n	800922a <HAL_RCCEx_GetPeriphCLKFreq+0x726>
 800921c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800921e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8009222:	d102      	bne.n	800922a <HAL_RCCEx_GetPeriphCLKFreq+0x726>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 8009224:	4b1f      	ldr	r3, [pc, #124]	; (80092a4 <HAL_RCCEx_GetPeriphCLKFreq+0x7a0>)
 8009226:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009228:	e010      	b.n	800924c <HAL_RCCEx_GetPeriphCLKFreq+0x748>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800922a:	4b1c      	ldr	r3, [pc, #112]	; (800929c <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 800922c:	681b      	ldr	r3, [r3, #0]
 800922e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009232:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8009236:	d106      	bne.n	8009246 <HAL_RCCEx_GetPeriphCLKFreq+0x742>
 8009238:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800923a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800923e:	d102      	bne.n	8009246 <HAL_RCCEx_GetPeriphCLKFreq+0x742>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 8009240:	4b19      	ldr	r3, [pc, #100]	; (80092a8 <HAL_RCCEx_GetPeriphCLKFreq+0x7a4>)
 8009242:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009244:	e002      	b.n	800924c <HAL_RCCEx_GetPeriphCLKFreq+0x748>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 8009246:	2300      	movs	r3, #0
 8009248:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 800924a:	e11f      	b.n	800948c <HAL_RCCEx_GetPeriphCLKFreq+0x988>
 800924c:	e11e      	b.n	800948c <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      default :
        {
          frequency = 0;
 800924e:	2300      	movs	r3, #0
 8009250:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8009252:	e11b      	b.n	800948c <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 8009254:	687b      	ldr	r3, [r7, #4]
 8009256:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800925a:	d13e      	bne.n	80092da <HAL_RCCEx_GetPeriphCLKFreq+0x7d6>
    {
      /* Get SDMMC clock source */
      srcclk= __HAL_RCC_GET_SDMMC_SOURCE();
 800925c:	4b0f      	ldr	r3, [pc, #60]	; (800929c <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 800925e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009260:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8009264:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 8009266:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009268:	2b00      	cmp	r3, #0
 800926a:	d004      	beq.n	8009276 <HAL_RCCEx_GetPeriphCLKFreq+0x772>
 800926c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800926e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009272:	d01d      	beq.n	80092b0 <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>
 8009274:	e02e      	b.n	80092d4 <HAL_RCCEx_GetPeriphCLKFreq+0x7d0>
      {
      case RCC_SDMMCCLKSOURCE_PLL: /* PLL1 is the clock source for SDMMC */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8009276:	4b09      	ldr	r3, [pc, #36]	; (800929c <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 8009278:	681b      	ldr	r3, [r3, #0]
 800927a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800927e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8009282:	d107      	bne.n	8009294 <HAL_RCCEx_GetPeriphCLKFreq+0x790>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8009284:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8009288:	4618      	mov	r0, r3
 800928a:	f000 fbcb 	bl	8009a24 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800928e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009290:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 8009292:	e0fb      	b.n	800948c <HAL_RCCEx_GetPeriphCLKFreq+0x988>
          frequency = 0;
 8009294:	2300      	movs	r3, #0
 8009296:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8009298:	e0f8      	b.n	800948c <HAL_RCCEx_GetPeriphCLKFreq+0x988>
 800929a:	bf00      	nop
 800929c:	58024400 	.word	0x58024400
 80092a0:	03d09000 	.word	0x03d09000
 80092a4:	003d0900 	.word	0x003d0900
 80092a8:	017d7840 	.word	0x017d7840
 80092ac:	00bb8000 	.word	0x00bb8000
        }
      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is the clock source for SDMMC */
        {
          if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80092b0:	4b79      	ldr	r3, [pc, #484]	; (8009498 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 80092b2:	681b      	ldr	r3, [r3, #0]
 80092b4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80092b8:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80092bc:	d107      	bne.n	80092ce <HAL_RCCEx_GetPeriphCLKFreq+0x7ca>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80092be:	f107 0318 	add.w	r3, r7, #24
 80092c2:	4618      	mov	r0, r3
 80092c4:	f000 f906 	bl	80094d4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 80092c8:	6a3b      	ldr	r3, [r7, #32]
 80092ca:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 80092cc:	e0de      	b.n	800948c <HAL_RCCEx_GetPeriphCLKFreq+0x988>
          frequency = 0;
 80092ce:	2300      	movs	r3, #0
 80092d0:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80092d2:	e0db      	b.n	800948c <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      default :
        {
          frequency = 0;
 80092d4:	2300      	movs	r3, #0
 80092d6:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80092d8:	e0d8      	b.n	800948c <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_SPI6)
 80092da:	687b      	ldr	r3, [r7, #4]
 80092dc:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80092e0:	f040 8085 	bne.w	80093ee <HAL_RCCEx_GetPeriphCLKFreq+0x8ea>
    {
      /* Get SPI6 clock source */
      srcclk= __HAL_RCC_GET_SPI6_SOURCE();
 80092e4:	4b6c      	ldr	r3, [pc, #432]	; (8009498 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 80092e6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80092e8:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
 80092ec:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 80092ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80092f0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80092f4:	d06b      	beq.n	80093ce <HAL_RCCEx_GetPeriphCLKFreq+0x8ca>
 80092f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80092f8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80092fc:	d874      	bhi.n	80093e8 <HAL_RCCEx_GetPeriphCLKFreq+0x8e4>
 80092fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009300:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009304:	d056      	beq.n	80093b4 <HAL_RCCEx_GetPeriphCLKFreq+0x8b0>
 8009306:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009308:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800930c:	d86c      	bhi.n	80093e8 <HAL_RCCEx_GetPeriphCLKFreq+0x8e4>
 800930e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009310:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8009314:	d03b      	beq.n	800938e <HAL_RCCEx_GetPeriphCLKFreq+0x88a>
 8009316:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009318:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800931c:	d864      	bhi.n	80093e8 <HAL_RCCEx_GetPeriphCLKFreq+0x8e4>
 800931e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009320:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009324:	d021      	beq.n	800936a <HAL_RCCEx_GetPeriphCLKFreq+0x866>
 8009326:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009328:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800932c:	d85c      	bhi.n	80093e8 <HAL_RCCEx_GetPeriphCLKFreq+0x8e4>
 800932e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009330:	2b00      	cmp	r3, #0
 8009332:	d004      	beq.n	800933e <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
 8009334:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009336:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800933a:	d004      	beq.n	8009346 <HAL_RCCEx_GetPeriphCLKFreq+0x842>
 800933c:	e054      	b.n	80093e8 <HAL_RCCEx_GetPeriphCLKFreq+0x8e4>
      {
      case RCC_SPI6CLKSOURCE_D3PCLK1: /* D3PCLK1 (PCLK4) is the clock source for SPI6 */
        {
          frequency = HAL_RCCEx_GetD3PCLK1Freq();
 800933e:	f000 f8b3 	bl	80094a8 <HAL_RCCEx_GetD3PCLK1Freq>
 8009342:	63f8      	str	r0, [r7, #60]	; 0x3c
          break;
 8009344:	e0a2      	b.n	800948c <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8009346:	4b54      	ldr	r3, [pc, #336]	; (8009498 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8009348:	681b      	ldr	r3, [r3, #0]
 800934a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800934e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8009352:	d107      	bne.n	8009364 <HAL_RCCEx_GetPeriphCLKFreq+0x860>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009354:	f107 0318 	add.w	r3, r7, #24
 8009358:	4618      	mov	r0, r3
 800935a:	f000 f8bb 	bl	80094d4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800935e:	69fb      	ldr	r3, [r7, #28]
 8009360:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 8009362:	e093      	b.n	800948c <HAL_RCCEx_GetPeriphCLKFreq+0x988>
          frequency = 0;
 8009364:	2300      	movs	r3, #0
 8009366:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8009368:	e090      	b.n	800948c <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      case RCC_SPI6CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800936a:	4b4b      	ldr	r3, [pc, #300]	; (8009498 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800936c:	681b      	ldr	r3, [r3, #0]
 800936e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8009372:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009376:	d107      	bne.n	8009388 <HAL_RCCEx_GetPeriphCLKFreq+0x884>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8009378:	f107 030c 	add.w	r3, r7, #12
 800937c:	4618      	mov	r0, r3
 800937e:	f000 f9fd 	bl	800977c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8009382:	693b      	ldr	r3, [r7, #16]
 8009384:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 8009386:	e081      	b.n	800948c <HAL_RCCEx_GetPeriphCLKFreq+0x988>
          frequency = 0;
 8009388:	2300      	movs	r3, #0
 800938a:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800938c:	e07e      	b.n	800948c <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      case RCC_SPI6CLKSOURCE_HSI: /* HSI is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800938e:	4b42      	ldr	r3, [pc, #264]	; (8009498 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8009390:	681b      	ldr	r3, [r3, #0]
 8009392:	f003 0304 	and.w	r3, r3, #4
 8009396:	2b04      	cmp	r3, #4
 8009398:	d109      	bne.n	80093ae <HAL_RCCEx_GetPeriphCLKFreq+0x8aa>
         {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800939a:	4b3f      	ldr	r3, [pc, #252]	; (8009498 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800939c:	681b      	ldr	r3, [r3, #0]
 800939e:	08db      	lsrs	r3, r3, #3
 80093a0:	f003 0303 	and.w	r3, r3, #3
 80093a4:	4a3d      	ldr	r2, [pc, #244]	; (800949c <HAL_RCCEx_GetPeriphCLKFreq+0x998>)
 80093a6:	fa22 f303 	lsr.w	r3, r2, r3
 80093aa:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 80093ac:	e06e      	b.n	800948c <HAL_RCCEx_GetPeriphCLKFreq+0x988>
          frequency = 0;
 80093ae:	2300      	movs	r3, #0
 80093b0:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80093b2:	e06b      	b.n	800948c <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      case RCC_SPI6CLKSOURCE_CSI: /* CSI is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 80093b4:	4b38      	ldr	r3, [pc, #224]	; (8009498 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 80093b6:	681b      	ldr	r3, [r3, #0]
 80093b8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80093bc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80093c0:	d102      	bne.n	80093c8 <HAL_RCCEx_GetPeriphCLKFreq+0x8c4>
         {
          frequency = CSI_VALUE;
 80093c2:	4b37      	ldr	r3, [pc, #220]	; (80094a0 <HAL_RCCEx_GetPeriphCLKFreq+0x99c>)
 80093c4:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 80093c6:	e061      	b.n	800948c <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 80093c8:	2300      	movs	r3, #0
 80093ca:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80093cc:	e05e      	b.n	800948c <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      case RCC_SPI6CLKSOURCE_HSE: /* HSE is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 80093ce:	4b32      	ldr	r3, [pc, #200]	; (8009498 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 80093d0:	681b      	ldr	r3, [r3, #0]
 80093d2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80093d6:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80093da:	d102      	bne.n	80093e2 <HAL_RCCEx_GetPeriphCLKFreq+0x8de>
         {
          frequency = HSE_VALUE;
 80093dc:	4b31      	ldr	r3, [pc, #196]	; (80094a4 <HAL_RCCEx_GetPeriphCLKFreq+0x9a0>)
 80093de:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 80093e0:	e054      	b.n	800948c <HAL_RCCEx_GetPeriphCLKFreq+0x988>
          frequency = 0;
 80093e2:	2300      	movs	r3, #0
 80093e4:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80093e6:	e051      	b.n	800948c <HAL_RCCEx_GetPeriphCLKFreq+0x988>
          break;
        }
#endif /* RCC_SPI6CLKSOURCE_PIN */
      default :
        {
          frequency = 0;
 80093e8:	2300      	movs	r3, #0
 80093ea:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80093ec:	e04e      	b.n	800948c <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN)
 80093ee:	687b      	ldr	r3, [r7, #4]
 80093f0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80093f4:	d148      	bne.n	8009488 <HAL_RCCEx_GetPeriphCLKFreq+0x984>
    {
      /* Get FDCAN clock source */
      srcclk= __HAL_RCC_GET_FDCAN_SOURCE();
 80093f6:	4b28      	ldr	r3, [pc, #160]	; (8009498 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 80093f8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80093fa:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80093fe:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 8009400:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009402:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009406:	d02a      	beq.n	800945e <HAL_RCCEx_GetPeriphCLKFreq+0x95a>
 8009408:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800940a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800940e:	d838      	bhi.n	8009482 <HAL_RCCEx_GetPeriphCLKFreq+0x97e>
 8009410:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009412:	2b00      	cmp	r3, #0
 8009414:	d004      	beq.n	8009420 <HAL_RCCEx_GetPeriphCLKFreq+0x91c>
 8009416:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009418:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800941c:	d00d      	beq.n	800943a <HAL_RCCEx_GetPeriphCLKFreq+0x936>
 800941e:	e030      	b.n	8009482 <HAL_RCCEx_GetPeriphCLKFreq+0x97e>
      {
      case RCC_FDCANCLKSOURCE_HSE: /* HSE is the clock source for FDCAN */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8009420:	4b1d      	ldr	r3, [pc, #116]	; (8009498 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8009422:	681b      	ldr	r3, [r3, #0]
 8009424:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009428:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800942c:	d102      	bne.n	8009434 <HAL_RCCEx_GetPeriphCLKFreq+0x930>
         {
          frequency = HSE_VALUE;
 800942e:	4b1d      	ldr	r3, [pc, #116]	; (80094a4 <HAL_RCCEx_GetPeriphCLKFreq+0x9a0>)
 8009430:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 8009432:	e02b      	b.n	800948c <HAL_RCCEx_GetPeriphCLKFreq+0x988>
          frequency = 0;
 8009434:	2300      	movs	r3, #0
 8009436:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8009438:	e028      	b.n	800948c <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      case RCC_FDCANCLKSOURCE_PLL: /* PLL is the clock source for FDCAN */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800943a:	4b17      	ldr	r3, [pc, #92]	; (8009498 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800943c:	681b      	ldr	r3, [r3, #0]
 800943e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009442:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8009446:	d107      	bne.n	8009458 <HAL_RCCEx_GetPeriphCLKFreq+0x954>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8009448:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800944c:	4618      	mov	r0, r3
 800944e:	f000 fae9 	bl	8009a24 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8009452:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009454:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 8009456:	e019      	b.n	800948c <HAL_RCCEx_GetPeriphCLKFreq+0x988>
          frequency = 0;
 8009458:	2300      	movs	r3, #0
 800945a:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800945c:	e016      	b.n	800948c <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is the clock source for FDCAN */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800945e:	4b0e      	ldr	r3, [pc, #56]	; (8009498 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8009460:	681b      	ldr	r3, [r3, #0]
 8009462:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8009466:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800946a:	d107      	bne.n	800947c <HAL_RCCEx_GetPeriphCLKFreq+0x978>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800946c:	f107 0318 	add.w	r3, r7, #24
 8009470:	4618      	mov	r0, r3
 8009472:	f000 f82f 	bl	80094d4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8009476:	69fb      	ldr	r3, [r7, #28]
 8009478:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 800947a:	e007      	b.n	800948c <HAL_RCCEx_GetPeriphCLKFreq+0x988>
          frequency = 0;
 800947c:	2300      	movs	r3, #0
 800947e:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8009480:	e004      	b.n	800948c <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      default :
        {
          frequency = 0;
 8009482:	2300      	movs	r3, #0
 8009484:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8009486:	e001      	b.n	800948c <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      }
    }
  else
    {
      frequency = 0;
 8009488:	2300      	movs	r3, #0
 800948a:	63fb      	str	r3, [r7, #60]	; 0x3c
    }

  return frequency;
 800948c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 800948e:	4618      	mov	r0, r3
 8009490:	3740      	adds	r7, #64	; 0x40
 8009492:	46bd      	mov	sp, r7
 8009494:	bd80      	pop	{r7, pc}
 8009496:	bf00      	nop
 8009498:	58024400 	.word	0x58024400
 800949c:	03d09000 	.word	0x03d09000
 80094a0:	003d0900 	.word	0x003d0900
 80094a4:	017d7840 	.word	0x017d7840

080094a8 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 80094a8:	b580      	push	{r7, lr}
 80094aa:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE)>> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 80094ac:	f7fe fb88 	bl	8007bc0 <HAL_RCC_GetHCLKFreq>
 80094b0:	4602      	mov	r2, r0
 80094b2:	4b06      	ldr	r3, [pc, #24]	; (80094cc <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 80094b4:	6a1b      	ldr	r3, [r3, #32]
 80094b6:	091b      	lsrs	r3, r3, #4
 80094b8:	f003 0307 	and.w	r3, r3, #7
 80094bc:	4904      	ldr	r1, [pc, #16]	; (80094d0 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 80094be:	5ccb      	ldrb	r3, [r1, r3]
 80094c0:	f003 031f 	and.w	r3, r3, #31
 80094c4:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE)>> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 80094c8:	4618      	mov	r0, r3
 80094ca:	bd80      	pop	{r7, pc}
 80094cc:	58024400 	.word	0x58024400
 80094d0:	08016790 	.word	0x08016790

080094d4 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef* PLL2_Clocks)
{
 80094d4:	b480      	push	{r7}
 80094d6:	b089      	sub	sp, #36	; 0x24
 80094d8:	af00      	add	r7, sp, #0
 80094da:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80094dc:	4ba1      	ldr	r3, [pc, #644]	; (8009764 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80094de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80094e0:	f003 0303 	and.w	r3, r3, #3
 80094e4:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2)>> 12);
 80094e6:	4b9f      	ldr	r3, [pc, #636]	; (8009764 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80094e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80094ea:	0b1b      	lsrs	r3, r3, #12
 80094ec:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80094f0:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 80094f2:	4b9c      	ldr	r3, [pc, #624]	; (8009764 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80094f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80094f6:	091b      	lsrs	r3, r3, #4
 80094f8:	f003 0301 	and.w	r3, r3, #1
 80094fc:	613b      	str	r3, [r7, #16]
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 80094fe:	4b99      	ldr	r3, [pc, #612]	; (8009764 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009500:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009502:	08db      	lsrs	r3, r3, #3
 8009504:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8009508:	693a      	ldr	r2, [r7, #16]
 800950a:	fb02 f303 	mul.w	r3, r2, r3
 800950e:	ee07 3a90 	vmov	s15, r3
 8009512:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009516:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 800951a:	697b      	ldr	r3, [r7, #20]
 800951c:	2b00      	cmp	r3, #0
 800951e:	f000 8111 	beq.w	8009744 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 8009522:	69bb      	ldr	r3, [r7, #24]
 8009524:	2b02      	cmp	r3, #2
 8009526:	f000 8083 	beq.w	8009630 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 800952a:	69bb      	ldr	r3, [r7, #24]
 800952c:	2b02      	cmp	r3, #2
 800952e:	f200 80a1 	bhi.w	8009674 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 8009532:	69bb      	ldr	r3, [r7, #24]
 8009534:	2b00      	cmp	r3, #0
 8009536:	d003      	beq.n	8009540 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 8009538:	69bb      	ldr	r3, [r7, #24]
 800953a:	2b01      	cmp	r3, #1
 800953c:	d056      	beq.n	80095ec <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 800953e:	e099      	b.n	8009674 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8009540:	4b88      	ldr	r3, [pc, #544]	; (8009764 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009542:	681b      	ldr	r3, [r3, #0]
 8009544:	f003 0320 	and.w	r3, r3, #32
 8009548:	2b00      	cmp	r3, #0
 800954a:	d02d      	beq.n	80095a8 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800954c:	4b85      	ldr	r3, [pc, #532]	; (8009764 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800954e:	681b      	ldr	r3, [r3, #0]
 8009550:	08db      	lsrs	r3, r3, #3
 8009552:	f003 0303 	and.w	r3, r3, #3
 8009556:	4a84      	ldr	r2, [pc, #528]	; (8009768 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 8009558:	fa22 f303 	lsr.w	r3, r2, r3
 800955c:	60bb      	str	r3, [r7, #8]
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800955e:	68bb      	ldr	r3, [r7, #8]
 8009560:	ee07 3a90 	vmov	s15, r3
 8009564:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009568:	697b      	ldr	r3, [r7, #20]
 800956a:	ee07 3a90 	vmov	s15, r3
 800956e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009572:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009576:	4b7b      	ldr	r3, [pc, #492]	; (8009764 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009578:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800957a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800957e:	ee07 3a90 	vmov	s15, r3
 8009582:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009586:	ed97 6a03 	vldr	s12, [r7, #12]
 800958a:	eddf 5a78 	vldr	s11, [pc, #480]	; 800976c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800958e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009592:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009596:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800959a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800959e:	ee67 7a27 	vmul.f32	s15, s14, s15
 80095a2:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
      }
      break;
 80095a6:	e087      	b.n	80096b8 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 80095a8:	697b      	ldr	r3, [r7, #20]
 80095aa:	ee07 3a90 	vmov	s15, r3
 80095ae:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80095b2:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8009770 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 80095b6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80095ba:	4b6a      	ldr	r3, [pc, #424]	; (8009764 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80095bc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80095be:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80095c2:	ee07 3a90 	vmov	s15, r3
 80095c6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80095ca:	ed97 6a03 	vldr	s12, [r7, #12]
 80095ce:	eddf 5a67 	vldr	s11, [pc, #412]	; 800976c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80095d2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80095d6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80095da:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80095de:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80095e2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80095e6:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80095ea:	e065      	b.n	80096b8 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 80095ec:	697b      	ldr	r3, [r7, #20]
 80095ee:	ee07 3a90 	vmov	s15, r3
 80095f2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80095f6:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8009774 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 80095fa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80095fe:	4b59      	ldr	r3, [pc, #356]	; (8009764 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009600:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009602:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009606:	ee07 3a90 	vmov	s15, r3
 800960a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800960e:	ed97 6a03 	vldr	s12, [r7, #12]
 8009612:	eddf 5a56 	vldr	s11, [pc, #344]	; 800976c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8009616:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800961a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800961e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009622:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009626:	ee67 7a27 	vmul.f32	s15, s14, s15
 800962a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800962e:	e043      	b.n	80096b8 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8009630:	697b      	ldr	r3, [r7, #20]
 8009632:	ee07 3a90 	vmov	s15, r3
 8009636:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800963a:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8009778 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 800963e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009642:	4b48      	ldr	r3, [pc, #288]	; (8009764 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009644:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009646:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800964a:	ee07 3a90 	vmov	s15, r3
 800964e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009652:	ed97 6a03 	vldr	s12, [r7, #12]
 8009656:	eddf 5a45 	vldr	s11, [pc, #276]	; 800976c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800965a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800965e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009662:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009666:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800966a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800966e:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8009672:	e021      	b.n	80096b8 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    default:
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8009674:	697b      	ldr	r3, [r7, #20]
 8009676:	ee07 3a90 	vmov	s15, r3
 800967a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800967e:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8009774 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8009682:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009686:	4b37      	ldr	r3, [pc, #220]	; (8009764 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009688:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800968a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800968e:	ee07 3a90 	vmov	s15, r3
 8009692:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009696:	ed97 6a03 	vldr	s12, [r7, #12]
 800969a:	eddf 5a34 	vldr	s11, [pc, #208]	; 800976c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800969e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80096a2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80096a6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80096aa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80096ae:	ee67 7a27 	vmul.f32	s15, s14, s15
 80096b2:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80096b6:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >>9)  + (float_t)1 )) ;
 80096b8:	4b2a      	ldr	r3, [pc, #168]	; (8009764 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80096ba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80096bc:	0a5b      	lsrs	r3, r3, #9
 80096be:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80096c2:	ee07 3a90 	vmov	s15, r3
 80096c6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80096ca:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80096ce:	ee37 7a87 	vadd.f32	s14, s15, s14
 80096d2:	edd7 6a07 	vldr	s13, [r7, #28]
 80096d6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80096da:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80096de:	ee17 2a90 	vmov	r2, s15
 80096e2:	687b      	ldr	r3, [r7, #4]
 80096e4:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >>16) + (float_t)1 )) ;
 80096e6:	4b1f      	ldr	r3, [pc, #124]	; (8009764 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80096e8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80096ea:	0c1b      	lsrs	r3, r3, #16
 80096ec:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80096f0:	ee07 3a90 	vmov	s15, r3
 80096f4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80096f8:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80096fc:	ee37 7a87 	vadd.f32	s14, s15, s14
 8009700:	edd7 6a07 	vldr	s13, [r7, #28]
 8009704:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009708:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800970c:	ee17 2a90 	vmov	r2, s15
 8009710:	687b      	ldr	r3, [r7, #4]
 8009712:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >>24) + (float_t)1 )) ;
 8009714:	4b13      	ldr	r3, [pc, #76]	; (8009764 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009716:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009718:	0e1b      	lsrs	r3, r3, #24
 800971a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800971e:	ee07 3a90 	vmov	s15, r3
 8009722:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009726:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800972a:	ee37 7a87 	vadd.f32	s14, s15, s14
 800972e:	edd7 6a07 	vldr	s13, [r7, #28]
 8009732:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009736:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800973a:	ee17 2a90 	vmov	r2, s15
 800973e:	687b      	ldr	r3, [r7, #4]
 8009740:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8009742:	e008      	b.n	8009756 <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8009744:	687b      	ldr	r3, [r7, #4]
 8009746:	2200      	movs	r2, #0
 8009748:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 800974a:	687b      	ldr	r3, [r7, #4]
 800974c:	2200      	movs	r2, #0
 800974e:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8009750:	687b      	ldr	r3, [r7, #4]
 8009752:	2200      	movs	r2, #0
 8009754:	609a      	str	r2, [r3, #8]
}
 8009756:	bf00      	nop
 8009758:	3724      	adds	r7, #36	; 0x24
 800975a:	46bd      	mov	sp, r7
 800975c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009760:	4770      	bx	lr
 8009762:	bf00      	nop
 8009764:	58024400 	.word	0x58024400
 8009768:	03d09000 	.word	0x03d09000
 800976c:	46000000 	.word	0x46000000
 8009770:	4c742400 	.word	0x4c742400
 8009774:	4a742400 	.word	0x4a742400
 8009778:	4bbebc20 	.word	0x4bbebc20

0800977c <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef* PLL3_Clocks)
{
 800977c:	b480      	push	{r7}
 800977e:	b089      	sub	sp, #36	; 0x24
 8009780:	af00      	add	r7, sp, #0
 8009782:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8009784:	4ba1      	ldr	r3, [pc, #644]	; (8009a0c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009786:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009788:	f003 0303 	and.w	r3, r3, #3
 800978c:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3)>> 20)  ;
 800978e:	4b9f      	ldr	r3, [pc, #636]	; (8009a0c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009790:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009792:	0d1b      	lsrs	r3, r3, #20
 8009794:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8009798:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 800979a:	4b9c      	ldr	r3, [pc, #624]	; (8009a0c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800979c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800979e:	0a1b      	lsrs	r3, r3, #8
 80097a0:	f003 0301 	and.w	r3, r3, #1
 80097a4:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 80097a6:	4b99      	ldr	r3, [pc, #612]	; (8009a0c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80097a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80097aa:	08db      	lsrs	r3, r3, #3
 80097ac:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80097b0:	693a      	ldr	r2, [r7, #16]
 80097b2:	fb02 f303 	mul.w	r3, r2, r3
 80097b6:	ee07 3a90 	vmov	s15, r3
 80097ba:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80097be:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 80097c2:	697b      	ldr	r3, [r7, #20]
 80097c4:	2b00      	cmp	r3, #0
 80097c6:	f000 8111 	beq.w	80099ec <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 80097ca:	69bb      	ldr	r3, [r7, #24]
 80097cc:	2b02      	cmp	r3, #2
 80097ce:	f000 8083 	beq.w	80098d8 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 80097d2:	69bb      	ldr	r3, [r7, #24]
 80097d4:	2b02      	cmp	r3, #2
 80097d6:	f200 80a1 	bhi.w	800991c <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 80097da:	69bb      	ldr	r3, [r7, #24]
 80097dc:	2b00      	cmp	r3, #0
 80097de:	d003      	beq.n	80097e8 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 80097e0:	69bb      	ldr	r3, [r7, #24]
 80097e2:	2b01      	cmp	r3, #1
 80097e4:	d056      	beq.n	8009894 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 80097e6:	e099      	b.n	800991c <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80097e8:	4b88      	ldr	r3, [pc, #544]	; (8009a0c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80097ea:	681b      	ldr	r3, [r3, #0]
 80097ec:	f003 0320 	and.w	r3, r3, #32
 80097f0:	2b00      	cmp	r3, #0
 80097f2:	d02d      	beq.n	8009850 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80097f4:	4b85      	ldr	r3, [pc, #532]	; (8009a0c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80097f6:	681b      	ldr	r3, [r3, #0]
 80097f8:	08db      	lsrs	r3, r3, #3
 80097fa:	f003 0303 	and.w	r3, r3, #3
 80097fe:	4a84      	ldr	r2, [pc, #528]	; (8009a10 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 8009800:	fa22 f303 	lsr.w	r3, r2, r3
 8009804:	60bb      	str	r3, [r7, #8]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8009806:	68bb      	ldr	r3, [r7, #8]
 8009808:	ee07 3a90 	vmov	s15, r3
 800980c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009810:	697b      	ldr	r3, [r7, #20]
 8009812:	ee07 3a90 	vmov	s15, r3
 8009816:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800981a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800981e:	4b7b      	ldr	r3, [pc, #492]	; (8009a0c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009820:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009822:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009826:	ee07 3a90 	vmov	s15, r3
 800982a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800982e:	ed97 6a03 	vldr	s12, [r7, #12]
 8009832:	eddf 5a78 	vldr	s11, [pc, #480]	; 8009a14 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8009836:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800983a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800983e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009842:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009846:	ee67 7a27 	vmul.f32	s15, s14, s15
 800984a:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
      }
      break;
 800984e:	e087      	b.n	8009960 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8009850:	697b      	ldr	r3, [r7, #20]
 8009852:	ee07 3a90 	vmov	s15, r3
 8009856:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800985a:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8009a18 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 800985e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009862:	4b6a      	ldr	r3, [pc, #424]	; (8009a0c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009864:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009866:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800986a:	ee07 3a90 	vmov	s15, r3
 800986e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009872:	ed97 6a03 	vldr	s12, [r7, #12]
 8009876:	eddf 5a67 	vldr	s11, [pc, #412]	; 8009a14 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800987a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800987e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009882:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009886:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800988a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800988e:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8009892:	e065      	b.n	8009960 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8009894:	697b      	ldr	r3, [r7, #20]
 8009896:	ee07 3a90 	vmov	s15, r3
 800989a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800989e:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8009a1c <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 80098a2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80098a6:	4b59      	ldr	r3, [pc, #356]	; (8009a0c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80098a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80098aa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80098ae:	ee07 3a90 	vmov	s15, r3
 80098b2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80098b6:	ed97 6a03 	vldr	s12, [r7, #12]
 80098ba:	eddf 5a56 	vldr	s11, [pc, #344]	; 8009a14 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80098be:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80098c2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80098c6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80098ca:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80098ce:	ee67 7a27 	vmul.f32	s15, s14, s15
 80098d2:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80098d6:	e043      	b.n	8009960 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 80098d8:	697b      	ldr	r3, [r7, #20]
 80098da:	ee07 3a90 	vmov	s15, r3
 80098de:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80098e2:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8009a20 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 80098e6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80098ea:	4b48      	ldr	r3, [pc, #288]	; (8009a0c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80098ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80098ee:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80098f2:	ee07 3a90 	vmov	s15, r3
 80098f6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80098fa:	ed97 6a03 	vldr	s12, [r7, #12]
 80098fe:	eddf 5a45 	vldr	s11, [pc, #276]	; 8009a14 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8009902:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009906:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800990a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800990e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009912:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009916:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800991a:	e021      	b.n	8009960 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    default:
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800991c:	697b      	ldr	r3, [r7, #20]
 800991e:	ee07 3a90 	vmov	s15, r3
 8009922:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009926:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8009a1c <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800992a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800992e:	4b37      	ldr	r3, [pc, #220]	; (8009a0c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009930:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009932:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009936:	ee07 3a90 	vmov	s15, r3
 800993a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800993e:	ed97 6a03 	vldr	s12, [r7, #12]
 8009942:	eddf 5a34 	vldr	s11, [pc, #208]	; 8009a14 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8009946:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800994a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800994e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009952:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009956:	ee67 7a27 	vmul.f32	s15, s14, s15
 800995a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800995e:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >>9)  + (float_t)1 )) ;
 8009960:	4b2a      	ldr	r3, [pc, #168]	; (8009a0c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009962:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009964:	0a5b      	lsrs	r3, r3, #9
 8009966:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800996a:	ee07 3a90 	vmov	s15, r3
 800996e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009972:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8009976:	ee37 7a87 	vadd.f32	s14, s15, s14
 800997a:	edd7 6a07 	vldr	s13, [r7, #28]
 800997e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009982:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009986:	ee17 2a90 	vmov	r2, s15
 800998a:	687b      	ldr	r3, [r7, #4]
 800998c:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >>16) + (float_t)1 )) ;
 800998e:	4b1f      	ldr	r3, [pc, #124]	; (8009a0c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009990:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009992:	0c1b      	lsrs	r3, r3, #16
 8009994:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009998:	ee07 3a90 	vmov	s15, r3
 800999c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80099a0:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80099a4:	ee37 7a87 	vadd.f32	s14, s15, s14
 80099a8:	edd7 6a07 	vldr	s13, [r7, #28]
 80099ac:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80099b0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80099b4:	ee17 2a90 	vmov	r2, s15
 80099b8:	687b      	ldr	r3, [r7, #4]
 80099ba:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >>24) + (float_t)1 )) ;
 80099bc:	4b13      	ldr	r3, [pc, #76]	; (8009a0c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80099be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80099c0:	0e1b      	lsrs	r3, r3, #24
 80099c2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80099c6:	ee07 3a90 	vmov	s15, r3
 80099ca:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80099ce:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80099d2:	ee37 7a87 	vadd.f32	s14, s15, s14
 80099d6:	edd7 6a07 	vldr	s13, [r7, #28]
 80099da:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80099de:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80099e2:	ee17 2a90 	vmov	r2, s15
 80099e6:	687b      	ldr	r3, [r7, #4]
 80099e8:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 80099ea:	e008      	b.n	80099fe <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 80099ec:	687b      	ldr	r3, [r7, #4]
 80099ee:	2200      	movs	r2, #0
 80099f0:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 80099f2:	687b      	ldr	r3, [r7, #4]
 80099f4:	2200      	movs	r2, #0
 80099f6:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 80099f8:	687b      	ldr	r3, [r7, #4]
 80099fa:	2200      	movs	r2, #0
 80099fc:	609a      	str	r2, [r3, #8]
}
 80099fe:	bf00      	nop
 8009a00:	3724      	adds	r7, #36	; 0x24
 8009a02:	46bd      	mov	sp, r7
 8009a04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a08:	4770      	bx	lr
 8009a0a:	bf00      	nop
 8009a0c:	58024400 	.word	0x58024400
 8009a10:	03d09000 	.word	0x03d09000
 8009a14:	46000000 	.word	0x46000000
 8009a18:	4c742400 	.word	0x4c742400
 8009a1c:	4a742400 	.word	0x4a742400
 8009a20:	4bbebc20 	.word	0x4bbebc20

08009a24 <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef* PLL1_Clocks)
{
 8009a24:	b480      	push	{r7}
 8009a26:	b089      	sub	sp, #36	; 0x24
 8009a28:	af00      	add	r7, sp, #0
 8009a2a:	6078      	str	r0, [r7, #4]
  uint32_t pllsource, pll1m, pll1fracen, hsivalue;
  float_t fracn1, pll1vco;

  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8009a2c:	4ba0      	ldr	r3, [pc, #640]	; (8009cb0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8009a2e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009a30:	f003 0303 	and.w	r3, r3, #3
 8009a34:	61bb      	str	r3, [r7, #24]
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4);
 8009a36:	4b9e      	ldr	r3, [pc, #632]	; (8009cb0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8009a38:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009a3a:	091b      	lsrs	r3, r3, #4
 8009a3c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8009a40:	617b      	str	r3, [r7, #20]
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 8009a42:	4b9b      	ldr	r3, [pc, #620]	; (8009cb0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8009a44:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009a46:	f003 0301 	and.w	r3, r3, #1
 8009a4a:	613b      	str	r3, [r7, #16]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 8009a4c:	4b98      	ldr	r3, [pc, #608]	; (8009cb0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8009a4e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009a50:	08db      	lsrs	r3, r3, #3
 8009a52:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8009a56:	693a      	ldr	r2, [r7, #16]
 8009a58:	fb02 f303 	mul.w	r3, r2, r3
 8009a5c:	ee07 3a90 	vmov	s15, r3
 8009a60:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009a64:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll1m != 0U)
 8009a68:	697b      	ldr	r3, [r7, #20]
 8009a6a:	2b00      	cmp	r3, #0
 8009a6c:	f000 8111 	beq.w	8009c92 <HAL_RCCEx_GetPLL1ClockFreq+0x26e>
  {
    switch (pllsource)
 8009a70:	69bb      	ldr	r3, [r7, #24]
 8009a72:	2b02      	cmp	r3, #2
 8009a74:	f000 8083 	beq.w	8009b7e <HAL_RCCEx_GetPLL1ClockFreq+0x15a>
 8009a78:	69bb      	ldr	r3, [r7, #24]
 8009a7a:	2b02      	cmp	r3, #2
 8009a7c:	f200 80a1 	bhi.w	8009bc2 <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
 8009a80:	69bb      	ldr	r3, [r7, #24]
 8009a82:	2b00      	cmp	r3, #0
 8009a84:	d003      	beq.n	8009a8e <HAL_RCCEx_GetPLL1ClockFreq+0x6a>
 8009a86:	69bb      	ldr	r3, [r7, #24]
 8009a88:	2b01      	cmp	r3, #1
 8009a8a:	d056      	beq.n	8009b3a <HAL_RCCEx_GetPLL1ClockFreq+0x116>
 8009a8c:	e099      	b.n	8009bc2 <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8009a8e:	4b88      	ldr	r3, [pc, #544]	; (8009cb0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8009a90:	681b      	ldr	r3, [r3, #0]
 8009a92:	f003 0320 	and.w	r3, r3, #32
 8009a96:	2b00      	cmp	r3, #0
 8009a98:	d02d      	beq.n	8009af6 <HAL_RCCEx_GetPLL1ClockFreq+0xd2>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8009a9a:	4b85      	ldr	r3, [pc, #532]	; (8009cb0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8009a9c:	681b      	ldr	r3, [r3, #0]
 8009a9e:	08db      	lsrs	r3, r3, #3
 8009aa0:	f003 0303 	and.w	r3, r3, #3
 8009aa4:	4a83      	ldr	r2, [pc, #524]	; (8009cb4 <HAL_RCCEx_GetPLL1ClockFreq+0x290>)
 8009aa6:	fa22 f303 	lsr.w	r3, r2, r3
 8009aaa:	60bb      	str	r3, [r7, #8]
        pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8009aac:	68bb      	ldr	r3, [r7, #8]
 8009aae:	ee07 3a90 	vmov	s15, r3
 8009ab2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009ab6:	697b      	ldr	r3, [r7, #20]
 8009ab8:	ee07 3a90 	vmov	s15, r3
 8009abc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009ac0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009ac4:	4b7a      	ldr	r3, [pc, #488]	; (8009cb0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8009ac6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009ac8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009acc:	ee07 3a90 	vmov	s15, r3
 8009ad0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009ad4:	ed97 6a03 	vldr	s12, [r7, #12]
 8009ad8:	eddf 5a77 	vldr	s11, [pc, #476]	; 8009cb8 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8009adc:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009ae0:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009ae4:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009ae8:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009aec:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009af0:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
      }
      break;
 8009af4:	e087      	b.n	8009c06 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8009af6:	697b      	ldr	r3, [r7, #20]
 8009af8:	ee07 3a90 	vmov	s15, r3
 8009afc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009b00:	eddf 6a6e 	vldr	s13, [pc, #440]	; 8009cbc <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 8009b04:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009b08:	4b69      	ldr	r3, [pc, #420]	; (8009cb0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8009b0a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009b0c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009b10:	ee07 3a90 	vmov	s15, r3
 8009b14:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009b18:	ed97 6a03 	vldr	s12, [r7, #12]
 8009b1c:	eddf 5a66 	vldr	s11, [pc, #408]	; 8009cb8 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8009b20:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009b24:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009b28:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009b2c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009b30:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009b34:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8009b38:	e065      	b.n	8009c06 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8009b3a:	697b      	ldr	r3, [r7, #20]
 8009b3c:	ee07 3a90 	vmov	s15, r3
 8009b40:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009b44:	eddf 6a5e 	vldr	s13, [pc, #376]	; 8009cc0 <HAL_RCCEx_GetPLL1ClockFreq+0x29c>
 8009b48:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009b4c:	4b58      	ldr	r3, [pc, #352]	; (8009cb0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8009b4e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009b50:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009b54:	ee07 3a90 	vmov	s15, r3
 8009b58:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009b5c:	ed97 6a03 	vldr	s12, [r7, #12]
 8009b60:	eddf 5a55 	vldr	s11, [pc, #340]	; 8009cb8 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8009b64:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009b68:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009b6c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009b70:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009b74:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009b78:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8009b7c:	e043      	b.n	8009c06 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8009b7e:	697b      	ldr	r3, [r7, #20]
 8009b80:	ee07 3a90 	vmov	s15, r3
 8009b84:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009b88:	eddf 6a4e 	vldr	s13, [pc, #312]	; 8009cc4 <HAL_RCCEx_GetPLL1ClockFreq+0x2a0>
 8009b8c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009b90:	4b47      	ldr	r3, [pc, #284]	; (8009cb0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8009b92:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009b94:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009b98:	ee07 3a90 	vmov	s15, r3
 8009b9c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009ba0:	ed97 6a03 	vldr	s12, [r7, #12]
 8009ba4:	eddf 5a44 	vldr	s11, [pc, #272]	; 8009cb8 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8009ba8:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009bac:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009bb0:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009bb4:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009bb8:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009bbc:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8009bc0:	e021      	b.n	8009c06 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

    default:
      pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8009bc2:	697b      	ldr	r3, [r7, #20]
 8009bc4:	ee07 3a90 	vmov	s15, r3
 8009bc8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009bcc:	eddf 6a3b 	vldr	s13, [pc, #236]	; 8009cbc <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 8009bd0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009bd4:	4b36      	ldr	r3, [pc, #216]	; (8009cb0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8009bd6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009bd8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009bdc:	ee07 3a90 	vmov	s15, r3
 8009be0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009be4:	ed97 6a03 	vldr	s12, [r7, #12]
 8009be8:	eddf 5a33 	vldr	s11, [pc, #204]	; 8009cb8 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8009bec:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009bf0:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009bf4:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009bf8:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009bfc:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009c00:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8009c04:	bf00      	nop
    }

    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9)  + (float_t)1 )) ;
 8009c06:	4b2a      	ldr	r3, [pc, #168]	; (8009cb0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8009c08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009c0a:	0a5b      	lsrs	r3, r3, #9
 8009c0c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009c10:	ee07 3a90 	vmov	s15, r3
 8009c14:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009c18:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8009c1c:	ee37 7a87 	vadd.f32	s14, s15, s14
 8009c20:	edd7 6a07 	vldr	s13, [r7, #28]
 8009c24:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009c28:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009c2c:	ee17 2a90 	vmov	r2, s15
 8009c30:	687b      	ldr	r3, [r7, #4]
 8009c32:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >>16) + (float_t)1 )) ;
 8009c34:	4b1e      	ldr	r3, [pc, #120]	; (8009cb0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8009c36:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009c38:	0c1b      	lsrs	r3, r3, #16
 8009c3a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009c3e:	ee07 3a90 	vmov	s15, r3
 8009c42:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009c46:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8009c4a:	ee37 7a87 	vadd.f32	s14, s15, s14
 8009c4e:	edd7 6a07 	vldr	s13, [r7, #28]
 8009c52:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009c56:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009c5a:	ee17 2a90 	vmov	r2, s15
 8009c5e:	687b      	ldr	r3, [r7, #4]
 8009c60:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >>24) + (float_t)1 )) ;
 8009c62:	4b13      	ldr	r3, [pc, #76]	; (8009cb0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8009c64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009c66:	0e1b      	lsrs	r3, r3, #24
 8009c68:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009c6c:	ee07 3a90 	vmov	s15, r3
 8009c70:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009c74:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8009c78:	ee37 7a87 	vadd.f32	s14, s15, s14
 8009c7c:	edd7 6a07 	vldr	s13, [r7, #28]
 8009c80:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009c84:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009c88:	ee17 2a90 	vmov	r2, s15
 8009c8c:	687b      	ldr	r3, [r7, #4]
 8009c8e:	609a      	str	r2, [r3, #8]
    PLL1_Clocks->PLL1_P_Frequency = 0U;
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 8009c90:	e008      	b.n	8009ca4 <HAL_RCCEx_GetPLL1ClockFreq+0x280>
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 8009c92:	687b      	ldr	r3, [r7, #4]
 8009c94:	2200      	movs	r2, #0
 8009c96:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 8009c98:	687b      	ldr	r3, [r7, #4]
 8009c9a:	2200      	movs	r2, #0
 8009c9c:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 8009c9e:	687b      	ldr	r3, [r7, #4]
 8009ca0:	2200      	movs	r2, #0
 8009ca2:	609a      	str	r2, [r3, #8]
}
 8009ca4:	bf00      	nop
 8009ca6:	3724      	adds	r7, #36	; 0x24
 8009ca8:	46bd      	mov	sp, r7
 8009caa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009cae:	4770      	bx	lr
 8009cb0:	58024400 	.word	0x58024400
 8009cb4:	03d09000 	.word	0x03d09000
 8009cb8:	46000000 	.word	0x46000000
 8009cbc:	4c742400 	.word	0x4c742400
 8009cc0:	4a742400 	.word	0x4a742400
 8009cc4:	4bbebc20 	.word	0x4bbebc20

08009cc8 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8009cc8:	b580      	push	{r7, lr}
 8009cca:	b084      	sub	sp, #16
 8009ccc:	af00      	add	r7, sp, #0
 8009cce:	6078      	str	r0, [r7, #4]
 8009cd0:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8009cd2:	2300      	movs	r3, #0
 8009cd4:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8009cd6:	4b53      	ldr	r3, [pc, #332]	; (8009e24 <RCCEx_PLL2_Config+0x15c>)
 8009cd8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009cda:	f003 0303 	and.w	r3, r3, #3
 8009cde:	2b03      	cmp	r3, #3
 8009ce0:	d101      	bne.n	8009ce6 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 8009ce2:	2301      	movs	r3, #1
 8009ce4:	e099      	b.n	8009e1a <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8009ce6:	4b4f      	ldr	r3, [pc, #316]	; (8009e24 <RCCEx_PLL2_Config+0x15c>)
 8009ce8:	681b      	ldr	r3, [r3, #0]
 8009cea:	4a4e      	ldr	r2, [pc, #312]	; (8009e24 <RCCEx_PLL2_Config+0x15c>)
 8009cec:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8009cf0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8009cf2:	f7f8 fb5d 	bl	80023b0 <HAL_GetTick>
 8009cf6:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8009cf8:	e008      	b.n	8009d0c <RCCEx_PLL2_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 8009cfa:	f7f8 fb59 	bl	80023b0 <HAL_GetTick>
 8009cfe:	4602      	mov	r2, r0
 8009d00:	68bb      	ldr	r3, [r7, #8]
 8009d02:	1ad3      	subs	r3, r2, r3
 8009d04:	2b02      	cmp	r3, #2
 8009d06:	d901      	bls.n	8009d0c <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8009d08:	2303      	movs	r3, #3
 8009d0a:	e086      	b.n	8009e1a <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8009d0c:	4b45      	ldr	r3, [pc, #276]	; (8009e24 <RCCEx_PLL2_Config+0x15c>)
 8009d0e:	681b      	ldr	r3, [r3, #0]
 8009d10:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8009d14:	2b00      	cmp	r3, #0
 8009d16:	d1f0      	bne.n	8009cfa <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8009d18:	4b42      	ldr	r3, [pc, #264]	; (8009e24 <RCCEx_PLL2_Config+0x15c>)
 8009d1a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009d1c:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8009d20:	687b      	ldr	r3, [r7, #4]
 8009d22:	681b      	ldr	r3, [r3, #0]
 8009d24:	031b      	lsls	r3, r3, #12
 8009d26:	493f      	ldr	r1, [pc, #252]	; (8009e24 <RCCEx_PLL2_Config+0x15c>)
 8009d28:	4313      	orrs	r3, r2
 8009d2a:	628b      	str	r3, [r1, #40]	; 0x28
 8009d2c:	687b      	ldr	r3, [r7, #4]
 8009d2e:	685b      	ldr	r3, [r3, #4]
 8009d30:	3b01      	subs	r3, #1
 8009d32:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8009d36:	687b      	ldr	r3, [r7, #4]
 8009d38:	689b      	ldr	r3, [r3, #8]
 8009d3a:	3b01      	subs	r3, #1
 8009d3c:	025b      	lsls	r3, r3, #9
 8009d3e:	b29b      	uxth	r3, r3
 8009d40:	431a      	orrs	r2, r3
 8009d42:	687b      	ldr	r3, [r7, #4]
 8009d44:	68db      	ldr	r3, [r3, #12]
 8009d46:	3b01      	subs	r3, #1
 8009d48:	041b      	lsls	r3, r3, #16
 8009d4a:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8009d4e:	431a      	orrs	r2, r3
 8009d50:	687b      	ldr	r3, [r7, #4]
 8009d52:	691b      	ldr	r3, [r3, #16]
 8009d54:	3b01      	subs	r3, #1
 8009d56:	061b      	lsls	r3, r3, #24
 8009d58:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8009d5c:	4931      	ldr	r1, [pc, #196]	; (8009e24 <RCCEx_PLL2_Config+0x15c>)
 8009d5e:	4313      	orrs	r3, r2
 8009d60:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8009d62:	4b30      	ldr	r3, [pc, #192]	; (8009e24 <RCCEx_PLL2_Config+0x15c>)
 8009d64:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009d66:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8009d6a:	687b      	ldr	r3, [r7, #4]
 8009d6c:	695b      	ldr	r3, [r3, #20]
 8009d6e:	492d      	ldr	r1, [pc, #180]	; (8009e24 <RCCEx_PLL2_Config+0x15c>)
 8009d70:	4313      	orrs	r3, r2
 8009d72:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8009d74:	4b2b      	ldr	r3, [pc, #172]	; (8009e24 <RCCEx_PLL2_Config+0x15c>)
 8009d76:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009d78:	f023 0220 	bic.w	r2, r3, #32
 8009d7c:	687b      	ldr	r3, [r7, #4]
 8009d7e:	699b      	ldr	r3, [r3, #24]
 8009d80:	4928      	ldr	r1, [pc, #160]	; (8009e24 <RCCEx_PLL2_Config+0x15c>)
 8009d82:	4313      	orrs	r3, r2
 8009d84:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8009d86:	4b27      	ldr	r3, [pc, #156]	; (8009e24 <RCCEx_PLL2_Config+0x15c>)
 8009d88:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009d8a:	4a26      	ldr	r2, [pc, #152]	; (8009e24 <RCCEx_PLL2_Config+0x15c>)
 8009d8c:	f023 0310 	bic.w	r3, r3, #16
 8009d90:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8009d92:	4b24      	ldr	r3, [pc, #144]	; (8009e24 <RCCEx_PLL2_Config+0x15c>)
 8009d94:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8009d96:	4b24      	ldr	r3, [pc, #144]	; (8009e28 <RCCEx_PLL2_Config+0x160>)
 8009d98:	4013      	ands	r3, r2
 8009d9a:	687a      	ldr	r2, [r7, #4]
 8009d9c:	69d2      	ldr	r2, [r2, #28]
 8009d9e:	00d2      	lsls	r2, r2, #3
 8009da0:	4920      	ldr	r1, [pc, #128]	; (8009e24 <RCCEx_PLL2_Config+0x15c>)
 8009da2:	4313      	orrs	r3, r2
 8009da4:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8009da6:	4b1f      	ldr	r3, [pc, #124]	; (8009e24 <RCCEx_PLL2_Config+0x15c>)
 8009da8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009daa:	4a1e      	ldr	r2, [pc, #120]	; (8009e24 <RCCEx_PLL2_Config+0x15c>)
 8009dac:	f043 0310 	orr.w	r3, r3, #16
 8009db0:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 8009db2:	683b      	ldr	r3, [r7, #0]
 8009db4:	2b00      	cmp	r3, #0
 8009db6:	d106      	bne.n	8009dc6 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8009db8:	4b1a      	ldr	r3, [pc, #104]	; (8009e24 <RCCEx_PLL2_Config+0x15c>)
 8009dba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009dbc:	4a19      	ldr	r2, [pc, #100]	; (8009e24 <RCCEx_PLL2_Config+0x15c>)
 8009dbe:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8009dc2:	62d3      	str	r3, [r2, #44]	; 0x2c
 8009dc4:	e00f      	b.n	8009de6 <RCCEx_PLL2_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 8009dc6:	683b      	ldr	r3, [r7, #0]
 8009dc8:	2b01      	cmp	r3, #1
 8009dca:	d106      	bne.n	8009dda <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8009dcc:	4b15      	ldr	r3, [pc, #84]	; (8009e24 <RCCEx_PLL2_Config+0x15c>)
 8009dce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009dd0:	4a14      	ldr	r2, [pc, #80]	; (8009e24 <RCCEx_PLL2_Config+0x15c>)
 8009dd2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8009dd6:	62d3      	str	r3, [r2, #44]	; 0x2c
 8009dd8:	e005      	b.n	8009de6 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8009dda:	4b12      	ldr	r3, [pc, #72]	; (8009e24 <RCCEx_PLL2_Config+0x15c>)
 8009ddc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009dde:	4a11      	ldr	r2, [pc, #68]	; (8009e24 <RCCEx_PLL2_Config+0x15c>)
 8009de0:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8009de4:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8009de6:	4b0f      	ldr	r3, [pc, #60]	; (8009e24 <RCCEx_PLL2_Config+0x15c>)
 8009de8:	681b      	ldr	r3, [r3, #0]
 8009dea:	4a0e      	ldr	r2, [pc, #56]	; (8009e24 <RCCEx_PLL2_Config+0x15c>)
 8009dec:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8009df0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8009df2:	f7f8 fadd 	bl	80023b0 <HAL_GetTick>
 8009df6:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8009df8:	e008      	b.n	8009e0c <RCCEx_PLL2_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 8009dfa:	f7f8 fad9 	bl	80023b0 <HAL_GetTick>
 8009dfe:	4602      	mov	r2, r0
 8009e00:	68bb      	ldr	r3, [r7, #8]
 8009e02:	1ad3      	subs	r3, r2, r3
 8009e04:	2b02      	cmp	r3, #2
 8009e06:	d901      	bls.n	8009e0c <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8009e08:	2303      	movs	r3, #3
 8009e0a:	e006      	b.n	8009e1a <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8009e0c:	4b05      	ldr	r3, [pc, #20]	; (8009e24 <RCCEx_PLL2_Config+0x15c>)
 8009e0e:	681b      	ldr	r3, [r3, #0]
 8009e10:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8009e14:	2b00      	cmp	r3, #0
 8009e16:	d0f0      	beq.n	8009dfa <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8009e18:	7bfb      	ldrb	r3, [r7, #15]
}
 8009e1a:	4618      	mov	r0, r3
 8009e1c:	3710      	adds	r7, #16
 8009e1e:	46bd      	mov	sp, r7
 8009e20:	bd80      	pop	{r7, pc}
 8009e22:	bf00      	nop
 8009e24:	58024400 	.word	0x58024400
 8009e28:	ffff0007 	.word	0xffff0007

08009e2c <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8009e2c:	b580      	push	{r7, lr}
 8009e2e:	b084      	sub	sp, #16
 8009e30:	af00      	add	r7, sp, #0
 8009e32:	6078      	str	r0, [r7, #4]
 8009e34:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8009e36:	2300      	movs	r3, #0
 8009e38:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8009e3a:	4b53      	ldr	r3, [pc, #332]	; (8009f88 <RCCEx_PLL3_Config+0x15c>)
 8009e3c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009e3e:	f003 0303 	and.w	r3, r3, #3
 8009e42:	2b03      	cmp	r3, #3
 8009e44:	d101      	bne.n	8009e4a <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 8009e46:	2301      	movs	r3, #1
 8009e48:	e099      	b.n	8009f7e <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8009e4a:	4b4f      	ldr	r3, [pc, #316]	; (8009f88 <RCCEx_PLL3_Config+0x15c>)
 8009e4c:	681b      	ldr	r3, [r3, #0]
 8009e4e:	4a4e      	ldr	r2, [pc, #312]	; (8009f88 <RCCEx_PLL3_Config+0x15c>)
 8009e50:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8009e54:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8009e56:	f7f8 faab 	bl	80023b0 <HAL_GetTick>
 8009e5a:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8009e5c:	e008      	b.n	8009e70 <RCCEx_PLL3_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 8009e5e:	f7f8 faa7 	bl	80023b0 <HAL_GetTick>
 8009e62:	4602      	mov	r2, r0
 8009e64:	68bb      	ldr	r3, [r7, #8]
 8009e66:	1ad3      	subs	r3, r2, r3
 8009e68:	2b02      	cmp	r3, #2
 8009e6a:	d901      	bls.n	8009e70 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8009e6c:	2303      	movs	r3, #3
 8009e6e:	e086      	b.n	8009f7e <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8009e70:	4b45      	ldr	r3, [pc, #276]	; (8009f88 <RCCEx_PLL3_Config+0x15c>)
 8009e72:	681b      	ldr	r3, [r3, #0]
 8009e74:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8009e78:	2b00      	cmp	r3, #0
 8009e7a:	d1f0      	bne.n	8009e5e <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8009e7c:	4b42      	ldr	r3, [pc, #264]	; (8009f88 <RCCEx_PLL3_Config+0x15c>)
 8009e7e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009e80:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 8009e84:	687b      	ldr	r3, [r7, #4]
 8009e86:	681b      	ldr	r3, [r3, #0]
 8009e88:	051b      	lsls	r3, r3, #20
 8009e8a:	493f      	ldr	r1, [pc, #252]	; (8009f88 <RCCEx_PLL3_Config+0x15c>)
 8009e8c:	4313      	orrs	r3, r2
 8009e8e:	628b      	str	r3, [r1, #40]	; 0x28
 8009e90:	687b      	ldr	r3, [r7, #4]
 8009e92:	685b      	ldr	r3, [r3, #4]
 8009e94:	3b01      	subs	r3, #1
 8009e96:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8009e9a:	687b      	ldr	r3, [r7, #4]
 8009e9c:	689b      	ldr	r3, [r3, #8]
 8009e9e:	3b01      	subs	r3, #1
 8009ea0:	025b      	lsls	r3, r3, #9
 8009ea2:	b29b      	uxth	r3, r3
 8009ea4:	431a      	orrs	r2, r3
 8009ea6:	687b      	ldr	r3, [r7, #4]
 8009ea8:	68db      	ldr	r3, [r3, #12]
 8009eaa:	3b01      	subs	r3, #1
 8009eac:	041b      	lsls	r3, r3, #16
 8009eae:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8009eb2:	431a      	orrs	r2, r3
 8009eb4:	687b      	ldr	r3, [r7, #4]
 8009eb6:	691b      	ldr	r3, [r3, #16]
 8009eb8:	3b01      	subs	r3, #1
 8009eba:	061b      	lsls	r3, r3, #24
 8009ebc:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8009ec0:	4931      	ldr	r1, [pc, #196]	; (8009f88 <RCCEx_PLL3_Config+0x15c>)
 8009ec2:	4313      	orrs	r3, r2
 8009ec4:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8009ec6:	4b30      	ldr	r3, [pc, #192]	; (8009f88 <RCCEx_PLL3_Config+0x15c>)
 8009ec8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009eca:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8009ece:	687b      	ldr	r3, [r7, #4]
 8009ed0:	695b      	ldr	r3, [r3, #20]
 8009ed2:	492d      	ldr	r1, [pc, #180]	; (8009f88 <RCCEx_PLL3_Config+0x15c>)
 8009ed4:	4313      	orrs	r3, r2
 8009ed6:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8009ed8:	4b2b      	ldr	r3, [pc, #172]	; (8009f88 <RCCEx_PLL3_Config+0x15c>)
 8009eda:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009edc:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8009ee0:	687b      	ldr	r3, [r7, #4]
 8009ee2:	699b      	ldr	r3, [r3, #24]
 8009ee4:	4928      	ldr	r1, [pc, #160]	; (8009f88 <RCCEx_PLL3_Config+0x15c>)
 8009ee6:	4313      	orrs	r3, r2
 8009ee8:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8009eea:	4b27      	ldr	r3, [pc, #156]	; (8009f88 <RCCEx_PLL3_Config+0x15c>)
 8009eec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009eee:	4a26      	ldr	r2, [pc, #152]	; (8009f88 <RCCEx_PLL3_Config+0x15c>)
 8009ef0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8009ef4:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8009ef6:	4b24      	ldr	r3, [pc, #144]	; (8009f88 <RCCEx_PLL3_Config+0x15c>)
 8009ef8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8009efa:	4b24      	ldr	r3, [pc, #144]	; (8009f8c <RCCEx_PLL3_Config+0x160>)
 8009efc:	4013      	ands	r3, r2
 8009efe:	687a      	ldr	r2, [r7, #4]
 8009f00:	69d2      	ldr	r2, [r2, #28]
 8009f02:	00d2      	lsls	r2, r2, #3
 8009f04:	4920      	ldr	r1, [pc, #128]	; (8009f88 <RCCEx_PLL3_Config+0x15c>)
 8009f06:	4313      	orrs	r3, r2
 8009f08:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8009f0a:	4b1f      	ldr	r3, [pc, #124]	; (8009f88 <RCCEx_PLL3_Config+0x15c>)
 8009f0c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009f0e:	4a1e      	ldr	r2, [pc, #120]	; (8009f88 <RCCEx_PLL3_Config+0x15c>)
 8009f10:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8009f14:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 8009f16:	683b      	ldr	r3, [r7, #0]
 8009f18:	2b00      	cmp	r3, #0
 8009f1a:	d106      	bne.n	8009f2a <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8009f1c:	4b1a      	ldr	r3, [pc, #104]	; (8009f88 <RCCEx_PLL3_Config+0x15c>)
 8009f1e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009f20:	4a19      	ldr	r2, [pc, #100]	; (8009f88 <RCCEx_PLL3_Config+0x15c>)
 8009f22:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8009f26:	62d3      	str	r3, [r2, #44]	; 0x2c
 8009f28:	e00f      	b.n	8009f4a <RCCEx_PLL3_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 8009f2a:	683b      	ldr	r3, [r7, #0]
 8009f2c:	2b01      	cmp	r3, #1
 8009f2e:	d106      	bne.n	8009f3e <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8009f30:	4b15      	ldr	r3, [pc, #84]	; (8009f88 <RCCEx_PLL3_Config+0x15c>)
 8009f32:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009f34:	4a14      	ldr	r2, [pc, #80]	; (8009f88 <RCCEx_PLL3_Config+0x15c>)
 8009f36:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8009f3a:	62d3      	str	r3, [r2, #44]	; 0x2c
 8009f3c:	e005      	b.n	8009f4a <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8009f3e:	4b12      	ldr	r3, [pc, #72]	; (8009f88 <RCCEx_PLL3_Config+0x15c>)
 8009f40:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009f42:	4a11      	ldr	r2, [pc, #68]	; (8009f88 <RCCEx_PLL3_Config+0x15c>)
 8009f44:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8009f48:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8009f4a:	4b0f      	ldr	r3, [pc, #60]	; (8009f88 <RCCEx_PLL3_Config+0x15c>)
 8009f4c:	681b      	ldr	r3, [r3, #0]
 8009f4e:	4a0e      	ldr	r2, [pc, #56]	; (8009f88 <RCCEx_PLL3_Config+0x15c>)
 8009f50:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8009f54:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8009f56:	f7f8 fa2b 	bl	80023b0 <HAL_GetTick>
 8009f5a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8009f5c:	e008      	b.n	8009f70 <RCCEx_PLL3_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 8009f5e:	f7f8 fa27 	bl	80023b0 <HAL_GetTick>
 8009f62:	4602      	mov	r2, r0
 8009f64:	68bb      	ldr	r3, [r7, #8]
 8009f66:	1ad3      	subs	r3, r2, r3
 8009f68:	2b02      	cmp	r3, #2
 8009f6a:	d901      	bls.n	8009f70 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8009f6c:	2303      	movs	r3, #3
 8009f6e:	e006      	b.n	8009f7e <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8009f70:	4b05      	ldr	r3, [pc, #20]	; (8009f88 <RCCEx_PLL3_Config+0x15c>)
 8009f72:	681b      	ldr	r3, [r3, #0]
 8009f74:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8009f78:	2b00      	cmp	r3, #0
 8009f7a:	d0f0      	beq.n	8009f5e <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8009f7c:	7bfb      	ldrb	r3, [r7, #15]
}
 8009f7e:	4618      	mov	r0, r3
 8009f80:	3710      	adds	r7, #16
 8009f82:	46bd      	mov	sp, r7
 8009f84:	bd80      	pop	{r7, pc}
 8009f86:	bf00      	nop
 8009f88:	58024400 	.word	0x58024400
 8009f8c:	ffff0007 	.word	0xffff0007

08009f90 <HAL_SD_Init>:
            SD_HandleTypeDef and create the associated handle.
  * @param  hsd: Pointer to the SD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_Init(SD_HandleTypeDef *hsd)
{
 8009f90:	b580      	push	{r7, lr}
 8009f92:	b08a      	sub	sp, #40	; 0x28
 8009f94:	af00      	add	r7, sp, #0
 8009f96:	6078      	str	r0, [r7, #4]
  uint32_t speedgrade;
  uint32_t unitsize;
  uint32_t tickstart;

  /* Check the SD handle allocation */
  if (hsd == NULL)
 8009f98:	687b      	ldr	r3, [r7, #4]
 8009f9a:	2b00      	cmp	r3, #0
 8009f9c:	d101      	bne.n	8009fa2 <HAL_SD_Init+0x12>
  {
    return HAL_ERROR;
 8009f9e:	2301      	movs	r3, #1
 8009fa0:	e075      	b.n	800a08e <HAL_SD_Init+0xfe>
  assert_param(IS_SDMMC_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
  assert_param(IS_SDMMC_BUS_WIDE(hsd->Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(hsd->Init.ClockDiv));

  if (hsd->State == HAL_SD_STATE_RESET)
 8009fa2:	687b      	ldr	r3, [r7, #4]
 8009fa4:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8009fa8:	b2db      	uxtb	r3, r3
 8009faa:	2b00      	cmp	r3, #0
 8009fac:	d105      	bne.n	8009fba <HAL_SD_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hsd->Lock = HAL_UNLOCKED;
 8009fae:	687b      	ldr	r3, [r7, #4]
 8009fb0:	2200      	movs	r2, #0
 8009fb2:	761a      	strb	r2, [r3, #24]

    /* Init the low level hardware */
    hsd->MspInitCallback(hsd);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SD_MspInit(hsd);
 8009fb4:	6878      	ldr	r0, [r7, #4]
 8009fb6:	f7f7 fcdd 	bl	8001974 <HAL_SD_MspInit>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
  }

  hsd->State = HAL_SD_STATE_BUSY;
 8009fba:	687b      	ldr	r3, [r7, #4]
 8009fbc:	2203      	movs	r2, #3
 8009fbe:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

  /* Initialize the Card parameters */
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 8009fc2:	6878      	ldr	r0, [r7, #4]
 8009fc4:	f000 f868 	bl	800a098 <HAL_SD_InitCard>
 8009fc8:	4603      	mov	r3, r0
 8009fca:	2b00      	cmp	r3, #0
 8009fcc:	d001      	beq.n	8009fd2 <HAL_SD_Init+0x42>
  {
    return HAL_ERROR;
 8009fce:	2301      	movs	r3, #1
 8009fd0:	e05d      	b.n	800a08e <HAL_SD_Init+0xfe>
  }

  if (HAL_SD_GetCardStatus(hsd, &CardStatus) != HAL_OK)
 8009fd2:	f107 0308 	add.w	r3, r7, #8
 8009fd6:	4619      	mov	r1, r3
 8009fd8:	6878      	ldr	r0, [r7, #4]
 8009fda:	f000 fda7 	bl	800ab2c <HAL_SD_GetCardStatus>
 8009fde:	4603      	mov	r3, r0
 8009fe0:	2b00      	cmp	r3, #0
 8009fe2:	d001      	beq.n	8009fe8 <HAL_SD_Init+0x58>
  {
    return HAL_ERROR;
 8009fe4:	2301      	movs	r3, #1
 8009fe6:	e052      	b.n	800a08e <HAL_SD_Init+0xfe>
  }
  /* Get Initial Card Speed from Card Status*/
  speedgrade = CardStatus.UhsSpeedGrade;
 8009fe8:	7e3b      	ldrb	r3, [r7, #24]
 8009fea:	b2db      	uxtb	r3, r3
 8009fec:	627b      	str	r3, [r7, #36]	; 0x24
  unitsize = CardStatus.UhsAllocationUnitSize;
 8009fee:	7e7b      	ldrb	r3, [r7, #25]
 8009ff0:	b2db      	uxtb	r3, r3
 8009ff2:	623b      	str	r3, [r7, #32]
  if ((hsd->SdCard.CardType == CARD_SDHC_SDXC) && ((speedgrade != 0U) || (unitsize != 0U)))
 8009ff4:	687b      	ldr	r3, [r7, #4]
 8009ff6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009ff8:	2b01      	cmp	r3, #1
 8009ffa:	d10a      	bne.n	800a012 <HAL_SD_Init+0x82>
 8009ffc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009ffe:	2b00      	cmp	r3, #0
 800a000:	d102      	bne.n	800a008 <HAL_SD_Init+0x78>
 800a002:	6a3b      	ldr	r3, [r7, #32]
 800a004:	2b00      	cmp	r3, #0
 800a006:	d004      	beq.n	800a012 <HAL_SD_Init+0x82>
  {
    hsd->SdCard.CardSpeed = CARD_ULTRA_HIGH_SPEED;
 800a008:	687b      	ldr	r3, [r7, #4]
 800a00a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800a00e:	659a      	str	r2, [r3, #88]	; 0x58
 800a010:	e00b      	b.n	800a02a <HAL_SD_Init+0x9a>
  }
  else
  {
    if (hsd->SdCard.CardType == CARD_SDHC_SDXC)
 800a012:	687b      	ldr	r3, [r7, #4]
 800a014:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a016:	2b01      	cmp	r3, #1
 800a018:	d104      	bne.n	800a024 <HAL_SD_Init+0x94>
    {
      hsd->SdCard.CardSpeed  = CARD_HIGH_SPEED;
 800a01a:	687b      	ldr	r3, [r7, #4]
 800a01c:	f44f 7280 	mov.w	r2, #256	; 0x100
 800a020:	659a      	str	r2, [r3, #88]	; 0x58
 800a022:	e002      	b.n	800a02a <HAL_SD_Init+0x9a>
    }
    else
    {
      hsd->SdCard.CardSpeed  = CARD_NORMAL_SPEED;
 800a024:	687b      	ldr	r3, [r7, #4]
 800a026:	2200      	movs	r2, #0
 800a028:	659a      	str	r2, [r3, #88]	; 0x58
    }

  }
  /* Configure the bus wide */
  if (HAL_SD_ConfigWideBusOperation(hsd, hsd->Init.BusWide) != HAL_OK)
 800a02a:	687b      	ldr	r3, [r7, #4]
 800a02c:	68db      	ldr	r3, [r3, #12]
 800a02e:	4619      	mov	r1, r3
 800a030:	6878      	ldr	r0, [r7, #4]
 800a032:	f000 fe5d 	bl	800acf0 <HAL_SD_ConfigWideBusOperation>
 800a036:	4603      	mov	r3, r0
 800a038:	2b00      	cmp	r3, #0
 800a03a:	d001      	beq.n	800a040 <HAL_SD_Init+0xb0>
  {
    return HAL_ERROR;
 800a03c:	2301      	movs	r3, #1
 800a03e:	e026      	b.n	800a08e <HAL_SD_Init+0xfe>
  }

  /* Verify that SD card is ready to use after Initialization */
  tickstart = HAL_GetTick();
 800a040:	f7f8 f9b6 	bl	80023b0 <HAL_GetTick>
 800a044:	61f8      	str	r0, [r7, #28]
  while ((HAL_SD_GetCardState(hsd) != HAL_SD_CARD_TRANSFER))
 800a046:	e011      	b.n	800a06c <HAL_SD_Init+0xdc>
  {
    if ((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 800a048:	f7f8 f9b2 	bl	80023b0 <HAL_GetTick>
 800a04c:	4602      	mov	r2, r0
 800a04e:	69fb      	ldr	r3, [r7, #28]
 800a050:	1ad3      	subs	r3, r2, r3
 800a052:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a056:	d109      	bne.n	800a06c <HAL_SD_Init+0xdc>
    {
      hsd->ErrorCode = HAL_SD_ERROR_TIMEOUT;
 800a058:	687b      	ldr	r3, [r7, #4]
 800a05a:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800a05e:	635a      	str	r2, [r3, #52]	; 0x34
      hsd->State = HAL_SD_STATE_READY;
 800a060:	687b      	ldr	r3, [r7, #4]
 800a062:	2201      	movs	r2, #1
 800a064:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      return HAL_TIMEOUT;
 800a068:	2303      	movs	r3, #3
 800a06a:	e010      	b.n	800a08e <HAL_SD_Init+0xfe>
  while ((HAL_SD_GetCardState(hsd) != HAL_SD_CARD_TRANSFER))
 800a06c:	6878      	ldr	r0, [r7, #4]
 800a06e:	f000 ff4f 	bl	800af10 <HAL_SD_GetCardState>
 800a072:	4603      	mov	r3, r0
 800a074:	2b04      	cmp	r3, #4
 800a076:	d1e7      	bne.n	800a048 <HAL_SD_Init+0xb8>
    }
  }

  /* Initialize the error code */
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800a078:	687b      	ldr	r3, [r7, #4]
 800a07a:	2200      	movs	r2, #0
 800a07c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Initialize the SD operation */
  hsd->Context = SD_CONTEXT_NONE;
 800a07e:	687b      	ldr	r3, [r7, #4]
 800a080:	2200      	movs	r2, #0
 800a082:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Initialize the SD state */
  hsd->State = HAL_SD_STATE_READY;
 800a084:	687b      	ldr	r3, [r7, #4]
 800a086:	2201      	movs	r2, #1
 800a088:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

  return HAL_OK;
 800a08c:	2300      	movs	r3, #0
}
 800a08e:	4618      	mov	r0, r3
 800a090:	3728      	adds	r7, #40	; 0x28
 800a092:	46bd      	mov	sp, r7
 800a094:	bd80      	pop	{r7, pc}
	...

0800a098 <HAL_SD_InitCard>:
  * @note   This function initializes the SD card. It could be used when a card
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_InitCard(SD_HandleTypeDef *hsd)
{
 800a098:	b590      	push	{r4, r7, lr}
 800a09a:	b08d      	sub	sp, #52	; 0x34
 800a09c:	af02      	add	r7, sp, #8
 800a09e:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  SD_InitTypeDef Init;
  uint32_t sdmmc_clk;

  /* Default SDMMC peripheral configuration for SD card initialization */
  Init.ClockEdge           = SDMMC_CLOCK_EDGE_RISING;
 800a0a0:	2300      	movs	r3, #0
 800a0a2:	60fb      	str	r3, [r7, #12]
  Init.ClockPowerSave      = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 800a0a4:	2300      	movs	r3, #0
 800a0a6:	613b      	str	r3, [r7, #16]
  Init.BusWide             = SDMMC_BUS_WIDE_1B;
 800a0a8:	2300      	movs	r3, #0
 800a0aa:	617b      	str	r3, [r7, #20]
  Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 800a0ac:	2300      	movs	r3, #0
 800a0ae:	61bb      	str	r3, [r7, #24]

  /* Init Clock should be less or equal to 400Khz*/
  sdmmc_clk     = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SDMMC);
 800a0b0:	f44f 3080 	mov.w	r0, #65536	; 0x10000
 800a0b4:	f7fe fd26 	bl	8008b04 <HAL_RCCEx_GetPeriphCLKFreq>
 800a0b8:	6278      	str	r0, [r7, #36]	; 0x24
  if (sdmmc_clk == 0U)
 800a0ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a0bc:	2b00      	cmp	r3, #0
 800a0be:	d109      	bne.n	800a0d4 <HAL_SD_InitCard+0x3c>
  {
    hsd->State = HAL_SD_STATE_READY;
 800a0c0:	687b      	ldr	r3, [r7, #4]
 800a0c2:	2201      	movs	r2, #1
 800a0c4:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    hsd->ErrorCode = SDMMC_ERROR_INVALID_PARAMETER;
 800a0c8:	687b      	ldr	r3, [r7, #4]
 800a0ca:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800a0ce:	635a      	str	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 800a0d0:	2301      	movs	r3, #1
 800a0d2:	e06a      	b.n	800a1aa <HAL_SD_InitCard+0x112>
  }
  Init.ClockDiv = sdmmc_clk / (2U * SD_INIT_FREQ);
 800a0d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a0d6:	0a1b      	lsrs	r3, r3, #8
 800a0d8:	4a36      	ldr	r2, [pc, #216]	; (800a1b4 <HAL_SD_InitCard+0x11c>)
 800a0da:	fba2 2303 	umull	r2, r3, r2, r3
 800a0de:	091b      	lsrs	r3, r3, #4
 800a0e0:	61fb      	str	r3, [r7, #28]
  /* Set Transceiver polarity */
  hsd->Instance->POWER |= SDMMC_POWER_DIRPOL;
#endif /* USE_SD_TRANSCEIVER  */

  /* Initialize SDMMC peripheral interface with default configuration */
  (void)SDMMC_Init(hsd->Instance, Init);
 800a0e2:	687b      	ldr	r3, [r7, #4]
 800a0e4:	681c      	ldr	r4, [r3, #0]
 800a0e6:	466a      	mov	r2, sp
 800a0e8:	f107 0318 	add.w	r3, r7, #24
 800a0ec:	e893 0003 	ldmia.w	r3, {r0, r1}
 800a0f0:	e882 0003 	stmia.w	r2, {r0, r1}
 800a0f4:	f107 030c 	add.w	r3, r7, #12
 800a0f8:	cb0e      	ldmia	r3, {r1, r2, r3}
 800a0fa:	4620      	mov	r0, r4
 800a0fc:	f003 fce2 	bl	800dac4 <SDMMC_Init>

  /* Set Power State to ON */
  (void)SDMMC_PowerState_ON(hsd->Instance);
 800a100:	687b      	ldr	r3, [r7, #4]
 800a102:	681b      	ldr	r3, [r3, #0]
 800a104:	4618      	mov	r0, r3
 800a106:	f003 fd25 	bl	800db54 <SDMMC_PowerState_ON>

  /* wait 74 Cycles: required power up waiting time before starting
     the SD initialization sequence */
  sdmmc_clk = sdmmc_clk / (2U * Init.ClockDiv);
 800a10a:	69fb      	ldr	r3, [r7, #28]
 800a10c:	005b      	lsls	r3, r3, #1
 800a10e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a110:	fbb2 f3f3 	udiv	r3, r2, r3
 800a114:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_Delay(1U + (74U * 1000U / (sdmmc_clk)));
 800a116:	4a28      	ldr	r2, [pc, #160]	; (800a1b8 <HAL_SD_InitCard+0x120>)
 800a118:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a11a:	fbb2 f3f3 	udiv	r3, r2, r3
 800a11e:	3301      	adds	r3, #1
 800a120:	4618      	mov	r0, r3
 800a122:	f7f8 f951 	bl	80023c8 <HAL_Delay>

  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd);
 800a126:	6878      	ldr	r0, [r7, #4]
 800a128:	f000 ffce 	bl	800b0c8 <SD_PowerON>
 800a12c:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 800a12e:	6a3b      	ldr	r3, [r7, #32]
 800a130:	2b00      	cmp	r3, #0
 800a132:	d00b      	beq.n	800a14c <HAL_SD_InitCard+0xb4>
  {
    hsd->State = HAL_SD_STATE_READY;
 800a134:	687b      	ldr	r3, [r7, #4]
 800a136:	2201      	movs	r2, #1
 800a138:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    hsd->ErrorCode |= errorstate;
 800a13c:	687b      	ldr	r3, [r7, #4]
 800a13e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800a140:	6a3b      	ldr	r3, [r7, #32]
 800a142:	431a      	orrs	r2, r3
 800a144:	687b      	ldr	r3, [r7, #4]
 800a146:	635a      	str	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 800a148:	2301      	movs	r3, #1
 800a14a:	e02e      	b.n	800a1aa <HAL_SD_InitCard+0x112>
  }

  /* Card initialization */
  errorstate = SD_InitCard(hsd);
 800a14c:	6878      	ldr	r0, [r7, #4]
 800a14e:	f000 feff 	bl	800af50 <SD_InitCard>
 800a152:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 800a154:	6a3b      	ldr	r3, [r7, #32]
 800a156:	2b00      	cmp	r3, #0
 800a158:	d00b      	beq.n	800a172 <HAL_SD_InitCard+0xda>
  {
    hsd->State = HAL_SD_STATE_READY;
 800a15a:	687b      	ldr	r3, [r7, #4]
 800a15c:	2201      	movs	r2, #1
 800a15e:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    hsd->ErrorCode |= errorstate;
 800a162:	687b      	ldr	r3, [r7, #4]
 800a164:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800a166:	6a3b      	ldr	r3, [r7, #32]
 800a168:	431a      	orrs	r2, r3
 800a16a:	687b      	ldr	r3, [r7, #4]
 800a16c:	635a      	str	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 800a16e:	2301      	movs	r3, #1
 800a170:	e01b      	b.n	800a1aa <HAL_SD_InitCard+0x112>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 800a172:	687b      	ldr	r3, [r7, #4]
 800a174:	681b      	ldr	r3, [r3, #0]
 800a176:	f44f 7100 	mov.w	r1, #512	; 0x200
 800a17a:	4618      	mov	r0, r3
 800a17c:	f003 fd80 	bl	800dc80 <SDMMC_CmdBlockLength>
 800a180:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 800a182:	6a3b      	ldr	r3, [r7, #32]
 800a184:	2b00      	cmp	r3, #0
 800a186:	d00f      	beq.n	800a1a8 <HAL_SD_InitCard+0x110>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800a188:	687b      	ldr	r3, [r7, #4]
 800a18a:	681b      	ldr	r3, [r3, #0]
 800a18c:	4a0b      	ldr	r2, [pc, #44]	; (800a1bc <HAL_SD_InitCard+0x124>)
 800a18e:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 800a190:	687b      	ldr	r3, [r7, #4]
 800a192:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800a194:	6a3b      	ldr	r3, [r7, #32]
 800a196:	431a      	orrs	r2, r3
 800a198:	687b      	ldr	r3, [r7, #4]
 800a19a:	635a      	str	r2, [r3, #52]	; 0x34
    hsd->State = HAL_SD_STATE_READY;
 800a19c:	687b      	ldr	r3, [r7, #4]
 800a19e:	2201      	movs	r2, #1
 800a1a0:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    return HAL_ERROR;
 800a1a4:	2301      	movs	r3, #1
 800a1a6:	e000      	b.n	800a1aa <HAL_SD_InitCard+0x112>
  }

  return HAL_OK;
 800a1a8:	2300      	movs	r3, #0
}
 800a1aa:	4618      	mov	r0, r3
 800a1ac:	372c      	adds	r7, #44	; 0x2c
 800a1ae:	46bd      	mov	sp, r7
 800a1b0:	bd90      	pop	{r4, r7, pc}
 800a1b2:	bf00      	nop
 800a1b4:	014f8b59 	.word	0x014f8b59
 800a1b8:	00012110 	.word	0x00012110
 800a1bc:	1fe00fff 	.word	0x1fe00fff

0800a1c0 <HAL_SD_ReadBlocks_DMA>:
  * @param  NumberOfBlocks: Number of blocks to read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ReadBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd,
                                        uint32_t NumberOfBlocks)
{
 800a1c0:	b580      	push	{r7, lr}
 800a1c2:	b08c      	sub	sp, #48	; 0x30
 800a1c4:	af00      	add	r7, sp, #0
 800a1c6:	60f8      	str	r0, [r7, #12]
 800a1c8:	60b9      	str	r1, [r7, #8]
 800a1ca:	607a      	str	r2, [r7, #4]
 800a1cc:	603b      	str	r3, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 800a1ce:	687b      	ldr	r3, [r7, #4]
 800a1d0:	62bb      	str	r3, [r7, #40]	; 0x28

  if (NULL == pData)
 800a1d2:	68bb      	ldr	r3, [r7, #8]
 800a1d4:	2b00      	cmp	r3, #0
 800a1d6:	d107      	bne.n	800a1e8 <HAL_SD_ReadBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800a1d8:	68fb      	ldr	r3, [r7, #12]
 800a1da:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a1dc:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800a1e0:	68fb      	ldr	r3, [r7, #12]
 800a1e2:	635a      	str	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 800a1e4:	2301      	movs	r3, #1
 800a1e6:	e08d      	b.n	800a304 <HAL_SD_ReadBlocks_DMA+0x144>
  }

  if (hsd->State == HAL_SD_STATE_READY)
 800a1e8:	68fb      	ldr	r3, [r7, #12]
 800a1ea:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800a1ee:	b2db      	uxtb	r3, r3
 800a1f0:	2b01      	cmp	r3, #1
 800a1f2:	f040 8086 	bne.w	800a302 <HAL_SD_ReadBlocks_DMA+0x142>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800a1f6:	68fb      	ldr	r3, [r7, #12]
 800a1f8:	2200      	movs	r2, #0
 800a1fa:	635a      	str	r2, [r3, #52]	; 0x34

    if ((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 800a1fc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800a1fe:	683b      	ldr	r3, [r7, #0]
 800a200:	441a      	add	r2, r3
 800a202:	68fb      	ldr	r3, [r7, #12]
 800a204:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a206:	429a      	cmp	r2, r3
 800a208:	d907      	bls.n	800a21a <HAL_SD_ReadBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 800a20a:	68fb      	ldr	r3, [r7, #12]
 800a20c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a20e:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 800a212:	68fb      	ldr	r3, [r7, #12]
 800a214:	635a      	str	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 800a216:	2301      	movs	r3, #1
 800a218:	e074      	b.n	800a304 <HAL_SD_ReadBlocks_DMA+0x144>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 800a21a:	68fb      	ldr	r3, [r7, #12]
 800a21c:	2203      	movs	r2, #3
 800a21e:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 800a222:	68fb      	ldr	r3, [r7, #12]
 800a224:	681b      	ldr	r3, [r3, #0]
 800a226:	2200      	movs	r2, #0
 800a228:	62da      	str	r2, [r3, #44]	; 0x2c

    hsd->pRxBuffPtr = pData;
 800a22a:	68fb      	ldr	r3, [r7, #12]
 800a22c:	68ba      	ldr	r2, [r7, #8]
 800a22e:	625a      	str	r2, [r3, #36]	; 0x24
    hsd->RxXferSize = BLOCKSIZE * NumberOfBlocks;
 800a230:	683b      	ldr	r3, [r7, #0]
 800a232:	025a      	lsls	r2, r3, #9
 800a234:	68fb      	ldr	r3, [r7, #12]
 800a236:	629a      	str	r2, [r3, #40]	; 0x28

    if (hsd->SdCard.CardType != CARD_SDHC_SDXC)
 800a238:	68fb      	ldr	r3, [r7, #12]
 800a23a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a23c:	2b01      	cmp	r3, #1
 800a23e:	d002      	beq.n	800a246 <HAL_SD_ReadBlocks_DMA+0x86>
    {
      add *= 512U;
 800a240:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a242:	025b      	lsls	r3, r3, #9
 800a244:	62bb      	str	r3, [r7, #40]	; 0x28
    }

    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800a246:	f04f 33ff 	mov.w	r3, #4294967295
 800a24a:	613b      	str	r3, [r7, #16]
    config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 800a24c:	683b      	ldr	r3, [r7, #0]
 800a24e:	025b      	lsls	r3, r3, #9
 800a250:	617b      	str	r3, [r7, #20]
    config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 800a252:	2390      	movs	r3, #144	; 0x90
 800a254:	61bb      	str	r3, [r7, #24]
    config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 800a256:	2302      	movs	r3, #2
 800a258:	61fb      	str	r3, [r7, #28]
    config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 800a25a:	2300      	movs	r3, #0
 800a25c:	623b      	str	r3, [r7, #32]
    config.DPSM          = SDMMC_DPSM_DISABLE;
 800a25e:	2300      	movs	r3, #0
 800a260:	627b      	str	r3, [r7, #36]	; 0x24
    (void)SDMMC_ConfigData(hsd->Instance, &config);
 800a262:	68fb      	ldr	r3, [r7, #12]
 800a264:	681b      	ldr	r3, [r3, #0]
 800a266:	f107 0210 	add.w	r2, r7, #16
 800a26a:	4611      	mov	r1, r2
 800a26c:	4618      	mov	r0, r3
 800a26e:	f003 fcdb 	bl	800dc28 <SDMMC_ConfigData>

    __SDMMC_CMDTRANS_ENABLE(hsd->Instance);
 800a272:	68fb      	ldr	r3, [r7, #12]
 800a274:	681b      	ldr	r3, [r3, #0]
 800a276:	68da      	ldr	r2, [r3, #12]
 800a278:	68fb      	ldr	r3, [r7, #12]
 800a27a:	681b      	ldr	r3, [r3, #0]
 800a27c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800a280:	60da      	str	r2, [r3, #12]
    hsd->Instance->IDMABASE0 = (uint32_t) pData ;
 800a282:	68fb      	ldr	r3, [r7, #12]
 800a284:	681b      	ldr	r3, [r3, #0]
 800a286:	68ba      	ldr	r2, [r7, #8]
 800a288:	659a      	str	r2, [r3, #88]	; 0x58
    hsd->Instance->IDMACTRL  = SDMMC_ENABLE_IDMA_SINGLE_BUFF;
 800a28a:	68fb      	ldr	r3, [r7, #12]
 800a28c:	681b      	ldr	r3, [r3, #0]
 800a28e:	2201      	movs	r2, #1
 800a290:	651a      	str	r2, [r3, #80]	; 0x50

    /* Read Blocks in DMA mode */
    if (NumberOfBlocks > 1U)
 800a292:	683b      	ldr	r3, [r7, #0]
 800a294:	2b01      	cmp	r3, #1
 800a296:	d90a      	bls.n	800a2ae <HAL_SD_ReadBlocks_DMA+0xee>
    {
      hsd->Context = (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 800a298:	68fb      	ldr	r3, [r7, #12]
 800a29a:	2282      	movs	r2, #130	; 0x82
 800a29c:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Read Multi Block command */
      errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, add);
 800a29e:	68fb      	ldr	r3, [r7, #12]
 800a2a0:	681b      	ldr	r3, [r3, #0]
 800a2a2:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800a2a4:	4618      	mov	r0, r3
 800a2a6:	f003 fd31 	bl	800dd0c <SDMMC_CmdReadMultiBlock>
 800a2aa:	62f8      	str	r0, [r7, #44]	; 0x2c
 800a2ac:	e009      	b.n	800a2c2 <HAL_SD_ReadBlocks_DMA+0x102>
    }
    else
    {
      hsd->Context = (SD_CONTEXT_READ_SINGLE_BLOCK | SD_CONTEXT_DMA);
 800a2ae:	68fb      	ldr	r3, [r7, #12]
 800a2b0:	2281      	movs	r2, #129	; 0x81
 800a2b2:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Read Single Block command */
      errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, add);
 800a2b4:	68fb      	ldr	r3, [r7, #12]
 800a2b6:	681b      	ldr	r3, [r3, #0]
 800a2b8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800a2ba:	4618      	mov	r0, r3
 800a2bc:	f003 fd03 	bl	800dcc6 <SDMMC_CmdReadSingleBlock>
 800a2c0:	62f8      	str	r0, [r7, #44]	; 0x2c
    }
    if (errorstate != HAL_SD_ERROR_NONE)
 800a2c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a2c4:	2b00      	cmp	r3, #0
 800a2c6:	d012      	beq.n	800a2ee <HAL_SD_ReadBlocks_DMA+0x12e>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800a2c8:	68fb      	ldr	r3, [r7, #12]
 800a2ca:	681b      	ldr	r3, [r3, #0]
 800a2cc:	4a0f      	ldr	r2, [pc, #60]	; (800a30c <HAL_SD_ReadBlocks_DMA+0x14c>)
 800a2ce:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 800a2d0:	68fb      	ldr	r3, [r7, #12]
 800a2d2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800a2d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a2d6:	431a      	orrs	r2, r3
 800a2d8:	68fb      	ldr	r3, [r7, #12]
 800a2da:	635a      	str	r2, [r3, #52]	; 0x34
      hsd->State = HAL_SD_STATE_READY;
 800a2dc:	68fb      	ldr	r3, [r7, #12]
 800a2de:	2201      	movs	r2, #1
 800a2e0:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      hsd->Context = SD_CONTEXT_NONE;
 800a2e4:	68fb      	ldr	r3, [r7, #12]
 800a2e6:	2200      	movs	r2, #0
 800a2e8:	62da      	str	r2, [r3, #44]	; 0x2c
      return HAL_ERROR;
 800a2ea:	2301      	movs	r3, #1
 800a2ec:	e00a      	b.n	800a304 <HAL_SD_ReadBlocks_DMA+0x144>
    }

    /* Enable transfer interrupts */
    __HAL_SD_ENABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_RXOVERR | SDMMC_IT_DATAEND));
 800a2ee:	68fb      	ldr	r3, [r7, #12]
 800a2f0:	681b      	ldr	r3, [r3, #0]
 800a2f2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800a2f4:	68fb      	ldr	r3, [r7, #12]
 800a2f6:	681b      	ldr	r3, [r3, #0]
 800a2f8:	f442 7295 	orr.w	r2, r2, #298	; 0x12a
 800a2fc:	63da      	str	r2, [r3, #60]	; 0x3c


    return HAL_OK;
 800a2fe:	2300      	movs	r3, #0
 800a300:	e000      	b.n	800a304 <HAL_SD_ReadBlocks_DMA+0x144>
  }
  else
  {
    return HAL_BUSY;
 800a302:	2302      	movs	r3, #2
  }
}
 800a304:	4618      	mov	r0, r3
 800a306:	3730      	adds	r7, #48	; 0x30
 800a308:	46bd      	mov	sp, r7
 800a30a:	bd80      	pop	{r7, pc}
 800a30c:	1fe00fff 	.word	0x1fe00fff

0800a310 <HAL_SD_WriteBlocks_DMA>:
  * @param  NumberOfBlocks: Number of blocks to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_WriteBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd,
                                         uint32_t NumberOfBlocks)
{
 800a310:	b580      	push	{r7, lr}
 800a312:	b08c      	sub	sp, #48	; 0x30
 800a314:	af00      	add	r7, sp, #0
 800a316:	60f8      	str	r0, [r7, #12]
 800a318:	60b9      	str	r1, [r7, #8]
 800a31a:	607a      	str	r2, [r7, #4]
 800a31c:	603b      	str	r3, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 800a31e:	687b      	ldr	r3, [r7, #4]
 800a320:	62bb      	str	r3, [r7, #40]	; 0x28

  if (NULL == pData)
 800a322:	68bb      	ldr	r3, [r7, #8]
 800a324:	2b00      	cmp	r3, #0
 800a326:	d107      	bne.n	800a338 <HAL_SD_WriteBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800a328:	68fb      	ldr	r3, [r7, #12]
 800a32a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a32c:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800a330:	68fb      	ldr	r3, [r7, #12]
 800a332:	635a      	str	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 800a334:	2301      	movs	r3, #1
 800a336:	e08d      	b.n	800a454 <HAL_SD_WriteBlocks_DMA+0x144>
  }

  if (hsd->State == HAL_SD_STATE_READY)
 800a338:	68fb      	ldr	r3, [r7, #12]
 800a33a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800a33e:	b2db      	uxtb	r3, r3
 800a340:	2b01      	cmp	r3, #1
 800a342:	f040 8086 	bne.w	800a452 <HAL_SD_WriteBlocks_DMA+0x142>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800a346:	68fb      	ldr	r3, [r7, #12]
 800a348:	2200      	movs	r2, #0
 800a34a:	635a      	str	r2, [r3, #52]	; 0x34

    if ((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 800a34c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800a34e:	683b      	ldr	r3, [r7, #0]
 800a350:	441a      	add	r2, r3
 800a352:	68fb      	ldr	r3, [r7, #12]
 800a354:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a356:	429a      	cmp	r2, r3
 800a358:	d907      	bls.n	800a36a <HAL_SD_WriteBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 800a35a:	68fb      	ldr	r3, [r7, #12]
 800a35c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a35e:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 800a362:	68fb      	ldr	r3, [r7, #12]
 800a364:	635a      	str	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 800a366:	2301      	movs	r3, #1
 800a368:	e074      	b.n	800a454 <HAL_SD_WriteBlocks_DMA+0x144>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 800a36a:	68fb      	ldr	r3, [r7, #12]
 800a36c:	2203      	movs	r2, #3
 800a36e:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 800a372:	68fb      	ldr	r3, [r7, #12]
 800a374:	681b      	ldr	r3, [r3, #0]
 800a376:	2200      	movs	r2, #0
 800a378:	62da      	str	r2, [r3, #44]	; 0x2c

    hsd->pTxBuffPtr = pData;
 800a37a:	68fb      	ldr	r3, [r7, #12]
 800a37c:	68ba      	ldr	r2, [r7, #8]
 800a37e:	61da      	str	r2, [r3, #28]
    hsd->TxXferSize = BLOCKSIZE * NumberOfBlocks;
 800a380:	683b      	ldr	r3, [r7, #0]
 800a382:	025a      	lsls	r2, r3, #9
 800a384:	68fb      	ldr	r3, [r7, #12]
 800a386:	621a      	str	r2, [r3, #32]

    if (hsd->SdCard.CardType != CARD_SDHC_SDXC)
 800a388:	68fb      	ldr	r3, [r7, #12]
 800a38a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a38c:	2b01      	cmp	r3, #1
 800a38e:	d002      	beq.n	800a396 <HAL_SD_WriteBlocks_DMA+0x86>
    {
      add *= 512U;
 800a390:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a392:	025b      	lsls	r3, r3, #9
 800a394:	62bb      	str	r3, [r7, #40]	; 0x28
    }

    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800a396:	f04f 33ff 	mov.w	r3, #4294967295
 800a39a:	613b      	str	r3, [r7, #16]
    config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 800a39c:	683b      	ldr	r3, [r7, #0]
 800a39e:	025b      	lsls	r3, r3, #9
 800a3a0:	617b      	str	r3, [r7, #20]
    config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 800a3a2:	2390      	movs	r3, #144	; 0x90
 800a3a4:	61bb      	str	r3, [r7, #24]
    config.TransferDir   = SDMMC_TRANSFER_DIR_TO_CARD;
 800a3a6:	2300      	movs	r3, #0
 800a3a8:	61fb      	str	r3, [r7, #28]
    config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 800a3aa:	2300      	movs	r3, #0
 800a3ac:	623b      	str	r3, [r7, #32]
    config.DPSM          = SDMMC_DPSM_DISABLE;
 800a3ae:	2300      	movs	r3, #0
 800a3b0:	627b      	str	r3, [r7, #36]	; 0x24
    (void)SDMMC_ConfigData(hsd->Instance, &config);
 800a3b2:	68fb      	ldr	r3, [r7, #12]
 800a3b4:	681b      	ldr	r3, [r3, #0]
 800a3b6:	f107 0210 	add.w	r2, r7, #16
 800a3ba:	4611      	mov	r1, r2
 800a3bc:	4618      	mov	r0, r3
 800a3be:	f003 fc33 	bl	800dc28 <SDMMC_ConfigData>


    __SDMMC_CMDTRANS_ENABLE(hsd->Instance);
 800a3c2:	68fb      	ldr	r3, [r7, #12]
 800a3c4:	681b      	ldr	r3, [r3, #0]
 800a3c6:	68da      	ldr	r2, [r3, #12]
 800a3c8:	68fb      	ldr	r3, [r7, #12]
 800a3ca:	681b      	ldr	r3, [r3, #0]
 800a3cc:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800a3d0:	60da      	str	r2, [r3, #12]

    hsd->Instance->IDMABASE0 = (uint32_t) pData ;
 800a3d2:	68fb      	ldr	r3, [r7, #12]
 800a3d4:	681b      	ldr	r3, [r3, #0]
 800a3d6:	68ba      	ldr	r2, [r7, #8]
 800a3d8:	659a      	str	r2, [r3, #88]	; 0x58
    hsd->Instance->IDMACTRL  = SDMMC_ENABLE_IDMA_SINGLE_BUFF;
 800a3da:	68fb      	ldr	r3, [r7, #12]
 800a3dc:	681b      	ldr	r3, [r3, #0]
 800a3de:	2201      	movs	r2, #1
 800a3e0:	651a      	str	r2, [r3, #80]	; 0x50

    /* Write Blocks in Polling mode */
    if (NumberOfBlocks > 1U)
 800a3e2:	683b      	ldr	r3, [r7, #0]
 800a3e4:	2b01      	cmp	r3, #1
 800a3e6:	d90a      	bls.n	800a3fe <HAL_SD_WriteBlocks_DMA+0xee>
    {
      hsd->Context = (SD_CONTEXT_WRITE_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 800a3e8:	68fb      	ldr	r3, [r7, #12]
 800a3ea:	22a0      	movs	r2, #160	; 0xa0
 800a3ec:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Write Multi Block command */
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
 800a3ee:	68fb      	ldr	r3, [r7, #12]
 800a3f0:	681b      	ldr	r3, [r3, #0]
 800a3f2:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800a3f4:	4618      	mov	r0, r3
 800a3f6:	f003 fccf 	bl	800dd98 <SDMMC_CmdWriteMultiBlock>
 800a3fa:	62f8      	str	r0, [r7, #44]	; 0x2c
 800a3fc:	e009      	b.n	800a412 <HAL_SD_WriteBlocks_DMA+0x102>
    }
    else
    {
      hsd->Context = (SD_CONTEXT_WRITE_SINGLE_BLOCK | SD_CONTEXT_DMA);
 800a3fe:	68fb      	ldr	r3, [r7, #12]
 800a400:	2290      	movs	r2, #144	; 0x90
 800a402:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Write Single Block command */
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, add);
 800a404:	68fb      	ldr	r3, [r7, #12]
 800a406:	681b      	ldr	r3, [r3, #0]
 800a408:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800a40a:	4618      	mov	r0, r3
 800a40c:	f003 fca1 	bl	800dd52 <SDMMC_CmdWriteSingleBlock>
 800a410:	62f8      	str	r0, [r7, #44]	; 0x2c
    }
    if (errorstate != HAL_SD_ERROR_NONE)
 800a412:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a414:	2b00      	cmp	r3, #0
 800a416:	d012      	beq.n	800a43e <HAL_SD_WriteBlocks_DMA+0x12e>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800a418:	68fb      	ldr	r3, [r7, #12]
 800a41a:	681b      	ldr	r3, [r3, #0]
 800a41c:	4a0f      	ldr	r2, [pc, #60]	; (800a45c <HAL_SD_WriteBlocks_DMA+0x14c>)
 800a41e:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 800a420:	68fb      	ldr	r3, [r7, #12]
 800a422:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800a424:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a426:	431a      	orrs	r2, r3
 800a428:	68fb      	ldr	r3, [r7, #12]
 800a42a:	635a      	str	r2, [r3, #52]	; 0x34
      hsd->State = HAL_SD_STATE_READY;
 800a42c:	68fb      	ldr	r3, [r7, #12]
 800a42e:	2201      	movs	r2, #1
 800a430:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      hsd->Context = SD_CONTEXT_NONE;
 800a434:	68fb      	ldr	r3, [r7, #12]
 800a436:	2200      	movs	r2, #0
 800a438:	62da      	str	r2, [r3, #44]	; 0x2c
      return HAL_ERROR;
 800a43a:	2301      	movs	r3, #1
 800a43c:	e00a      	b.n	800a454 <HAL_SD_WriteBlocks_DMA+0x144>
    }

    /* Enable transfer interrupts */
    __HAL_SD_ENABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_TXUNDERR | SDMMC_IT_DATAEND));
 800a43e:	68fb      	ldr	r3, [r7, #12]
 800a440:	681b      	ldr	r3, [r3, #0]
 800a442:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800a444:	68fb      	ldr	r3, [r7, #12]
 800a446:	681b      	ldr	r3, [r3, #0]
 800a448:	f442 728d 	orr.w	r2, r2, #282	; 0x11a
 800a44c:	63da      	str	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800a44e:	2300      	movs	r3, #0
 800a450:	e000      	b.n	800a454 <HAL_SD_WriteBlocks_DMA+0x144>
  }
  else
  {
    return HAL_BUSY;
 800a452:	2302      	movs	r3, #2
  }
}
 800a454:	4618      	mov	r0, r3
 800a456:	3730      	adds	r7, #48	; 0x30
 800a458:	46bd      	mov	sp, r7
 800a45a:	bd80      	pop	{r7, pc}
 800a45c:	1fe00fff 	.word	0x1fe00fff

0800a460 <HAL_SD_IRQHandler>:
  * @brief  This function handles SD card interrupt request.
  * @param  hsd: Pointer to SD handle
  * @retval None
  */
void HAL_SD_IRQHandler(SD_HandleTypeDef *hsd)
{
 800a460:	b580      	push	{r7, lr}
 800a462:	b084      	sub	sp, #16
 800a464:	af00      	add	r7, sp, #0
 800a466:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  uint32_t context = hsd->Context;
 800a468:	687b      	ldr	r3, [r7, #4]
 800a46a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a46c:	60fb      	str	r3, [r7, #12]

  /* Check for SDMMC interrupt flags */
  if ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOHF) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 800a46e:	687b      	ldr	r3, [r7, #4]
 800a470:	681b      	ldr	r3, [r3, #0]
 800a472:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a474:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800a478:	2b00      	cmp	r3, #0
 800a47a:	d008      	beq.n	800a48e <HAL_SD_IRQHandler+0x2e>
 800a47c:	68fb      	ldr	r3, [r7, #12]
 800a47e:	f003 0308 	and.w	r3, r3, #8
 800a482:	2b00      	cmp	r3, #0
 800a484:	d003      	beq.n	800a48e <HAL_SD_IRQHandler+0x2e>
  {
    SD_Read_IT(hsd);
 800a486:	6878      	ldr	r0, [r7, #4]
 800a488:	f001 f906 	bl	800b698 <SD_Read_IT>
 800a48c:	e19a      	b.n	800a7c4 <HAL_SD_IRQHandler+0x364>
  }

  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DATAEND) != RESET)
 800a48e:	687b      	ldr	r3, [r7, #4]
 800a490:	681b      	ldr	r3, [r3, #0]
 800a492:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a494:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a498:	2b00      	cmp	r3, #0
 800a49a:	f000 80ac 	beq.w	800a5f6 <HAL_SD_IRQHandler+0x196>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DATAEND);
 800a49e:	687b      	ldr	r3, [r7, #4]
 800a4a0:	681b      	ldr	r3, [r3, #0]
 800a4a2:	f44f 7280 	mov.w	r2, #256	; 0x100
 800a4a6:	639a      	str	r2, [r3, #56]	; 0x38

    __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_DATAEND  | SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | \
 800a4a8:	687b      	ldr	r3, [r7, #4]
 800a4aa:	681b      	ldr	r3, [r3, #0]
 800a4ac:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 800a4ae:	687b      	ldr	r3, [r7, #4]
 800a4b0:	681a      	ldr	r2, [r3, #0]
 800a4b2:	4b59      	ldr	r3, [pc, #356]	; (800a618 <HAL_SD_IRQHandler+0x1b8>)
 800a4b4:	400b      	ands	r3, r1
 800a4b6:	63d3      	str	r3, [r2, #60]	; 0x3c
                        SDMMC_IT_TXUNDERR | SDMMC_IT_RXOVERR  | SDMMC_IT_TXFIFOHE | \
                        SDMMC_IT_RXFIFOHF);

    __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_IDMABTC);
 800a4b8:	687b      	ldr	r3, [r7, #4]
 800a4ba:	681b      	ldr	r3, [r3, #0]
 800a4bc:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800a4be:	687b      	ldr	r3, [r7, #4]
 800a4c0:	681b      	ldr	r3, [r3, #0]
 800a4c2:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
 800a4c6:	63da      	str	r2, [r3, #60]	; 0x3c
    __SDMMC_CMDTRANS_DISABLE(hsd->Instance);
 800a4c8:	687b      	ldr	r3, [r7, #4]
 800a4ca:	681b      	ldr	r3, [r3, #0]
 800a4cc:	68da      	ldr	r2, [r3, #12]
 800a4ce:	687b      	ldr	r3, [r7, #4]
 800a4d0:	681b      	ldr	r3, [r3, #0]
 800a4d2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800a4d6:	60da      	str	r2, [r3, #12]

    if ((context & SD_CONTEXT_IT) != 0U)
 800a4d8:	68fb      	ldr	r3, [r7, #12]
 800a4da:	f003 0308 	and.w	r3, r3, #8
 800a4de:	2b00      	cmp	r3, #0
 800a4e0:	d038      	beq.n	800a554 <HAL_SD_IRQHandler+0xf4>
    {
      if (((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 800a4e2:	68fb      	ldr	r3, [r7, #12]
 800a4e4:	f003 0302 	and.w	r3, r3, #2
 800a4e8:	2b00      	cmp	r3, #0
 800a4ea:	d104      	bne.n	800a4f6 <HAL_SD_IRQHandler+0x96>
 800a4ec:	68fb      	ldr	r3, [r7, #12]
 800a4ee:	f003 0320 	and.w	r3, r3, #32
 800a4f2:	2b00      	cmp	r3, #0
 800a4f4:	d011      	beq.n	800a51a <HAL_SD_IRQHandler+0xba>
      {
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 800a4f6:	687b      	ldr	r3, [r7, #4]
 800a4f8:	681b      	ldr	r3, [r3, #0]
 800a4fa:	4618      	mov	r0, r3
 800a4fc:	f003 fc70 	bl	800dde0 <SDMMC_CmdStopTransfer>
 800a500:	60b8      	str	r0, [r7, #8]
        if (errorstate != HAL_SD_ERROR_NONE)
 800a502:	68bb      	ldr	r3, [r7, #8]
 800a504:	2b00      	cmp	r3, #0
 800a506:	d008      	beq.n	800a51a <HAL_SD_IRQHandler+0xba>
        {
          hsd->ErrorCode |= errorstate;
 800a508:	687b      	ldr	r3, [r7, #4]
 800a50a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800a50c:	68bb      	ldr	r3, [r7, #8]
 800a50e:	431a      	orrs	r2, r3
 800a510:	687b      	ldr	r3, [r7, #4]
 800a512:	635a      	str	r2, [r3, #52]	; 0x34
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
          hsd->ErrorCallback(hsd);
#else
          HAL_SD_ErrorCallback(hsd);
 800a514:	6878      	ldr	r0, [r7, #4]
 800a516:	f000 f95b 	bl	800a7d0 <HAL_SD_ErrorCallback>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
        }
      }

      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 800a51a:	687b      	ldr	r3, [r7, #4]
 800a51c:	681b      	ldr	r3, [r3, #0]
 800a51e:	4a3f      	ldr	r2, [pc, #252]	; (800a61c <HAL_SD_IRQHandler+0x1bc>)
 800a520:	639a      	str	r2, [r3, #56]	; 0x38

      hsd->State = HAL_SD_STATE_READY;
 800a522:	687b      	ldr	r3, [r7, #4]
 800a524:	2201      	movs	r2, #1
 800a526:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      hsd->Context = SD_CONTEXT_NONE;
 800a52a:	687b      	ldr	r3, [r7, #4]
 800a52c:	2200      	movs	r2, #0
 800a52e:	62da      	str	r2, [r3, #44]	; 0x2c
      if (((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 800a530:	68fb      	ldr	r3, [r7, #12]
 800a532:	f003 0301 	and.w	r3, r3, #1
 800a536:	2b00      	cmp	r3, #0
 800a538:	d104      	bne.n	800a544 <HAL_SD_IRQHandler+0xe4>
 800a53a:	68fb      	ldr	r3, [r7, #12]
 800a53c:	f003 0302 	and.w	r3, r3, #2
 800a540:	2b00      	cmp	r3, #0
 800a542:	d003      	beq.n	800a54c <HAL_SD_IRQHandler+0xec>
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->RxCpltCallback(hsd);
#else
        HAL_SD_RxCpltCallback(hsd);
 800a544:	6878      	ldr	r0, [r7, #4]
 800a546:	f005 fc8d 	bl	800fe64 <HAL_SD_RxCpltCallback>
 800a54a:	e13b      	b.n	800a7c4 <HAL_SD_IRQHandler+0x364>
      else
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->TxCpltCallback(hsd);
#else
        HAL_SD_TxCpltCallback(hsd);
 800a54c:	6878      	ldr	r0, [r7, #4]
 800a54e:	f005 fc7f 	bl	800fe50 <HAL_SD_TxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 800a552:	e137      	b.n	800a7c4 <HAL_SD_IRQHandler+0x364>
    else if ((context & SD_CONTEXT_DMA) != 0U)
 800a554:	68fb      	ldr	r3, [r7, #12]
 800a556:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a55a:	2b00      	cmp	r3, #0
 800a55c:	f000 8132 	beq.w	800a7c4 <HAL_SD_IRQHandler+0x364>
      hsd->Instance->DLEN = 0;
 800a560:	687b      	ldr	r3, [r7, #4]
 800a562:	681b      	ldr	r3, [r3, #0]
 800a564:	2200      	movs	r2, #0
 800a566:	629a      	str	r2, [r3, #40]	; 0x28
      hsd->Instance->DCTRL = 0;
 800a568:	687b      	ldr	r3, [r7, #4]
 800a56a:	681b      	ldr	r3, [r3, #0]
 800a56c:	2200      	movs	r2, #0
 800a56e:	62da      	str	r2, [r3, #44]	; 0x2c
      hsd->Instance->IDMACTRL = SDMMC_DISABLE_IDMA;
 800a570:	687b      	ldr	r3, [r7, #4]
 800a572:	681b      	ldr	r3, [r3, #0]
 800a574:	2200      	movs	r2, #0
 800a576:	651a      	str	r2, [r3, #80]	; 0x50
      if (((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 800a578:	68fb      	ldr	r3, [r7, #12]
 800a57a:	f003 0302 	and.w	r3, r3, #2
 800a57e:	2b00      	cmp	r3, #0
 800a580:	d104      	bne.n	800a58c <HAL_SD_IRQHandler+0x12c>
 800a582:	68fb      	ldr	r3, [r7, #12]
 800a584:	f003 0320 	and.w	r3, r3, #32
 800a588:	2b00      	cmp	r3, #0
 800a58a:	d011      	beq.n	800a5b0 <HAL_SD_IRQHandler+0x150>
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 800a58c:	687b      	ldr	r3, [r7, #4]
 800a58e:	681b      	ldr	r3, [r3, #0]
 800a590:	4618      	mov	r0, r3
 800a592:	f003 fc25 	bl	800dde0 <SDMMC_CmdStopTransfer>
 800a596:	60b8      	str	r0, [r7, #8]
        if (errorstate != HAL_SD_ERROR_NONE)
 800a598:	68bb      	ldr	r3, [r7, #8]
 800a59a:	2b00      	cmp	r3, #0
 800a59c:	d008      	beq.n	800a5b0 <HAL_SD_IRQHandler+0x150>
          hsd->ErrorCode |= errorstate;
 800a59e:	687b      	ldr	r3, [r7, #4]
 800a5a0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800a5a2:	68bb      	ldr	r3, [r7, #8]
 800a5a4:	431a      	orrs	r2, r3
 800a5a6:	687b      	ldr	r3, [r7, #4]
 800a5a8:	635a      	str	r2, [r3, #52]	; 0x34
          HAL_SD_ErrorCallback(hsd);
 800a5aa:	6878      	ldr	r0, [r7, #4]
 800a5ac:	f000 f910 	bl	800a7d0 <HAL_SD_ErrorCallback>
      hsd->State = HAL_SD_STATE_READY;
 800a5b0:	687b      	ldr	r3, [r7, #4]
 800a5b2:	2201      	movs	r2, #1
 800a5b4:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      hsd->Context = SD_CONTEXT_NONE;
 800a5b8:	687b      	ldr	r3, [r7, #4]
 800a5ba:	2200      	movs	r2, #0
 800a5bc:	62da      	str	r2, [r3, #44]	; 0x2c
      if (((context & SD_CONTEXT_WRITE_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 800a5be:	68fb      	ldr	r3, [r7, #12]
 800a5c0:	f003 0310 	and.w	r3, r3, #16
 800a5c4:	2b00      	cmp	r3, #0
 800a5c6:	d104      	bne.n	800a5d2 <HAL_SD_IRQHandler+0x172>
 800a5c8:	68fb      	ldr	r3, [r7, #12]
 800a5ca:	f003 0320 	and.w	r3, r3, #32
 800a5ce:	2b00      	cmp	r3, #0
 800a5d0:	d002      	beq.n	800a5d8 <HAL_SD_IRQHandler+0x178>
        HAL_SD_TxCpltCallback(hsd);
 800a5d2:	6878      	ldr	r0, [r7, #4]
 800a5d4:	f005 fc3c 	bl	800fe50 <HAL_SD_TxCpltCallback>
      if (((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 800a5d8:	68fb      	ldr	r3, [r7, #12]
 800a5da:	f003 0301 	and.w	r3, r3, #1
 800a5de:	2b00      	cmp	r3, #0
 800a5e0:	d105      	bne.n	800a5ee <HAL_SD_IRQHandler+0x18e>
 800a5e2:	68fb      	ldr	r3, [r7, #12]
 800a5e4:	f003 0302 	and.w	r3, r3, #2
 800a5e8:	2b00      	cmp	r3, #0
 800a5ea:	f000 80eb 	beq.w	800a7c4 <HAL_SD_IRQHandler+0x364>
        HAL_SD_RxCpltCallback(hsd);
 800a5ee:	6878      	ldr	r0, [r7, #4]
 800a5f0:	f005 fc38 	bl	800fe64 <HAL_SD_RxCpltCallback>
}
 800a5f4:	e0e6      	b.n	800a7c4 <HAL_SD_IRQHandler+0x364>
  else if ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXFIFOHE) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 800a5f6:	687b      	ldr	r3, [r7, #4]
 800a5f8:	681b      	ldr	r3, [r3, #0]
 800a5fa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a5fc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800a600:	2b00      	cmp	r3, #0
 800a602:	d00d      	beq.n	800a620 <HAL_SD_IRQHandler+0x1c0>
 800a604:	68fb      	ldr	r3, [r7, #12]
 800a606:	f003 0308 	and.w	r3, r3, #8
 800a60a:	2b00      	cmp	r3, #0
 800a60c:	d008      	beq.n	800a620 <HAL_SD_IRQHandler+0x1c0>
    SD_Write_IT(hsd);
 800a60e:	6878      	ldr	r0, [r7, #4]
 800a610:	f001 f888 	bl	800b724 <SD_Write_IT>
 800a614:	e0d6      	b.n	800a7c4 <HAL_SD_IRQHandler+0x364>
 800a616:	bf00      	nop
 800a618:	ffff3ec5 	.word	0xffff3ec5
 800a61c:	18000f3a 	.word	0x18000f3a
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_RXOVERR |
 800a620:	687b      	ldr	r3, [r7, #4]
 800a622:	681b      	ldr	r3, [r3, #0]
 800a624:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a626:	f003 033a 	and.w	r3, r3, #58	; 0x3a
 800a62a:	2b00      	cmp	r3, #0
 800a62c:	f000 809d 	beq.w	800a76a <HAL_SD_IRQHandler+0x30a>
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_IT_DCRCFAIL) != RESET)
 800a630:	687b      	ldr	r3, [r7, #4]
 800a632:	681b      	ldr	r3, [r3, #0]
 800a634:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a636:	f003 0302 	and.w	r3, r3, #2
 800a63a:	2b00      	cmp	r3, #0
 800a63c:	d005      	beq.n	800a64a <HAL_SD_IRQHandler+0x1ea>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 800a63e:	687b      	ldr	r3, [r7, #4]
 800a640:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a642:	f043 0202 	orr.w	r2, r3, #2
 800a646:	687b      	ldr	r3, [r7, #4]
 800a648:	635a      	str	r2, [r3, #52]	; 0x34
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_IT_DTIMEOUT) != RESET)
 800a64a:	687b      	ldr	r3, [r7, #4]
 800a64c:	681b      	ldr	r3, [r3, #0]
 800a64e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a650:	f003 0308 	and.w	r3, r3, #8
 800a654:	2b00      	cmp	r3, #0
 800a656:	d005      	beq.n	800a664 <HAL_SD_IRQHandler+0x204>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 800a658:	687b      	ldr	r3, [r7, #4]
 800a65a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a65c:	f043 0208 	orr.w	r2, r3, #8
 800a660:	687b      	ldr	r3, [r7, #4]
 800a662:	635a      	str	r2, [r3, #52]	; 0x34
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_IT_RXOVERR) != RESET)
 800a664:	687b      	ldr	r3, [r7, #4]
 800a666:	681b      	ldr	r3, [r3, #0]
 800a668:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a66a:	f003 0320 	and.w	r3, r3, #32
 800a66e:	2b00      	cmp	r3, #0
 800a670:	d005      	beq.n	800a67e <HAL_SD_IRQHandler+0x21e>
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
 800a672:	687b      	ldr	r3, [r7, #4]
 800a674:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a676:	f043 0220 	orr.w	r2, r3, #32
 800a67a:	687b      	ldr	r3, [r7, #4]
 800a67c:	635a      	str	r2, [r3, #52]	; 0x34
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_IT_TXUNDERR) != RESET)
 800a67e:	687b      	ldr	r3, [r7, #4]
 800a680:	681b      	ldr	r3, [r3, #0]
 800a682:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a684:	f003 0310 	and.w	r3, r3, #16
 800a688:	2b00      	cmp	r3, #0
 800a68a:	d005      	beq.n	800a698 <HAL_SD_IRQHandler+0x238>
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
 800a68c:	687b      	ldr	r3, [r7, #4]
 800a68e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a690:	f043 0210 	orr.w	r2, r3, #16
 800a694:	687b      	ldr	r3, [r7, #4]
 800a696:	635a      	str	r2, [r3, #52]	; 0x34
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 800a698:	687b      	ldr	r3, [r7, #4]
 800a69a:	681b      	ldr	r3, [r3, #0]
 800a69c:	4a4b      	ldr	r2, [pc, #300]	; (800a7cc <HAL_SD_IRQHandler+0x36c>)
 800a69e:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_DATAEND | SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | \
 800a6a0:	687b      	ldr	r3, [r7, #4]
 800a6a2:	681b      	ldr	r3, [r3, #0]
 800a6a4:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800a6a6:	687b      	ldr	r3, [r7, #4]
 800a6a8:	681b      	ldr	r3, [r3, #0]
 800a6aa:	f422 729d 	bic.w	r2, r2, #314	; 0x13a
 800a6ae:	63da      	str	r2, [r3, #60]	; 0x3c
    __SDMMC_CMDTRANS_DISABLE(hsd->Instance);
 800a6b0:	687b      	ldr	r3, [r7, #4]
 800a6b2:	681b      	ldr	r3, [r3, #0]
 800a6b4:	68da      	ldr	r2, [r3, #12]
 800a6b6:	687b      	ldr	r3, [r7, #4]
 800a6b8:	681b      	ldr	r3, [r3, #0]
 800a6ba:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800a6be:	60da      	str	r2, [r3, #12]
    hsd->Instance->DCTRL |= SDMMC_DCTRL_FIFORST;
 800a6c0:	687b      	ldr	r3, [r7, #4]
 800a6c2:	681b      	ldr	r3, [r3, #0]
 800a6c4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a6c6:	687b      	ldr	r3, [r7, #4]
 800a6c8:	681b      	ldr	r3, [r3, #0]
 800a6ca:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800a6ce:	62da      	str	r2, [r3, #44]	; 0x2c
    hsd->Instance->CMD |= SDMMC_CMD_CMDSTOP;
 800a6d0:	687b      	ldr	r3, [r7, #4]
 800a6d2:	681b      	ldr	r3, [r3, #0]
 800a6d4:	68da      	ldr	r2, [r3, #12]
 800a6d6:	687b      	ldr	r3, [r7, #4]
 800a6d8:	681b      	ldr	r3, [r3, #0]
 800a6da:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800a6de:	60da      	str	r2, [r3, #12]
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 800a6e0:	687b      	ldr	r3, [r7, #4]
 800a6e2:	681b      	ldr	r3, [r3, #0]
 800a6e4:	4618      	mov	r0, r3
 800a6e6:	f003 fb7b 	bl	800dde0 <SDMMC_CmdStopTransfer>
 800a6ea:	4602      	mov	r2, r0
 800a6ec:	687b      	ldr	r3, [r7, #4]
 800a6ee:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a6f0:	431a      	orrs	r2, r3
 800a6f2:	687b      	ldr	r3, [r7, #4]
 800a6f4:	635a      	str	r2, [r3, #52]	; 0x34
    hsd->Instance->CMD &= ~(SDMMC_CMD_CMDSTOP);
 800a6f6:	687b      	ldr	r3, [r7, #4]
 800a6f8:	681b      	ldr	r3, [r3, #0]
 800a6fa:	68da      	ldr	r2, [r3, #12]
 800a6fc:	687b      	ldr	r3, [r7, #4]
 800a6fe:	681b      	ldr	r3, [r3, #0]
 800a700:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800a704:	60da      	str	r2, [r3, #12]
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DABORT);
 800a706:	687b      	ldr	r3, [r7, #4]
 800a708:	681b      	ldr	r3, [r3, #0]
 800a70a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800a70e:	639a      	str	r2, [r3, #56]	; 0x38
    if ((context & SD_CONTEXT_IT) != 0U)
 800a710:	68fb      	ldr	r3, [r7, #12]
 800a712:	f003 0308 	and.w	r3, r3, #8
 800a716:	2b00      	cmp	r3, #0
 800a718:	d00a      	beq.n	800a730 <HAL_SD_IRQHandler+0x2d0>
      hsd->State = HAL_SD_STATE_READY;
 800a71a:	687b      	ldr	r3, [r7, #4]
 800a71c:	2201      	movs	r2, #1
 800a71e:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      hsd->Context = SD_CONTEXT_NONE;
 800a722:	687b      	ldr	r3, [r7, #4]
 800a724:	2200      	movs	r2, #0
 800a726:	62da      	str	r2, [r3, #44]	; 0x2c
      HAL_SD_ErrorCallback(hsd);
 800a728:	6878      	ldr	r0, [r7, #4]
 800a72a:	f000 f851 	bl	800a7d0 <HAL_SD_ErrorCallback>
}
 800a72e:	e049      	b.n	800a7c4 <HAL_SD_IRQHandler+0x364>
    else if ((context & SD_CONTEXT_DMA) != 0U)
 800a730:	68fb      	ldr	r3, [r7, #12]
 800a732:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a736:	2b00      	cmp	r3, #0
 800a738:	d044      	beq.n	800a7c4 <HAL_SD_IRQHandler+0x364>
      if (hsd->ErrorCode != HAL_SD_ERROR_NONE)
 800a73a:	687b      	ldr	r3, [r7, #4]
 800a73c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a73e:	2b00      	cmp	r3, #0
 800a740:	d040      	beq.n	800a7c4 <HAL_SD_IRQHandler+0x364>
        __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_IDMABTC);
 800a742:	687b      	ldr	r3, [r7, #4]
 800a744:	681b      	ldr	r3, [r3, #0]
 800a746:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800a748:	687b      	ldr	r3, [r7, #4]
 800a74a:	681b      	ldr	r3, [r3, #0]
 800a74c:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
 800a750:	63da      	str	r2, [r3, #60]	; 0x3c
        hsd->Instance->IDMACTRL = SDMMC_DISABLE_IDMA;
 800a752:	687b      	ldr	r3, [r7, #4]
 800a754:	681b      	ldr	r3, [r3, #0]
 800a756:	2200      	movs	r2, #0
 800a758:	651a      	str	r2, [r3, #80]	; 0x50
        hsd->State = HAL_SD_STATE_READY;
 800a75a:	687b      	ldr	r3, [r7, #4]
 800a75c:	2201      	movs	r2, #1
 800a75e:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
        HAL_SD_ErrorCallback(hsd);
 800a762:	6878      	ldr	r0, [r7, #4]
 800a764:	f000 f834 	bl	800a7d0 <HAL_SD_ErrorCallback>
}
 800a768:	e02c      	b.n	800a7c4 <HAL_SD_IRQHandler+0x364>
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_IDMABTC) != RESET)
 800a76a:	687b      	ldr	r3, [r7, #4]
 800a76c:	681b      	ldr	r3, [r3, #0]
 800a76e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a770:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800a774:	2b00      	cmp	r3, #0
 800a776:	d025      	beq.n	800a7c4 <HAL_SD_IRQHandler+0x364>
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_IDMABTC);
 800a778:	687b      	ldr	r3, [r7, #4]
 800a77a:	681b      	ldr	r3, [r3, #0]
 800a77c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a780:	639a      	str	r2, [r3, #56]	; 0x38
    if (READ_BIT(hsd->Instance->IDMACTRL, SDMMC_IDMA_IDMABACT) == 0U)
 800a782:	687b      	ldr	r3, [r7, #4]
 800a784:	681b      	ldr	r3, [r3, #0]
 800a786:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a788:	f003 0304 	and.w	r3, r3, #4
 800a78c:	2b00      	cmp	r3, #0
 800a78e:	d10c      	bne.n	800a7aa <HAL_SD_IRQHandler+0x34a>
      if ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U)
 800a790:	68fb      	ldr	r3, [r7, #12]
 800a792:	f003 0320 	and.w	r3, r3, #32
 800a796:	2b00      	cmp	r3, #0
 800a798:	d003      	beq.n	800a7a2 <HAL_SD_IRQHandler+0x342>
        HAL_SDEx_Write_DMADoubleBuf1CpltCallback(hsd);
 800a79a:	6878      	ldr	r0, [r7, #4]
 800a79c:	f001 f82a 	bl	800b7f4 <HAL_SDEx_Write_DMADoubleBuf1CpltCallback>
}
 800a7a0:	e010      	b.n	800a7c4 <HAL_SD_IRQHandler+0x364>
        HAL_SDEx_Read_DMADoubleBuf1CpltCallback(hsd);
 800a7a2:	6878      	ldr	r0, [r7, #4]
 800a7a4:	f001 f812 	bl	800b7cc <HAL_SDEx_Read_DMADoubleBuf1CpltCallback>
}
 800a7a8:	e00c      	b.n	800a7c4 <HAL_SD_IRQHandler+0x364>
      if ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U)
 800a7aa:	68fb      	ldr	r3, [r7, #12]
 800a7ac:	f003 0320 	and.w	r3, r3, #32
 800a7b0:	2b00      	cmp	r3, #0
 800a7b2:	d003      	beq.n	800a7bc <HAL_SD_IRQHandler+0x35c>
        HAL_SDEx_Write_DMADoubleBuf0CpltCallback(hsd);
 800a7b4:	6878      	ldr	r0, [r7, #4]
 800a7b6:	f001 f813 	bl	800b7e0 <HAL_SDEx_Write_DMADoubleBuf0CpltCallback>
}
 800a7ba:	e003      	b.n	800a7c4 <HAL_SD_IRQHandler+0x364>
        HAL_SDEx_Read_DMADoubleBuf0CpltCallback(hsd);
 800a7bc:	6878      	ldr	r0, [r7, #4]
 800a7be:	f000 fffb 	bl	800b7b8 <HAL_SDEx_Read_DMADoubleBuf0CpltCallback>
}
 800a7c2:	e7ff      	b.n	800a7c4 <HAL_SD_IRQHandler+0x364>
 800a7c4:	bf00      	nop
 800a7c6:	3710      	adds	r7, #16
 800a7c8:	46bd      	mov	sp, r7
 800a7ca:	bd80      	pop	{r7, pc}
 800a7cc:	18000f3a 	.word	0x18000f3a

0800a7d0 <HAL_SD_ErrorCallback>:
  * @brief SD error callbacks
  * @param hsd: Pointer SD handle
  * @retval None
  */
__weak void HAL_SD_ErrorCallback(SD_HandleTypeDef *hsd)
{
 800a7d0:	b480      	push	{r7}
 800a7d2:	b083      	sub	sp, #12
 800a7d4:	af00      	add	r7, sp, #0
 800a7d6:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SD_ErrorCallback can be implemented in the user file
   */
}
 800a7d8:	bf00      	nop
 800a7da:	370c      	adds	r7, #12
 800a7dc:	46bd      	mov	sp, r7
 800a7de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7e2:	4770      	bx	lr

0800a7e4 <HAL_SD_GetCardCSD>:
  * @param  pCSD: Pointer to a HAL_SD_CardCSDTypeDef structure that
  *         contains all CSD register parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
 800a7e4:	b480      	push	{r7}
 800a7e6:	b083      	sub	sp, #12
 800a7e8:	af00      	add	r7, sp, #0
 800a7ea:	6078      	str	r0, [r7, #4]
 800a7ec:	6039      	str	r1, [r7, #0]
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 800a7ee:	687b      	ldr	r3, [r7, #4]
 800a7f0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a7f2:	0f9b      	lsrs	r3, r3, #30
 800a7f4:	b2da      	uxtb	r2, r3
 800a7f6:	683b      	ldr	r3, [r7, #0]
 800a7f8:	701a      	strb	r2, [r3, #0]

  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 800a7fa:	687b      	ldr	r3, [r7, #4]
 800a7fc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a7fe:	0e9b      	lsrs	r3, r3, #26
 800a800:	b2db      	uxtb	r3, r3
 800a802:	f003 030f 	and.w	r3, r3, #15
 800a806:	b2da      	uxtb	r2, r3
 800a808:	683b      	ldr	r3, [r7, #0]
 800a80a:	705a      	strb	r2, [r3, #1]

  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 800a80c:	687b      	ldr	r3, [r7, #4]
 800a80e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a810:	0e1b      	lsrs	r3, r3, #24
 800a812:	b2db      	uxtb	r3, r3
 800a814:	f003 0303 	and.w	r3, r3, #3
 800a818:	b2da      	uxtb	r2, r3
 800a81a:	683b      	ldr	r3, [r7, #0]
 800a81c:	709a      	strb	r2, [r3, #2]

  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 800a81e:	687b      	ldr	r3, [r7, #4]
 800a820:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a822:	0c1b      	lsrs	r3, r3, #16
 800a824:	b2da      	uxtb	r2, r3
 800a826:	683b      	ldr	r3, [r7, #0]
 800a828:	70da      	strb	r2, [r3, #3]

  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 800a82a:	687b      	ldr	r3, [r7, #4]
 800a82c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a82e:	0a1b      	lsrs	r3, r3, #8
 800a830:	b2da      	uxtb	r2, r3
 800a832:	683b      	ldr	r3, [r7, #0]
 800a834:	711a      	strb	r2, [r3, #4]

  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 800a836:	687b      	ldr	r3, [r7, #4]
 800a838:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a83a:	b2da      	uxtb	r2, r3
 800a83c:	683b      	ldr	r3, [r7, #0]
 800a83e:	715a      	strb	r2, [r3, #5]

  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 800a840:	687b      	ldr	r3, [r7, #4]
 800a842:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800a844:	0d1b      	lsrs	r3, r3, #20
 800a846:	b29a      	uxth	r2, r3
 800a848:	683b      	ldr	r3, [r7, #0]
 800a84a:	80da      	strh	r2, [r3, #6]

  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 800a84c:	687b      	ldr	r3, [r7, #4]
 800a84e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800a850:	0c1b      	lsrs	r3, r3, #16
 800a852:	b2db      	uxtb	r3, r3
 800a854:	f003 030f 	and.w	r3, r3, #15
 800a858:	b2da      	uxtb	r2, r3
 800a85a:	683b      	ldr	r3, [r7, #0]
 800a85c:	721a      	strb	r2, [r3, #8]

  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 800a85e:	687b      	ldr	r3, [r7, #4]
 800a860:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800a862:	0bdb      	lsrs	r3, r3, #15
 800a864:	b2db      	uxtb	r3, r3
 800a866:	f003 0301 	and.w	r3, r3, #1
 800a86a:	b2da      	uxtb	r2, r3
 800a86c:	683b      	ldr	r3, [r7, #0]
 800a86e:	725a      	strb	r2, [r3, #9]

  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 800a870:	687b      	ldr	r3, [r7, #4]
 800a872:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800a874:	0b9b      	lsrs	r3, r3, #14
 800a876:	b2db      	uxtb	r3, r3
 800a878:	f003 0301 	and.w	r3, r3, #1
 800a87c:	b2da      	uxtb	r2, r3
 800a87e:	683b      	ldr	r3, [r7, #0]
 800a880:	729a      	strb	r2, [r3, #10]

  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 800a882:	687b      	ldr	r3, [r7, #4]
 800a884:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800a886:	0b5b      	lsrs	r3, r3, #13
 800a888:	b2db      	uxtb	r3, r3
 800a88a:	f003 0301 	and.w	r3, r3, #1
 800a88e:	b2da      	uxtb	r2, r3
 800a890:	683b      	ldr	r3, [r7, #0]
 800a892:	72da      	strb	r2, [r3, #11]

  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 800a894:	687b      	ldr	r3, [r7, #4]
 800a896:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800a898:	0b1b      	lsrs	r3, r3, #12
 800a89a:	b2db      	uxtb	r3, r3
 800a89c:	f003 0301 	and.w	r3, r3, #1
 800a8a0:	b2da      	uxtb	r2, r3
 800a8a2:	683b      	ldr	r3, [r7, #0]
 800a8a4:	731a      	strb	r2, [r3, #12]

  pCSD->Reserved2 = 0U; /*!< Reserved */
 800a8a6:	683b      	ldr	r3, [r7, #0]
 800a8a8:	2200      	movs	r2, #0
 800a8aa:	735a      	strb	r2, [r3, #13]

  if (hsd->SdCard.CardType == CARD_SDSC)
 800a8ac:	687b      	ldr	r3, [r7, #4]
 800a8ae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a8b0:	2b00      	cmp	r3, #0
 800a8b2:	d163      	bne.n	800a97c <HAL_SD_GetCardCSD+0x198>
  {
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 800a8b4:	687b      	ldr	r3, [r7, #4]
 800a8b6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800a8b8:	009a      	lsls	r2, r3, #2
 800a8ba:	f640 73fc 	movw	r3, #4092	; 0xffc
 800a8be:	4013      	ands	r3, r2
 800a8c0:	687a      	ldr	r2, [r7, #4]
 800a8c2:	6e52      	ldr	r2, [r2, #100]	; 0x64
 800a8c4:	0f92      	lsrs	r2, r2, #30
 800a8c6:	431a      	orrs	r2, r3
 800a8c8:	683b      	ldr	r3, [r7, #0]
 800a8ca:	611a      	str	r2, [r3, #16]

    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 800a8cc:	687b      	ldr	r3, [r7, #4]
 800a8ce:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800a8d0:	0edb      	lsrs	r3, r3, #27
 800a8d2:	b2db      	uxtb	r3, r3
 800a8d4:	f003 0307 	and.w	r3, r3, #7
 800a8d8:	b2da      	uxtb	r2, r3
 800a8da:	683b      	ldr	r3, [r7, #0]
 800a8dc:	751a      	strb	r2, [r3, #20]

    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 800a8de:	687b      	ldr	r3, [r7, #4]
 800a8e0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800a8e2:	0e1b      	lsrs	r3, r3, #24
 800a8e4:	b2db      	uxtb	r3, r3
 800a8e6:	f003 0307 	and.w	r3, r3, #7
 800a8ea:	b2da      	uxtb	r2, r3
 800a8ec:	683b      	ldr	r3, [r7, #0]
 800a8ee:	755a      	strb	r2, [r3, #21]

    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 800a8f0:	687b      	ldr	r3, [r7, #4]
 800a8f2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800a8f4:	0d5b      	lsrs	r3, r3, #21
 800a8f6:	b2db      	uxtb	r3, r3
 800a8f8:	f003 0307 	and.w	r3, r3, #7
 800a8fc:	b2da      	uxtb	r2, r3
 800a8fe:	683b      	ldr	r3, [r7, #0]
 800a900:	759a      	strb	r2, [r3, #22]

    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 800a902:	687b      	ldr	r3, [r7, #4]
 800a904:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800a906:	0c9b      	lsrs	r3, r3, #18
 800a908:	b2db      	uxtb	r3, r3
 800a90a:	f003 0307 	and.w	r3, r3, #7
 800a90e:	b2da      	uxtb	r2, r3
 800a910:	683b      	ldr	r3, [r7, #0]
 800a912:	75da      	strb	r2, [r3, #23]

    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 800a914:	687b      	ldr	r3, [r7, #4]
 800a916:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800a918:	0bdb      	lsrs	r3, r3, #15
 800a91a:	b2db      	uxtb	r3, r3
 800a91c:	f003 0307 	and.w	r3, r3, #7
 800a920:	b2da      	uxtb	r2, r3
 800a922:	683b      	ldr	r3, [r7, #0]
 800a924:	761a      	strb	r2, [r3, #24]

    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 800a926:	683b      	ldr	r3, [r7, #0]
 800a928:	691b      	ldr	r3, [r3, #16]
 800a92a:	1c5a      	adds	r2, r3, #1
 800a92c:	687b      	ldr	r3, [r7, #4]
 800a92e:	649a      	str	r2, [r3, #72]	; 0x48
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 800a930:	683b      	ldr	r3, [r7, #0]
 800a932:	7e1b      	ldrb	r3, [r3, #24]
 800a934:	b2db      	uxtb	r3, r3
 800a936:	f003 0307 	and.w	r3, r3, #7
 800a93a:	3302      	adds	r3, #2
 800a93c:	2201      	movs	r2, #1
 800a93e:	fa02 f303 	lsl.w	r3, r2, r3
 800a942:	687a      	ldr	r2, [r7, #4]
 800a944:	6c92      	ldr	r2, [r2, #72]	; 0x48
 800a946:	fb03 f202 	mul.w	r2, r3, r2
 800a94a:	687b      	ldr	r3, [r7, #4]
 800a94c:	649a      	str	r2, [r3, #72]	; 0x48
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 800a94e:	683b      	ldr	r3, [r7, #0]
 800a950:	7a1b      	ldrb	r3, [r3, #8]
 800a952:	b2db      	uxtb	r3, r3
 800a954:	f003 030f 	and.w	r3, r3, #15
 800a958:	2201      	movs	r2, #1
 800a95a:	409a      	lsls	r2, r3
 800a95c:	687b      	ldr	r3, [r7, #4]
 800a95e:	64da      	str	r2, [r3, #76]	; 0x4c

    hsd->SdCard.LogBlockNbr = (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 800a960:	687b      	ldr	r3, [r7, #4]
 800a962:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800a964:	687a      	ldr	r2, [r7, #4]
 800a966:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 800a968:	0a52      	lsrs	r2, r2, #9
 800a96a:	fb03 f202 	mul.w	r2, r3, r2
 800a96e:	687b      	ldr	r3, [r7, #4]
 800a970:	651a      	str	r2, [r3, #80]	; 0x50
    hsd->SdCard.LogBlockSize = 512U;
 800a972:	687b      	ldr	r3, [r7, #4]
 800a974:	f44f 7200 	mov.w	r2, #512	; 0x200
 800a978:	655a      	str	r2, [r3, #84]	; 0x54
 800a97a:	e031      	b.n	800a9e0 <HAL_SD_GetCardCSD+0x1fc>
  }
  else if (hsd->SdCard.CardType == CARD_SDHC_SDXC)
 800a97c:	687b      	ldr	r3, [r7, #4]
 800a97e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a980:	2b01      	cmp	r3, #1
 800a982:	d11d      	bne.n	800a9c0 <HAL_SD_GetCardCSD+0x1dc>
  {
    /* Byte 7 */
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 800a984:	687b      	ldr	r3, [r7, #4]
 800a986:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800a988:	041b      	lsls	r3, r3, #16
 800a98a:	f403 127c 	and.w	r2, r3, #4128768	; 0x3f0000
 800a98e:	687b      	ldr	r3, [r7, #4]
 800a990:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800a992:	0c1b      	lsrs	r3, r3, #16
 800a994:	431a      	orrs	r2, r3
 800a996:	683b      	ldr	r3, [r7, #0]
 800a998:	611a      	str	r2, [r3, #16]

    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 800a99a:	683b      	ldr	r3, [r7, #0]
 800a99c:	691b      	ldr	r3, [r3, #16]
 800a99e:	3301      	adds	r3, #1
 800a9a0:	029a      	lsls	r2, r3, #10
 800a9a2:	687b      	ldr	r3, [r7, #4]
 800a9a4:	649a      	str	r2, [r3, #72]	; 0x48
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 800a9a6:	687b      	ldr	r3, [r7, #4]
 800a9a8:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800a9aa:	687b      	ldr	r3, [r7, #4]
 800a9ac:	651a      	str	r2, [r3, #80]	; 0x50
    hsd->SdCard.BlockSize = 512U;
 800a9ae:	687b      	ldr	r3, [r7, #4]
 800a9b0:	f44f 7200 	mov.w	r2, #512	; 0x200
 800a9b4:	64da      	str	r2, [r3, #76]	; 0x4c
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 800a9b6:	687b      	ldr	r3, [r7, #4]
 800a9b8:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800a9ba:	687b      	ldr	r3, [r7, #4]
 800a9bc:	655a      	str	r2, [r3, #84]	; 0x54
 800a9be:	e00f      	b.n	800a9e0 <HAL_SD_GetCardCSD+0x1fc>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800a9c0:	687b      	ldr	r3, [r7, #4]
 800a9c2:	681b      	ldr	r3, [r3, #0]
 800a9c4:	4a58      	ldr	r2, [pc, #352]	; (800ab28 <HAL_SD_GetCardCSD+0x344>)
 800a9c6:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800a9c8:	687b      	ldr	r3, [r7, #4]
 800a9ca:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a9cc:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800a9d0:	687b      	ldr	r3, [r7, #4]
 800a9d2:	635a      	str	r2, [r3, #52]	; 0x34
    hsd->State = HAL_SD_STATE_READY;
 800a9d4:	687b      	ldr	r3, [r7, #4]
 800a9d6:	2201      	movs	r2, #1
 800a9d8:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    return HAL_ERROR;
 800a9dc:	2301      	movs	r3, #1
 800a9de:	e09d      	b.n	800ab1c <HAL_SD_GetCardCSD+0x338>
  }

  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 800a9e0:	687b      	ldr	r3, [r7, #4]
 800a9e2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800a9e4:	0b9b      	lsrs	r3, r3, #14
 800a9e6:	b2db      	uxtb	r3, r3
 800a9e8:	f003 0301 	and.w	r3, r3, #1
 800a9ec:	b2da      	uxtb	r2, r3
 800a9ee:	683b      	ldr	r3, [r7, #0]
 800a9f0:	765a      	strb	r2, [r3, #25]

  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 800a9f2:	687b      	ldr	r3, [r7, #4]
 800a9f4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800a9f6:	09db      	lsrs	r3, r3, #7
 800a9f8:	b2db      	uxtb	r3, r3
 800a9fa:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a9fe:	b2da      	uxtb	r2, r3
 800aa00:	683b      	ldr	r3, [r7, #0]
 800aa02:	769a      	strb	r2, [r3, #26]

  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 800aa04:	687b      	ldr	r3, [r7, #4]
 800aa06:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800aa08:	b2db      	uxtb	r3, r3
 800aa0a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800aa0e:	b2da      	uxtb	r2, r3
 800aa10:	683b      	ldr	r3, [r7, #0]
 800aa12:	76da      	strb	r2, [r3, #27]

  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 800aa14:	687b      	ldr	r3, [r7, #4]
 800aa16:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800aa18:	0fdb      	lsrs	r3, r3, #31
 800aa1a:	b2da      	uxtb	r2, r3
 800aa1c:	683b      	ldr	r3, [r7, #0]
 800aa1e:	771a      	strb	r2, [r3, #28]

  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 800aa20:	687b      	ldr	r3, [r7, #4]
 800aa22:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800aa24:	0f5b      	lsrs	r3, r3, #29
 800aa26:	b2db      	uxtb	r3, r3
 800aa28:	f003 0303 	and.w	r3, r3, #3
 800aa2c:	b2da      	uxtb	r2, r3
 800aa2e:	683b      	ldr	r3, [r7, #0]
 800aa30:	775a      	strb	r2, [r3, #29]

  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 800aa32:	687b      	ldr	r3, [r7, #4]
 800aa34:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800aa36:	0e9b      	lsrs	r3, r3, #26
 800aa38:	b2db      	uxtb	r3, r3
 800aa3a:	f003 0307 	and.w	r3, r3, #7
 800aa3e:	b2da      	uxtb	r2, r3
 800aa40:	683b      	ldr	r3, [r7, #0]
 800aa42:	779a      	strb	r2, [r3, #30]

  pCSD->MaxWrBlockLen = (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 800aa44:	687b      	ldr	r3, [r7, #4]
 800aa46:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800aa48:	0d9b      	lsrs	r3, r3, #22
 800aa4a:	b2db      	uxtb	r3, r3
 800aa4c:	f003 030f 	and.w	r3, r3, #15
 800aa50:	b2da      	uxtb	r2, r3
 800aa52:	683b      	ldr	r3, [r7, #0]
 800aa54:	77da      	strb	r2, [r3, #31]

  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 800aa56:	687b      	ldr	r3, [r7, #4]
 800aa58:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800aa5a:	0d5b      	lsrs	r3, r3, #21
 800aa5c:	b2db      	uxtb	r3, r3
 800aa5e:	f003 0301 	and.w	r3, r3, #1
 800aa62:	b2da      	uxtb	r2, r3
 800aa64:	683b      	ldr	r3, [r7, #0]
 800aa66:	f883 2020 	strb.w	r2, [r3, #32]

  pCSD->Reserved3 = 0;
 800aa6a:	683b      	ldr	r3, [r7, #0]
 800aa6c:	2200      	movs	r2, #0
 800aa6e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 800aa72:	687b      	ldr	r3, [r7, #4]
 800aa74:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800aa76:	0c1b      	lsrs	r3, r3, #16
 800aa78:	b2db      	uxtb	r3, r3
 800aa7a:	f003 0301 	and.w	r3, r3, #1
 800aa7e:	b2da      	uxtb	r2, r3
 800aa80:	683b      	ldr	r3, [r7, #0]
 800aa82:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22

  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 800aa86:	687b      	ldr	r3, [r7, #4]
 800aa88:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800aa8a:	0bdb      	lsrs	r3, r3, #15
 800aa8c:	b2db      	uxtb	r3, r3
 800aa8e:	f003 0301 	and.w	r3, r3, #1
 800aa92:	b2da      	uxtb	r2, r3
 800aa94:	683b      	ldr	r3, [r7, #0]
 800aa96:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23

  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 800aa9a:	687b      	ldr	r3, [r7, #4]
 800aa9c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800aa9e:	0b9b      	lsrs	r3, r3, #14
 800aaa0:	b2db      	uxtb	r3, r3
 800aaa2:	f003 0301 	and.w	r3, r3, #1
 800aaa6:	b2da      	uxtb	r2, r3
 800aaa8:	683b      	ldr	r3, [r7, #0]
 800aaaa:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 800aaae:	687b      	ldr	r3, [r7, #4]
 800aab0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800aab2:	0b5b      	lsrs	r3, r3, #13
 800aab4:	b2db      	uxtb	r3, r3
 800aab6:	f003 0301 	and.w	r3, r3, #1
 800aaba:	b2da      	uxtb	r2, r3
 800aabc:	683b      	ldr	r3, [r7, #0]
 800aabe:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 800aac2:	687b      	ldr	r3, [r7, #4]
 800aac4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800aac6:	0b1b      	lsrs	r3, r3, #12
 800aac8:	b2db      	uxtb	r3, r3
 800aaca:	f003 0301 	and.w	r3, r3, #1
 800aace:	b2da      	uxtb	r2, r3
 800aad0:	683b      	ldr	r3, [r7, #0]
 800aad2:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26

  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 800aad6:	687b      	ldr	r3, [r7, #4]
 800aad8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800aada:	0a9b      	lsrs	r3, r3, #10
 800aadc:	b2db      	uxtb	r3, r3
 800aade:	f003 0303 	and.w	r3, r3, #3
 800aae2:	b2da      	uxtb	r2, r3
 800aae4:	683b      	ldr	r3, [r7, #0]
 800aae6:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27

  pCSD->ECC = (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 800aaea:	687b      	ldr	r3, [r7, #4]
 800aaec:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800aaee:	0a1b      	lsrs	r3, r3, #8
 800aaf0:	b2db      	uxtb	r3, r3
 800aaf2:	f003 0303 	and.w	r3, r3, #3
 800aaf6:	b2da      	uxtb	r2, r3
 800aaf8:	683b      	ldr	r3, [r7, #0]
 800aafa:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 800aafe:	687b      	ldr	r3, [r7, #4]
 800ab00:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800ab02:	085b      	lsrs	r3, r3, #1
 800ab04:	b2db      	uxtb	r3, r3
 800ab06:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800ab0a:	b2da      	uxtb	r2, r3
 800ab0c:	683b      	ldr	r3, [r7, #0]
 800ab0e:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  pCSD->Reserved4 = 1;
 800ab12:	683b      	ldr	r3, [r7, #0]
 800ab14:	2201      	movs	r2, #1
 800ab16:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a

  return HAL_OK;
 800ab1a:	2300      	movs	r3, #0
}
 800ab1c:	4618      	mov	r0, r3
 800ab1e:	370c      	adds	r7, #12
 800ab20:	46bd      	mov	sp, r7
 800ab22:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab26:	4770      	bx	lr
 800ab28:	1fe00fff 	.word	0x1fe00fff

0800ab2c <HAL_SD_GetCardStatus>:
  * @param  pStatus: Pointer to the HAL_SD_CardStatusTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardStatus(SD_HandleTypeDef *hsd, HAL_SD_CardStatusTypeDef *pStatus)
{
 800ab2c:	b580      	push	{r7, lr}
 800ab2e:	b094      	sub	sp, #80	; 0x50
 800ab30:	af00      	add	r7, sp, #0
 800ab32:	6078      	str	r0, [r7, #4]
 800ab34:	6039      	str	r1, [r7, #0]
  uint32_t sd_status[16];
  uint32_t errorstate;
  HAL_StatusTypeDef status = HAL_OK;
 800ab36:	2300      	movs	r3, #0
 800ab38:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f

  errorstate = SD_SendSDStatus(hsd, sd_status);
 800ab3c:	f107 0308 	add.w	r3, r7, #8
 800ab40:	4619      	mov	r1, r3
 800ab42:	6878      	ldr	r0, [r7, #4]
 800ab44:	f000 fb4a 	bl	800b1dc <SD_SendSDStatus>
 800ab48:	64b8      	str	r0, [r7, #72]	; 0x48
  if (errorstate != HAL_SD_ERROR_NONE)
 800ab4a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800ab4c:	2b00      	cmp	r3, #0
 800ab4e:	d011      	beq.n	800ab74 <HAL_SD_GetCardStatus+0x48>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800ab50:	687b      	ldr	r3, [r7, #4]
 800ab52:	681b      	ldr	r3, [r3, #0]
 800ab54:	4a4f      	ldr	r2, [pc, #316]	; (800ac94 <HAL_SD_GetCardStatus+0x168>)
 800ab56:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 800ab58:	687b      	ldr	r3, [r7, #4]
 800ab5a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800ab5c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800ab5e:	431a      	orrs	r2, r3
 800ab60:	687b      	ldr	r3, [r7, #4]
 800ab62:	635a      	str	r2, [r3, #52]	; 0x34
    hsd->State = HAL_SD_STATE_READY;
 800ab64:	687b      	ldr	r3, [r7, #4]
 800ab66:	2201      	movs	r2, #1
 800ab68:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    status = HAL_ERROR;
 800ab6c:	2301      	movs	r3, #1
 800ab6e:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
 800ab72:	e070      	b.n	800ac56 <HAL_SD_GetCardStatus+0x12a>
  }
  else
  {
    pStatus->DataBusWidth = (uint8_t)((sd_status[0] & 0xC0U) >> 6U);
 800ab74:	68bb      	ldr	r3, [r7, #8]
 800ab76:	099b      	lsrs	r3, r3, #6
 800ab78:	b2db      	uxtb	r3, r3
 800ab7a:	f003 0303 	and.w	r3, r3, #3
 800ab7e:	b2da      	uxtb	r2, r3
 800ab80:	683b      	ldr	r3, [r7, #0]
 800ab82:	701a      	strb	r2, [r3, #0]

    pStatus->SecuredMode = (uint8_t)((sd_status[0] & 0x20U) >> 5U);
 800ab84:	68bb      	ldr	r3, [r7, #8]
 800ab86:	095b      	lsrs	r3, r3, #5
 800ab88:	b2db      	uxtb	r3, r3
 800ab8a:	f003 0301 	and.w	r3, r3, #1
 800ab8e:	b2da      	uxtb	r2, r3
 800ab90:	683b      	ldr	r3, [r7, #0]
 800ab92:	705a      	strb	r2, [r3, #1]

    pStatus->CardType = (uint16_t)(((sd_status[0] & 0x00FF0000U) >> 8U) | ((sd_status[0] & 0xFF000000U) >> 24U));
 800ab94:	68bb      	ldr	r3, [r7, #8]
 800ab96:	0a1b      	lsrs	r3, r3, #8
 800ab98:	b29b      	uxth	r3, r3
 800ab9a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800ab9e:	b29a      	uxth	r2, r3
 800aba0:	68bb      	ldr	r3, [r7, #8]
 800aba2:	0e1b      	lsrs	r3, r3, #24
 800aba4:	b29b      	uxth	r3, r3
 800aba6:	4313      	orrs	r3, r2
 800aba8:	b29a      	uxth	r2, r3
 800abaa:	683b      	ldr	r3, [r7, #0]
 800abac:	805a      	strh	r2, [r3, #2]

    pStatus->ProtectedAreaSize = (((sd_status[1] & 0xFFU) << 24U)    | ((sd_status[1] & 0xFF00U) << 8U) |
 800abae:	68fb      	ldr	r3, [r7, #12]
 800abb0:	061a      	lsls	r2, r3, #24
 800abb2:	68fb      	ldr	r3, [r7, #12]
 800abb4:	021b      	lsls	r3, r3, #8
 800abb6:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800abba:	431a      	orrs	r2, r3
                                  ((sd_status[1] & 0xFF0000U) >> 8U) | ((sd_status[1] & 0xFF000000U) >> 24U));
 800abbc:	68fb      	ldr	r3, [r7, #12]
 800abbe:	0a1b      	lsrs	r3, r3, #8
 800abc0:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    pStatus->ProtectedAreaSize = (((sd_status[1] & 0xFFU) << 24U)    | ((sd_status[1] & 0xFF00U) << 8U) |
 800abc4:	431a      	orrs	r2, r3
                                  ((sd_status[1] & 0xFF0000U) >> 8U) | ((sd_status[1] & 0xFF000000U) >> 24U));
 800abc6:	68fb      	ldr	r3, [r7, #12]
 800abc8:	0e1b      	lsrs	r3, r3, #24
 800abca:	431a      	orrs	r2, r3
    pStatus->ProtectedAreaSize = (((sd_status[1] & 0xFFU) << 24U)    | ((sd_status[1] & 0xFF00U) << 8U) |
 800abcc:	683b      	ldr	r3, [r7, #0]
 800abce:	605a      	str	r2, [r3, #4]

    pStatus->SpeedClass = (uint8_t)(sd_status[2] & 0xFFU);
 800abd0:	693b      	ldr	r3, [r7, #16]
 800abd2:	b2da      	uxtb	r2, r3
 800abd4:	683b      	ldr	r3, [r7, #0]
 800abd6:	721a      	strb	r2, [r3, #8]

    pStatus->PerformanceMove = (uint8_t)((sd_status[2] & 0xFF00U) >> 8U);
 800abd8:	693b      	ldr	r3, [r7, #16]
 800abda:	0a1b      	lsrs	r3, r3, #8
 800abdc:	b2da      	uxtb	r2, r3
 800abde:	683b      	ldr	r3, [r7, #0]
 800abe0:	725a      	strb	r2, [r3, #9]

    pStatus->AllocationUnitSize = (uint8_t)((sd_status[2] & 0xF00000U) >> 20U);
 800abe2:	693b      	ldr	r3, [r7, #16]
 800abe4:	0d1b      	lsrs	r3, r3, #20
 800abe6:	b2db      	uxtb	r3, r3
 800abe8:	f003 030f 	and.w	r3, r3, #15
 800abec:	b2da      	uxtb	r2, r3
 800abee:	683b      	ldr	r3, [r7, #0]
 800abf0:	729a      	strb	r2, [r3, #10]

    pStatus->EraseSize = (uint16_t)(((sd_status[2] & 0xFF000000U) >> 16U) | (sd_status[3] & 0xFFU));
 800abf2:	693b      	ldr	r3, [r7, #16]
 800abf4:	0c1b      	lsrs	r3, r3, #16
 800abf6:	b29b      	uxth	r3, r3
 800abf8:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800abfc:	b29a      	uxth	r2, r3
 800abfe:	697b      	ldr	r3, [r7, #20]
 800ac00:	b29b      	uxth	r3, r3
 800ac02:	b2db      	uxtb	r3, r3
 800ac04:	b29b      	uxth	r3, r3
 800ac06:	4313      	orrs	r3, r2
 800ac08:	b29a      	uxth	r2, r3
 800ac0a:	683b      	ldr	r3, [r7, #0]
 800ac0c:	819a      	strh	r2, [r3, #12]

    pStatus->EraseTimeout = (uint8_t)((sd_status[3] & 0xFC00U) >> 10U);
 800ac0e:	697b      	ldr	r3, [r7, #20]
 800ac10:	0a9b      	lsrs	r3, r3, #10
 800ac12:	b2db      	uxtb	r3, r3
 800ac14:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800ac18:	b2da      	uxtb	r2, r3
 800ac1a:	683b      	ldr	r3, [r7, #0]
 800ac1c:	739a      	strb	r2, [r3, #14]

    pStatus->EraseOffset = (uint8_t)((sd_status[3] & 0x0300U) >> 8U);
 800ac1e:	697b      	ldr	r3, [r7, #20]
 800ac20:	0a1b      	lsrs	r3, r3, #8
 800ac22:	b2db      	uxtb	r3, r3
 800ac24:	f003 0303 	and.w	r3, r3, #3
 800ac28:	b2da      	uxtb	r2, r3
 800ac2a:	683b      	ldr	r3, [r7, #0]
 800ac2c:	73da      	strb	r2, [r3, #15]

    pStatus->UhsSpeedGrade = (uint8_t)((sd_status[3] & 0x00F0U) >> 4U);
 800ac2e:	697b      	ldr	r3, [r7, #20]
 800ac30:	091b      	lsrs	r3, r3, #4
 800ac32:	b2db      	uxtb	r3, r3
 800ac34:	f003 030f 	and.w	r3, r3, #15
 800ac38:	b2da      	uxtb	r2, r3
 800ac3a:	683b      	ldr	r3, [r7, #0]
 800ac3c:	741a      	strb	r2, [r3, #16]
    pStatus->UhsAllocationUnitSize = (uint8_t)(sd_status[3] & 0x000FU) ;
 800ac3e:	697b      	ldr	r3, [r7, #20]
 800ac40:	b2db      	uxtb	r3, r3
 800ac42:	f003 030f 	and.w	r3, r3, #15
 800ac46:	b2da      	uxtb	r2, r3
 800ac48:	683b      	ldr	r3, [r7, #0]
 800ac4a:	745a      	strb	r2, [r3, #17]
    pStatus->VideoSpeedClass = (uint8_t)((sd_status[4] & 0xFF000000U) >> 24U);
 800ac4c:	69bb      	ldr	r3, [r7, #24]
 800ac4e:	0e1b      	lsrs	r3, r3, #24
 800ac50:	b2da      	uxtb	r2, r3
 800ac52:	683b      	ldr	r3, [r7, #0]
 800ac54:	749a      	strb	r2, [r3, #18]
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 800ac56:	687b      	ldr	r3, [r7, #4]
 800ac58:	681b      	ldr	r3, [r3, #0]
 800ac5a:	f44f 7100 	mov.w	r1, #512	; 0x200
 800ac5e:	4618      	mov	r0, r3
 800ac60:	f003 f80e 	bl	800dc80 <SDMMC_CmdBlockLength>
 800ac64:	64b8      	str	r0, [r7, #72]	; 0x48
  if (errorstate != HAL_SD_ERROR_NONE)
 800ac66:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800ac68:	2b00      	cmp	r3, #0
 800ac6a:	d00d      	beq.n	800ac88 <HAL_SD_GetCardStatus+0x15c>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800ac6c:	687b      	ldr	r3, [r7, #4]
 800ac6e:	681b      	ldr	r3, [r3, #0]
 800ac70:	4a08      	ldr	r2, [pc, #32]	; (800ac94 <HAL_SD_GetCardStatus+0x168>)
 800ac72:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode = errorstate;
 800ac74:	687b      	ldr	r3, [r7, #4]
 800ac76:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800ac78:	635a      	str	r2, [r3, #52]	; 0x34
    hsd->State = HAL_SD_STATE_READY;
 800ac7a:	687b      	ldr	r3, [r7, #4]
 800ac7c:	2201      	movs	r2, #1
 800ac7e:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    status = HAL_ERROR;
 800ac82:	2301      	movs	r3, #1
 800ac84:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
  }

  return status;
 800ac88:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
}
 800ac8c:	4618      	mov	r0, r3
 800ac8e:	3750      	adds	r7, #80	; 0x50
 800ac90:	46bd      	mov	sp, r7
 800ac92:	bd80      	pop	{r7, pc}
 800ac94:	1fe00fff 	.word	0x1fe00fff

0800ac98 <HAL_SD_GetCardInfo>:
  * @param  pCardInfo: Pointer to the HAL_SD_CardInfoTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardInfo(SD_HandleTypeDef *hsd, HAL_SD_CardInfoTypeDef *pCardInfo)
{
 800ac98:	b480      	push	{r7}
 800ac9a:	b083      	sub	sp, #12
 800ac9c:	af00      	add	r7, sp, #0
 800ac9e:	6078      	str	r0, [r7, #4]
 800aca0:	6039      	str	r1, [r7, #0]
  pCardInfo->CardType     = (uint32_t)(hsd->SdCard.CardType);
 800aca2:	687b      	ldr	r3, [r7, #4]
 800aca4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800aca6:	683b      	ldr	r3, [r7, #0]
 800aca8:	601a      	str	r2, [r3, #0]
  pCardInfo->CardVersion  = (uint32_t)(hsd->SdCard.CardVersion);
 800acaa:	687b      	ldr	r3, [r7, #4]
 800acac:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800acae:	683b      	ldr	r3, [r7, #0]
 800acb0:	605a      	str	r2, [r3, #4]
  pCardInfo->Class        = (uint32_t)(hsd->SdCard.Class);
 800acb2:	687b      	ldr	r3, [r7, #4]
 800acb4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800acb6:	683b      	ldr	r3, [r7, #0]
 800acb8:	609a      	str	r2, [r3, #8]
  pCardInfo->RelCardAdd   = (uint32_t)(hsd->SdCard.RelCardAdd);
 800acba:	687b      	ldr	r3, [r7, #4]
 800acbc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800acbe:	683b      	ldr	r3, [r7, #0]
 800acc0:	60da      	str	r2, [r3, #12]
  pCardInfo->BlockNbr     = (uint32_t)(hsd->SdCard.BlockNbr);
 800acc2:	687b      	ldr	r3, [r7, #4]
 800acc4:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800acc6:	683b      	ldr	r3, [r7, #0]
 800acc8:	611a      	str	r2, [r3, #16]
  pCardInfo->BlockSize    = (uint32_t)(hsd->SdCard.BlockSize);
 800acca:	687b      	ldr	r3, [r7, #4]
 800accc:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800acce:	683b      	ldr	r3, [r7, #0]
 800acd0:	615a      	str	r2, [r3, #20]
  pCardInfo->LogBlockNbr  = (uint32_t)(hsd->SdCard.LogBlockNbr);
 800acd2:	687b      	ldr	r3, [r7, #4]
 800acd4:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800acd6:	683b      	ldr	r3, [r7, #0]
 800acd8:	619a      	str	r2, [r3, #24]
  pCardInfo->LogBlockSize = (uint32_t)(hsd->SdCard.LogBlockSize);
 800acda:	687b      	ldr	r3, [r7, #4]
 800acdc:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800acde:	683b      	ldr	r3, [r7, #0]
 800ace0:	61da      	str	r2, [r3, #28]

  return HAL_OK;
 800ace2:	2300      	movs	r3, #0
}
 800ace4:	4618      	mov	r0, r3
 800ace6:	370c      	adds	r7, #12
 800ace8:	46bd      	mov	sp, r7
 800acea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800acee:	4770      	bx	lr

0800acf0 <HAL_SD_ConfigWideBusOperation>:
  *            @arg SDMMC_BUS_WIDE_4B: 4-bit data transfer
  *            @arg SDMMC_BUS_WIDE_1B: 1-bit data transfer
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ConfigWideBusOperation(SD_HandleTypeDef *hsd, uint32_t WideMode)
{
 800acf0:	b590      	push	{r4, r7, lr}
 800acf2:	b08d      	sub	sp, #52	; 0x34
 800acf4:	af02      	add	r7, sp, #8
 800acf6:	6078      	str	r0, [r7, #4]
 800acf8:	6039      	str	r1, [r7, #0]
  SDMMC_InitTypeDef Init;
  uint32_t errorstate;
  uint32_t sdmmc_clk;
  HAL_StatusTypeDef status = HAL_OK;
 800acfa:	2300      	movs	r3, #0
 800acfc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  /* Check the parameters */
  assert_param(IS_SDMMC_BUS_WIDE(WideMode));

  /* Change State */
  hsd->State = HAL_SD_STATE_BUSY;
 800ad00:	687b      	ldr	r3, [r7, #4]
 800ad02:	2203      	movs	r2, #3
 800ad04:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

  if (hsd->SdCard.CardType != CARD_SECURED)
 800ad08:	687b      	ldr	r3, [r7, #4]
 800ad0a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ad0c:	2b03      	cmp	r3, #3
 800ad0e:	d02e      	beq.n	800ad6e <HAL_SD_ConfigWideBusOperation+0x7e>
  {
    if (WideMode == SDMMC_BUS_WIDE_8B)
 800ad10:	683b      	ldr	r3, [r7, #0]
 800ad12:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800ad16:	d106      	bne.n	800ad26 <HAL_SD_ConfigWideBusOperation+0x36>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800ad18:	687b      	ldr	r3, [r7, #4]
 800ad1a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ad1c:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800ad20:	687b      	ldr	r3, [r7, #4]
 800ad22:	635a      	str	r2, [r3, #52]	; 0x34
 800ad24:	e029      	b.n	800ad7a <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if (WideMode == SDMMC_BUS_WIDE_4B)
 800ad26:	683b      	ldr	r3, [r7, #0]
 800ad28:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800ad2c:	d10a      	bne.n	800ad44 <HAL_SD_ConfigWideBusOperation+0x54>
    {
      errorstate = SD_WideBus_Enable(hsd);
 800ad2e:	6878      	ldr	r0, [r7, #4]
 800ad30:	f000 fb4c 	bl	800b3cc <SD_WideBus_Enable>
 800ad34:	6238      	str	r0, [r7, #32]

      hsd->ErrorCode |= errorstate;
 800ad36:	687b      	ldr	r3, [r7, #4]
 800ad38:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800ad3a:	6a3b      	ldr	r3, [r7, #32]
 800ad3c:	431a      	orrs	r2, r3
 800ad3e:	687b      	ldr	r3, [r7, #4]
 800ad40:	635a      	str	r2, [r3, #52]	; 0x34
 800ad42:	e01a      	b.n	800ad7a <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if (WideMode == SDMMC_BUS_WIDE_1B)
 800ad44:	683b      	ldr	r3, [r7, #0]
 800ad46:	2b00      	cmp	r3, #0
 800ad48:	d10a      	bne.n	800ad60 <HAL_SD_ConfigWideBusOperation+0x70>
    {
      errorstate = SD_WideBus_Disable(hsd);
 800ad4a:	6878      	ldr	r0, [r7, #4]
 800ad4c:	f000 fb89 	bl	800b462 <SD_WideBus_Disable>
 800ad50:	6238      	str	r0, [r7, #32]

      hsd->ErrorCode |= errorstate;
 800ad52:	687b      	ldr	r3, [r7, #4]
 800ad54:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800ad56:	6a3b      	ldr	r3, [r7, #32]
 800ad58:	431a      	orrs	r2, r3
 800ad5a:	687b      	ldr	r3, [r7, #4]
 800ad5c:	635a      	str	r2, [r3, #52]	; 0x34
 800ad5e:	e00c      	b.n	800ad7a <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else
    {
      /* WideMode is not a valid argument*/
      hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800ad60:	687b      	ldr	r3, [r7, #4]
 800ad62:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ad64:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800ad68:	687b      	ldr	r3, [r7, #4]
 800ad6a:	635a      	str	r2, [r3, #52]	; 0x34
 800ad6c:	e005      	b.n	800ad7a <HAL_SD_ConfigWideBusOperation+0x8a>
    }
  }
  else
  {
    /* MMC Card does not support this feature */
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800ad6e:	687b      	ldr	r3, [r7, #4]
 800ad70:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ad72:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800ad76:	687b      	ldr	r3, [r7, #4]
 800ad78:	635a      	str	r2, [r3, #52]	; 0x34
  }

  if (hsd->ErrorCode != HAL_SD_ERROR_NONE)
 800ad7a:	687b      	ldr	r3, [r7, #4]
 800ad7c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ad7e:	2b00      	cmp	r3, #0
 800ad80:	d007      	beq.n	800ad92 <HAL_SD_ConfigWideBusOperation+0xa2>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800ad82:	687b      	ldr	r3, [r7, #4]
 800ad84:	681b      	ldr	r3, [r3, #0]
 800ad86:	4a5e      	ldr	r2, [pc, #376]	; (800af00 <HAL_SD_ConfigWideBusOperation+0x210>)
 800ad88:	639a      	str	r2, [r3, #56]	; 0x38
    status = HAL_ERROR;
 800ad8a:	2301      	movs	r3, #1
 800ad8c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800ad90:	e094      	b.n	800aebc <HAL_SD_ConfigWideBusOperation+0x1cc>
  }
  else
  {
    sdmmc_clk     = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SDMMC);
 800ad92:	f44f 3080 	mov.w	r0, #65536	; 0x10000
 800ad96:	f7fd feb5 	bl	8008b04 <HAL_RCCEx_GetPeriphCLKFreq>
 800ad9a:	61f8      	str	r0, [r7, #28]
    if (sdmmc_clk != 0U)
 800ad9c:	69fb      	ldr	r3, [r7, #28]
 800ad9e:	2b00      	cmp	r3, #0
 800ada0:	f000 8083 	beq.w	800aeaa <HAL_SD_ConfigWideBusOperation+0x1ba>
    {
      /* Configure the SDMMC peripheral */
      Init.ClockEdge           = hsd->Init.ClockEdge;
 800ada4:	687b      	ldr	r3, [r7, #4]
 800ada6:	685b      	ldr	r3, [r3, #4]
 800ada8:	60bb      	str	r3, [r7, #8]
      Init.ClockPowerSave      = hsd->Init.ClockPowerSave;
 800adaa:	687b      	ldr	r3, [r7, #4]
 800adac:	689b      	ldr	r3, [r3, #8]
 800adae:	60fb      	str	r3, [r7, #12]
      Init.BusWide             = WideMode;
 800adb0:	683b      	ldr	r3, [r7, #0]
 800adb2:	613b      	str	r3, [r7, #16]
      Init.HardwareFlowControl = hsd->Init.HardwareFlowControl;
 800adb4:	687b      	ldr	r3, [r7, #4]
 800adb6:	691b      	ldr	r3, [r3, #16]
 800adb8:	617b      	str	r3, [r7, #20]

      /* Check if user Clock div < Normal speed 25Mhz, no change in Clockdiv */
      if (hsd->Init.ClockDiv >= (sdmmc_clk / (2U * SD_NORMAL_SPEED_FREQ)))
 800adba:	687b      	ldr	r3, [r7, #4]
 800adbc:	695a      	ldr	r2, [r3, #20]
 800adbe:	69fb      	ldr	r3, [r7, #28]
 800adc0:	4950      	ldr	r1, [pc, #320]	; (800af04 <HAL_SD_ConfigWideBusOperation+0x214>)
 800adc2:	fba1 1303 	umull	r1, r3, r1, r3
 800adc6:	0e1b      	lsrs	r3, r3, #24
 800adc8:	429a      	cmp	r2, r3
 800adca:	d303      	bcc.n	800add4 <HAL_SD_ConfigWideBusOperation+0xe4>
      {
        Init.ClockDiv = hsd->Init.ClockDiv;
 800adcc:	687b      	ldr	r3, [r7, #4]
 800adce:	695b      	ldr	r3, [r3, #20]
 800add0:	61bb      	str	r3, [r7, #24]
 800add2:	e05a      	b.n	800ae8a <HAL_SD_ConfigWideBusOperation+0x19a>
      }
      else if (hsd->SdCard.CardSpeed == CARD_ULTRA_HIGH_SPEED)
 800add4:	687b      	ldr	r3, [r7, #4]
 800add6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800add8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800addc:	d103      	bne.n	800ade6 <HAL_SD_ConfigWideBusOperation+0xf6>
      {
        /* UltraHigh speed SD card,user Clock div */
        Init.ClockDiv = hsd->Init.ClockDiv;
 800adde:	687b      	ldr	r3, [r7, #4]
 800ade0:	695b      	ldr	r3, [r3, #20]
 800ade2:	61bb      	str	r3, [r7, #24]
 800ade4:	e051      	b.n	800ae8a <HAL_SD_ConfigWideBusOperation+0x19a>
      }
      else if (hsd->SdCard.CardSpeed == CARD_HIGH_SPEED)
 800ade6:	687b      	ldr	r3, [r7, #4]
 800ade8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800adea:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800adee:	d126      	bne.n	800ae3e <HAL_SD_ConfigWideBusOperation+0x14e>
      {
        /* High speed SD card, Max Frequency = 50Mhz */
        if (hsd->Init.ClockDiv == 0U)
 800adf0:	687b      	ldr	r3, [r7, #4]
 800adf2:	695b      	ldr	r3, [r3, #20]
 800adf4:	2b00      	cmp	r3, #0
 800adf6:	d10e      	bne.n	800ae16 <HAL_SD_ConfigWideBusOperation+0x126>
        {
          if (sdmmc_clk > SD_HIGH_SPEED_FREQ)
 800adf8:	69fb      	ldr	r3, [r7, #28]
 800adfa:	4a43      	ldr	r2, [pc, #268]	; (800af08 <HAL_SD_ConfigWideBusOperation+0x218>)
 800adfc:	4293      	cmp	r3, r2
 800adfe:	d906      	bls.n	800ae0e <HAL_SD_ConfigWideBusOperation+0x11e>
          {
            Init.ClockDiv = sdmmc_clk / (2U * SD_HIGH_SPEED_FREQ);
 800ae00:	69fb      	ldr	r3, [r7, #28]
 800ae02:	4a40      	ldr	r2, [pc, #256]	; (800af04 <HAL_SD_ConfigWideBusOperation+0x214>)
 800ae04:	fba2 2303 	umull	r2, r3, r2, r3
 800ae08:	0e5b      	lsrs	r3, r3, #25
 800ae0a:	61bb      	str	r3, [r7, #24]
 800ae0c:	e03d      	b.n	800ae8a <HAL_SD_ConfigWideBusOperation+0x19a>
          }
          else
          {
            Init.ClockDiv = hsd->Init.ClockDiv;
 800ae0e:	687b      	ldr	r3, [r7, #4]
 800ae10:	695b      	ldr	r3, [r3, #20]
 800ae12:	61bb      	str	r3, [r7, #24]
 800ae14:	e039      	b.n	800ae8a <HAL_SD_ConfigWideBusOperation+0x19a>
          }
        }
        else
        {
          if ((sdmmc_clk/(2U * hsd->Init.ClockDiv)) > SD_HIGH_SPEED_FREQ)
 800ae16:	687b      	ldr	r3, [r7, #4]
 800ae18:	695b      	ldr	r3, [r3, #20]
 800ae1a:	005b      	lsls	r3, r3, #1
 800ae1c:	69fa      	ldr	r2, [r7, #28]
 800ae1e:	fbb2 f3f3 	udiv	r3, r2, r3
 800ae22:	4a39      	ldr	r2, [pc, #228]	; (800af08 <HAL_SD_ConfigWideBusOperation+0x218>)
 800ae24:	4293      	cmp	r3, r2
 800ae26:	d906      	bls.n	800ae36 <HAL_SD_ConfigWideBusOperation+0x146>
          {
            Init.ClockDiv = sdmmc_clk / (2U * SD_HIGH_SPEED_FREQ);
 800ae28:	69fb      	ldr	r3, [r7, #28]
 800ae2a:	4a36      	ldr	r2, [pc, #216]	; (800af04 <HAL_SD_ConfigWideBusOperation+0x214>)
 800ae2c:	fba2 2303 	umull	r2, r3, r2, r3
 800ae30:	0e5b      	lsrs	r3, r3, #25
 800ae32:	61bb      	str	r3, [r7, #24]
 800ae34:	e029      	b.n	800ae8a <HAL_SD_ConfigWideBusOperation+0x19a>
          }
          else
          {
            Init.ClockDiv = hsd->Init.ClockDiv;
 800ae36:	687b      	ldr	r3, [r7, #4]
 800ae38:	695b      	ldr	r3, [r3, #20]
 800ae3a:	61bb      	str	r3, [r7, #24]
 800ae3c:	e025      	b.n	800ae8a <HAL_SD_ConfigWideBusOperation+0x19a>
        }
      }
      else
      {
        /* No High speed SD card, Max Frequency = 25Mhz */
        if (hsd->Init.ClockDiv == 0U)
 800ae3e:	687b      	ldr	r3, [r7, #4]
 800ae40:	695b      	ldr	r3, [r3, #20]
 800ae42:	2b00      	cmp	r3, #0
 800ae44:	d10e      	bne.n	800ae64 <HAL_SD_ConfigWideBusOperation+0x174>
        {
          if (sdmmc_clk > SD_NORMAL_SPEED_FREQ)
 800ae46:	69fb      	ldr	r3, [r7, #28]
 800ae48:	4a30      	ldr	r2, [pc, #192]	; (800af0c <HAL_SD_ConfigWideBusOperation+0x21c>)
 800ae4a:	4293      	cmp	r3, r2
 800ae4c:	d906      	bls.n	800ae5c <HAL_SD_ConfigWideBusOperation+0x16c>
          {
            Init.ClockDiv = sdmmc_clk / (2U * SD_NORMAL_SPEED_FREQ);
 800ae4e:	69fb      	ldr	r3, [r7, #28]
 800ae50:	4a2c      	ldr	r2, [pc, #176]	; (800af04 <HAL_SD_ConfigWideBusOperation+0x214>)
 800ae52:	fba2 2303 	umull	r2, r3, r2, r3
 800ae56:	0e1b      	lsrs	r3, r3, #24
 800ae58:	61bb      	str	r3, [r7, #24]
 800ae5a:	e016      	b.n	800ae8a <HAL_SD_ConfigWideBusOperation+0x19a>
          }
          else
          {
            Init.ClockDiv = hsd->Init.ClockDiv;
 800ae5c:	687b      	ldr	r3, [r7, #4]
 800ae5e:	695b      	ldr	r3, [r3, #20]
 800ae60:	61bb      	str	r3, [r7, #24]
 800ae62:	e012      	b.n	800ae8a <HAL_SD_ConfigWideBusOperation+0x19a>
          }
        }
        else
        {
          if ((sdmmc_clk/(2U * hsd->Init.ClockDiv)) > SD_NORMAL_SPEED_FREQ)
 800ae64:	687b      	ldr	r3, [r7, #4]
 800ae66:	695b      	ldr	r3, [r3, #20]
 800ae68:	005b      	lsls	r3, r3, #1
 800ae6a:	69fa      	ldr	r2, [r7, #28]
 800ae6c:	fbb2 f3f3 	udiv	r3, r2, r3
 800ae70:	4a26      	ldr	r2, [pc, #152]	; (800af0c <HAL_SD_ConfigWideBusOperation+0x21c>)
 800ae72:	4293      	cmp	r3, r2
 800ae74:	d906      	bls.n	800ae84 <HAL_SD_ConfigWideBusOperation+0x194>
          {
            Init.ClockDiv = sdmmc_clk / (2U * SD_NORMAL_SPEED_FREQ);
 800ae76:	69fb      	ldr	r3, [r7, #28]
 800ae78:	4a22      	ldr	r2, [pc, #136]	; (800af04 <HAL_SD_ConfigWideBusOperation+0x214>)
 800ae7a:	fba2 2303 	umull	r2, r3, r2, r3
 800ae7e:	0e1b      	lsrs	r3, r3, #24
 800ae80:	61bb      	str	r3, [r7, #24]
 800ae82:	e002      	b.n	800ae8a <HAL_SD_ConfigWideBusOperation+0x19a>
          }
          else
          {
            Init.ClockDiv = hsd->Init.ClockDiv;
 800ae84:	687b      	ldr	r3, [r7, #4]
 800ae86:	695b      	ldr	r3, [r3, #20]
 800ae88:	61bb      	str	r3, [r7, #24]

#if (USE_SD_TRANSCEIVER != 0U)
      Init.TranceiverPresent = hsd->Init.TranceiverPresent;
#endif /* USE_SD_TRANSCEIVER */

      (void)SDMMC_Init(hsd->Instance, Init);
 800ae8a:	687b      	ldr	r3, [r7, #4]
 800ae8c:	681c      	ldr	r4, [r3, #0]
 800ae8e:	466a      	mov	r2, sp
 800ae90:	f107 0314 	add.w	r3, r7, #20
 800ae94:	e893 0003 	ldmia.w	r3, {r0, r1}
 800ae98:	e882 0003 	stmia.w	r2, {r0, r1}
 800ae9c:	f107 0308 	add.w	r3, r7, #8
 800aea0:	cb0e      	ldmia	r3, {r1, r2, r3}
 800aea2:	4620      	mov	r0, r4
 800aea4:	f002 fe0e 	bl	800dac4 <SDMMC_Init>
 800aea8:	e008      	b.n	800aebc <HAL_SD_ConfigWideBusOperation+0x1cc>
    }
    else
    {
      hsd->ErrorCode |= SDMMC_ERROR_INVALID_PARAMETER;
 800aeaa:	687b      	ldr	r3, [r7, #4]
 800aeac:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800aeae:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800aeb2:	687b      	ldr	r3, [r7, #4]
 800aeb4:	635a      	str	r2, [r3, #52]	; 0x34
      status = HAL_ERROR;
 800aeb6:	2301      	movs	r3, #1
 800aeb8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 800aebc:	687b      	ldr	r3, [r7, #4]
 800aebe:	681b      	ldr	r3, [r3, #0]
 800aec0:	f44f 7100 	mov.w	r1, #512	; 0x200
 800aec4:	4618      	mov	r0, r3
 800aec6:	f002 fedb 	bl	800dc80 <SDMMC_CmdBlockLength>
 800aeca:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 800aecc:	6a3b      	ldr	r3, [r7, #32]
 800aece:	2b00      	cmp	r3, #0
 800aed0:	d00c      	beq.n	800aeec <HAL_SD_ConfigWideBusOperation+0x1fc>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800aed2:	687b      	ldr	r3, [r7, #4]
 800aed4:	681b      	ldr	r3, [r3, #0]
 800aed6:	4a0a      	ldr	r2, [pc, #40]	; (800af00 <HAL_SD_ConfigWideBusOperation+0x210>)
 800aed8:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 800aeda:	687b      	ldr	r3, [r7, #4]
 800aedc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800aede:	6a3b      	ldr	r3, [r7, #32]
 800aee0:	431a      	orrs	r2, r3
 800aee2:	687b      	ldr	r3, [r7, #4]
 800aee4:	635a      	str	r2, [r3, #52]	; 0x34
    status = HAL_ERROR;
 800aee6:	2301      	movs	r3, #1
 800aee8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Change State */
  hsd->State = HAL_SD_STATE_READY;
 800aeec:	687b      	ldr	r3, [r7, #4]
 800aeee:	2201      	movs	r2, #1
 800aef0:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

  return status;
 800aef4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 800aef8:	4618      	mov	r0, r3
 800aefa:	372c      	adds	r7, #44	; 0x2c
 800aefc:	46bd      	mov	sp, r7
 800aefe:	bd90      	pop	{r4, r7, pc}
 800af00:	1fe00fff 	.word	0x1fe00fff
 800af04:	55e63b89 	.word	0x55e63b89
 800af08:	02faf080 	.word	0x02faf080
 800af0c:	017d7840 	.word	0x017d7840

0800af10 <HAL_SD_GetCardState>:
  * @brief  Gets the current sd card data state.
  * @param  hsd: pointer to SD handle
  * @retval Card state
  */
HAL_SD_CardStateTypeDef HAL_SD_GetCardState(SD_HandleTypeDef *hsd)
{
 800af10:	b580      	push	{r7, lr}
 800af12:	b086      	sub	sp, #24
 800af14:	af00      	add	r7, sp, #0
 800af16:	6078      	str	r0, [r7, #4]
  uint32_t cardstate;
  uint32_t errorstate;
  uint32_t resp1 = 0;
 800af18:	2300      	movs	r3, #0
 800af1a:	60fb      	str	r3, [r7, #12]

  errorstate = SD_SendStatus(hsd, &resp1);
 800af1c:	f107 030c 	add.w	r3, r7, #12
 800af20:	4619      	mov	r1, r3
 800af22:	6878      	ldr	r0, [r7, #4]
 800af24:	f000 fa2a 	bl	800b37c <SD_SendStatus>
 800af28:	6178      	str	r0, [r7, #20]
  if (errorstate != HAL_SD_ERROR_NONE)
 800af2a:	697b      	ldr	r3, [r7, #20]
 800af2c:	2b00      	cmp	r3, #0
 800af2e:	d005      	beq.n	800af3c <HAL_SD_GetCardState+0x2c>
  {
    hsd->ErrorCode |= errorstate;
 800af30:	687b      	ldr	r3, [r7, #4]
 800af32:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800af34:	697b      	ldr	r3, [r7, #20]
 800af36:	431a      	orrs	r2, r3
 800af38:	687b      	ldr	r3, [r7, #4]
 800af3a:	635a      	str	r2, [r3, #52]	; 0x34
  }

  cardstate = ((resp1 >> 9U) & 0x0FU);
 800af3c:	68fb      	ldr	r3, [r7, #12]
 800af3e:	0a5b      	lsrs	r3, r3, #9
 800af40:	f003 030f 	and.w	r3, r3, #15
 800af44:	613b      	str	r3, [r7, #16]

  return (HAL_SD_CardStateTypeDef)cardstate;
 800af46:	693b      	ldr	r3, [r7, #16]
}
 800af48:	4618      	mov	r0, r3
 800af4a:	3718      	adds	r7, #24
 800af4c:	46bd      	mov	sp, r7
 800af4e:	bd80      	pop	{r7, pc}

0800af50 <SD_InitCard>:
  * @brief  Initializes the sd card.
  * @param  hsd: Pointer to SD handle
  * @retval SD Card error state
  */
static uint32_t SD_InitCard(SD_HandleTypeDef *hsd)
{
 800af50:	b580      	push	{r7, lr}
 800af52:	b090      	sub	sp, #64	; 0x40
 800af54:	af00      	add	r7, sp, #0
 800af56:	6078      	str	r0, [r7, #4]
  HAL_SD_CardCSDTypeDef CSD;
  uint32_t errorstate;
  uint16_t sd_rca = 1U;
 800af58:	2301      	movs	r3, #1
 800af5a:	81fb      	strh	r3, [r7, #14]

  /* Check the power State */
  if (SDMMC_GetPowerState(hsd->Instance) == 0U)
 800af5c:	687b      	ldr	r3, [r7, #4]
 800af5e:	681b      	ldr	r3, [r3, #0]
 800af60:	4618      	mov	r0, r3
 800af62:	f002 fe08 	bl	800db76 <SDMMC_GetPowerState>
 800af66:	4603      	mov	r3, r0
 800af68:	2b00      	cmp	r3, #0
 800af6a:	d102      	bne.n	800af72 <SD_InitCard+0x22>
  {
    /* Power off */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800af6c:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 800af70:	e0a5      	b.n	800b0be <SD_InitCard+0x16e>
  }

  if (hsd->SdCard.CardType != CARD_SECURED)
 800af72:	687b      	ldr	r3, [r7, #4]
 800af74:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800af76:	2b03      	cmp	r3, #3
 800af78:	d02e      	beq.n	800afd8 <SD_InitCard+0x88>
  {
    /* Send CMD2 ALL_SEND_CID */
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 800af7a:	687b      	ldr	r3, [r7, #4]
 800af7c:	681b      	ldr	r3, [r3, #0]
 800af7e:	4618      	mov	r0, r3
 800af80:	f003 f853 	bl	800e02a <SDMMC_CmdSendCID>
 800af84:	63f8      	str	r0, [r7, #60]	; 0x3c
    if (errorstate != HAL_SD_ERROR_NONE)
 800af86:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800af88:	2b00      	cmp	r3, #0
 800af8a:	d001      	beq.n	800af90 <SD_InitCard+0x40>
    {
      return errorstate;
 800af8c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800af8e:	e096      	b.n	800b0be <SD_InitCard+0x16e>
    }
    else
    {
      /* Get Card identification number data */
      hsd->CID[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800af90:	687b      	ldr	r3, [r7, #4]
 800af92:	681b      	ldr	r3, [r3, #0]
 800af94:	2100      	movs	r1, #0
 800af96:	4618      	mov	r0, r3
 800af98:	f002 fe33 	bl	800dc02 <SDMMC_GetResponse>
 800af9c:	4602      	mov	r2, r0
 800af9e:	687b      	ldr	r3, [r7, #4]
 800afa0:	66da      	str	r2, [r3, #108]	; 0x6c
      hsd->CID[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 800afa2:	687b      	ldr	r3, [r7, #4]
 800afa4:	681b      	ldr	r3, [r3, #0]
 800afa6:	2104      	movs	r1, #4
 800afa8:	4618      	mov	r0, r3
 800afaa:	f002 fe2a 	bl	800dc02 <SDMMC_GetResponse>
 800afae:	4602      	mov	r2, r0
 800afb0:	687b      	ldr	r3, [r7, #4]
 800afb2:	671a      	str	r2, [r3, #112]	; 0x70
      hsd->CID[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 800afb4:	687b      	ldr	r3, [r7, #4]
 800afb6:	681b      	ldr	r3, [r3, #0]
 800afb8:	2108      	movs	r1, #8
 800afba:	4618      	mov	r0, r3
 800afbc:	f002 fe21 	bl	800dc02 <SDMMC_GetResponse>
 800afc0:	4602      	mov	r2, r0
 800afc2:	687b      	ldr	r3, [r7, #4]
 800afc4:	675a      	str	r2, [r3, #116]	; 0x74
      hsd->CID[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 800afc6:	687b      	ldr	r3, [r7, #4]
 800afc8:	681b      	ldr	r3, [r3, #0]
 800afca:	210c      	movs	r1, #12
 800afcc:	4618      	mov	r0, r3
 800afce:	f002 fe18 	bl	800dc02 <SDMMC_GetResponse>
 800afd2:	4602      	mov	r2, r0
 800afd4:	687b      	ldr	r3, [r7, #4]
 800afd6:	679a      	str	r2, [r3, #120]	; 0x78
    }
  }

  if (hsd->SdCard.CardType != CARD_SECURED)
 800afd8:	687b      	ldr	r3, [r7, #4]
 800afda:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800afdc:	2b03      	cmp	r3, #3
 800afde:	d00d      	beq.n	800affc <SD_InitCard+0xac>
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 800afe0:	687b      	ldr	r3, [r7, #4]
 800afe2:	681b      	ldr	r3, [r3, #0]
 800afe4:	f107 020e 	add.w	r2, r7, #14
 800afe8:	4611      	mov	r1, r2
 800afea:	4618      	mov	r0, r3
 800afec:	f003 f85c 	bl	800e0a8 <SDMMC_CmdSetRelAdd>
 800aff0:	63f8      	str	r0, [r7, #60]	; 0x3c
    if (errorstate != HAL_SD_ERROR_NONE)
 800aff2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800aff4:	2b00      	cmp	r3, #0
 800aff6:	d001      	beq.n	800affc <SD_InitCard+0xac>
    {
      return errorstate;
 800aff8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800affa:	e060      	b.n	800b0be <SD_InitCard+0x16e>
    }
  }
  if (hsd->SdCard.CardType != CARD_SECURED)
 800affc:	687b      	ldr	r3, [r7, #4]
 800affe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b000:	2b03      	cmp	r3, #3
 800b002:	d036      	beq.n	800b072 <SD_InitCard+0x122>
  {
    /* Get the SD card RCA */
    hsd->SdCard.RelCardAdd = sd_rca;
 800b004:	89fb      	ldrh	r3, [r7, #14]
 800b006:	461a      	mov	r2, r3
 800b008:	687b      	ldr	r3, [r7, #4]
 800b00a:	645a      	str	r2, [r3, #68]	; 0x44

    /* Send CMD9 SEND_CSD with argument as card's RCA */
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800b00c:	687b      	ldr	r3, [r7, #4]
 800b00e:	681a      	ldr	r2, [r3, #0]
 800b010:	687b      	ldr	r3, [r7, #4]
 800b012:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b014:	041b      	lsls	r3, r3, #16
 800b016:	4619      	mov	r1, r3
 800b018:	4610      	mov	r0, r2
 800b01a:	f003 f825 	bl	800e068 <SDMMC_CmdSendCSD>
 800b01e:	63f8      	str	r0, [r7, #60]	; 0x3c
    if (errorstate != HAL_SD_ERROR_NONE)
 800b020:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b022:	2b00      	cmp	r3, #0
 800b024:	d001      	beq.n	800b02a <SD_InitCard+0xda>
    {
      return errorstate;
 800b026:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b028:	e049      	b.n	800b0be <SD_InitCard+0x16e>
    }
    else
    {
      /* Get Card Specific Data */
      hsd->CSD[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800b02a:	687b      	ldr	r3, [r7, #4]
 800b02c:	681b      	ldr	r3, [r3, #0]
 800b02e:	2100      	movs	r1, #0
 800b030:	4618      	mov	r0, r3
 800b032:	f002 fde6 	bl	800dc02 <SDMMC_GetResponse>
 800b036:	4602      	mov	r2, r0
 800b038:	687b      	ldr	r3, [r7, #4]
 800b03a:	65da      	str	r2, [r3, #92]	; 0x5c
      hsd->CSD[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 800b03c:	687b      	ldr	r3, [r7, #4]
 800b03e:	681b      	ldr	r3, [r3, #0]
 800b040:	2104      	movs	r1, #4
 800b042:	4618      	mov	r0, r3
 800b044:	f002 fddd 	bl	800dc02 <SDMMC_GetResponse>
 800b048:	4602      	mov	r2, r0
 800b04a:	687b      	ldr	r3, [r7, #4]
 800b04c:	661a      	str	r2, [r3, #96]	; 0x60
      hsd->CSD[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 800b04e:	687b      	ldr	r3, [r7, #4]
 800b050:	681b      	ldr	r3, [r3, #0]
 800b052:	2108      	movs	r1, #8
 800b054:	4618      	mov	r0, r3
 800b056:	f002 fdd4 	bl	800dc02 <SDMMC_GetResponse>
 800b05a:	4602      	mov	r2, r0
 800b05c:	687b      	ldr	r3, [r7, #4]
 800b05e:	665a      	str	r2, [r3, #100]	; 0x64
      hsd->CSD[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 800b060:	687b      	ldr	r3, [r7, #4]
 800b062:	681b      	ldr	r3, [r3, #0]
 800b064:	210c      	movs	r1, #12
 800b066:	4618      	mov	r0, r3
 800b068:	f002 fdcb 	bl	800dc02 <SDMMC_GetResponse>
 800b06c:	4602      	mov	r2, r0
 800b06e:	687b      	ldr	r3, [r7, #4]
 800b070:	669a      	str	r2, [r3, #104]	; 0x68
    }
  }

  /* Get the Card Class */
  hsd->SdCard.Class = (SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2) >> 20U);
 800b072:	687b      	ldr	r3, [r7, #4]
 800b074:	681b      	ldr	r3, [r3, #0]
 800b076:	2104      	movs	r1, #4
 800b078:	4618      	mov	r0, r3
 800b07a:	f002 fdc2 	bl	800dc02 <SDMMC_GetResponse>
 800b07e:	4603      	mov	r3, r0
 800b080:	0d1a      	lsrs	r2, r3, #20
 800b082:	687b      	ldr	r3, [r7, #4]
 800b084:	641a      	str	r2, [r3, #64]	; 0x40

  /* Get CSD parameters */
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 800b086:	f107 0310 	add.w	r3, r7, #16
 800b08a:	4619      	mov	r1, r3
 800b08c:	6878      	ldr	r0, [r7, #4]
 800b08e:	f7ff fba9 	bl	800a7e4 <HAL_SD_GetCardCSD>
 800b092:	4603      	mov	r3, r0
 800b094:	2b00      	cmp	r3, #0
 800b096:	d002      	beq.n	800b09e <SD_InitCard+0x14e>
  {
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800b098:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800b09c:	e00f      	b.n	800b0be <SD_InitCard+0x16e>
  }

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 800b09e:	687b      	ldr	r3, [r7, #4]
 800b0a0:	681a      	ldr	r2, [r3, #0]
 800b0a2:	687b      	ldr	r3, [r7, #4]
 800b0a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b0a6:	041b      	lsls	r3, r3, #16
 800b0a8:	4619      	mov	r1, r3
 800b0aa:	4610      	mov	r0, r2
 800b0ac:	f002 fed4 	bl	800de58 <SDMMC_CmdSelDesel>
 800b0b0:	63f8      	str	r0, [r7, #60]	; 0x3c
  if (errorstate != HAL_SD_ERROR_NONE)
 800b0b2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b0b4:	2b00      	cmp	r3, #0
 800b0b6:	d001      	beq.n	800b0bc <SD_InitCard+0x16c>
  {
    return errorstate;
 800b0b8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b0ba:	e000      	b.n	800b0be <SD_InitCard+0x16e>
  }

  /* All cards are initialized */
  return HAL_SD_ERROR_NONE;
 800b0bc:	2300      	movs	r3, #0
}
 800b0be:	4618      	mov	r0, r3
 800b0c0:	3740      	adds	r7, #64	; 0x40
 800b0c2:	46bd      	mov	sp, r7
 800b0c4:	bd80      	pop	{r7, pc}
	...

0800b0c8 <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 800b0c8:	b580      	push	{r7, lr}
 800b0ca:	b086      	sub	sp, #24
 800b0cc:	af00      	add	r7, sp, #0
 800b0ce:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800b0d0:	2300      	movs	r3, #0
 800b0d2:	60bb      	str	r3, [r7, #8]
  uint32_t response = 0U;
 800b0d4:	2300      	movs	r3, #0
 800b0d6:	617b      	str	r3, [r7, #20]
  uint32_t validvoltage = 0U;
 800b0d8:	2300      	movs	r3, #0
 800b0da:	613b      	str	r3, [r7, #16]
#if (USE_SD_TRANSCEIVER != 0U)
  uint32_t tickstart = HAL_GetTick();
#endif /* USE_SD_TRANSCEIVER  */

  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 800b0dc:	687b      	ldr	r3, [r7, #4]
 800b0de:	681b      	ldr	r3, [r3, #0]
 800b0e0:	4618      	mov	r0, r3
 800b0e2:	f002 fedc 	bl	800de9e <SDMMC_CmdGoIdleState>
 800b0e6:	60f8      	str	r0, [r7, #12]
  if (errorstate != HAL_SD_ERROR_NONE)
 800b0e8:	68fb      	ldr	r3, [r7, #12]
 800b0ea:	2b00      	cmp	r3, #0
 800b0ec:	d001      	beq.n	800b0f2 <SD_PowerON+0x2a>
  {
    return errorstate;
 800b0ee:	68fb      	ldr	r3, [r7, #12]
 800b0f0:	e06e      	b.n	800b1d0 <SD_PowerON+0x108>
  }

  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 800b0f2:	687b      	ldr	r3, [r7, #4]
 800b0f4:	681b      	ldr	r3, [r3, #0]
 800b0f6:	4618      	mov	r0, r3
 800b0f8:	f002 feef 	bl	800deda <SDMMC_CmdOperCond>
 800b0fc:	60f8      	str	r0, [r7, #12]
  if (errorstate != HAL_SD_ERROR_NONE)
 800b0fe:	68fb      	ldr	r3, [r7, #12]
 800b100:	2b00      	cmp	r3, #0
 800b102:	d00d      	beq.n	800b120 <SD_PowerON+0x58>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 800b104:	687b      	ldr	r3, [r7, #4]
 800b106:	2200      	movs	r2, #0
 800b108:	63da      	str	r2, [r3, #60]	; 0x3c
    /* CMD0: GO_IDLE_STATE */
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 800b10a:	687b      	ldr	r3, [r7, #4]
 800b10c:	681b      	ldr	r3, [r3, #0]
 800b10e:	4618      	mov	r0, r3
 800b110:	f002 fec5 	bl	800de9e <SDMMC_CmdGoIdleState>
 800b114:	60f8      	str	r0, [r7, #12]
    if (errorstate != HAL_SD_ERROR_NONE)
 800b116:	68fb      	ldr	r3, [r7, #12]
 800b118:	2b00      	cmp	r3, #0
 800b11a:	d004      	beq.n	800b126 <SD_PowerON+0x5e>
    {
      return errorstate;
 800b11c:	68fb      	ldr	r3, [r7, #12]
 800b11e:	e057      	b.n	800b1d0 <SD_PowerON+0x108>
    }

  }
  else
  {
    hsd->SdCard.CardVersion = CARD_V2_X;
 800b120:	687b      	ldr	r3, [r7, #4]
 800b122:	2201      	movs	r2, #1
 800b124:	63da      	str	r2, [r3, #60]	; 0x3c
  }

  if (hsd->SdCard.CardVersion == CARD_V2_X)
 800b126:	687b      	ldr	r3, [r7, #4]
 800b128:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b12a:	2b01      	cmp	r3, #1
 800b12c:	d137      	bne.n	800b19e <SD_PowerON+0xd6>
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 800b12e:	687b      	ldr	r3, [r7, #4]
 800b130:	681b      	ldr	r3, [r3, #0]
 800b132:	2100      	movs	r1, #0
 800b134:	4618      	mov	r0, r3
 800b136:	f002 fef0 	bl	800df1a <SDMMC_CmdAppCommand>
 800b13a:	60f8      	str	r0, [r7, #12]
    if (errorstate != HAL_SD_ERROR_NONE)
 800b13c:	68fb      	ldr	r3, [r7, #12]
 800b13e:	2b00      	cmp	r3, #0
 800b140:	d02d      	beq.n	800b19e <SD_PowerON+0xd6>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800b142:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800b146:	e043      	b.n	800b1d0 <SD_PowerON+0x108>
  /* SD CARD */
  /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
  while ((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 800b148:	687b      	ldr	r3, [r7, #4]
 800b14a:	681b      	ldr	r3, [r3, #0]
 800b14c:	2100      	movs	r1, #0
 800b14e:	4618      	mov	r0, r3
 800b150:	f002 fee3 	bl	800df1a <SDMMC_CmdAppCommand>
 800b154:	60f8      	str	r0, [r7, #12]
    if (errorstate != HAL_SD_ERROR_NONE)
 800b156:	68fb      	ldr	r3, [r7, #12]
 800b158:	2b00      	cmp	r3, #0
 800b15a:	d001      	beq.n	800b160 <SD_PowerON+0x98>
    {
      return errorstate;
 800b15c:	68fb      	ldr	r3, [r7, #12]
 800b15e:	e037      	b.n	800b1d0 <SD_PowerON+0x108>
    }

    /* Send CMD41 */
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY |
 800b160:	687b      	ldr	r3, [r7, #4]
 800b162:	681b      	ldr	r3, [r3, #0]
 800b164:	491c      	ldr	r1, [pc, #112]	; (800b1d8 <SD_PowerON+0x110>)
 800b166:	4618      	mov	r0, r3
 800b168:	f002 fefa 	bl	800df60 <SDMMC_CmdAppOperCommand>
 800b16c:	60f8      	str	r0, [r7, #12]
                                         SD_SWITCH_1_8V_CAPACITY);
    if (errorstate != HAL_SD_ERROR_NONE)
 800b16e:	68fb      	ldr	r3, [r7, #12]
 800b170:	2b00      	cmp	r3, #0
 800b172:	d002      	beq.n	800b17a <SD_PowerON+0xb2>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800b174:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800b178:	e02a      	b.n	800b1d0 <SD_PowerON+0x108>
    }

    /* Get command response */
    response = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800b17a:	687b      	ldr	r3, [r7, #4]
 800b17c:	681b      	ldr	r3, [r3, #0]
 800b17e:	2100      	movs	r1, #0
 800b180:	4618      	mov	r0, r3
 800b182:	f002 fd3e 	bl	800dc02 <SDMMC_GetResponse>
 800b186:	6178      	str	r0, [r7, #20]

    /* Get operating voltage*/
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 800b188:	697b      	ldr	r3, [r7, #20]
 800b18a:	0fdb      	lsrs	r3, r3, #31
 800b18c:	2b01      	cmp	r3, #1
 800b18e:	d101      	bne.n	800b194 <SD_PowerON+0xcc>
 800b190:	2301      	movs	r3, #1
 800b192:	e000      	b.n	800b196 <SD_PowerON+0xce>
 800b194:	2300      	movs	r3, #0
 800b196:	613b      	str	r3, [r7, #16]

    count++;
 800b198:	68bb      	ldr	r3, [r7, #8]
 800b19a:	3301      	adds	r3, #1
 800b19c:	60bb      	str	r3, [r7, #8]
  while ((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 800b19e:	68bb      	ldr	r3, [r7, #8]
 800b1a0:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 800b1a4:	4293      	cmp	r3, r2
 800b1a6:	d802      	bhi.n	800b1ae <SD_PowerON+0xe6>
 800b1a8:	693b      	ldr	r3, [r7, #16]
 800b1aa:	2b00      	cmp	r3, #0
 800b1ac:	d0cc      	beq.n	800b148 <SD_PowerON+0x80>
  }

  if (count >= SDMMC_MAX_VOLT_TRIAL)
 800b1ae:	68bb      	ldr	r3, [r7, #8]
 800b1b0:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 800b1b4:	4293      	cmp	r3, r2
 800b1b6:	d902      	bls.n	800b1be <SD_PowerON+0xf6>
  {
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 800b1b8:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800b1bc:	e008      	b.n	800b1d0 <SD_PowerON+0x108>
  }

  if ((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY) /* (response &= SD_HIGH_CAPACITY) */
 800b1be:	697b      	ldr	r3, [r7, #20]
 800b1c0:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800b1c4:	2b00      	cmp	r3, #0
 800b1c6:	d002      	beq.n	800b1ce <SD_PowerON+0x106>
  {
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 800b1c8:	687b      	ldr	r3, [r7, #4]
 800b1ca:	2201      	movs	r2, #1
 800b1cc:	639a      	str	r2, [r3, #56]	; 0x38
      }
    }
#endif /* USE_SD_TRANSCEIVER  */
  }

  return HAL_SD_ERROR_NONE;
 800b1ce:	2300      	movs	r3, #0
}
 800b1d0:	4618      	mov	r0, r3
 800b1d2:	3718      	adds	r7, #24
 800b1d4:	46bd      	mov	sp, r7
 800b1d6:	bd80      	pop	{r7, pc}
 800b1d8:	c1100000 	.word	0xc1100000

0800b1dc <SD_SendSDStatus>:
  * @param  pSDstatus: Pointer to the buffer that will contain the SD card status
  *         SD Status register)
  * @retval error state
  */
static uint32_t SD_SendSDStatus(SD_HandleTypeDef *hsd, uint32_t *pSDstatus)
{
 800b1dc:	b580      	push	{r7, lr}
 800b1de:	b08c      	sub	sp, #48	; 0x30
 800b1e0:	af00      	add	r7, sp, #0
 800b1e2:	6078      	str	r0, [r7, #4]
 800b1e4:	6039      	str	r1, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 800b1e6:	f7f7 f8e3 	bl	80023b0 <HAL_GetTick>
 800b1ea:	6278      	str	r0, [r7, #36]	; 0x24
  uint32_t count;
  uint32_t *pData = pSDstatus;
 800b1ec:	683b      	ldr	r3, [r7, #0]
 800b1ee:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Check SD response */
  if ((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 800b1f0:	687b      	ldr	r3, [r7, #4]
 800b1f2:	681b      	ldr	r3, [r3, #0]
 800b1f4:	2100      	movs	r1, #0
 800b1f6:	4618      	mov	r0, r3
 800b1f8:	f002 fd03 	bl	800dc02 <SDMMC_GetResponse>
 800b1fc:	4603      	mov	r3, r0
 800b1fe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800b202:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800b206:	d102      	bne.n	800b20e <SD_SendSDStatus+0x32>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 800b208:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800b20c:	e0b0      	b.n	800b370 <SD_SendSDStatus+0x194>
  }

  /* Set block size for card if it is not equal to current block size for card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 64U);
 800b20e:	687b      	ldr	r3, [r7, #4]
 800b210:	681b      	ldr	r3, [r3, #0]
 800b212:	2140      	movs	r1, #64	; 0x40
 800b214:	4618      	mov	r0, r3
 800b216:	f002 fd33 	bl	800dc80 <SDMMC_CmdBlockLength>
 800b21a:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 800b21c:	6a3b      	ldr	r3, [r7, #32]
 800b21e:	2b00      	cmp	r3, #0
 800b220:	d005      	beq.n	800b22e <SD_SendSDStatus+0x52>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_NONE;
 800b222:	687b      	ldr	r3, [r7, #4]
 800b224:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800b226:	687b      	ldr	r3, [r7, #4]
 800b228:	635a      	str	r2, [r3, #52]	; 0x34
    return errorstate;
 800b22a:	6a3b      	ldr	r3, [r7, #32]
 800b22c:	e0a0      	b.n	800b370 <SD_SendSDStatus+0x194>
  }

  /* Send CMD55 */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800b22e:	687b      	ldr	r3, [r7, #4]
 800b230:	681a      	ldr	r2, [r3, #0]
 800b232:	687b      	ldr	r3, [r7, #4]
 800b234:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b236:	041b      	lsls	r3, r3, #16
 800b238:	4619      	mov	r1, r3
 800b23a:	4610      	mov	r0, r2
 800b23c:	f002 fe6d 	bl	800df1a <SDMMC_CmdAppCommand>
 800b240:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 800b242:	6a3b      	ldr	r3, [r7, #32]
 800b244:	2b00      	cmp	r3, #0
 800b246:	d005      	beq.n	800b254 <SD_SendSDStatus+0x78>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_NONE;
 800b248:	687b      	ldr	r3, [r7, #4]
 800b24a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800b24c:	687b      	ldr	r3, [r7, #4]
 800b24e:	635a      	str	r2, [r3, #52]	; 0x34
    return errorstate;
 800b250:	6a3b      	ldr	r3, [r7, #32]
 800b252:	e08d      	b.n	800b370 <SD_SendSDStatus+0x194>
  }

  /* Configure the SD DPSM (Data Path State Machine) */
  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800b254:	f04f 33ff 	mov.w	r3, #4294967295
 800b258:	60bb      	str	r3, [r7, #8]
  config.DataLength    = 64U;
 800b25a:	2340      	movs	r3, #64	; 0x40
 800b25c:	60fb      	str	r3, [r7, #12]
  config.DataBlockSize = SDMMC_DATABLOCK_SIZE_64B;
 800b25e:	2360      	movs	r3, #96	; 0x60
 800b260:	613b      	str	r3, [r7, #16]
  config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 800b262:	2302      	movs	r3, #2
 800b264:	617b      	str	r3, [r7, #20]
  config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 800b266:	2300      	movs	r3, #0
 800b268:	61bb      	str	r3, [r7, #24]
  config.DPSM          = SDMMC_DPSM_ENABLE;
 800b26a:	2301      	movs	r3, #1
 800b26c:	61fb      	str	r3, [r7, #28]
  (void)SDMMC_ConfigData(hsd->Instance, &config);
 800b26e:	687b      	ldr	r3, [r7, #4]
 800b270:	681b      	ldr	r3, [r3, #0]
 800b272:	f107 0208 	add.w	r2, r7, #8
 800b276:	4611      	mov	r1, r2
 800b278:	4618      	mov	r0, r3
 800b27a:	f002 fcd5 	bl	800dc28 <SDMMC_ConfigData>

  /* Send ACMD13 (SD_APP_STAUS)  with argument as card's RCA */
  errorstate = SDMMC_CmdStatusRegister(hsd->Instance);
 800b27e:	687b      	ldr	r3, [r7, #4]
 800b280:	681b      	ldr	r3, [r3, #0]
 800b282:	4618      	mov	r0, r3
 800b284:	f002 ff55 	bl	800e132 <SDMMC_CmdStatusRegister>
 800b288:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 800b28a:	6a3b      	ldr	r3, [r7, #32]
 800b28c:	2b00      	cmp	r3, #0
 800b28e:	d02b      	beq.n	800b2e8 <SD_SendSDStatus+0x10c>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_NONE;
 800b290:	687b      	ldr	r3, [r7, #4]
 800b292:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800b294:	687b      	ldr	r3, [r7, #4]
 800b296:	635a      	str	r2, [r3, #52]	; 0x34
    return errorstate;
 800b298:	6a3b      	ldr	r3, [r7, #32]
 800b29a:	e069      	b.n	800b370 <SD_SendSDStatus+0x194>
  }

  /* Get status data */
  while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
  {
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOHF))
 800b29c:	687b      	ldr	r3, [r7, #4]
 800b29e:	681b      	ldr	r3, [r3, #0]
 800b2a0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b2a2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800b2a6:	2b00      	cmp	r3, #0
 800b2a8:	d013      	beq.n	800b2d2 <SD_SendSDStatus+0xf6>
    {
      for (count = 0U; count < 8U; count++)
 800b2aa:	2300      	movs	r3, #0
 800b2ac:	62fb      	str	r3, [r7, #44]	; 0x2c
 800b2ae:	e00d      	b.n	800b2cc <SD_SendSDStatus+0xf0>
      {
        *pData = SDMMC_ReadFIFO(hsd->Instance);
 800b2b0:	687b      	ldr	r3, [r7, #4]
 800b2b2:	681b      	ldr	r3, [r3, #0]
 800b2b4:	4618      	mov	r0, r3
 800b2b6:	f002 fc2f 	bl	800db18 <SDMMC_ReadFIFO>
 800b2ba:	4602      	mov	r2, r0
 800b2bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b2be:	601a      	str	r2, [r3, #0]
        pData++;
 800b2c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b2c2:	3304      	adds	r3, #4
 800b2c4:	62bb      	str	r3, [r7, #40]	; 0x28
      for (count = 0U; count < 8U; count++)
 800b2c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b2c8:	3301      	adds	r3, #1
 800b2ca:	62fb      	str	r3, [r7, #44]	; 0x2c
 800b2cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b2ce:	2b07      	cmp	r3, #7
 800b2d0:	d9ee      	bls.n	800b2b0 <SD_SendSDStatus+0xd4>
      }
    }

    if ((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 800b2d2:	f7f7 f86d 	bl	80023b0 <HAL_GetTick>
 800b2d6:	4602      	mov	r2, r0
 800b2d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b2da:	1ad3      	subs	r3, r2, r3
 800b2dc:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b2e0:	d102      	bne.n	800b2e8 <SD_SendSDStatus+0x10c>
    {
      return HAL_SD_ERROR_TIMEOUT;
 800b2e2:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800b2e6:	e043      	b.n	800b370 <SD_SendSDStatus+0x194>
  while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 800b2e8:	687b      	ldr	r3, [r7, #4]
 800b2ea:	681b      	ldr	r3, [r3, #0]
 800b2ec:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b2ee:	f403 7395 	and.w	r3, r3, #298	; 0x12a
 800b2f2:	2b00      	cmp	r3, #0
 800b2f4:	d0d2      	beq.n	800b29c <SD_SendSDStatus+0xc0>
    }
  }

  if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 800b2f6:	687b      	ldr	r3, [r7, #4]
 800b2f8:	681b      	ldr	r3, [r3, #0]
 800b2fa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b2fc:	f003 0308 	and.w	r3, r3, #8
 800b300:	2b00      	cmp	r3, #0
 800b302:	d001      	beq.n	800b308 <SD_SendSDStatus+0x12c>
  {
    return HAL_SD_ERROR_DATA_TIMEOUT;
 800b304:	2308      	movs	r3, #8
 800b306:	e033      	b.n	800b370 <SD_SendSDStatus+0x194>
  }
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 800b308:	687b      	ldr	r3, [r7, #4]
 800b30a:	681b      	ldr	r3, [r3, #0]
 800b30c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b30e:	f003 0302 	and.w	r3, r3, #2
 800b312:	2b00      	cmp	r3, #0
 800b314:	d001      	beq.n	800b31a <SD_SendSDStatus+0x13e>
  {
    return HAL_SD_ERROR_DATA_CRC_FAIL;
 800b316:	2302      	movs	r3, #2
 800b318:	e02a      	b.n	800b370 <SD_SendSDStatus+0x194>
  }
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 800b31a:	687b      	ldr	r3, [r7, #4]
 800b31c:	681b      	ldr	r3, [r3, #0]
 800b31e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b320:	f003 0320 	and.w	r3, r3, #32
 800b324:	2b00      	cmp	r3, #0
 800b326:	d017      	beq.n	800b358 <SD_SendSDStatus+0x17c>
  {
    return HAL_SD_ERROR_RX_OVERRUN;
 800b328:	2320      	movs	r3, #32
 800b32a:	e021      	b.n	800b370 <SD_SendSDStatus+0x194>
    /* Nothing to do */
  }

  while ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DPSMACT)))
  {
    *pData = SDMMC_ReadFIFO(hsd->Instance);
 800b32c:	687b      	ldr	r3, [r7, #4]
 800b32e:	681b      	ldr	r3, [r3, #0]
 800b330:	4618      	mov	r0, r3
 800b332:	f002 fbf1 	bl	800db18 <SDMMC_ReadFIFO>
 800b336:	4602      	mov	r2, r0
 800b338:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b33a:	601a      	str	r2, [r3, #0]
    pData++;
 800b33c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b33e:	3304      	adds	r3, #4
 800b340:	62bb      	str	r3, [r7, #40]	; 0x28

    if ((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 800b342:	f7f7 f835 	bl	80023b0 <HAL_GetTick>
 800b346:	4602      	mov	r2, r0
 800b348:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b34a:	1ad3      	subs	r3, r2, r3
 800b34c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b350:	d102      	bne.n	800b358 <SD_SendSDStatus+0x17c>
    {
      return HAL_SD_ERROR_TIMEOUT;
 800b352:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800b356:	e00b      	b.n	800b370 <SD_SendSDStatus+0x194>
  while ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DPSMACT)))
 800b358:	687b      	ldr	r3, [r7, #4]
 800b35a:	681b      	ldr	r3, [r3, #0]
 800b35c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b35e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800b362:	2b00      	cmp	r3, #0
 800b364:	d1e2      	bne.n	800b32c <SD_SendSDStatus+0x150>
    }
  }

  /* Clear all the static status flags*/
  __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 800b366:	687b      	ldr	r3, [r7, #4]
 800b368:	681b      	ldr	r3, [r3, #0]
 800b36a:	4a03      	ldr	r2, [pc, #12]	; (800b378 <SD_SendSDStatus+0x19c>)
 800b36c:	639a      	str	r2, [r3, #56]	; 0x38

  return HAL_SD_ERROR_NONE;
 800b36e:	2300      	movs	r3, #0
}
 800b370:	4618      	mov	r0, r3
 800b372:	3730      	adds	r7, #48	; 0x30
 800b374:	46bd      	mov	sp, r7
 800b376:	bd80      	pop	{r7, pc}
 800b378:	18000f3a 	.word	0x18000f3a

0800b37c <SD_SendStatus>:
  * @param  pCardStatus: pointer to the buffer that will contain the SD card
  *         status (Card Status register)
  * @retval error state
  */
static uint32_t SD_SendStatus(SD_HandleTypeDef *hsd, uint32_t *pCardStatus)
{
 800b37c:	b580      	push	{r7, lr}
 800b37e:	b084      	sub	sp, #16
 800b380:	af00      	add	r7, sp, #0
 800b382:	6078      	str	r0, [r7, #4]
 800b384:	6039      	str	r1, [r7, #0]
  uint32_t errorstate;

  if (pCardStatus == NULL)
 800b386:	683b      	ldr	r3, [r7, #0]
 800b388:	2b00      	cmp	r3, #0
 800b38a:	d102      	bne.n	800b392 <SD_SendStatus+0x16>
  {
    return HAL_SD_ERROR_PARAM;
 800b38c:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800b390:	e018      	b.n	800b3c4 <SD_SendStatus+0x48>
  }

  /* Send Status command */
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800b392:	687b      	ldr	r3, [r7, #4]
 800b394:	681a      	ldr	r2, [r3, #0]
 800b396:	687b      	ldr	r3, [r7, #4]
 800b398:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b39a:	041b      	lsls	r3, r3, #16
 800b39c:	4619      	mov	r1, r3
 800b39e:	4610      	mov	r0, r2
 800b3a0:	f002 fea4 	bl	800e0ec <SDMMC_CmdSendStatus>
 800b3a4:	60f8      	str	r0, [r7, #12]
  if (errorstate != HAL_SD_ERROR_NONE)
 800b3a6:	68fb      	ldr	r3, [r7, #12]
 800b3a8:	2b00      	cmp	r3, #0
 800b3aa:	d001      	beq.n	800b3b0 <SD_SendStatus+0x34>
  {
    return errorstate;
 800b3ac:	68fb      	ldr	r3, [r7, #12]
 800b3ae:	e009      	b.n	800b3c4 <SD_SendStatus+0x48>
  }

  /* Get SD card status */
  *pCardStatus = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800b3b0:	687b      	ldr	r3, [r7, #4]
 800b3b2:	681b      	ldr	r3, [r3, #0]
 800b3b4:	2100      	movs	r1, #0
 800b3b6:	4618      	mov	r0, r3
 800b3b8:	f002 fc23 	bl	800dc02 <SDMMC_GetResponse>
 800b3bc:	4602      	mov	r2, r0
 800b3be:	683b      	ldr	r3, [r7, #0]
 800b3c0:	601a      	str	r2, [r3, #0]

  return HAL_SD_ERROR_NONE;
 800b3c2:	2300      	movs	r3, #0
}
 800b3c4:	4618      	mov	r0, r3
 800b3c6:	3710      	adds	r7, #16
 800b3c8:	46bd      	mov	sp, r7
 800b3ca:	bd80      	pop	{r7, pc}

0800b3cc <SD_WideBus_Enable>:
  * @brief  Enables the SDMMC wide bus mode.
  * @param  hsd: pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Enable(SD_HandleTypeDef *hsd)
{
 800b3cc:	b580      	push	{r7, lr}
 800b3ce:	b086      	sub	sp, #24
 800b3d0:	af00      	add	r7, sp, #0
 800b3d2:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0UL, 0UL};
 800b3d4:	2300      	movs	r3, #0
 800b3d6:	60fb      	str	r3, [r7, #12]
 800b3d8:	2300      	movs	r3, #0
 800b3da:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if ((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 800b3dc:	687b      	ldr	r3, [r7, #4]
 800b3de:	681b      	ldr	r3, [r3, #0]
 800b3e0:	2100      	movs	r1, #0
 800b3e2:	4618      	mov	r0, r3
 800b3e4:	f002 fc0d 	bl	800dc02 <SDMMC_GetResponse>
 800b3e8:	4603      	mov	r3, r0
 800b3ea:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800b3ee:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800b3f2:	d102      	bne.n	800b3fa <SD_WideBus_Enable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 800b3f4:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800b3f8:	e02f      	b.n	800b45a <SD_WideBus_Enable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 800b3fa:	f107 030c 	add.w	r3, r7, #12
 800b3fe:	4619      	mov	r1, r3
 800b400:	6878      	ldr	r0, [r7, #4]
 800b402:	f000 f879 	bl	800b4f8 <SD_FindSCR>
 800b406:	6178      	str	r0, [r7, #20]
  if (errorstate != HAL_SD_ERROR_NONE)
 800b408:	697b      	ldr	r3, [r7, #20]
 800b40a:	2b00      	cmp	r3, #0
 800b40c:	d001      	beq.n	800b412 <SD_WideBus_Enable+0x46>
  {
    return errorstate;
 800b40e:	697b      	ldr	r3, [r7, #20]
 800b410:	e023      	b.n	800b45a <SD_WideBus_Enable+0x8e>
  }

  /* If requested card supports wide bus operation */
  if ((scr[1U] & SDMMC_WIDE_BUS_SUPPORT) != SDMMC_ALLZERO)
 800b412:	693b      	ldr	r3, [r7, #16]
 800b414:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800b418:	2b00      	cmp	r3, #0
 800b41a:	d01c      	beq.n	800b456 <SD_WideBus_Enable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA.*/
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800b41c:	687b      	ldr	r3, [r7, #4]
 800b41e:	681a      	ldr	r2, [r3, #0]
 800b420:	687b      	ldr	r3, [r7, #4]
 800b422:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b424:	041b      	lsls	r3, r3, #16
 800b426:	4619      	mov	r1, r3
 800b428:	4610      	mov	r0, r2
 800b42a:	f002 fd76 	bl	800df1a <SDMMC_CmdAppCommand>
 800b42e:	6178      	str	r0, [r7, #20]
    if (errorstate != HAL_SD_ERROR_NONE)
 800b430:	697b      	ldr	r3, [r7, #20]
 800b432:	2b00      	cmp	r3, #0
 800b434:	d001      	beq.n	800b43a <SD_WideBus_Enable+0x6e>
    {
      return errorstate;
 800b436:	697b      	ldr	r3, [r7, #20]
 800b438:	e00f      	b.n	800b45a <SD_WideBus_Enable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 2 for wide bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 2U);
 800b43a:	687b      	ldr	r3, [r7, #4]
 800b43c:	681b      	ldr	r3, [r3, #0]
 800b43e:	2102      	movs	r1, #2
 800b440:	4618      	mov	r0, r3
 800b442:	f002 fdad 	bl	800dfa0 <SDMMC_CmdBusWidth>
 800b446:	6178      	str	r0, [r7, #20]
    if (errorstate != HAL_SD_ERROR_NONE)
 800b448:	697b      	ldr	r3, [r7, #20]
 800b44a:	2b00      	cmp	r3, #0
 800b44c:	d001      	beq.n	800b452 <SD_WideBus_Enable+0x86>
    {
      return errorstate;
 800b44e:	697b      	ldr	r3, [r7, #20]
 800b450:	e003      	b.n	800b45a <SD_WideBus_Enable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 800b452:	2300      	movs	r3, #0
 800b454:	e001      	b.n	800b45a <SD_WideBus_Enable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800b456:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 800b45a:	4618      	mov	r0, r3
 800b45c:	3718      	adds	r7, #24
 800b45e:	46bd      	mov	sp, r7
 800b460:	bd80      	pop	{r7, pc}

0800b462 <SD_WideBus_Disable>:
  * @brief  Disables the SDMMC wide bus mode.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Disable(SD_HandleTypeDef *hsd)
{
 800b462:	b580      	push	{r7, lr}
 800b464:	b086      	sub	sp, #24
 800b466:	af00      	add	r7, sp, #0
 800b468:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0UL, 0UL};
 800b46a:	2300      	movs	r3, #0
 800b46c:	60fb      	str	r3, [r7, #12]
 800b46e:	2300      	movs	r3, #0
 800b470:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if ((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 800b472:	687b      	ldr	r3, [r7, #4]
 800b474:	681b      	ldr	r3, [r3, #0]
 800b476:	2100      	movs	r1, #0
 800b478:	4618      	mov	r0, r3
 800b47a:	f002 fbc2 	bl	800dc02 <SDMMC_GetResponse>
 800b47e:	4603      	mov	r3, r0
 800b480:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800b484:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800b488:	d102      	bne.n	800b490 <SD_WideBus_Disable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 800b48a:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800b48e:	e02f      	b.n	800b4f0 <SD_WideBus_Disable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 800b490:	f107 030c 	add.w	r3, r7, #12
 800b494:	4619      	mov	r1, r3
 800b496:	6878      	ldr	r0, [r7, #4]
 800b498:	f000 f82e 	bl	800b4f8 <SD_FindSCR>
 800b49c:	6178      	str	r0, [r7, #20]
  if (errorstate != HAL_SD_ERROR_NONE)
 800b49e:	697b      	ldr	r3, [r7, #20]
 800b4a0:	2b00      	cmp	r3, #0
 800b4a2:	d001      	beq.n	800b4a8 <SD_WideBus_Disable+0x46>
  {
    return errorstate;
 800b4a4:	697b      	ldr	r3, [r7, #20]
 800b4a6:	e023      	b.n	800b4f0 <SD_WideBus_Disable+0x8e>
  }

  /* If requested card supports 1 bit mode operation */
  if ((scr[1U] & SDMMC_SINGLE_BUS_SUPPORT) != SDMMC_ALLZERO)
 800b4a8:	693b      	ldr	r3, [r7, #16]
 800b4aa:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800b4ae:	2b00      	cmp	r3, #0
 800b4b0:	d01c      	beq.n	800b4ec <SD_WideBus_Disable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800b4b2:	687b      	ldr	r3, [r7, #4]
 800b4b4:	681a      	ldr	r2, [r3, #0]
 800b4b6:	687b      	ldr	r3, [r7, #4]
 800b4b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b4ba:	041b      	lsls	r3, r3, #16
 800b4bc:	4619      	mov	r1, r3
 800b4be:	4610      	mov	r0, r2
 800b4c0:	f002 fd2b 	bl	800df1a <SDMMC_CmdAppCommand>
 800b4c4:	6178      	str	r0, [r7, #20]
    if (errorstate != HAL_SD_ERROR_NONE)
 800b4c6:	697b      	ldr	r3, [r7, #20]
 800b4c8:	2b00      	cmp	r3, #0
 800b4ca:	d001      	beq.n	800b4d0 <SD_WideBus_Disable+0x6e>
    {
      return errorstate;
 800b4cc:	697b      	ldr	r3, [r7, #20]
 800b4ce:	e00f      	b.n	800b4f0 <SD_WideBus_Disable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 0 for single bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 0U);
 800b4d0:	687b      	ldr	r3, [r7, #4]
 800b4d2:	681b      	ldr	r3, [r3, #0]
 800b4d4:	2100      	movs	r1, #0
 800b4d6:	4618      	mov	r0, r3
 800b4d8:	f002 fd62 	bl	800dfa0 <SDMMC_CmdBusWidth>
 800b4dc:	6178      	str	r0, [r7, #20]
    if (errorstate != HAL_SD_ERROR_NONE)
 800b4de:	697b      	ldr	r3, [r7, #20]
 800b4e0:	2b00      	cmp	r3, #0
 800b4e2:	d001      	beq.n	800b4e8 <SD_WideBus_Disable+0x86>
    {
      return errorstate;
 800b4e4:	697b      	ldr	r3, [r7, #20]
 800b4e6:	e003      	b.n	800b4f0 <SD_WideBus_Disable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 800b4e8:	2300      	movs	r3, #0
 800b4ea:	e001      	b.n	800b4f0 <SD_WideBus_Disable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800b4ec:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 800b4f0:	4618      	mov	r0, r3
 800b4f2:	3718      	adds	r7, #24
 800b4f4:	46bd      	mov	sp, r7
 800b4f6:	bd80      	pop	{r7, pc}

0800b4f8 <SD_FindSCR>:
  * @param  hsd: Pointer to SD handle
  * @param  pSCR: pointer to the buffer that will contain the SCR value
  * @retval error state
  */
static uint32_t SD_FindSCR(SD_HandleTypeDef *hsd, uint32_t *pSCR)
{
 800b4f8:	b580      	push	{r7, lr}
 800b4fa:	b08e      	sub	sp, #56	; 0x38
 800b4fc:	af00      	add	r7, sp, #0
 800b4fe:	6078      	str	r0, [r7, #4]
 800b500:	6039      	str	r1, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 800b502:	f7f6 ff55 	bl	80023b0 <HAL_GetTick>
 800b506:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t index = 0U;
 800b508:	2300      	movs	r3, #0
 800b50a:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t tempscr[2U] = {0UL, 0UL};
 800b50c:	2300      	movs	r3, #0
 800b50e:	60bb      	str	r3, [r7, #8]
 800b510:	2300      	movs	r3, #0
 800b512:	60fb      	str	r3, [r7, #12]
  uint32_t *scr = pSCR;
 800b514:	683b      	ldr	r3, [r7, #0]
 800b516:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Set Block Size To 8 Bytes */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 8U);
 800b518:	687b      	ldr	r3, [r7, #4]
 800b51a:	681b      	ldr	r3, [r3, #0]
 800b51c:	2108      	movs	r1, #8
 800b51e:	4618      	mov	r0, r3
 800b520:	f002 fbae 	bl	800dc80 <SDMMC_CmdBlockLength>
 800b524:	62b8      	str	r0, [r7, #40]	; 0x28
  if (errorstate != HAL_SD_ERROR_NONE)
 800b526:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b528:	2b00      	cmp	r3, #0
 800b52a:	d001      	beq.n	800b530 <SD_FindSCR+0x38>
  {
    return errorstate;
 800b52c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b52e:	e0ad      	b.n	800b68c <SD_FindSCR+0x194>
  }

  /* Send CMD55 APP_CMD with argument as card's RCA */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)((hsd->SdCard.RelCardAdd) << 16U));
 800b530:	687b      	ldr	r3, [r7, #4]
 800b532:	681a      	ldr	r2, [r3, #0]
 800b534:	687b      	ldr	r3, [r7, #4]
 800b536:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b538:	041b      	lsls	r3, r3, #16
 800b53a:	4619      	mov	r1, r3
 800b53c:	4610      	mov	r0, r2
 800b53e:	f002 fcec 	bl	800df1a <SDMMC_CmdAppCommand>
 800b542:	62b8      	str	r0, [r7, #40]	; 0x28
  if (errorstate != HAL_SD_ERROR_NONE)
 800b544:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b546:	2b00      	cmp	r3, #0
 800b548:	d001      	beq.n	800b54e <SD_FindSCR+0x56>
  {
    return errorstate;
 800b54a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b54c:	e09e      	b.n	800b68c <SD_FindSCR+0x194>
  }

  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800b54e:	f04f 33ff 	mov.w	r3, #4294967295
 800b552:	613b      	str	r3, [r7, #16]
  config.DataLength    = 8U;
 800b554:	2308      	movs	r3, #8
 800b556:	617b      	str	r3, [r7, #20]
  config.DataBlockSize = SDMMC_DATABLOCK_SIZE_8B;
 800b558:	2330      	movs	r3, #48	; 0x30
 800b55a:	61bb      	str	r3, [r7, #24]
  config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 800b55c:	2302      	movs	r3, #2
 800b55e:	61fb      	str	r3, [r7, #28]
  config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 800b560:	2300      	movs	r3, #0
 800b562:	623b      	str	r3, [r7, #32]
  config.DPSM          = SDMMC_DPSM_ENABLE;
 800b564:	2301      	movs	r3, #1
 800b566:	627b      	str	r3, [r7, #36]	; 0x24
  (void)SDMMC_ConfigData(hsd->Instance, &config);
 800b568:	687b      	ldr	r3, [r7, #4]
 800b56a:	681b      	ldr	r3, [r3, #0]
 800b56c:	f107 0210 	add.w	r2, r7, #16
 800b570:	4611      	mov	r1, r2
 800b572:	4618      	mov	r0, r3
 800b574:	f002 fb58 	bl	800dc28 <SDMMC_ConfigData>

  /* Send ACMD51 SD_APP_SEND_SCR with argument as 0 */
  errorstate = SDMMC_CmdSendSCR(hsd->Instance);
 800b578:	687b      	ldr	r3, [r7, #4]
 800b57a:	681b      	ldr	r3, [r3, #0]
 800b57c:	4618      	mov	r0, r3
 800b57e:	f002 fd32 	bl	800dfe6 <SDMMC_CmdSendSCR>
 800b582:	62b8      	str	r0, [r7, #40]	; 0x28
  if (errorstate != HAL_SD_ERROR_NONE)
 800b584:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b586:	2b00      	cmp	r3, #0
 800b588:	d027      	beq.n	800b5da <SD_FindSCR+0xe2>
  {
    return errorstate;
 800b58a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b58c:	e07e      	b.n	800b68c <SD_FindSCR+0x194>
  }

  while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND |
                            SDMMC_FLAG_DATAEND))
  {
    if ((!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOE)) && (index == 0U))
 800b58e:	687b      	ldr	r3, [r7, #4]
 800b590:	681b      	ldr	r3, [r3, #0]
 800b592:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b594:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800b598:	2b00      	cmp	r3, #0
 800b59a:	d113      	bne.n	800b5c4 <SD_FindSCR+0xcc>
 800b59c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b59e:	2b00      	cmp	r3, #0
 800b5a0:	d110      	bne.n	800b5c4 <SD_FindSCR+0xcc>
    {
      tempscr[0] = SDMMC_ReadFIFO(hsd->Instance);
 800b5a2:	687b      	ldr	r3, [r7, #4]
 800b5a4:	681b      	ldr	r3, [r3, #0]
 800b5a6:	4618      	mov	r0, r3
 800b5a8:	f002 fab6 	bl	800db18 <SDMMC_ReadFIFO>
 800b5ac:	4603      	mov	r3, r0
 800b5ae:	60bb      	str	r3, [r7, #8]
      tempscr[1] = SDMMC_ReadFIFO(hsd->Instance);
 800b5b0:	687b      	ldr	r3, [r7, #4]
 800b5b2:	681b      	ldr	r3, [r3, #0]
 800b5b4:	4618      	mov	r0, r3
 800b5b6:	f002 faaf 	bl	800db18 <SDMMC_ReadFIFO>
 800b5ba:	4603      	mov	r3, r0
 800b5bc:	60fb      	str	r3, [r7, #12]
      index++;
 800b5be:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b5c0:	3301      	adds	r3, #1
 800b5c2:	637b      	str	r3, [r7, #52]	; 0x34
    }


    if ((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 800b5c4:	f7f6 fef4 	bl	80023b0 <HAL_GetTick>
 800b5c8:	4602      	mov	r2, r0
 800b5ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b5cc:	1ad3      	subs	r3, r2, r3
 800b5ce:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b5d2:	d102      	bne.n	800b5da <SD_FindSCR+0xe2>
    {
      return HAL_SD_ERROR_TIMEOUT;
 800b5d4:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800b5d8:	e058      	b.n	800b68c <SD_FindSCR+0x194>
  while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND |
 800b5da:	687b      	ldr	r3, [r7, #4]
 800b5dc:	681b      	ldr	r3, [r3, #0]
 800b5de:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800b5e0:	f240 532a 	movw	r3, #1322	; 0x52a
 800b5e4:	4013      	ands	r3, r2
 800b5e6:	2b00      	cmp	r3, #0
 800b5e8:	d0d1      	beq.n	800b58e <SD_FindSCR+0x96>
    }
  }

  if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 800b5ea:	687b      	ldr	r3, [r7, #4]
 800b5ec:	681b      	ldr	r3, [r3, #0]
 800b5ee:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b5f0:	f003 0308 	and.w	r3, r3, #8
 800b5f4:	2b00      	cmp	r3, #0
 800b5f6:	d005      	beq.n	800b604 <SD_FindSCR+0x10c>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DTIMEOUT);
 800b5f8:	687b      	ldr	r3, [r7, #4]
 800b5fa:	681b      	ldr	r3, [r3, #0]
 800b5fc:	2208      	movs	r2, #8
 800b5fe:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_TIMEOUT;
 800b600:	2308      	movs	r3, #8
 800b602:	e043      	b.n	800b68c <SD_FindSCR+0x194>
  }
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 800b604:	687b      	ldr	r3, [r7, #4]
 800b606:	681b      	ldr	r3, [r3, #0]
 800b608:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b60a:	f003 0302 	and.w	r3, r3, #2
 800b60e:	2b00      	cmp	r3, #0
 800b610:	d005      	beq.n	800b61e <SD_FindSCR+0x126>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DCRCFAIL);
 800b612:	687b      	ldr	r3, [r7, #4]
 800b614:	681b      	ldr	r3, [r3, #0]
 800b616:	2202      	movs	r2, #2
 800b618:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_CRC_FAIL;
 800b61a:	2302      	movs	r3, #2
 800b61c:	e036      	b.n	800b68c <SD_FindSCR+0x194>
  }
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 800b61e:	687b      	ldr	r3, [r7, #4]
 800b620:	681b      	ldr	r3, [r3, #0]
 800b622:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b624:	f003 0320 	and.w	r3, r3, #32
 800b628:	2b00      	cmp	r3, #0
 800b62a:	d005      	beq.n	800b638 <SD_FindSCR+0x140>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_RXOVERR);
 800b62c:	687b      	ldr	r3, [r7, #4]
 800b62e:	681b      	ldr	r3, [r3, #0]
 800b630:	2220      	movs	r2, #32
 800b632:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_RX_OVERRUN;
 800b634:	2320      	movs	r3, #32
 800b636:	e029      	b.n	800b68c <SD_FindSCR+0x194>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 800b638:	687b      	ldr	r3, [r7, #4]
 800b63a:	681b      	ldr	r3, [r3, #0]
 800b63c:	4a15      	ldr	r2, [pc, #84]	; (800b694 <SD_FindSCR+0x19c>)
 800b63e:	639a      	str	r2, [r3, #56]	; 0x38

    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) | \
 800b640:	68fb      	ldr	r3, [r7, #12]
 800b642:	061a      	lsls	r2, r3, #24
 800b644:	68fb      	ldr	r3, [r7, #12]
 800b646:	021b      	lsls	r3, r3, #8
 800b648:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800b64c:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 800b64e:	68fb      	ldr	r3, [r7, #12]
 800b650:	0a1b      	lsrs	r3, r3, #8
 800b652:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) | \
 800b656:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 800b658:	68fb      	ldr	r3, [r7, #12]
 800b65a:	0e1b      	lsrs	r3, r3, #24
 800b65c:	431a      	orrs	r2, r3
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) | \
 800b65e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b660:	601a      	str	r2, [r3, #0]
    scr++;
 800b662:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b664:	3304      	adds	r3, #4
 800b666:	62fb      	str	r3, [r7, #44]	; 0x2c
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) | \
 800b668:	68bb      	ldr	r3, [r7, #8]
 800b66a:	061a      	lsls	r2, r3, #24
 800b66c:	68bb      	ldr	r3, [r7, #8]
 800b66e:	021b      	lsls	r3, r3, #8
 800b670:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800b674:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 800b676:	68bb      	ldr	r3, [r7, #8]
 800b678:	0a1b      	lsrs	r3, r3, #8
 800b67a:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) | \
 800b67e:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 800b680:	68bb      	ldr	r3, [r7, #8]
 800b682:	0e1b      	lsrs	r3, r3, #24
 800b684:	431a      	orrs	r2, r3
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) | \
 800b686:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b688:	601a      	str	r2, [r3, #0]

  }

  return HAL_SD_ERROR_NONE;
 800b68a:	2300      	movs	r3, #0
}
 800b68c:	4618      	mov	r0, r3
 800b68e:	3738      	adds	r7, #56	; 0x38
 800b690:	46bd      	mov	sp, r7
 800b692:	bd80      	pop	{r7, pc}
 800b694:	18000f3a 	.word	0x18000f3a

0800b698 <SD_Read_IT>:
  * @param  hsd: pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Read_IT(SD_HandleTypeDef *hsd)
{
 800b698:	b580      	push	{r7, lr}
 800b69a:	b086      	sub	sp, #24
 800b69c:	af00      	add	r7, sp, #0
 800b69e:	6078      	str	r0, [r7, #4]
  uint32_t count;
  uint32_t data;
  uint8_t *tmp;

  tmp = hsd->pRxBuffPtr;
 800b6a0:	687b      	ldr	r3, [r7, #4]
 800b6a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b6a4:	613b      	str	r3, [r7, #16]

  if (hsd->RxXferSize >= 32U)
 800b6a6:	687b      	ldr	r3, [r7, #4]
 800b6a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b6aa:	2b1f      	cmp	r3, #31
 800b6ac:	d936      	bls.n	800b71c <SD_Read_IT+0x84>
  {
    /* Read data from SDMMC Rx FIFO */
    for (count = 0U; count < 8U; count++)
 800b6ae:	2300      	movs	r3, #0
 800b6b0:	617b      	str	r3, [r7, #20]
 800b6b2:	e027      	b.n	800b704 <SD_Read_IT+0x6c>
    {
      data = SDMMC_ReadFIFO(hsd->Instance);
 800b6b4:	687b      	ldr	r3, [r7, #4]
 800b6b6:	681b      	ldr	r3, [r3, #0]
 800b6b8:	4618      	mov	r0, r3
 800b6ba:	f002 fa2d 	bl	800db18 <SDMMC_ReadFIFO>
 800b6be:	60f8      	str	r0, [r7, #12]
      *tmp = (uint8_t)(data & 0xFFU);
 800b6c0:	68fb      	ldr	r3, [r7, #12]
 800b6c2:	b2da      	uxtb	r2, r3
 800b6c4:	693b      	ldr	r3, [r7, #16]
 800b6c6:	701a      	strb	r2, [r3, #0]
      tmp++;
 800b6c8:	693b      	ldr	r3, [r7, #16]
 800b6ca:	3301      	adds	r3, #1
 800b6cc:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 8U) & 0xFFU);
 800b6ce:	68fb      	ldr	r3, [r7, #12]
 800b6d0:	0a1b      	lsrs	r3, r3, #8
 800b6d2:	b2da      	uxtb	r2, r3
 800b6d4:	693b      	ldr	r3, [r7, #16]
 800b6d6:	701a      	strb	r2, [r3, #0]
      tmp++;
 800b6d8:	693b      	ldr	r3, [r7, #16]
 800b6da:	3301      	adds	r3, #1
 800b6dc:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 16U) & 0xFFU);
 800b6de:	68fb      	ldr	r3, [r7, #12]
 800b6e0:	0c1b      	lsrs	r3, r3, #16
 800b6e2:	b2da      	uxtb	r2, r3
 800b6e4:	693b      	ldr	r3, [r7, #16]
 800b6e6:	701a      	strb	r2, [r3, #0]
      tmp++;
 800b6e8:	693b      	ldr	r3, [r7, #16]
 800b6ea:	3301      	adds	r3, #1
 800b6ec:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 24U) & 0xFFU);
 800b6ee:	68fb      	ldr	r3, [r7, #12]
 800b6f0:	0e1b      	lsrs	r3, r3, #24
 800b6f2:	b2da      	uxtb	r2, r3
 800b6f4:	693b      	ldr	r3, [r7, #16]
 800b6f6:	701a      	strb	r2, [r3, #0]
      tmp++;
 800b6f8:	693b      	ldr	r3, [r7, #16]
 800b6fa:	3301      	adds	r3, #1
 800b6fc:	613b      	str	r3, [r7, #16]
    for (count = 0U; count < 8U; count++)
 800b6fe:	697b      	ldr	r3, [r7, #20]
 800b700:	3301      	adds	r3, #1
 800b702:	617b      	str	r3, [r7, #20]
 800b704:	697b      	ldr	r3, [r7, #20]
 800b706:	2b07      	cmp	r3, #7
 800b708:	d9d4      	bls.n	800b6b4 <SD_Read_IT+0x1c>
    }

    hsd->pRxBuffPtr = tmp;
 800b70a:	687b      	ldr	r3, [r7, #4]
 800b70c:	693a      	ldr	r2, [r7, #16]
 800b70e:	625a      	str	r2, [r3, #36]	; 0x24
    hsd->RxXferSize -= 32U;
 800b710:	687b      	ldr	r3, [r7, #4]
 800b712:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b714:	f1a3 0220 	sub.w	r2, r3, #32
 800b718:	687b      	ldr	r3, [r7, #4]
 800b71a:	629a      	str	r2, [r3, #40]	; 0x28
  }
}
 800b71c:	bf00      	nop
 800b71e:	3718      	adds	r7, #24
 800b720:	46bd      	mov	sp, r7
 800b722:	bd80      	pop	{r7, pc}

0800b724 <SD_Write_IT>:
  * @param  hsd: pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Write_IT(SD_HandleTypeDef *hsd)
{
 800b724:	b580      	push	{r7, lr}
 800b726:	b086      	sub	sp, #24
 800b728:	af00      	add	r7, sp, #0
 800b72a:	6078      	str	r0, [r7, #4]
  uint32_t count;
  uint32_t data;
  uint8_t *tmp;

  tmp = hsd->pTxBuffPtr;
 800b72c:	687b      	ldr	r3, [r7, #4]
 800b72e:	69db      	ldr	r3, [r3, #28]
 800b730:	613b      	str	r3, [r7, #16]

  if (hsd->TxXferSize >= 32U)
 800b732:	687b      	ldr	r3, [r7, #4]
 800b734:	6a1b      	ldr	r3, [r3, #32]
 800b736:	2b1f      	cmp	r3, #31
 800b738:	d93a      	bls.n	800b7b0 <SD_Write_IT+0x8c>
  {
    /* Write data to SDMMC Tx FIFO */
    for (count = 0U; count < 8U; count++)
 800b73a:	2300      	movs	r3, #0
 800b73c:	617b      	str	r3, [r7, #20]
 800b73e:	e02b      	b.n	800b798 <SD_Write_IT+0x74>
    {
      data = (uint32_t)(*tmp);
 800b740:	693b      	ldr	r3, [r7, #16]
 800b742:	781b      	ldrb	r3, [r3, #0]
 800b744:	60fb      	str	r3, [r7, #12]
      tmp++;
 800b746:	693b      	ldr	r3, [r7, #16]
 800b748:	3301      	adds	r3, #1
 800b74a:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 8U);
 800b74c:	693b      	ldr	r3, [r7, #16]
 800b74e:	781b      	ldrb	r3, [r3, #0]
 800b750:	021a      	lsls	r2, r3, #8
 800b752:	68fb      	ldr	r3, [r7, #12]
 800b754:	4313      	orrs	r3, r2
 800b756:	60fb      	str	r3, [r7, #12]
      tmp++;
 800b758:	693b      	ldr	r3, [r7, #16]
 800b75a:	3301      	adds	r3, #1
 800b75c:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 16U);
 800b75e:	693b      	ldr	r3, [r7, #16]
 800b760:	781b      	ldrb	r3, [r3, #0]
 800b762:	041a      	lsls	r2, r3, #16
 800b764:	68fb      	ldr	r3, [r7, #12]
 800b766:	4313      	orrs	r3, r2
 800b768:	60fb      	str	r3, [r7, #12]
      tmp++;
 800b76a:	693b      	ldr	r3, [r7, #16]
 800b76c:	3301      	adds	r3, #1
 800b76e:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 24U);
 800b770:	693b      	ldr	r3, [r7, #16]
 800b772:	781b      	ldrb	r3, [r3, #0]
 800b774:	061a      	lsls	r2, r3, #24
 800b776:	68fb      	ldr	r3, [r7, #12]
 800b778:	4313      	orrs	r3, r2
 800b77a:	60fb      	str	r3, [r7, #12]
      tmp++;
 800b77c:	693b      	ldr	r3, [r7, #16]
 800b77e:	3301      	adds	r3, #1
 800b780:	613b      	str	r3, [r7, #16]
      (void)SDMMC_WriteFIFO(hsd->Instance, &data);
 800b782:	687b      	ldr	r3, [r7, #4]
 800b784:	681b      	ldr	r3, [r3, #0]
 800b786:	f107 020c 	add.w	r2, r7, #12
 800b78a:	4611      	mov	r1, r2
 800b78c:	4618      	mov	r0, r3
 800b78e:	f002 f9d0 	bl	800db32 <SDMMC_WriteFIFO>
    for (count = 0U; count < 8U; count++)
 800b792:	697b      	ldr	r3, [r7, #20]
 800b794:	3301      	adds	r3, #1
 800b796:	617b      	str	r3, [r7, #20]
 800b798:	697b      	ldr	r3, [r7, #20]
 800b79a:	2b07      	cmp	r3, #7
 800b79c:	d9d0      	bls.n	800b740 <SD_Write_IT+0x1c>
    }

    hsd->pTxBuffPtr = tmp;
 800b79e:	687b      	ldr	r3, [r7, #4]
 800b7a0:	693a      	ldr	r2, [r7, #16]
 800b7a2:	61da      	str	r2, [r3, #28]
    hsd->TxXferSize -= 32U;
 800b7a4:	687b      	ldr	r3, [r7, #4]
 800b7a6:	6a1b      	ldr	r3, [r3, #32]
 800b7a8:	f1a3 0220 	sub.w	r2, r3, #32
 800b7ac:	687b      	ldr	r3, [r7, #4]
 800b7ae:	621a      	str	r2, [r3, #32]
  }
}
 800b7b0:	bf00      	nop
 800b7b2:	3718      	adds	r7, #24
 800b7b4:	46bd      	mov	sp, r7
 800b7b6:	bd80      	pop	{r7, pc}

0800b7b8 <HAL_SDEx_Read_DMADoubleBuf0CpltCallback>:
  * @brief Read DMA Buffer 0 Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
__weak void HAL_SDEx_Read_DMADoubleBuf0CpltCallback(SD_HandleTypeDef *hsd)
{
 800b7b8:	b480      	push	{r7}
 800b7ba:	b083      	sub	sp, #12
 800b7bc:	af00      	add	r7, sp, #0
 800b7be:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SDEx_Read_DMADoubleBuf0CpltCallback can be implemented in the user file
   */
}
 800b7c0:	bf00      	nop
 800b7c2:	370c      	adds	r7, #12
 800b7c4:	46bd      	mov	sp, r7
 800b7c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b7ca:	4770      	bx	lr

0800b7cc <HAL_SDEx_Read_DMADoubleBuf1CpltCallback>:
  * @brief Read DMA Buffer 1 Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
__weak void HAL_SDEx_Read_DMADoubleBuf1CpltCallback(SD_HandleTypeDef *hsd)
{
 800b7cc:	b480      	push	{r7}
 800b7ce:	b083      	sub	sp, #12
 800b7d0:	af00      	add	r7, sp, #0
 800b7d2:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SDEx_Read_DMADoubleBuf1CpltCallback can be implemented in the user file
   */
}
 800b7d4:	bf00      	nop
 800b7d6:	370c      	adds	r7, #12
 800b7d8:	46bd      	mov	sp, r7
 800b7da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b7de:	4770      	bx	lr

0800b7e0 <HAL_SDEx_Write_DMADoubleBuf0CpltCallback>:
  * @brief Write DMA Buffer 0 Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
__weak void HAL_SDEx_Write_DMADoubleBuf0CpltCallback(SD_HandleTypeDef *hsd)
{
 800b7e0:	b480      	push	{r7}
 800b7e2:	b083      	sub	sp, #12
 800b7e4:	af00      	add	r7, sp, #0
 800b7e6:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SDEx_Write_DMADoubleBuf0CpltCallback can be implemented in the user file
   */
}
 800b7e8:	bf00      	nop
 800b7ea:	370c      	adds	r7, #12
 800b7ec:	46bd      	mov	sp, r7
 800b7ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b7f2:	4770      	bx	lr

0800b7f4 <HAL_SDEx_Write_DMADoubleBuf1CpltCallback>:
  * @brief Write DMA Buffer 1 Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
__weak void HAL_SDEx_Write_DMADoubleBuf1CpltCallback(SD_HandleTypeDef *hsd)
{
 800b7f4:	b480      	push	{r7}
 800b7f6:	b083      	sub	sp, #12
 800b7f8:	af00      	add	r7, sp, #0
 800b7fa:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SDEx_Write_DMADoubleBuf1CpltCallback can be implemented in the user file
   */
}
 800b7fc:	bf00      	nop
 800b7fe:	370c      	adds	r7, #12
 800b800:	46bd      	mov	sp, r7
 800b802:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b806:	4770      	bx	lr

0800b808 <HAL_SDRAM_Init>:
  *                the configuration information for SDRAM module.
  * @param  Timing Pointer to SDRAM control timing structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_Init(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_TimingTypeDef *Timing)
{
 800b808:	b580      	push	{r7, lr}
 800b80a:	b082      	sub	sp, #8
 800b80c:	af00      	add	r7, sp, #0
 800b80e:	6078      	str	r0, [r7, #4]
 800b810:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM handle parameter */
  if (hsdram == NULL)
 800b812:	687b      	ldr	r3, [r7, #4]
 800b814:	2b00      	cmp	r3, #0
 800b816:	d101      	bne.n	800b81c <HAL_SDRAM_Init+0x14>
  {
    return HAL_ERROR;
 800b818:	2301      	movs	r3, #1
 800b81a:	e02b      	b.n	800b874 <HAL_SDRAM_Init+0x6c>
  }

  if (hsdram->State == HAL_SDRAM_STATE_RESET)
 800b81c:	687b      	ldr	r3, [r7, #4]
 800b81e:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800b822:	b2db      	uxtb	r3, r3
 800b824:	2b00      	cmp	r3, #0
 800b826:	d106      	bne.n	800b836 <HAL_SDRAM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hsdram->Lock = HAL_UNLOCKED;
 800b828:	687b      	ldr	r3, [r7, #4]
 800b82a:	2200      	movs	r2, #0
 800b82c:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

    /* Init the low level hardware */
    hsdram->MspInitCallback(hsdram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SDRAM_MspInit(hsdram);
 800b830:	6878      	ldr	r0, [r7, #4]
 800b832:	f7f5 fd4d 	bl	80012d0 <HAL_SDRAM_MspInit>
#endif /* USE_HAL_SDRAM_REGISTER_CALLBACKS */
  }

  /* Initialize the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 800b836:	687b      	ldr	r3, [r7, #4]
 800b838:	2202      	movs	r2, #2
 800b83a:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  /* Initialize SDRAM control Interface */
  (void)FMC_SDRAM_Init(hsdram->Instance, &(hsdram->Init));
 800b83e:	687b      	ldr	r3, [r7, #4]
 800b840:	681a      	ldr	r2, [r3, #0]
 800b842:	687b      	ldr	r3, [r7, #4]
 800b844:	3304      	adds	r3, #4
 800b846:	4619      	mov	r1, r3
 800b848:	4610      	mov	r0, r2
 800b84a:	f002 f875 	bl	800d938 <FMC_SDRAM_Init>

  /* Initialize SDRAM timing Interface */
  (void)FMC_SDRAM_Timing_Init(hsdram->Instance, Timing, hsdram->Init.SDBank);
 800b84e:	687b      	ldr	r3, [r7, #4]
 800b850:	6818      	ldr	r0, [r3, #0]
 800b852:	687b      	ldr	r3, [r7, #4]
 800b854:	685b      	ldr	r3, [r3, #4]
 800b856:	461a      	mov	r2, r3
 800b858:	6839      	ldr	r1, [r7, #0]
 800b85a:	f002 f8c9 	bl	800d9f0 <FMC_SDRAM_Timing_Init>

  /* Enable FMC Peripheral */
  __FMC_ENABLE();
 800b85e:	4b07      	ldr	r3, [pc, #28]	; (800b87c <HAL_SDRAM_Init+0x74>)
 800b860:	681b      	ldr	r3, [r3, #0]
 800b862:	4a06      	ldr	r2, [pc, #24]	; (800b87c <HAL_SDRAM_Init+0x74>)
 800b864:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800b868:	6013      	str	r3, [r2, #0]
  /* Update the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_READY;
 800b86a:	687b      	ldr	r3, [r7, #4]
 800b86c:	2201      	movs	r2, #1
 800b86e:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 800b872:	2300      	movs	r3, #0
}
 800b874:	4618      	mov	r0, r3
 800b876:	3708      	adds	r7, #8
 800b878:	46bd      	mov	sp, r7
 800b87a:	bd80      	pop	{r7, pc}
 800b87c:	52004000 	.word	0x52004000

0800b880 <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800b880:	b580      	push	{r7, lr}
 800b882:	b084      	sub	sp, #16
 800b884:	af00      	add	r7, sp, #0
 800b886:	6078      	str	r0, [r7, #4]
#if (USE_SPI_CRC != 0UL)
  uint32_t crc_length;
#else
  uint32_t crc_length = 0UL;
 800b888:	2300      	movs	r3, #0
 800b88a:	60fb      	str	r3, [r7, #12]
#endif
  uint32_t packet_length;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800b88c:	687b      	ldr	r3, [r7, #4]
 800b88e:	2b00      	cmp	r3, #0
 800b890:	d101      	bne.n	800b896 <HAL_SPI_Init+0x16>
  {
    return HAL_ERROR;
 800b892:	2301      	movs	r3, #1
 800b894:	e0eb      	b.n	800ba6e <HAL_SPI_Init+0x1ee>
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.TxCRCInitializationPattern));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.RxCRCInitializationPattern));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800b896:	687b      	ldr	r3, [r7, #4]
 800b898:	2200      	movs	r2, #0
 800b89a:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  /* Verify that the SPI instance supports Data Size higher than 16bits */
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 800b89c:	687b      	ldr	r3, [r7, #4]
 800b89e:	681b      	ldr	r3, [r3, #0]
 800b8a0:	4a75      	ldr	r2, [pc, #468]	; (800ba78 <HAL_SPI_Init+0x1f8>)
 800b8a2:	4293      	cmp	r3, r2
 800b8a4:	d00f      	beq.n	800b8c6 <HAL_SPI_Init+0x46>
 800b8a6:	687b      	ldr	r3, [r7, #4]
 800b8a8:	681b      	ldr	r3, [r3, #0]
 800b8aa:	4a74      	ldr	r2, [pc, #464]	; (800ba7c <HAL_SPI_Init+0x1fc>)
 800b8ac:	4293      	cmp	r3, r2
 800b8ae:	d00a      	beq.n	800b8c6 <HAL_SPI_Init+0x46>
 800b8b0:	687b      	ldr	r3, [r7, #4]
 800b8b2:	681b      	ldr	r3, [r3, #0]
 800b8b4:	4a72      	ldr	r2, [pc, #456]	; (800ba80 <HAL_SPI_Init+0x200>)
 800b8b6:	4293      	cmp	r3, r2
 800b8b8:	d005      	beq.n	800b8c6 <HAL_SPI_Init+0x46>
 800b8ba:	687b      	ldr	r3, [r7, #4]
 800b8bc:	68db      	ldr	r3, [r3, #12]
 800b8be:	2b0f      	cmp	r3, #15
 800b8c0:	d901      	bls.n	800b8c6 <HAL_SPI_Init+0x46>
  {
    return HAL_ERROR;
 800b8c2:	2301      	movs	r3, #1
 800b8c4:	e0d3      	b.n	800ba6e <HAL_SPI_Init+0x1ee>
  }

  /* Verify that the SPI instance supports requested data packing */
  packet_length = SPI_GetPacketSize(hspi);
 800b8c6:	6878      	ldr	r0, [r7, #4]
 800b8c8:	f000 fe88 	bl	800c5dc <SPI_GetPacketSize>
 800b8cc:	60b8      	str	r0, [r7, #8]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 800b8ce:	687b      	ldr	r3, [r7, #4]
 800b8d0:	681b      	ldr	r3, [r3, #0]
 800b8d2:	4a69      	ldr	r2, [pc, #420]	; (800ba78 <HAL_SPI_Init+0x1f8>)
 800b8d4:	4293      	cmp	r3, r2
 800b8d6:	d00c      	beq.n	800b8f2 <HAL_SPI_Init+0x72>
 800b8d8:	687b      	ldr	r3, [r7, #4]
 800b8da:	681b      	ldr	r3, [r3, #0]
 800b8dc:	4a67      	ldr	r2, [pc, #412]	; (800ba7c <HAL_SPI_Init+0x1fc>)
 800b8de:	4293      	cmp	r3, r2
 800b8e0:	d007      	beq.n	800b8f2 <HAL_SPI_Init+0x72>
 800b8e2:	687b      	ldr	r3, [r7, #4]
 800b8e4:	681b      	ldr	r3, [r3, #0]
 800b8e6:	4a66      	ldr	r2, [pc, #408]	; (800ba80 <HAL_SPI_Init+0x200>)
 800b8e8:	4293      	cmp	r3, r2
 800b8ea:	d002      	beq.n	800b8f2 <HAL_SPI_Init+0x72>
 800b8ec:	68bb      	ldr	r3, [r7, #8]
 800b8ee:	2b08      	cmp	r3, #8
 800b8f0:	d811      	bhi.n	800b916 <HAL_SPI_Init+0x96>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 800b8f2:	687b      	ldr	r3, [r7, #4]
 800b8f4:	681b      	ldr	r3, [r3, #0]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 800b8f6:	4a60      	ldr	r2, [pc, #384]	; (800ba78 <HAL_SPI_Init+0x1f8>)
 800b8f8:	4293      	cmp	r3, r2
 800b8fa:	d009      	beq.n	800b910 <HAL_SPI_Init+0x90>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 800b8fc:	687b      	ldr	r3, [r7, #4]
 800b8fe:	681b      	ldr	r3, [r3, #0]
 800b900:	4a5e      	ldr	r2, [pc, #376]	; (800ba7c <HAL_SPI_Init+0x1fc>)
 800b902:	4293      	cmp	r3, r2
 800b904:	d004      	beq.n	800b910 <HAL_SPI_Init+0x90>
 800b906:	687b      	ldr	r3, [r7, #4]
 800b908:	681b      	ldr	r3, [r3, #0]
 800b90a:	4a5d      	ldr	r2, [pc, #372]	; (800ba80 <HAL_SPI_Init+0x200>)
 800b90c:	4293      	cmp	r3, r2
 800b90e:	d104      	bne.n	800b91a <HAL_SPI_Init+0x9a>
 800b910:	68bb      	ldr	r3, [r7, #8]
 800b912:	2b10      	cmp	r3, #16
 800b914:	d901      	bls.n	800b91a <HAL_SPI_Init+0x9a>
  {
    return HAL_ERROR;
 800b916:	2301      	movs	r3, #1
 800b918:	e0a9      	b.n	800ba6e <HAL_SPI_Init+0x1ee>
  {
    crc_length = hspi->Init.DataSize << SPI_CFG1_CRCSIZE_Pos;
  }
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800b91a:	687b      	ldr	r3, [r7, #4]
 800b91c:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800b920:	b2db      	uxtb	r3, r3
 800b922:	2b00      	cmp	r3, #0
 800b924:	d106      	bne.n	800b934 <HAL_SPI_Init+0xb4>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800b926:	687b      	ldr	r3, [r7, #4]
 800b928:	2200      	movs	r2, #0
 800b92a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800b92e:	6878      	ldr	r0, [r7, #4]
 800b930:	f7f6 f976 	bl	8001c20 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800b934:	687b      	ldr	r3, [r7, #4]
 800b936:	2202      	movs	r2, #2
 800b938:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800b93c:	687b      	ldr	r3, [r7, #4]
 800b93e:	681b      	ldr	r3, [r3, #0]
 800b940:	681a      	ldr	r2, [r3, #0]
 800b942:	687b      	ldr	r3, [r7, #4]
 800b944:	681b      	ldr	r3, [r3, #0]
 800b946:	f022 0201 	bic.w	r2, r2, #1
 800b94a:	601a      	str	r2, [r3, #0]
  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */

  /* SPIx NSS Software Management Configuration */
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 800b94c:	687b      	ldr	r3, [r7, #4]
 800b94e:	699b      	ldr	r3, [r3, #24]
 800b950:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800b954:	d119      	bne.n	800b98a <HAL_SPI_Init+0x10a>
 800b956:	687b      	ldr	r3, [r7, #4]
 800b958:	685b      	ldr	r3, [r3, #4]
 800b95a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800b95e:	d103      	bne.n	800b968 <HAL_SPI_Init+0xe8>
 800b960:	687b      	ldr	r3, [r7, #4]
 800b962:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b964:	2b00      	cmp	r3, #0
 800b966:	d008      	beq.n	800b97a <HAL_SPI_Init+0xfa>
     ((hspi->Init.Mode == SPI_MODE_SLAVE) && (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 800b968:	687b      	ldr	r3, [r7, #4]
 800b96a:	685b      	ldr	r3, [r3, #4]
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 800b96c:	2b00      	cmp	r3, #0
 800b96e:	d10c      	bne.n	800b98a <HAL_SPI_Init+0x10a>
     ((hspi->Init.Mode == SPI_MODE_SLAVE) && (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 800b970:	687b      	ldr	r3, [r7, #4]
 800b972:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b974:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800b978:	d107      	bne.n	800b98a <HAL_SPI_Init+0x10a>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 800b97a:	687b      	ldr	r3, [r7, #4]
 800b97c:	681b      	ldr	r3, [r3, #0]
 800b97e:	681a      	ldr	r2, [r3, #0]
 800b980:	687b      	ldr	r3, [r7, #4]
 800b982:	681b      	ldr	r3, [r3, #0]
 800b984:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800b988:	601a      	str	r2, [r3, #0]
  }

  /* SPIx CFG1 Configuration */
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 800b98a:	687b      	ldr	r3, [r7, #4]
 800b98c:	69da      	ldr	r2, [r3, #28]
 800b98e:	687b      	ldr	r3, [r7, #4]
 800b990:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b992:	431a      	orrs	r2, r3
 800b994:	68fb      	ldr	r3, [r7, #12]
 800b996:	431a      	orrs	r2, r3
 800b998:	687b      	ldr	r3, [r7, #4]
 800b99a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b99c:	ea42 0103 	orr.w	r1, r2, r3
 800b9a0:	687b      	ldr	r3, [r7, #4]
 800b9a2:	68da      	ldr	r2, [r3, #12]
 800b9a4:	687b      	ldr	r3, [r7, #4]
 800b9a6:	681b      	ldr	r3, [r3, #0]
 800b9a8:	430a      	orrs	r2, r1
 800b9aa:	609a      	str	r2, [r3, #8]
                                   hspi->Init.FifoThreshold     | hspi->Init.DataSize));

  /* SPIx CFG2 Configuration */
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode     | hspi->Init.TIMode           | hspi->Init.NSSPolarity             |
 800b9ac:	687b      	ldr	r3, [r7, #4]
 800b9ae:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800b9b0:	687b      	ldr	r3, [r7, #4]
 800b9b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b9b4:	431a      	orrs	r2, r3
 800b9b6:	687b      	ldr	r3, [r7, #4]
 800b9b8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b9ba:	431a      	orrs	r2, r3
 800b9bc:	687b      	ldr	r3, [r7, #4]
 800b9be:	699b      	ldr	r3, [r3, #24]
 800b9c0:	431a      	orrs	r2, r3
 800b9c2:	687b      	ldr	r3, [r7, #4]
 800b9c4:	691b      	ldr	r3, [r3, #16]
 800b9c6:	431a      	orrs	r2, r3
 800b9c8:	687b      	ldr	r3, [r7, #4]
 800b9ca:	695b      	ldr	r3, [r3, #20]
 800b9cc:	431a      	orrs	r2, r3
 800b9ce:	687b      	ldr	r3, [r7, #4]
 800b9d0:	6a1b      	ldr	r3, [r3, #32]
 800b9d2:	431a      	orrs	r2, r3
 800b9d4:	687b      	ldr	r3, [r7, #4]
 800b9d6:	685b      	ldr	r3, [r3, #4]
 800b9d8:	431a      	orrs	r2, r3
 800b9da:	687b      	ldr	r3, [r7, #4]
 800b9dc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b9de:	431a      	orrs	r2, r3
 800b9e0:	687b      	ldr	r3, [r7, #4]
 800b9e2:	689b      	ldr	r3, [r3, #8]
 800b9e4:	431a      	orrs	r2, r3
 800b9e6:	687b      	ldr	r3, [r7, #4]
 800b9e8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800b9ea:	ea42 0103 	orr.w	r1, r2, r3
 800b9ee:	687b      	ldr	r3, [r7, #4]
 800b9f0:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800b9f2:	687b      	ldr	r3, [r7, #4]
 800b9f4:	681b      	ldr	r3, [r3, #0]
 800b9f6:	430a      	orrs	r2, r1
 800b9f8:	60da      	str	r2, [r3, #12]
    WRITE_REG(hspi->Instance->CRCPOLY, hspi->Init.CRCPolynomial);
  }
#endif /* USE_SPI_CRC */

  /* Insure that Underrun configuration is managed only by Salve */
  if (hspi->Init.Mode == SPI_MODE_SLAVE)
 800b9fa:	687b      	ldr	r3, [r7, #4]
 800b9fc:	685b      	ldr	r3, [r3, #4]
 800b9fe:	2b00      	cmp	r3, #0
 800ba00:	d113      	bne.n	800ba2a <HAL_SPI_Init+0x1aa>
    /* Set Default Underrun configuration */
#if (USE_SPI_CRC != 0UL)
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_DISABLE)
#endif
    {
      MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRDET, SPI_CFG1_UDRDET_0);
 800ba02:	687b      	ldr	r3, [r7, #4]
 800ba04:	681b      	ldr	r3, [r3, #0]
 800ba06:	689b      	ldr	r3, [r3, #8]
 800ba08:	f423 52c0 	bic.w	r2, r3, #6144	; 0x1800
 800ba0c:	687b      	ldr	r3, [r7, #4]
 800ba0e:	681b      	ldr	r3, [r3, #0]
 800ba10:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800ba14:	609a      	str	r2, [r3, #8]
    }
    MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRCFG, SPI_CFG1_UDRCFG_1);
 800ba16:	687b      	ldr	r3, [r7, #4]
 800ba18:	681b      	ldr	r3, [r3, #0]
 800ba1a:	689b      	ldr	r3, [r3, #8]
 800ba1c:	f423 62c0 	bic.w	r2, r3, #1536	; 0x600
 800ba20:	687b      	ldr	r3, [r7, #4]
 800ba22:	681b      	ldr	r3, [r3, #0]
 800ba24:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800ba28:	609a      	str	r2, [r3, #8]
  }

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800ba2a:	687b      	ldr	r3, [r7, #4]
 800ba2c:	681b      	ldr	r3, [r3, #0]
 800ba2e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800ba30:	687b      	ldr	r3, [r7, #4]
 800ba32:	681b      	ldr	r3, [r3, #0]
 800ba34:	f022 0201 	bic.w	r2, r2, #1
 800ba38:	651a      	str	r2, [r3, #80]	; 0x50
#endif /* SPI_I2SCFGR_I2SMOD */

  /* Insure that AFCNTR is managed only by Master */
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 800ba3a:	687b      	ldr	r3, [r7, #4]
 800ba3c:	685b      	ldr	r3, [r3, #4]
 800ba3e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800ba42:	2b00      	cmp	r3, #0
 800ba44:	d00a      	beq.n	800ba5c <HAL_SPI_Init+0x1dc>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 800ba46:	687b      	ldr	r3, [r7, #4]
 800ba48:	681b      	ldr	r3, [r3, #0]
 800ba4a:	68db      	ldr	r3, [r3, #12]
 800ba4c:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 800ba50:	687b      	ldr	r3, [r7, #4]
 800ba52:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800ba54:	687b      	ldr	r3, [r7, #4]
 800ba56:	681b      	ldr	r3, [r3, #0]
 800ba58:	430a      	orrs	r2, r1
 800ba5a:	60da      	str	r2, [r3, #12]
  }

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800ba5c:	687b      	ldr	r3, [r7, #4]
 800ba5e:	2200      	movs	r2, #0
 800ba60:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->State     = HAL_SPI_STATE_READY;
 800ba64:	687b      	ldr	r3, [r7, #4]
 800ba66:	2201      	movs	r2, #1
 800ba68:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  return HAL_OK;
 800ba6c:	2300      	movs	r3, #0
}
 800ba6e:	4618      	mov	r0, r3
 800ba70:	3710      	adds	r7, #16
 800ba72:	46bd      	mov	sp, r7
 800ba74:	bd80      	pop	{r7, pc}
 800ba76:	bf00      	nop
 800ba78:	40013000 	.word	0x40013000
 800ba7c:	40003800 	.word	0x40003800
 800ba80:	40003c00 	.word	0x40003c00

0800ba84 <HAL_SPI_Transmit>:
  * @param  Size   : amount of data to be sent
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800ba84:	b580      	push	{r7, lr}
 800ba86:	b08a      	sub	sp, #40	; 0x28
 800ba88:	af02      	add	r7, sp, #8
 800ba8a:	60f8      	str	r0, [r7, #12]
 800ba8c:	60b9      	str	r1, [r7, #8]
 800ba8e:	603b      	str	r3, [r7, #0]
 800ba90:	4613      	mov	r3, r2
 800ba92:	80fb      	strh	r3, [r7, #6]
#if defined (__GNUC__)
  __IO uint16_t *ptxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->TXDR));
 800ba94:	68fb      	ldr	r3, [r7, #12]
 800ba96:	681b      	ldr	r3, [r3, #0]
 800ba98:	3320      	adds	r3, #32
 800ba9a:	61fb      	str	r3, [r7, #28]
#endif /* __GNUC__ */

  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800ba9c:	2300      	movs	r3, #0
 800ba9e:	76fb      	strb	r3, [r7, #27]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE_2LINES_TXONLY(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800baa0:	68fb      	ldr	r3, [r7, #12]
 800baa2:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800baa6:	2b01      	cmp	r3, #1
 800baa8:	d101      	bne.n	800baae <HAL_SPI_Transmit+0x2a>
 800baaa:	2302      	movs	r3, #2
 800baac:	e1d7      	b.n	800be5e <HAL_SPI_Transmit+0x3da>
 800baae:	68fb      	ldr	r3, [r7, #12]
 800bab0:	2201      	movs	r2, #1
 800bab2:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800bab6:	f7f6 fc7b 	bl	80023b0 <HAL_GetTick>
 800baba:	6178      	str	r0, [r7, #20]

  if (hspi->State != HAL_SPI_STATE_READY)
 800babc:	68fb      	ldr	r3, [r7, #12]
 800babe:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800bac2:	b2db      	uxtb	r3, r3
 800bac4:	2b01      	cmp	r3, #1
 800bac6:	d007      	beq.n	800bad8 <HAL_SPI_Transmit+0x54>
  {
    errorcode = HAL_BUSY;
 800bac8:	2302      	movs	r3, #2
 800baca:	76fb      	strb	r3, [r7, #27]
    __HAL_UNLOCK(hspi);
 800bacc:	68fb      	ldr	r3, [r7, #12]
 800bace:	2200      	movs	r2, #0
 800bad0:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 800bad4:	7efb      	ldrb	r3, [r7, #27]
 800bad6:	e1c2      	b.n	800be5e <HAL_SPI_Transmit+0x3da>
  }

  if ((pData == NULL) || (Size == 0UL))
 800bad8:	68bb      	ldr	r3, [r7, #8]
 800bada:	2b00      	cmp	r3, #0
 800badc:	d002      	beq.n	800bae4 <HAL_SPI_Transmit+0x60>
 800bade:	88fb      	ldrh	r3, [r7, #6]
 800bae0:	2b00      	cmp	r3, #0
 800bae2:	d107      	bne.n	800baf4 <HAL_SPI_Transmit+0x70>
  {
    errorcode = HAL_ERROR;
 800bae4:	2301      	movs	r3, #1
 800bae6:	76fb      	strb	r3, [r7, #27]
    __HAL_UNLOCK(hspi);
 800bae8:	68fb      	ldr	r3, [r7, #12]
 800baea:	2200      	movs	r2, #0
 800baec:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 800baf0:	7efb      	ldrb	r3, [r7, #27]
 800baf2:	e1b4      	b.n	800be5e <HAL_SPI_Transmit+0x3da>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800baf4:	68fb      	ldr	r3, [r7, #12]
 800baf6:	2203      	movs	r2, #3
 800baf8:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800bafc:	68fb      	ldr	r3, [r7, #12]
 800bafe:	2200      	movs	r2, #0
 800bb00:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 800bb04:	68fb      	ldr	r3, [r7, #12]
 800bb06:	68ba      	ldr	r2, [r7, #8]
 800bb08:	65da      	str	r2, [r3, #92]	; 0x5c
  hspi->TxXferSize  = Size;
 800bb0a:	68fb      	ldr	r3, [r7, #12]
 800bb0c:	88fa      	ldrh	r2, [r7, #6]
 800bb0e:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
  hspi->TxXferCount = Size;
 800bb12:	68fb      	ldr	r3, [r7, #12]
 800bb14:	88fa      	ldrh	r2, [r7, #6]
 800bb16:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = NULL;
 800bb1a:	68fb      	ldr	r3, [r7, #12]
 800bb1c:	2200      	movs	r2, #0
 800bb1e:	665a      	str	r2, [r3, #100]	; 0x64
  hspi->RxXferSize  = (uint16_t) 0UL;
 800bb20:	68fb      	ldr	r3, [r7, #12]
 800bb22:	2200      	movs	r2, #0
 800bb24:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  hspi->RxXferCount = (uint16_t) 0UL;
 800bb28:	68fb      	ldr	r3, [r7, #12]
 800bb2a:	2200      	movs	r2, #0
 800bb2c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  hspi->TxISR       = NULL;
 800bb30:	68fb      	ldr	r3, [r7, #12]
 800bb32:	2200      	movs	r2, #0
 800bb34:	675a      	str	r2, [r3, #116]	; 0x74
  hspi->RxISR       = NULL;
 800bb36:	68fb      	ldr	r3, [r7, #12]
 800bb38:	2200      	movs	r2, #0
 800bb3a:	671a      	str	r2, [r3, #112]	; 0x70

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800bb3c:	68fb      	ldr	r3, [r7, #12]
 800bb3e:	689b      	ldr	r3, [r3, #8]
 800bb40:	f5b3 2fc0 	cmp.w	r3, #393216	; 0x60000
 800bb44:	d107      	bne.n	800bb56 <HAL_SPI_Transmit+0xd2>
  {
    SPI_1LINE_TX(hspi);
 800bb46:	68fb      	ldr	r3, [r7, #12]
 800bb48:	681b      	ldr	r3, [r3, #0]
 800bb4a:	681a      	ldr	r2, [r3, #0]
 800bb4c:	68fb      	ldr	r3, [r7, #12]
 800bb4e:	681b      	ldr	r3, [r3, #0]
 800bb50:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800bb54:	601a      	str	r2, [r3, #0]
  }

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 800bb56:	68fb      	ldr	r3, [r7, #12]
 800bb58:	681b      	ldr	r3, [r3, #0]
 800bb5a:	685a      	ldr	r2, [r3, #4]
 800bb5c:	4b96      	ldr	r3, [pc, #600]	; (800bdb8 <HAL_SPI_Transmit+0x334>)
 800bb5e:	4013      	ands	r3, r2
 800bb60:	88f9      	ldrh	r1, [r7, #6]
 800bb62:	68fa      	ldr	r2, [r7, #12]
 800bb64:	6812      	ldr	r2, [r2, #0]
 800bb66:	430b      	orrs	r3, r1
 800bb68:	6053      	str	r3, [r2, #4]

  /* Enable SPI peripheral */
  __HAL_SPI_ENABLE(hspi);
 800bb6a:	68fb      	ldr	r3, [r7, #12]
 800bb6c:	681b      	ldr	r3, [r3, #0]
 800bb6e:	681a      	ldr	r2, [r3, #0]
 800bb70:	68fb      	ldr	r3, [r7, #12]
 800bb72:	681b      	ldr	r3, [r3, #0]
 800bb74:	f042 0201 	orr.w	r2, r2, #1
 800bb78:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800bb7a:	68fb      	ldr	r3, [r7, #12]
 800bb7c:	685b      	ldr	r3, [r3, #4]
 800bb7e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800bb82:	d107      	bne.n	800bb94 <HAL_SPI_Transmit+0x110>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 800bb84:	68fb      	ldr	r3, [r7, #12]
 800bb86:	681b      	ldr	r3, [r3, #0]
 800bb88:	681a      	ldr	r2, [r3, #0]
 800bb8a:	68fb      	ldr	r3, [r7, #12]
 800bb8c:	681b      	ldr	r3, [r3, #0]
 800bb8e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800bb92:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 32 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 800bb94:	68fb      	ldr	r3, [r7, #12]
 800bb96:	68db      	ldr	r3, [r3, #12]
 800bb98:	2b0f      	cmp	r3, #15
 800bb9a:	d947      	bls.n	800bc2c <HAL_SPI_Transmit+0x1a8>
  {
    /* Transmit data in 32 Bit mode */
    while (hspi->TxXferCount > 0UL)
 800bb9c:	e03f      	b.n	800bc1e <HAL_SPI_Transmit+0x19a>
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 800bb9e:	68fb      	ldr	r3, [r7, #12]
 800bba0:	681b      	ldr	r3, [r3, #0]
 800bba2:	695b      	ldr	r3, [r3, #20]
 800bba4:	f003 0302 	and.w	r3, r3, #2
 800bba8:	2b02      	cmp	r3, #2
 800bbaa:	d114      	bne.n	800bbd6 <HAL_SPI_Transmit+0x152>
      {
        *((__IO uint32_t *)&hspi->Instance->TXDR) = *((uint32_t *)hspi->pTxBuffPtr);
 800bbac:	68fb      	ldr	r3, [r7, #12]
 800bbae:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800bbb0:	68fb      	ldr	r3, [r7, #12]
 800bbb2:	681b      	ldr	r3, [r3, #0]
 800bbb4:	6812      	ldr	r2, [r2, #0]
 800bbb6:	621a      	str	r2, [r3, #32]
        hspi->pTxBuffPtr += sizeof(uint32_t);
 800bbb8:	68fb      	ldr	r3, [r7, #12]
 800bbba:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800bbbc:	1d1a      	adds	r2, r3, #4
 800bbbe:	68fb      	ldr	r3, [r7, #12]
 800bbc0:	65da      	str	r2, [r3, #92]	; 0x5c
        hspi->TxXferCount--;
 800bbc2:	68fb      	ldr	r3, [r7, #12]
 800bbc4:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800bbc8:	b29b      	uxth	r3, r3
 800bbca:	3b01      	subs	r3, #1
 800bbcc:	b29a      	uxth	r2, r3
 800bbce:	68fb      	ldr	r3, [r7, #12]
 800bbd0:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 800bbd4:	e023      	b.n	800bc1e <HAL_SPI_Transmit+0x19a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800bbd6:	f7f6 fbeb 	bl	80023b0 <HAL_GetTick>
 800bbda:	4602      	mov	r2, r0
 800bbdc:	697b      	ldr	r3, [r7, #20]
 800bbde:	1ad3      	subs	r3, r2, r3
 800bbe0:	683a      	ldr	r2, [r7, #0]
 800bbe2:	429a      	cmp	r2, r3
 800bbe4:	d803      	bhi.n	800bbee <HAL_SPI_Transmit+0x16a>
 800bbe6:	683b      	ldr	r3, [r7, #0]
 800bbe8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bbec:	d102      	bne.n	800bbf4 <HAL_SPI_Transmit+0x170>
 800bbee:	683b      	ldr	r3, [r7, #0]
 800bbf0:	2b00      	cmp	r3, #0
 800bbf2:	d114      	bne.n	800bc1e <HAL_SPI_Transmit+0x19a>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800bbf4:	68f8      	ldr	r0, [r7, #12]
 800bbf6:	f000 fc23 	bl	800c440 <SPI_CloseTransfer>

          /* Process Unlocked */
          __HAL_UNLOCK(hspi);
 800bbfa:	68fb      	ldr	r3, [r7, #12]
 800bbfc:	2200      	movs	r2, #0
 800bbfe:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800bc02:	68fb      	ldr	r3, [r7, #12]
 800bc04:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800bc08:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800bc0c:	68fb      	ldr	r3, [r7, #12]
 800bc0e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 800bc12:	68fb      	ldr	r3, [r7, #12]
 800bc14:	2201      	movs	r2, #1
 800bc16:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_ERROR;
 800bc1a:	2301      	movs	r3, #1
 800bc1c:	e11f      	b.n	800be5e <HAL_SPI_Transmit+0x3da>
    while (hspi->TxXferCount > 0UL)
 800bc1e:	68fb      	ldr	r3, [r7, #12]
 800bc20:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800bc24:	b29b      	uxth	r3, r3
 800bc26:	2b00      	cmp	r3, #0
 800bc28:	d1b9      	bne.n	800bb9e <HAL_SPI_Transmit+0x11a>
 800bc2a:	e0f2      	b.n	800be12 <HAL_SPI_Transmit+0x38e>
        }
      }
    }
  }
  /* Transmit data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800bc2c:	68fb      	ldr	r3, [r7, #12]
 800bc2e:	68db      	ldr	r3, [r3, #12]
 800bc30:	2b07      	cmp	r3, #7
 800bc32:	f240 80e7 	bls.w	800be04 <HAL_SPI_Transmit+0x380>
  {
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0UL)
 800bc36:	e05d      	b.n	800bcf4 <HAL_SPI_Transmit+0x270>
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 800bc38:	68fb      	ldr	r3, [r7, #12]
 800bc3a:	681b      	ldr	r3, [r3, #0]
 800bc3c:	695b      	ldr	r3, [r3, #20]
 800bc3e:	f003 0302 	and.w	r3, r3, #2
 800bc42:	2b02      	cmp	r3, #2
 800bc44:	d132      	bne.n	800bcac <HAL_SPI_Transmit+0x228>
      {
        if ((hspi->TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 800bc46:	68fb      	ldr	r3, [r7, #12]
 800bc48:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800bc4c:	b29b      	uxth	r3, r3
 800bc4e:	2b01      	cmp	r3, #1
 800bc50:	d918      	bls.n	800bc84 <HAL_SPI_Transmit+0x200>
 800bc52:	68fb      	ldr	r3, [r7, #12]
 800bc54:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800bc56:	2b00      	cmp	r3, #0
 800bc58:	d014      	beq.n	800bc84 <HAL_SPI_Transmit+0x200>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((uint32_t *)hspi->pTxBuffPtr);
 800bc5a:	68fb      	ldr	r3, [r7, #12]
 800bc5c:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800bc5e:	68fb      	ldr	r3, [r7, #12]
 800bc60:	681b      	ldr	r3, [r3, #0]
 800bc62:	6812      	ldr	r2, [r2, #0]
 800bc64:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 800bc66:	68fb      	ldr	r3, [r7, #12]
 800bc68:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800bc6a:	1d1a      	adds	r2, r3, #4
 800bc6c:	68fb      	ldr	r3, [r7, #12]
 800bc6e:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount -= (uint16_t)2UL;
 800bc70:	68fb      	ldr	r3, [r7, #12]
 800bc72:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800bc76:	b29b      	uxth	r3, r3
 800bc78:	3b02      	subs	r3, #2
 800bc7a:	b29a      	uxth	r2, r3
 800bc7c:	68fb      	ldr	r3, [r7, #12]
 800bc7e:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 800bc82:	e037      	b.n	800bcf4 <HAL_SPI_Transmit+0x270>
        }
        else
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((uint16_t *)hspi->pTxBuffPtr);
 800bc84:	68fb      	ldr	r3, [r7, #12]
 800bc86:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800bc88:	881a      	ldrh	r2, [r3, #0]
 800bc8a:	69fb      	ldr	r3, [r7, #28]
 800bc8c:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800bc8e:	68fb      	ldr	r3, [r7, #12]
 800bc90:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800bc92:	1c9a      	adds	r2, r3, #2
 800bc94:	68fb      	ldr	r3, [r7, #12]
 800bc96:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount--;
 800bc98:	68fb      	ldr	r3, [r7, #12]
 800bc9a:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800bc9e:	b29b      	uxth	r3, r3
 800bca0:	3b01      	subs	r3, #1
 800bca2:	b29a      	uxth	r2, r3
 800bca4:	68fb      	ldr	r3, [r7, #12]
 800bca6:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 800bcaa:	e023      	b.n	800bcf4 <HAL_SPI_Transmit+0x270>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800bcac:	f7f6 fb80 	bl	80023b0 <HAL_GetTick>
 800bcb0:	4602      	mov	r2, r0
 800bcb2:	697b      	ldr	r3, [r7, #20]
 800bcb4:	1ad3      	subs	r3, r2, r3
 800bcb6:	683a      	ldr	r2, [r7, #0]
 800bcb8:	429a      	cmp	r2, r3
 800bcba:	d803      	bhi.n	800bcc4 <HAL_SPI_Transmit+0x240>
 800bcbc:	683b      	ldr	r3, [r7, #0]
 800bcbe:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bcc2:	d102      	bne.n	800bcca <HAL_SPI_Transmit+0x246>
 800bcc4:	683b      	ldr	r3, [r7, #0]
 800bcc6:	2b00      	cmp	r3, #0
 800bcc8:	d114      	bne.n	800bcf4 <HAL_SPI_Transmit+0x270>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800bcca:	68f8      	ldr	r0, [r7, #12]
 800bccc:	f000 fbb8 	bl	800c440 <SPI_CloseTransfer>

          /* Process Unlocked */
          __HAL_UNLOCK(hspi);
 800bcd0:	68fb      	ldr	r3, [r7, #12]
 800bcd2:	2200      	movs	r2, #0
 800bcd4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800bcd8:	68fb      	ldr	r3, [r7, #12]
 800bcda:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800bcde:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800bce2:	68fb      	ldr	r3, [r7, #12]
 800bce4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 800bce8:	68fb      	ldr	r3, [r7, #12]
 800bcea:	2201      	movs	r2, #1
 800bcec:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_ERROR;
 800bcf0:	2301      	movs	r3, #1
 800bcf2:	e0b4      	b.n	800be5e <HAL_SPI_Transmit+0x3da>
    while (hspi->TxXferCount > 0UL)
 800bcf4:	68fb      	ldr	r3, [r7, #12]
 800bcf6:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800bcfa:	b29b      	uxth	r3, r3
 800bcfc:	2b00      	cmp	r3, #0
 800bcfe:	d19b      	bne.n	800bc38 <HAL_SPI_Transmit+0x1b4>
 800bd00:	e087      	b.n	800be12 <HAL_SPI_Transmit+0x38e>
  else
  {
    while (hspi->TxXferCount > 0UL)
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 800bd02:	68fb      	ldr	r3, [r7, #12]
 800bd04:	681b      	ldr	r3, [r3, #0]
 800bd06:	695b      	ldr	r3, [r3, #20]
 800bd08:	f003 0302 	and.w	r3, r3, #2
 800bd0c:	2b02      	cmp	r3, #2
 800bd0e:	d155      	bne.n	800bdbc <HAL_SPI_Transmit+0x338>
      {
        if ((hspi->TxXferCount > 3UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_03DATA))
 800bd10:	68fb      	ldr	r3, [r7, #12]
 800bd12:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800bd16:	b29b      	uxth	r3, r3
 800bd18:	2b03      	cmp	r3, #3
 800bd1a:	d918      	bls.n	800bd4e <HAL_SPI_Transmit+0x2ca>
 800bd1c:	68fb      	ldr	r3, [r7, #12]
 800bd1e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800bd20:	2b40      	cmp	r3, #64	; 0x40
 800bd22:	d914      	bls.n	800bd4e <HAL_SPI_Transmit+0x2ca>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((uint32_t *)hspi->pTxBuffPtr);
 800bd24:	68fb      	ldr	r3, [r7, #12]
 800bd26:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800bd28:	68fb      	ldr	r3, [r7, #12]
 800bd2a:	681b      	ldr	r3, [r3, #0]
 800bd2c:	6812      	ldr	r2, [r2, #0]
 800bd2e:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 800bd30:	68fb      	ldr	r3, [r7, #12]
 800bd32:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800bd34:	1d1a      	adds	r2, r3, #4
 800bd36:	68fb      	ldr	r3, [r7, #12]
 800bd38:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount -= (uint16_t)4UL;
 800bd3a:	68fb      	ldr	r3, [r7, #12]
 800bd3c:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800bd40:	b29b      	uxth	r3, r3
 800bd42:	3b04      	subs	r3, #4
 800bd44:	b29a      	uxth	r2, r3
 800bd46:	68fb      	ldr	r3, [r7, #12]
 800bd48:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 800bd4c:	e05a      	b.n	800be04 <HAL_SPI_Transmit+0x380>
        }
        else if ((hspi->TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 800bd4e:	68fb      	ldr	r3, [r7, #12]
 800bd50:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800bd54:	b29b      	uxth	r3, r3
 800bd56:	2b01      	cmp	r3, #1
 800bd58:	d917      	bls.n	800bd8a <HAL_SPI_Transmit+0x306>
 800bd5a:	68fb      	ldr	r3, [r7, #12]
 800bd5c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800bd5e:	2b00      	cmp	r3, #0
 800bd60:	d013      	beq.n	800bd8a <HAL_SPI_Transmit+0x306>
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((uint16_t *)hspi->pTxBuffPtr);
 800bd62:	68fb      	ldr	r3, [r7, #12]
 800bd64:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800bd66:	881a      	ldrh	r2, [r3, #0]
 800bd68:	69fb      	ldr	r3, [r7, #28]
 800bd6a:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800bd6c:	68fb      	ldr	r3, [r7, #12]
 800bd6e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800bd70:	1c9a      	adds	r2, r3, #2
 800bd72:	68fb      	ldr	r3, [r7, #12]
 800bd74:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount -= (uint16_t)2UL;
 800bd76:	68fb      	ldr	r3, [r7, #12]
 800bd78:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800bd7c:	b29b      	uxth	r3, r3
 800bd7e:	3b02      	subs	r3, #2
 800bd80:	b29a      	uxth	r2, r3
 800bd82:	68fb      	ldr	r3, [r7, #12]
 800bd84:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 800bd88:	e03c      	b.n	800be04 <HAL_SPI_Transmit+0x380>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->TXDR) = *((uint8_t *)hspi->pTxBuffPtr);
 800bd8a:	68fb      	ldr	r3, [r7, #12]
 800bd8c:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800bd8e:	68fb      	ldr	r3, [r7, #12]
 800bd90:	681b      	ldr	r3, [r3, #0]
 800bd92:	3320      	adds	r3, #32
 800bd94:	7812      	ldrb	r2, [r2, #0]
 800bd96:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr += sizeof(uint8_t);
 800bd98:	68fb      	ldr	r3, [r7, #12]
 800bd9a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800bd9c:	1c5a      	adds	r2, r3, #1
 800bd9e:	68fb      	ldr	r3, [r7, #12]
 800bda0:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount--;
 800bda2:	68fb      	ldr	r3, [r7, #12]
 800bda4:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800bda8:	b29b      	uxth	r3, r3
 800bdaa:	3b01      	subs	r3, #1
 800bdac:	b29a      	uxth	r2, r3
 800bdae:	68fb      	ldr	r3, [r7, #12]
 800bdb0:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 800bdb4:	e026      	b.n	800be04 <HAL_SPI_Transmit+0x380>
 800bdb6:	bf00      	nop
 800bdb8:	ffff0000 	.word	0xffff0000
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800bdbc:	f7f6 faf8 	bl	80023b0 <HAL_GetTick>
 800bdc0:	4602      	mov	r2, r0
 800bdc2:	697b      	ldr	r3, [r7, #20]
 800bdc4:	1ad3      	subs	r3, r2, r3
 800bdc6:	683a      	ldr	r2, [r7, #0]
 800bdc8:	429a      	cmp	r2, r3
 800bdca:	d803      	bhi.n	800bdd4 <HAL_SPI_Transmit+0x350>
 800bdcc:	683b      	ldr	r3, [r7, #0]
 800bdce:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bdd2:	d102      	bne.n	800bdda <HAL_SPI_Transmit+0x356>
 800bdd4:	683b      	ldr	r3, [r7, #0]
 800bdd6:	2b00      	cmp	r3, #0
 800bdd8:	d114      	bne.n	800be04 <HAL_SPI_Transmit+0x380>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800bdda:	68f8      	ldr	r0, [r7, #12]
 800bddc:	f000 fb30 	bl	800c440 <SPI_CloseTransfer>

          /* Process Unlocked */
          __HAL_UNLOCK(hspi);
 800bde0:	68fb      	ldr	r3, [r7, #12]
 800bde2:	2200      	movs	r2, #0
 800bde4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800bde8:	68fb      	ldr	r3, [r7, #12]
 800bdea:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800bdee:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800bdf2:	68fb      	ldr	r3, [r7, #12]
 800bdf4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 800bdf8:	68fb      	ldr	r3, [r7, #12]
 800bdfa:	2201      	movs	r2, #1
 800bdfc:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_ERROR;
 800be00:	2301      	movs	r3, #1
 800be02:	e02c      	b.n	800be5e <HAL_SPI_Transmit+0x3da>
    while (hspi->TxXferCount > 0UL)
 800be04:	68fb      	ldr	r3, [r7, #12]
 800be06:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800be0a:	b29b      	uxth	r3, r3
 800be0c:	2b00      	cmp	r3, #0
 800be0e:	f47f af78 	bne.w	800bd02 <HAL_SPI_Transmit+0x27e>
      }
    }
  }

  /* Wait for Tx (and CRC) data to be sent */
  if (SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_EOT, RESET, tickstart, Timeout) != HAL_OK)
 800be12:	683b      	ldr	r3, [r7, #0]
 800be14:	9300      	str	r3, [sp, #0]
 800be16:	697b      	ldr	r3, [r7, #20]
 800be18:	2200      	movs	r2, #0
 800be1a:	2108      	movs	r1, #8
 800be1c:	68f8      	ldr	r0, [r7, #12]
 800be1e:	f000 fbaf 	bl	800c580 <SPI_WaitOnFlagUntilTimeout>
 800be22:	4603      	mov	r3, r0
 800be24:	2b00      	cmp	r3, #0
 800be26:	d007      	beq.n	800be38 <HAL_SPI_Transmit+0x3b4>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800be28:	68fb      	ldr	r3, [r7, #12]
 800be2a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800be2e:	f043 0220 	orr.w	r2, r3, #32
 800be32:	68fb      	ldr	r3, [r7, #12]
 800be34:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  }

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 800be38:	68f8      	ldr	r0, [r7, #12]
 800be3a:	f000 fb01 	bl	800c440 <SPI_CloseTransfer>

  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800be3e:	68fb      	ldr	r3, [r7, #12]
 800be40:	2200      	movs	r2, #0
 800be42:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  hspi->State = HAL_SPI_STATE_READY;
 800be46:	68fb      	ldr	r3, [r7, #12]
 800be48:	2201      	movs	r2, #1
 800be4a:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800be4e:	68fb      	ldr	r3, [r7, #12]
 800be50:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800be54:	2b00      	cmp	r3, #0
 800be56:	d001      	beq.n	800be5c <HAL_SPI_Transmit+0x3d8>
  {
    return HAL_ERROR;
 800be58:	2301      	movs	r3, #1
 800be5a:	e000      	b.n	800be5e <HAL_SPI_Transmit+0x3da>
  }
  return errorcode;
 800be5c:	7efb      	ldrb	r3, [r7, #27]
}
 800be5e:	4618      	mov	r0, r3
 800be60:	3720      	adds	r7, #32
 800be62:	46bd      	mov	sp, r7
 800be64:	bd80      	pop	{r7, pc}
 800be66:	bf00      	nop

0800be68 <HAL_SPI_TransmitReceive>:
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 800be68:	b580      	push	{r7, lr}
 800be6a:	b08e      	sub	sp, #56	; 0x38
 800be6c:	af02      	add	r7, sp, #8
 800be6e:	60f8      	str	r0, [r7, #12]
 800be70:	60b9      	str	r1, [r7, #8]
 800be72:	607a      	str	r2, [r7, #4]
 800be74:	807b      	strh	r3, [r7, #2]
  HAL_SPI_StateTypeDef tmp_state;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800be76:	2300      	movs	r3, #0
 800be78:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
#if defined (__GNUC__)
  __IO uint16_t *ptxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->TXDR));
 800be7c:	68fb      	ldr	r3, [r7, #12]
 800be7e:	681b      	ldr	r3, [r3, #0]
 800be80:	3320      	adds	r3, #32
 800be82:	627b      	str	r3, [r7, #36]	; 0x24
  __IO uint16_t *prxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->RXDR));
 800be84:	68fb      	ldr	r3, [r7, #12]
 800be86:	681b      	ldr	r3, [r3, #0]
 800be88:	3330      	adds	r3, #48	; 0x30
 800be8a:	623b      	str	r3, [r7, #32]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800be8c:	68fb      	ldr	r3, [r7, #12]
 800be8e:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800be92:	2b01      	cmp	r3, #1
 800be94:	d101      	bne.n	800be9a <HAL_SPI_TransmitReceive+0x32>
 800be96:	2302      	movs	r3, #2
 800be98:	e2ce      	b.n	800c438 <HAL_SPI_TransmitReceive+0x5d0>
 800be9a:	68fb      	ldr	r3, [r7, #12]
 800be9c:	2201      	movs	r2, #1
 800be9e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800bea2:	f7f6 fa85 	bl	80023b0 <HAL_GetTick>
 800bea6:	61f8      	str	r0, [r7, #28]

  initial_TxXferCount = Size;
 800bea8:	887b      	ldrh	r3, [r7, #2]
 800beaa:	85fb      	strh	r3, [r7, #46]	; 0x2e
  initial_RxXferCount = Size;
 800beac:	887b      	ldrh	r3, [r7, #2]
 800beae:	85bb      	strh	r3, [r7, #44]	; 0x2c
  tmp_state           = hspi->State;
 800beb0:	68fb      	ldr	r3, [r7, #12]
 800beb2:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800beb6:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 800beb8:	68fb      	ldr	r3, [r7, #12]
 800beba:	685b      	ldr	r3, [r3, #4]
 800bebc:	617b      	str	r3, [r7, #20]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 800bebe:	7efb      	ldrb	r3, [r7, #27]
 800bec0:	2b01      	cmp	r3, #1
 800bec2:	d014      	beq.n	800beee <HAL_SPI_TransmitReceive+0x86>
 800bec4:	697b      	ldr	r3, [r7, #20]
 800bec6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800beca:	d106      	bne.n	800beda <HAL_SPI_TransmitReceive+0x72>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 800becc:	68fb      	ldr	r3, [r7, #12]
 800bece:	689b      	ldr	r3, [r3, #8]
 800bed0:	2b00      	cmp	r3, #0
 800bed2:	d102      	bne.n	800beda <HAL_SPI_TransmitReceive+0x72>
 800bed4:	7efb      	ldrb	r3, [r7, #27]
 800bed6:	2b04      	cmp	r3, #4
 800bed8:	d009      	beq.n	800beee <HAL_SPI_TransmitReceive+0x86>
  {
    errorcode = HAL_BUSY;
 800beda:	2302      	movs	r3, #2
 800bedc:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    __HAL_UNLOCK(hspi);
 800bee0:	68fb      	ldr	r3, [r7, #12]
 800bee2:	2200      	movs	r2, #0
 800bee4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 800bee8:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800beec:	e2a4      	b.n	800c438 <HAL_SPI_TransmitReceive+0x5d0>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0UL))
 800beee:	68bb      	ldr	r3, [r7, #8]
 800bef0:	2b00      	cmp	r3, #0
 800bef2:	d005      	beq.n	800bf00 <HAL_SPI_TransmitReceive+0x98>
 800bef4:	687b      	ldr	r3, [r7, #4]
 800bef6:	2b00      	cmp	r3, #0
 800bef8:	d002      	beq.n	800bf00 <HAL_SPI_TransmitReceive+0x98>
 800befa:	887b      	ldrh	r3, [r7, #2]
 800befc:	2b00      	cmp	r3, #0
 800befe:	d109      	bne.n	800bf14 <HAL_SPI_TransmitReceive+0xac>
  {
    errorcode = HAL_ERROR;
 800bf00:	2301      	movs	r3, #1
 800bf02:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    __HAL_UNLOCK(hspi);
 800bf06:	68fb      	ldr	r3, [r7, #12]
 800bf08:	2200      	movs	r2, #0
 800bf0a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 800bf0e:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800bf12:	e291      	b.n	800c438 <HAL_SPI_TransmitReceive+0x5d0>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800bf14:	68fb      	ldr	r3, [r7, #12]
 800bf16:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800bf1a:	b2db      	uxtb	r3, r3
 800bf1c:	2b04      	cmp	r3, #4
 800bf1e:	d003      	beq.n	800bf28 <HAL_SPI_TransmitReceive+0xc0>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800bf20:	68fb      	ldr	r3, [r7, #12]
 800bf22:	2205      	movs	r2, #5
 800bf24:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800bf28:	68fb      	ldr	r3, [r7, #12]
 800bf2a:	2200      	movs	r2, #0
 800bf2c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800bf30:	68fb      	ldr	r3, [r7, #12]
 800bf32:	687a      	ldr	r2, [r7, #4]
 800bf34:	665a      	str	r2, [r3, #100]	; 0x64
  hspi->RxXferCount = Size;
 800bf36:	68fb      	ldr	r3, [r7, #12]
 800bf38:	887a      	ldrh	r2, [r7, #2]
 800bf3a:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  hspi->RxXferSize  = Size;
 800bf3e:	68fb      	ldr	r3, [r7, #12]
 800bf40:	887a      	ldrh	r2, [r7, #2]
 800bf42:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800bf46:	68fb      	ldr	r3, [r7, #12]
 800bf48:	68ba      	ldr	r2, [r7, #8]
 800bf4a:	65da      	str	r2, [r3, #92]	; 0x5c
  hspi->TxXferCount = Size;
 800bf4c:	68fb      	ldr	r3, [r7, #12]
 800bf4e:	887a      	ldrh	r2, [r7, #2]
 800bf50:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
  hspi->TxXferSize  = Size;
 800bf54:	68fb      	ldr	r3, [r7, #12]
 800bf56:	887a      	ldrh	r2, [r7, #2]
 800bf58:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800bf5c:	68fb      	ldr	r3, [r7, #12]
 800bf5e:	2200      	movs	r2, #0
 800bf60:	671a      	str	r2, [r3, #112]	; 0x70
  hspi->TxISR       = NULL;
 800bf62:	68fb      	ldr	r3, [r7, #12]
 800bf64:	2200      	movs	r2, #0
 800bf66:	675a      	str	r2, [r3, #116]	; 0x74

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 800bf68:	68fb      	ldr	r3, [r7, #12]
 800bf6a:	681b      	ldr	r3, [r3, #0]
 800bf6c:	685a      	ldr	r2, [r3, #4]
 800bf6e:	4b81      	ldr	r3, [pc, #516]	; (800c174 <HAL_SPI_TransmitReceive+0x30c>)
 800bf70:	4013      	ands	r3, r2
 800bf72:	8879      	ldrh	r1, [r7, #2]
 800bf74:	68fa      	ldr	r2, [r7, #12]
 800bf76:	6812      	ldr	r2, [r2, #0]
 800bf78:	430b      	orrs	r3, r1
 800bf7a:	6053      	str	r3, [r2, #4]

  __HAL_SPI_ENABLE(hspi);
 800bf7c:	68fb      	ldr	r3, [r7, #12]
 800bf7e:	681b      	ldr	r3, [r3, #0]
 800bf80:	681a      	ldr	r2, [r3, #0]
 800bf82:	68fb      	ldr	r3, [r7, #12]
 800bf84:	681b      	ldr	r3, [r3, #0]
 800bf86:	f042 0201 	orr.w	r2, r2, #1
 800bf8a:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800bf8c:	68fb      	ldr	r3, [r7, #12]
 800bf8e:	685b      	ldr	r3, [r3, #4]
 800bf90:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800bf94:	d107      	bne.n	800bfa6 <HAL_SPI_TransmitReceive+0x13e>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 800bf96:	68fb      	ldr	r3, [r7, #12]
 800bf98:	681b      	ldr	r3, [r3, #0]
 800bf9a:	681a      	ldr	r2, [r3, #0]
 800bf9c:	68fb      	ldr	r3, [r7, #12]
 800bf9e:	681b      	ldr	r3, [r3, #0]
 800bfa0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800bfa4:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 32 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 800bfa6:	68fb      	ldr	r3, [r7, #12]
 800bfa8:	68db      	ldr	r3, [r3, #12]
 800bfaa:	2b0f      	cmp	r3, #15
 800bfac:	d970      	bls.n	800c090 <HAL_SPI_TransmitReceive+0x228>
  {
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 800bfae:	e068      	b.n	800c082 <HAL_SPI_TransmitReceive+0x21a>
    {
      /* Check TXP flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (initial_TxXferCount > 0UL))
 800bfb0:	68fb      	ldr	r3, [r7, #12]
 800bfb2:	681b      	ldr	r3, [r3, #0]
 800bfb4:	695b      	ldr	r3, [r3, #20]
 800bfb6:	f003 0302 	and.w	r3, r3, #2
 800bfba:	2b02      	cmp	r3, #2
 800bfbc:	d11a      	bne.n	800bff4 <HAL_SPI_TransmitReceive+0x18c>
 800bfbe:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800bfc0:	2b00      	cmp	r3, #0
 800bfc2:	d017      	beq.n	800bff4 <HAL_SPI_TransmitReceive+0x18c>
      {
        *((__IO uint32_t *)&hspi->Instance->TXDR) = *((uint32_t *)hspi->pTxBuffPtr);
 800bfc4:	68fb      	ldr	r3, [r7, #12]
 800bfc6:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800bfc8:	68fb      	ldr	r3, [r7, #12]
 800bfca:	681b      	ldr	r3, [r3, #0]
 800bfcc:	6812      	ldr	r2, [r2, #0]
 800bfce:	621a      	str	r2, [r3, #32]
        hspi->pTxBuffPtr += sizeof(uint32_t);
 800bfd0:	68fb      	ldr	r3, [r7, #12]
 800bfd2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800bfd4:	1d1a      	adds	r2, r3, #4
 800bfd6:	68fb      	ldr	r3, [r7, #12]
 800bfd8:	65da      	str	r2, [r3, #92]	; 0x5c
        hspi->TxXferCount --;
 800bfda:	68fb      	ldr	r3, [r7, #12]
 800bfdc:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800bfe0:	b29b      	uxth	r3, r3
 800bfe2:	3b01      	subs	r3, #1
 800bfe4:	b29a      	uxth	r2, r3
 800bfe6:	68fb      	ldr	r3, [r7, #12]
 800bfe8:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
        initial_TxXferCount = hspi->TxXferCount;
 800bfec:	68fb      	ldr	r3, [r7, #12]
 800bfee:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800bff2:	85fb      	strh	r3, [r7, #46]	; 0x2e
      }

      /* Check RXWNE/EOT flag */
      if (((hspi->Instance->SR & (SPI_FLAG_RXWNE | SPI_FLAG_EOT)) != 0UL) && (initial_RxXferCount > 0UL))
 800bff4:	68fb      	ldr	r3, [r7, #12]
 800bff6:	681b      	ldr	r3, [r3, #0]
 800bff8:	695a      	ldr	r2, [r3, #20]
 800bffa:	f248 0308 	movw	r3, #32776	; 0x8008
 800bffe:	4013      	ands	r3, r2
 800c000:	2b00      	cmp	r3, #0
 800c002:	d01a      	beq.n	800c03a <HAL_SPI_TransmitReceive+0x1d2>
 800c004:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800c006:	2b00      	cmp	r3, #0
 800c008:	d017      	beq.n	800c03a <HAL_SPI_TransmitReceive+0x1d2>
      {
        *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 800c00a:	68fb      	ldr	r3, [r7, #12]
 800c00c:	681a      	ldr	r2, [r3, #0]
 800c00e:	68fb      	ldr	r3, [r7, #12]
 800c010:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800c012:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800c014:	601a      	str	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint32_t);
 800c016:	68fb      	ldr	r3, [r7, #12]
 800c018:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800c01a:	1d1a      	adds	r2, r3, #4
 800c01c:	68fb      	ldr	r3, [r7, #12]
 800c01e:	665a      	str	r2, [r3, #100]	; 0x64
        hspi->RxXferCount --;
 800c020:	68fb      	ldr	r3, [r7, #12]
 800c022:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800c026:	b29b      	uxth	r3, r3
 800c028:	3b01      	subs	r3, #1
 800c02a:	b29a      	uxth	r2, r3
 800c02c:	68fb      	ldr	r3, [r7, #12]
 800c02e:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
        initial_RxXferCount = hspi->RxXferCount;
 800c032:	68fb      	ldr	r3, [r7, #12]
 800c034:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800c038:	85bb      	strh	r3, [r7, #44]	; 0x2c
      }

      /* Timeout management */
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800c03a:	f7f6 f9b9 	bl	80023b0 <HAL_GetTick>
 800c03e:	4602      	mov	r2, r0
 800c040:	69fb      	ldr	r3, [r7, #28]
 800c042:	1ad3      	subs	r3, r2, r3
 800c044:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800c046:	429a      	cmp	r2, r3
 800c048:	d803      	bhi.n	800c052 <HAL_SPI_TransmitReceive+0x1ea>
 800c04a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c04c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c050:	d102      	bne.n	800c058 <HAL_SPI_TransmitReceive+0x1f0>
 800c052:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c054:	2b00      	cmp	r3, #0
 800c056:	d114      	bne.n	800c082 <HAL_SPI_TransmitReceive+0x21a>
      {
        /* Call standard close procedure with error check */
        SPI_CloseTransfer(hspi);
 800c058:	68f8      	ldr	r0, [r7, #12]
 800c05a:	f000 f9f1 	bl	800c440 <SPI_CloseTransfer>

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800c05e:	68fb      	ldr	r3, [r7, #12]
 800c060:	2200      	movs	r2, #0
 800c062:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800c066:	68fb      	ldr	r3, [r7, #12]
 800c068:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800c06c:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800c070:	68fb      	ldr	r3, [r7, #12]
 800c072:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        hspi->State = HAL_SPI_STATE_READY;
 800c076:	68fb      	ldr	r3, [r7, #12]
 800c078:	2201      	movs	r2, #1
 800c07a:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
        return HAL_ERROR;
 800c07e:	2301      	movs	r3, #1
 800c080:	e1da      	b.n	800c438 <HAL_SPI_TransmitReceive+0x5d0>
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 800c082:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800c084:	2b00      	cmp	r3, #0
 800c086:	d193      	bne.n	800bfb0 <HAL_SPI_TransmitReceive+0x148>
 800c088:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800c08a:	2b00      	cmp	r3, #0
 800c08c:	d190      	bne.n	800bfb0 <HAL_SPI_TransmitReceive+0x148>
 800c08e:	e1ac      	b.n	800c3ea <HAL_SPI_TransmitReceive+0x582>
      }
    }
  }
  /* Transmit and Receive data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800c090:	68fb      	ldr	r3, [r7, #12]
 800c092:	68db      	ldr	r3, [r3, #12]
 800c094:	2b07      	cmp	r3, #7
 800c096:	f240 81a0 	bls.w	800c3da <HAL_SPI_TransmitReceive+0x572>
  {
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 800c09a:	e0a9      	b.n	800c1f0 <HAL_SPI_TransmitReceive+0x388>
    {
      /* Check TXP flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP) && (initial_TxXferCount > 0UL))
 800c09c:	68fb      	ldr	r3, [r7, #12]
 800c09e:	681b      	ldr	r3, [r3, #0]
 800c0a0:	695b      	ldr	r3, [r3, #20]
 800c0a2:	f003 0302 	and.w	r3, r3, #2
 800c0a6:	2b02      	cmp	r3, #2
 800c0a8:	d139      	bne.n	800c11e <HAL_SPI_TransmitReceive+0x2b6>
 800c0aa:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800c0ac:	2b00      	cmp	r3, #0
 800c0ae:	d036      	beq.n	800c11e <HAL_SPI_TransmitReceive+0x2b6>
      {
        if ((initial_TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 800c0b0:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800c0b2:	2b01      	cmp	r3, #1
 800c0b4:	d91c      	bls.n	800c0f0 <HAL_SPI_TransmitReceive+0x288>
 800c0b6:	68fb      	ldr	r3, [r7, #12]
 800c0b8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c0ba:	2b00      	cmp	r3, #0
 800c0bc:	d018      	beq.n	800c0f0 <HAL_SPI_TransmitReceive+0x288>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((uint32_t *)hspi->pTxBuffPtr);
 800c0be:	68fb      	ldr	r3, [r7, #12]
 800c0c0:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800c0c2:	68fb      	ldr	r3, [r7, #12]
 800c0c4:	681b      	ldr	r3, [r3, #0]
 800c0c6:	6812      	ldr	r2, [r2, #0]
 800c0c8:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 800c0ca:	68fb      	ldr	r3, [r7, #12]
 800c0cc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800c0ce:	1d1a      	adds	r2, r3, #4
 800c0d0:	68fb      	ldr	r3, [r7, #12]
 800c0d2:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount -= (uint16_t)2UL;
 800c0d4:	68fb      	ldr	r3, [r7, #12]
 800c0d6:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800c0da:	b29b      	uxth	r3, r3
 800c0dc:	3b02      	subs	r3, #2
 800c0de:	b29a      	uxth	r2, r3
 800c0e0:	68fb      	ldr	r3, [r7, #12]
 800c0e2:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
          initial_TxXferCount = hspi->TxXferCount;
 800c0e6:	68fb      	ldr	r3, [r7, #12]
 800c0e8:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800c0ec:	85fb      	strh	r3, [r7, #46]	; 0x2e
 800c0ee:	e016      	b.n	800c11e <HAL_SPI_TransmitReceive+0x2b6>
        }
        else
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((uint16_t *)hspi->pTxBuffPtr);
 800c0f0:	68fb      	ldr	r3, [r7, #12]
 800c0f2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800c0f4:	881a      	ldrh	r2, [r3, #0]
 800c0f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c0f8:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800c0fa:	68fb      	ldr	r3, [r7, #12]
 800c0fc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800c0fe:	1c9a      	adds	r2, r3, #2
 800c100:	68fb      	ldr	r3, [r7, #12]
 800c102:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount--;
 800c104:	68fb      	ldr	r3, [r7, #12]
 800c106:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800c10a:	b29b      	uxth	r3, r3
 800c10c:	3b01      	subs	r3, #1
 800c10e:	b29a      	uxth	r2, r3
 800c110:	68fb      	ldr	r3, [r7, #12]
 800c112:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
          initial_TxXferCount = hspi->TxXferCount;
 800c116:	68fb      	ldr	r3, [r7, #12]
 800c118:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800c11c:	85fb      	strh	r3, [r7, #46]	; 0x2e
        }
      }

      /* Check RXWNE/FRLVL flag */
      if (((hspi->Instance->SR & (SPI_FLAG_RXWNE | SPI_FLAG_FRLVL)) != 0UL) && (initial_RxXferCount > 0UL))
 800c11e:	68fb      	ldr	r3, [r7, #12]
 800c120:	681b      	ldr	r3, [r3, #0]
 800c122:	695b      	ldr	r3, [r3, #20]
 800c124:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 800c128:	2b00      	cmp	r3, #0
 800c12a:	d03d      	beq.n	800c1a8 <HAL_SPI_TransmitReceive+0x340>
 800c12c:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800c12e:	2b00      	cmp	r3, #0
 800c130:	d03a      	beq.n	800c1a8 <HAL_SPI_TransmitReceive+0x340>
      {
        if ((hspi->Instance->SR & SPI_FLAG_RXWNE) != 0UL)
 800c132:	68fb      	ldr	r3, [r7, #12]
 800c134:	681b      	ldr	r3, [r3, #0]
 800c136:	695b      	ldr	r3, [r3, #20]
 800c138:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800c13c:	2b00      	cmp	r3, #0
 800c13e:	d01b      	beq.n	800c178 <HAL_SPI_TransmitReceive+0x310>
        {
          *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 800c140:	68fb      	ldr	r3, [r7, #12]
 800c142:	681a      	ldr	r2, [r3, #0]
 800c144:	68fb      	ldr	r3, [r7, #12]
 800c146:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800c148:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800c14a:	601a      	str	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint32_t);
 800c14c:	68fb      	ldr	r3, [r7, #12]
 800c14e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800c150:	1d1a      	adds	r2, r3, #4
 800c152:	68fb      	ldr	r3, [r7, #12]
 800c154:	665a      	str	r2, [r3, #100]	; 0x64
          hspi->RxXferCount -= (uint16_t)2UL;
 800c156:	68fb      	ldr	r3, [r7, #12]
 800c158:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800c15c:	b29b      	uxth	r3, r3
 800c15e:	3b02      	subs	r3, #2
 800c160:	b29a      	uxth	r2, r3
 800c162:	68fb      	ldr	r3, [r7, #12]
 800c164:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 800c168:	68fb      	ldr	r3, [r7, #12]
 800c16a:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800c16e:	85bb      	strh	r3, [r7, #44]	; 0x2c
 800c170:	e01a      	b.n	800c1a8 <HAL_SPI_TransmitReceive+0x340>
 800c172:	bf00      	nop
 800c174:	ffff0000 	.word	0xffff0000
        }
        else
        {
#if defined (__GNUC__)
          *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 800c178:	68fb      	ldr	r3, [r7, #12]
 800c17a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800c17c:	6a3a      	ldr	r2, [r7, #32]
 800c17e:	8812      	ldrh	r2, [r2, #0]
 800c180:	b292      	uxth	r2, r2
 800c182:	801a      	strh	r2, [r3, #0]
#else
          *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
          hspi->pRxBuffPtr += sizeof(uint16_t);
 800c184:	68fb      	ldr	r3, [r7, #12]
 800c186:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800c188:	1c9a      	adds	r2, r3, #2
 800c18a:	68fb      	ldr	r3, [r7, #12]
 800c18c:	665a      	str	r2, [r3, #100]	; 0x64
          hspi->RxXferCount--;
 800c18e:	68fb      	ldr	r3, [r7, #12]
 800c190:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800c194:	b29b      	uxth	r3, r3
 800c196:	3b01      	subs	r3, #1
 800c198:	b29a      	uxth	r2, r3
 800c19a:	68fb      	ldr	r3, [r7, #12]
 800c19c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 800c1a0:	68fb      	ldr	r3, [r7, #12]
 800c1a2:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800c1a6:	85bb      	strh	r3, [r7, #44]	; 0x2c
        }
      }

      /* Timeout management */
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800c1a8:	f7f6 f902 	bl	80023b0 <HAL_GetTick>
 800c1ac:	4602      	mov	r2, r0
 800c1ae:	69fb      	ldr	r3, [r7, #28]
 800c1b0:	1ad3      	subs	r3, r2, r3
 800c1b2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800c1b4:	429a      	cmp	r2, r3
 800c1b6:	d803      	bhi.n	800c1c0 <HAL_SPI_TransmitReceive+0x358>
 800c1b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c1ba:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c1be:	d102      	bne.n	800c1c6 <HAL_SPI_TransmitReceive+0x35e>
 800c1c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c1c2:	2b00      	cmp	r3, #0
 800c1c4:	d114      	bne.n	800c1f0 <HAL_SPI_TransmitReceive+0x388>
      {
        /* Call standard close procedure with error check */
        SPI_CloseTransfer(hspi);
 800c1c6:	68f8      	ldr	r0, [r7, #12]
 800c1c8:	f000 f93a 	bl	800c440 <SPI_CloseTransfer>

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800c1cc:	68fb      	ldr	r3, [r7, #12]
 800c1ce:	2200      	movs	r2, #0
 800c1d0:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800c1d4:	68fb      	ldr	r3, [r7, #12]
 800c1d6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800c1da:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800c1de:	68fb      	ldr	r3, [r7, #12]
 800c1e0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        hspi->State = HAL_SPI_STATE_READY;
 800c1e4:	68fb      	ldr	r3, [r7, #12]
 800c1e6:	2201      	movs	r2, #1
 800c1e8:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
        return HAL_ERROR;
 800c1ec:	2301      	movs	r3, #1
 800c1ee:	e123      	b.n	800c438 <HAL_SPI_TransmitReceive+0x5d0>
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 800c1f0:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800c1f2:	2b00      	cmp	r3, #0
 800c1f4:	f47f af52 	bne.w	800c09c <HAL_SPI_TransmitReceive+0x234>
 800c1f8:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800c1fa:	2b00      	cmp	r3, #0
 800c1fc:	f47f af4e 	bne.w	800c09c <HAL_SPI_TransmitReceive+0x234>
 800c200:	e0f3      	b.n	800c3ea <HAL_SPI_TransmitReceive+0x582>
  else
  {
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
    {
      /* check TXP flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (initial_TxXferCount > 0UL))
 800c202:	68fb      	ldr	r3, [r7, #12]
 800c204:	681b      	ldr	r3, [r3, #0]
 800c206:	695b      	ldr	r3, [r3, #20]
 800c208:	f003 0302 	and.w	r3, r3, #2
 800c20c:	2b02      	cmp	r3, #2
 800c20e:	d15a      	bne.n	800c2c6 <HAL_SPI_TransmitReceive+0x45e>
 800c210:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800c212:	2b00      	cmp	r3, #0
 800c214:	d057      	beq.n	800c2c6 <HAL_SPI_TransmitReceive+0x45e>
      {
        if ((initial_TxXferCount > 3UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_03DATA))
 800c216:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800c218:	2b03      	cmp	r3, #3
 800c21a:	d91c      	bls.n	800c256 <HAL_SPI_TransmitReceive+0x3ee>
 800c21c:	68fb      	ldr	r3, [r7, #12]
 800c21e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c220:	2b40      	cmp	r3, #64	; 0x40
 800c222:	d918      	bls.n	800c256 <HAL_SPI_TransmitReceive+0x3ee>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((uint32_t *)hspi->pTxBuffPtr);
 800c224:	68fb      	ldr	r3, [r7, #12]
 800c226:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800c228:	68fb      	ldr	r3, [r7, #12]
 800c22a:	681b      	ldr	r3, [r3, #0]
 800c22c:	6812      	ldr	r2, [r2, #0]
 800c22e:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 800c230:	68fb      	ldr	r3, [r7, #12]
 800c232:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800c234:	1d1a      	adds	r2, r3, #4
 800c236:	68fb      	ldr	r3, [r7, #12]
 800c238:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount -= (uint16_t)4UL;
 800c23a:	68fb      	ldr	r3, [r7, #12]
 800c23c:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800c240:	b29b      	uxth	r3, r3
 800c242:	3b04      	subs	r3, #4
 800c244:	b29a      	uxth	r2, r3
 800c246:	68fb      	ldr	r3, [r7, #12]
 800c248:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
          initial_TxXferCount = hspi->TxXferCount;
 800c24c:	68fb      	ldr	r3, [r7, #12]
 800c24e:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800c252:	85fb      	strh	r3, [r7, #46]	; 0x2e
 800c254:	e037      	b.n	800c2c6 <HAL_SPI_TransmitReceive+0x45e>
        }
        else if ((initial_TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 800c256:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800c258:	2b01      	cmp	r3, #1
 800c25a:	d91b      	bls.n	800c294 <HAL_SPI_TransmitReceive+0x42c>
 800c25c:	68fb      	ldr	r3, [r7, #12]
 800c25e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c260:	2b00      	cmp	r3, #0
 800c262:	d017      	beq.n	800c294 <HAL_SPI_TransmitReceive+0x42c>
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((uint16_t *)hspi->pTxBuffPtr);
 800c264:	68fb      	ldr	r3, [r7, #12]
 800c266:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800c268:	881a      	ldrh	r2, [r3, #0]
 800c26a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c26c:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800c26e:	68fb      	ldr	r3, [r7, #12]
 800c270:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800c272:	1c9a      	adds	r2, r3, #2
 800c274:	68fb      	ldr	r3, [r7, #12]
 800c276:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount -= (uint16_t)2UL;
 800c278:	68fb      	ldr	r3, [r7, #12]
 800c27a:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800c27e:	b29b      	uxth	r3, r3
 800c280:	3b02      	subs	r3, #2
 800c282:	b29a      	uxth	r2, r3
 800c284:	68fb      	ldr	r3, [r7, #12]
 800c286:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
          initial_TxXferCount = hspi->TxXferCount;
 800c28a:	68fb      	ldr	r3, [r7, #12]
 800c28c:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800c290:	85fb      	strh	r3, [r7, #46]	; 0x2e
 800c292:	e018      	b.n	800c2c6 <HAL_SPI_TransmitReceive+0x45e>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->TXDR) = *((uint8_t *)hspi->pTxBuffPtr);
 800c294:	68fb      	ldr	r3, [r7, #12]
 800c296:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800c298:	68fb      	ldr	r3, [r7, #12]
 800c29a:	681b      	ldr	r3, [r3, #0]
 800c29c:	3320      	adds	r3, #32
 800c29e:	7812      	ldrb	r2, [r2, #0]
 800c2a0:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr += sizeof(uint8_t);
 800c2a2:	68fb      	ldr	r3, [r7, #12]
 800c2a4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800c2a6:	1c5a      	adds	r2, r3, #1
 800c2a8:	68fb      	ldr	r3, [r7, #12]
 800c2aa:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount--;
 800c2ac:	68fb      	ldr	r3, [r7, #12]
 800c2ae:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800c2b2:	b29b      	uxth	r3, r3
 800c2b4:	3b01      	subs	r3, #1
 800c2b6:	b29a      	uxth	r2, r3
 800c2b8:	68fb      	ldr	r3, [r7, #12]
 800c2ba:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
          initial_TxXferCount = hspi->TxXferCount;
 800c2be:	68fb      	ldr	r3, [r7, #12]
 800c2c0:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800c2c4:	85fb      	strh	r3, [r7, #46]	; 0x2e
        }
      }

      /* Wait until RXWNE/FRLVL flag is reset */
      if (((hspi->Instance->SR & (SPI_FLAG_RXWNE | SPI_FLAG_FRLVL)) != 0UL) && (initial_RxXferCount > 0UL))
 800c2c6:	68fb      	ldr	r3, [r7, #12]
 800c2c8:	681b      	ldr	r3, [r3, #0]
 800c2ca:	695b      	ldr	r3, [r3, #20]
 800c2cc:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 800c2d0:	2b00      	cmp	r3, #0
 800c2d2:	d05e      	beq.n	800c392 <HAL_SPI_TransmitReceive+0x52a>
 800c2d4:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800c2d6:	2b00      	cmp	r3, #0
 800c2d8:	d05b      	beq.n	800c392 <HAL_SPI_TransmitReceive+0x52a>
      {
        if ((hspi->Instance->SR & SPI_FLAG_RXWNE) != 0UL)
 800c2da:	68fb      	ldr	r3, [r7, #12]
 800c2dc:	681b      	ldr	r3, [r3, #0]
 800c2de:	695b      	ldr	r3, [r3, #20]
 800c2e0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800c2e4:	2b00      	cmp	r3, #0
 800c2e6:	d018      	beq.n	800c31a <HAL_SPI_TransmitReceive+0x4b2>
        {
          *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 800c2e8:	68fb      	ldr	r3, [r7, #12]
 800c2ea:	681a      	ldr	r2, [r3, #0]
 800c2ec:	68fb      	ldr	r3, [r7, #12]
 800c2ee:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800c2f0:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800c2f2:	601a      	str	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint32_t);
 800c2f4:	68fb      	ldr	r3, [r7, #12]
 800c2f6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800c2f8:	1d1a      	adds	r2, r3, #4
 800c2fa:	68fb      	ldr	r3, [r7, #12]
 800c2fc:	665a      	str	r2, [r3, #100]	; 0x64
          hspi->RxXferCount -= (uint16_t)4UL;
 800c2fe:	68fb      	ldr	r3, [r7, #12]
 800c300:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800c304:	b29b      	uxth	r3, r3
 800c306:	3b04      	subs	r3, #4
 800c308:	b29a      	uxth	r2, r3
 800c30a:	68fb      	ldr	r3, [r7, #12]
 800c30c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 800c310:	68fb      	ldr	r3, [r7, #12]
 800c312:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800c316:	85bb      	strh	r3, [r7, #44]	; 0x2c
 800c318:	e03b      	b.n	800c392 <HAL_SPI_TransmitReceive+0x52a>
        }
        else if ((hspi->Instance->SR & SPI_FLAG_FRLVL) > SPI_RX_FIFO_1PACKET)
 800c31a:	68fb      	ldr	r3, [r7, #12]
 800c31c:	681b      	ldr	r3, [r3, #0]
 800c31e:	695b      	ldr	r3, [r3, #20]
 800c320:	f403 43c0 	and.w	r3, r3, #24576	; 0x6000
 800c324:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800c328:	d918      	bls.n	800c35c <HAL_SPI_TransmitReceive+0x4f4>
        {
#if defined (__GNUC__)
          *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 800c32a:	68fb      	ldr	r3, [r7, #12]
 800c32c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800c32e:	6a3a      	ldr	r2, [r7, #32]
 800c330:	8812      	ldrh	r2, [r2, #0]
 800c332:	b292      	uxth	r2, r2
 800c334:	801a      	strh	r2, [r3, #0]
#else
          *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
          hspi->pRxBuffPtr += sizeof(uint16_t);
 800c336:	68fb      	ldr	r3, [r7, #12]
 800c338:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800c33a:	1c9a      	adds	r2, r3, #2
 800c33c:	68fb      	ldr	r3, [r7, #12]
 800c33e:	665a      	str	r2, [r3, #100]	; 0x64
          hspi->RxXferCount -= (uint16_t)2UL;
 800c340:	68fb      	ldr	r3, [r7, #12]
 800c342:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800c346:	b29b      	uxth	r3, r3
 800c348:	3b02      	subs	r3, #2
 800c34a:	b29a      	uxth	r2, r3
 800c34c:	68fb      	ldr	r3, [r7, #12]
 800c34e:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 800c352:	68fb      	ldr	r3, [r7, #12]
 800c354:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800c358:	85bb      	strh	r3, [r7, #44]	; 0x2c
 800c35a:	e01a      	b.n	800c392 <HAL_SPI_TransmitReceive+0x52a>
        }
        else
        {
          *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 800c35c:	68fb      	ldr	r3, [r7, #12]
 800c35e:	681b      	ldr	r3, [r3, #0]
 800c360:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800c364:	68fb      	ldr	r3, [r7, #12]
 800c366:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800c368:	7812      	ldrb	r2, [r2, #0]
 800c36a:	b2d2      	uxtb	r2, r2
 800c36c:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint8_t);
 800c36e:	68fb      	ldr	r3, [r7, #12]
 800c370:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800c372:	1c5a      	adds	r2, r3, #1
 800c374:	68fb      	ldr	r3, [r7, #12]
 800c376:	665a      	str	r2, [r3, #100]	; 0x64
          hspi->RxXferCount--;
 800c378:	68fb      	ldr	r3, [r7, #12]
 800c37a:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800c37e:	b29b      	uxth	r3, r3
 800c380:	3b01      	subs	r3, #1
 800c382:	b29a      	uxth	r2, r3
 800c384:	68fb      	ldr	r3, [r7, #12]
 800c386:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 800c38a:	68fb      	ldr	r3, [r7, #12]
 800c38c:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800c390:	85bb      	strh	r3, [r7, #44]	; 0x2c
        }
      }

      /* Timeout management */
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800c392:	f7f6 f80d 	bl	80023b0 <HAL_GetTick>
 800c396:	4602      	mov	r2, r0
 800c398:	69fb      	ldr	r3, [r7, #28]
 800c39a:	1ad3      	subs	r3, r2, r3
 800c39c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800c39e:	429a      	cmp	r2, r3
 800c3a0:	d803      	bhi.n	800c3aa <HAL_SPI_TransmitReceive+0x542>
 800c3a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c3a4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c3a8:	d102      	bne.n	800c3b0 <HAL_SPI_TransmitReceive+0x548>
 800c3aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c3ac:	2b00      	cmp	r3, #0
 800c3ae:	d114      	bne.n	800c3da <HAL_SPI_TransmitReceive+0x572>
      {
        /* Call standard close procedure with error check */
        SPI_CloseTransfer(hspi);
 800c3b0:	68f8      	ldr	r0, [r7, #12]
 800c3b2:	f000 f845 	bl	800c440 <SPI_CloseTransfer>

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800c3b6:	68fb      	ldr	r3, [r7, #12]
 800c3b8:	2200      	movs	r2, #0
 800c3ba:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800c3be:	68fb      	ldr	r3, [r7, #12]
 800c3c0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800c3c4:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800c3c8:	68fb      	ldr	r3, [r7, #12]
 800c3ca:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        hspi->State = HAL_SPI_STATE_READY;
 800c3ce:	68fb      	ldr	r3, [r7, #12]
 800c3d0:	2201      	movs	r2, #1
 800c3d2:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
        return HAL_ERROR;
 800c3d6:	2301      	movs	r3, #1
 800c3d8:	e02e      	b.n	800c438 <HAL_SPI_TransmitReceive+0x5d0>
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 800c3da:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800c3dc:	2b00      	cmp	r3, #0
 800c3de:	f47f af10 	bne.w	800c202 <HAL_SPI_TransmitReceive+0x39a>
 800c3e2:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800c3e4:	2b00      	cmp	r3, #0
 800c3e6:	f47f af0c 	bne.w	800c202 <HAL_SPI_TransmitReceive+0x39a>
      }
    }
  }

  /* Wait for Tx/Rx (and CRC) data to be sent/received */
  if (SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_EOT, RESET, tickstart, Timeout) != HAL_OK)
 800c3ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c3ec:	9300      	str	r3, [sp, #0]
 800c3ee:	69fb      	ldr	r3, [r7, #28]
 800c3f0:	2200      	movs	r2, #0
 800c3f2:	2108      	movs	r1, #8
 800c3f4:	68f8      	ldr	r0, [r7, #12]
 800c3f6:	f000 f8c3 	bl	800c580 <SPI_WaitOnFlagUntilTimeout>
 800c3fa:	4603      	mov	r3, r0
 800c3fc:	2b00      	cmp	r3, #0
 800c3fe:	d007      	beq.n	800c410 <HAL_SPI_TransmitReceive+0x5a8>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800c400:	68fb      	ldr	r3, [r7, #12]
 800c402:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800c406:	f043 0220 	orr.w	r2, r3, #32
 800c40a:	68fb      	ldr	r3, [r7, #12]
 800c40c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  }

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 800c410:	68f8      	ldr	r0, [r7, #12]
 800c412:	f000 f815 	bl	800c440 <SPI_CloseTransfer>

  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800c416:	68fb      	ldr	r3, [r7, #12]
 800c418:	2200      	movs	r2, #0
 800c41a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  hspi->State = HAL_SPI_STATE_READY;
 800c41e:	68fb      	ldr	r3, [r7, #12]
 800c420:	2201      	movs	r2, #1
 800c422:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800c426:	68fb      	ldr	r3, [r7, #12]
 800c428:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800c42c:	2b00      	cmp	r3, #0
 800c42e:	d001      	beq.n	800c434 <HAL_SPI_TransmitReceive+0x5cc>
  {
    return HAL_ERROR;
 800c430:	2301      	movs	r3, #1
 800c432:	e001      	b.n	800c438 <HAL_SPI_TransmitReceive+0x5d0>
  }
  return errorcode;
 800c434:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 800c438:	4618      	mov	r0, r3
 800c43a:	3730      	adds	r7, #48	; 0x30
 800c43c:	46bd      	mov	sp, r7
 800c43e:	bd80      	pop	{r7, pc}

0800c440 <SPI_CloseTransfer>:
  *               the configuration information for SPI module.
  * @retval HAL_ERROR: if any error detected
*         HAL_OK: if nothing detected
  */
static void SPI_CloseTransfer(SPI_HandleTypeDef *hspi)
{
 800c440:	b480      	push	{r7}
 800c442:	b085      	sub	sp, #20
 800c444:	af00      	add	r7, sp, #0
 800c446:	6078      	str	r0, [r7, #4]
  uint32_t itflag = hspi->Instance->SR;
 800c448:	687b      	ldr	r3, [r7, #4]
 800c44a:	681b      	ldr	r3, [r3, #0]
 800c44c:	695b      	ldr	r3, [r3, #20]
 800c44e:	60fb      	str	r3, [r7, #12]

  __HAL_SPI_CLEAR_EOTFLAG(hspi);
 800c450:	687b      	ldr	r3, [r7, #4]
 800c452:	681b      	ldr	r3, [r3, #0]
 800c454:	699a      	ldr	r2, [r3, #24]
 800c456:	687b      	ldr	r3, [r7, #4]
 800c458:	681b      	ldr	r3, [r3, #0]
 800c45a:	f042 0208 	orr.w	r2, r2, #8
 800c45e:	619a      	str	r2, [r3, #24]
  __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 800c460:	687b      	ldr	r3, [r7, #4]
 800c462:	681b      	ldr	r3, [r3, #0]
 800c464:	699a      	ldr	r2, [r3, #24]
 800c466:	687b      	ldr	r3, [r7, #4]
 800c468:	681b      	ldr	r3, [r3, #0]
 800c46a:	f042 0210 	orr.w	r2, r2, #16
 800c46e:	619a      	str	r2, [r3, #24]

  /* Disable SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800c470:	687b      	ldr	r3, [r7, #4]
 800c472:	681b      	ldr	r3, [r3, #0]
 800c474:	681a      	ldr	r2, [r3, #0]
 800c476:	687b      	ldr	r3, [r7, #4]
 800c478:	681b      	ldr	r3, [r3, #0]
 800c47a:	f022 0201 	bic.w	r2, r2, #1
 800c47e:	601a      	str	r2, [r3, #0]

  /* Disable ITs */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_TXP | SPI_IT_RXP | SPI_IT_DXP | SPI_IT_UDR | SPI_IT_OVR | SPI_IT_FRE | SPI_IT_MODF));
 800c480:	687b      	ldr	r3, [r7, #4]
 800c482:	681b      	ldr	r3, [r3, #0]
 800c484:	6919      	ldr	r1, [r3, #16]
 800c486:	687b      	ldr	r3, [r7, #4]
 800c488:	681a      	ldr	r2, [r3, #0]
 800c48a:	4b3c      	ldr	r3, [pc, #240]	; (800c57c <SPI_CloseTransfer+0x13c>)
 800c48c:	400b      	ands	r3, r1
 800c48e:	6113      	str	r3, [r2, #16]

  /* Disable Tx DMA Request */
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 800c490:	687b      	ldr	r3, [r7, #4]
 800c492:	681b      	ldr	r3, [r3, #0]
 800c494:	689a      	ldr	r2, [r3, #8]
 800c496:	687b      	ldr	r3, [r7, #4]
 800c498:	681b      	ldr	r3, [r3, #0]
 800c49a:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 800c49e:	609a      	str	r2, [r3, #8]

  /* Report UnderRun error for non RX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800c4a0:	687b      	ldr	r3, [r7, #4]
 800c4a2:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800c4a6:	b2db      	uxtb	r3, r3
 800c4a8:	2b04      	cmp	r3, #4
 800c4aa:	d014      	beq.n	800c4d6 <SPI_CloseTransfer+0x96>
  {
    if ((itflag & SPI_FLAG_UDR) != 0UL)
 800c4ac:	68fb      	ldr	r3, [r7, #12]
 800c4ae:	f003 0320 	and.w	r3, r3, #32
 800c4b2:	2b00      	cmp	r3, #0
 800c4b4:	d00f      	beq.n	800c4d6 <SPI_CloseTransfer+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 800c4b6:	687b      	ldr	r3, [r7, #4]
 800c4b8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800c4bc:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800c4c0:	687b      	ldr	r3, [r7, #4]
 800c4c2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 800c4c6:	687b      	ldr	r3, [r7, #4]
 800c4c8:	681b      	ldr	r3, [r3, #0]
 800c4ca:	699a      	ldr	r2, [r3, #24]
 800c4cc:	687b      	ldr	r3, [r7, #4]
 800c4ce:	681b      	ldr	r3, [r3, #0]
 800c4d0:	f042 0220 	orr.w	r2, r2, #32
 800c4d4:	619a      	str	r2, [r3, #24]
    }
  }

  /* Report OverRun error for non TX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 800c4d6:	687b      	ldr	r3, [r7, #4]
 800c4d8:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800c4dc:	b2db      	uxtb	r3, r3
 800c4de:	2b03      	cmp	r3, #3
 800c4e0:	d014      	beq.n	800c50c <SPI_CloseTransfer+0xcc>
  {
    if ((itflag & SPI_FLAG_OVR) != 0UL)
 800c4e2:	68fb      	ldr	r3, [r7, #12]
 800c4e4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c4e8:	2b00      	cmp	r3, #0
 800c4ea:	d00f      	beq.n	800c50c <SPI_CloseTransfer+0xcc>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 800c4ec:	687b      	ldr	r3, [r7, #4]
 800c4ee:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800c4f2:	f043 0204 	orr.w	r2, r3, #4
 800c4f6:	687b      	ldr	r3, [r7, #4]
 800c4f8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800c4fc:	687b      	ldr	r3, [r7, #4]
 800c4fe:	681b      	ldr	r3, [r3, #0]
 800c500:	699a      	ldr	r2, [r3, #24]
 800c502:	687b      	ldr	r3, [r7, #4]
 800c504:	681b      	ldr	r3, [r3, #0]
 800c506:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800c50a:	619a      	str	r2, [r3, #24]
    }
#endif /* USE_SPI_CRC */
  }

  /* SPI Mode Fault error interrupt occurred -------------------------------*/
  if ((itflag & SPI_FLAG_MODF) != 0UL)
 800c50c:	68fb      	ldr	r3, [r7, #12]
 800c50e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800c512:	2b00      	cmp	r3, #0
 800c514:	d00f      	beq.n	800c536 <SPI_CloseTransfer+0xf6>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 800c516:	687b      	ldr	r3, [r7, #4]
 800c518:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800c51c:	f043 0201 	orr.w	r2, r3, #1
 800c520:	687b      	ldr	r3, [r7, #4]
 800c522:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    __HAL_SPI_CLEAR_MODFFLAG(hspi);
 800c526:	687b      	ldr	r3, [r7, #4]
 800c528:	681b      	ldr	r3, [r3, #0]
 800c52a:	699a      	ldr	r2, [r3, #24]
 800c52c:	687b      	ldr	r3, [r7, #4]
 800c52e:	681b      	ldr	r3, [r3, #0]
 800c530:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800c534:	619a      	str	r2, [r3, #24]
  }

  /* SPI Frame error interrupt occurred ------------------------------------*/
  if ((itflag & SPI_FLAG_FRE) != 0UL)
 800c536:	68fb      	ldr	r3, [r7, #12]
 800c538:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c53c:	2b00      	cmp	r3, #0
 800c53e:	d00f      	beq.n	800c560 <SPI_CloseTransfer+0x120>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 800c540:	687b      	ldr	r3, [r7, #4]
 800c542:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800c546:	f043 0208 	orr.w	r2, r3, #8
 800c54a:	687b      	ldr	r3, [r7, #4]
 800c54c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    __HAL_SPI_CLEAR_FREFLAG(hspi);
 800c550:	687b      	ldr	r3, [r7, #4]
 800c552:	681b      	ldr	r3, [r3, #0]
 800c554:	699a      	ldr	r2, [r3, #24]
 800c556:	687b      	ldr	r3, [r7, #4]
 800c558:	681b      	ldr	r3, [r3, #0]
 800c55a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800c55e:	619a      	str	r2, [r3, #24]
  }

  hspi->TxXferCount = (uint16_t)0UL;
 800c560:	687b      	ldr	r3, [r7, #4]
 800c562:	2200      	movs	r2, #0
 800c564:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
  hspi->RxXferCount = (uint16_t)0UL;
 800c568:	687b      	ldr	r3, [r7, #4]
 800c56a:	2200      	movs	r2, #0
 800c56c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
}
 800c570:	bf00      	nop
 800c572:	3714      	adds	r7, #20
 800c574:	46bd      	mov	sp, r7
 800c576:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c57a:	4770      	bx	lr
 800c57c:	fffffc90 	.word	0xfffffc90

0800c580 <SPI_WaitOnFlagUntilTimeout>:
  * @param Tickstart: Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitOnFlagUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Tickstart, uint32_t Timeout)
{
 800c580:	b580      	push	{r7, lr}
 800c582:	b084      	sub	sp, #16
 800c584:	af00      	add	r7, sp, #0
 800c586:	60f8      	str	r0, [r7, #12]
 800c588:	60b9      	str	r1, [r7, #8]
 800c58a:	603b      	str	r3, [r7, #0]
 800c58c:	4613      	mov	r3, r2
 800c58e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 800c590:	e010      	b.n	800c5b4 <SPI_WaitOnFlagUntilTimeout+0x34>
  {
    /* Check for the Timeout */
    if ((((HAL_GetTick() - Tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800c592:	f7f5 ff0d 	bl	80023b0 <HAL_GetTick>
 800c596:	4602      	mov	r2, r0
 800c598:	683b      	ldr	r3, [r7, #0]
 800c59a:	1ad3      	subs	r3, r2, r3
 800c59c:	69ba      	ldr	r2, [r7, #24]
 800c59e:	429a      	cmp	r2, r3
 800c5a0:	d803      	bhi.n	800c5aa <SPI_WaitOnFlagUntilTimeout+0x2a>
 800c5a2:	69bb      	ldr	r3, [r7, #24]
 800c5a4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c5a8:	d102      	bne.n	800c5b0 <SPI_WaitOnFlagUntilTimeout+0x30>
 800c5aa:	69bb      	ldr	r3, [r7, #24]
 800c5ac:	2b00      	cmp	r3, #0
 800c5ae:	d101      	bne.n	800c5b4 <SPI_WaitOnFlagUntilTimeout+0x34>
    {
      return HAL_TIMEOUT;
 800c5b0:	2303      	movs	r3, #3
 800c5b2:	e00f      	b.n	800c5d4 <SPI_WaitOnFlagUntilTimeout+0x54>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 800c5b4:	68fb      	ldr	r3, [r7, #12]
 800c5b6:	681b      	ldr	r3, [r3, #0]
 800c5b8:	695a      	ldr	r2, [r3, #20]
 800c5ba:	68bb      	ldr	r3, [r7, #8]
 800c5bc:	4013      	ands	r3, r2
 800c5be:	68ba      	ldr	r2, [r7, #8]
 800c5c0:	429a      	cmp	r2, r3
 800c5c2:	bf0c      	ite	eq
 800c5c4:	2301      	moveq	r3, #1
 800c5c6:	2300      	movne	r3, #0
 800c5c8:	b2db      	uxtb	r3, r3
 800c5ca:	461a      	mov	r2, r3
 800c5cc:	79fb      	ldrb	r3, [r7, #7]
 800c5ce:	429a      	cmp	r2, r3
 800c5d0:	d0df      	beq.n	800c592 <SPI_WaitOnFlagUntilTimeout+0x12>
    }
  }
  return HAL_OK;
 800c5d2:	2300      	movs	r3, #0
}
 800c5d4:	4618      	mov	r0, r3
 800c5d6:	3710      	adds	r7, #16
 800c5d8:	46bd      	mov	sp, r7
 800c5da:	bd80      	pop	{r7, pc}

0800c5dc <SPI_GetPacketSize>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(SPI_HandleTypeDef *hspi)
{
 800c5dc:	b480      	push	{r7}
 800c5de:	b085      	sub	sp, #20
 800c5e0:	af00      	add	r7, sp, #0
 800c5e2:	6078      	str	r0, [r7, #4]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 800c5e4:	687b      	ldr	r3, [r7, #4]
 800c5e6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c5e8:	095b      	lsrs	r3, r3, #5
 800c5ea:	3301      	adds	r3, #1
 800c5ec:	60fb      	str	r3, [r7, #12]
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 800c5ee:	687b      	ldr	r3, [r7, #4]
 800c5f0:	68db      	ldr	r3, [r3, #12]
 800c5f2:	3301      	adds	r3, #1
 800c5f4:	60bb      	str	r3, [r7, #8]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 800c5f6:	68bb      	ldr	r3, [r7, #8]
 800c5f8:	3307      	adds	r3, #7
 800c5fa:	08db      	lsrs	r3, r3, #3
 800c5fc:	60bb      	str	r3, [r7, #8]

  return data_size * fifo_threashold;
 800c5fe:	68bb      	ldr	r3, [r7, #8]
 800c600:	68fa      	ldr	r2, [r7, #12]
 800c602:	fb02 f303 	mul.w	r3, r2, r3
}
 800c606:	4618      	mov	r0, r3
 800c608:	3714      	adds	r7, #20
 800c60a:	46bd      	mov	sp, r7
 800c60c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c610:	4770      	bx	lr
	...

0800c614 <HAL_SRAM_Init>:
  * @param  ExtTiming Pointer to SRAM extended mode timing structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SRAM_Init(SRAM_HandleTypeDef *hsram, FMC_NORSRAM_TimingTypeDef *Timing,
                                FMC_NORSRAM_TimingTypeDef *ExtTiming)
{
 800c614:	b580      	push	{r7, lr}
 800c616:	b084      	sub	sp, #16
 800c618:	af00      	add	r7, sp, #0
 800c61a:	60f8      	str	r0, [r7, #12]
 800c61c:	60b9      	str	r1, [r7, #8]
 800c61e:	607a      	str	r2, [r7, #4]
  /* Check the SRAM handle parameter */
  if (hsram == NULL)
 800c620:	68fb      	ldr	r3, [r7, #12]
 800c622:	2b00      	cmp	r3, #0
 800c624:	d101      	bne.n	800c62a <HAL_SRAM_Init+0x16>
  {
    return HAL_ERROR;
 800c626:	2301      	movs	r3, #1
 800c628:	e03e      	b.n	800c6a8 <HAL_SRAM_Init+0x94>
  }

  if (hsram->State == HAL_SRAM_STATE_RESET)
 800c62a:	68fb      	ldr	r3, [r7, #12]
 800c62c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800c630:	b2db      	uxtb	r3, r3
 800c632:	2b00      	cmp	r3, #0
 800c634:	d106      	bne.n	800c644 <HAL_SRAM_Init+0x30>
  {
    /* Allocate lock resource and initialize it */
    hsram->Lock = HAL_UNLOCKED;
 800c636:	68fb      	ldr	r3, [r7, #12]
 800c638:	2200      	movs	r2, #0
 800c63a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44

    /* Init the low level hardware */
    hsram->MspInitCallback(hsram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SRAM_MspInit(hsram);
 800c63e:	68f8      	ldr	r0, [r7, #12]
 800c640:	f7f4 fe3c 	bl	80012bc <HAL_SRAM_MspInit>
#endif /* USE_HAL_SRAM_REGISTER_CALLBACKS */
  }

  /* Initialize SRAM control Interface */
  (void)FMC_NORSRAM_Init(hsram->Instance, &(hsram->Init));
 800c644:	68fb      	ldr	r3, [r7, #12]
 800c646:	681a      	ldr	r2, [r3, #0]
 800c648:	68fb      	ldr	r3, [r7, #12]
 800c64a:	3308      	adds	r3, #8
 800c64c:	4619      	mov	r1, r3
 800c64e:	4610      	mov	r0, r2
 800c650:	f001 f85a 	bl	800d708 <FMC_NORSRAM_Init>

  /* Initialize SRAM timing Interface */
  (void)FMC_NORSRAM_Timing_Init(hsram->Instance, Timing, hsram->Init.NSBank);
 800c654:	68fb      	ldr	r3, [r7, #12]
 800c656:	6818      	ldr	r0, [r3, #0]
 800c658:	68fb      	ldr	r3, [r7, #12]
 800c65a:	689b      	ldr	r3, [r3, #8]
 800c65c:	461a      	mov	r2, r3
 800c65e:	68b9      	ldr	r1, [r7, #8]
 800c660:	f001 f8e2 	bl	800d828 <FMC_NORSRAM_Timing_Init>

  /* Initialize SRAM extended mode timing Interface */
  (void)FMC_NORSRAM_Extended_Timing_Init(hsram->Extended, ExtTiming, hsram->Init.NSBank,
 800c664:	68fb      	ldr	r3, [r7, #12]
 800c666:	6858      	ldr	r0, [r3, #4]
 800c668:	68fb      	ldr	r3, [r7, #12]
 800c66a:	689a      	ldr	r2, [r3, #8]
 800c66c:	68fb      	ldr	r3, [r7, #12]
 800c66e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c670:	6879      	ldr	r1, [r7, #4]
 800c672:	f001 f929 	bl	800d8c8 <FMC_NORSRAM_Extended_Timing_Init>
                                         hsram->Init.ExtendedMode);

  /* Enable the NORSRAM device */
  __FMC_NORSRAM_ENABLE(hsram->Instance, hsram->Init.NSBank);
 800c676:	68fb      	ldr	r3, [r7, #12]
 800c678:	681b      	ldr	r3, [r3, #0]
 800c67a:	68fa      	ldr	r2, [r7, #12]
 800c67c:	6892      	ldr	r2, [r2, #8]
 800c67e:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800c682:	68fb      	ldr	r3, [r7, #12]
 800c684:	681b      	ldr	r3, [r3, #0]
 800c686:	68fa      	ldr	r2, [r7, #12]
 800c688:	6892      	ldr	r2, [r2, #8]
 800c68a:	f041 0101 	orr.w	r1, r1, #1
 800c68e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

  /* Enable FMC Peripheral */
  __FMC_ENABLE();
 800c692:	4b07      	ldr	r3, [pc, #28]	; (800c6b0 <HAL_SRAM_Init+0x9c>)
 800c694:	681b      	ldr	r3, [r3, #0]
 800c696:	4a06      	ldr	r2, [pc, #24]	; (800c6b0 <HAL_SRAM_Init+0x9c>)
 800c698:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800c69c:	6013      	str	r3, [r2, #0]

  /* Initialize the SRAM controller state */
  hsram->State = HAL_SRAM_STATE_READY;
 800c69e:	68fb      	ldr	r3, [r7, #12]
 800c6a0:	2201      	movs	r2, #1
 800c6a2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  return HAL_OK;
 800c6a6:	2300      	movs	r3, #0
}
 800c6a8:	4618      	mov	r0, r3
 800c6aa:	3710      	adds	r7, #16
 800c6ac:	46bd      	mov	sp, r7
 800c6ae:	bd80      	pop	{r7, pc}
 800c6b0:	52004000 	.word	0x52004000

0800c6b4 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800c6b4:	b580      	push	{r7, lr}
 800c6b6:	b082      	sub	sp, #8
 800c6b8:	af00      	add	r7, sp, #0
 800c6ba:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800c6bc:	687b      	ldr	r3, [r7, #4]
 800c6be:	2b00      	cmp	r3, #0
 800c6c0:	d101      	bne.n	800c6c6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800c6c2:	2301      	movs	r3, #1
 800c6c4:	e042      	b.n	800c74c <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800c6c6:	687b      	ldr	r3, [r7, #4]
 800c6c8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800c6cc:	2b00      	cmp	r3, #0
 800c6ce:	d106      	bne.n	800c6de <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800c6d0:	687b      	ldr	r3, [r7, #4]
 800c6d2:	2200      	movs	r2, #0
 800c6d4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800c6d8:	6878      	ldr	r0, [r7, #4]
 800c6da:	f7f5 fd53 	bl	8002184 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800c6de:	687b      	ldr	r3, [r7, #4]
 800c6e0:	2224      	movs	r2, #36	; 0x24
 800c6e2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 800c6e6:	687b      	ldr	r3, [r7, #4]
 800c6e8:	681b      	ldr	r3, [r3, #0]
 800c6ea:	681a      	ldr	r2, [r3, #0]
 800c6ec:	687b      	ldr	r3, [r7, #4]
 800c6ee:	681b      	ldr	r3, [r3, #0]
 800c6f0:	f022 0201 	bic.w	r2, r2, #1
 800c6f4:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800c6f6:	6878      	ldr	r0, [r7, #4]
 800c6f8:	f000 f82c 	bl	800c754 <UART_SetConfig>
 800c6fc:	4603      	mov	r3, r0
 800c6fe:	2b01      	cmp	r3, #1
 800c700:	d101      	bne.n	800c706 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 800c702:	2301      	movs	r3, #1
 800c704:	e022      	b.n	800c74c <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800c706:	687b      	ldr	r3, [r7, #4]
 800c708:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c70a:	2b00      	cmp	r3, #0
 800c70c:	d002      	beq.n	800c714 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 800c70e:	6878      	ldr	r0, [r7, #4]
 800c710:	f000 fd8a 	bl	800d228 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800c714:	687b      	ldr	r3, [r7, #4]
 800c716:	681b      	ldr	r3, [r3, #0]
 800c718:	685a      	ldr	r2, [r3, #4]
 800c71a:	687b      	ldr	r3, [r7, #4]
 800c71c:	681b      	ldr	r3, [r3, #0]
 800c71e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800c722:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800c724:	687b      	ldr	r3, [r7, #4]
 800c726:	681b      	ldr	r3, [r3, #0]
 800c728:	689a      	ldr	r2, [r3, #8]
 800c72a:	687b      	ldr	r3, [r7, #4]
 800c72c:	681b      	ldr	r3, [r3, #0]
 800c72e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800c732:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800c734:	687b      	ldr	r3, [r7, #4]
 800c736:	681b      	ldr	r3, [r3, #0]
 800c738:	681a      	ldr	r2, [r3, #0]
 800c73a:	687b      	ldr	r3, [r7, #4]
 800c73c:	681b      	ldr	r3, [r3, #0]
 800c73e:	f042 0201 	orr.w	r2, r2, #1
 800c742:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800c744:	6878      	ldr	r0, [r7, #4]
 800c746:	f000 fe11 	bl	800d36c <UART_CheckIdleState>
 800c74a:	4603      	mov	r3, r0
}
 800c74c:	4618      	mov	r0, r3
 800c74e:	3708      	adds	r7, #8
 800c750:	46bd      	mov	sp, r7
 800c752:	bd80      	pop	{r7, pc}

0800c754 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800c754:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800c758:	b092      	sub	sp, #72	; 0x48
 800c75a:	af00      	add	r7, sp, #0
 800c75c:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800c75e:	2300      	movs	r3, #0
 800c760:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800c764:	697b      	ldr	r3, [r7, #20]
 800c766:	689a      	ldr	r2, [r3, #8]
 800c768:	697b      	ldr	r3, [r7, #20]
 800c76a:	691b      	ldr	r3, [r3, #16]
 800c76c:	431a      	orrs	r2, r3
 800c76e:	697b      	ldr	r3, [r7, #20]
 800c770:	695b      	ldr	r3, [r3, #20]
 800c772:	431a      	orrs	r2, r3
 800c774:	697b      	ldr	r3, [r7, #20]
 800c776:	69db      	ldr	r3, [r3, #28]
 800c778:	4313      	orrs	r3, r2
 800c77a:	647b      	str	r3, [r7, #68]	; 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800c77c:	697b      	ldr	r3, [r7, #20]
 800c77e:	681b      	ldr	r3, [r3, #0]
 800c780:	681a      	ldr	r2, [r3, #0]
 800c782:	4bbe      	ldr	r3, [pc, #760]	; (800ca7c <UART_SetConfig+0x328>)
 800c784:	4013      	ands	r3, r2
 800c786:	697a      	ldr	r2, [r7, #20]
 800c788:	6812      	ldr	r2, [r2, #0]
 800c78a:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800c78c:	430b      	orrs	r3, r1
 800c78e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800c790:	697b      	ldr	r3, [r7, #20]
 800c792:	681b      	ldr	r3, [r3, #0]
 800c794:	685b      	ldr	r3, [r3, #4]
 800c796:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800c79a:	697b      	ldr	r3, [r7, #20]
 800c79c:	68da      	ldr	r2, [r3, #12]
 800c79e:	697b      	ldr	r3, [r7, #20]
 800c7a0:	681b      	ldr	r3, [r3, #0]
 800c7a2:	430a      	orrs	r2, r1
 800c7a4:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800c7a6:	697b      	ldr	r3, [r7, #20]
 800c7a8:	699b      	ldr	r3, [r3, #24]
 800c7aa:	647b      	str	r3, [r7, #68]	; 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800c7ac:	697b      	ldr	r3, [r7, #20]
 800c7ae:	681b      	ldr	r3, [r3, #0]
 800c7b0:	4ab3      	ldr	r2, [pc, #716]	; (800ca80 <UART_SetConfig+0x32c>)
 800c7b2:	4293      	cmp	r3, r2
 800c7b4:	d004      	beq.n	800c7c0 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800c7b6:	697b      	ldr	r3, [r7, #20]
 800c7b8:	6a1b      	ldr	r3, [r3, #32]
 800c7ba:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800c7bc:	4313      	orrs	r3, r2
 800c7be:	647b      	str	r3, [r7, #68]	; 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800c7c0:	697b      	ldr	r3, [r7, #20]
 800c7c2:	681b      	ldr	r3, [r3, #0]
 800c7c4:	689a      	ldr	r2, [r3, #8]
 800c7c6:	4baf      	ldr	r3, [pc, #700]	; (800ca84 <UART_SetConfig+0x330>)
 800c7c8:	4013      	ands	r3, r2
 800c7ca:	697a      	ldr	r2, [r7, #20]
 800c7cc:	6812      	ldr	r2, [r2, #0]
 800c7ce:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800c7d0:	430b      	orrs	r3, r1
 800c7d2:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800c7d4:	697b      	ldr	r3, [r7, #20]
 800c7d6:	681b      	ldr	r3, [r3, #0]
 800c7d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c7da:	f023 010f 	bic.w	r1, r3, #15
 800c7de:	697b      	ldr	r3, [r7, #20]
 800c7e0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800c7e2:	697b      	ldr	r3, [r7, #20]
 800c7e4:	681b      	ldr	r3, [r3, #0]
 800c7e6:	430a      	orrs	r2, r1
 800c7e8:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800c7ea:	697b      	ldr	r3, [r7, #20]
 800c7ec:	681b      	ldr	r3, [r3, #0]
 800c7ee:	4aa6      	ldr	r2, [pc, #664]	; (800ca88 <UART_SetConfig+0x334>)
 800c7f0:	4293      	cmp	r3, r2
 800c7f2:	d177      	bne.n	800c8e4 <UART_SetConfig+0x190>
 800c7f4:	4ba5      	ldr	r3, [pc, #660]	; (800ca8c <UART_SetConfig+0x338>)
 800c7f6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c7f8:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800c7fc:	2b28      	cmp	r3, #40	; 0x28
 800c7fe:	d86d      	bhi.n	800c8dc <UART_SetConfig+0x188>
 800c800:	a201      	add	r2, pc, #4	; (adr r2, 800c808 <UART_SetConfig+0xb4>)
 800c802:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c806:	bf00      	nop
 800c808:	0800c8ad 	.word	0x0800c8ad
 800c80c:	0800c8dd 	.word	0x0800c8dd
 800c810:	0800c8dd 	.word	0x0800c8dd
 800c814:	0800c8dd 	.word	0x0800c8dd
 800c818:	0800c8dd 	.word	0x0800c8dd
 800c81c:	0800c8dd 	.word	0x0800c8dd
 800c820:	0800c8dd 	.word	0x0800c8dd
 800c824:	0800c8dd 	.word	0x0800c8dd
 800c828:	0800c8b5 	.word	0x0800c8b5
 800c82c:	0800c8dd 	.word	0x0800c8dd
 800c830:	0800c8dd 	.word	0x0800c8dd
 800c834:	0800c8dd 	.word	0x0800c8dd
 800c838:	0800c8dd 	.word	0x0800c8dd
 800c83c:	0800c8dd 	.word	0x0800c8dd
 800c840:	0800c8dd 	.word	0x0800c8dd
 800c844:	0800c8dd 	.word	0x0800c8dd
 800c848:	0800c8bd 	.word	0x0800c8bd
 800c84c:	0800c8dd 	.word	0x0800c8dd
 800c850:	0800c8dd 	.word	0x0800c8dd
 800c854:	0800c8dd 	.word	0x0800c8dd
 800c858:	0800c8dd 	.word	0x0800c8dd
 800c85c:	0800c8dd 	.word	0x0800c8dd
 800c860:	0800c8dd 	.word	0x0800c8dd
 800c864:	0800c8dd 	.word	0x0800c8dd
 800c868:	0800c8c5 	.word	0x0800c8c5
 800c86c:	0800c8dd 	.word	0x0800c8dd
 800c870:	0800c8dd 	.word	0x0800c8dd
 800c874:	0800c8dd 	.word	0x0800c8dd
 800c878:	0800c8dd 	.word	0x0800c8dd
 800c87c:	0800c8dd 	.word	0x0800c8dd
 800c880:	0800c8dd 	.word	0x0800c8dd
 800c884:	0800c8dd 	.word	0x0800c8dd
 800c888:	0800c8cd 	.word	0x0800c8cd
 800c88c:	0800c8dd 	.word	0x0800c8dd
 800c890:	0800c8dd 	.word	0x0800c8dd
 800c894:	0800c8dd 	.word	0x0800c8dd
 800c898:	0800c8dd 	.word	0x0800c8dd
 800c89c:	0800c8dd 	.word	0x0800c8dd
 800c8a0:	0800c8dd 	.word	0x0800c8dd
 800c8a4:	0800c8dd 	.word	0x0800c8dd
 800c8a8:	0800c8d5 	.word	0x0800c8d5
 800c8ac:	2301      	movs	r3, #1
 800c8ae:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c8b2:	e222      	b.n	800ccfa <UART_SetConfig+0x5a6>
 800c8b4:	2304      	movs	r3, #4
 800c8b6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c8ba:	e21e      	b.n	800ccfa <UART_SetConfig+0x5a6>
 800c8bc:	2308      	movs	r3, #8
 800c8be:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c8c2:	e21a      	b.n	800ccfa <UART_SetConfig+0x5a6>
 800c8c4:	2310      	movs	r3, #16
 800c8c6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c8ca:	e216      	b.n	800ccfa <UART_SetConfig+0x5a6>
 800c8cc:	2320      	movs	r3, #32
 800c8ce:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c8d2:	e212      	b.n	800ccfa <UART_SetConfig+0x5a6>
 800c8d4:	2340      	movs	r3, #64	; 0x40
 800c8d6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c8da:	e20e      	b.n	800ccfa <UART_SetConfig+0x5a6>
 800c8dc:	2380      	movs	r3, #128	; 0x80
 800c8de:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c8e2:	e20a      	b.n	800ccfa <UART_SetConfig+0x5a6>
 800c8e4:	697b      	ldr	r3, [r7, #20]
 800c8e6:	681b      	ldr	r3, [r3, #0]
 800c8e8:	4a69      	ldr	r2, [pc, #420]	; (800ca90 <UART_SetConfig+0x33c>)
 800c8ea:	4293      	cmp	r3, r2
 800c8ec:	d130      	bne.n	800c950 <UART_SetConfig+0x1fc>
 800c8ee:	4b67      	ldr	r3, [pc, #412]	; (800ca8c <UART_SetConfig+0x338>)
 800c8f0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c8f2:	f003 0307 	and.w	r3, r3, #7
 800c8f6:	2b05      	cmp	r3, #5
 800c8f8:	d826      	bhi.n	800c948 <UART_SetConfig+0x1f4>
 800c8fa:	a201      	add	r2, pc, #4	; (adr r2, 800c900 <UART_SetConfig+0x1ac>)
 800c8fc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c900:	0800c919 	.word	0x0800c919
 800c904:	0800c921 	.word	0x0800c921
 800c908:	0800c929 	.word	0x0800c929
 800c90c:	0800c931 	.word	0x0800c931
 800c910:	0800c939 	.word	0x0800c939
 800c914:	0800c941 	.word	0x0800c941
 800c918:	2300      	movs	r3, #0
 800c91a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c91e:	e1ec      	b.n	800ccfa <UART_SetConfig+0x5a6>
 800c920:	2304      	movs	r3, #4
 800c922:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c926:	e1e8      	b.n	800ccfa <UART_SetConfig+0x5a6>
 800c928:	2308      	movs	r3, #8
 800c92a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c92e:	e1e4      	b.n	800ccfa <UART_SetConfig+0x5a6>
 800c930:	2310      	movs	r3, #16
 800c932:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c936:	e1e0      	b.n	800ccfa <UART_SetConfig+0x5a6>
 800c938:	2320      	movs	r3, #32
 800c93a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c93e:	e1dc      	b.n	800ccfa <UART_SetConfig+0x5a6>
 800c940:	2340      	movs	r3, #64	; 0x40
 800c942:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c946:	e1d8      	b.n	800ccfa <UART_SetConfig+0x5a6>
 800c948:	2380      	movs	r3, #128	; 0x80
 800c94a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c94e:	e1d4      	b.n	800ccfa <UART_SetConfig+0x5a6>
 800c950:	697b      	ldr	r3, [r7, #20]
 800c952:	681b      	ldr	r3, [r3, #0]
 800c954:	4a4f      	ldr	r2, [pc, #316]	; (800ca94 <UART_SetConfig+0x340>)
 800c956:	4293      	cmp	r3, r2
 800c958:	d130      	bne.n	800c9bc <UART_SetConfig+0x268>
 800c95a:	4b4c      	ldr	r3, [pc, #304]	; (800ca8c <UART_SetConfig+0x338>)
 800c95c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c95e:	f003 0307 	and.w	r3, r3, #7
 800c962:	2b05      	cmp	r3, #5
 800c964:	d826      	bhi.n	800c9b4 <UART_SetConfig+0x260>
 800c966:	a201      	add	r2, pc, #4	; (adr r2, 800c96c <UART_SetConfig+0x218>)
 800c968:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c96c:	0800c985 	.word	0x0800c985
 800c970:	0800c98d 	.word	0x0800c98d
 800c974:	0800c995 	.word	0x0800c995
 800c978:	0800c99d 	.word	0x0800c99d
 800c97c:	0800c9a5 	.word	0x0800c9a5
 800c980:	0800c9ad 	.word	0x0800c9ad
 800c984:	2300      	movs	r3, #0
 800c986:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c98a:	e1b6      	b.n	800ccfa <UART_SetConfig+0x5a6>
 800c98c:	2304      	movs	r3, #4
 800c98e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c992:	e1b2      	b.n	800ccfa <UART_SetConfig+0x5a6>
 800c994:	2308      	movs	r3, #8
 800c996:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c99a:	e1ae      	b.n	800ccfa <UART_SetConfig+0x5a6>
 800c99c:	2310      	movs	r3, #16
 800c99e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c9a2:	e1aa      	b.n	800ccfa <UART_SetConfig+0x5a6>
 800c9a4:	2320      	movs	r3, #32
 800c9a6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c9aa:	e1a6      	b.n	800ccfa <UART_SetConfig+0x5a6>
 800c9ac:	2340      	movs	r3, #64	; 0x40
 800c9ae:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c9b2:	e1a2      	b.n	800ccfa <UART_SetConfig+0x5a6>
 800c9b4:	2380      	movs	r3, #128	; 0x80
 800c9b6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c9ba:	e19e      	b.n	800ccfa <UART_SetConfig+0x5a6>
 800c9bc:	697b      	ldr	r3, [r7, #20]
 800c9be:	681b      	ldr	r3, [r3, #0]
 800c9c0:	4a35      	ldr	r2, [pc, #212]	; (800ca98 <UART_SetConfig+0x344>)
 800c9c2:	4293      	cmp	r3, r2
 800c9c4:	d130      	bne.n	800ca28 <UART_SetConfig+0x2d4>
 800c9c6:	4b31      	ldr	r3, [pc, #196]	; (800ca8c <UART_SetConfig+0x338>)
 800c9c8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c9ca:	f003 0307 	and.w	r3, r3, #7
 800c9ce:	2b05      	cmp	r3, #5
 800c9d0:	d826      	bhi.n	800ca20 <UART_SetConfig+0x2cc>
 800c9d2:	a201      	add	r2, pc, #4	; (adr r2, 800c9d8 <UART_SetConfig+0x284>)
 800c9d4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c9d8:	0800c9f1 	.word	0x0800c9f1
 800c9dc:	0800c9f9 	.word	0x0800c9f9
 800c9e0:	0800ca01 	.word	0x0800ca01
 800c9e4:	0800ca09 	.word	0x0800ca09
 800c9e8:	0800ca11 	.word	0x0800ca11
 800c9ec:	0800ca19 	.word	0x0800ca19
 800c9f0:	2300      	movs	r3, #0
 800c9f2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c9f6:	e180      	b.n	800ccfa <UART_SetConfig+0x5a6>
 800c9f8:	2304      	movs	r3, #4
 800c9fa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c9fe:	e17c      	b.n	800ccfa <UART_SetConfig+0x5a6>
 800ca00:	2308      	movs	r3, #8
 800ca02:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ca06:	e178      	b.n	800ccfa <UART_SetConfig+0x5a6>
 800ca08:	2310      	movs	r3, #16
 800ca0a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ca0e:	e174      	b.n	800ccfa <UART_SetConfig+0x5a6>
 800ca10:	2320      	movs	r3, #32
 800ca12:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ca16:	e170      	b.n	800ccfa <UART_SetConfig+0x5a6>
 800ca18:	2340      	movs	r3, #64	; 0x40
 800ca1a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ca1e:	e16c      	b.n	800ccfa <UART_SetConfig+0x5a6>
 800ca20:	2380      	movs	r3, #128	; 0x80
 800ca22:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ca26:	e168      	b.n	800ccfa <UART_SetConfig+0x5a6>
 800ca28:	697b      	ldr	r3, [r7, #20]
 800ca2a:	681b      	ldr	r3, [r3, #0]
 800ca2c:	4a1b      	ldr	r2, [pc, #108]	; (800ca9c <UART_SetConfig+0x348>)
 800ca2e:	4293      	cmp	r3, r2
 800ca30:	d142      	bne.n	800cab8 <UART_SetConfig+0x364>
 800ca32:	4b16      	ldr	r3, [pc, #88]	; (800ca8c <UART_SetConfig+0x338>)
 800ca34:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ca36:	f003 0307 	and.w	r3, r3, #7
 800ca3a:	2b05      	cmp	r3, #5
 800ca3c:	d838      	bhi.n	800cab0 <UART_SetConfig+0x35c>
 800ca3e:	a201      	add	r2, pc, #4	; (adr r2, 800ca44 <UART_SetConfig+0x2f0>)
 800ca40:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ca44:	0800ca5d 	.word	0x0800ca5d
 800ca48:	0800ca65 	.word	0x0800ca65
 800ca4c:	0800ca6d 	.word	0x0800ca6d
 800ca50:	0800ca75 	.word	0x0800ca75
 800ca54:	0800caa1 	.word	0x0800caa1
 800ca58:	0800caa9 	.word	0x0800caa9
 800ca5c:	2300      	movs	r3, #0
 800ca5e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ca62:	e14a      	b.n	800ccfa <UART_SetConfig+0x5a6>
 800ca64:	2304      	movs	r3, #4
 800ca66:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ca6a:	e146      	b.n	800ccfa <UART_SetConfig+0x5a6>
 800ca6c:	2308      	movs	r3, #8
 800ca6e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ca72:	e142      	b.n	800ccfa <UART_SetConfig+0x5a6>
 800ca74:	2310      	movs	r3, #16
 800ca76:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ca7a:	e13e      	b.n	800ccfa <UART_SetConfig+0x5a6>
 800ca7c:	cfff69f3 	.word	0xcfff69f3
 800ca80:	58000c00 	.word	0x58000c00
 800ca84:	11fff4ff 	.word	0x11fff4ff
 800ca88:	40011000 	.word	0x40011000
 800ca8c:	58024400 	.word	0x58024400
 800ca90:	40004400 	.word	0x40004400
 800ca94:	40004800 	.word	0x40004800
 800ca98:	40004c00 	.word	0x40004c00
 800ca9c:	40005000 	.word	0x40005000
 800caa0:	2320      	movs	r3, #32
 800caa2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800caa6:	e128      	b.n	800ccfa <UART_SetConfig+0x5a6>
 800caa8:	2340      	movs	r3, #64	; 0x40
 800caaa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800caae:	e124      	b.n	800ccfa <UART_SetConfig+0x5a6>
 800cab0:	2380      	movs	r3, #128	; 0x80
 800cab2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800cab6:	e120      	b.n	800ccfa <UART_SetConfig+0x5a6>
 800cab8:	697b      	ldr	r3, [r7, #20]
 800caba:	681b      	ldr	r3, [r3, #0]
 800cabc:	4acb      	ldr	r2, [pc, #812]	; (800cdec <UART_SetConfig+0x698>)
 800cabe:	4293      	cmp	r3, r2
 800cac0:	d176      	bne.n	800cbb0 <UART_SetConfig+0x45c>
 800cac2:	4bcb      	ldr	r3, [pc, #812]	; (800cdf0 <UART_SetConfig+0x69c>)
 800cac4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800cac6:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800caca:	2b28      	cmp	r3, #40	; 0x28
 800cacc:	d86c      	bhi.n	800cba8 <UART_SetConfig+0x454>
 800cace:	a201      	add	r2, pc, #4	; (adr r2, 800cad4 <UART_SetConfig+0x380>)
 800cad0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cad4:	0800cb79 	.word	0x0800cb79
 800cad8:	0800cba9 	.word	0x0800cba9
 800cadc:	0800cba9 	.word	0x0800cba9
 800cae0:	0800cba9 	.word	0x0800cba9
 800cae4:	0800cba9 	.word	0x0800cba9
 800cae8:	0800cba9 	.word	0x0800cba9
 800caec:	0800cba9 	.word	0x0800cba9
 800caf0:	0800cba9 	.word	0x0800cba9
 800caf4:	0800cb81 	.word	0x0800cb81
 800caf8:	0800cba9 	.word	0x0800cba9
 800cafc:	0800cba9 	.word	0x0800cba9
 800cb00:	0800cba9 	.word	0x0800cba9
 800cb04:	0800cba9 	.word	0x0800cba9
 800cb08:	0800cba9 	.word	0x0800cba9
 800cb0c:	0800cba9 	.word	0x0800cba9
 800cb10:	0800cba9 	.word	0x0800cba9
 800cb14:	0800cb89 	.word	0x0800cb89
 800cb18:	0800cba9 	.word	0x0800cba9
 800cb1c:	0800cba9 	.word	0x0800cba9
 800cb20:	0800cba9 	.word	0x0800cba9
 800cb24:	0800cba9 	.word	0x0800cba9
 800cb28:	0800cba9 	.word	0x0800cba9
 800cb2c:	0800cba9 	.word	0x0800cba9
 800cb30:	0800cba9 	.word	0x0800cba9
 800cb34:	0800cb91 	.word	0x0800cb91
 800cb38:	0800cba9 	.word	0x0800cba9
 800cb3c:	0800cba9 	.word	0x0800cba9
 800cb40:	0800cba9 	.word	0x0800cba9
 800cb44:	0800cba9 	.word	0x0800cba9
 800cb48:	0800cba9 	.word	0x0800cba9
 800cb4c:	0800cba9 	.word	0x0800cba9
 800cb50:	0800cba9 	.word	0x0800cba9
 800cb54:	0800cb99 	.word	0x0800cb99
 800cb58:	0800cba9 	.word	0x0800cba9
 800cb5c:	0800cba9 	.word	0x0800cba9
 800cb60:	0800cba9 	.word	0x0800cba9
 800cb64:	0800cba9 	.word	0x0800cba9
 800cb68:	0800cba9 	.word	0x0800cba9
 800cb6c:	0800cba9 	.word	0x0800cba9
 800cb70:	0800cba9 	.word	0x0800cba9
 800cb74:	0800cba1 	.word	0x0800cba1
 800cb78:	2301      	movs	r3, #1
 800cb7a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800cb7e:	e0bc      	b.n	800ccfa <UART_SetConfig+0x5a6>
 800cb80:	2304      	movs	r3, #4
 800cb82:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800cb86:	e0b8      	b.n	800ccfa <UART_SetConfig+0x5a6>
 800cb88:	2308      	movs	r3, #8
 800cb8a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800cb8e:	e0b4      	b.n	800ccfa <UART_SetConfig+0x5a6>
 800cb90:	2310      	movs	r3, #16
 800cb92:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800cb96:	e0b0      	b.n	800ccfa <UART_SetConfig+0x5a6>
 800cb98:	2320      	movs	r3, #32
 800cb9a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800cb9e:	e0ac      	b.n	800ccfa <UART_SetConfig+0x5a6>
 800cba0:	2340      	movs	r3, #64	; 0x40
 800cba2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800cba6:	e0a8      	b.n	800ccfa <UART_SetConfig+0x5a6>
 800cba8:	2380      	movs	r3, #128	; 0x80
 800cbaa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800cbae:	e0a4      	b.n	800ccfa <UART_SetConfig+0x5a6>
 800cbb0:	697b      	ldr	r3, [r7, #20]
 800cbb2:	681b      	ldr	r3, [r3, #0]
 800cbb4:	4a8f      	ldr	r2, [pc, #572]	; (800cdf4 <UART_SetConfig+0x6a0>)
 800cbb6:	4293      	cmp	r3, r2
 800cbb8:	d130      	bne.n	800cc1c <UART_SetConfig+0x4c8>
 800cbba:	4b8d      	ldr	r3, [pc, #564]	; (800cdf0 <UART_SetConfig+0x69c>)
 800cbbc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800cbbe:	f003 0307 	and.w	r3, r3, #7
 800cbc2:	2b05      	cmp	r3, #5
 800cbc4:	d826      	bhi.n	800cc14 <UART_SetConfig+0x4c0>
 800cbc6:	a201      	add	r2, pc, #4	; (adr r2, 800cbcc <UART_SetConfig+0x478>)
 800cbc8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cbcc:	0800cbe5 	.word	0x0800cbe5
 800cbd0:	0800cbed 	.word	0x0800cbed
 800cbd4:	0800cbf5 	.word	0x0800cbf5
 800cbd8:	0800cbfd 	.word	0x0800cbfd
 800cbdc:	0800cc05 	.word	0x0800cc05
 800cbe0:	0800cc0d 	.word	0x0800cc0d
 800cbe4:	2300      	movs	r3, #0
 800cbe6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800cbea:	e086      	b.n	800ccfa <UART_SetConfig+0x5a6>
 800cbec:	2304      	movs	r3, #4
 800cbee:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800cbf2:	e082      	b.n	800ccfa <UART_SetConfig+0x5a6>
 800cbf4:	2308      	movs	r3, #8
 800cbf6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800cbfa:	e07e      	b.n	800ccfa <UART_SetConfig+0x5a6>
 800cbfc:	2310      	movs	r3, #16
 800cbfe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800cc02:	e07a      	b.n	800ccfa <UART_SetConfig+0x5a6>
 800cc04:	2320      	movs	r3, #32
 800cc06:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800cc0a:	e076      	b.n	800ccfa <UART_SetConfig+0x5a6>
 800cc0c:	2340      	movs	r3, #64	; 0x40
 800cc0e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800cc12:	e072      	b.n	800ccfa <UART_SetConfig+0x5a6>
 800cc14:	2380      	movs	r3, #128	; 0x80
 800cc16:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800cc1a:	e06e      	b.n	800ccfa <UART_SetConfig+0x5a6>
 800cc1c:	697b      	ldr	r3, [r7, #20]
 800cc1e:	681b      	ldr	r3, [r3, #0]
 800cc20:	4a75      	ldr	r2, [pc, #468]	; (800cdf8 <UART_SetConfig+0x6a4>)
 800cc22:	4293      	cmp	r3, r2
 800cc24:	d130      	bne.n	800cc88 <UART_SetConfig+0x534>
 800cc26:	4b72      	ldr	r3, [pc, #456]	; (800cdf0 <UART_SetConfig+0x69c>)
 800cc28:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800cc2a:	f003 0307 	and.w	r3, r3, #7
 800cc2e:	2b05      	cmp	r3, #5
 800cc30:	d826      	bhi.n	800cc80 <UART_SetConfig+0x52c>
 800cc32:	a201      	add	r2, pc, #4	; (adr r2, 800cc38 <UART_SetConfig+0x4e4>)
 800cc34:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cc38:	0800cc51 	.word	0x0800cc51
 800cc3c:	0800cc59 	.word	0x0800cc59
 800cc40:	0800cc61 	.word	0x0800cc61
 800cc44:	0800cc69 	.word	0x0800cc69
 800cc48:	0800cc71 	.word	0x0800cc71
 800cc4c:	0800cc79 	.word	0x0800cc79
 800cc50:	2300      	movs	r3, #0
 800cc52:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800cc56:	e050      	b.n	800ccfa <UART_SetConfig+0x5a6>
 800cc58:	2304      	movs	r3, #4
 800cc5a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800cc5e:	e04c      	b.n	800ccfa <UART_SetConfig+0x5a6>
 800cc60:	2308      	movs	r3, #8
 800cc62:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800cc66:	e048      	b.n	800ccfa <UART_SetConfig+0x5a6>
 800cc68:	2310      	movs	r3, #16
 800cc6a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800cc6e:	e044      	b.n	800ccfa <UART_SetConfig+0x5a6>
 800cc70:	2320      	movs	r3, #32
 800cc72:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800cc76:	e040      	b.n	800ccfa <UART_SetConfig+0x5a6>
 800cc78:	2340      	movs	r3, #64	; 0x40
 800cc7a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800cc7e:	e03c      	b.n	800ccfa <UART_SetConfig+0x5a6>
 800cc80:	2380      	movs	r3, #128	; 0x80
 800cc82:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800cc86:	e038      	b.n	800ccfa <UART_SetConfig+0x5a6>
 800cc88:	697b      	ldr	r3, [r7, #20]
 800cc8a:	681b      	ldr	r3, [r3, #0]
 800cc8c:	4a5b      	ldr	r2, [pc, #364]	; (800cdfc <UART_SetConfig+0x6a8>)
 800cc8e:	4293      	cmp	r3, r2
 800cc90:	d130      	bne.n	800ccf4 <UART_SetConfig+0x5a0>
 800cc92:	4b57      	ldr	r3, [pc, #348]	; (800cdf0 <UART_SetConfig+0x69c>)
 800cc94:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800cc96:	f003 0307 	and.w	r3, r3, #7
 800cc9a:	2b05      	cmp	r3, #5
 800cc9c:	d826      	bhi.n	800ccec <UART_SetConfig+0x598>
 800cc9e:	a201      	add	r2, pc, #4	; (adr r2, 800cca4 <UART_SetConfig+0x550>)
 800cca0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cca4:	0800ccbd 	.word	0x0800ccbd
 800cca8:	0800ccc5 	.word	0x0800ccc5
 800ccac:	0800cccd 	.word	0x0800cccd
 800ccb0:	0800ccd5 	.word	0x0800ccd5
 800ccb4:	0800ccdd 	.word	0x0800ccdd
 800ccb8:	0800cce5 	.word	0x0800cce5
 800ccbc:	2302      	movs	r3, #2
 800ccbe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ccc2:	e01a      	b.n	800ccfa <UART_SetConfig+0x5a6>
 800ccc4:	2304      	movs	r3, #4
 800ccc6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ccca:	e016      	b.n	800ccfa <UART_SetConfig+0x5a6>
 800cccc:	2308      	movs	r3, #8
 800ccce:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ccd2:	e012      	b.n	800ccfa <UART_SetConfig+0x5a6>
 800ccd4:	2310      	movs	r3, #16
 800ccd6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ccda:	e00e      	b.n	800ccfa <UART_SetConfig+0x5a6>
 800ccdc:	2320      	movs	r3, #32
 800ccde:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800cce2:	e00a      	b.n	800ccfa <UART_SetConfig+0x5a6>
 800cce4:	2340      	movs	r3, #64	; 0x40
 800cce6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ccea:	e006      	b.n	800ccfa <UART_SetConfig+0x5a6>
 800ccec:	2380      	movs	r3, #128	; 0x80
 800ccee:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ccf2:	e002      	b.n	800ccfa <UART_SetConfig+0x5a6>
 800ccf4:	2380      	movs	r3, #128	; 0x80
 800ccf6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800ccfa:	697b      	ldr	r3, [r7, #20]
 800ccfc:	681b      	ldr	r3, [r3, #0]
 800ccfe:	4a3f      	ldr	r2, [pc, #252]	; (800cdfc <UART_SetConfig+0x6a8>)
 800cd00:	4293      	cmp	r3, r2
 800cd02:	f040 80f8 	bne.w	800cef6 <UART_SetConfig+0x7a2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800cd06:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800cd0a:	2b20      	cmp	r3, #32
 800cd0c:	dc46      	bgt.n	800cd9c <UART_SetConfig+0x648>
 800cd0e:	2b02      	cmp	r3, #2
 800cd10:	f2c0 8082 	blt.w	800ce18 <UART_SetConfig+0x6c4>
 800cd14:	3b02      	subs	r3, #2
 800cd16:	2b1e      	cmp	r3, #30
 800cd18:	d87e      	bhi.n	800ce18 <UART_SetConfig+0x6c4>
 800cd1a:	a201      	add	r2, pc, #4	; (adr r2, 800cd20 <UART_SetConfig+0x5cc>)
 800cd1c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cd20:	0800cda3 	.word	0x0800cda3
 800cd24:	0800ce19 	.word	0x0800ce19
 800cd28:	0800cdab 	.word	0x0800cdab
 800cd2c:	0800ce19 	.word	0x0800ce19
 800cd30:	0800ce19 	.word	0x0800ce19
 800cd34:	0800ce19 	.word	0x0800ce19
 800cd38:	0800cdbb 	.word	0x0800cdbb
 800cd3c:	0800ce19 	.word	0x0800ce19
 800cd40:	0800ce19 	.word	0x0800ce19
 800cd44:	0800ce19 	.word	0x0800ce19
 800cd48:	0800ce19 	.word	0x0800ce19
 800cd4c:	0800ce19 	.word	0x0800ce19
 800cd50:	0800ce19 	.word	0x0800ce19
 800cd54:	0800ce19 	.word	0x0800ce19
 800cd58:	0800cdcb 	.word	0x0800cdcb
 800cd5c:	0800ce19 	.word	0x0800ce19
 800cd60:	0800ce19 	.word	0x0800ce19
 800cd64:	0800ce19 	.word	0x0800ce19
 800cd68:	0800ce19 	.word	0x0800ce19
 800cd6c:	0800ce19 	.word	0x0800ce19
 800cd70:	0800ce19 	.word	0x0800ce19
 800cd74:	0800ce19 	.word	0x0800ce19
 800cd78:	0800ce19 	.word	0x0800ce19
 800cd7c:	0800ce19 	.word	0x0800ce19
 800cd80:	0800ce19 	.word	0x0800ce19
 800cd84:	0800ce19 	.word	0x0800ce19
 800cd88:	0800ce19 	.word	0x0800ce19
 800cd8c:	0800ce19 	.word	0x0800ce19
 800cd90:	0800ce19 	.word	0x0800ce19
 800cd94:	0800ce19 	.word	0x0800ce19
 800cd98:	0800ce0b 	.word	0x0800ce0b
 800cd9c:	2b40      	cmp	r3, #64	; 0x40
 800cd9e:	d037      	beq.n	800ce10 <UART_SetConfig+0x6bc>
 800cda0:	e03a      	b.n	800ce18 <UART_SetConfig+0x6c4>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 800cda2:	f7fc fb81 	bl	80094a8 <HAL_RCCEx_GetD3PCLK1Freq>
 800cda6:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800cda8:	e03c      	b.n	800ce24 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800cdaa:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800cdae:	4618      	mov	r0, r3
 800cdb0:	f7fc fb90 	bl	80094d4 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800cdb4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cdb6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800cdb8:	e034      	b.n	800ce24 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800cdba:	f107 0318 	add.w	r3, r7, #24
 800cdbe:	4618      	mov	r0, r3
 800cdc0:	f7fc fcdc 	bl	800977c <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800cdc4:	69fb      	ldr	r3, [r7, #28]
 800cdc6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800cdc8:	e02c      	b.n	800ce24 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800cdca:	4b09      	ldr	r3, [pc, #36]	; (800cdf0 <UART_SetConfig+0x69c>)
 800cdcc:	681b      	ldr	r3, [r3, #0]
 800cdce:	f003 0320 	and.w	r3, r3, #32
 800cdd2:	2b00      	cmp	r3, #0
 800cdd4:	d016      	beq.n	800ce04 <UART_SetConfig+0x6b0>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800cdd6:	4b06      	ldr	r3, [pc, #24]	; (800cdf0 <UART_SetConfig+0x69c>)
 800cdd8:	681b      	ldr	r3, [r3, #0]
 800cdda:	08db      	lsrs	r3, r3, #3
 800cddc:	f003 0303 	and.w	r3, r3, #3
 800cde0:	4a07      	ldr	r2, [pc, #28]	; (800ce00 <UART_SetConfig+0x6ac>)
 800cde2:	fa22 f303 	lsr.w	r3, r2, r3
 800cde6:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800cde8:	e01c      	b.n	800ce24 <UART_SetConfig+0x6d0>
 800cdea:	bf00      	nop
 800cdec:	40011400 	.word	0x40011400
 800cdf0:	58024400 	.word	0x58024400
 800cdf4:	40007800 	.word	0x40007800
 800cdf8:	40007c00 	.word	0x40007c00
 800cdfc:	58000c00 	.word	0x58000c00
 800ce00:	03d09000 	.word	0x03d09000
          pclk = (uint32_t) HSI_VALUE;
 800ce04:	4b9e      	ldr	r3, [pc, #632]	; (800d080 <UART_SetConfig+0x92c>)
 800ce06:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800ce08:	e00c      	b.n	800ce24 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800ce0a:	4b9e      	ldr	r3, [pc, #632]	; (800d084 <UART_SetConfig+0x930>)
 800ce0c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800ce0e:	e009      	b.n	800ce24 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800ce10:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800ce14:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800ce16:	e005      	b.n	800ce24 <UART_SetConfig+0x6d0>
      default:
        pclk = 0U;
 800ce18:	2300      	movs	r3, #0
 800ce1a:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 800ce1c:	2301      	movs	r3, #1
 800ce1e:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 800ce22:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800ce24:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ce26:	2b00      	cmp	r3, #0
 800ce28:	f000 81e0 	beq.w	800d1ec <UART_SetConfig+0xa98>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800ce2c:	697b      	ldr	r3, [r7, #20]
 800ce2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ce30:	4a95      	ldr	r2, [pc, #596]	; (800d088 <UART_SetConfig+0x934>)
 800ce32:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800ce36:	461a      	mov	r2, r3
 800ce38:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ce3a:	fbb3 f3f2 	udiv	r3, r3, r2
 800ce3e:	633b      	str	r3, [r7, #48]	; 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800ce40:	697b      	ldr	r3, [r7, #20]
 800ce42:	685a      	ldr	r2, [r3, #4]
 800ce44:	4613      	mov	r3, r2
 800ce46:	005b      	lsls	r3, r3, #1
 800ce48:	4413      	add	r3, r2
 800ce4a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800ce4c:	429a      	cmp	r2, r3
 800ce4e:	d305      	bcc.n	800ce5c <UART_SetConfig+0x708>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800ce50:	697b      	ldr	r3, [r7, #20]
 800ce52:	685b      	ldr	r3, [r3, #4]
 800ce54:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800ce56:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800ce58:	429a      	cmp	r2, r3
 800ce5a:	d903      	bls.n	800ce64 <UART_SetConfig+0x710>
      {
        ret = HAL_ERROR;
 800ce5c:	2301      	movs	r3, #1
 800ce5e:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 800ce62:	e1c3      	b.n	800d1ec <UART_SetConfig+0xa98>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800ce64:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ce66:	2200      	movs	r2, #0
 800ce68:	60bb      	str	r3, [r7, #8]
 800ce6a:	60fa      	str	r2, [r7, #12]
 800ce6c:	697b      	ldr	r3, [r7, #20]
 800ce6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ce70:	4a85      	ldr	r2, [pc, #532]	; (800d088 <UART_SetConfig+0x934>)
 800ce72:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800ce76:	b29b      	uxth	r3, r3
 800ce78:	2200      	movs	r2, #0
 800ce7a:	603b      	str	r3, [r7, #0]
 800ce7c:	607a      	str	r2, [r7, #4]
 800ce7e:	e9d7 2300 	ldrd	r2, r3, [r7]
 800ce82:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800ce86:	f7f3 fa83 	bl	8000390 <__aeabi_uldivmod>
 800ce8a:	4602      	mov	r2, r0
 800ce8c:	460b      	mov	r3, r1
 800ce8e:	4610      	mov	r0, r2
 800ce90:	4619      	mov	r1, r3
 800ce92:	f04f 0200 	mov.w	r2, #0
 800ce96:	f04f 0300 	mov.w	r3, #0
 800ce9a:	020b      	lsls	r3, r1, #8
 800ce9c:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800cea0:	0202      	lsls	r2, r0, #8
 800cea2:	6979      	ldr	r1, [r7, #20]
 800cea4:	6849      	ldr	r1, [r1, #4]
 800cea6:	0849      	lsrs	r1, r1, #1
 800cea8:	2000      	movs	r0, #0
 800ceaa:	460c      	mov	r4, r1
 800ceac:	4605      	mov	r5, r0
 800ceae:	eb12 0804 	adds.w	r8, r2, r4
 800ceb2:	eb43 0905 	adc.w	r9, r3, r5
 800ceb6:	697b      	ldr	r3, [r7, #20]
 800ceb8:	685b      	ldr	r3, [r3, #4]
 800ceba:	2200      	movs	r2, #0
 800cebc:	469a      	mov	sl, r3
 800cebe:	4693      	mov	fp, r2
 800cec0:	4652      	mov	r2, sl
 800cec2:	465b      	mov	r3, fp
 800cec4:	4640      	mov	r0, r8
 800cec6:	4649      	mov	r1, r9
 800cec8:	f7f3 fa62 	bl	8000390 <__aeabi_uldivmod>
 800cecc:	4602      	mov	r2, r0
 800cece:	460b      	mov	r3, r1
 800ced0:	4613      	mov	r3, r2
 800ced2:	63bb      	str	r3, [r7, #56]	; 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800ced4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ced6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800ceda:	d308      	bcc.n	800ceee <UART_SetConfig+0x79a>
 800cedc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cede:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800cee2:	d204      	bcs.n	800ceee <UART_SetConfig+0x79a>
        {
          huart->Instance->BRR = usartdiv;
 800cee4:	697b      	ldr	r3, [r7, #20]
 800cee6:	681b      	ldr	r3, [r3, #0]
 800cee8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800ceea:	60da      	str	r2, [r3, #12]
 800ceec:	e17e      	b.n	800d1ec <UART_SetConfig+0xa98>
        }
        else
        {
          ret = HAL_ERROR;
 800ceee:	2301      	movs	r3, #1
 800cef0:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 800cef4:	e17a      	b.n	800d1ec <UART_SetConfig+0xa98>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800cef6:	697b      	ldr	r3, [r7, #20]
 800cef8:	69db      	ldr	r3, [r3, #28]
 800cefa:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800cefe:	f040 80c7 	bne.w	800d090 <UART_SetConfig+0x93c>
  {
    switch (clocksource)
 800cf02:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800cf06:	2b20      	cmp	r3, #32
 800cf08:	dc48      	bgt.n	800cf9c <UART_SetConfig+0x848>
 800cf0a:	2b00      	cmp	r3, #0
 800cf0c:	db7b      	blt.n	800d006 <UART_SetConfig+0x8b2>
 800cf0e:	2b20      	cmp	r3, #32
 800cf10:	d879      	bhi.n	800d006 <UART_SetConfig+0x8b2>
 800cf12:	a201      	add	r2, pc, #4	; (adr r2, 800cf18 <UART_SetConfig+0x7c4>)
 800cf14:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cf18:	0800cfa3 	.word	0x0800cfa3
 800cf1c:	0800cfab 	.word	0x0800cfab
 800cf20:	0800d007 	.word	0x0800d007
 800cf24:	0800d007 	.word	0x0800d007
 800cf28:	0800cfb3 	.word	0x0800cfb3
 800cf2c:	0800d007 	.word	0x0800d007
 800cf30:	0800d007 	.word	0x0800d007
 800cf34:	0800d007 	.word	0x0800d007
 800cf38:	0800cfc3 	.word	0x0800cfc3
 800cf3c:	0800d007 	.word	0x0800d007
 800cf40:	0800d007 	.word	0x0800d007
 800cf44:	0800d007 	.word	0x0800d007
 800cf48:	0800d007 	.word	0x0800d007
 800cf4c:	0800d007 	.word	0x0800d007
 800cf50:	0800d007 	.word	0x0800d007
 800cf54:	0800d007 	.word	0x0800d007
 800cf58:	0800cfd3 	.word	0x0800cfd3
 800cf5c:	0800d007 	.word	0x0800d007
 800cf60:	0800d007 	.word	0x0800d007
 800cf64:	0800d007 	.word	0x0800d007
 800cf68:	0800d007 	.word	0x0800d007
 800cf6c:	0800d007 	.word	0x0800d007
 800cf70:	0800d007 	.word	0x0800d007
 800cf74:	0800d007 	.word	0x0800d007
 800cf78:	0800d007 	.word	0x0800d007
 800cf7c:	0800d007 	.word	0x0800d007
 800cf80:	0800d007 	.word	0x0800d007
 800cf84:	0800d007 	.word	0x0800d007
 800cf88:	0800d007 	.word	0x0800d007
 800cf8c:	0800d007 	.word	0x0800d007
 800cf90:	0800d007 	.word	0x0800d007
 800cf94:	0800d007 	.word	0x0800d007
 800cf98:	0800cff9 	.word	0x0800cff9
 800cf9c:	2b40      	cmp	r3, #64	; 0x40
 800cf9e:	d02e      	beq.n	800cffe <UART_SetConfig+0x8aa>
 800cfa0:	e031      	b.n	800d006 <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800cfa2:	f7fa fe3d 	bl	8007c20 <HAL_RCC_GetPCLK1Freq>
 800cfa6:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800cfa8:	e033      	b.n	800d012 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800cfaa:	f7fa fe4f 	bl	8007c4c <HAL_RCC_GetPCLK2Freq>
 800cfae:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800cfb0:	e02f      	b.n	800d012 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800cfb2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800cfb6:	4618      	mov	r0, r3
 800cfb8:	f7fc fa8c 	bl	80094d4 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800cfbc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cfbe:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800cfc0:	e027      	b.n	800d012 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800cfc2:	f107 0318 	add.w	r3, r7, #24
 800cfc6:	4618      	mov	r0, r3
 800cfc8:	f7fc fbd8 	bl	800977c <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800cfcc:	69fb      	ldr	r3, [r7, #28]
 800cfce:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800cfd0:	e01f      	b.n	800d012 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800cfd2:	4b2e      	ldr	r3, [pc, #184]	; (800d08c <UART_SetConfig+0x938>)
 800cfd4:	681b      	ldr	r3, [r3, #0]
 800cfd6:	f003 0320 	and.w	r3, r3, #32
 800cfda:	2b00      	cmp	r3, #0
 800cfdc:	d009      	beq.n	800cff2 <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800cfde:	4b2b      	ldr	r3, [pc, #172]	; (800d08c <UART_SetConfig+0x938>)
 800cfe0:	681b      	ldr	r3, [r3, #0]
 800cfe2:	08db      	lsrs	r3, r3, #3
 800cfe4:	f003 0303 	and.w	r3, r3, #3
 800cfe8:	4a25      	ldr	r2, [pc, #148]	; (800d080 <UART_SetConfig+0x92c>)
 800cfea:	fa22 f303 	lsr.w	r3, r2, r3
 800cfee:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800cff0:	e00f      	b.n	800d012 <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 800cff2:	4b23      	ldr	r3, [pc, #140]	; (800d080 <UART_SetConfig+0x92c>)
 800cff4:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800cff6:	e00c      	b.n	800d012 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800cff8:	4b22      	ldr	r3, [pc, #136]	; (800d084 <UART_SetConfig+0x930>)
 800cffa:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800cffc:	e009      	b.n	800d012 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800cffe:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800d002:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800d004:	e005      	b.n	800d012 <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 800d006:	2300      	movs	r3, #0
 800d008:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 800d00a:	2301      	movs	r3, #1
 800d00c:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 800d010:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800d012:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d014:	2b00      	cmp	r3, #0
 800d016:	f000 80e9 	beq.w	800d1ec <UART_SetConfig+0xa98>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800d01a:	697b      	ldr	r3, [r7, #20]
 800d01c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d01e:	4a1a      	ldr	r2, [pc, #104]	; (800d088 <UART_SetConfig+0x934>)
 800d020:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800d024:	461a      	mov	r2, r3
 800d026:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d028:	fbb3 f3f2 	udiv	r3, r3, r2
 800d02c:	005a      	lsls	r2, r3, #1
 800d02e:	697b      	ldr	r3, [r7, #20]
 800d030:	685b      	ldr	r3, [r3, #4]
 800d032:	085b      	lsrs	r3, r3, #1
 800d034:	441a      	add	r2, r3
 800d036:	697b      	ldr	r3, [r7, #20]
 800d038:	685b      	ldr	r3, [r3, #4]
 800d03a:	fbb2 f3f3 	udiv	r3, r2, r3
 800d03e:	b29b      	uxth	r3, r3
 800d040:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800d042:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d044:	2b0f      	cmp	r3, #15
 800d046:	d916      	bls.n	800d076 <UART_SetConfig+0x922>
 800d048:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d04a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800d04e:	d212      	bcs.n	800d076 <UART_SetConfig+0x922>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800d050:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d052:	b29b      	uxth	r3, r3
 800d054:	f023 030f 	bic.w	r3, r3, #15
 800d058:	86fb      	strh	r3, [r7, #54]	; 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800d05a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d05c:	085b      	lsrs	r3, r3, #1
 800d05e:	b29b      	uxth	r3, r3
 800d060:	f003 0307 	and.w	r3, r3, #7
 800d064:	b29a      	uxth	r2, r3
 800d066:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800d068:	4313      	orrs	r3, r2
 800d06a:	86fb      	strh	r3, [r7, #54]	; 0x36
        huart->Instance->BRR = brrtemp;
 800d06c:	697b      	ldr	r3, [r7, #20]
 800d06e:	681b      	ldr	r3, [r3, #0]
 800d070:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 800d072:	60da      	str	r2, [r3, #12]
 800d074:	e0ba      	b.n	800d1ec <UART_SetConfig+0xa98>
      }
      else
      {
        ret = HAL_ERROR;
 800d076:	2301      	movs	r3, #1
 800d078:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 800d07c:	e0b6      	b.n	800d1ec <UART_SetConfig+0xa98>
 800d07e:	bf00      	nop
 800d080:	03d09000 	.word	0x03d09000
 800d084:	003d0900 	.word	0x003d0900
 800d088:	080167a0 	.word	0x080167a0
 800d08c:	58024400 	.word	0x58024400
      }
    }
  }
  else
  {
    switch (clocksource)
 800d090:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800d094:	2b20      	cmp	r3, #32
 800d096:	dc49      	bgt.n	800d12c <UART_SetConfig+0x9d8>
 800d098:	2b00      	cmp	r3, #0
 800d09a:	db7c      	blt.n	800d196 <UART_SetConfig+0xa42>
 800d09c:	2b20      	cmp	r3, #32
 800d09e:	d87a      	bhi.n	800d196 <UART_SetConfig+0xa42>
 800d0a0:	a201      	add	r2, pc, #4	; (adr r2, 800d0a8 <UART_SetConfig+0x954>)
 800d0a2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d0a6:	bf00      	nop
 800d0a8:	0800d133 	.word	0x0800d133
 800d0ac:	0800d13b 	.word	0x0800d13b
 800d0b0:	0800d197 	.word	0x0800d197
 800d0b4:	0800d197 	.word	0x0800d197
 800d0b8:	0800d143 	.word	0x0800d143
 800d0bc:	0800d197 	.word	0x0800d197
 800d0c0:	0800d197 	.word	0x0800d197
 800d0c4:	0800d197 	.word	0x0800d197
 800d0c8:	0800d153 	.word	0x0800d153
 800d0cc:	0800d197 	.word	0x0800d197
 800d0d0:	0800d197 	.word	0x0800d197
 800d0d4:	0800d197 	.word	0x0800d197
 800d0d8:	0800d197 	.word	0x0800d197
 800d0dc:	0800d197 	.word	0x0800d197
 800d0e0:	0800d197 	.word	0x0800d197
 800d0e4:	0800d197 	.word	0x0800d197
 800d0e8:	0800d163 	.word	0x0800d163
 800d0ec:	0800d197 	.word	0x0800d197
 800d0f0:	0800d197 	.word	0x0800d197
 800d0f4:	0800d197 	.word	0x0800d197
 800d0f8:	0800d197 	.word	0x0800d197
 800d0fc:	0800d197 	.word	0x0800d197
 800d100:	0800d197 	.word	0x0800d197
 800d104:	0800d197 	.word	0x0800d197
 800d108:	0800d197 	.word	0x0800d197
 800d10c:	0800d197 	.word	0x0800d197
 800d110:	0800d197 	.word	0x0800d197
 800d114:	0800d197 	.word	0x0800d197
 800d118:	0800d197 	.word	0x0800d197
 800d11c:	0800d197 	.word	0x0800d197
 800d120:	0800d197 	.word	0x0800d197
 800d124:	0800d197 	.word	0x0800d197
 800d128:	0800d189 	.word	0x0800d189
 800d12c:	2b40      	cmp	r3, #64	; 0x40
 800d12e:	d02e      	beq.n	800d18e <UART_SetConfig+0xa3a>
 800d130:	e031      	b.n	800d196 <UART_SetConfig+0xa42>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800d132:	f7fa fd75 	bl	8007c20 <HAL_RCC_GetPCLK1Freq>
 800d136:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800d138:	e033      	b.n	800d1a2 <UART_SetConfig+0xa4e>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800d13a:	f7fa fd87 	bl	8007c4c <HAL_RCC_GetPCLK2Freq>
 800d13e:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800d140:	e02f      	b.n	800d1a2 <UART_SetConfig+0xa4e>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800d142:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800d146:	4618      	mov	r0, r3
 800d148:	f7fc f9c4 	bl	80094d4 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800d14c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d14e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800d150:	e027      	b.n	800d1a2 <UART_SetConfig+0xa4e>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800d152:	f107 0318 	add.w	r3, r7, #24
 800d156:	4618      	mov	r0, r3
 800d158:	f7fc fb10 	bl	800977c <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800d15c:	69fb      	ldr	r3, [r7, #28]
 800d15e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800d160:	e01f      	b.n	800d1a2 <UART_SetConfig+0xa4e>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800d162:	4b2d      	ldr	r3, [pc, #180]	; (800d218 <UART_SetConfig+0xac4>)
 800d164:	681b      	ldr	r3, [r3, #0]
 800d166:	f003 0320 	and.w	r3, r3, #32
 800d16a:	2b00      	cmp	r3, #0
 800d16c:	d009      	beq.n	800d182 <UART_SetConfig+0xa2e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800d16e:	4b2a      	ldr	r3, [pc, #168]	; (800d218 <UART_SetConfig+0xac4>)
 800d170:	681b      	ldr	r3, [r3, #0]
 800d172:	08db      	lsrs	r3, r3, #3
 800d174:	f003 0303 	and.w	r3, r3, #3
 800d178:	4a28      	ldr	r2, [pc, #160]	; (800d21c <UART_SetConfig+0xac8>)
 800d17a:	fa22 f303 	lsr.w	r3, r2, r3
 800d17e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800d180:	e00f      	b.n	800d1a2 <UART_SetConfig+0xa4e>
          pclk = (uint32_t) HSI_VALUE;
 800d182:	4b26      	ldr	r3, [pc, #152]	; (800d21c <UART_SetConfig+0xac8>)
 800d184:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800d186:	e00c      	b.n	800d1a2 <UART_SetConfig+0xa4e>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800d188:	4b25      	ldr	r3, [pc, #148]	; (800d220 <UART_SetConfig+0xacc>)
 800d18a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800d18c:	e009      	b.n	800d1a2 <UART_SetConfig+0xa4e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800d18e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800d192:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800d194:	e005      	b.n	800d1a2 <UART_SetConfig+0xa4e>
      default:
        pclk = 0U;
 800d196:	2300      	movs	r3, #0
 800d198:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 800d19a:	2301      	movs	r3, #1
 800d19c:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 800d1a0:	bf00      	nop
    }

    if (pclk != 0U)
 800d1a2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d1a4:	2b00      	cmp	r3, #0
 800d1a6:	d021      	beq.n	800d1ec <UART_SetConfig+0xa98>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800d1a8:	697b      	ldr	r3, [r7, #20]
 800d1aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d1ac:	4a1d      	ldr	r2, [pc, #116]	; (800d224 <UART_SetConfig+0xad0>)
 800d1ae:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800d1b2:	461a      	mov	r2, r3
 800d1b4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d1b6:	fbb3 f2f2 	udiv	r2, r3, r2
 800d1ba:	697b      	ldr	r3, [r7, #20]
 800d1bc:	685b      	ldr	r3, [r3, #4]
 800d1be:	085b      	lsrs	r3, r3, #1
 800d1c0:	441a      	add	r2, r3
 800d1c2:	697b      	ldr	r3, [r7, #20]
 800d1c4:	685b      	ldr	r3, [r3, #4]
 800d1c6:	fbb2 f3f3 	udiv	r3, r2, r3
 800d1ca:	b29b      	uxth	r3, r3
 800d1cc:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800d1ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d1d0:	2b0f      	cmp	r3, #15
 800d1d2:	d908      	bls.n	800d1e6 <UART_SetConfig+0xa92>
 800d1d4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d1d6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800d1da:	d204      	bcs.n	800d1e6 <UART_SetConfig+0xa92>
      {
        huart->Instance->BRR = usartdiv;
 800d1dc:	697b      	ldr	r3, [r7, #20]
 800d1de:	681b      	ldr	r3, [r3, #0]
 800d1e0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800d1e2:	60da      	str	r2, [r3, #12]
 800d1e4:	e002      	b.n	800d1ec <UART_SetConfig+0xa98>
      }
      else
      {
        ret = HAL_ERROR;
 800d1e6:	2301      	movs	r3, #1
 800d1e8:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800d1ec:	697b      	ldr	r3, [r7, #20]
 800d1ee:	2201      	movs	r2, #1
 800d1f0:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 800d1f4:	697b      	ldr	r3, [r7, #20]
 800d1f6:	2201      	movs	r2, #1
 800d1f8:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800d1fc:	697b      	ldr	r3, [r7, #20]
 800d1fe:	2200      	movs	r2, #0
 800d200:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 800d202:	697b      	ldr	r3, [r7, #20]
 800d204:	2200      	movs	r2, #0
 800d206:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 800d208:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
}
 800d20c:	4618      	mov	r0, r3
 800d20e:	3748      	adds	r7, #72	; 0x48
 800d210:	46bd      	mov	sp, r7
 800d212:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800d216:	bf00      	nop
 800d218:	58024400 	.word	0x58024400
 800d21c:	03d09000 	.word	0x03d09000
 800d220:	003d0900 	.word	0x003d0900
 800d224:	080167a0 	.word	0x080167a0

0800d228 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800d228:	b480      	push	{r7}
 800d22a:	b083      	sub	sp, #12
 800d22c:	af00      	add	r7, sp, #0
 800d22e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800d230:	687b      	ldr	r3, [r7, #4]
 800d232:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d234:	f003 0301 	and.w	r3, r3, #1
 800d238:	2b00      	cmp	r3, #0
 800d23a:	d00a      	beq.n	800d252 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800d23c:	687b      	ldr	r3, [r7, #4]
 800d23e:	681b      	ldr	r3, [r3, #0]
 800d240:	685b      	ldr	r3, [r3, #4]
 800d242:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800d246:	687b      	ldr	r3, [r7, #4]
 800d248:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d24a:	687b      	ldr	r3, [r7, #4]
 800d24c:	681b      	ldr	r3, [r3, #0]
 800d24e:	430a      	orrs	r2, r1
 800d250:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800d252:	687b      	ldr	r3, [r7, #4]
 800d254:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d256:	f003 0302 	and.w	r3, r3, #2
 800d25a:	2b00      	cmp	r3, #0
 800d25c:	d00a      	beq.n	800d274 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800d25e:	687b      	ldr	r3, [r7, #4]
 800d260:	681b      	ldr	r3, [r3, #0]
 800d262:	685b      	ldr	r3, [r3, #4]
 800d264:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800d268:	687b      	ldr	r3, [r7, #4]
 800d26a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800d26c:	687b      	ldr	r3, [r7, #4]
 800d26e:	681b      	ldr	r3, [r3, #0]
 800d270:	430a      	orrs	r2, r1
 800d272:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800d274:	687b      	ldr	r3, [r7, #4]
 800d276:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d278:	f003 0304 	and.w	r3, r3, #4
 800d27c:	2b00      	cmp	r3, #0
 800d27e:	d00a      	beq.n	800d296 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800d280:	687b      	ldr	r3, [r7, #4]
 800d282:	681b      	ldr	r3, [r3, #0]
 800d284:	685b      	ldr	r3, [r3, #4]
 800d286:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800d28a:	687b      	ldr	r3, [r7, #4]
 800d28c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800d28e:	687b      	ldr	r3, [r7, #4]
 800d290:	681b      	ldr	r3, [r3, #0]
 800d292:	430a      	orrs	r2, r1
 800d294:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800d296:	687b      	ldr	r3, [r7, #4]
 800d298:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d29a:	f003 0308 	and.w	r3, r3, #8
 800d29e:	2b00      	cmp	r3, #0
 800d2a0:	d00a      	beq.n	800d2b8 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800d2a2:	687b      	ldr	r3, [r7, #4]
 800d2a4:	681b      	ldr	r3, [r3, #0]
 800d2a6:	685b      	ldr	r3, [r3, #4]
 800d2a8:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800d2ac:	687b      	ldr	r3, [r7, #4]
 800d2ae:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800d2b0:	687b      	ldr	r3, [r7, #4]
 800d2b2:	681b      	ldr	r3, [r3, #0]
 800d2b4:	430a      	orrs	r2, r1
 800d2b6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800d2b8:	687b      	ldr	r3, [r7, #4]
 800d2ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d2bc:	f003 0310 	and.w	r3, r3, #16
 800d2c0:	2b00      	cmp	r3, #0
 800d2c2:	d00a      	beq.n	800d2da <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800d2c4:	687b      	ldr	r3, [r7, #4]
 800d2c6:	681b      	ldr	r3, [r3, #0]
 800d2c8:	689b      	ldr	r3, [r3, #8]
 800d2ca:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800d2ce:	687b      	ldr	r3, [r7, #4]
 800d2d0:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800d2d2:	687b      	ldr	r3, [r7, #4]
 800d2d4:	681b      	ldr	r3, [r3, #0]
 800d2d6:	430a      	orrs	r2, r1
 800d2d8:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800d2da:	687b      	ldr	r3, [r7, #4]
 800d2dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d2de:	f003 0320 	and.w	r3, r3, #32
 800d2e2:	2b00      	cmp	r3, #0
 800d2e4:	d00a      	beq.n	800d2fc <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800d2e6:	687b      	ldr	r3, [r7, #4]
 800d2e8:	681b      	ldr	r3, [r3, #0]
 800d2ea:	689b      	ldr	r3, [r3, #8]
 800d2ec:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800d2f0:	687b      	ldr	r3, [r7, #4]
 800d2f2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800d2f4:	687b      	ldr	r3, [r7, #4]
 800d2f6:	681b      	ldr	r3, [r3, #0]
 800d2f8:	430a      	orrs	r2, r1
 800d2fa:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800d2fc:	687b      	ldr	r3, [r7, #4]
 800d2fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d300:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d304:	2b00      	cmp	r3, #0
 800d306:	d01a      	beq.n	800d33e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800d308:	687b      	ldr	r3, [r7, #4]
 800d30a:	681b      	ldr	r3, [r3, #0]
 800d30c:	685b      	ldr	r3, [r3, #4]
 800d30e:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800d312:	687b      	ldr	r3, [r7, #4]
 800d314:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800d316:	687b      	ldr	r3, [r7, #4]
 800d318:	681b      	ldr	r3, [r3, #0]
 800d31a:	430a      	orrs	r2, r1
 800d31c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800d31e:	687b      	ldr	r3, [r7, #4]
 800d320:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800d322:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800d326:	d10a      	bne.n	800d33e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800d328:	687b      	ldr	r3, [r7, #4]
 800d32a:	681b      	ldr	r3, [r3, #0]
 800d32c:	685b      	ldr	r3, [r3, #4]
 800d32e:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800d332:	687b      	ldr	r3, [r7, #4]
 800d334:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800d336:	687b      	ldr	r3, [r7, #4]
 800d338:	681b      	ldr	r3, [r3, #0]
 800d33a:	430a      	orrs	r2, r1
 800d33c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800d33e:	687b      	ldr	r3, [r7, #4]
 800d340:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d342:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800d346:	2b00      	cmp	r3, #0
 800d348:	d00a      	beq.n	800d360 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800d34a:	687b      	ldr	r3, [r7, #4]
 800d34c:	681b      	ldr	r3, [r3, #0]
 800d34e:	685b      	ldr	r3, [r3, #4]
 800d350:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800d354:	687b      	ldr	r3, [r7, #4]
 800d356:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800d358:	687b      	ldr	r3, [r7, #4]
 800d35a:	681b      	ldr	r3, [r3, #0]
 800d35c:	430a      	orrs	r2, r1
 800d35e:	605a      	str	r2, [r3, #4]
  }
}
 800d360:	bf00      	nop
 800d362:	370c      	adds	r7, #12
 800d364:	46bd      	mov	sp, r7
 800d366:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d36a:	4770      	bx	lr

0800d36c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800d36c:	b580      	push	{r7, lr}
 800d36e:	b086      	sub	sp, #24
 800d370:	af02      	add	r7, sp, #8
 800d372:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800d374:	687b      	ldr	r3, [r7, #4]
 800d376:	2200      	movs	r2, #0
 800d378:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800d37c:	f7f5 f818 	bl	80023b0 <HAL_GetTick>
 800d380:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800d382:	687b      	ldr	r3, [r7, #4]
 800d384:	681b      	ldr	r3, [r3, #0]
 800d386:	681b      	ldr	r3, [r3, #0]
 800d388:	f003 0308 	and.w	r3, r3, #8
 800d38c:	2b08      	cmp	r3, #8
 800d38e:	d10e      	bne.n	800d3ae <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800d390:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800d394:	9300      	str	r3, [sp, #0]
 800d396:	68fb      	ldr	r3, [r7, #12]
 800d398:	2200      	movs	r2, #0
 800d39a:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800d39e:	6878      	ldr	r0, [r7, #4]
 800d3a0:	f000 f82f 	bl	800d402 <UART_WaitOnFlagUntilTimeout>
 800d3a4:	4603      	mov	r3, r0
 800d3a6:	2b00      	cmp	r3, #0
 800d3a8:	d001      	beq.n	800d3ae <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800d3aa:	2303      	movs	r3, #3
 800d3ac:	e025      	b.n	800d3fa <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800d3ae:	687b      	ldr	r3, [r7, #4]
 800d3b0:	681b      	ldr	r3, [r3, #0]
 800d3b2:	681b      	ldr	r3, [r3, #0]
 800d3b4:	f003 0304 	and.w	r3, r3, #4
 800d3b8:	2b04      	cmp	r3, #4
 800d3ba:	d10e      	bne.n	800d3da <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800d3bc:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800d3c0:	9300      	str	r3, [sp, #0]
 800d3c2:	68fb      	ldr	r3, [r7, #12]
 800d3c4:	2200      	movs	r2, #0
 800d3c6:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800d3ca:	6878      	ldr	r0, [r7, #4]
 800d3cc:	f000 f819 	bl	800d402 <UART_WaitOnFlagUntilTimeout>
 800d3d0:	4603      	mov	r3, r0
 800d3d2:	2b00      	cmp	r3, #0
 800d3d4:	d001      	beq.n	800d3da <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800d3d6:	2303      	movs	r3, #3
 800d3d8:	e00f      	b.n	800d3fa <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800d3da:	687b      	ldr	r3, [r7, #4]
 800d3dc:	2220      	movs	r2, #32
 800d3de:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 800d3e2:	687b      	ldr	r3, [r7, #4]
 800d3e4:	2220      	movs	r2, #32
 800d3e6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800d3ea:	687b      	ldr	r3, [r7, #4]
 800d3ec:	2200      	movs	r2, #0
 800d3ee:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 800d3f0:	687b      	ldr	r3, [r7, #4]
 800d3f2:	2200      	movs	r2, #0
 800d3f4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800d3f8:	2300      	movs	r3, #0
}
 800d3fa:	4618      	mov	r0, r3
 800d3fc:	3710      	adds	r7, #16
 800d3fe:	46bd      	mov	sp, r7
 800d400:	bd80      	pop	{r7, pc}

0800d402 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800d402:	b580      	push	{r7, lr}
 800d404:	b084      	sub	sp, #16
 800d406:	af00      	add	r7, sp, #0
 800d408:	60f8      	str	r0, [r7, #12]
 800d40a:	60b9      	str	r1, [r7, #8]
 800d40c:	603b      	str	r3, [r7, #0]
 800d40e:	4613      	mov	r3, r2
 800d410:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800d412:	e062      	b.n	800d4da <UART_WaitOnFlagUntilTimeout+0xd8>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800d414:	69bb      	ldr	r3, [r7, #24]
 800d416:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d41a:	d05e      	beq.n	800d4da <UART_WaitOnFlagUntilTimeout+0xd8>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800d41c:	f7f4 ffc8 	bl	80023b0 <HAL_GetTick>
 800d420:	4602      	mov	r2, r0
 800d422:	683b      	ldr	r3, [r7, #0]
 800d424:	1ad3      	subs	r3, r2, r3
 800d426:	69ba      	ldr	r2, [r7, #24]
 800d428:	429a      	cmp	r2, r3
 800d42a:	d302      	bcc.n	800d432 <UART_WaitOnFlagUntilTimeout+0x30>
 800d42c:	69bb      	ldr	r3, [r7, #24]
 800d42e:	2b00      	cmp	r3, #0
 800d430:	d11d      	bne.n	800d46e <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 800d432:	68fb      	ldr	r3, [r7, #12]
 800d434:	681b      	ldr	r3, [r3, #0]
 800d436:	681a      	ldr	r2, [r3, #0]
 800d438:	68fb      	ldr	r3, [r7, #12]
 800d43a:	681b      	ldr	r3, [r3, #0]
 800d43c:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800d440:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800d442:	68fb      	ldr	r3, [r7, #12]
 800d444:	681b      	ldr	r3, [r3, #0]
 800d446:	689a      	ldr	r2, [r3, #8]
 800d448:	68fb      	ldr	r3, [r7, #12]
 800d44a:	681b      	ldr	r3, [r3, #0]
 800d44c:	f022 0201 	bic.w	r2, r2, #1
 800d450:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 800d452:	68fb      	ldr	r3, [r7, #12]
 800d454:	2220      	movs	r2, #32
 800d456:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 800d45a:	68fb      	ldr	r3, [r7, #12]
 800d45c:	2220      	movs	r2, #32
 800d45e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 800d462:	68fb      	ldr	r3, [r7, #12]
 800d464:	2200      	movs	r2, #0
 800d466:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 800d46a:	2303      	movs	r3, #3
 800d46c:	e045      	b.n	800d4fa <UART_WaitOnFlagUntilTimeout+0xf8>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800d46e:	68fb      	ldr	r3, [r7, #12]
 800d470:	681b      	ldr	r3, [r3, #0]
 800d472:	681b      	ldr	r3, [r3, #0]
 800d474:	f003 0304 	and.w	r3, r3, #4
 800d478:	2b00      	cmp	r3, #0
 800d47a:	d02e      	beq.n	800d4da <UART_WaitOnFlagUntilTimeout+0xd8>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800d47c:	68fb      	ldr	r3, [r7, #12]
 800d47e:	681b      	ldr	r3, [r3, #0]
 800d480:	69db      	ldr	r3, [r3, #28]
 800d482:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800d486:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800d48a:	d126      	bne.n	800d4da <UART_WaitOnFlagUntilTimeout+0xd8>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800d48c:	68fb      	ldr	r3, [r7, #12]
 800d48e:	681b      	ldr	r3, [r3, #0]
 800d490:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800d494:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 800d496:	68fb      	ldr	r3, [r7, #12]
 800d498:	681b      	ldr	r3, [r3, #0]
 800d49a:	681a      	ldr	r2, [r3, #0]
 800d49c:	68fb      	ldr	r3, [r7, #12]
 800d49e:	681b      	ldr	r3, [r3, #0]
 800d4a0:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800d4a4:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800d4a6:	68fb      	ldr	r3, [r7, #12]
 800d4a8:	681b      	ldr	r3, [r3, #0]
 800d4aa:	689a      	ldr	r2, [r3, #8]
 800d4ac:	68fb      	ldr	r3, [r7, #12]
 800d4ae:	681b      	ldr	r3, [r3, #0]
 800d4b0:	f022 0201 	bic.w	r2, r2, #1
 800d4b4:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 800d4b6:	68fb      	ldr	r3, [r7, #12]
 800d4b8:	2220      	movs	r2, #32
 800d4ba:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 800d4be:	68fb      	ldr	r3, [r7, #12]
 800d4c0:	2220      	movs	r2, #32
 800d4c2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800d4c6:	68fb      	ldr	r3, [r7, #12]
 800d4c8:	2220      	movs	r2, #32
 800d4ca:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800d4ce:	68fb      	ldr	r3, [r7, #12]
 800d4d0:	2200      	movs	r2, #0
 800d4d2:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 800d4d6:	2303      	movs	r3, #3
 800d4d8:	e00f      	b.n	800d4fa <UART_WaitOnFlagUntilTimeout+0xf8>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800d4da:	68fb      	ldr	r3, [r7, #12]
 800d4dc:	681b      	ldr	r3, [r3, #0]
 800d4de:	69da      	ldr	r2, [r3, #28]
 800d4e0:	68bb      	ldr	r3, [r7, #8]
 800d4e2:	4013      	ands	r3, r2
 800d4e4:	68ba      	ldr	r2, [r7, #8]
 800d4e6:	429a      	cmp	r2, r3
 800d4e8:	bf0c      	ite	eq
 800d4ea:	2301      	moveq	r3, #1
 800d4ec:	2300      	movne	r3, #0
 800d4ee:	b2db      	uxtb	r3, r3
 800d4f0:	461a      	mov	r2, r3
 800d4f2:	79fb      	ldrb	r3, [r7, #7]
 800d4f4:	429a      	cmp	r2, r3
 800d4f6:	d08d      	beq.n	800d414 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800d4f8:	2300      	movs	r3, #0
}
 800d4fa:	4618      	mov	r0, r3
 800d4fc:	3710      	adds	r7, #16
 800d4fe:	46bd      	mov	sp, r7
 800d500:	bd80      	pop	{r7, pc}

0800d502 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800d502:	b480      	push	{r7}
 800d504:	b085      	sub	sp, #20
 800d506:	af00      	add	r7, sp, #0
 800d508:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800d50a:	687b      	ldr	r3, [r7, #4]
 800d50c:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800d510:	2b01      	cmp	r3, #1
 800d512:	d101      	bne.n	800d518 <HAL_UARTEx_DisableFifoMode+0x16>
 800d514:	2302      	movs	r3, #2
 800d516:	e027      	b.n	800d568 <HAL_UARTEx_DisableFifoMode+0x66>
 800d518:	687b      	ldr	r3, [r7, #4]
 800d51a:	2201      	movs	r2, #1
 800d51c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800d520:	687b      	ldr	r3, [r7, #4]
 800d522:	2224      	movs	r2, #36	; 0x24
 800d524:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800d528:	687b      	ldr	r3, [r7, #4]
 800d52a:	681b      	ldr	r3, [r3, #0]
 800d52c:	681b      	ldr	r3, [r3, #0]
 800d52e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800d530:	687b      	ldr	r3, [r7, #4]
 800d532:	681b      	ldr	r3, [r3, #0]
 800d534:	681a      	ldr	r2, [r3, #0]
 800d536:	687b      	ldr	r3, [r7, #4]
 800d538:	681b      	ldr	r3, [r3, #0]
 800d53a:	f022 0201 	bic.w	r2, r2, #1
 800d53e:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800d540:	68fb      	ldr	r3, [r7, #12]
 800d542:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800d546:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800d548:	687b      	ldr	r3, [r7, #4]
 800d54a:	2200      	movs	r2, #0
 800d54c:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800d54e:	687b      	ldr	r3, [r7, #4]
 800d550:	681b      	ldr	r3, [r3, #0]
 800d552:	68fa      	ldr	r2, [r7, #12]
 800d554:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800d556:	687b      	ldr	r3, [r7, #4]
 800d558:	2220      	movs	r2, #32
 800d55a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800d55e:	687b      	ldr	r3, [r7, #4]
 800d560:	2200      	movs	r2, #0
 800d562:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800d566:	2300      	movs	r3, #0
}
 800d568:	4618      	mov	r0, r3
 800d56a:	3714      	adds	r7, #20
 800d56c:	46bd      	mov	sp, r7
 800d56e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d572:	4770      	bx	lr

0800d574 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800d574:	b580      	push	{r7, lr}
 800d576:	b084      	sub	sp, #16
 800d578:	af00      	add	r7, sp, #0
 800d57a:	6078      	str	r0, [r7, #4]
 800d57c:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800d57e:	687b      	ldr	r3, [r7, #4]
 800d580:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800d584:	2b01      	cmp	r3, #1
 800d586:	d101      	bne.n	800d58c <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800d588:	2302      	movs	r3, #2
 800d58a:	e02d      	b.n	800d5e8 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800d58c:	687b      	ldr	r3, [r7, #4]
 800d58e:	2201      	movs	r2, #1
 800d590:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800d594:	687b      	ldr	r3, [r7, #4]
 800d596:	2224      	movs	r2, #36	; 0x24
 800d598:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800d59c:	687b      	ldr	r3, [r7, #4]
 800d59e:	681b      	ldr	r3, [r3, #0]
 800d5a0:	681b      	ldr	r3, [r3, #0]
 800d5a2:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800d5a4:	687b      	ldr	r3, [r7, #4]
 800d5a6:	681b      	ldr	r3, [r3, #0]
 800d5a8:	681a      	ldr	r2, [r3, #0]
 800d5aa:	687b      	ldr	r3, [r7, #4]
 800d5ac:	681b      	ldr	r3, [r3, #0]
 800d5ae:	f022 0201 	bic.w	r2, r2, #1
 800d5b2:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800d5b4:	687b      	ldr	r3, [r7, #4]
 800d5b6:	681b      	ldr	r3, [r3, #0]
 800d5b8:	689b      	ldr	r3, [r3, #8]
 800d5ba:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 800d5be:	687b      	ldr	r3, [r7, #4]
 800d5c0:	681b      	ldr	r3, [r3, #0]
 800d5c2:	683a      	ldr	r2, [r7, #0]
 800d5c4:	430a      	orrs	r2, r1
 800d5c6:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800d5c8:	6878      	ldr	r0, [r7, #4]
 800d5ca:	f000 f84f 	bl	800d66c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800d5ce:	687b      	ldr	r3, [r7, #4]
 800d5d0:	681b      	ldr	r3, [r3, #0]
 800d5d2:	68fa      	ldr	r2, [r7, #12]
 800d5d4:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800d5d6:	687b      	ldr	r3, [r7, #4]
 800d5d8:	2220      	movs	r2, #32
 800d5da:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800d5de:	687b      	ldr	r3, [r7, #4]
 800d5e0:	2200      	movs	r2, #0
 800d5e2:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800d5e6:	2300      	movs	r3, #0
}
 800d5e8:	4618      	mov	r0, r3
 800d5ea:	3710      	adds	r7, #16
 800d5ec:	46bd      	mov	sp, r7
 800d5ee:	bd80      	pop	{r7, pc}

0800d5f0 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800d5f0:	b580      	push	{r7, lr}
 800d5f2:	b084      	sub	sp, #16
 800d5f4:	af00      	add	r7, sp, #0
 800d5f6:	6078      	str	r0, [r7, #4]
 800d5f8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800d5fa:	687b      	ldr	r3, [r7, #4]
 800d5fc:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800d600:	2b01      	cmp	r3, #1
 800d602:	d101      	bne.n	800d608 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800d604:	2302      	movs	r3, #2
 800d606:	e02d      	b.n	800d664 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800d608:	687b      	ldr	r3, [r7, #4]
 800d60a:	2201      	movs	r2, #1
 800d60c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800d610:	687b      	ldr	r3, [r7, #4]
 800d612:	2224      	movs	r2, #36	; 0x24
 800d614:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800d618:	687b      	ldr	r3, [r7, #4]
 800d61a:	681b      	ldr	r3, [r3, #0]
 800d61c:	681b      	ldr	r3, [r3, #0]
 800d61e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800d620:	687b      	ldr	r3, [r7, #4]
 800d622:	681b      	ldr	r3, [r3, #0]
 800d624:	681a      	ldr	r2, [r3, #0]
 800d626:	687b      	ldr	r3, [r7, #4]
 800d628:	681b      	ldr	r3, [r3, #0]
 800d62a:	f022 0201 	bic.w	r2, r2, #1
 800d62e:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800d630:	687b      	ldr	r3, [r7, #4]
 800d632:	681b      	ldr	r3, [r3, #0]
 800d634:	689b      	ldr	r3, [r3, #8]
 800d636:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 800d63a:	687b      	ldr	r3, [r7, #4]
 800d63c:	681b      	ldr	r3, [r3, #0]
 800d63e:	683a      	ldr	r2, [r7, #0]
 800d640:	430a      	orrs	r2, r1
 800d642:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800d644:	6878      	ldr	r0, [r7, #4]
 800d646:	f000 f811 	bl	800d66c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800d64a:	687b      	ldr	r3, [r7, #4]
 800d64c:	681b      	ldr	r3, [r3, #0]
 800d64e:	68fa      	ldr	r2, [r7, #12]
 800d650:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800d652:	687b      	ldr	r3, [r7, #4]
 800d654:	2220      	movs	r2, #32
 800d656:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800d65a:	687b      	ldr	r3, [r7, #4]
 800d65c:	2200      	movs	r2, #0
 800d65e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800d662:	2300      	movs	r3, #0
}
 800d664:	4618      	mov	r0, r3
 800d666:	3710      	adds	r7, #16
 800d668:	46bd      	mov	sp, r7
 800d66a:	bd80      	pop	{r7, pc}

0800d66c <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800d66c:	b480      	push	{r7}
 800d66e:	b085      	sub	sp, #20
 800d670:	af00      	add	r7, sp, #0
 800d672:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800d674:	687b      	ldr	r3, [r7, #4]
 800d676:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800d678:	2b00      	cmp	r3, #0
 800d67a:	d108      	bne.n	800d68e <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800d67c:	687b      	ldr	r3, [r7, #4]
 800d67e:	2201      	movs	r2, #1
 800d680:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 800d684:	687b      	ldr	r3, [r7, #4]
 800d686:	2201      	movs	r2, #1
 800d688:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800d68c:	e031      	b.n	800d6f2 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800d68e:	2310      	movs	r3, #16
 800d690:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800d692:	2310      	movs	r3, #16
 800d694:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800d696:	687b      	ldr	r3, [r7, #4]
 800d698:	681b      	ldr	r3, [r3, #0]
 800d69a:	689b      	ldr	r3, [r3, #8]
 800d69c:	0e5b      	lsrs	r3, r3, #25
 800d69e:	b2db      	uxtb	r3, r3
 800d6a0:	f003 0307 	and.w	r3, r3, #7
 800d6a4:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800d6a6:	687b      	ldr	r3, [r7, #4]
 800d6a8:	681b      	ldr	r3, [r3, #0]
 800d6aa:	689b      	ldr	r3, [r3, #8]
 800d6ac:	0f5b      	lsrs	r3, r3, #29
 800d6ae:	b2db      	uxtb	r3, r3
 800d6b0:	f003 0307 	and.w	r3, r3, #7
 800d6b4:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800d6b6:	7bbb      	ldrb	r3, [r7, #14]
 800d6b8:	7b3a      	ldrb	r2, [r7, #12]
 800d6ba:	4911      	ldr	r1, [pc, #68]	; (800d700 <UARTEx_SetNbDataToProcess+0x94>)
 800d6bc:	5c8a      	ldrb	r2, [r1, r2]
 800d6be:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800d6c2:	7b3a      	ldrb	r2, [r7, #12]
 800d6c4:	490f      	ldr	r1, [pc, #60]	; (800d704 <UARTEx_SetNbDataToProcess+0x98>)
 800d6c6:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800d6c8:	fb93 f3f2 	sdiv	r3, r3, r2
 800d6cc:	b29a      	uxth	r2, r3
 800d6ce:	687b      	ldr	r3, [r7, #4]
 800d6d0:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800d6d4:	7bfb      	ldrb	r3, [r7, #15]
 800d6d6:	7b7a      	ldrb	r2, [r7, #13]
 800d6d8:	4909      	ldr	r1, [pc, #36]	; (800d700 <UARTEx_SetNbDataToProcess+0x94>)
 800d6da:	5c8a      	ldrb	r2, [r1, r2]
 800d6dc:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800d6e0:	7b7a      	ldrb	r2, [r7, #13]
 800d6e2:	4908      	ldr	r1, [pc, #32]	; (800d704 <UARTEx_SetNbDataToProcess+0x98>)
 800d6e4:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800d6e6:	fb93 f3f2 	sdiv	r3, r3, r2
 800d6ea:	b29a      	uxth	r2, r3
 800d6ec:	687b      	ldr	r3, [r7, #4]
 800d6ee:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 800d6f2:	bf00      	nop
 800d6f4:	3714      	adds	r7, #20
 800d6f6:	46bd      	mov	sp, r7
 800d6f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d6fc:	4770      	bx	lr
 800d6fe:	bf00      	nop
 800d700:	080167b8 	.word	0x080167b8
 800d704:	080167c0 	.word	0x080167c0

0800d708 <FMC_NORSRAM_Init>:
  * @param  Init Pointer to NORSRAM Initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef  FMC_NORSRAM_Init(FMC_NORSRAM_TypeDef *Device,
                                    FMC_NORSRAM_InitTypeDef *Init)
{
 800d708:	b480      	push	{r7}
 800d70a:	b087      	sub	sp, #28
 800d70c:	af00      	add	r7, sp, #0
 800d70e:	6078      	str	r0, [r7, #4]
 800d710:	6039      	str	r1, [r7, #0]
  assert_param(IS_FMC_CONTINOUS_CLOCK(Init->ContinuousClock));
  assert_param(IS_FMC_WRITE_FIFO(Init->WriteFifo));
  assert_param(IS_FMC_PAGESIZE(Init->PageSize));

  /* Disable NORSRAM Device */
  __FMC_NORSRAM_DISABLE(Device, Init->NSBank);
 800d712:	683b      	ldr	r3, [r7, #0]
 800d714:	681a      	ldr	r2, [r3, #0]
 800d716:	687b      	ldr	r3, [r7, #4]
 800d718:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d71c:	683a      	ldr	r2, [r7, #0]
 800d71e:	6812      	ldr	r2, [r2, #0]
 800d720:	f023 0101 	bic.w	r1, r3, #1
 800d724:	687b      	ldr	r3, [r7, #4]
 800d726:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

  /* Set NORSRAM device control parameters */
  if (Init->MemoryType == FMC_MEMORY_TYPE_NOR)
 800d72a:	683b      	ldr	r3, [r7, #0]
 800d72c:	689b      	ldr	r3, [r3, #8]
 800d72e:	2b08      	cmp	r3, #8
 800d730:	d102      	bne.n	800d738 <FMC_NORSRAM_Init+0x30>
  {
    flashaccess = FMC_NORSRAM_FLASH_ACCESS_ENABLE;
 800d732:	2340      	movs	r3, #64	; 0x40
 800d734:	617b      	str	r3, [r7, #20]
 800d736:	e001      	b.n	800d73c <FMC_NORSRAM_Init+0x34>
  }
  else
  {
    flashaccess = FMC_NORSRAM_FLASH_ACCESS_DISABLE;
 800d738:	2300      	movs	r3, #0
 800d73a:	617b      	str	r3, [r7, #20]
  }

  btcr_reg = (flashaccess                   | \
              Init->DataAddressMux          | \
 800d73c:	683b      	ldr	r3, [r7, #0]
 800d73e:	685a      	ldr	r2, [r3, #4]
  btcr_reg = (flashaccess                   | \
 800d740:	697b      	ldr	r3, [r7, #20]
 800d742:	431a      	orrs	r2, r3
              Init->MemoryType              | \
 800d744:	683b      	ldr	r3, [r7, #0]
 800d746:	689b      	ldr	r3, [r3, #8]
              Init->DataAddressMux          | \
 800d748:	431a      	orrs	r2, r3
              Init->MemoryDataWidth         | \
 800d74a:	683b      	ldr	r3, [r7, #0]
 800d74c:	68db      	ldr	r3, [r3, #12]
              Init->MemoryType              | \
 800d74e:	431a      	orrs	r2, r3
              Init->BurstAccessMode         | \
 800d750:	683b      	ldr	r3, [r7, #0]
 800d752:	691b      	ldr	r3, [r3, #16]
              Init->MemoryDataWidth         | \
 800d754:	431a      	orrs	r2, r3
              Init->WaitSignalPolarity      | \
 800d756:	683b      	ldr	r3, [r7, #0]
 800d758:	695b      	ldr	r3, [r3, #20]
              Init->BurstAccessMode         | \
 800d75a:	431a      	orrs	r2, r3
              Init->WaitSignalActive        | \
 800d75c:	683b      	ldr	r3, [r7, #0]
 800d75e:	699b      	ldr	r3, [r3, #24]
              Init->WaitSignalPolarity      | \
 800d760:	431a      	orrs	r2, r3
              Init->WriteOperation          | \
 800d762:	683b      	ldr	r3, [r7, #0]
 800d764:	69db      	ldr	r3, [r3, #28]
              Init->WaitSignalActive        | \
 800d766:	431a      	orrs	r2, r3
              Init->WaitSignal              | \
 800d768:	683b      	ldr	r3, [r7, #0]
 800d76a:	6a1b      	ldr	r3, [r3, #32]
              Init->WriteOperation          | \
 800d76c:	431a      	orrs	r2, r3
              Init->ExtendedMode            | \
 800d76e:	683b      	ldr	r3, [r7, #0]
 800d770:	6a5b      	ldr	r3, [r3, #36]	; 0x24
              Init->WaitSignal              | \
 800d772:	431a      	orrs	r2, r3
              Init->AsynchronousWait        | \
 800d774:	683b      	ldr	r3, [r7, #0]
 800d776:	6a9b      	ldr	r3, [r3, #40]	; 0x28
              Init->ExtendedMode            | \
 800d778:	431a      	orrs	r2, r3
              Init->WriteBurst);
 800d77a:	683b      	ldr	r3, [r7, #0]
 800d77c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  btcr_reg = (flashaccess                   | \
 800d77e:	4313      	orrs	r3, r2
 800d780:	613b      	str	r3, [r7, #16]

  btcr_reg |= Init->ContinuousClock;
 800d782:	683b      	ldr	r3, [r7, #0]
 800d784:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d786:	693a      	ldr	r2, [r7, #16]
 800d788:	4313      	orrs	r3, r2
 800d78a:	613b      	str	r3, [r7, #16]
  btcr_reg |= Init->WriteFifo;
 800d78c:	683b      	ldr	r3, [r7, #0]
 800d78e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d790:	693a      	ldr	r2, [r7, #16]
 800d792:	4313      	orrs	r3, r2
 800d794:	613b      	str	r3, [r7, #16]
  btcr_reg |= Init->PageSize;
 800d796:	683b      	ldr	r3, [r7, #0]
 800d798:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d79a:	693a      	ldr	r2, [r7, #16]
 800d79c:	4313      	orrs	r3, r2
 800d79e:	613b      	str	r3, [r7, #16]

  mask = (FMC_BCRx_MBKEN                |
 800d7a0:	4b20      	ldr	r3, [pc, #128]	; (800d824 <FMC_NORSRAM_Init+0x11c>)
 800d7a2:	60fb      	str	r3, [r7, #12]
          FMC_BCRx_WAITEN               |
          FMC_BCRx_EXTMOD               |
          FMC_BCRx_ASYNCWAIT            |
          FMC_BCRx_CBURSTRW);

  mask |= FMC_BCR1_CCLKEN;
 800d7a4:	68fb      	ldr	r3, [r7, #12]
 800d7a6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800d7aa:	60fb      	str	r3, [r7, #12]
  mask |= FMC_BCR1_WFDIS;
 800d7ac:	68fb      	ldr	r3, [r7, #12]
 800d7ae:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800d7b2:	60fb      	str	r3, [r7, #12]
  mask |= FMC_BCRx_CPSIZE;
 800d7b4:	68fb      	ldr	r3, [r7, #12]
 800d7b6:	f443 23e0 	orr.w	r3, r3, #458752	; 0x70000
 800d7ba:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(Device->BTCR[Init->NSBank], mask, btcr_reg);
 800d7bc:	683b      	ldr	r3, [r7, #0]
 800d7be:	681a      	ldr	r2, [r3, #0]
 800d7c0:	687b      	ldr	r3, [r7, #4]
 800d7c2:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800d7c6:	68fb      	ldr	r3, [r7, #12]
 800d7c8:	43db      	mvns	r3, r3
 800d7ca:	ea02 0103 	and.w	r1, r2, r3
 800d7ce:	683b      	ldr	r3, [r7, #0]
 800d7d0:	681a      	ldr	r2, [r3, #0]
 800d7d2:	693b      	ldr	r3, [r7, #16]
 800d7d4:	4319      	orrs	r1, r3
 800d7d6:	687b      	ldr	r3, [r7, #4]
 800d7d8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

  /* Configure synchronous mode when Continuous clock is enabled for bank2..4 */
  if ((Init->ContinuousClock == FMC_CONTINUOUS_CLOCK_SYNC_ASYNC) && (Init->NSBank != FMC_NORSRAM_BANK1))
 800d7dc:	683b      	ldr	r3, [r7, #0]
 800d7de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d7e0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800d7e4:	d10c      	bne.n	800d800 <FMC_NORSRAM_Init+0xf8>
 800d7e6:	683b      	ldr	r3, [r7, #0]
 800d7e8:	681b      	ldr	r3, [r3, #0]
 800d7ea:	2b00      	cmp	r3, #0
 800d7ec:	d008      	beq.n	800d800 <FMC_NORSRAM_Init+0xf8>
  {
    MODIFY_REG(Device->BTCR[FMC_NORSRAM_BANK1], FMC_BCR1_CCLKEN, Init->ContinuousClock);
 800d7ee:	687b      	ldr	r3, [r7, #4]
 800d7f0:	681b      	ldr	r3, [r3, #0]
 800d7f2:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800d7f6:	683b      	ldr	r3, [r7, #0]
 800d7f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d7fa:	431a      	orrs	r2, r3
 800d7fc:	687b      	ldr	r3, [r7, #4]
 800d7fe:	601a      	str	r2, [r3, #0]
  }

  if (Init->NSBank != FMC_NORSRAM_BANK1)
 800d800:	683b      	ldr	r3, [r7, #0]
 800d802:	681b      	ldr	r3, [r3, #0]
 800d804:	2b00      	cmp	r3, #0
 800d806:	d006      	beq.n	800d816 <FMC_NORSRAM_Init+0x10e>
  {
    /* Configure Write FIFO mode when Write Fifo is enabled for bank2..4 */
    SET_BIT(Device->BTCR[FMC_NORSRAM_BANK1], (uint32_t)(Init->WriteFifo));
 800d808:	687b      	ldr	r3, [r7, #4]
 800d80a:	681a      	ldr	r2, [r3, #0]
 800d80c:	683b      	ldr	r3, [r7, #0]
 800d80e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d810:	431a      	orrs	r2, r3
 800d812:	687b      	ldr	r3, [r7, #4]
 800d814:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800d816:	2300      	movs	r3, #0
}
 800d818:	4618      	mov	r0, r3
 800d81a:	371c      	adds	r7, #28
 800d81c:	46bd      	mov	sp, r7
 800d81e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d822:	4770      	bx	lr
 800d824:	0008fb7f 	.word	0x0008fb7f

0800d828 <FMC_NORSRAM_Timing_Init>:
  * @param  Bank NORSRAM bank number
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_NORSRAM_Timing_Init(FMC_NORSRAM_TypeDef *Device,
                                          FMC_NORSRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 800d828:	b480      	push	{r7}
 800d82a:	b087      	sub	sp, #28
 800d82c:	af00      	add	r7, sp, #0
 800d82e:	60f8      	str	r0, [r7, #12]
 800d830:	60b9      	str	r1, [r7, #8]
 800d832:	607a      	str	r2, [r7, #4]
  assert_param(IS_FMC_DATA_LATENCY(Timing->DataLatency));
  assert_param(IS_FMC_ACCESS_MODE(Timing->AccessMode));
  assert_param(IS_FMC_NORSRAM_BANK(Bank));

  /* Set FMC_NORSRAM device timing parameters */
  MODIFY_REG(Device->BTCR[Bank + 1U], BTR_CLEAR_MASK, (Timing->AddressSetupTime                                  |
 800d834:	687b      	ldr	r3, [r7, #4]
 800d836:	1c5a      	adds	r2, r3, #1
 800d838:	68fb      	ldr	r3, [r7, #12]
 800d83a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d83e:	f003 4140 	and.w	r1, r3, #3221225472	; 0xc0000000
 800d842:	68bb      	ldr	r3, [r7, #8]
 800d844:	681a      	ldr	r2, [r3, #0]
 800d846:	68bb      	ldr	r3, [r7, #8]
 800d848:	685b      	ldr	r3, [r3, #4]
 800d84a:	011b      	lsls	r3, r3, #4
 800d84c:	431a      	orrs	r2, r3
 800d84e:	68bb      	ldr	r3, [r7, #8]
 800d850:	689b      	ldr	r3, [r3, #8]
 800d852:	021b      	lsls	r3, r3, #8
 800d854:	431a      	orrs	r2, r3
 800d856:	68bb      	ldr	r3, [r7, #8]
 800d858:	68db      	ldr	r3, [r3, #12]
 800d85a:	041b      	lsls	r3, r3, #16
 800d85c:	431a      	orrs	r2, r3
 800d85e:	68bb      	ldr	r3, [r7, #8]
 800d860:	691b      	ldr	r3, [r3, #16]
 800d862:	3b01      	subs	r3, #1
 800d864:	051b      	lsls	r3, r3, #20
 800d866:	431a      	orrs	r2, r3
 800d868:	68bb      	ldr	r3, [r7, #8]
 800d86a:	695b      	ldr	r3, [r3, #20]
 800d86c:	3b02      	subs	r3, #2
 800d86e:	061b      	lsls	r3, r3, #24
 800d870:	431a      	orrs	r2, r3
 800d872:	68bb      	ldr	r3, [r7, #8]
 800d874:	699b      	ldr	r3, [r3, #24]
 800d876:	4313      	orrs	r3, r2
 800d878:	687a      	ldr	r2, [r7, #4]
 800d87a:	3201      	adds	r2, #1
 800d87c:	4319      	orrs	r1, r3
 800d87e:	68fb      	ldr	r3, [r7, #12]
 800d880:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                                                       (((Timing->CLKDivision) - 1U)     << FMC_BTRx_CLKDIV_Pos)  |
                                                       (((Timing->DataLatency) - 2U)     << FMC_BTRx_DATLAT_Pos)  |
                                                       (Timing->AccessMode)));

  /* Configure Clock division value (in NORSRAM bank 1) when continuous clock is enabled */
  if (HAL_IS_BIT_SET(Device->BTCR[FMC_NORSRAM_BANK1], FMC_BCR1_CCLKEN))
 800d884:	68fb      	ldr	r3, [r7, #12]
 800d886:	681b      	ldr	r3, [r3, #0]
 800d888:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800d88c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800d890:	d113      	bne.n	800d8ba <FMC_NORSRAM_Timing_Init+0x92>
  {
    tmpr = (uint32_t)(Device->BTCR[FMC_NORSRAM_BANK1 + 1U] & ~((0x0FU) << FMC_BTRx_CLKDIV_Pos));
 800d892:	68fb      	ldr	r3, [r7, #12]
 800d894:	685b      	ldr	r3, [r3, #4]
 800d896:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800d89a:	617b      	str	r3, [r7, #20]
    tmpr |= (uint32_t)(((Timing->CLKDivision) - 1U) << FMC_BTRx_CLKDIV_Pos);
 800d89c:	68bb      	ldr	r3, [r7, #8]
 800d89e:	691b      	ldr	r3, [r3, #16]
 800d8a0:	3b01      	subs	r3, #1
 800d8a2:	051b      	lsls	r3, r3, #20
 800d8a4:	697a      	ldr	r2, [r7, #20]
 800d8a6:	4313      	orrs	r3, r2
 800d8a8:	617b      	str	r3, [r7, #20]
    MODIFY_REG(Device->BTCR[FMC_NORSRAM_BANK1 + 1U], FMC_BTRx_CLKDIV, tmpr);
 800d8aa:	68fb      	ldr	r3, [r7, #12]
 800d8ac:	685b      	ldr	r3, [r3, #4]
 800d8ae:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 800d8b2:	697b      	ldr	r3, [r7, #20]
 800d8b4:	431a      	orrs	r2, r3
 800d8b6:	68fb      	ldr	r3, [r7, #12]
 800d8b8:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 800d8ba:	2300      	movs	r3, #0
}
 800d8bc:	4618      	mov	r0, r3
 800d8be:	371c      	adds	r7, #28
 800d8c0:	46bd      	mov	sp, r7
 800d8c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d8c6:	4770      	bx	lr

0800d8c8 <FMC_NORSRAM_Extended_Timing_Init>:
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_NORSRAM_Extended_Timing_Init(FMC_NORSRAM_EXTENDED_TypeDef *Device,
                                                   FMC_NORSRAM_TimingTypeDef *Timing, uint32_t Bank,
                                                   uint32_t ExtendedMode)
{
 800d8c8:	b480      	push	{r7}
 800d8ca:	b085      	sub	sp, #20
 800d8cc:	af00      	add	r7, sp, #0
 800d8ce:	60f8      	str	r0, [r7, #12]
 800d8d0:	60b9      	str	r1, [r7, #8]
 800d8d2:	607a      	str	r2, [r7, #4]
 800d8d4:	603b      	str	r3, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FMC_EXTENDED_MODE(ExtendedMode));

  /* Set NORSRAM device timing register for write configuration, if extended mode is used */
  if (ExtendedMode == FMC_EXTENDED_MODE_ENABLE)
 800d8d6:	683b      	ldr	r3, [r7, #0]
 800d8d8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800d8dc:	d11d      	bne.n	800d91a <FMC_NORSRAM_Extended_Timing_Init+0x52>
    assert_param(IS_FMC_TURNAROUND_TIME(Timing->BusTurnAroundDuration));
    assert_param(IS_FMC_ACCESS_MODE(Timing->AccessMode));
    assert_param(IS_FMC_NORSRAM_BANK(Bank));

    /* Set NORSRAM device timing register for write configuration, if extended mode is used */
    MODIFY_REG(Device->BWTR[Bank], BWTR_CLEAR_MASK, (Timing->AddressSetupTime                                    |
 800d8de:	68fb      	ldr	r3, [r7, #12]
 800d8e0:	687a      	ldr	r2, [r7, #4]
 800d8e2:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800d8e6:	4b13      	ldr	r3, [pc, #76]	; (800d934 <FMC_NORSRAM_Extended_Timing_Init+0x6c>)
 800d8e8:	4013      	ands	r3, r2
 800d8ea:	68ba      	ldr	r2, [r7, #8]
 800d8ec:	6811      	ldr	r1, [r2, #0]
 800d8ee:	68ba      	ldr	r2, [r7, #8]
 800d8f0:	6852      	ldr	r2, [r2, #4]
 800d8f2:	0112      	lsls	r2, r2, #4
 800d8f4:	4311      	orrs	r1, r2
 800d8f6:	68ba      	ldr	r2, [r7, #8]
 800d8f8:	6892      	ldr	r2, [r2, #8]
 800d8fa:	0212      	lsls	r2, r2, #8
 800d8fc:	4311      	orrs	r1, r2
 800d8fe:	68ba      	ldr	r2, [r7, #8]
 800d900:	6992      	ldr	r2, [r2, #24]
 800d902:	4311      	orrs	r1, r2
 800d904:	68ba      	ldr	r2, [r7, #8]
 800d906:	68d2      	ldr	r2, [r2, #12]
 800d908:	0412      	lsls	r2, r2, #16
 800d90a:	430a      	orrs	r2, r1
 800d90c:	ea43 0102 	orr.w	r1, r3, r2
 800d910:	68fb      	ldr	r3, [r7, #12]
 800d912:	687a      	ldr	r2, [r7, #4]
 800d914:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 800d918:	e005      	b.n	800d926 <FMC_NORSRAM_Extended_Timing_Init+0x5e>
                                                     Timing->AccessMode                                          |
                                                     ((Timing->BusTurnAroundDuration)  << FMC_BWTRx_BUSTURN_Pos)));
  }
  else
  {
    Device->BWTR[Bank] = 0x0FFFFFFFU;
 800d91a:	68fb      	ldr	r3, [r7, #12]
 800d91c:	687a      	ldr	r2, [r7, #4]
 800d91e:	f06f 4170 	mvn.w	r1, #4026531840	; 0xf0000000
 800d922:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  }

  return HAL_OK;
 800d926:	2300      	movs	r3, #0
}
 800d928:	4618      	mov	r0, r3
 800d92a:	3714      	adds	r7, #20
 800d92c:	46bd      	mov	sp, r7
 800d92e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d932:	4770      	bx	lr
 800d934:	cff00000 	.word	0xcff00000

0800d938 <FMC_SDRAM_Init>:
  * @param  Device Pointer to SDRAM device instance
  * @param  Init Pointer to SDRAM Initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_InitTypeDef *Init)
{
 800d938:	b480      	push	{r7}
 800d93a:	b083      	sub	sp, #12
 800d93c:	af00      	add	r7, sp, #0
 800d93e:	6078      	str	r0, [r7, #4]
 800d940:	6039      	str	r1, [r7, #0]
  assert_param(IS_FMC_SDCLOCK_PERIOD(Init->SDClockPeriod));
  assert_param(IS_FMC_READ_BURST(Init->ReadBurst));
  assert_param(IS_FMC_READPIPE_DELAY(Init->ReadPipeDelay));

  /* Set SDRAM bank configuration parameters */
  if (Init->SDBank == FMC_SDRAM_BANK1)
 800d942:	683b      	ldr	r3, [r7, #0]
 800d944:	681b      	ldr	r3, [r3, #0]
 800d946:	2b00      	cmp	r3, #0
 800d948:	d121      	bne.n	800d98e <FMC_SDRAM_Init+0x56>
  {
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 800d94a:	687b      	ldr	r3, [r7, #4]
 800d94c:	681a      	ldr	r2, [r3, #0]
 800d94e:	4b27      	ldr	r3, [pc, #156]	; (800d9ec <FMC_SDRAM_Init+0xb4>)
 800d950:	4013      	ands	r3, r2
 800d952:	683a      	ldr	r2, [r7, #0]
 800d954:	6851      	ldr	r1, [r2, #4]
 800d956:	683a      	ldr	r2, [r7, #0]
 800d958:	6892      	ldr	r2, [r2, #8]
 800d95a:	4311      	orrs	r1, r2
 800d95c:	683a      	ldr	r2, [r7, #0]
 800d95e:	68d2      	ldr	r2, [r2, #12]
 800d960:	4311      	orrs	r1, r2
 800d962:	683a      	ldr	r2, [r7, #0]
 800d964:	6912      	ldr	r2, [r2, #16]
 800d966:	4311      	orrs	r1, r2
 800d968:	683a      	ldr	r2, [r7, #0]
 800d96a:	6952      	ldr	r2, [r2, #20]
 800d96c:	4311      	orrs	r1, r2
 800d96e:	683a      	ldr	r2, [r7, #0]
 800d970:	6992      	ldr	r2, [r2, #24]
 800d972:	4311      	orrs	r1, r2
 800d974:	683a      	ldr	r2, [r7, #0]
 800d976:	69d2      	ldr	r2, [r2, #28]
 800d978:	4311      	orrs	r1, r2
 800d97a:	683a      	ldr	r2, [r7, #0]
 800d97c:	6a12      	ldr	r2, [r2, #32]
 800d97e:	4311      	orrs	r1, r2
 800d980:	683a      	ldr	r2, [r7, #0]
 800d982:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800d984:	430a      	orrs	r2, r1
 800d986:	431a      	orrs	r2, r3
 800d988:	687b      	ldr	r3, [r7, #4]
 800d98a:	601a      	str	r2, [r3, #0]
 800d98c:	e026      	b.n	800d9dc <FMC_SDRAM_Init+0xa4>
                Init->ReadBurst          |
                Init->ReadPipeDelay));
  }
  else /* FMC_Bank2_SDRAM */
  {
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 800d98e:	687b      	ldr	r3, [r7, #4]
 800d990:	681b      	ldr	r3, [r3, #0]
 800d992:	f423 42f8 	bic.w	r2, r3, #31744	; 0x7c00
 800d996:	683b      	ldr	r3, [r7, #0]
 800d998:	69d9      	ldr	r1, [r3, #28]
 800d99a:	683b      	ldr	r3, [r7, #0]
 800d99c:	6a1b      	ldr	r3, [r3, #32]
 800d99e:	4319      	orrs	r1, r3
 800d9a0:	683b      	ldr	r3, [r7, #0]
 800d9a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d9a4:	430b      	orrs	r3, r1
 800d9a6:	431a      	orrs	r2, r3
 800d9a8:	687b      	ldr	r3, [r7, #4]
 800d9aa:	601a      	str	r2, [r3, #0]
               FMC_SDCRx_RPIPE,
               (Init->SDClockPeriod      |
                Init->ReadBurst          |
                Init->ReadPipeDelay));

    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK2],
 800d9ac:	687b      	ldr	r3, [r7, #4]
 800d9ae:	685a      	ldr	r2, [r3, #4]
 800d9b0:	4b0e      	ldr	r3, [pc, #56]	; (800d9ec <FMC_SDRAM_Init+0xb4>)
 800d9b2:	4013      	ands	r3, r2
 800d9b4:	683a      	ldr	r2, [r7, #0]
 800d9b6:	6851      	ldr	r1, [r2, #4]
 800d9b8:	683a      	ldr	r2, [r7, #0]
 800d9ba:	6892      	ldr	r2, [r2, #8]
 800d9bc:	4311      	orrs	r1, r2
 800d9be:	683a      	ldr	r2, [r7, #0]
 800d9c0:	68d2      	ldr	r2, [r2, #12]
 800d9c2:	4311      	orrs	r1, r2
 800d9c4:	683a      	ldr	r2, [r7, #0]
 800d9c6:	6912      	ldr	r2, [r2, #16]
 800d9c8:	4311      	orrs	r1, r2
 800d9ca:	683a      	ldr	r2, [r7, #0]
 800d9cc:	6952      	ldr	r2, [r2, #20]
 800d9ce:	4311      	orrs	r1, r2
 800d9d0:	683a      	ldr	r2, [r7, #0]
 800d9d2:	6992      	ldr	r2, [r2, #24]
 800d9d4:	430a      	orrs	r2, r1
 800d9d6:	431a      	orrs	r2, r3
 800d9d8:	687b      	ldr	r3, [r7, #4]
 800d9da:	605a      	str	r2, [r3, #4]
                Init->InternalBankNumber |
                Init->CASLatency         |
                Init->WriteProtection));
  }

  return HAL_OK;
 800d9dc:	2300      	movs	r3, #0
}
 800d9de:	4618      	mov	r0, r3
 800d9e0:	370c      	adds	r7, #12
 800d9e2:	46bd      	mov	sp, r7
 800d9e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d9e8:	4770      	bx	lr
 800d9ea:	bf00      	nop
 800d9ec:	ffff8000 	.word	0xffff8000

0800d9f0 <FMC_SDRAM_Timing_Init>:
  * @param  Bank SDRAM bank number
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Timing_Init(FMC_SDRAM_TypeDef *Device,
                                        FMC_SDRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 800d9f0:	b480      	push	{r7}
 800d9f2:	b085      	sub	sp, #20
 800d9f4:	af00      	add	r7, sp, #0
 800d9f6:	60f8      	str	r0, [r7, #12]
 800d9f8:	60b9      	str	r1, [r7, #8]
 800d9fa:	607a      	str	r2, [r7, #4]
  assert_param(IS_FMC_RP_DELAY(Timing->RPDelay));
  assert_param(IS_FMC_RCD_DELAY(Timing->RCDDelay));
  assert_param(IS_FMC_SDRAM_BANK(Bank));

  /* Set SDRAM device timing parameters */
  if (Bank == FMC_SDRAM_BANK1)
 800d9fc:	687b      	ldr	r3, [r7, #4]
 800d9fe:	2b00      	cmp	r3, #0
 800da00:	d128      	bne.n	800da54 <FMC_SDRAM_Timing_Init+0x64>
  {
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 800da02:	68fb      	ldr	r3, [r7, #12]
 800da04:	689b      	ldr	r3, [r3, #8]
 800da06:	f003 4270 	and.w	r2, r3, #4026531840	; 0xf0000000
 800da0a:	68bb      	ldr	r3, [r7, #8]
 800da0c:	681b      	ldr	r3, [r3, #0]
 800da0e:	1e59      	subs	r1, r3, #1
 800da10:	68bb      	ldr	r3, [r7, #8]
 800da12:	685b      	ldr	r3, [r3, #4]
 800da14:	3b01      	subs	r3, #1
 800da16:	011b      	lsls	r3, r3, #4
 800da18:	4319      	orrs	r1, r3
 800da1a:	68bb      	ldr	r3, [r7, #8]
 800da1c:	689b      	ldr	r3, [r3, #8]
 800da1e:	3b01      	subs	r3, #1
 800da20:	021b      	lsls	r3, r3, #8
 800da22:	4319      	orrs	r1, r3
 800da24:	68bb      	ldr	r3, [r7, #8]
 800da26:	68db      	ldr	r3, [r3, #12]
 800da28:	3b01      	subs	r3, #1
 800da2a:	031b      	lsls	r3, r3, #12
 800da2c:	4319      	orrs	r1, r3
 800da2e:	68bb      	ldr	r3, [r7, #8]
 800da30:	691b      	ldr	r3, [r3, #16]
 800da32:	3b01      	subs	r3, #1
 800da34:	041b      	lsls	r3, r3, #16
 800da36:	4319      	orrs	r1, r3
 800da38:	68bb      	ldr	r3, [r7, #8]
 800da3a:	695b      	ldr	r3, [r3, #20]
 800da3c:	3b01      	subs	r3, #1
 800da3e:	051b      	lsls	r3, r3, #20
 800da40:	4319      	orrs	r1, r3
 800da42:	68bb      	ldr	r3, [r7, #8]
 800da44:	699b      	ldr	r3, [r3, #24]
 800da46:	3b01      	subs	r3, #1
 800da48:	061b      	lsls	r3, r3, #24
 800da4a:	430b      	orrs	r3, r1
 800da4c:	431a      	orrs	r2, r3
 800da4e:	68fb      	ldr	r3, [r7, #12]
 800da50:	609a      	str	r2, [r3, #8]
 800da52:	e02d      	b.n	800dab0 <FMC_SDRAM_Timing_Init+0xc0>
                (((Timing->RPDelay) - 1U)              << FMC_SDTRx_TRP_Pos)  |
                (((Timing->RCDDelay) - 1U)             << FMC_SDTRx_TRCD_Pos)));
  }
  else /* FMC_Bank2_SDRAM */
  {
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 800da54:	68fb      	ldr	r3, [r7, #12]
 800da56:	689a      	ldr	r2, [r3, #8]
 800da58:	4b19      	ldr	r3, [pc, #100]	; (800dac0 <FMC_SDRAM_Timing_Init+0xd0>)
 800da5a:	4013      	ands	r3, r2
 800da5c:	68ba      	ldr	r2, [r7, #8]
 800da5e:	68d2      	ldr	r2, [r2, #12]
 800da60:	3a01      	subs	r2, #1
 800da62:	0311      	lsls	r1, r2, #12
 800da64:	68ba      	ldr	r2, [r7, #8]
 800da66:	6952      	ldr	r2, [r2, #20]
 800da68:	3a01      	subs	r2, #1
 800da6a:	0512      	lsls	r2, r2, #20
 800da6c:	430a      	orrs	r2, r1
 800da6e:	431a      	orrs	r2, r3
 800da70:	68fb      	ldr	r3, [r7, #12]
 800da72:	609a      	str	r2, [r3, #8]
               FMC_SDTRx_TRC |
               FMC_SDTRx_TRP,
               (((Timing->RowCycleDelay) - 1U)         << FMC_SDTRx_TRC_Pos)  |
               (((Timing->RPDelay) - 1U)               << FMC_SDTRx_TRP_Pos));

    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK2],
 800da74:	68fb      	ldr	r3, [r7, #12]
 800da76:	68db      	ldr	r3, [r3, #12]
 800da78:	f003 4270 	and.w	r2, r3, #4026531840	; 0xf0000000
 800da7c:	68bb      	ldr	r3, [r7, #8]
 800da7e:	681b      	ldr	r3, [r3, #0]
 800da80:	1e59      	subs	r1, r3, #1
 800da82:	68bb      	ldr	r3, [r7, #8]
 800da84:	685b      	ldr	r3, [r3, #4]
 800da86:	3b01      	subs	r3, #1
 800da88:	011b      	lsls	r3, r3, #4
 800da8a:	4319      	orrs	r1, r3
 800da8c:	68bb      	ldr	r3, [r7, #8]
 800da8e:	689b      	ldr	r3, [r3, #8]
 800da90:	3b01      	subs	r3, #1
 800da92:	021b      	lsls	r3, r3, #8
 800da94:	4319      	orrs	r1, r3
 800da96:	68bb      	ldr	r3, [r7, #8]
 800da98:	691b      	ldr	r3, [r3, #16]
 800da9a:	3b01      	subs	r3, #1
 800da9c:	041b      	lsls	r3, r3, #16
 800da9e:	4319      	orrs	r1, r3
 800daa0:	68bb      	ldr	r3, [r7, #8]
 800daa2:	699b      	ldr	r3, [r3, #24]
 800daa4:	3b01      	subs	r3, #1
 800daa6:	061b      	lsls	r3, r3, #24
 800daa8:	430b      	orrs	r3, r1
 800daaa:	431a      	orrs	r2, r3
 800daac:	68fb      	ldr	r3, [r7, #12]
 800daae:	60da      	str	r2, [r3, #12]
                (((Timing->SelfRefreshTime) - 1U)      << FMC_SDTRx_TRAS_Pos) |
                (((Timing->WriteRecoveryTime) - 1U)    << FMC_SDTRx_TWR_Pos)  |
                (((Timing->RCDDelay) - 1U)             << FMC_SDTRx_TRCD_Pos)));
  }

  return HAL_OK;
 800dab0:	2300      	movs	r3, #0
}
 800dab2:	4618      	mov	r0, r3
 800dab4:	3714      	adds	r7, #20
 800dab6:	46bd      	mov	sp, r7
 800dab8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dabc:	4770      	bx	lr
 800dabe:	bf00      	nop
 800dac0:	ff0f0fff 	.word	0xff0f0fff

0800dac4 <SDMMC_Init>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Init: SDMMC initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_Init(SDMMC_TypeDef *SDMMCx, SDMMC_InitTypeDef Init)
{
 800dac4:	b084      	sub	sp, #16
 800dac6:	b480      	push	{r7}
 800dac8:	b085      	sub	sp, #20
 800daca:	af00      	add	r7, sp, #0
 800dacc:	6078      	str	r0, [r7, #4]
 800dace:	f107 001c 	add.w	r0, r7, #28
 800dad2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0;
 800dad6:	2300      	movs	r3, #0
 800dad8:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_BUS_WIDE(Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(Init.ClockDiv));

  /* Set SDMMC configuration parameters */
  tmpreg |= (Init.ClockEdge           | \
 800dada:	69fa      	ldr	r2, [r7, #28]
             Init.ClockPowerSave      | \
 800dadc:	6a3b      	ldr	r3, [r7, #32]
  tmpreg |= (Init.ClockEdge           | \
 800dade:	431a      	orrs	r2, r3
             Init.BusWide             | \
 800dae0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
             Init.ClockPowerSave      | \
 800dae2:	431a      	orrs	r2, r3
             Init.HardwareFlowControl | \
 800dae4:	6abb      	ldr	r3, [r7, #40]	; 0x28
             Init.BusWide             | \
 800dae6:	431a      	orrs	r2, r3
             Init.ClockDiv
 800dae8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
             Init.HardwareFlowControl | \
 800daea:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           | \
 800daec:	68fa      	ldr	r2, [r7, #12]
 800daee:	4313      	orrs	r3, r2
 800daf0:	60fb      	str	r3, [r7, #12]
            );

  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDMMCx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);
 800daf2:	687b      	ldr	r3, [r7, #4]
 800daf4:	685a      	ldr	r2, [r3, #4]
 800daf6:	4b07      	ldr	r3, [pc, #28]	; (800db14 <SDMMC_Init+0x50>)
 800daf8:	4013      	ands	r3, r2
 800dafa:	68fa      	ldr	r2, [r7, #12]
 800dafc:	431a      	orrs	r2, r3
 800dafe:	687b      	ldr	r3, [r7, #4]
 800db00:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 800db02:	2300      	movs	r3, #0
}
 800db04:	4618      	mov	r0, r3
 800db06:	3714      	adds	r7, #20
 800db08:	46bd      	mov	sp, r7
 800db0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800db0e:	b004      	add	sp, #16
 800db10:	4770      	bx	lr
 800db12:	bf00      	nop
 800db14:	ffc02c00 	.word	0xffc02c00

0800db18 <SDMMC_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling)
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_ReadFIFO(SDMMC_TypeDef *SDMMCx)
{
 800db18:	b480      	push	{r7}
 800db1a:	b083      	sub	sp, #12
 800db1c:	af00      	add	r7, sp, #0
 800db1e:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */
  return (SDMMCx->FIFO);
 800db20:	687b      	ldr	r3, [r7, #4]
 800db22:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
}
 800db26:	4618      	mov	r0, r3
 800db28:	370c      	adds	r7, #12
 800db2a:	46bd      	mov	sp, r7
 800db2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800db30:	4770      	bx	lr

0800db32 <SDMMC_WriteFIFO>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  pWriteData: pointer to data to write
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_WriteFIFO(SDMMC_TypeDef *SDMMCx, uint32_t *pWriteData)
{
 800db32:	b480      	push	{r7}
 800db34:	b083      	sub	sp, #12
 800db36:	af00      	add	r7, sp, #0
 800db38:	6078      	str	r0, [r7, #4]
 800db3a:	6039      	str	r1, [r7, #0]
  /* Write data to FIFO */
  SDMMCx->FIFO = *pWriteData;
 800db3c:	683b      	ldr	r3, [r7, #0]
 800db3e:	681a      	ldr	r2, [r3, #0]
 800db40:	687b      	ldr	r3, [r7, #4]
 800db42:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800db46:	2300      	movs	r3, #0
}
 800db48:	4618      	mov	r0, r3
 800db4a:	370c      	adds	r7, #12
 800db4c:	46bd      	mov	sp, r7
 800db4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800db52:	4770      	bx	lr

0800db54 <SDMMC_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_PowerState_ON(SDMMC_TypeDef *SDMMCx)
{
 800db54:	b480      	push	{r7}
 800db56:	b083      	sub	sp, #12
 800db58:	af00      	add	r7, sp, #0
 800db5a:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */
  SDMMCx->POWER |= SDMMC_POWER_PWRCTRL;
 800db5c:	687b      	ldr	r3, [r7, #4]
 800db5e:	681b      	ldr	r3, [r3, #0]
 800db60:	f043 0203 	orr.w	r2, r3, #3
 800db64:	687b      	ldr	r3, [r7, #4]
 800db66:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 800db68:	2300      	movs	r3, #0
}
 800db6a:	4618      	mov	r0, r3
 800db6c:	370c      	adds	r7, #12
 800db6e:	46bd      	mov	sp, r7
 800db70:	f85d 7b04 	ldr.w	r7, [sp], #4
 800db74:	4770      	bx	lr

0800db76 <SDMMC_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON
  */
uint32_t SDMMC_GetPowerState(SDMMC_TypeDef *SDMMCx)
{
 800db76:	b480      	push	{r7}
 800db78:	b083      	sub	sp, #12
 800db7a:	af00      	add	r7, sp, #0
 800db7c:	6078      	str	r0, [r7, #4]
  return (SDMMCx->POWER & SDMMC_POWER_PWRCTRL);
 800db7e:	687b      	ldr	r3, [r7, #4]
 800db80:	681b      	ldr	r3, [r3, #0]
 800db82:	f003 0303 	and.w	r3, r3, #3
}
 800db86:	4618      	mov	r0, r3
 800db88:	370c      	adds	r7, #12
 800db8a:	46bd      	mov	sp, r7
 800db8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800db90:	4770      	bx	lr
	...

0800db94 <SDMMC_SendCommand>:
  * @param  Command: pointer to a SDMMC_CmdInitTypeDef structure that contains
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_SendCommand(SDMMC_TypeDef *SDMMCx, SDMMC_CmdInitTypeDef *Command)
{
 800db94:	b480      	push	{r7}
 800db96:	b085      	sub	sp, #20
 800db98:	af00      	add	r7, sp, #0
 800db9a:	6078      	str	r0, [r7, #4]
 800db9c:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 800db9e:	2300      	movs	r3, #0
 800dba0:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_RESPONSE(Command->Response));
  assert_param(IS_SDMMC_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDMMC_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDMMCx->ARG = Command->Argument;
 800dba2:	683b      	ldr	r3, [r7, #0]
 800dba4:	681a      	ldr	r2, [r3, #0]
 800dba6:	687b      	ldr	r3, [r7, #4]
 800dba8:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         | \
 800dbaa:	683b      	ldr	r3, [r7, #0]
 800dbac:	685a      	ldr	r2, [r3, #4]
                       Command->Response         | \
 800dbae:	683b      	ldr	r3, [r7, #0]
 800dbb0:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         | \
 800dbb2:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt | \
 800dbb4:	683b      	ldr	r3, [r7, #0]
 800dbb6:	68db      	ldr	r3, [r3, #12]
                       Command->Response         | \
 800dbb8:	431a      	orrs	r2, r3
                       Command->CPSM);
 800dbba:	683b      	ldr	r3, [r7, #0]
 800dbbc:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt | \
 800dbbe:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         | \
 800dbc0:	68fa      	ldr	r2, [r7, #12]
 800dbc2:	4313      	orrs	r3, r2
 800dbc4:	60fb      	str	r3, [r7, #12]

  /* Write to SDMMC CMD register */
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800dbc6:	687b      	ldr	r3, [r7, #4]
 800dbc8:	68da      	ldr	r2, [r3, #12]
 800dbca:	4b06      	ldr	r3, [pc, #24]	; (800dbe4 <SDMMC_SendCommand+0x50>)
 800dbcc:	4013      	ands	r3, r2
 800dbce:	68fa      	ldr	r2, [r7, #12]
 800dbd0:	431a      	orrs	r2, r3
 800dbd2:	687b      	ldr	r3, [r7, #4]
 800dbd4:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800dbd6:	2300      	movs	r3, #0
}
 800dbd8:	4618      	mov	r0, r3
 800dbda:	3714      	adds	r7, #20
 800dbdc:	46bd      	mov	sp, r7
 800dbde:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dbe2:	4770      	bx	lr
 800dbe4:	fffee0c0 	.word	0xfffee0c0

0800dbe8 <SDMMC_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDMMC_GetCommandResponse(SDMMC_TypeDef *SDMMCx)
{
 800dbe8:	b480      	push	{r7}
 800dbea:	b083      	sub	sp, #12
 800dbec:	af00      	add	r7, sp, #0
 800dbee:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDMMCx->RESPCMD);
 800dbf0:	687b      	ldr	r3, [r7, #4]
 800dbf2:	691b      	ldr	r3, [r3, #16]
 800dbf4:	b2db      	uxtb	r3, r3
}
 800dbf6:	4618      	mov	r0, r3
 800dbf8:	370c      	adds	r7, #12
 800dbfa:	46bd      	mov	sp, r7
 800dbfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dc00:	4770      	bx	lr

0800dc02 <SDMMC_GetResponse>:
  *            @arg SDMMC_RESP3: Response Register 3
  *            @arg SDMMC_RESP4: Response Register 4
  * @retval The Corresponding response register value
  */
uint32_t SDMMC_GetResponse(SDMMC_TypeDef *SDMMCx, uint32_t Response)
{
 800dc02:	b480      	push	{r7}
 800dc04:	b085      	sub	sp, #20
 800dc06:	af00      	add	r7, sp, #0
 800dc08:	6078      	str	r0, [r7, #4]
 800dc0a:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDMMC_RESP(Response));

  /* Get the response */
  tmp = (uint32_t)(&(SDMMCx->RESP1)) + Response;
 800dc0c:	687b      	ldr	r3, [r7, #4]
 800dc0e:	3314      	adds	r3, #20
 800dc10:	461a      	mov	r2, r3
 800dc12:	683b      	ldr	r3, [r7, #0]
 800dc14:	4413      	add	r3, r2
 800dc16:	60fb      	str	r3, [r7, #12]

  return (*(__IO uint32_t *) tmp);
 800dc18:	68fb      	ldr	r3, [r7, #12]
 800dc1a:	681b      	ldr	r3, [r3, #0]
}
 800dc1c:	4618      	mov	r0, r3
 800dc1e:	3714      	adds	r7, #20
 800dc20:	46bd      	mov	sp, r7
 800dc22:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dc26:	4770      	bx	lr

0800dc28 <SDMMC_ConfigData>:
  * @param  Data : pointer to a SDMMC_DataInitTypeDef structure
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_ConfigData(SDMMC_TypeDef *SDMMCx, SDMMC_DataInitTypeDef *Data)
{
 800dc28:	b480      	push	{r7}
 800dc2a:	b085      	sub	sp, #20
 800dc2c:	af00      	add	r7, sp, #0
 800dc2e:	6078      	str	r0, [r7, #4]
 800dc30:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 800dc32:	2300      	movs	r3, #0
 800dc34:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDMMC_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDMMC_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDMMCx->DTIMER = Data->DataTimeOut;
 800dc36:	683b      	ldr	r3, [r7, #0]
 800dc38:	681a      	ldr	r2, [r3, #0]
 800dc3a:	687b      	ldr	r3, [r7, #4]
 800dc3c:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set the SDMMC DataLength value */
  SDMMCx->DLEN = Data->DataLength;
 800dc3e:	683b      	ldr	r3, [r7, #0]
 800dc40:	685a      	ldr	r2, [r3, #4]
 800dc42:	687b      	ldr	r3, [r7, #4]
 800dc44:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize | \
 800dc46:	683b      	ldr	r3, [r7, #0]
 800dc48:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   | \
 800dc4a:	683b      	ldr	r3, [r7, #0]
 800dc4c:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize | \
 800dc4e:	431a      	orrs	r2, r3
                       Data->TransferMode  | \
 800dc50:	683b      	ldr	r3, [r7, #0]
 800dc52:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   | \
 800dc54:	431a      	orrs	r2, r3
                       Data->DPSM);
 800dc56:	683b      	ldr	r3, [r7, #0]
 800dc58:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  | \
 800dc5a:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize | \
 800dc5c:	68fa      	ldr	r2, [r7, #12]
 800dc5e:	4313      	orrs	r3, r2
 800dc60:	60fb      	str	r3, [r7, #12]

  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDMMCx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 800dc62:	687b      	ldr	r3, [r7, #4]
 800dc64:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800dc66:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800dc6a:	68fb      	ldr	r3, [r7, #12]
 800dc6c:	431a      	orrs	r2, r3
 800dc6e:	687b      	ldr	r3, [r7, #4]
 800dc70:	62da      	str	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 800dc72:	2300      	movs	r3, #0

}
 800dc74:	4618      	mov	r0, r3
 800dc76:	3714      	adds	r7, #20
 800dc78:	46bd      	mov	sp, r7
 800dc7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dc7e:	4770      	bx	lr

0800dc80 <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Length command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDMMC_TypeDef *SDMMCx, uint32_t BlockSize)
{
 800dc80:	b580      	push	{r7, lr}
 800dc82:	b088      	sub	sp, #32
 800dc84:	af00      	add	r7, sp, #0
 800dc86:	6078      	str	r0, [r7, #4]
 800dc88:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 800dc8a:	683b      	ldr	r3, [r7, #0]
 800dc8c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 800dc8e:	2310      	movs	r3, #16
 800dc90:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800dc92:	f44f 7380 	mov.w	r3, #256	; 0x100
 800dc96:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800dc98:	2300      	movs	r3, #0
 800dc9a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800dc9c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800dca0:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800dca2:	f107 0308 	add.w	r3, r7, #8
 800dca6:	4619      	mov	r1, r3
 800dca8:	6878      	ldr	r0, [r7, #4]
 800dcaa:	f7ff ff73 	bl	800db94 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SET_BLOCKLEN, SDMMC_CMDTIMEOUT);
 800dcae:	f241 3288 	movw	r2, #5000	; 0x1388
 800dcb2:	2110      	movs	r1, #16
 800dcb4:	6878      	ldr	r0, [r7, #4]
 800dcb6:	f000 fa5f 	bl	800e178 <SDMMC_GetCmdResp1>
 800dcba:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800dcbc:	69fb      	ldr	r3, [r7, #28]
}
 800dcbe:	4618      	mov	r0, r3
 800dcc0:	3720      	adds	r7, #32
 800dcc2:	46bd      	mov	sp, r7
 800dcc4:	bd80      	pop	{r7, pc}

0800dcc6 <SDMMC_CmdReadSingleBlock>:
  * @brief  Send the Read Single Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadSingleBlock(SDMMC_TypeDef *SDMMCx, uint32_t ReadAdd)
{
 800dcc6:	b580      	push	{r7, lr}
 800dcc8:	b088      	sub	sp, #32
 800dcca:	af00      	add	r7, sp, #0
 800dccc:	6078      	str	r0, [r7, #4]
 800dcce:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 800dcd0:	683b      	ldr	r3, [r7, #0]
 800dcd2:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_SINGLE_BLOCK;
 800dcd4:	2311      	movs	r3, #17
 800dcd6:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800dcd8:	f44f 7380 	mov.w	r3, #256	; 0x100
 800dcdc:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800dcde:	2300      	movs	r3, #0
 800dce0:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800dce2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800dce6:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800dce8:	f107 0308 	add.w	r3, r7, #8
 800dcec:	4619      	mov	r1, r3
 800dcee:	6878      	ldr	r0, [r7, #4]
 800dcf0:	f7ff ff50 	bl	800db94 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 800dcf4:	f241 3288 	movw	r2, #5000	; 0x1388
 800dcf8:	2111      	movs	r1, #17
 800dcfa:	6878      	ldr	r0, [r7, #4]
 800dcfc:	f000 fa3c 	bl	800e178 <SDMMC_GetCmdResp1>
 800dd00:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800dd02:	69fb      	ldr	r3, [r7, #28]
}
 800dd04:	4618      	mov	r0, r3
 800dd06:	3720      	adds	r7, #32
 800dd08:	46bd      	mov	sp, r7
 800dd0a:	bd80      	pop	{r7, pc}

0800dd0c <SDMMC_CmdReadMultiBlock>:
  * @brief  Send the Read Multi Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadMultiBlock(SDMMC_TypeDef *SDMMCx, uint32_t ReadAdd)
{
 800dd0c:	b580      	push	{r7, lr}
 800dd0e:	b088      	sub	sp, #32
 800dd10:	af00      	add	r7, sp, #0
 800dd12:	6078      	str	r0, [r7, #4]
 800dd14:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 800dd16:	683b      	ldr	r3, [r7, #0]
 800dd18:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_MULT_BLOCK;
 800dd1a:	2312      	movs	r3, #18
 800dd1c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800dd1e:	f44f 7380 	mov.w	r3, #256	; 0x100
 800dd22:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800dd24:	2300      	movs	r3, #0
 800dd26:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800dd28:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800dd2c:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800dd2e:	f107 0308 	add.w	r3, r7, #8
 800dd32:	4619      	mov	r1, r3
 800dd34:	6878      	ldr	r0, [r7, #4]
 800dd36:	f7ff ff2d 	bl	800db94 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 800dd3a:	f241 3288 	movw	r2, #5000	; 0x1388
 800dd3e:	2112      	movs	r1, #18
 800dd40:	6878      	ldr	r0, [r7, #4]
 800dd42:	f000 fa19 	bl	800e178 <SDMMC_GetCmdResp1>
 800dd46:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800dd48:	69fb      	ldr	r3, [r7, #28]
}
 800dd4a:	4618      	mov	r0, r3
 800dd4c:	3720      	adds	r7, #32
 800dd4e:	46bd      	mov	sp, r7
 800dd50:	bd80      	pop	{r7, pc}

0800dd52 <SDMMC_CmdWriteSingleBlock>:
  * @brief  Send the Write Single Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteSingleBlock(SDMMC_TypeDef *SDMMCx, uint32_t WriteAdd)
{
 800dd52:	b580      	push	{r7, lr}
 800dd54:	b088      	sub	sp, #32
 800dd56:	af00      	add	r7, sp, #0
 800dd58:	6078      	str	r0, [r7, #4]
 800dd5a:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 800dd5c:	683b      	ldr	r3, [r7, #0]
 800dd5e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_SINGLE_BLOCK;
 800dd60:	2318      	movs	r3, #24
 800dd62:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800dd64:	f44f 7380 	mov.w	r3, #256	; 0x100
 800dd68:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800dd6a:	2300      	movs	r3, #0
 800dd6c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800dd6e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800dd72:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800dd74:	f107 0308 	add.w	r3, r7, #8
 800dd78:	4619      	mov	r1, r3
 800dd7a:	6878      	ldr	r0, [r7, #4]
 800dd7c:	f7ff ff0a 	bl	800db94 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 800dd80:	f241 3288 	movw	r2, #5000	; 0x1388
 800dd84:	2118      	movs	r1, #24
 800dd86:	6878      	ldr	r0, [r7, #4]
 800dd88:	f000 f9f6 	bl	800e178 <SDMMC_GetCmdResp1>
 800dd8c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800dd8e:	69fb      	ldr	r3, [r7, #28]
}
 800dd90:	4618      	mov	r0, r3
 800dd92:	3720      	adds	r7, #32
 800dd94:	46bd      	mov	sp, r7
 800dd96:	bd80      	pop	{r7, pc}

0800dd98 <SDMMC_CmdWriteMultiBlock>:
  * @brief  Send the Write Multi Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteMultiBlock(SDMMC_TypeDef *SDMMCx, uint32_t WriteAdd)
{
 800dd98:	b580      	push	{r7, lr}
 800dd9a:	b088      	sub	sp, #32
 800dd9c:	af00      	add	r7, sp, #0
 800dd9e:	6078      	str	r0, [r7, #4]
 800dda0:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 800dda2:	683b      	ldr	r3, [r7, #0]
 800dda4:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_MULT_BLOCK;
 800dda6:	2319      	movs	r3, #25
 800dda8:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800ddaa:	f44f 7380 	mov.w	r3, #256	; 0x100
 800ddae:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800ddb0:	2300      	movs	r3, #0
 800ddb2:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800ddb4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800ddb8:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800ddba:	f107 0308 	add.w	r3, r7, #8
 800ddbe:	4619      	mov	r1, r3
 800ddc0:	6878      	ldr	r0, [r7, #4]
 800ddc2:	f7ff fee7 	bl	800db94 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 800ddc6:	f241 3288 	movw	r2, #5000	; 0x1388
 800ddca:	2119      	movs	r1, #25
 800ddcc:	6878      	ldr	r0, [r7, #4]
 800ddce:	f000 f9d3 	bl	800e178 <SDMMC_GetCmdResp1>
 800ddd2:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800ddd4:	69fb      	ldr	r3, [r7, #28]
}
 800ddd6:	4618      	mov	r0, r3
 800ddd8:	3720      	adds	r7, #32
 800ddda:	46bd      	mov	sp, r7
 800dddc:	bd80      	pop	{r7, pc}
	...

0800dde0 <SDMMC_CmdStopTransfer>:
  * @brief  Send the Stop Transfer command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdStopTransfer(SDMMC_TypeDef *SDMMCx)
{
 800dde0:	b580      	push	{r7, lr}
 800dde2:	b088      	sub	sp, #32
 800dde4:	af00      	add	r7, sp, #0
 800dde6:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD12 STOP_TRANSMISSION  */
  sdmmc_cmdinit.Argument         = 0U;
 800dde8:	2300      	movs	r3, #0
 800ddea:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 800ddec:	230c      	movs	r3, #12
 800ddee:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800ddf0:	f44f 7380 	mov.w	r3, #256	; 0x100
 800ddf4:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800ddf6:	2300      	movs	r3, #0
 800ddf8:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800ddfa:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800ddfe:	61bb      	str	r3, [r7, #24]

  __SDMMC_CMDSTOP_ENABLE(SDMMCx);
 800de00:	687b      	ldr	r3, [r7, #4]
 800de02:	68db      	ldr	r3, [r3, #12]
 800de04:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800de08:	687b      	ldr	r3, [r7, #4]
 800de0a:	60da      	str	r2, [r3, #12]
  __SDMMC_CMDTRANS_DISABLE(SDMMCx);
 800de0c:	687b      	ldr	r3, [r7, #4]
 800de0e:	68db      	ldr	r3, [r3, #12]
 800de10:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 800de14:	687b      	ldr	r3, [r7, #4]
 800de16:	60da      	str	r2, [r3, #12]

  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800de18:	f107 0308 	add.w	r3, r7, #8
 800de1c:	4619      	mov	r1, r3
 800de1e:	6878      	ldr	r0, [r7, #4]
 800de20:	f7ff feb8 	bl	800db94 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_STOP_TRANSMISSION, SDMMC_STOPTRANSFERTIMEOUT);
 800de24:	4a0b      	ldr	r2, [pc, #44]	; (800de54 <SDMMC_CmdStopTransfer+0x74>)
 800de26:	210c      	movs	r1, #12
 800de28:	6878      	ldr	r0, [r7, #4]
 800de2a:	f000 f9a5 	bl	800e178 <SDMMC_GetCmdResp1>
 800de2e:	61f8      	str	r0, [r7, #28]

  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
 800de30:	687b      	ldr	r3, [r7, #4]
 800de32:	68db      	ldr	r3, [r3, #12]
 800de34:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800de38:	687b      	ldr	r3, [r7, #4]
 800de3a:	60da      	str	r2, [r3, #12]

  /* Ignore Address Out Of Range Error, Not relevant at end of memory */
  if (errorstate == SDMMC_ERROR_ADDR_OUT_OF_RANGE)
 800de3c:	69fb      	ldr	r3, [r7, #28]
 800de3e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800de42:	d101      	bne.n	800de48 <SDMMC_CmdStopTransfer+0x68>
  {
    errorstate = SDMMC_ERROR_NONE;
 800de44:	2300      	movs	r3, #0
 800de46:	61fb      	str	r3, [r7, #28]
  }

  return errorstate;
 800de48:	69fb      	ldr	r3, [r7, #28]
}
 800de4a:	4618      	mov	r0, r3
 800de4c:	3720      	adds	r7, #32
 800de4e:	46bd      	mov	sp, r7
 800de50:	bd80      	pop	{r7, pc}
 800de52:	bf00      	nop
 800de54:	05f5e100 	.word	0x05f5e100

0800de58 <SDMMC_CmdSelDesel>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  addr: Address of the card to be selected
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDMMC_TypeDef *SDMMCx, uint32_t Addr)
{
 800de58:	b580      	push	{r7, lr}
 800de5a:	b088      	sub	sp, #32
 800de5c:	af00      	add	r7, sp, #0
 800de5e:	6078      	str	r0, [r7, #4]
 800de60:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 800de62:	683b      	ldr	r3, [r7, #0]
 800de64:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 800de66:	2307      	movs	r3, #7
 800de68:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800de6a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800de6e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800de70:	2300      	movs	r3, #0
 800de72:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800de74:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800de78:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800de7a:	f107 0308 	add.w	r3, r7, #8
 800de7e:	4619      	mov	r1, r3
 800de80:	6878      	ldr	r0, [r7, #4]
 800de82:	f7ff fe87 	bl	800db94 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEL_DESEL_CARD, SDMMC_CMDTIMEOUT);
 800de86:	f241 3288 	movw	r2, #5000	; 0x1388
 800de8a:	2107      	movs	r1, #7
 800de8c:	6878      	ldr	r0, [r7, #4]
 800de8e:	f000 f973 	bl	800e178 <SDMMC_GetCmdResp1>
 800de92:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800de94:	69fb      	ldr	r3, [r7, #28]
}
 800de96:	4618      	mov	r0, r3
 800de98:	3720      	adds	r7, #32
 800de9a:	46bd      	mov	sp, r7
 800de9c:	bd80      	pop	{r7, pc}

0800de9e <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDMMC_TypeDef *SDMMCx)
{
 800de9e:	b580      	push	{r7, lr}
 800dea0:	b088      	sub	sp, #32
 800dea2:	af00      	add	r7, sp, #0
 800dea4:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = 0U;
 800dea6:	2300      	movs	r3, #0
 800dea8:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 800deaa:	2300      	movs	r3, #0
 800deac:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_NO;
 800deae:	2300      	movs	r3, #0
 800deb0:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800deb2:	2300      	movs	r3, #0
 800deb4:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800deb6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800deba:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800debc:	f107 0308 	add.w	r3, r7, #8
 800dec0:	4619      	mov	r1, r3
 800dec2:	6878      	ldr	r0, [r7, #4]
 800dec4:	f7ff fe66 	bl	800db94 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDMMCx);
 800dec8:	6878      	ldr	r0, [r7, #4]
 800deca:	f000 fb97 	bl	800e5fc <SDMMC_GetCmdError>
 800dece:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800ded0:	69fb      	ldr	r3, [r7, #28]
}
 800ded2:	4618      	mov	r0, r3
 800ded4:	3720      	adds	r7, #32
 800ded6:	46bd      	mov	sp, r7
 800ded8:	bd80      	pop	{r7, pc}

0800deda <SDMMC_CmdOperCond>:
  * @brief  Send the Operating Condition command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdOperCond(SDMMC_TypeDef *SDMMCx)
{
 800deda:	b580      	push	{r7, lr}
 800dedc:	b088      	sub	sp, #32
 800dede:	af00      	add	r7, sp, #0
 800dee0:	6078      	str	r0, [r7, #4]
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 800dee2:	f44f 73d5 	mov.w	r3, #426	; 0x1aa
 800dee6:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 800dee8:	2308      	movs	r3, #8
 800deea:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800deec:	f44f 7380 	mov.w	r3, #256	; 0x100
 800def0:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800def2:	2300      	movs	r3, #0
 800def4:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800def6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800defa:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800defc:	f107 0308 	add.w	r3, r7, #8
 800df00:	4619      	mov	r1, r3
 800df02:	6878      	ldr	r0, [r7, #4]
 800df04:	f7ff fe46 	bl	800db94 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp7(SDMMCx);
 800df08:	6878      	ldr	r0, [r7, #4]
 800df0a:	f000 fb29 	bl	800e560 <SDMMC_GetCmdResp7>
 800df0e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800df10:	69fb      	ldr	r3, [r7, #28]
}
 800df12:	4618      	mov	r0, r3
 800df14:	3720      	adds	r7, #32
 800df16:	46bd      	mov	sp, r7
 800df18:	bd80      	pop	{r7, pc}

0800df1a <SDMMC_CmdAppCommand>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800df1a:	b580      	push	{r7, lr}
 800df1c:	b088      	sub	sp, #32
 800df1e:	af00      	add	r7, sp, #0
 800df20:	6078      	str	r0, [r7, #4]
 800df22:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 800df24:	683b      	ldr	r3, [r7, #0]
 800df26:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 800df28:	2337      	movs	r3, #55	; 0x37
 800df2a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800df2c:	f44f 7380 	mov.w	r3, #256	; 0x100
 800df30:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800df32:	2300      	movs	r3, #0
 800df34:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800df36:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800df3a:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800df3c:	f107 0308 	add.w	r3, r7, #8
 800df40:	4619      	mov	r1, r3
 800df42:	6878      	ldr	r0, [r7, #4]
 800df44:	f7ff fe26 	bl	800db94 <SDMMC_SendCommand>

  /* Check for error conditions */
  /* If there is a HAL_ERROR, it is a MMC card, else
  it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_CMD, SDMMC_CMDTIMEOUT);
 800df48:	f241 3288 	movw	r2, #5000	; 0x1388
 800df4c:	2137      	movs	r1, #55	; 0x37
 800df4e:	6878      	ldr	r0, [r7, #4]
 800df50:	f000 f912 	bl	800e178 <SDMMC_GetCmdResp1>
 800df54:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800df56:	69fb      	ldr	r3, [r7, #28]
}
 800df58:	4618      	mov	r0, r3
 800df5a:	3720      	adds	r7, #32
 800df5c:	46bd      	mov	sp, r7
 800df5e:	bd80      	pop	{r7, pc}

0800df60 <SDMMC_CmdAppOperCommand>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppOperCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800df60:	b580      	push	{r7, lr}
 800df62:	b088      	sub	sp, #32
 800df64:	af00      	add	r7, sp, #0
 800df66:	6078      	str	r0, [r7, #4]
 800df68:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = Argument;
 800df6a:	683b      	ldr	r3, [r7, #0]
 800df6c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 800df6e:	2329      	movs	r3, #41	; 0x29
 800df70:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800df72:	f44f 7380 	mov.w	r3, #256	; 0x100
 800df76:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800df78:	2300      	movs	r3, #0
 800df7a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800df7c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800df80:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800df82:	f107 0308 	add.w	r3, r7, #8
 800df86:	4619      	mov	r1, r3
 800df88:	6878      	ldr	r0, [r7, #4]
 800df8a:	f7ff fe03 	bl	800db94 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDMMCx);
 800df8e:	6878      	ldr	r0, [r7, #4]
 800df90:	f000 fa2e 	bl	800e3f0 <SDMMC_GetCmdResp3>
 800df94:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800df96:	69fb      	ldr	r3, [r7, #28]
}
 800df98:	4618      	mov	r0, r3
 800df9a:	3720      	adds	r7, #32
 800df9c:	46bd      	mov	sp, r7
 800df9e:	bd80      	pop	{r7, pc}

0800dfa0 <SDMMC_CmdBusWidth>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  BusWidth: BusWidth
  * @retval HAL status
  */
uint32_t SDMMC_CmdBusWidth(SDMMC_TypeDef *SDMMCx, uint32_t BusWidth)
{
 800dfa0:	b580      	push	{r7, lr}
 800dfa2:	b088      	sub	sp, #32
 800dfa4:	af00      	add	r7, sp, #0
 800dfa6:	6078      	str	r0, [r7, #4]
 800dfa8:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = (uint32_t)BusWidth;
 800dfaa:	683b      	ldr	r3, [r7, #0]
 800dfac:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_SD_SET_BUSWIDTH;
 800dfae:	2306      	movs	r3, #6
 800dfb0:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800dfb2:	f44f 7380 	mov.w	r3, #256	; 0x100
 800dfb6:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800dfb8:	2300      	movs	r3, #0
 800dfba:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800dfbc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800dfc0:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800dfc2:	f107 0308 	add.w	r3, r7, #8
 800dfc6:	4619      	mov	r1, r3
 800dfc8:	6878      	ldr	r0, [r7, #4]
 800dfca:	f7ff fde3 	bl	800db94 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_SD_SET_BUSWIDTH, SDMMC_CMDTIMEOUT);
 800dfce:	f241 3288 	movw	r2, #5000	; 0x1388
 800dfd2:	2106      	movs	r1, #6
 800dfd4:	6878      	ldr	r0, [r7, #4]
 800dfd6:	f000 f8cf 	bl	800e178 <SDMMC_GetCmdResp1>
 800dfda:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800dfdc:	69fb      	ldr	r3, [r7, #28]
}
 800dfde:	4618      	mov	r0, r3
 800dfe0:	3720      	adds	r7, #32
 800dfe2:	46bd      	mov	sp, r7
 800dfe4:	bd80      	pop	{r7, pc}

0800dfe6 <SDMMC_CmdSendSCR>:
  * @brief  Send the Send SCR command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendSCR(SDMMC_TypeDef *SDMMCx)
{
 800dfe6:	b580      	push	{r7, lr}
 800dfe8:	b088      	sub	sp, #32
 800dfea:	af00      	add	r7, sp, #0
 800dfec:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD51 SD_APP_SEND_SCR */
  sdmmc_cmdinit.Argument         = 0U;
 800dfee:	2300      	movs	r3, #0
 800dff0:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_SEND_SCR;
 800dff2:	2333      	movs	r3, #51	; 0x33
 800dff4:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800dff6:	f44f 7380 	mov.w	r3, #256	; 0x100
 800dffa:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800dffc:	2300      	movs	r3, #0
 800dffe:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800e000:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800e004:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800e006:	f107 0308 	add.w	r3, r7, #8
 800e00a:	4619      	mov	r1, r3
 800e00c:	6878      	ldr	r0, [r7, #4]
 800e00e:	f7ff fdc1 	bl	800db94 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SD_APP_SEND_SCR, SDMMC_CMDTIMEOUT);
 800e012:	f241 3288 	movw	r2, #5000	; 0x1388
 800e016:	2133      	movs	r1, #51	; 0x33
 800e018:	6878      	ldr	r0, [r7, #4]
 800e01a:	f000 f8ad 	bl	800e178 <SDMMC_GetCmdResp1>
 800e01e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800e020:	69fb      	ldr	r3, [r7, #28]
}
 800e022:	4618      	mov	r0, r3
 800e024:	3720      	adds	r7, #32
 800e026:	46bd      	mov	sp, r7
 800e028:	bd80      	pop	{r7, pc}

0800e02a <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDMMC_TypeDef *SDMMCx)
{
 800e02a:	b580      	push	{r7, lr}
 800e02c:	b088      	sub	sp, #32
 800e02e:	af00      	add	r7, sp, #0
 800e030:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0U;
 800e032:	2300      	movs	r3, #0
 800e034:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 800e036:	2302      	movs	r3, #2
 800e038:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 800e03a:	f44f 7340 	mov.w	r3, #768	; 0x300
 800e03e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800e040:	2300      	movs	r3, #0
 800e042:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800e044:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800e048:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800e04a:	f107 0308 	add.w	r3, r7, #8
 800e04e:	4619      	mov	r1, r3
 800e050:	6878      	ldr	r0, [r7, #4]
 800e052:	f7ff fd9f 	bl	800db94 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 800e056:	6878      	ldr	r0, [r7, #4]
 800e058:	f000 f980 	bl	800e35c <SDMMC_GetCmdResp2>
 800e05c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800e05e:	69fb      	ldr	r3, [r7, #28]
}
 800e060:	4618      	mov	r0, r3
 800e062:	3720      	adds	r7, #32
 800e064:	46bd      	mov	sp, r7
 800e066:	bd80      	pop	{r7, pc}

0800e068 <SDMMC_CmdSendCSD>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800e068:	b580      	push	{r7, lr}
 800e06a:	b088      	sub	sp, #32
 800e06c:	af00      	add	r7, sp, #0
 800e06e:	6078      	str	r0, [r7, #4]
 800e070:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = Argument;
 800e072:	683b      	ldr	r3, [r7, #0]
 800e074:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 800e076:	2309      	movs	r3, #9
 800e078:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 800e07a:	f44f 7340 	mov.w	r3, #768	; 0x300
 800e07e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800e080:	2300      	movs	r3, #0
 800e082:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800e084:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800e088:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800e08a:	f107 0308 	add.w	r3, r7, #8
 800e08e:	4619      	mov	r1, r3
 800e090:	6878      	ldr	r0, [r7, #4]
 800e092:	f7ff fd7f 	bl	800db94 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 800e096:	6878      	ldr	r0, [r7, #4]
 800e098:	f000 f960 	bl	800e35c <SDMMC_GetCmdResp2>
 800e09c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800e09e:	69fb      	ldr	r3, [r7, #28]
}
 800e0a0:	4618      	mov	r0, r3
 800e0a2:	3720      	adds	r7, #32
 800e0a4:	46bd      	mov	sp, r7
 800e0a6:	bd80      	pop	{r7, pc}

0800e0a8 <SDMMC_CmdSetRelAdd>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  pRCA: Card RCA
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDMMC_TypeDef *SDMMCx, uint16_t *pRCA)
{
 800e0a8:	b580      	push	{r7, lr}
 800e0aa:	b088      	sub	sp, #32
 800e0ac:	af00      	add	r7, sp, #0
 800e0ae:	6078      	str	r0, [r7, #4]
 800e0b0:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0U;
 800e0b2:	2300      	movs	r3, #0
 800e0b4:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 800e0b6:	2303      	movs	r3, #3
 800e0b8:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800e0ba:	f44f 7380 	mov.w	r3, #256	; 0x100
 800e0be:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800e0c0:	2300      	movs	r3, #0
 800e0c2:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800e0c4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800e0c8:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800e0ca:	f107 0308 	add.w	r3, r7, #8
 800e0ce:	4619      	mov	r1, r3
 800e0d0:	6878      	ldr	r0, [r7, #4]
 800e0d2:	f7ff fd5f 	bl	800db94 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDMMCx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 800e0d6:	683a      	ldr	r2, [r7, #0]
 800e0d8:	2103      	movs	r1, #3
 800e0da:	6878      	ldr	r0, [r7, #4]
 800e0dc:	f000 f9c8 	bl	800e470 <SDMMC_GetCmdResp6>
 800e0e0:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800e0e2:	69fb      	ldr	r3, [r7, #28]
}
 800e0e4:	4618      	mov	r0, r3
 800e0e6:	3720      	adds	r7, #32
 800e0e8:	46bd      	mov	sp, r7
 800e0ea:	bd80      	pop	{r7, pc}

0800e0ec <SDMMC_CmdSendStatus>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendStatus(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800e0ec:	b580      	push	{r7, lr}
 800e0ee:	b088      	sub	sp, #32
 800e0f0:	af00      	add	r7, sp, #0
 800e0f2:	6078      	str	r0, [r7, #4]
 800e0f4:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = Argument;
 800e0f6:	683b      	ldr	r3, [r7, #0]
 800e0f8:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 800e0fa:	230d      	movs	r3, #13
 800e0fc:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800e0fe:	f44f 7380 	mov.w	r3, #256	; 0x100
 800e102:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800e104:	2300      	movs	r3, #0
 800e106:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800e108:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800e10c:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800e10e:	f107 0308 	add.w	r3, r7, #8
 800e112:	4619      	mov	r1, r3
 800e114:	6878      	ldr	r0, [r7, #4]
 800e116:	f7ff fd3d 	bl	800db94 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEND_STATUS, SDMMC_CMDTIMEOUT);
 800e11a:	f241 3288 	movw	r2, #5000	; 0x1388
 800e11e:	210d      	movs	r1, #13
 800e120:	6878      	ldr	r0, [r7, #4]
 800e122:	f000 f829 	bl	800e178 <SDMMC_GetCmdResp1>
 800e126:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800e128:	69fb      	ldr	r3, [r7, #28]
}
 800e12a:	4618      	mov	r0, r3
 800e12c:	3720      	adds	r7, #32
 800e12e:	46bd      	mov	sp, r7
 800e130:	bd80      	pop	{r7, pc}

0800e132 <SDMMC_CmdStatusRegister>:
  * @brief  Send the Status register command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdStatusRegister(SDMMC_TypeDef *SDMMCx)
{
 800e132:	b580      	push	{r7, lr}
 800e134:	b088      	sub	sp, #32
 800e136:	af00      	add	r7, sp, #0
 800e138:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = 0U;
 800e13a:	2300      	movs	r3, #0
 800e13c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_STATUS;
 800e13e:	230d      	movs	r3, #13
 800e140:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800e142:	f44f 7380 	mov.w	r3, #256	; 0x100
 800e146:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800e148:	2300      	movs	r3, #0
 800e14a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800e14c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800e150:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800e152:	f107 0308 	add.w	r3, r7, #8
 800e156:	4619      	mov	r1, r3
 800e158:	6878      	ldr	r0, [r7, #4]
 800e15a:	f7ff fd1b 	bl	800db94 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SD_APP_STATUS, SDMMC_CMDTIMEOUT);
 800e15e:	f241 3288 	movw	r2, #5000	; 0x1388
 800e162:	210d      	movs	r1, #13
 800e164:	6878      	ldr	r0, [r7, #4]
 800e166:	f000 f807 	bl	800e178 <SDMMC_GetCmdResp1>
 800e16a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800e16c:	69fb      	ldr	r3, [r7, #28]
}
 800e16e:	4618      	mov	r0, r3
 800e170:	3720      	adds	r7, #32
 800e172:	46bd      	mov	sp, r7
 800e174:	bd80      	pop	{r7, pc}
	...

0800e178 <SDMMC_GetCmdResp1>:
  * @param  hsd: SD handle
  * @param  SD_CMD: The sent command index
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp1(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint32_t Timeout)
{
 800e178:	b580      	push	{r7, lr}
 800e17a:	b088      	sub	sp, #32
 800e17c:	af00      	add	r7, sp, #0
 800e17e:	60f8      	str	r0, [r7, #12]
 800e180:	460b      	mov	r3, r1
 800e182:	607a      	str	r2, [r7, #4]
 800e184:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 800e186:	4b70      	ldr	r3, [pc, #448]	; (800e348 <SDMMC_GetCmdResp1+0x1d0>)
 800e188:	681b      	ldr	r3, [r3, #0]
 800e18a:	4a70      	ldr	r2, [pc, #448]	; (800e34c <SDMMC_GetCmdResp1+0x1d4>)
 800e18c:	fba2 2303 	umull	r2, r3, r2, r3
 800e190:	0a5a      	lsrs	r2, r3, #9
 800e192:	687b      	ldr	r3, [r7, #4]
 800e194:	fb02 f303 	mul.w	r3, r2, r3
 800e198:	61fb      	str	r3, [r7, #28]

  do
  {
    if (count-- == 0U)
 800e19a:	69fb      	ldr	r3, [r7, #28]
 800e19c:	1e5a      	subs	r2, r3, #1
 800e19e:	61fa      	str	r2, [r7, #28]
 800e1a0:	2b00      	cmp	r3, #0
 800e1a2:	d102      	bne.n	800e1aa <SDMMC_GetCmdResp1+0x32>
    {
      return SDMMC_ERROR_TIMEOUT;
 800e1a4:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800e1a8:	e0c9      	b.n	800e33e <SDMMC_GetCmdResp1+0x1c6>
    }
    sta_reg = SDMMCx->STA;
 800e1aa:	68fb      	ldr	r3, [r7, #12]
 800e1ac:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e1ae:	61bb      	str	r3, [r7, #24]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT |
 800e1b0:	69ba      	ldr	r2, [r7, #24]
 800e1b2:	4b67      	ldr	r3, [pc, #412]	; (800e350 <SDMMC_GetCmdResp1+0x1d8>)
 800e1b4:	4013      	ands	r3, r2
                        SDMMC_FLAG_BUSYD0END)) == 0U) || ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 800e1b6:	2b00      	cmp	r3, #0
 800e1b8:	d0ef      	beq.n	800e19a <SDMMC_GetCmdResp1+0x22>
 800e1ba:	69bb      	ldr	r3, [r7, #24]
 800e1bc:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800e1c0:	2b00      	cmp	r3, #0
 800e1c2:	d1ea      	bne.n	800e19a <SDMMC_GetCmdResp1+0x22>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800e1c4:	68fb      	ldr	r3, [r7, #12]
 800e1c6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e1c8:	f003 0304 	and.w	r3, r3, #4
 800e1cc:	2b00      	cmp	r3, #0
 800e1ce:	d004      	beq.n	800e1da <SDMMC_GetCmdResp1+0x62>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800e1d0:	68fb      	ldr	r3, [r7, #12]
 800e1d2:	2204      	movs	r2, #4
 800e1d4:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800e1d6:	2304      	movs	r3, #4
 800e1d8:	e0b1      	b.n	800e33e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800e1da:	68fb      	ldr	r3, [r7, #12]
 800e1dc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e1de:	f003 0301 	and.w	r3, r3, #1
 800e1e2:	2b00      	cmp	r3, #0
 800e1e4:	d004      	beq.n	800e1f0 <SDMMC_GetCmdResp1+0x78>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800e1e6:	68fb      	ldr	r3, [r7, #12]
 800e1e8:	2201      	movs	r2, #1
 800e1ea:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 800e1ec:	2301      	movs	r3, #1
 800e1ee:	e0a6      	b.n	800e33e <SDMMC_GetCmdResp1+0x1c6>
  {
    /* Nothing to do */
  }

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800e1f0:	68fb      	ldr	r3, [r7, #12]
 800e1f2:	4a58      	ldr	r2, [pc, #352]	; (800e354 <SDMMC_GetCmdResp1+0x1dc>)
 800e1f4:	639a      	str	r2, [r3, #56]	; 0x38

  /* Check response received is of desired command */
  if (SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 800e1f6:	68f8      	ldr	r0, [r7, #12]
 800e1f8:	f7ff fcf6 	bl	800dbe8 <SDMMC_GetCommandResponse>
 800e1fc:	4603      	mov	r3, r0
 800e1fe:	461a      	mov	r2, r3
 800e200:	7afb      	ldrb	r3, [r7, #11]
 800e202:	4293      	cmp	r3, r2
 800e204:	d001      	beq.n	800e20a <SDMMC_GetCmdResp1+0x92>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800e206:	2301      	movs	r3, #1
 800e208:	e099      	b.n	800e33e <SDMMC_GetCmdResp1+0x1c6>
  }

  /* We have received response, retrieve it for analysis  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 800e20a:	2100      	movs	r1, #0
 800e20c:	68f8      	ldr	r0, [r7, #12]
 800e20e:	f7ff fcf8 	bl	800dc02 <SDMMC_GetResponse>
 800e212:	6178      	str	r0, [r7, #20]

  if ((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 800e214:	697a      	ldr	r2, [r7, #20]
 800e216:	4b50      	ldr	r3, [pc, #320]	; (800e358 <SDMMC_GetCmdResp1+0x1e0>)
 800e218:	4013      	ands	r3, r2
 800e21a:	2b00      	cmp	r3, #0
 800e21c:	d101      	bne.n	800e222 <SDMMC_GetCmdResp1+0xaa>
  {
    return SDMMC_ERROR_NONE;
 800e21e:	2300      	movs	r3, #0
 800e220:	e08d      	b.n	800e33e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 800e222:	697b      	ldr	r3, [r7, #20]
 800e224:	2b00      	cmp	r3, #0
 800e226:	da02      	bge.n	800e22e <SDMMC_GetCmdResp1+0xb6>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 800e228:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800e22c:	e087      	b.n	800e33e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 800e22e:	697b      	ldr	r3, [r7, #20]
 800e230:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800e234:	2b00      	cmp	r3, #0
 800e236:	d001      	beq.n	800e23c <SDMMC_GetCmdResp1+0xc4>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 800e238:	2340      	movs	r3, #64	; 0x40
 800e23a:	e080      	b.n	800e33e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 800e23c:	697b      	ldr	r3, [r7, #20]
 800e23e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800e242:	2b00      	cmp	r3, #0
 800e244:	d001      	beq.n	800e24a <SDMMC_GetCmdResp1+0xd2>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 800e246:	2380      	movs	r3, #128	; 0x80
 800e248:	e079      	b.n	800e33e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 800e24a:	697b      	ldr	r3, [r7, #20]
 800e24c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800e250:	2b00      	cmp	r3, #0
 800e252:	d002      	beq.n	800e25a <SDMMC_GetCmdResp1+0xe2>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 800e254:	f44f 7380 	mov.w	r3, #256	; 0x100
 800e258:	e071      	b.n	800e33e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 800e25a:	697b      	ldr	r3, [r7, #20]
 800e25c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800e260:	2b00      	cmp	r3, #0
 800e262:	d002      	beq.n	800e26a <SDMMC_GetCmdResp1+0xf2>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 800e264:	f44f 7300 	mov.w	r3, #512	; 0x200
 800e268:	e069      	b.n	800e33e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 800e26a:	697b      	ldr	r3, [r7, #20]
 800e26c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800e270:	2b00      	cmp	r3, #0
 800e272:	d002      	beq.n	800e27a <SDMMC_GetCmdResp1+0x102>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 800e274:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800e278:	e061      	b.n	800e33e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 800e27a:	697b      	ldr	r3, [r7, #20]
 800e27c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800e280:	2b00      	cmp	r3, #0
 800e282:	d002      	beq.n	800e28a <SDMMC_GetCmdResp1+0x112>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 800e284:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800e288:	e059      	b.n	800e33e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 800e28a:	697b      	ldr	r3, [r7, #20]
 800e28c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800e290:	2b00      	cmp	r3, #0
 800e292:	d002      	beq.n	800e29a <SDMMC_GetCmdResp1+0x122>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 800e294:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800e298:	e051      	b.n	800e33e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 800e29a:	697b      	ldr	r3, [r7, #20]
 800e29c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800e2a0:	2b00      	cmp	r3, #0
 800e2a2:	d002      	beq.n	800e2aa <SDMMC_GetCmdResp1+0x132>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 800e2a4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800e2a8:	e049      	b.n	800e33e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 800e2aa:	697b      	ldr	r3, [r7, #20]
 800e2ac:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800e2b0:	2b00      	cmp	r3, #0
 800e2b2:	d002      	beq.n	800e2ba <SDMMC_GetCmdResp1+0x142>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 800e2b4:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800e2b8:	e041      	b.n	800e33e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 800e2ba:	697b      	ldr	r3, [r7, #20]
 800e2bc:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800e2c0:	2b00      	cmp	r3, #0
 800e2c2:	d002      	beq.n	800e2ca <SDMMC_GetCmdResp1+0x152>
  {
    return SDMMC_ERROR_CC_ERR;
 800e2c4:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800e2c8:	e039      	b.n	800e33e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 800e2ca:	697b      	ldr	r3, [r7, #20]
 800e2cc:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800e2d0:	2b00      	cmp	r3, #0
 800e2d2:	d002      	beq.n	800e2da <SDMMC_GetCmdResp1+0x162>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 800e2d4:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800e2d8:	e031      	b.n	800e33e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 800e2da:	697b      	ldr	r3, [r7, #20]
 800e2dc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800e2e0:	2b00      	cmp	r3, #0
 800e2e2:	d002      	beq.n	800e2ea <SDMMC_GetCmdResp1+0x172>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 800e2e4:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 800e2e8:	e029      	b.n	800e33e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 800e2ea:	697b      	ldr	r3, [r7, #20]
 800e2ec:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800e2f0:	2b00      	cmp	r3, #0
 800e2f2:	d002      	beq.n	800e2fa <SDMMC_GetCmdResp1+0x182>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 800e2f4:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800e2f8:	e021      	b.n	800e33e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 800e2fa:	697b      	ldr	r3, [r7, #20]
 800e2fc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800e300:	2b00      	cmp	r3, #0
 800e302:	d002      	beq.n	800e30a <SDMMC_GetCmdResp1+0x192>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 800e304:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800e308:	e019      	b.n	800e33e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 800e30a:	697b      	ldr	r3, [r7, #20]
 800e30c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800e310:	2b00      	cmp	r3, #0
 800e312:	d002      	beq.n	800e31a <SDMMC_GetCmdResp1+0x1a2>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 800e314:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800e318:	e011      	b.n	800e33e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 800e31a:	697b      	ldr	r3, [r7, #20]
 800e31c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800e320:	2b00      	cmp	r3, #0
 800e322:	d002      	beq.n	800e32a <SDMMC_GetCmdResp1+0x1b2>
  {
    return SDMMC_ERROR_ERASE_RESET;
 800e324:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800e328:	e009      	b.n	800e33e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 800e32a:	697b      	ldr	r3, [r7, #20]
 800e32c:	f003 0308 	and.w	r3, r3, #8
 800e330:	2b00      	cmp	r3, #0
 800e332:	d002      	beq.n	800e33a <SDMMC_GetCmdResp1+0x1c2>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 800e334:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 800e338:	e001      	b.n	800e33e <SDMMC_GetCmdResp1+0x1c6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800e33a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 800e33e:	4618      	mov	r0, r3
 800e340:	3720      	adds	r7, #32
 800e342:	46bd      	mov	sp, r7
 800e344:	bd80      	pop	{r7, pc}
 800e346:	bf00      	nop
 800e348:	24000000 	.word	0x24000000
 800e34c:	10624dd3 	.word	0x10624dd3
 800e350:	00200045 	.word	0x00200045
 800e354:	002000c5 	.word	0x002000c5
 800e358:	fdffe008 	.word	0xfdffe008

0800e35c <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp2(SDMMC_TypeDef *SDMMCx)
{
 800e35c:	b480      	push	{r7}
 800e35e:	b085      	sub	sp, #20
 800e360:	af00      	add	r7, sp, #0
 800e362:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 800e364:	4b1f      	ldr	r3, [pc, #124]	; (800e3e4 <SDMMC_GetCmdResp2+0x88>)
 800e366:	681b      	ldr	r3, [r3, #0]
 800e368:	4a1f      	ldr	r2, [pc, #124]	; (800e3e8 <SDMMC_GetCmdResp2+0x8c>)
 800e36a:	fba2 2303 	umull	r2, r3, r2, r3
 800e36e:	0a5b      	lsrs	r3, r3, #9
 800e370:	f241 3288 	movw	r2, #5000	; 0x1388
 800e374:	fb02 f303 	mul.w	r3, r2, r3
 800e378:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 800e37a:	68fb      	ldr	r3, [r7, #12]
 800e37c:	1e5a      	subs	r2, r3, #1
 800e37e:	60fa      	str	r2, [r7, #12]
 800e380:	2b00      	cmp	r3, #0
 800e382:	d102      	bne.n	800e38a <SDMMC_GetCmdResp2+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800e384:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800e388:	e026      	b.n	800e3d8 <SDMMC_GetCmdResp2+0x7c>
    }
    sta_reg = SDMMCx->STA;
 800e38a:	687b      	ldr	r3, [r7, #4]
 800e38c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e38e:	60bb      	str	r3, [r7, #8]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800e390:	68bb      	ldr	r3, [r7, #8]
 800e392:	f003 0345 	and.w	r3, r3, #69	; 0x45
           ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 800e396:	2b00      	cmp	r3, #0
 800e398:	d0ef      	beq.n	800e37a <SDMMC_GetCmdResp2+0x1e>
 800e39a:	68bb      	ldr	r3, [r7, #8]
 800e39c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800e3a0:	2b00      	cmp	r3, #0
 800e3a2:	d1ea      	bne.n	800e37a <SDMMC_GetCmdResp2+0x1e>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800e3a4:	687b      	ldr	r3, [r7, #4]
 800e3a6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e3a8:	f003 0304 	and.w	r3, r3, #4
 800e3ac:	2b00      	cmp	r3, #0
 800e3ae:	d004      	beq.n	800e3ba <SDMMC_GetCmdResp2+0x5e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800e3b0:	687b      	ldr	r3, [r7, #4]
 800e3b2:	2204      	movs	r2, #4
 800e3b4:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800e3b6:	2304      	movs	r3, #4
 800e3b8:	e00e      	b.n	800e3d8 <SDMMC_GetCmdResp2+0x7c>
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800e3ba:	687b      	ldr	r3, [r7, #4]
 800e3bc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e3be:	f003 0301 	and.w	r3, r3, #1
 800e3c2:	2b00      	cmp	r3, #0
 800e3c4:	d004      	beq.n	800e3d0 <SDMMC_GetCmdResp2+0x74>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800e3c6:	687b      	ldr	r3, [r7, #4]
 800e3c8:	2201      	movs	r2, #1
 800e3ca:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 800e3cc:	2301      	movs	r3, #1
 800e3ce:	e003      	b.n	800e3d8 <SDMMC_GetCmdResp2+0x7c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800e3d0:	687b      	ldr	r3, [r7, #4]
 800e3d2:	4a06      	ldr	r2, [pc, #24]	; (800e3ec <SDMMC_GetCmdResp2+0x90>)
 800e3d4:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 800e3d6:	2300      	movs	r3, #0
}
 800e3d8:	4618      	mov	r0, r3
 800e3da:	3714      	adds	r7, #20
 800e3dc:	46bd      	mov	sp, r7
 800e3de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e3e2:	4770      	bx	lr
 800e3e4:	24000000 	.word	0x24000000
 800e3e8:	10624dd3 	.word	0x10624dd3
 800e3ec:	002000c5 	.word	0x002000c5

0800e3f0 <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp3(SDMMC_TypeDef *SDMMCx)
{
 800e3f0:	b480      	push	{r7}
 800e3f2:	b085      	sub	sp, #20
 800e3f4:	af00      	add	r7, sp, #0
 800e3f6:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 800e3f8:	4b1a      	ldr	r3, [pc, #104]	; (800e464 <SDMMC_GetCmdResp3+0x74>)
 800e3fa:	681b      	ldr	r3, [r3, #0]
 800e3fc:	4a1a      	ldr	r2, [pc, #104]	; (800e468 <SDMMC_GetCmdResp3+0x78>)
 800e3fe:	fba2 2303 	umull	r2, r3, r2, r3
 800e402:	0a5b      	lsrs	r3, r3, #9
 800e404:	f241 3288 	movw	r2, #5000	; 0x1388
 800e408:	fb02 f303 	mul.w	r3, r2, r3
 800e40c:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 800e40e:	68fb      	ldr	r3, [r7, #12]
 800e410:	1e5a      	subs	r2, r3, #1
 800e412:	60fa      	str	r2, [r7, #12]
 800e414:	2b00      	cmp	r3, #0
 800e416:	d102      	bne.n	800e41e <SDMMC_GetCmdResp3+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800e418:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800e41c:	e01b      	b.n	800e456 <SDMMC_GetCmdResp3+0x66>
    }
    sta_reg = SDMMCx->STA;
 800e41e:	687b      	ldr	r3, [r7, #4]
 800e420:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e422:	60bb      	str	r3, [r7, #8]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800e424:	68bb      	ldr	r3, [r7, #8]
 800e426:	f003 0345 	and.w	r3, r3, #69	; 0x45
           ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 800e42a:	2b00      	cmp	r3, #0
 800e42c:	d0ef      	beq.n	800e40e <SDMMC_GetCmdResp3+0x1e>
 800e42e:	68bb      	ldr	r3, [r7, #8]
 800e430:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800e434:	2b00      	cmp	r3, #0
 800e436:	d1ea      	bne.n	800e40e <SDMMC_GetCmdResp3+0x1e>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800e438:	687b      	ldr	r3, [r7, #4]
 800e43a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e43c:	f003 0304 	and.w	r3, r3, #4
 800e440:	2b00      	cmp	r3, #0
 800e442:	d004      	beq.n	800e44e <SDMMC_GetCmdResp3+0x5e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800e444:	687b      	ldr	r3, [r7, #4]
 800e446:	2204      	movs	r2, #4
 800e448:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800e44a:	2304      	movs	r3, #4
 800e44c:	e003      	b.n	800e456 <SDMMC_GetCmdResp3+0x66>
  }
  else
  {
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800e44e:	687b      	ldr	r3, [r7, #4]
 800e450:	4a06      	ldr	r2, [pc, #24]	; (800e46c <SDMMC_GetCmdResp3+0x7c>)
 800e452:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 800e454:	2300      	movs	r3, #0
}
 800e456:	4618      	mov	r0, r3
 800e458:	3714      	adds	r7, #20
 800e45a:	46bd      	mov	sp, r7
 800e45c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e460:	4770      	bx	lr
 800e462:	bf00      	nop
 800e464:	24000000 	.word	0x24000000
 800e468:	10624dd3 	.word	0x10624dd3
 800e46c:	002000c5 	.word	0x002000c5

0800e470 <SDMMC_GetCmdResp6>:
  * @param  pRCA: Pointer to the variable that will contain the SD card relative
  *         address RCA
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp6(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint16_t *pRCA)
{
 800e470:	b580      	push	{r7, lr}
 800e472:	b088      	sub	sp, #32
 800e474:	af00      	add	r7, sp, #0
 800e476:	60f8      	str	r0, [r7, #12]
 800e478:	460b      	mov	r3, r1
 800e47a:	607a      	str	r2, [r7, #4]
 800e47c:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 800e47e:	4b35      	ldr	r3, [pc, #212]	; (800e554 <SDMMC_GetCmdResp6+0xe4>)
 800e480:	681b      	ldr	r3, [r3, #0]
 800e482:	4a35      	ldr	r2, [pc, #212]	; (800e558 <SDMMC_GetCmdResp6+0xe8>)
 800e484:	fba2 2303 	umull	r2, r3, r2, r3
 800e488:	0a5b      	lsrs	r3, r3, #9
 800e48a:	f241 3288 	movw	r2, #5000	; 0x1388
 800e48e:	fb02 f303 	mul.w	r3, r2, r3
 800e492:	61fb      	str	r3, [r7, #28]

  do
  {
    if (count-- == 0U)
 800e494:	69fb      	ldr	r3, [r7, #28]
 800e496:	1e5a      	subs	r2, r3, #1
 800e498:	61fa      	str	r2, [r7, #28]
 800e49a:	2b00      	cmp	r3, #0
 800e49c:	d102      	bne.n	800e4a4 <SDMMC_GetCmdResp6+0x34>
    {
      return SDMMC_ERROR_TIMEOUT;
 800e49e:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800e4a2:	e052      	b.n	800e54a <SDMMC_GetCmdResp6+0xda>
    }
    sta_reg = SDMMCx->STA;
 800e4a4:	68fb      	ldr	r3, [r7, #12]
 800e4a6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e4a8:	61bb      	str	r3, [r7, #24]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800e4aa:	69bb      	ldr	r3, [r7, #24]
 800e4ac:	f003 0345 	and.w	r3, r3, #69	; 0x45
           ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 800e4b0:	2b00      	cmp	r3, #0
 800e4b2:	d0ef      	beq.n	800e494 <SDMMC_GetCmdResp6+0x24>
 800e4b4:	69bb      	ldr	r3, [r7, #24]
 800e4b6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800e4ba:	2b00      	cmp	r3, #0
 800e4bc:	d1ea      	bne.n	800e494 <SDMMC_GetCmdResp6+0x24>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800e4be:	68fb      	ldr	r3, [r7, #12]
 800e4c0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e4c2:	f003 0304 	and.w	r3, r3, #4
 800e4c6:	2b00      	cmp	r3, #0
 800e4c8:	d004      	beq.n	800e4d4 <SDMMC_GetCmdResp6+0x64>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800e4ca:	68fb      	ldr	r3, [r7, #12]
 800e4cc:	2204      	movs	r2, #4
 800e4ce:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800e4d0:	2304      	movs	r3, #4
 800e4d2:	e03a      	b.n	800e54a <SDMMC_GetCmdResp6+0xda>
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800e4d4:	68fb      	ldr	r3, [r7, #12]
 800e4d6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e4d8:	f003 0301 	and.w	r3, r3, #1
 800e4dc:	2b00      	cmp	r3, #0
 800e4de:	d004      	beq.n	800e4ea <SDMMC_GetCmdResp6+0x7a>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800e4e0:	68fb      	ldr	r3, [r7, #12]
 800e4e2:	2201      	movs	r2, #1
 800e4e4:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 800e4e6:	2301      	movs	r3, #1
 800e4e8:	e02f      	b.n	800e54a <SDMMC_GetCmdResp6+0xda>
  {
    /* Nothing to do */
  }

  /* Check response received is of desired command */
  if (SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 800e4ea:	68f8      	ldr	r0, [r7, #12]
 800e4ec:	f7ff fb7c 	bl	800dbe8 <SDMMC_GetCommandResponse>
 800e4f0:	4603      	mov	r3, r0
 800e4f2:	461a      	mov	r2, r3
 800e4f4:	7afb      	ldrb	r3, [r7, #11]
 800e4f6:	4293      	cmp	r3, r2
 800e4f8:	d001      	beq.n	800e4fe <SDMMC_GetCmdResp6+0x8e>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800e4fa:	2301      	movs	r3, #1
 800e4fc:	e025      	b.n	800e54a <SDMMC_GetCmdResp6+0xda>
  }

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800e4fe:	68fb      	ldr	r3, [r7, #12]
 800e500:	4a16      	ldr	r2, [pc, #88]	; (800e55c <SDMMC_GetCmdResp6+0xec>)
 800e502:	639a      	str	r2, [r3, #56]	; 0x38

  /* We have received response, retrieve it.  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 800e504:	2100      	movs	r1, #0
 800e506:	68f8      	ldr	r0, [r7, #12]
 800e508:	f7ff fb7b 	bl	800dc02 <SDMMC_GetResponse>
 800e50c:	6178      	str	r0, [r7, #20]

  if ((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD |
 800e50e:	697b      	ldr	r3, [r7, #20]
 800e510:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 800e514:	2b00      	cmp	r3, #0
 800e516:	d106      	bne.n	800e526 <SDMMC_GetCmdResp6+0xb6>
                      SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
  {
    *pRCA = (uint16_t)(response_r1 >> 16);
 800e518:	697b      	ldr	r3, [r7, #20]
 800e51a:	0c1b      	lsrs	r3, r3, #16
 800e51c:	b29a      	uxth	r2, r3
 800e51e:	687b      	ldr	r3, [r7, #4]
 800e520:	801a      	strh	r2, [r3, #0]

    return SDMMC_ERROR_NONE;
 800e522:	2300      	movs	r3, #0
 800e524:	e011      	b.n	800e54a <SDMMC_GetCmdResp6+0xda>
  }
  else if ((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 800e526:	697b      	ldr	r3, [r7, #20]
 800e528:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800e52c:	2b00      	cmp	r3, #0
 800e52e:	d002      	beq.n	800e536 <SDMMC_GetCmdResp6+0xc6>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 800e530:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800e534:	e009      	b.n	800e54a <SDMMC_GetCmdResp6+0xda>
  }
  else if ((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 800e536:	697b      	ldr	r3, [r7, #20]
 800e538:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800e53c:	2b00      	cmp	r3, #0
 800e53e:	d002      	beq.n	800e546 <SDMMC_GetCmdResp6+0xd6>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 800e540:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800e544:	e001      	b.n	800e54a <SDMMC_GetCmdResp6+0xda>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800e546:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 800e54a:	4618      	mov	r0, r3
 800e54c:	3720      	adds	r7, #32
 800e54e:	46bd      	mov	sp, r7
 800e550:	bd80      	pop	{r7, pc}
 800e552:	bf00      	nop
 800e554:	24000000 	.word	0x24000000
 800e558:	10624dd3 	.word	0x10624dd3
 800e55c:	002000c5 	.word	0x002000c5

0800e560 <SDMMC_GetCmdResp7>:
  * @brief  Checks for error conditions for R7 response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp7(SDMMC_TypeDef *SDMMCx)
{
 800e560:	b480      	push	{r7}
 800e562:	b085      	sub	sp, #20
 800e564:	af00      	add	r7, sp, #0
 800e566:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 800e568:	4b22      	ldr	r3, [pc, #136]	; (800e5f4 <SDMMC_GetCmdResp7+0x94>)
 800e56a:	681b      	ldr	r3, [r3, #0]
 800e56c:	4a22      	ldr	r2, [pc, #136]	; (800e5f8 <SDMMC_GetCmdResp7+0x98>)
 800e56e:	fba2 2303 	umull	r2, r3, r2, r3
 800e572:	0a5b      	lsrs	r3, r3, #9
 800e574:	f241 3288 	movw	r2, #5000	; 0x1388
 800e578:	fb02 f303 	mul.w	r3, r2, r3
 800e57c:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 800e57e:	68fb      	ldr	r3, [r7, #12]
 800e580:	1e5a      	subs	r2, r3, #1
 800e582:	60fa      	str	r2, [r7, #12]
 800e584:	2b00      	cmp	r3, #0
 800e586:	d102      	bne.n	800e58e <SDMMC_GetCmdResp7+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800e588:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800e58c:	e02c      	b.n	800e5e8 <SDMMC_GetCmdResp7+0x88>
    }
    sta_reg = SDMMCx->STA;
 800e58e:	687b      	ldr	r3, [r7, #4]
 800e590:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e592:	60bb      	str	r3, [r7, #8]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800e594:	68bb      	ldr	r3, [r7, #8]
 800e596:	f003 0345 	and.w	r3, r3, #69	; 0x45
           ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 800e59a:	2b00      	cmp	r3, #0
 800e59c:	d0ef      	beq.n	800e57e <SDMMC_GetCmdResp7+0x1e>
 800e59e:	68bb      	ldr	r3, [r7, #8]
 800e5a0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800e5a4:	2b00      	cmp	r3, #0
 800e5a6:	d1ea      	bne.n	800e57e <SDMMC_GetCmdResp7+0x1e>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800e5a8:	687b      	ldr	r3, [r7, #4]
 800e5aa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e5ac:	f003 0304 	and.w	r3, r3, #4
 800e5b0:	2b00      	cmp	r3, #0
 800e5b2:	d004      	beq.n	800e5be <SDMMC_GetCmdResp7+0x5e>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800e5b4:	687b      	ldr	r3, [r7, #4]
 800e5b6:	2204      	movs	r2, #4
 800e5b8:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800e5ba:	2304      	movs	r3, #4
 800e5bc:	e014      	b.n	800e5e8 <SDMMC_GetCmdResp7+0x88>
  }

  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800e5be:	687b      	ldr	r3, [r7, #4]
 800e5c0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e5c2:	f003 0301 	and.w	r3, r3, #1
 800e5c6:	2b00      	cmp	r3, #0
 800e5c8:	d004      	beq.n	800e5d4 <SDMMC_GetCmdResp7+0x74>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800e5ca:	687b      	ldr	r3, [r7, #4]
 800e5cc:	2201      	movs	r2, #1
 800e5ce:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 800e5d0:	2301      	movs	r3, #1
 800e5d2:	e009      	b.n	800e5e8 <SDMMC_GetCmdResp7+0x88>
  else
  {
    /* Nothing to do */
  }

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDREND))
 800e5d4:	687b      	ldr	r3, [r7, #4]
 800e5d6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e5d8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e5dc:	2b00      	cmp	r3, #0
 800e5de:	d002      	beq.n	800e5e6 <SDMMC_GetCmdResp7+0x86>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CMDREND);
 800e5e0:	687b      	ldr	r3, [r7, #4]
 800e5e2:	2240      	movs	r2, #64	; 0x40
 800e5e4:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 800e5e6:	2300      	movs	r3, #0

}
 800e5e8:	4618      	mov	r0, r3
 800e5ea:	3714      	adds	r7, #20
 800e5ec:	46bd      	mov	sp, r7
 800e5ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e5f2:	4770      	bx	lr
 800e5f4:	24000000 	.word	0x24000000
 800e5f8:	10624dd3 	.word	0x10624dd3

0800e5fc <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDMMC_TypeDef *SDMMCx)
{
 800e5fc:	b480      	push	{r7}
 800e5fe:	b085      	sub	sp, #20
 800e600:	af00      	add	r7, sp, #0
 800e602:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 800e604:	4b11      	ldr	r3, [pc, #68]	; (800e64c <SDMMC_GetCmdError+0x50>)
 800e606:	681b      	ldr	r3, [r3, #0]
 800e608:	4a11      	ldr	r2, [pc, #68]	; (800e650 <SDMMC_GetCmdError+0x54>)
 800e60a:	fba2 2303 	umull	r2, r3, r2, r3
 800e60e:	0a5b      	lsrs	r3, r3, #9
 800e610:	f241 3288 	movw	r2, #5000	; 0x1388
 800e614:	fb02 f303 	mul.w	r3, r2, r3
 800e618:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 800e61a:	68fb      	ldr	r3, [r7, #12]
 800e61c:	1e5a      	subs	r2, r3, #1
 800e61e:	60fa      	str	r2, [r7, #12]
 800e620:	2b00      	cmp	r3, #0
 800e622:	d102      	bne.n	800e62a <SDMMC_GetCmdError+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800e624:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800e628:	e009      	b.n	800e63e <SDMMC_GetCmdError+0x42>
    }

  } while (!__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDSENT));
 800e62a:	687b      	ldr	r3, [r7, #4]
 800e62c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e62e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800e632:	2b00      	cmp	r3, #0
 800e634:	d0f1      	beq.n	800e61a <SDMMC_GetCmdError+0x1e>

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800e636:	687b      	ldr	r3, [r7, #4]
 800e638:	4a06      	ldr	r2, [pc, #24]	; (800e654 <SDMMC_GetCmdError+0x58>)
 800e63a:	639a      	str	r2, [r3, #56]	; 0x38

  return SDMMC_ERROR_NONE;
 800e63c:	2300      	movs	r3, #0
}
 800e63e:	4618      	mov	r0, r3
 800e640:	3714      	adds	r7, #20
 800e642:	46bd      	mov	sp, r7
 800e644:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e648:	4770      	bx	lr
 800e64a:	bf00      	nop
 800e64c:	24000000 	.word	0x24000000
 800e650:	10624dd3 	.word	0x10624dd3
 800e654:	002000c5 	.word	0x002000c5

0800e658 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800e658:	b084      	sub	sp, #16
 800e65a:	b580      	push	{r7, lr}
 800e65c:	b084      	sub	sp, #16
 800e65e:	af00      	add	r7, sp, #0
 800e660:	6078      	str	r0, [r7, #4]
 800e662:	f107 001c 	add.w	r0, r7, #28
 800e666:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800e66a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e66c:	2b01      	cmp	r3, #1
 800e66e:	d120      	bne.n	800e6b2 <USB_CoreInit+0x5a>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800e670:	687b      	ldr	r3, [r7, #4]
 800e672:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e674:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800e678:	687b      	ldr	r3, [r7, #4]
 800e67a:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800e67c:	687b      	ldr	r3, [r7, #4]
 800e67e:	68da      	ldr	r2, [r3, #12]
 800e680:	4b2a      	ldr	r3, [pc, #168]	; (800e72c <USB_CoreInit+0xd4>)
 800e682:	4013      	ands	r3, r2
 800e684:	687a      	ldr	r2, [r7, #4]
 800e686:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800e688:	687b      	ldr	r3, [r7, #4]
 800e68a:	68db      	ldr	r3, [r3, #12]
 800e68c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800e690:	687b      	ldr	r3, [r7, #4]
 800e692:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 800e694:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800e696:	2b01      	cmp	r3, #1
 800e698:	d105      	bne.n	800e6a6 <USB_CoreInit+0x4e>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800e69a:	687b      	ldr	r3, [r7, #4]
 800e69c:	68db      	ldr	r3, [r3, #12]
 800e69e:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800e6a2:	687b      	ldr	r3, [r7, #4]
 800e6a4:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800e6a6:	6878      	ldr	r0, [r7, #4]
 800e6a8:	f001 fb14 	bl	800fcd4 <USB_CoreReset>
 800e6ac:	4603      	mov	r3, r0
 800e6ae:	73fb      	strb	r3, [r7, #15]
 800e6b0:	e01a      	b.n	800e6e8 <USB_CoreInit+0x90>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800e6b2:	687b      	ldr	r3, [r7, #4]
 800e6b4:	68db      	ldr	r3, [r3, #12]
 800e6b6:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800e6ba:	687b      	ldr	r3, [r7, #4]
 800e6bc:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800e6be:	6878      	ldr	r0, [r7, #4]
 800e6c0:	f001 fb08 	bl	800fcd4 <USB_CoreReset>
 800e6c4:	4603      	mov	r3, r0
 800e6c6:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 800e6c8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800e6ca:	2b00      	cmp	r3, #0
 800e6cc:	d106      	bne.n	800e6dc <USB_CoreInit+0x84>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800e6ce:	687b      	ldr	r3, [r7, #4]
 800e6d0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e6d2:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800e6d6:	687b      	ldr	r3, [r7, #4]
 800e6d8:	639a      	str	r2, [r3, #56]	; 0x38
 800e6da:	e005      	b.n	800e6e8 <USB_CoreInit+0x90>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800e6dc:	687b      	ldr	r3, [r7, #4]
 800e6de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e6e0:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800e6e4:	687b      	ldr	r3, [r7, #4]
 800e6e6:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 800e6e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e6ea:	2b01      	cmp	r3, #1
 800e6ec:	d116      	bne.n	800e71c <USB_CoreInit+0xc4>
  {
    /* make sure to reserve 18 fifo Locations for DMA buffers */
    USBx->GDFIFOCFG &= ~(0xFFFFU << 16);
 800e6ee:	687b      	ldr	r3, [r7, #4]
 800e6f0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800e6f2:	b29a      	uxth	r2, r3
 800e6f4:	687b      	ldr	r3, [r7, #4]
 800e6f6:	65da      	str	r2, [r3, #92]	; 0x5c
    USBx->GDFIFOCFG |= 0x3EEU << 16;
 800e6f8:	687b      	ldr	r3, [r7, #4]
 800e6fa:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800e6fc:	4b0c      	ldr	r3, [pc, #48]	; (800e730 <USB_CoreInit+0xd8>)
 800e6fe:	4313      	orrs	r3, r2
 800e700:	687a      	ldr	r2, [r7, #4]
 800e702:	65d3      	str	r3, [r2, #92]	; 0x5c

    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800e704:	687b      	ldr	r3, [r7, #4]
 800e706:	689b      	ldr	r3, [r3, #8]
 800e708:	f043 0206 	orr.w	r2, r3, #6
 800e70c:	687b      	ldr	r3, [r7, #4]
 800e70e:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800e710:	687b      	ldr	r3, [r7, #4]
 800e712:	689b      	ldr	r3, [r3, #8]
 800e714:	f043 0220 	orr.w	r2, r3, #32
 800e718:	687b      	ldr	r3, [r7, #4]
 800e71a:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800e71c:	7bfb      	ldrb	r3, [r7, #15]
}
 800e71e:	4618      	mov	r0, r3
 800e720:	3710      	adds	r7, #16
 800e722:	46bd      	mov	sp, r7
 800e724:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800e728:	b004      	add	sp, #16
 800e72a:	4770      	bx	lr
 800e72c:	ffbdffbf 	.word	0xffbdffbf
 800e730:	03ee0000 	.word	0x03ee0000

0800e734 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 800e734:	b480      	push	{r7}
 800e736:	b087      	sub	sp, #28
 800e738:	af00      	add	r7, sp, #0
 800e73a:	60f8      	str	r0, [r7, #12]
 800e73c:	60b9      	str	r1, [r7, #8]
 800e73e:	4613      	mov	r3, r2
 800e740:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 800e742:	79fb      	ldrb	r3, [r7, #7]
 800e744:	2b02      	cmp	r3, #2
 800e746:	d165      	bne.n	800e814 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 800e748:	68bb      	ldr	r3, [r7, #8]
 800e74a:	4a41      	ldr	r2, [pc, #260]	; (800e850 <USB_SetTurnaroundTime+0x11c>)
 800e74c:	4293      	cmp	r3, r2
 800e74e:	d906      	bls.n	800e75e <USB_SetTurnaroundTime+0x2a>
 800e750:	68bb      	ldr	r3, [r7, #8]
 800e752:	4a40      	ldr	r2, [pc, #256]	; (800e854 <USB_SetTurnaroundTime+0x120>)
 800e754:	4293      	cmp	r3, r2
 800e756:	d202      	bcs.n	800e75e <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 800e758:	230f      	movs	r3, #15
 800e75a:	617b      	str	r3, [r7, #20]
 800e75c:	e062      	b.n	800e824 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 800e75e:	68bb      	ldr	r3, [r7, #8]
 800e760:	4a3c      	ldr	r2, [pc, #240]	; (800e854 <USB_SetTurnaroundTime+0x120>)
 800e762:	4293      	cmp	r3, r2
 800e764:	d306      	bcc.n	800e774 <USB_SetTurnaroundTime+0x40>
 800e766:	68bb      	ldr	r3, [r7, #8]
 800e768:	4a3b      	ldr	r2, [pc, #236]	; (800e858 <USB_SetTurnaroundTime+0x124>)
 800e76a:	4293      	cmp	r3, r2
 800e76c:	d202      	bcs.n	800e774 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 800e76e:	230e      	movs	r3, #14
 800e770:	617b      	str	r3, [r7, #20]
 800e772:	e057      	b.n	800e824 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 800e774:	68bb      	ldr	r3, [r7, #8]
 800e776:	4a38      	ldr	r2, [pc, #224]	; (800e858 <USB_SetTurnaroundTime+0x124>)
 800e778:	4293      	cmp	r3, r2
 800e77a:	d306      	bcc.n	800e78a <USB_SetTurnaroundTime+0x56>
 800e77c:	68bb      	ldr	r3, [r7, #8]
 800e77e:	4a37      	ldr	r2, [pc, #220]	; (800e85c <USB_SetTurnaroundTime+0x128>)
 800e780:	4293      	cmp	r3, r2
 800e782:	d202      	bcs.n	800e78a <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 800e784:	230d      	movs	r3, #13
 800e786:	617b      	str	r3, [r7, #20]
 800e788:	e04c      	b.n	800e824 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 800e78a:	68bb      	ldr	r3, [r7, #8]
 800e78c:	4a33      	ldr	r2, [pc, #204]	; (800e85c <USB_SetTurnaroundTime+0x128>)
 800e78e:	4293      	cmp	r3, r2
 800e790:	d306      	bcc.n	800e7a0 <USB_SetTurnaroundTime+0x6c>
 800e792:	68bb      	ldr	r3, [r7, #8]
 800e794:	4a32      	ldr	r2, [pc, #200]	; (800e860 <USB_SetTurnaroundTime+0x12c>)
 800e796:	4293      	cmp	r3, r2
 800e798:	d802      	bhi.n	800e7a0 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 800e79a:	230c      	movs	r3, #12
 800e79c:	617b      	str	r3, [r7, #20]
 800e79e:	e041      	b.n	800e824 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 800e7a0:	68bb      	ldr	r3, [r7, #8]
 800e7a2:	4a2f      	ldr	r2, [pc, #188]	; (800e860 <USB_SetTurnaroundTime+0x12c>)
 800e7a4:	4293      	cmp	r3, r2
 800e7a6:	d906      	bls.n	800e7b6 <USB_SetTurnaroundTime+0x82>
 800e7a8:	68bb      	ldr	r3, [r7, #8]
 800e7aa:	4a2e      	ldr	r2, [pc, #184]	; (800e864 <USB_SetTurnaroundTime+0x130>)
 800e7ac:	4293      	cmp	r3, r2
 800e7ae:	d802      	bhi.n	800e7b6 <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 800e7b0:	230b      	movs	r3, #11
 800e7b2:	617b      	str	r3, [r7, #20]
 800e7b4:	e036      	b.n	800e824 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 800e7b6:	68bb      	ldr	r3, [r7, #8]
 800e7b8:	4a2a      	ldr	r2, [pc, #168]	; (800e864 <USB_SetTurnaroundTime+0x130>)
 800e7ba:	4293      	cmp	r3, r2
 800e7bc:	d906      	bls.n	800e7cc <USB_SetTurnaroundTime+0x98>
 800e7be:	68bb      	ldr	r3, [r7, #8]
 800e7c0:	4a29      	ldr	r2, [pc, #164]	; (800e868 <USB_SetTurnaroundTime+0x134>)
 800e7c2:	4293      	cmp	r3, r2
 800e7c4:	d802      	bhi.n	800e7cc <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 800e7c6:	230a      	movs	r3, #10
 800e7c8:	617b      	str	r3, [r7, #20]
 800e7ca:	e02b      	b.n	800e824 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 800e7cc:	68bb      	ldr	r3, [r7, #8]
 800e7ce:	4a26      	ldr	r2, [pc, #152]	; (800e868 <USB_SetTurnaroundTime+0x134>)
 800e7d0:	4293      	cmp	r3, r2
 800e7d2:	d906      	bls.n	800e7e2 <USB_SetTurnaroundTime+0xae>
 800e7d4:	68bb      	ldr	r3, [r7, #8]
 800e7d6:	4a25      	ldr	r2, [pc, #148]	; (800e86c <USB_SetTurnaroundTime+0x138>)
 800e7d8:	4293      	cmp	r3, r2
 800e7da:	d202      	bcs.n	800e7e2 <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 800e7dc:	2309      	movs	r3, #9
 800e7de:	617b      	str	r3, [r7, #20]
 800e7e0:	e020      	b.n	800e824 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 800e7e2:	68bb      	ldr	r3, [r7, #8]
 800e7e4:	4a21      	ldr	r2, [pc, #132]	; (800e86c <USB_SetTurnaroundTime+0x138>)
 800e7e6:	4293      	cmp	r3, r2
 800e7e8:	d306      	bcc.n	800e7f8 <USB_SetTurnaroundTime+0xc4>
 800e7ea:	68bb      	ldr	r3, [r7, #8]
 800e7ec:	4a20      	ldr	r2, [pc, #128]	; (800e870 <USB_SetTurnaroundTime+0x13c>)
 800e7ee:	4293      	cmp	r3, r2
 800e7f0:	d802      	bhi.n	800e7f8 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 800e7f2:	2308      	movs	r3, #8
 800e7f4:	617b      	str	r3, [r7, #20]
 800e7f6:	e015      	b.n	800e824 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 800e7f8:	68bb      	ldr	r3, [r7, #8]
 800e7fa:	4a1d      	ldr	r2, [pc, #116]	; (800e870 <USB_SetTurnaroundTime+0x13c>)
 800e7fc:	4293      	cmp	r3, r2
 800e7fe:	d906      	bls.n	800e80e <USB_SetTurnaroundTime+0xda>
 800e800:	68bb      	ldr	r3, [r7, #8]
 800e802:	4a1c      	ldr	r2, [pc, #112]	; (800e874 <USB_SetTurnaroundTime+0x140>)
 800e804:	4293      	cmp	r3, r2
 800e806:	d202      	bcs.n	800e80e <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 800e808:	2307      	movs	r3, #7
 800e80a:	617b      	str	r3, [r7, #20]
 800e80c:	e00a      	b.n	800e824 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 800e80e:	2306      	movs	r3, #6
 800e810:	617b      	str	r3, [r7, #20]
 800e812:	e007      	b.n	800e824 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 800e814:	79fb      	ldrb	r3, [r7, #7]
 800e816:	2b00      	cmp	r3, #0
 800e818:	d102      	bne.n	800e820 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 800e81a:	2309      	movs	r3, #9
 800e81c:	617b      	str	r3, [r7, #20]
 800e81e:	e001      	b.n	800e824 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 800e820:	2309      	movs	r3, #9
 800e822:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 800e824:	68fb      	ldr	r3, [r7, #12]
 800e826:	68db      	ldr	r3, [r3, #12]
 800e828:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 800e82c:	68fb      	ldr	r3, [r7, #12]
 800e82e:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 800e830:	68fb      	ldr	r3, [r7, #12]
 800e832:	68da      	ldr	r2, [r3, #12]
 800e834:	697b      	ldr	r3, [r7, #20]
 800e836:	029b      	lsls	r3, r3, #10
 800e838:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 800e83c:	431a      	orrs	r2, r3
 800e83e:	68fb      	ldr	r3, [r7, #12]
 800e840:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800e842:	2300      	movs	r3, #0
}
 800e844:	4618      	mov	r0, r3
 800e846:	371c      	adds	r7, #28
 800e848:	46bd      	mov	sp, r7
 800e84a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e84e:	4770      	bx	lr
 800e850:	00d8acbf 	.word	0x00d8acbf
 800e854:	00e4e1c0 	.word	0x00e4e1c0
 800e858:	00f42400 	.word	0x00f42400
 800e85c:	01067380 	.word	0x01067380
 800e860:	011a499f 	.word	0x011a499f
 800e864:	01312cff 	.word	0x01312cff
 800e868:	014ca43f 	.word	0x014ca43f
 800e86c:	016e3600 	.word	0x016e3600
 800e870:	01a6ab1f 	.word	0x01a6ab1f
 800e874:	01e84800 	.word	0x01e84800

0800e878 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800e878:	b480      	push	{r7}
 800e87a:	b083      	sub	sp, #12
 800e87c:	af00      	add	r7, sp, #0
 800e87e:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 800e880:	687b      	ldr	r3, [r7, #4]
 800e882:	689b      	ldr	r3, [r3, #8]
 800e884:	f043 0201 	orr.w	r2, r3, #1
 800e888:	687b      	ldr	r3, [r7, #4]
 800e88a:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800e88c:	2300      	movs	r3, #0
}
 800e88e:	4618      	mov	r0, r3
 800e890:	370c      	adds	r7, #12
 800e892:	46bd      	mov	sp, r7
 800e894:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e898:	4770      	bx	lr

0800e89a <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800e89a:	b480      	push	{r7}
 800e89c:	b083      	sub	sp, #12
 800e89e:	af00      	add	r7, sp, #0
 800e8a0:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800e8a2:	687b      	ldr	r3, [r7, #4]
 800e8a4:	689b      	ldr	r3, [r3, #8]
 800e8a6:	f023 0201 	bic.w	r2, r3, #1
 800e8aa:	687b      	ldr	r3, [r7, #4]
 800e8ac:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800e8ae:	2300      	movs	r3, #0
}
 800e8b0:	4618      	mov	r0, r3
 800e8b2:	370c      	adds	r7, #12
 800e8b4:	46bd      	mov	sp, r7
 800e8b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e8ba:	4770      	bx	lr

0800e8bc <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 800e8bc:	b580      	push	{r7, lr}
 800e8be:	b082      	sub	sp, #8
 800e8c0:	af00      	add	r7, sp, #0
 800e8c2:	6078      	str	r0, [r7, #4]
 800e8c4:	460b      	mov	r3, r1
 800e8c6:	70fb      	strb	r3, [r7, #3]
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800e8c8:	687b      	ldr	r3, [r7, #4]
 800e8ca:	68db      	ldr	r3, [r3, #12]
 800e8cc:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 800e8d0:	687b      	ldr	r3, [r7, #4]
 800e8d2:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800e8d4:	78fb      	ldrb	r3, [r7, #3]
 800e8d6:	2b01      	cmp	r3, #1
 800e8d8:	d106      	bne.n	800e8e8 <USB_SetCurrentMode+0x2c>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800e8da:	687b      	ldr	r3, [r7, #4]
 800e8dc:	68db      	ldr	r3, [r3, #12]
 800e8de:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800e8e2:	687b      	ldr	r3, [r7, #4]
 800e8e4:	60da      	str	r2, [r3, #12]
 800e8e6:	e00b      	b.n	800e900 <USB_SetCurrentMode+0x44>
  }
  else if (mode == USB_DEVICE_MODE)
 800e8e8:	78fb      	ldrb	r3, [r7, #3]
 800e8ea:	2b00      	cmp	r3, #0
 800e8ec:	d106      	bne.n	800e8fc <USB_SetCurrentMode+0x40>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800e8ee:	687b      	ldr	r3, [r7, #4]
 800e8f0:	68db      	ldr	r3, [r3, #12]
 800e8f2:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800e8f6:	687b      	ldr	r3, [r7, #4]
 800e8f8:	60da      	str	r2, [r3, #12]
 800e8fa:	e001      	b.n	800e900 <USB_SetCurrentMode+0x44>
  }
  else
  {
    return HAL_ERROR;
 800e8fc:	2301      	movs	r3, #1
 800e8fe:	e003      	b.n	800e908 <USB_SetCurrentMode+0x4c>
  }
  HAL_Delay(50U);
 800e900:	2032      	movs	r0, #50	; 0x32
 800e902:	f7f3 fd61 	bl	80023c8 <HAL_Delay>

  return HAL_OK;
 800e906:	2300      	movs	r3, #0
}
 800e908:	4618      	mov	r0, r3
 800e90a:	3708      	adds	r7, #8
 800e90c:	46bd      	mov	sp, r7
 800e90e:	bd80      	pop	{r7, pc}

0800e910 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800e910:	b084      	sub	sp, #16
 800e912:	b580      	push	{r7, lr}
 800e914:	b086      	sub	sp, #24
 800e916:	af00      	add	r7, sp, #0
 800e918:	6078      	str	r0, [r7, #4]
 800e91a:	f107 0024 	add.w	r0, r7, #36	; 0x24
 800e91e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800e922:	2300      	movs	r3, #0
 800e924:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800e926:	687b      	ldr	r3, [r7, #4]
 800e928:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800e92a:	2300      	movs	r3, #0
 800e92c:	613b      	str	r3, [r7, #16]
 800e92e:	e009      	b.n	800e944 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 800e930:	687a      	ldr	r2, [r7, #4]
 800e932:	693b      	ldr	r3, [r7, #16]
 800e934:	3340      	adds	r3, #64	; 0x40
 800e936:	009b      	lsls	r3, r3, #2
 800e938:	4413      	add	r3, r2
 800e93a:	2200      	movs	r2, #0
 800e93c:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800e93e:	693b      	ldr	r3, [r7, #16]
 800e940:	3301      	adds	r3, #1
 800e942:	613b      	str	r3, [r7, #16]
 800e944:	693b      	ldr	r3, [r7, #16]
 800e946:	2b0e      	cmp	r3, #14
 800e948:	d9f2      	bls.n	800e930 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800e94a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800e94c:	2b00      	cmp	r3, #0
 800e94e:	d11c      	bne.n	800e98a <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800e950:	68fb      	ldr	r3, [r7, #12]
 800e952:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800e956:	685b      	ldr	r3, [r3, #4]
 800e958:	68fa      	ldr	r2, [r7, #12]
 800e95a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800e95e:	f043 0302 	orr.w	r3, r3, #2
 800e962:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 800e964:	687b      	ldr	r3, [r7, #4]
 800e966:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e968:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 800e96c:	687b      	ldr	r3, [r7, #4]
 800e96e:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 800e970:	687b      	ldr	r3, [r7, #4]
 800e972:	681b      	ldr	r3, [r3, #0]
 800e974:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800e978:	687b      	ldr	r3, [r7, #4]
 800e97a:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 800e97c:	687b      	ldr	r3, [r7, #4]
 800e97e:	681b      	ldr	r3, [r3, #0]
 800e980:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800e984:	687b      	ldr	r3, [r7, #4]
 800e986:	601a      	str	r2, [r3, #0]
 800e988:	e005      	b.n	800e996 <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 800e98a:	687b      	ldr	r3, [r7, #4]
 800e98c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e98e:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800e992:	687b      	ldr	r3, [r7, #4]
 800e994:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800e996:	68fb      	ldr	r3, [r7, #12]
 800e998:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800e99c:	461a      	mov	r2, r3
 800e99e:	2300      	movs	r3, #0
 800e9a0:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 800e9a2:	68fb      	ldr	r3, [r7, #12]
 800e9a4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800e9a8:	4619      	mov	r1, r3
 800e9aa:	68fb      	ldr	r3, [r7, #12]
 800e9ac:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800e9b0:	461a      	mov	r2, r3
 800e9b2:	680b      	ldr	r3, [r1, #0]
 800e9b4:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800e9b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e9b8:	2b01      	cmp	r3, #1
 800e9ba:	d10c      	bne.n	800e9d6 <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 800e9bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e9be:	2b00      	cmp	r3, #0
 800e9c0:	d104      	bne.n	800e9cc <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 800e9c2:	2100      	movs	r1, #0
 800e9c4:	6878      	ldr	r0, [r7, #4]
 800e9c6:	f000 f949 	bl	800ec5c <USB_SetDevSpeed>
 800e9ca:	e008      	b.n	800e9de <USB_DevInit+0xce>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 800e9cc:	2101      	movs	r1, #1
 800e9ce:	6878      	ldr	r0, [r7, #4]
 800e9d0:	f000 f944 	bl	800ec5c <USB_SetDevSpeed>
 800e9d4:	e003      	b.n	800e9de <USB_DevInit+0xce>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 800e9d6:	2103      	movs	r1, #3
 800e9d8:	6878      	ldr	r0, [r7, #4]
 800e9da:	f000 f93f 	bl	800ec5c <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800e9de:	2110      	movs	r1, #16
 800e9e0:	6878      	ldr	r0, [r7, #4]
 800e9e2:	f000 f8f3 	bl	800ebcc <USB_FlushTxFifo>
 800e9e6:	4603      	mov	r3, r0
 800e9e8:	2b00      	cmp	r3, #0
 800e9ea:	d001      	beq.n	800e9f0 <USB_DevInit+0xe0>
  {
    ret = HAL_ERROR;
 800e9ec:	2301      	movs	r3, #1
 800e9ee:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800e9f0:	6878      	ldr	r0, [r7, #4]
 800e9f2:	f000 f911 	bl	800ec18 <USB_FlushRxFifo>
 800e9f6:	4603      	mov	r3, r0
 800e9f8:	2b00      	cmp	r3, #0
 800e9fa:	d001      	beq.n	800ea00 <USB_DevInit+0xf0>
  {
    ret = HAL_ERROR;
 800e9fc:	2301      	movs	r3, #1
 800e9fe:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 800ea00:	68fb      	ldr	r3, [r7, #12]
 800ea02:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ea06:	461a      	mov	r2, r3
 800ea08:	2300      	movs	r3, #0
 800ea0a:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 800ea0c:	68fb      	ldr	r3, [r7, #12]
 800ea0e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ea12:	461a      	mov	r2, r3
 800ea14:	2300      	movs	r3, #0
 800ea16:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 800ea18:	68fb      	ldr	r3, [r7, #12]
 800ea1a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ea1e:	461a      	mov	r2, r3
 800ea20:	2300      	movs	r3, #0
 800ea22:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800ea24:	2300      	movs	r3, #0
 800ea26:	613b      	str	r3, [r7, #16]
 800ea28:	e043      	b.n	800eab2 <USB_DevInit+0x1a2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800ea2a:	693b      	ldr	r3, [r7, #16]
 800ea2c:	015a      	lsls	r2, r3, #5
 800ea2e:	68fb      	ldr	r3, [r7, #12]
 800ea30:	4413      	add	r3, r2
 800ea32:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ea36:	681b      	ldr	r3, [r3, #0]
 800ea38:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800ea3c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800ea40:	d118      	bne.n	800ea74 <USB_DevInit+0x164>
    {
      if (i == 0U)
 800ea42:	693b      	ldr	r3, [r7, #16]
 800ea44:	2b00      	cmp	r3, #0
 800ea46:	d10a      	bne.n	800ea5e <USB_DevInit+0x14e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 800ea48:	693b      	ldr	r3, [r7, #16]
 800ea4a:	015a      	lsls	r2, r3, #5
 800ea4c:	68fb      	ldr	r3, [r7, #12]
 800ea4e:	4413      	add	r3, r2
 800ea50:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ea54:	461a      	mov	r2, r3
 800ea56:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800ea5a:	6013      	str	r3, [r2, #0]
 800ea5c:	e013      	b.n	800ea86 <USB_DevInit+0x176>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800ea5e:	693b      	ldr	r3, [r7, #16]
 800ea60:	015a      	lsls	r2, r3, #5
 800ea62:	68fb      	ldr	r3, [r7, #12]
 800ea64:	4413      	add	r3, r2
 800ea66:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ea6a:	461a      	mov	r2, r3
 800ea6c:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800ea70:	6013      	str	r3, [r2, #0]
 800ea72:	e008      	b.n	800ea86 <USB_DevInit+0x176>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 800ea74:	693b      	ldr	r3, [r7, #16]
 800ea76:	015a      	lsls	r2, r3, #5
 800ea78:	68fb      	ldr	r3, [r7, #12]
 800ea7a:	4413      	add	r3, r2
 800ea7c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ea80:	461a      	mov	r2, r3
 800ea82:	2300      	movs	r3, #0
 800ea84:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 800ea86:	693b      	ldr	r3, [r7, #16]
 800ea88:	015a      	lsls	r2, r3, #5
 800ea8a:	68fb      	ldr	r3, [r7, #12]
 800ea8c:	4413      	add	r3, r2
 800ea8e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ea92:	461a      	mov	r2, r3
 800ea94:	2300      	movs	r3, #0
 800ea96:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 800ea98:	693b      	ldr	r3, [r7, #16]
 800ea9a:	015a      	lsls	r2, r3, #5
 800ea9c:	68fb      	ldr	r3, [r7, #12]
 800ea9e:	4413      	add	r3, r2
 800eaa0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800eaa4:	461a      	mov	r2, r3
 800eaa6:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800eaaa:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800eaac:	693b      	ldr	r3, [r7, #16]
 800eaae:	3301      	adds	r3, #1
 800eab0:	613b      	str	r3, [r7, #16]
 800eab2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800eab4:	693a      	ldr	r2, [r7, #16]
 800eab6:	429a      	cmp	r2, r3
 800eab8:	d3b7      	bcc.n	800ea2a <USB_DevInit+0x11a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800eaba:	2300      	movs	r3, #0
 800eabc:	613b      	str	r3, [r7, #16]
 800eabe:	e043      	b.n	800eb48 <USB_DevInit+0x238>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800eac0:	693b      	ldr	r3, [r7, #16]
 800eac2:	015a      	lsls	r2, r3, #5
 800eac4:	68fb      	ldr	r3, [r7, #12]
 800eac6:	4413      	add	r3, r2
 800eac8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800eacc:	681b      	ldr	r3, [r3, #0]
 800eace:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800ead2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800ead6:	d118      	bne.n	800eb0a <USB_DevInit+0x1fa>
    {
      if (i == 0U)
 800ead8:	693b      	ldr	r3, [r7, #16]
 800eada:	2b00      	cmp	r3, #0
 800eadc:	d10a      	bne.n	800eaf4 <USB_DevInit+0x1e4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800eade:	693b      	ldr	r3, [r7, #16]
 800eae0:	015a      	lsls	r2, r3, #5
 800eae2:	68fb      	ldr	r3, [r7, #12]
 800eae4:	4413      	add	r3, r2
 800eae6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800eaea:	461a      	mov	r2, r3
 800eaec:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800eaf0:	6013      	str	r3, [r2, #0]
 800eaf2:	e013      	b.n	800eb1c <USB_DevInit+0x20c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 800eaf4:	693b      	ldr	r3, [r7, #16]
 800eaf6:	015a      	lsls	r2, r3, #5
 800eaf8:	68fb      	ldr	r3, [r7, #12]
 800eafa:	4413      	add	r3, r2
 800eafc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800eb00:	461a      	mov	r2, r3
 800eb02:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800eb06:	6013      	str	r3, [r2, #0]
 800eb08:	e008      	b.n	800eb1c <USB_DevInit+0x20c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800eb0a:	693b      	ldr	r3, [r7, #16]
 800eb0c:	015a      	lsls	r2, r3, #5
 800eb0e:	68fb      	ldr	r3, [r7, #12]
 800eb10:	4413      	add	r3, r2
 800eb12:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800eb16:	461a      	mov	r2, r3
 800eb18:	2300      	movs	r3, #0
 800eb1a:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 800eb1c:	693b      	ldr	r3, [r7, #16]
 800eb1e:	015a      	lsls	r2, r3, #5
 800eb20:	68fb      	ldr	r3, [r7, #12]
 800eb22:	4413      	add	r3, r2
 800eb24:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800eb28:	461a      	mov	r2, r3
 800eb2a:	2300      	movs	r3, #0
 800eb2c:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800eb2e:	693b      	ldr	r3, [r7, #16]
 800eb30:	015a      	lsls	r2, r3, #5
 800eb32:	68fb      	ldr	r3, [r7, #12]
 800eb34:	4413      	add	r3, r2
 800eb36:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800eb3a:	461a      	mov	r2, r3
 800eb3c:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800eb40:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800eb42:	693b      	ldr	r3, [r7, #16]
 800eb44:	3301      	adds	r3, #1
 800eb46:	613b      	str	r3, [r7, #16]
 800eb48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800eb4a:	693a      	ldr	r2, [r7, #16]
 800eb4c:	429a      	cmp	r2, r3
 800eb4e:	d3b7      	bcc.n	800eac0 <USB_DevInit+0x1b0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 800eb50:	68fb      	ldr	r3, [r7, #12]
 800eb52:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800eb56:	691b      	ldr	r3, [r3, #16]
 800eb58:	68fa      	ldr	r2, [r7, #12]
 800eb5a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800eb5e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800eb62:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800eb64:	687b      	ldr	r3, [r7, #4]
 800eb66:	2200      	movs	r2, #0
 800eb68:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 800eb6a:	687b      	ldr	r3, [r7, #4]
 800eb6c:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 800eb70:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800eb72:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800eb74:	2b00      	cmp	r3, #0
 800eb76:	d105      	bne.n	800eb84 <USB_DevInit+0x274>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800eb78:	687b      	ldr	r3, [r7, #4]
 800eb7a:	699b      	ldr	r3, [r3, #24]
 800eb7c:	f043 0210 	orr.w	r2, r3, #16
 800eb80:	687b      	ldr	r3, [r7, #4]
 800eb82:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 800eb84:	687b      	ldr	r3, [r7, #4]
 800eb86:	699a      	ldr	r2, [r3, #24]
 800eb88:	4b0e      	ldr	r3, [pc, #56]	; (800ebc4 <USB_DevInit+0x2b4>)
 800eb8a:	4313      	orrs	r3, r2
 800eb8c:	687a      	ldr	r2, [r7, #4]
 800eb8e:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 800eb90:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800eb92:	2b00      	cmp	r3, #0
 800eb94:	d005      	beq.n	800eba2 <USB_DevInit+0x292>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 800eb96:	687b      	ldr	r3, [r7, #4]
 800eb98:	699b      	ldr	r3, [r3, #24]
 800eb9a:	f043 0208 	orr.w	r2, r3, #8
 800eb9e:	687b      	ldr	r3, [r7, #4]
 800eba0:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 800eba2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800eba4:	2b01      	cmp	r3, #1
 800eba6:	d105      	bne.n	800ebb4 <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 800eba8:	687b      	ldr	r3, [r7, #4]
 800ebaa:	699a      	ldr	r2, [r3, #24]
 800ebac:	4b06      	ldr	r3, [pc, #24]	; (800ebc8 <USB_DevInit+0x2b8>)
 800ebae:	4313      	orrs	r3, r2
 800ebb0:	687a      	ldr	r2, [r7, #4]
 800ebb2:	6193      	str	r3, [r2, #24]
  }

  return ret;
 800ebb4:	7dfb      	ldrb	r3, [r7, #23]
}
 800ebb6:	4618      	mov	r0, r3
 800ebb8:	3718      	adds	r7, #24
 800ebba:	46bd      	mov	sp, r7
 800ebbc:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800ebc0:	b004      	add	sp, #16
 800ebc2:	4770      	bx	lr
 800ebc4:	803c3800 	.word	0x803c3800
 800ebc8:	40000004 	.word	0x40000004

0800ebcc <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800ebcc:	b480      	push	{r7}
 800ebce:	b085      	sub	sp, #20
 800ebd0:	af00      	add	r7, sp, #0
 800ebd2:	6078      	str	r0, [r7, #4]
 800ebd4:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 800ebd6:	2300      	movs	r3, #0
 800ebd8:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800ebda:	683b      	ldr	r3, [r7, #0]
 800ebdc:	019b      	lsls	r3, r3, #6
 800ebde:	f043 0220 	orr.w	r2, r3, #32
 800ebe2:	687b      	ldr	r3, [r7, #4]
 800ebe4:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800ebe6:	68fb      	ldr	r3, [r7, #12]
 800ebe8:	3301      	adds	r3, #1
 800ebea:	60fb      	str	r3, [r7, #12]
 800ebec:	68fb      	ldr	r3, [r7, #12]
 800ebee:	4a09      	ldr	r2, [pc, #36]	; (800ec14 <USB_FlushTxFifo+0x48>)
 800ebf0:	4293      	cmp	r3, r2
 800ebf2:	d901      	bls.n	800ebf8 <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 800ebf4:	2303      	movs	r3, #3
 800ebf6:	e006      	b.n	800ec06 <USB_FlushTxFifo+0x3a>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800ebf8:	687b      	ldr	r3, [r7, #4]
 800ebfa:	691b      	ldr	r3, [r3, #16]
 800ebfc:	f003 0320 	and.w	r3, r3, #32
 800ec00:	2b20      	cmp	r3, #32
 800ec02:	d0f0      	beq.n	800ebe6 <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 800ec04:	2300      	movs	r3, #0
}
 800ec06:	4618      	mov	r0, r3
 800ec08:	3714      	adds	r7, #20
 800ec0a:	46bd      	mov	sp, r7
 800ec0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ec10:	4770      	bx	lr
 800ec12:	bf00      	nop
 800ec14:	00030d40 	.word	0x00030d40

0800ec18 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800ec18:	b480      	push	{r7}
 800ec1a:	b085      	sub	sp, #20
 800ec1c:	af00      	add	r7, sp, #0
 800ec1e:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 800ec20:	2300      	movs	r3, #0
 800ec22:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800ec24:	687b      	ldr	r3, [r7, #4]
 800ec26:	2210      	movs	r2, #16
 800ec28:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800ec2a:	68fb      	ldr	r3, [r7, #12]
 800ec2c:	3301      	adds	r3, #1
 800ec2e:	60fb      	str	r3, [r7, #12]
 800ec30:	68fb      	ldr	r3, [r7, #12]
 800ec32:	4a09      	ldr	r2, [pc, #36]	; (800ec58 <USB_FlushRxFifo+0x40>)
 800ec34:	4293      	cmp	r3, r2
 800ec36:	d901      	bls.n	800ec3c <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 800ec38:	2303      	movs	r3, #3
 800ec3a:	e006      	b.n	800ec4a <USB_FlushRxFifo+0x32>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800ec3c:	687b      	ldr	r3, [r7, #4]
 800ec3e:	691b      	ldr	r3, [r3, #16]
 800ec40:	f003 0310 	and.w	r3, r3, #16
 800ec44:	2b10      	cmp	r3, #16
 800ec46:	d0f0      	beq.n	800ec2a <USB_FlushRxFifo+0x12>

  return HAL_OK;
 800ec48:	2300      	movs	r3, #0
}
 800ec4a:	4618      	mov	r0, r3
 800ec4c:	3714      	adds	r7, #20
 800ec4e:	46bd      	mov	sp, r7
 800ec50:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ec54:	4770      	bx	lr
 800ec56:	bf00      	nop
 800ec58:	00030d40 	.word	0x00030d40

0800ec5c <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 800ec5c:	b480      	push	{r7}
 800ec5e:	b085      	sub	sp, #20
 800ec60:	af00      	add	r7, sp, #0
 800ec62:	6078      	str	r0, [r7, #4]
 800ec64:	460b      	mov	r3, r1
 800ec66:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ec68:	687b      	ldr	r3, [r7, #4]
 800ec6a:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 800ec6c:	68fb      	ldr	r3, [r7, #12]
 800ec6e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ec72:	681a      	ldr	r2, [r3, #0]
 800ec74:	78fb      	ldrb	r3, [r7, #3]
 800ec76:	68f9      	ldr	r1, [r7, #12]
 800ec78:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800ec7c:	4313      	orrs	r3, r2
 800ec7e:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 800ec80:	2300      	movs	r3, #0
}
 800ec82:	4618      	mov	r0, r3
 800ec84:	3714      	adds	r7, #20
 800ec86:	46bd      	mov	sp, r7
 800ec88:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ec8c:	4770      	bx	lr

0800ec8e <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 800ec8e:	b480      	push	{r7}
 800ec90:	b087      	sub	sp, #28
 800ec92:	af00      	add	r7, sp, #0
 800ec94:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ec96:	687b      	ldr	r3, [r7, #4]
 800ec98:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 800ec9a:	693b      	ldr	r3, [r7, #16]
 800ec9c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800eca0:	689b      	ldr	r3, [r3, #8]
 800eca2:	f003 0306 	and.w	r3, r3, #6
 800eca6:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 800eca8:	68fb      	ldr	r3, [r7, #12]
 800ecaa:	2b00      	cmp	r3, #0
 800ecac:	d102      	bne.n	800ecb4 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 800ecae:	2300      	movs	r3, #0
 800ecb0:	75fb      	strb	r3, [r7, #23]
 800ecb2:	e00a      	b.n	800ecca <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 800ecb4:	68fb      	ldr	r3, [r7, #12]
 800ecb6:	2b02      	cmp	r3, #2
 800ecb8:	d002      	beq.n	800ecc0 <USB_GetDevSpeed+0x32>
 800ecba:	68fb      	ldr	r3, [r7, #12]
 800ecbc:	2b06      	cmp	r3, #6
 800ecbe:	d102      	bne.n	800ecc6 <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 800ecc0:	2302      	movs	r3, #2
 800ecc2:	75fb      	strb	r3, [r7, #23]
 800ecc4:	e001      	b.n	800ecca <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 800ecc6:	230f      	movs	r3, #15
 800ecc8:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 800ecca:	7dfb      	ldrb	r3, [r7, #23]
}
 800eccc:	4618      	mov	r0, r3
 800ecce:	371c      	adds	r7, #28
 800ecd0:	46bd      	mov	sp, r7
 800ecd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ecd6:	4770      	bx	lr

0800ecd8 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800ecd8:	b480      	push	{r7}
 800ecda:	b085      	sub	sp, #20
 800ecdc:	af00      	add	r7, sp, #0
 800ecde:	6078      	str	r0, [r7, #4]
 800ece0:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ece2:	687b      	ldr	r3, [r7, #4]
 800ece4:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800ece6:	683b      	ldr	r3, [r7, #0]
 800ece8:	781b      	ldrb	r3, [r3, #0]
 800ecea:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800ecec:	683b      	ldr	r3, [r7, #0]
 800ecee:	785b      	ldrb	r3, [r3, #1]
 800ecf0:	2b01      	cmp	r3, #1
 800ecf2:	d139      	bne.n	800ed68 <USB_ActivateEndpoint+0x90>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 800ecf4:	68fb      	ldr	r3, [r7, #12]
 800ecf6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ecfa:	69da      	ldr	r2, [r3, #28]
 800ecfc:	683b      	ldr	r3, [r7, #0]
 800ecfe:	781b      	ldrb	r3, [r3, #0]
 800ed00:	f003 030f 	and.w	r3, r3, #15
 800ed04:	2101      	movs	r1, #1
 800ed06:	fa01 f303 	lsl.w	r3, r1, r3
 800ed0a:	b29b      	uxth	r3, r3
 800ed0c:	68f9      	ldr	r1, [r7, #12]
 800ed0e:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800ed12:	4313      	orrs	r3, r2
 800ed14:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 800ed16:	68bb      	ldr	r3, [r7, #8]
 800ed18:	015a      	lsls	r2, r3, #5
 800ed1a:	68fb      	ldr	r3, [r7, #12]
 800ed1c:	4413      	add	r3, r2
 800ed1e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ed22:	681b      	ldr	r3, [r3, #0]
 800ed24:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800ed28:	2b00      	cmp	r3, #0
 800ed2a:	d153      	bne.n	800edd4 <USB_ActivateEndpoint+0xfc>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800ed2c:	68bb      	ldr	r3, [r7, #8]
 800ed2e:	015a      	lsls	r2, r3, #5
 800ed30:	68fb      	ldr	r3, [r7, #12]
 800ed32:	4413      	add	r3, r2
 800ed34:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ed38:	681a      	ldr	r2, [r3, #0]
 800ed3a:	683b      	ldr	r3, [r7, #0]
 800ed3c:	689b      	ldr	r3, [r3, #8]
 800ed3e:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800ed42:	683b      	ldr	r3, [r7, #0]
 800ed44:	78db      	ldrb	r3, [r3, #3]
 800ed46:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800ed48:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800ed4a:	68bb      	ldr	r3, [r7, #8]
 800ed4c:	059b      	lsls	r3, r3, #22
 800ed4e:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800ed50:	431a      	orrs	r2, r3
 800ed52:	68bb      	ldr	r3, [r7, #8]
 800ed54:	0159      	lsls	r1, r3, #5
 800ed56:	68fb      	ldr	r3, [r7, #12]
 800ed58:	440b      	add	r3, r1
 800ed5a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ed5e:	4619      	mov	r1, r3
 800ed60:	4b20      	ldr	r3, [pc, #128]	; (800ede4 <USB_ActivateEndpoint+0x10c>)
 800ed62:	4313      	orrs	r3, r2
 800ed64:	600b      	str	r3, [r1, #0]
 800ed66:	e035      	b.n	800edd4 <USB_ActivateEndpoint+0xfc>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 800ed68:	68fb      	ldr	r3, [r7, #12]
 800ed6a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ed6e:	69da      	ldr	r2, [r3, #28]
 800ed70:	683b      	ldr	r3, [r7, #0]
 800ed72:	781b      	ldrb	r3, [r3, #0]
 800ed74:	f003 030f 	and.w	r3, r3, #15
 800ed78:	2101      	movs	r1, #1
 800ed7a:	fa01 f303 	lsl.w	r3, r1, r3
 800ed7e:	041b      	lsls	r3, r3, #16
 800ed80:	68f9      	ldr	r1, [r7, #12]
 800ed82:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800ed86:	4313      	orrs	r3, r2
 800ed88:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 800ed8a:	68bb      	ldr	r3, [r7, #8]
 800ed8c:	015a      	lsls	r2, r3, #5
 800ed8e:	68fb      	ldr	r3, [r7, #12]
 800ed90:	4413      	add	r3, r2
 800ed92:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ed96:	681b      	ldr	r3, [r3, #0]
 800ed98:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800ed9c:	2b00      	cmp	r3, #0
 800ed9e:	d119      	bne.n	800edd4 <USB_ActivateEndpoint+0xfc>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800eda0:	68bb      	ldr	r3, [r7, #8]
 800eda2:	015a      	lsls	r2, r3, #5
 800eda4:	68fb      	ldr	r3, [r7, #12]
 800eda6:	4413      	add	r3, r2
 800eda8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800edac:	681a      	ldr	r2, [r3, #0]
 800edae:	683b      	ldr	r3, [r7, #0]
 800edb0:	689b      	ldr	r3, [r3, #8]
 800edb2:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 800edb6:	683b      	ldr	r3, [r7, #0]
 800edb8:	78db      	ldrb	r3, [r3, #3]
 800edba:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800edbc:	430b      	orrs	r3, r1
 800edbe:	431a      	orrs	r2, r3
 800edc0:	68bb      	ldr	r3, [r7, #8]
 800edc2:	0159      	lsls	r1, r3, #5
 800edc4:	68fb      	ldr	r3, [r7, #12]
 800edc6:	440b      	add	r3, r1
 800edc8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800edcc:	4619      	mov	r1, r3
 800edce:	4b05      	ldr	r3, [pc, #20]	; (800ede4 <USB_ActivateEndpoint+0x10c>)
 800edd0:	4313      	orrs	r3, r2
 800edd2:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 800edd4:	2300      	movs	r3, #0
}
 800edd6:	4618      	mov	r0, r3
 800edd8:	3714      	adds	r7, #20
 800edda:	46bd      	mov	sp, r7
 800eddc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ede0:	4770      	bx	lr
 800ede2:	bf00      	nop
 800ede4:	10008000 	.word	0x10008000

0800ede8 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800ede8:	b480      	push	{r7}
 800edea:	b085      	sub	sp, #20
 800edec:	af00      	add	r7, sp, #0
 800edee:	6078      	str	r0, [r7, #4]
 800edf0:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800edf2:	687b      	ldr	r3, [r7, #4]
 800edf4:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800edf6:	683b      	ldr	r3, [r7, #0]
 800edf8:	781b      	ldrb	r3, [r3, #0]
 800edfa:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 800edfc:	683b      	ldr	r3, [r7, #0]
 800edfe:	785b      	ldrb	r3, [r3, #1]
 800ee00:	2b01      	cmp	r3, #1
 800ee02:	d161      	bne.n	800eec8 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800ee04:	68bb      	ldr	r3, [r7, #8]
 800ee06:	015a      	lsls	r2, r3, #5
 800ee08:	68fb      	ldr	r3, [r7, #12]
 800ee0a:	4413      	add	r3, r2
 800ee0c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ee10:	681b      	ldr	r3, [r3, #0]
 800ee12:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800ee16:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800ee1a:	d11f      	bne.n	800ee5c <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 800ee1c:	68bb      	ldr	r3, [r7, #8]
 800ee1e:	015a      	lsls	r2, r3, #5
 800ee20:	68fb      	ldr	r3, [r7, #12]
 800ee22:	4413      	add	r3, r2
 800ee24:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ee28:	681b      	ldr	r3, [r3, #0]
 800ee2a:	68ba      	ldr	r2, [r7, #8]
 800ee2c:	0151      	lsls	r1, r2, #5
 800ee2e:	68fa      	ldr	r2, [r7, #12]
 800ee30:	440a      	add	r2, r1
 800ee32:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800ee36:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800ee3a:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 800ee3c:	68bb      	ldr	r3, [r7, #8]
 800ee3e:	015a      	lsls	r2, r3, #5
 800ee40:	68fb      	ldr	r3, [r7, #12]
 800ee42:	4413      	add	r3, r2
 800ee44:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ee48:	681b      	ldr	r3, [r3, #0]
 800ee4a:	68ba      	ldr	r2, [r7, #8]
 800ee4c:	0151      	lsls	r1, r2, #5
 800ee4e:	68fa      	ldr	r2, [r7, #12]
 800ee50:	440a      	add	r2, r1
 800ee52:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800ee56:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800ee5a:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800ee5c:	68fb      	ldr	r3, [r7, #12]
 800ee5e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ee62:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800ee64:	683b      	ldr	r3, [r7, #0]
 800ee66:	781b      	ldrb	r3, [r3, #0]
 800ee68:	f003 030f 	and.w	r3, r3, #15
 800ee6c:	2101      	movs	r1, #1
 800ee6e:	fa01 f303 	lsl.w	r3, r1, r3
 800ee72:	b29b      	uxth	r3, r3
 800ee74:	43db      	mvns	r3, r3
 800ee76:	68f9      	ldr	r1, [r7, #12]
 800ee78:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800ee7c:	4013      	ands	r3, r2
 800ee7e:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800ee80:	68fb      	ldr	r3, [r7, #12]
 800ee82:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ee86:	69da      	ldr	r2, [r3, #28]
 800ee88:	683b      	ldr	r3, [r7, #0]
 800ee8a:	781b      	ldrb	r3, [r3, #0]
 800ee8c:	f003 030f 	and.w	r3, r3, #15
 800ee90:	2101      	movs	r1, #1
 800ee92:	fa01 f303 	lsl.w	r3, r1, r3
 800ee96:	b29b      	uxth	r3, r3
 800ee98:	43db      	mvns	r3, r3
 800ee9a:	68f9      	ldr	r1, [r7, #12]
 800ee9c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800eea0:	4013      	ands	r3, r2
 800eea2:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 800eea4:	68bb      	ldr	r3, [r7, #8]
 800eea6:	015a      	lsls	r2, r3, #5
 800eea8:	68fb      	ldr	r3, [r7, #12]
 800eeaa:	4413      	add	r3, r2
 800eeac:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800eeb0:	681a      	ldr	r2, [r3, #0]
 800eeb2:	68bb      	ldr	r3, [r7, #8]
 800eeb4:	0159      	lsls	r1, r3, #5
 800eeb6:	68fb      	ldr	r3, [r7, #12]
 800eeb8:	440b      	add	r3, r1
 800eeba:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800eebe:	4619      	mov	r1, r3
 800eec0:	4b35      	ldr	r3, [pc, #212]	; (800ef98 <USB_DeactivateEndpoint+0x1b0>)
 800eec2:	4013      	ands	r3, r2
 800eec4:	600b      	str	r3, [r1, #0]
 800eec6:	e060      	b.n	800ef8a <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800eec8:	68bb      	ldr	r3, [r7, #8]
 800eeca:	015a      	lsls	r2, r3, #5
 800eecc:	68fb      	ldr	r3, [r7, #12]
 800eece:	4413      	add	r3, r2
 800eed0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800eed4:	681b      	ldr	r3, [r3, #0]
 800eed6:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800eeda:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800eede:	d11f      	bne.n	800ef20 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 800eee0:	68bb      	ldr	r3, [r7, #8]
 800eee2:	015a      	lsls	r2, r3, #5
 800eee4:	68fb      	ldr	r3, [r7, #12]
 800eee6:	4413      	add	r3, r2
 800eee8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800eeec:	681b      	ldr	r3, [r3, #0]
 800eeee:	68ba      	ldr	r2, [r7, #8]
 800eef0:	0151      	lsls	r1, r2, #5
 800eef2:	68fa      	ldr	r2, [r7, #12]
 800eef4:	440a      	add	r2, r1
 800eef6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800eefa:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800eefe:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 800ef00:	68bb      	ldr	r3, [r7, #8]
 800ef02:	015a      	lsls	r2, r3, #5
 800ef04:	68fb      	ldr	r3, [r7, #12]
 800ef06:	4413      	add	r3, r2
 800ef08:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ef0c:	681b      	ldr	r3, [r3, #0]
 800ef0e:	68ba      	ldr	r2, [r7, #8]
 800ef10:	0151      	lsls	r1, r2, #5
 800ef12:	68fa      	ldr	r2, [r7, #12]
 800ef14:	440a      	add	r2, r1
 800ef16:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800ef1a:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800ef1e:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800ef20:	68fb      	ldr	r3, [r7, #12]
 800ef22:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ef26:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800ef28:	683b      	ldr	r3, [r7, #0]
 800ef2a:	781b      	ldrb	r3, [r3, #0]
 800ef2c:	f003 030f 	and.w	r3, r3, #15
 800ef30:	2101      	movs	r1, #1
 800ef32:	fa01 f303 	lsl.w	r3, r1, r3
 800ef36:	041b      	lsls	r3, r3, #16
 800ef38:	43db      	mvns	r3, r3
 800ef3a:	68f9      	ldr	r1, [r7, #12]
 800ef3c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800ef40:	4013      	ands	r3, r2
 800ef42:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800ef44:	68fb      	ldr	r3, [r7, #12]
 800ef46:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ef4a:	69da      	ldr	r2, [r3, #28]
 800ef4c:	683b      	ldr	r3, [r7, #0]
 800ef4e:	781b      	ldrb	r3, [r3, #0]
 800ef50:	f003 030f 	and.w	r3, r3, #15
 800ef54:	2101      	movs	r1, #1
 800ef56:	fa01 f303 	lsl.w	r3, r1, r3
 800ef5a:	041b      	lsls	r3, r3, #16
 800ef5c:	43db      	mvns	r3, r3
 800ef5e:	68f9      	ldr	r1, [r7, #12]
 800ef60:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800ef64:	4013      	ands	r3, r2
 800ef66:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 800ef68:	68bb      	ldr	r3, [r7, #8]
 800ef6a:	015a      	lsls	r2, r3, #5
 800ef6c:	68fb      	ldr	r3, [r7, #12]
 800ef6e:	4413      	add	r3, r2
 800ef70:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ef74:	681a      	ldr	r2, [r3, #0]
 800ef76:	68bb      	ldr	r3, [r7, #8]
 800ef78:	0159      	lsls	r1, r3, #5
 800ef7a:	68fb      	ldr	r3, [r7, #12]
 800ef7c:	440b      	add	r3, r1
 800ef7e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ef82:	4619      	mov	r1, r3
 800ef84:	4b05      	ldr	r3, [pc, #20]	; (800ef9c <USB_DeactivateEndpoint+0x1b4>)
 800ef86:	4013      	ands	r3, r2
 800ef88:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 800ef8a:	2300      	movs	r3, #0
}
 800ef8c:	4618      	mov	r0, r3
 800ef8e:	3714      	adds	r7, #20
 800ef90:	46bd      	mov	sp, r7
 800ef92:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ef96:	4770      	bx	lr
 800ef98:	ec337800 	.word	0xec337800
 800ef9c:	eff37800 	.word	0xeff37800

0800efa0 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 800efa0:	b580      	push	{r7, lr}
 800efa2:	b08a      	sub	sp, #40	; 0x28
 800efa4:	af02      	add	r7, sp, #8
 800efa6:	60f8      	str	r0, [r7, #12]
 800efa8:	60b9      	str	r1, [r7, #8]
 800efaa:	4613      	mov	r3, r2
 800efac:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800efae:	68fb      	ldr	r3, [r7, #12]
 800efb0:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 800efb2:	68bb      	ldr	r3, [r7, #8]
 800efb4:	781b      	ldrb	r3, [r3, #0]
 800efb6:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 800efb8:	68bb      	ldr	r3, [r7, #8]
 800efba:	785b      	ldrb	r3, [r3, #1]
 800efbc:	2b01      	cmp	r3, #1
 800efbe:	f040 8163 	bne.w	800f288 <USB_EPStartXfer+0x2e8>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800efc2:	68bb      	ldr	r3, [r7, #8]
 800efc4:	695b      	ldr	r3, [r3, #20]
 800efc6:	2b00      	cmp	r3, #0
 800efc8:	d132      	bne.n	800f030 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800efca:	69bb      	ldr	r3, [r7, #24]
 800efcc:	015a      	lsls	r2, r3, #5
 800efce:	69fb      	ldr	r3, [r7, #28]
 800efd0:	4413      	add	r3, r2
 800efd2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800efd6:	691a      	ldr	r2, [r3, #16]
 800efd8:	69bb      	ldr	r3, [r7, #24]
 800efda:	0159      	lsls	r1, r3, #5
 800efdc:	69fb      	ldr	r3, [r7, #28]
 800efde:	440b      	add	r3, r1
 800efe0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800efe4:	4619      	mov	r1, r3
 800efe6:	4ba5      	ldr	r3, [pc, #660]	; (800f27c <USB_EPStartXfer+0x2dc>)
 800efe8:	4013      	ands	r3, r2
 800efea:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800efec:	69bb      	ldr	r3, [r7, #24]
 800efee:	015a      	lsls	r2, r3, #5
 800eff0:	69fb      	ldr	r3, [r7, #28]
 800eff2:	4413      	add	r3, r2
 800eff4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800eff8:	691b      	ldr	r3, [r3, #16]
 800effa:	69ba      	ldr	r2, [r7, #24]
 800effc:	0151      	lsls	r1, r2, #5
 800effe:	69fa      	ldr	r2, [r7, #28]
 800f000:	440a      	add	r2, r1
 800f002:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800f006:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800f00a:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800f00c:	69bb      	ldr	r3, [r7, #24]
 800f00e:	015a      	lsls	r2, r3, #5
 800f010:	69fb      	ldr	r3, [r7, #28]
 800f012:	4413      	add	r3, r2
 800f014:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800f018:	691a      	ldr	r2, [r3, #16]
 800f01a:	69bb      	ldr	r3, [r7, #24]
 800f01c:	0159      	lsls	r1, r3, #5
 800f01e:	69fb      	ldr	r3, [r7, #28]
 800f020:	440b      	add	r3, r1
 800f022:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800f026:	4619      	mov	r1, r3
 800f028:	4b95      	ldr	r3, [pc, #596]	; (800f280 <USB_EPStartXfer+0x2e0>)
 800f02a:	4013      	ands	r3, r2
 800f02c:	610b      	str	r3, [r1, #16]
 800f02e:	e074      	b.n	800f11a <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800f030:	69bb      	ldr	r3, [r7, #24]
 800f032:	015a      	lsls	r2, r3, #5
 800f034:	69fb      	ldr	r3, [r7, #28]
 800f036:	4413      	add	r3, r2
 800f038:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800f03c:	691a      	ldr	r2, [r3, #16]
 800f03e:	69bb      	ldr	r3, [r7, #24]
 800f040:	0159      	lsls	r1, r3, #5
 800f042:	69fb      	ldr	r3, [r7, #28]
 800f044:	440b      	add	r3, r1
 800f046:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800f04a:	4619      	mov	r1, r3
 800f04c:	4b8c      	ldr	r3, [pc, #560]	; (800f280 <USB_EPStartXfer+0x2e0>)
 800f04e:	4013      	ands	r3, r2
 800f050:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800f052:	69bb      	ldr	r3, [r7, #24]
 800f054:	015a      	lsls	r2, r3, #5
 800f056:	69fb      	ldr	r3, [r7, #28]
 800f058:	4413      	add	r3, r2
 800f05a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800f05e:	691a      	ldr	r2, [r3, #16]
 800f060:	69bb      	ldr	r3, [r7, #24]
 800f062:	0159      	lsls	r1, r3, #5
 800f064:	69fb      	ldr	r3, [r7, #28]
 800f066:	440b      	add	r3, r1
 800f068:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800f06c:	4619      	mov	r1, r3
 800f06e:	4b83      	ldr	r3, [pc, #524]	; (800f27c <USB_EPStartXfer+0x2dc>)
 800f070:	4013      	ands	r3, r2
 800f072:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 800f074:	69bb      	ldr	r3, [r7, #24]
 800f076:	015a      	lsls	r2, r3, #5
 800f078:	69fb      	ldr	r3, [r7, #28]
 800f07a:	4413      	add	r3, r2
 800f07c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800f080:	691a      	ldr	r2, [r3, #16]
 800f082:	68bb      	ldr	r3, [r7, #8]
 800f084:	6959      	ldr	r1, [r3, #20]
 800f086:	68bb      	ldr	r3, [r7, #8]
 800f088:	689b      	ldr	r3, [r3, #8]
 800f08a:	440b      	add	r3, r1
 800f08c:	1e59      	subs	r1, r3, #1
 800f08e:	68bb      	ldr	r3, [r7, #8]
 800f090:	689b      	ldr	r3, [r3, #8]
 800f092:	fbb1 f3f3 	udiv	r3, r1, r3
 800f096:	04d9      	lsls	r1, r3, #19
 800f098:	4b7a      	ldr	r3, [pc, #488]	; (800f284 <USB_EPStartXfer+0x2e4>)
 800f09a:	400b      	ands	r3, r1
 800f09c:	69b9      	ldr	r1, [r7, #24]
 800f09e:	0148      	lsls	r0, r1, #5
 800f0a0:	69f9      	ldr	r1, [r7, #28]
 800f0a2:	4401      	add	r1, r0
 800f0a4:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800f0a8:	4313      	orrs	r3, r2
 800f0aa:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 800f0ac:	69bb      	ldr	r3, [r7, #24]
 800f0ae:	015a      	lsls	r2, r3, #5
 800f0b0:	69fb      	ldr	r3, [r7, #28]
 800f0b2:	4413      	add	r3, r2
 800f0b4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800f0b8:	691a      	ldr	r2, [r3, #16]
 800f0ba:	68bb      	ldr	r3, [r7, #8]
 800f0bc:	695b      	ldr	r3, [r3, #20]
 800f0be:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800f0c2:	69b9      	ldr	r1, [r7, #24]
 800f0c4:	0148      	lsls	r0, r1, #5
 800f0c6:	69f9      	ldr	r1, [r7, #28]
 800f0c8:	4401      	add	r1, r0
 800f0ca:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800f0ce:	4313      	orrs	r3, r2
 800f0d0:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 800f0d2:	68bb      	ldr	r3, [r7, #8]
 800f0d4:	78db      	ldrb	r3, [r3, #3]
 800f0d6:	2b01      	cmp	r3, #1
 800f0d8:	d11f      	bne.n	800f11a <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 800f0da:	69bb      	ldr	r3, [r7, #24]
 800f0dc:	015a      	lsls	r2, r3, #5
 800f0de:	69fb      	ldr	r3, [r7, #28]
 800f0e0:	4413      	add	r3, r2
 800f0e2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800f0e6:	691b      	ldr	r3, [r3, #16]
 800f0e8:	69ba      	ldr	r2, [r7, #24]
 800f0ea:	0151      	lsls	r1, r2, #5
 800f0ec:	69fa      	ldr	r2, [r7, #28]
 800f0ee:	440a      	add	r2, r1
 800f0f0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800f0f4:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 800f0f8:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 800f0fa:	69bb      	ldr	r3, [r7, #24]
 800f0fc:	015a      	lsls	r2, r3, #5
 800f0fe:	69fb      	ldr	r3, [r7, #28]
 800f100:	4413      	add	r3, r2
 800f102:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800f106:	691b      	ldr	r3, [r3, #16]
 800f108:	69ba      	ldr	r2, [r7, #24]
 800f10a:	0151      	lsls	r1, r2, #5
 800f10c:	69fa      	ldr	r2, [r7, #28]
 800f10e:	440a      	add	r2, r1
 800f110:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800f114:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800f118:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 800f11a:	79fb      	ldrb	r3, [r7, #7]
 800f11c:	2b01      	cmp	r3, #1
 800f11e:	d14b      	bne.n	800f1b8 <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 800f120:	68bb      	ldr	r3, [r7, #8]
 800f122:	691b      	ldr	r3, [r3, #16]
 800f124:	2b00      	cmp	r3, #0
 800f126:	d009      	beq.n	800f13c <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 800f128:	69bb      	ldr	r3, [r7, #24]
 800f12a:	015a      	lsls	r2, r3, #5
 800f12c:	69fb      	ldr	r3, [r7, #28]
 800f12e:	4413      	add	r3, r2
 800f130:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800f134:	461a      	mov	r2, r3
 800f136:	68bb      	ldr	r3, [r7, #8]
 800f138:	691b      	ldr	r3, [r3, #16]
 800f13a:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 800f13c:	68bb      	ldr	r3, [r7, #8]
 800f13e:	78db      	ldrb	r3, [r3, #3]
 800f140:	2b01      	cmp	r3, #1
 800f142:	d128      	bne.n	800f196 <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800f144:	69fb      	ldr	r3, [r7, #28]
 800f146:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800f14a:	689b      	ldr	r3, [r3, #8]
 800f14c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800f150:	2b00      	cmp	r3, #0
 800f152:	d110      	bne.n	800f176 <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800f154:	69bb      	ldr	r3, [r7, #24]
 800f156:	015a      	lsls	r2, r3, #5
 800f158:	69fb      	ldr	r3, [r7, #28]
 800f15a:	4413      	add	r3, r2
 800f15c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800f160:	681b      	ldr	r3, [r3, #0]
 800f162:	69ba      	ldr	r2, [r7, #24]
 800f164:	0151      	lsls	r1, r2, #5
 800f166:	69fa      	ldr	r2, [r7, #28]
 800f168:	440a      	add	r2, r1
 800f16a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800f16e:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800f172:	6013      	str	r3, [r2, #0]
 800f174:	e00f      	b.n	800f196 <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800f176:	69bb      	ldr	r3, [r7, #24]
 800f178:	015a      	lsls	r2, r3, #5
 800f17a:	69fb      	ldr	r3, [r7, #28]
 800f17c:	4413      	add	r3, r2
 800f17e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800f182:	681b      	ldr	r3, [r3, #0]
 800f184:	69ba      	ldr	r2, [r7, #24]
 800f186:	0151      	lsls	r1, r2, #5
 800f188:	69fa      	ldr	r2, [r7, #28]
 800f18a:	440a      	add	r2, r1
 800f18c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800f190:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800f194:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800f196:	69bb      	ldr	r3, [r7, #24]
 800f198:	015a      	lsls	r2, r3, #5
 800f19a:	69fb      	ldr	r3, [r7, #28]
 800f19c:	4413      	add	r3, r2
 800f19e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800f1a2:	681b      	ldr	r3, [r3, #0]
 800f1a4:	69ba      	ldr	r2, [r7, #24]
 800f1a6:	0151      	lsls	r1, r2, #5
 800f1a8:	69fa      	ldr	r2, [r7, #28]
 800f1aa:	440a      	add	r2, r1
 800f1ac:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800f1b0:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800f1b4:	6013      	str	r3, [r2, #0]
 800f1b6:	e133      	b.n	800f420 <USB_EPStartXfer+0x480>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800f1b8:	69bb      	ldr	r3, [r7, #24]
 800f1ba:	015a      	lsls	r2, r3, #5
 800f1bc:	69fb      	ldr	r3, [r7, #28]
 800f1be:	4413      	add	r3, r2
 800f1c0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800f1c4:	681b      	ldr	r3, [r3, #0]
 800f1c6:	69ba      	ldr	r2, [r7, #24]
 800f1c8:	0151      	lsls	r1, r2, #5
 800f1ca:	69fa      	ldr	r2, [r7, #28]
 800f1cc:	440a      	add	r2, r1
 800f1ce:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800f1d2:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800f1d6:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800f1d8:	68bb      	ldr	r3, [r7, #8]
 800f1da:	78db      	ldrb	r3, [r3, #3]
 800f1dc:	2b01      	cmp	r3, #1
 800f1de:	d015      	beq.n	800f20c <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 800f1e0:	68bb      	ldr	r3, [r7, #8]
 800f1e2:	695b      	ldr	r3, [r3, #20]
 800f1e4:	2b00      	cmp	r3, #0
 800f1e6:	f000 811b 	beq.w	800f420 <USB_EPStartXfer+0x480>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800f1ea:	69fb      	ldr	r3, [r7, #28]
 800f1ec:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800f1f0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800f1f2:	68bb      	ldr	r3, [r7, #8]
 800f1f4:	781b      	ldrb	r3, [r3, #0]
 800f1f6:	f003 030f 	and.w	r3, r3, #15
 800f1fa:	2101      	movs	r1, #1
 800f1fc:	fa01 f303 	lsl.w	r3, r1, r3
 800f200:	69f9      	ldr	r1, [r7, #28]
 800f202:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800f206:	4313      	orrs	r3, r2
 800f208:	634b      	str	r3, [r1, #52]	; 0x34
 800f20a:	e109      	b.n	800f420 <USB_EPStartXfer+0x480>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800f20c:	69fb      	ldr	r3, [r7, #28]
 800f20e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800f212:	689b      	ldr	r3, [r3, #8]
 800f214:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800f218:	2b00      	cmp	r3, #0
 800f21a:	d110      	bne.n	800f23e <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800f21c:	69bb      	ldr	r3, [r7, #24]
 800f21e:	015a      	lsls	r2, r3, #5
 800f220:	69fb      	ldr	r3, [r7, #28]
 800f222:	4413      	add	r3, r2
 800f224:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800f228:	681b      	ldr	r3, [r3, #0]
 800f22a:	69ba      	ldr	r2, [r7, #24]
 800f22c:	0151      	lsls	r1, r2, #5
 800f22e:	69fa      	ldr	r2, [r7, #28]
 800f230:	440a      	add	r2, r1
 800f232:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800f236:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800f23a:	6013      	str	r3, [r2, #0]
 800f23c:	e00f      	b.n	800f25e <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800f23e:	69bb      	ldr	r3, [r7, #24]
 800f240:	015a      	lsls	r2, r3, #5
 800f242:	69fb      	ldr	r3, [r7, #28]
 800f244:	4413      	add	r3, r2
 800f246:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800f24a:	681b      	ldr	r3, [r3, #0]
 800f24c:	69ba      	ldr	r2, [r7, #24]
 800f24e:	0151      	lsls	r1, r2, #5
 800f250:	69fa      	ldr	r2, [r7, #28]
 800f252:	440a      	add	r2, r1
 800f254:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800f258:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800f25c:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 800f25e:	68bb      	ldr	r3, [r7, #8]
 800f260:	68d9      	ldr	r1, [r3, #12]
 800f262:	68bb      	ldr	r3, [r7, #8]
 800f264:	781a      	ldrb	r2, [r3, #0]
 800f266:	68bb      	ldr	r3, [r7, #8]
 800f268:	695b      	ldr	r3, [r3, #20]
 800f26a:	b298      	uxth	r0, r3
 800f26c:	79fb      	ldrb	r3, [r7, #7]
 800f26e:	9300      	str	r3, [sp, #0]
 800f270:	4603      	mov	r3, r0
 800f272:	68f8      	ldr	r0, [r7, #12]
 800f274:	f000 fa38 	bl	800f6e8 <USB_WritePacket>
 800f278:	e0d2      	b.n	800f420 <USB_EPStartXfer+0x480>
 800f27a:	bf00      	nop
 800f27c:	e007ffff 	.word	0xe007ffff
 800f280:	fff80000 	.word	0xfff80000
 800f284:	1ff80000 	.word	0x1ff80000
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800f288:	69bb      	ldr	r3, [r7, #24]
 800f28a:	015a      	lsls	r2, r3, #5
 800f28c:	69fb      	ldr	r3, [r7, #28]
 800f28e:	4413      	add	r3, r2
 800f290:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800f294:	691a      	ldr	r2, [r3, #16]
 800f296:	69bb      	ldr	r3, [r7, #24]
 800f298:	0159      	lsls	r1, r3, #5
 800f29a:	69fb      	ldr	r3, [r7, #28]
 800f29c:	440b      	add	r3, r1
 800f29e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800f2a2:	4619      	mov	r1, r3
 800f2a4:	4b61      	ldr	r3, [pc, #388]	; (800f42c <USB_EPStartXfer+0x48c>)
 800f2a6:	4013      	ands	r3, r2
 800f2a8:	610b      	str	r3, [r1, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800f2aa:	69bb      	ldr	r3, [r7, #24]
 800f2ac:	015a      	lsls	r2, r3, #5
 800f2ae:	69fb      	ldr	r3, [r7, #28]
 800f2b0:	4413      	add	r3, r2
 800f2b2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800f2b6:	691a      	ldr	r2, [r3, #16]
 800f2b8:	69bb      	ldr	r3, [r7, #24]
 800f2ba:	0159      	lsls	r1, r3, #5
 800f2bc:	69fb      	ldr	r3, [r7, #28]
 800f2be:	440b      	add	r3, r1
 800f2c0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800f2c4:	4619      	mov	r1, r3
 800f2c6:	4b5a      	ldr	r3, [pc, #360]	; (800f430 <USB_EPStartXfer+0x490>)
 800f2c8:	4013      	ands	r3, r2
 800f2ca:	610b      	str	r3, [r1, #16]

    if (ep->xfer_len == 0U)
 800f2cc:	68bb      	ldr	r3, [r7, #8]
 800f2ce:	695b      	ldr	r3, [r3, #20]
 800f2d0:	2b00      	cmp	r3, #0
 800f2d2:	d123      	bne.n	800f31c <USB_EPStartXfer+0x37c>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 800f2d4:	69bb      	ldr	r3, [r7, #24]
 800f2d6:	015a      	lsls	r2, r3, #5
 800f2d8:	69fb      	ldr	r3, [r7, #28]
 800f2da:	4413      	add	r3, r2
 800f2dc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800f2e0:	691a      	ldr	r2, [r3, #16]
 800f2e2:	68bb      	ldr	r3, [r7, #8]
 800f2e4:	689b      	ldr	r3, [r3, #8]
 800f2e6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800f2ea:	69b9      	ldr	r1, [r7, #24]
 800f2ec:	0148      	lsls	r0, r1, #5
 800f2ee:	69f9      	ldr	r1, [r7, #28]
 800f2f0:	4401      	add	r1, r0
 800f2f2:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800f2f6:	4313      	orrs	r3, r2
 800f2f8:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800f2fa:	69bb      	ldr	r3, [r7, #24]
 800f2fc:	015a      	lsls	r2, r3, #5
 800f2fe:	69fb      	ldr	r3, [r7, #28]
 800f300:	4413      	add	r3, r2
 800f302:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800f306:	691b      	ldr	r3, [r3, #16]
 800f308:	69ba      	ldr	r2, [r7, #24]
 800f30a:	0151      	lsls	r1, r2, #5
 800f30c:	69fa      	ldr	r2, [r7, #28]
 800f30e:	440a      	add	r2, r1
 800f310:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800f314:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800f318:	6113      	str	r3, [r2, #16]
 800f31a:	e033      	b.n	800f384 <USB_EPStartXfer+0x3e4>
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 800f31c:	68bb      	ldr	r3, [r7, #8]
 800f31e:	695a      	ldr	r2, [r3, #20]
 800f320:	68bb      	ldr	r3, [r7, #8]
 800f322:	689b      	ldr	r3, [r3, #8]
 800f324:	4413      	add	r3, r2
 800f326:	1e5a      	subs	r2, r3, #1
 800f328:	68bb      	ldr	r3, [r7, #8]
 800f32a:	689b      	ldr	r3, [r3, #8]
 800f32c:	fbb2 f3f3 	udiv	r3, r2, r3
 800f330:	82fb      	strh	r3, [r7, #22]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 800f332:	69bb      	ldr	r3, [r7, #24]
 800f334:	015a      	lsls	r2, r3, #5
 800f336:	69fb      	ldr	r3, [r7, #28]
 800f338:	4413      	add	r3, r2
 800f33a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800f33e:	691a      	ldr	r2, [r3, #16]
 800f340:	8afb      	ldrh	r3, [r7, #22]
 800f342:	04d9      	lsls	r1, r3, #19
 800f344:	4b3b      	ldr	r3, [pc, #236]	; (800f434 <USB_EPStartXfer+0x494>)
 800f346:	400b      	ands	r3, r1
 800f348:	69b9      	ldr	r1, [r7, #24]
 800f34a:	0148      	lsls	r0, r1, #5
 800f34c:	69f9      	ldr	r1, [r7, #28]
 800f34e:	4401      	add	r1, r0
 800f350:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800f354:	4313      	orrs	r3, r2
 800f356:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket * pktcnt);
 800f358:	69bb      	ldr	r3, [r7, #24]
 800f35a:	015a      	lsls	r2, r3, #5
 800f35c:	69fb      	ldr	r3, [r7, #28]
 800f35e:	4413      	add	r3, r2
 800f360:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800f364:	691a      	ldr	r2, [r3, #16]
 800f366:	68bb      	ldr	r3, [r7, #8]
 800f368:	689b      	ldr	r3, [r3, #8]
 800f36a:	8af9      	ldrh	r1, [r7, #22]
 800f36c:	fb01 f303 	mul.w	r3, r1, r3
 800f370:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800f374:	69b9      	ldr	r1, [r7, #24]
 800f376:	0148      	lsls	r0, r1, #5
 800f378:	69f9      	ldr	r1, [r7, #28]
 800f37a:	4401      	add	r1, r0
 800f37c:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800f380:	4313      	orrs	r3, r2
 800f382:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 800f384:	79fb      	ldrb	r3, [r7, #7]
 800f386:	2b01      	cmp	r3, #1
 800f388:	d10d      	bne.n	800f3a6 <USB_EPStartXfer+0x406>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 800f38a:	68bb      	ldr	r3, [r7, #8]
 800f38c:	68db      	ldr	r3, [r3, #12]
 800f38e:	2b00      	cmp	r3, #0
 800f390:	d009      	beq.n	800f3a6 <USB_EPStartXfer+0x406>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 800f392:	68bb      	ldr	r3, [r7, #8]
 800f394:	68d9      	ldr	r1, [r3, #12]
 800f396:	69bb      	ldr	r3, [r7, #24]
 800f398:	015a      	lsls	r2, r3, #5
 800f39a:	69fb      	ldr	r3, [r7, #28]
 800f39c:	4413      	add	r3, r2
 800f39e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800f3a2:	460a      	mov	r2, r1
 800f3a4:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 800f3a6:	68bb      	ldr	r3, [r7, #8]
 800f3a8:	78db      	ldrb	r3, [r3, #3]
 800f3aa:	2b01      	cmp	r3, #1
 800f3ac:	d128      	bne.n	800f400 <USB_EPStartXfer+0x460>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800f3ae:	69fb      	ldr	r3, [r7, #28]
 800f3b0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800f3b4:	689b      	ldr	r3, [r3, #8]
 800f3b6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800f3ba:	2b00      	cmp	r3, #0
 800f3bc:	d110      	bne.n	800f3e0 <USB_EPStartXfer+0x440>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 800f3be:	69bb      	ldr	r3, [r7, #24]
 800f3c0:	015a      	lsls	r2, r3, #5
 800f3c2:	69fb      	ldr	r3, [r7, #28]
 800f3c4:	4413      	add	r3, r2
 800f3c6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800f3ca:	681b      	ldr	r3, [r3, #0]
 800f3cc:	69ba      	ldr	r2, [r7, #24]
 800f3ce:	0151      	lsls	r1, r2, #5
 800f3d0:	69fa      	ldr	r2, [r7, #28]
 800f3d2:	440a      	add	r2, r1
 800f3d4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800f3d8:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800f3dc:	6013      	str	r3, [r2, #0]
 800f3de:	e00f      	b.n	800f400 <USB_EPStartXfer+0x460>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 800f3e0:	69bb      	ldr	r3, [r7, #24]
 800f3e2:	015a      	lsls	r2, r3, #5
 800f3e4:	69fb      	ldr	r3, [r7, #28]
 800f3e6:	4413      	add	r3, r2
 800f3e8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800f3ec:	681b      	ldr	r3, [r3, #0]
 800f3ee:	69ba      	ldr	r2, [r7, #24]
 800f3f0:	0151      	lsls	r1, r2, #5
 800f3f2:	69fa      	ldr	r2, [r7, #28]
 800f3f4:	440a      	add	r2, r1
 800f3f6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800f3fa:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800f3fe:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 800f400:	69bb      	ldr	r3, [r7, #24]
 800f402:	015a      	lsls	r2, r3, #5
 800f404:	69fb      	ldr	r3, [r7, #28]
 800f406:	4413      	add	r3, r2
 800f408:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800f40c:	681b      	ldr	r3, [r3, #0]
 800f40e:	69ba      	ldr	r2, [r7, #24]
 800f410:	0151      	lsls	r1, r2, #5
 800f412:	69fa      	ldr	r2, [r7, #28]
 800f414:	440a      	add	r2, r1
 800f416:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800f41a:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800f41e:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800f420:	2300      	movs	r3, #0
}
 800f422:	4618      	mov	r0, r3
 800f424:	3720      	adds	r7, #32
 800f426:	46bd      	mov	sp, r7
 800f428:	bd80      	pop	{r7, pc}
 800f42a:	bf00      	nop
 800f42c:	fff80000 	.word	0xfff80000
 800f430:	e007ffff 	.word	0xe007ffff
 800f434:	1ff80000 	.word	0x1ff80000

0800f438 <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 800f438:	b480      	push	{r7}
 800f43a:	b087      	sub	sp, #28
 800f43c:	af00      	add	r7, sp, #0
 800f43e:	60f8      	str	r0, [r7, #12]
 800f440:	60b9      	str	r1, [r7, #8]
 800f442:	4613      	mov	r3, r2
 800f444:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800f446:	68fb      	ldr	r3, [r7, #12]
 800f448:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 800f44a:	68bb      	ldr	r3, [r7, #8]
 800f44c:	781b      	ldrb	r3, [r3, #0]
 800f44e:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 800f450:	68bb      	ldr	r3, [r7, #8]
 800f452:	785b      	ldrb	r3, [r3, #1]
 800f454:	2b01      	cmp	r3, #1
 800f456:	f040 80cd 	bne.w	800f5f4 <USB_EP0StartXfer+0x1bc>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800f45a:	68bb      	ldr	r3, [r7, #8]
 800f45c:	695b      	ldr	r3, [r3, #20]
 800f45e:	2b00      	cmp	r3, #0
 800f460:	d132      	bne.n	800f4c8 <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800f462:	693b      	ldr	r3, [r7, #16]
 800f464:	015a      	lsls	r2, r3, #5
 800f466:	697b      	ldr	r3, [r7, #20]
 800f468:	4413      	add	r3, r2
 800f46a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800f46e:	691a      	ldr	r2, [r3, #16]
 800f470:	693b      	ldr	r3, [r7, #16]
 800f472:	0159      	lsls	r1, r3, #5
 800f474:	697b      	ldr	r3, [r7, #20]
 800f476:	440b      	add	r3, r1
 800f478:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800f47c:	4619      	mov	r1, r3
 800f47e:	4b98      	ldr	r3, [pc, #608]	; (800f6e0 <USB_EP0StartXfer+0x2a8>)
 800f480:	4013      	ands	r3, r2
 800f482:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800f484:	693b      	ldr	r3, [r7, #16]
 800f486:	015a      	lsls	r2, r3, #5
 800f488:	697b      	ldr	r3, [r7, #20]
 800f48a:	4413      	add	r3, r2
 800f48c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800f490:	691b      	ldr	r3, [r3, #16]
 800f492:	693a      	ldr	r2, [r7, #16]
 800f494:	0151      	lsls	r1, r2, #5
 800f496:	697a      	ldr	r2, [r7, #20]
 800f498:	440a      	add	r2, r1
 800f49a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800f49e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800f4a2:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800f4a4:	693b      	ldr	r3, [r7, #16]
 800f4a6:	015a      	lsls	r2, r3, #5
 800f4a8:	697b      	ldr	r3, [r7, #20]
 800f4aa:	4413      	add	r3, r2
 800f4ac:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800f4b0:	691a      	ldr	r2, [r3, #16]
 800f4b2:	693b      	ldr	r3, [r7, #16]
 800f4b4:	0159      	lsls	r1, r3, #5
 800f4b6:	697b      	ldr	r3, [r7, #20]
 800f4b8:	440b      	add	r3, r1
 800f4ba:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800f4be:	4619      	mov	r1, r3
 800f4c0:	4b88      	ldr	r3, [pc, #544]	; (800f6e4 <USB_EP0StartXfer+0x2ac>)
 800f4c2:	4013      	ands	r3, r2
 800f4c4:	610b      	str	r3, [r1, #16]
 800f4c6:	e04e      	b.n	800f566 <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800f4c8:	693b      	ldr	r3, [r7, #16]
 800f4ca:	015a      	lsls	r2, r3, #5
 800f4cc:	697b      	ldr	r3, [r7, #20]
 800f4ce:	4413      	add	r3, r2
 800f4d0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800f4d4:	691a      	ldr	r2, [r3, #16]
 800f4d6:	693b      	ldr	r3, [r7, #16]
 800f4d8:	0159      	lsls	r1, r3, #5
 800f4da:	697b      	ldr	r3, [r7, #20]
 800f4dc:	440b      	add	r3, r1
 800f4de:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800f4e2:	4619      	mov	r1, r3
 800f4e4:	4b7f      	ldr	r3, [pc, #508]	; (800f6e4 <USB_EP0StartXfer+0x2ac>)
 800f4e6:	4013      	ands	r3, r2
 800f4e8:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800f4ea:	693b      	ldr	r3, [r7, #16]
 800f4ec:	015a      	lsls	r2, r3, #5
 800f4ee:	697b      	ldr	r3, [r7, #20]
 800f4f0:	4413      	add	r3, r2
 800f4f2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800f4f6:	691a      	ldr	r2, [r3, #16]
 800f4f8:	693b      	ldr	r3, [r7, #16]
 800f4fa:	0159      	lsls	r1, r3, #5
 800f4fc:	697b      	ldr	r3, [r7, #20]
 800f4fe:	440b      	add	r3, r1
 800f500:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800f504:	4619      	mov	r1, r3
 800f506:	4b76      	ldr	r3, [pc, #472]	; (800f6e0 <USB_EP0StartXfer+0x2a8>)
 800f508:	4013      	ands	r3, r2
 800f50a:	610b      	str	r3, [r1, #16]

      if (ep->xfer_len > ep->maxpacket)
 800f50c:	68bb      	ldr	r3, [r7, #8]
 800f50e:	695a      	ldr	r2, [r3, #20]
 800f510:	68bb      	ldr	r3, [r7, #8]
 800f512:	689b      	ldr	r3, [r3, #8]
 800f514:	429a      	cmp	r2, r3
 800f516:	d903      	bls.n	800f520 <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 800f518:	68bb      	ldr	r3, [r7, #8]
 800f51a:	689a      	ldr	r2, [r3, #8]
 800f51c:	68bb      	ldr	r3, [r7, #8]
 800f51e:	615a      	str	r2, [r3, #20]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800f520:	693b      	ldr	r3, [r7, #16]
 800f522:	015a      	lsls	r2, r3, #5
 800f524:	697b      	ldr	r3, [r7, #20]
 800f526:	4413      	add	r3, r2
 800f528:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800f52c:	691b      	ldr	r3, [r3, #16]
 800f52e:	693a      	ldr	r2, [r7, #16]
 800f530:	0151      	lsls	r1, r2, #5
 800f532:	697a      	ldr	r2, [r7, #20]
 800f534:	440a      	add	r2, r1
 800f536:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800f53a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800f53e:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 800f540:	693b      	ldr	r3, [r7, #16]
 800f542:	015a      	lsls	r2, r3, #5
 800f544:	697b      	ldr	r3, [r7, #20]
 800f546:	4413      	add	r3, r2
 800f548:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800f54c:	691a      	ldr	r2, [r3, #16]
 800f54e:	68bb      	ldr	r3, [r7, #8]
 800f550:	695b      	ldr	r3, [r3, #20]
 800f552:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800f556:	6939      	ldr	r1, [r7, #16]
 800f558:	0148      	lsls	r0, r1, #5
 800f55a:	6979      	ldr	r1, [r7, #20]
 800f55c:	4401      	add	r1, r0
 800f55e:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800f562:	4313      	orrs	r3, r2
 800f564:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 800f566:	79fb      	ldrb	r3, [r7, #7]
 800f568:	2b01      	cmp	r3, #1
 800f56a:	d11e      	bne.n	800f5aa <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 800f56c:	68bb      	ldr	r3, [r7, #8]
 800f56e:	691b      	ldr	r3, [r3, #16]
 800f570:	2b00      	cmp	r3, #0
 800f572:	d009      	beq.n	800f588 <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 800f574:	693b      	ldr	r3, [r7, #16]
 800f576:	015a      	lsls	r2, r3, #5
 800f578:	697b      	ldr	r3, [r7, #20]
 800f57a:	4413      	add	r3, r2
 800f57c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800f580:	461a      	mov	r2, r3
 800f582:	68bb      	ldr	r3, [r7, #8]
 800f584:	691b      	ldr	r3, [r3, #16]
 800f586:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800f588:	693b      	ldr	r3, [r7, #16]
 800f58a:	015a      	lsls	r2, r3, #5
 800f58c:	697b      	ldr	r3, [r7, #20]
 800f58e:	4413      	add	r3, r2
 800f590:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800f594:	681b      	ldr	r3, [r3, #0]
 800f596:	693a      	ldr	r2, [r7, #16]
 800f598:	0151      	lsls	r1, r2, #5
 800f59a:	697a      	ldr	r2, [r7, #20]
 800f59c:	440a      	add	r2, r1
 800f59e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800f5a2:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800f5a6:	6013      	str	r3, [r2, #0]
 800f5a8:	e092      	b.n	800f6d0 <USB_EP0StartXfer+0x298>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800f5aa:	693b      	ldr	r3, [r7, #16]
 800f5ac:	015a      	lsls	r2, r3, #5
 800f5ae:	697b      	ldr	r3, [r7, #20]
 800f5b0:	4413      	add	r3, r2
 800f5b2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800f5b6:	681b      	ldr	r3, [r3, #0]
 800f5b8:	693a      	ldr	r2, [r7, #16]
 800f5ba:	0151      	lsls	r1, r2, #5
 800f5bc:	697a      	ldr	r2, [r7, #20]
 800f5be:	440a      	add	r2, r1
 800f5c0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800f5c4:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800f5c8:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 800f5ca:	68bb      	ldr	r3, [r7, #8]
 800f5cc:	695b      	ldr	r3, [r3, #20]
 800f5ce:	2b00      	cmp	r3, #0
 800f5d0:	d07e      	beq.n	800f6d0 <USB_EP0StartXfer+0x298>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800f5d2:	697b      	ldr	r3, [r7, #20]
 800f5d4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800f5d8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800f5da:	68bb      	ldr	r3, [r7, #8]
 800f5dc:	781b      	ldrb	r3, [r3, #0]
 800f5de:	f003 030f 	and.w	r3, r3, #15
 800f5e2:	2101      	movs	r1, #1
 800f5e4:	fa01 f303 	lsl.w	r3, r1, r3
 800f5e8:	6979      	ldr	r1, [r7, #20]
 800f5ea:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800f5ee:	4313      	orrs	r3, r2
 800f5f0:	634b      	str	r3, [r1, #52]	; 0x34
 800f5f2:	e06d      	b.n	800f6d0 <USB_EP0StartXfer+0x298>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800f5f4:	693b      	ldr	r3, [r7, #16]
 800f5f6:	015a      	lsls	r2, r3, #5
 800f5f8:	697b      	ldr	r3, [r7, #20]
 800f5fa:	4413      	add	r3, r2
 800f5fc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800f600:	691a      	ldr	r2, [r3, #16]
 800f602:	693b      	ldr	r3, [r7, #16]
 800f604:	0159      	lsls	r1, r3, #5
 800f606:	697b      	ldr	r3, [r7, #20]
 800f608:	440b      	add	r3, r1
 800f60a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800f60e:	4619      	mov	r1, r3
 800f610:	4b34      	ldr	r3, [pc, #208]	; (800f6e4 <USB_EP0StartXfer+0x2ac>)
 800f612:	4013      	ands	r3, r2
 800f614:	610b      	str	r3, [r1, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800f616:	693b      	ldr	r3, [r7, #16]
 800f618:	015a      	lsls	r2, r3, #5
 800f61a:	697b      	ldr	r3, [r7, #20]
 800f61c:	4413      	add	r3, r2
 800f61e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800f622:	691a      	ldr	r2, [r3, #16]
 800f624:	693b      	ldr	r3, [r7, #16]
 800f626:	0159      	lsls	r1, r3, #5
 800f628:	697b      	ldr	r3, [r7, #20]
 800f62a:	440b      	add	r3, r1
 800f62c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800f630:	4619      	mov	r1, r3
 800f632:	4b2b      	ldr	r3, [pc, #172]	; (800f6e0 <USB_EP0StartXfer+0x2a8>)
 800f634:	4013      	ands	r3, r2
 800f636:	610b      	str	r3, [r1, #16]

    if (ep->xfer_len > 0U)
 800f638:	68bb      	ldr	r3, [r7, #8]
 800f63a:	695b      	ldr	r3, [r3, #20]
 800f63c:	2b00      	cmp	r3, #0
 800f63e:	d003      	beq.n	800f648 <USB_EP0StartXfer+0x210>
    {
      ep->xfer_len = ep->maxpacket;
 800f640:	68bb      	ldr	r3, [r7, #8]
 800f642:	689a      	ldr	r2, [r3, #8]
 800f644:	68bb      	ldr	r3, [r7, #8]
 800f646:	615a      	str	r2, [r3, #20]
    }

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800f648:	693b      	ldr	r3, [r7, #16]
 800f64a:	015a      	lsls	r2, r3, #5
 800f64c:	697b      	ldr	r3, [r7, #20]
 800f64e:	4413      	add	r3, r2
 800f650:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800f654:	691b      	ldr	r3, [r3, #16]
 800f656:	693a      	ldr	r2, [r7, #16]
 800f658:	0151      	lsls	r1, r2, #5
 800f65a:	697a      	ldr	r2, [r7, #20]
 800f65c:	440a      	add	r2, r1
 800f65e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800f662:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800f666:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket));
 800f668:	693b      	ldr	r3, [r7, #16]
 800f66a:	015a      	lsls	r2, r3, #5
 800f66c:	697b      	ldr	r3, [r7, #20]
 800f66e:	4413      	add	r3, r2
 800f670:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800f674:	691a      	ldr	r2, [r3, #16]
 800f676:	68bb      	ldr	r3, [r7, #8]
 800f678:	689b      	ldr	r3, [r3, #8]
 800f67a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800f67e:	6939      	ldr	r1, [r7, #16]
 800f680:	0148      	lsls	r0, r1, #5
 800f682:	6979      	ldr	r1, [r7, #20]
 800f684:	4401      	add	r1, r0
 800f686:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800f68a:	4313      	orrs	r3, r2
 800f68c:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 800f68e:	79fb      	ldrb	r3, [r7, #7]
 800f690:	2b01      	cmp	r3, #1
 800f692:	d10d      	bne.n	800f6b0 <USB_EP0StartXfer+0x278>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 800f694:	68bb      	ldr	r3, [r7, #8]
 800f696:	68db      	ldr	r3, [r3, #12]
 800f698:	2b00      	cmp	r3, #0
 800f69a:	d009      	beq.n	800f6b0 <USB_EP0StartXfer+0x278>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 800f69c:	68bb      	ldr	r3, [r7, #8]
 800f69e:	68d9      	ldr	r1, [r3, #12]
 800f6a0:	693b      	ldr	r3, [r7, #16]
 800f6a2:	015a      	lsls	r2, r3, #5
 800f6a4:	697b      	ldr	r3, [r7, #20]
 800f6a6:	4413      	add	r3, r2
 800f6a8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800f6ac:	460a      	mov	r2, r1
 800f6ae:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 800f6b0:	693b      	ldr	r3, [r7, #16]
 800f6b2:	015a      	lsls	r2, r3, #5
 800f6b4:	697b      	ldr	r3, [r7, #20]
 800f6b6:	4413      	add	r3, r2
 800f6b8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800f6bc:	681b      	ldr	r3, [r3, #0]
 800f6be:	693a      	ldr	r2, [r7, #16]
 800f6c0:	0151      	lsls	r1, r2, #5
 800f6c2:	697a      	ldr	r2, [r7, #20]
 800f6c4:	440a      	add	r2, r1
 800f6c6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800f6ca:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800f6ce:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800f6d0:	2300      	movs	r3, #0
}
 800f6d2:	4618      	mov	r0, r3
 800f6d4:	371c      	adds	r7, #28
 800f6d6:	46bd      	mov	sp, r7
 800f6d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f6dc:	4770      	bx	lr
 800f6de:	bf00      	nop
 800f6e0:	e007ffff 	.word	0xe007ffff
 800f6e4:	fff80000 	.word	0xfff80000

0800f6e8 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 800f6e8:	b480      	push	{r7}
 800f6ea:	b089      	sub	sp, #36	; 0x24
 800f6ec:	af00      	add	r7, sp, #0
 800f6ee:	60f8      	str	r0, [r7, #12]
 800f6f0:	60b9      	str	r1, [r7, #8]
 800f6f2:	4611      	mov	r1, r2
 800f6f4:	461a      	mov	r2, r3
 800f6f6:	460b      	mov	r3, r1
 800f6f8:	71fb      	strb	r3, [r7, #7]
 800f6fa:	4613      	mov	r3, r2
 800f6fc:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800f6fe:	68fb      	ldr	r3, [r7, #12]
 800f700:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 800f702:	68bb      	ldr	r3, [r7, #8]
 800f704:	61fb      	str	r3, [r7, #28]
  uint32_t count32b, i;

  if (dma == 0U)
 800f706:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800f70a:	2b00      	cmp	r3, #0
 800f70c:	d123      	bne.n	800f756 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 800f70e:	88bb      	ldrh	r3, [r7, #4]
 800f710:	3303      	adds	r3, #3
 800f712:	089b      	lsrs	r3, r3, #2
 800f714:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 800f716:	2300      	movs	r3, #0
 800f718:	61bb      	str	r3, [r7, #24]
 800f71a:	e018      	b.n	800f74e <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 800f71c:	79fb      	ldrb	r3, [r7, #7]
 800f71e:	031a      	lsls	r2, r3, #12
 800f720:	697b      	ldr	r3, [r7, #20]
 800f722:	4413      	add	r3, r2
 800f724:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800f728:	461a      	mov	r2, r3
 800f72a:	69fb      	ldr	r3, [r7, #28]
 800f72c:	681b      	ldr	r3, [r3, #0]
 800f72e:	6013      	str	r3, [r2, #0]
      pSrc++;
 800f730:	69fb      	ldr	r3, [r7, #28]
 800f732:	3301      	adds	r3, #1
 800f734:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800f736:	69fb      	ldr	r3, [r7, #28]
 800f738:	3301      	adds	r3, #1
 800f73a:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800f73c:	69fb      	ldr	r3, [r7, #28]
 800f73e:	3301      	adds	r3, #1
 800f740:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800f742:	69fb      	ldr	r3, [r7, #28]
 800f744:	3301      	adds	r3, #1
 800f746:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 800f748:	69bb      	ldr	r3, [r7, #24]
 800f74a:	3301      	adds	r3, #1
 800f74c:	61bb      	str	r3, [r7, #24]
 800f74e:	69ba      	ldr	r2, [r7, #24]
 800f750:	693b      	ldr	r3, [r7, #16]
 800f752:	429a      	cmp	r2, r3
 800f754:	d3e2      	bcc.n	800f71c <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 800f756:	2300      	movs	r3, #0
}
 800f758:	4618      	mov	r0, r3
 800f75a:	3724      	adds	r7, #36	; 0x24
 800f75c:	46bd      	mov	sp, r7
 800f75e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f762:	4770      	bx	lr

0800f764 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 800f764:	b480      	push	{r7}
 800f766:	b08b      	sub	sp, #44	; 0x2c
 800f768:	af00      	add	r7, sp, #0
 800f76a:	60f8      	str	r0, [r7, #12]
 800f76c:	60b9      	str	r1, [r7, #8]
 800f76e:	4613      	mov	r3, r2
 800f770:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800f772:	68fb      	ldr	r3, [r7, #12]
 800f774:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 800f776:	68bb      	ldr	r3, [r7, #8]
 800f778:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 800f77a:	88fb      	ldrh	r3, [r7, #6]
 800f77c:	089b      	lsrs	r3, r3, #2
 800f77e:	b29b      	uxth	r3, r3
 800f780:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 800f782:	88fb      	ldrh	r3, [r7, #6]
 800f784:	f003 0303 	and.w	r3, r3, #3
 800f788:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 800f78a:	2300      	movs	r3, #0
 800f78c:	623b      	str	r3, [r7, #32]
 800f78e:	e014      	b.n	800f7ba <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 800f790:	69bb      	ldr	r3, [r7, #24]
 800f792:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800f796:	681a      	ldr	r2, [r3, #0]
 800f798:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f79a:	601a      	str	r2, [r3, #0]
    pDest++;
 800f79c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f79e:	3301      	adds	r3, #1
 800f7a0:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800f7a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f7a4:	3301      	adds	r3, #1
 800f7a6:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800f7a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f7aa:	3301      	adds	r3, #1
 800f7ac:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800f7ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f7b0:	3301      	adds	r3, #1
 800f7b2:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 800f7b4:	6a3b      	ldr	r3, [r7, #32]
 800f7b6:	3301      	adds	r3, #1
 800f7b8:	623b      	str	r3, [r7, #32]
 800f7ba:	6a3a      	ldr	r2, [r7, #32]
 800f7bc:	697b      	ldr	r3, [r7, #20]
 800f7be:	429a      	cmp	r2, r3
 800f7c0:	d3e6      	bcc.n	800f790 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 800f7c2:	8bfb      	ldrh	r3, [r7, #30]
 800f7c4:	2b00      	cmp	r3, #0
 800f7c6:	d01e      	beq.n	800f806 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 800f7c8:	2300      	movs	r3, #0
 800f7ca:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 800f7cc:	69bb      	ldr	r3, [r7, #24]
 800f7ce:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800f7d2:	461a      	mov	r2, r3
 800f7d4:	f107 0310 	add.w	r3, r7, #16
 800f7d8:	6812      	ldr	r2, [r2, #0]
 800f7da:	601a      	str	r2, [r3, #0]
	
    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 800f7dc:	693a      	ldr	r2, [r7, #16]
 800f7de:	6a3b      	ldr	r3, [r7, #32]
 800f7e0:	b2db      	uxtb	r3, r3
 800f7e2:	00db      	lsls	r3, r3, #3
 800f7e4:	fa22 f303 	lsr.w	r3, r2, r3
 800f7e8:	b2da      	uxtb	r2, r3
 800f7ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f7ec:	701a      	strb	r2, [r3, #0]
      i++;
 800f7ee:	6a3b      	ldr	r3, [r7, #32]
 800f7f0:	3301      	adds	r3, #1
 800f7f2:	623b      	str	r3, [r7, #32]
      pDest++;
 800f7f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f7f6:	3301      	adds	r3, #1
 800f7f8:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 800f7fa:	8bfb      	ldrh	r3, [r7, #30]
 800f7fc:	3b01      	subs	r3, #1
 800f7fe:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 800f800:	8bfb      	ldrh	r3, [r7, #30]
 800f802:	2b00      	cmp	r3, #0
 800f804:	d1ea      	bne.n	800f7dc <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 800f806:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800f808:	4618      	mov	r0, r3
 800f80a:	372c      	adds	r7, #44	; 0x2c
 800f80c:	46bd      	mov	sp, r7
 800f80e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f812:	4770      	bx	lr

0800f814 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800f814:	b480      	push	{r7}
 800f816:	b085      	sub	sp, #20
 800f818:	af00      	add	r7, sp, #0
 800f81a:	6078      	str	r0, [r7, #4]
 800f81c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800f81e:	687b      	ldr	r3, [r7, #4]
 800f820:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800f822:	683b      	ldr	r3, [r7, #0]
 800f824:	781b      	ldrb	r3, [r3, #0]
 800f826:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800f828:	683b      	ldr	r3, [r7, #0]
 800f82a:	785b      	ldrb	r3, [r3, #1]
 800f82c:	2b01      	cmp	r3, #1
 800f82e:	d12c      	bne.n	800f88a <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 800f830:	68bb      	ldr	r3, [r7, #8]
 800f832:	015a      	lsls	r2, r3, #5
 800f834:	68fb      	ldr	r3, [r7, #12]
 800f836:	4413      	add	r3, r2
 800f838:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800f83c:	681b      	ldr	r3, [r3, #0]
 800f83e:	2b00      	cmp	r3, #0
 800f840:	db12      	blt.n	800f868 <USB_EPSetStall+0x54>
 800f842:	68bb      	ldr	r3, [r7, #8]
 800f844:	2b00      	cmp	r3, #0
 800f846:	d00f      	beq.n	800f868 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 800f848:	68bb      	ldr	r3, [r7, #8]
 800f84a:	015a      	lsls	r2, r3, #5
 800f84c:	68fb      	ldr	r3, [r7, #12]
 800f84e:	4413      	add	r3, r2
 800f850:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800f854:	681b      	ldr	r3, [r3, #0]
 800f856:	68ba      	ldr	r2, [r7, #8]
 800f858:	0151      	lsls	r1, r2, #5
 800f85a:	68fa      	ldr	r2, [r7, #12]
 800f85c:	440a      	add	r2, r1
 800f85e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800f862:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800f866:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 800f868:	68bb      	ldr	r3, [r7, #8]
 800f86a:	015a      	lsls	r2, r3, #5
 800f86c:	68fb      	ldr	r3, [r7, #12]
 800f86e:	4413      	add	r3, r2
 800f870:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800f874:	681b      	ldr	r3, [r3, #0]
 800f876:	68ba      	ldr	r2, [r7, #8]
 800f878:	0151      	lsls	r1, r2, #5
 800f87a:	68fa      	ldr	r2, [r7, #12]
 800f87c:	440a      	add	r2, r1
 800f87e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800f882:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800f886:	6013      	str	r3, [r2, #0]
 800f888:	e02b      	b.n	800f8e2 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 800f88a:	68bb      	ldr	r3, [r7, #8]
 800f88c:	015a      	lsls	r2, r3, #5
 800f88e:	68fb      	ldr	r3, [r7, #12]
 800f890:	4413      	add	r3, r2
 800f892:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800f896:	681b      	ldr	r3, [r3, #0]
 800f898:	2b00      	cmp	r3, #0
 800f89a:	db12      	blt.n	800f8c2 <USB_EPSetStall+0xae>
 800f89c:	68bb      	ldr	r3, [r7, #8]
 800f89e:	2b00      	cmp	r3, #0
 800f8a0:	d00f      	beq.n	800f8c2 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 800f8a2:	68bb      	ldr	r3, [r7, #8]
 800f8a4:	015a      	lsls	r2, r3, #5
 800f8a6:	68fb      	ldr	r3, [r7, #12]
 800f8a8:	4413      	add	r3, r2
 800f8aa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800f8ae:	681b      	ldr	r3, [r3, #0]
 800f8b0:	68ba      	ldr	r2, [r7, #8]
 800f8b2:	0151      	lsls	r1, r2, #5
 800f8b4:	68fa      	ldr	r2, [r7, #12]
 800f8b6:	440a      	add	r2, r1
 800f8b8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800f8bc:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800f8c0:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 800f8c2:	68bb      	ldr	r3, [r7, #8]
 800f8c4:	015a      	lsls	r2, r3, #5
 800f8c6:	68fb      	ldr	r3, [r7, #12]
 800f8c8:	4413      	add	r3, r2
 800f8ca:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800f8ce:	681b      	ldr	r3, [r3, #0]
 800f8d0:	68ba      	ldr	r2, [r7, #8]
 800f8d2:	0151      	lsls	r1, r2, #5
 800f8d4:	68fa      	ldr	r2, [r7, #12]
 800f8d6:	440a      	add	r2, r1
 800f8d8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800f8dc:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800f8e0:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800f8e2:	2300      	movs	r3, #0
}
 800f8e4:	4618      	mov	r0, r3
 800f8e6:	3714      	adds	r7, #20
 800f8e8:	46bd      	mov	sp, r7
 800f8ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f8ee:	4770      	bx	lr

0800f8f0 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800f8f0:	b480      	push	{r7}
 800f8f2:	b085      	sub	sp, #20
 800f8f4:	af00      	add	r7, sp, #0
 800f8f6:	6078      	str	r0, [r7, #4]
 800f8f8:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800f8fa:	687b      	ldr	r3, [r7, #4]
 800f8fc:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800f8fe:	683b      	ldr	r3, [r7, #0]
 800f900:	781b      	ldrb	r3, [r3, #0]
 800f902:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800f904:	683b      	ldr	r3, [r7, #0]
 800f906:	785b      	ldrb	r3, [r3, #1]
 800f908:	2b01      	cmp	r3, #1
 800f90a:	d128      	bne.n	800f95e <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800f90c:	68bb      	ldr	r3, [r7, #8]
 800f90e:	015a      	lsls	r2, r3, #5
 800f910:	68fb      	ldr	r3, [r7, #12]
 800f912:	4413      	add	r3, r2
 800f914:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800f918:	681b      	ldr	r3, [r3, #0]
 800f91a:	68ba      	ldr	r2, [r7, #8]
 800f91c:	0151      	lsls	r1, r2, #5
 800f91e:	68fa      	ldr	r2, [r7, #12]
 800f920:	440a      	add	r2, r1
 800f922:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800f926:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800f92a:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800f92c:	683b      	ldr	r3, [r7, #0]
 800f92e:	78db      	ldrb	r3, [r3, #3]
 800f930:	2b03      	cmp	r3, #3
 800f932:	d003      	beq.n	800f93c <USB_EPClearStall+0x4c>
 800f934:	683b      	ldr	r3, [r7, #0]
 800f936:	78db      	ldrb	r3, [r3, #3]
 800f938:	2b02      	cmp	r3, #2
 800f93a:	d138      	bne.n	800f9ae <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800f93c:	68bb      	ldr	r3, [r7, #8]
 800f93e:	015a      	lsls	r2, r3, #5
 800f940:	68fb      	ldr	r3, [r7, #12]
 800f942:	4413      	add	r3, r2
 800f944:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800f948:	681b      	ldr	r3, [r3, #0]
 800f94a:	68ba      	ldr	r2, [r7, #8]
 800f94c:	0151      	lsls	r1, r2, #5
 800f94e:	68fa      	ldr	r2, [r7, #12]
 800f950:	440a      	add	r2, r1
 800f952:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800f956:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800f95a:	6013      	str	r3, [r2, #0]
 800f95c:	e027      	b.n	800f9ae <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800f95e:	68bb      	ldr	r3, [r7, #8]
 800f960:	015a      	lsls	r2, r3, #5
 800f962:	68fb      	ldr	r3, [r7, #12]
 800f964:	4413      	add	r3, r2
 800f966:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800f96a:	681b      	ldr	r3, [r3, #0]
 800f96c:	68ba      	ldr	r2, [r7, #8]
 800f96e:	0151      	lsls	r1, r2, #5
 800f970:	68fa      	ldr	r2, [r7, #12]
 800f972:	440a      	add	r2, r1
 800f974:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800f978:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800f97c:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800f97e:	683b      	ldr	r3, [r7, #0]
 800f980:	78db      	ldrb	r3, [r3, #3]
 800f982:	2b03      	cmp	r3, #3
 800f984:	d003      	beq.n	800f98e <USB_EPClearStall+0x9e>
 800f986:	683b      	ldr	r3, [r7, #0]
 800f988:	78db      	ldrb	r3, [r3, #3]
 800f98a:	2b02      	cmp	r3, #2
 800f98c:	d10f      	bne.n	800f9ae <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800f98e:	68bb      	ldr	r3, [r7, #8]
 800f990:	015a      	lsls	r2, r3, #5
 800f992:	68fb      	ldr	r3, [r7, #12]
 800f994:	4413      	add	r3, r2
 800f996:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800f99a:	681b      	ldr	r3, [r3, #0]
 800f99c:	68ba      	ldr	r2, [r7, #8]
 800f99e:	0151      	lsls	r1, r2, #5
 800f9a0:	68fa      	ldr	r2, [r7, #12]
 800f9a2:	440a      	add	r2, r1
 800f9a4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800f9a8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800f9ac:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 800f9ae:	2300      	movs	r3, #0
}
 800f9b0:	4618      	mov	r0, r3
 800f9b2:	3714      	adds	r7, #20
 800f9b4:	46bd      	mov	sp, r7
 800f9b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f9ba:	4770      	bx	lr

0800f9bc <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 800f9bc:	b480      	push	{r7}
 800f9be:	b085      	sub	sp, #20
 800f9c0:	af00      	add	r7, sp, #0
 800f9c2:	6078      	str	r0, [r7, #4]
 800f9c4:	460b      	mov	r3, r1
 800f9c6:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800f9c8:	687b      	ldr	r3, [r7, #4]
 800f9ca:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 800f9cc:	68fb      	ldr	r3, [r7, #12]
 800f9ce:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800f9d2:	681b      	ldr	r3, [r3, #0]
 800f9d4:	68fa      	ldr	r2, [r7, #12]
 800f9d6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800f9da:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 800f9de:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 800f9e0:	68fb      	ldr	r3, [r7, #12]
 800f9e2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800f9e6:	681a      	ldr	r2, [r3, #0]
 800f9e8:	78fb      	ldrb	r3, [r7, #3]
 800f9ea:	011b      	lsls	r3, r3, #4
 800f9ec:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 800f9f0:	68f9      	ldr	r1, [r7, #12]
 800f9f2:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800f9f6:	4313      	orrs	r3, r2
 800f9f8:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 800f9fa:	2300      	movs	r3, #0
}
 800f9fc:	4618      	mov	r0, r3
 800f9fe:	3714      	adds	r7, #20
 800fa00:	46bd      	mov	sp, r7
 800fa02:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fa06:	4770      	bx	lr

0800fa08 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 800fa08:	b480      	push	{r7}
 800fa0a:	b085      	sub	sp, #20
 800fa0c:	af00      	add	r7, sp, #0
 800fa0e:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800fa10:	687b      	ldr	r3, [r7, #4]
 800fa12:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800fa14:	68fb      	ldr	r3, [r7, #12]
 800fa16:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800fa1a:	681b      	ldr	r3, [r3, #0]
 800fa1c:	68fa      	ldr	r2, [r7, #12]
 800fa1e:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800fa22:	f023 0303 	bic.w	r3, r3, #3
 800fa26:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 800fa28:	68fb      	ldr	r3, [r7, #12]
 800fa2a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800fa2e:	685b      	ldr	r3, [r3, #4]
 800fa30:	68fa      	ldr	r2, [r7, #12]
 800fa32:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800fa36:	f023 0302 	bic.w	r3, r3, #2
 800fa3a:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800fa3c:	2300      	movs	r3, #0
}
 800fa3e:	4618      	mov	r0, r3
 800fa40:	3714      	adds	r7, #20
 800fa42:	46bd      	mov	sp, r7
 800fa44:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fa48:	4770      	bx	lr

0800fa4a <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 800fa4a:	b480      	push	{r7}
 800fa4c:	b085      	sub	sp, #20
 800fa4e:	af00      	add	r7, sp, #0
 800fa50:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800fa52:	687b      	ldr	r3, [r7, #4]
 800fa54:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800fa56:	68fb      	ldr	r3, [r7, #12]
 800fa58:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800fa5c:	681b      	ldr	r3, [r3, #0]
 800fa5e:	68fa      	ldr	r2, [r7, #12]
 800fa60:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800fa64:	f023 0303 	bic.w	r3, r3, #3
 800fa68:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800fa6a:	68fb      	ldr	r3, [r7, #12]
 800fa6c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800fa70:	685b      	ldr	r3, [r3, #4]
 800fa72:	68fa      	ldr	r2, [r7, #12]
 800fa74:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800fa78:	f043 0302 	orr.w	r3, r3, #2
 800fa7c:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800fa7e:	2300      	movs	r3, #0
}
 800fa80:	4618      	mov	r0, r3
 800fa82:	3714      	adds	r7, #20
 800fa84:	46bd      	mov	sp, r7
 800fa86:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fa8a:	4770      	bx	lr

0800fa8c <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 800fa8c:	b480      	push	{r7}
 800fa8e:	b085      	sub	sp, #20
 800fa90:	af00      	add	r7, sp, #0
 800fa92:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 800fa94:	687b      	ldr	r3, [r7, #4]
 800fa96:	695b      	ldr	r3, [r3, #20]
 800fa98:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 800fa9a:	687b      	ldr	r3, [r7, #4]
 800fa9c:	699b      	ldr	r3, [r3, #24]
 800fa9e:	68fa      	ldr	r2, [r7, #12]
 800faa0:	4013      	ands	r3, r2
 800faa2:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 800faa4:	68fb      	ldr	r3, [r7, #12]
}
 800faa6:	4618      	mov	r0, r3
 800faa8:	3714      	adds	r7, #20
 800faaa:	46bd      	mov	sp, r7
 800faac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fab0:	4770      	bx	lr

0800fab2 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800fab2:	b480      	push	{r7}
 800fab4:	b085      	sub	sp, #20
 800fab6:	af00      	add	r7, sp, #0
 800fab8:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800faba:	687b      	ldr	r3, [r7, #4]
 800fabc:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800fabe:	68fb      	ldr	r3, [r7, #12]
 800fac0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800fac4:	699b      	ldr	r3, [r3, #24]
 800fac6:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800fac8:	68fb      	ldr	r3, [r7, #12]
 800faca:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800face:	69db      	ldr	r3, [r3, #28]
 800fad0:	68ba      	ldr	r2, [r7, #8]
 800fad2:	4013      	ands	r3, r2
 800fad4:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 800fad6:	68bb      	ldr	r3, [r7, #8]
 800fad8:	0c1b      	lsrs	r3, r3, #16
}
 800fada:	4618      	mov	r0, r3
 800fadc:	3714      	adds	r7, #20
 800fade:	46bd      	mov	sp, r7
 800fae0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fae4:	4770      	bx	lr

0800fae6 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800fae6:	b480      	push	{r7}
 800fae8:	b085      	sub	sp, #20
 800faea:	af00      	add	r7, sp, #0
 800faec:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800faee:	687b      	ldr	r3, [r7, #4]
 800faf0:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800faf2:	68fb      	ldr	r3, [r7, #12]
 800faf4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800faf8:	699b      	ldr	r3, [r3, #24]
 800fafa:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800fafc:	68fb      	ldr	r3, [r7, #12]
 800fafe:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800fb02:	69db      	ldr	r3, [r3, #28]
 800fb04:	68ba      	ldr	r2, [r7, #8]
 800fb06:	4013      	ands	r3, r2
 800fb08:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 800fb0a:	68bb      	ldr	r3, [r7, #8]
 800fb0c:	b29b      	uxth	r3, r3
}
 800fb0e:	4618      	mov	r0, r3
 800fb10:	3714      	adds	r7, #20
 800fb12:	46bd      	mov	sp, r7
 800fb14:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fb18:	4770      	bx	lr

0800fb1a <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800fb1a:	b480      	push	{r7}
 800fb1c:	b085      	sub	sp, #20
 800fb1e:	af00      	add	r7, sp, #0
 800fb20:	6078      	str	r0, [r7, #4]
 800fb22:	460b      	mov	r3, r1
 800fb24:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800fb26:	687b      	ldr	r3, [r7, #4]
 800fb28:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 800fb2a:	78fb      	ldrb	r3, [r7, #3]
 800fb2c:	015a      	lsls	r2, r3, #5
 800fb2e:	68fb      	ldr	r3, [r7, #12]
 800fb30:	4413      	add	r3, r2
 800fb32:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800fb36:	689b      	ldr	r3, [r3, #8]
 800fb38:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 800fb3a:	68fb      	ldr	r3, [r7, #12]
 800fb3c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800fb40:	695b      	ldr	r3, [r3, #20]
 800fb42:	68ba      	ldr	r2, [r7, #8]
 800fb44:	4013      	ands	r3, r2
 800fb46:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800fb48:	68bb      	ldr	r3, [r7, #8]
}
 800fb4a:	4618      	mov	r0, r3
 800fb4c:	3714      	adds	r7, #20
 800fb4e:	46bd      	mov	sp, r7
 800fb50:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fb54:	4770      	bx	lr

0800fb56 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800fb56:	b480      	push	{r7}
 800fb58:	b087      	sub	sp, #28
 800fb5a:	af00      	add	r7, sp, #0
 800fb5c:	6078      	str	r0, [r7, #4]
 800fb5e:	460b      	mov	r3, r1
 800fb60:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800fb62:	687b      	ldr	r3, [r7, #4]
 800fb64:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg, msk, emp;

  msk = USBx_DEVICE->DIEPMSK;
 800fb66:	697b      	ldr	r3, [r7, #20]
 800fb68:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800fb6c:	691b      	ldr	r3, [r3, #16]
 800fb6e:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 800fb70:	697b      	ldr	r3, [r7, #20]
 800fb72:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800fb76:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800fb78:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 800fb7a:	78fb      	ldrb	r3, [r7, #3]
 800fb7c:	f003 030f 	and.w	r3, r3, #15
 800fb80:	68fa      	ldr	r2, [r7, #12]
 800fb82:	fa22 f303 	lsr.w	r3, r2, r3
 800fb86:	01db      	lsls	r3, r3, #7
 800fb88:	b2db      	uxtb	r3, r3
 800fb8a:	693a      	ldr	r2, [r7, #16]
 800fb8c:	4313      	orrs	r3, r2
 800fb8e:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 800fb90:	78fb      	ldrb	r3, [r7, #3]
 800fb92:	015a      	lsls	r2, r3, #5
 800fb94:	697b      	ldr	r3, [r7, #20]
 800fb96:	4413      	add	r3, r2
 800fb98:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800fb9c:	689b      	ldr	r3, [r3, #8]
 800fb9e:	693a      	ldr	r2, [r7, #16]
 800fba0:	4013      	ands	r3, r2
 800fba2:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800fba4:	68bb      	ldr	r3, [r7, #8]
}
 800fba6:	4618      	mov	r0, r3
 800fba8:	371c      	adds	r7, #28
 800fbaa:	46bd      	mov	sp, r7
 800fbac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fbb0:	4770      	bx	lr

0800fbb2 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 800fbb2:	b480      	push	{r7}
 800fbb4:	b083      	sub	sp, #12
 800fbb6:	af00      	add	r7, sp, #0
 800fbb8:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800fbba:	687b      	ldr	r3, [r7, #4]
 800fbbc:	695b      	ldr	r3, [r3, #20]
 800fbbe:	f003 0301 	and.w	r3, r3, #1
}
 800fbc2:	4618      	mov	r0, r3
 800fbc4:	370c      	adds	r7, #12
 800fbc6:	46bd      	mov	sp, r7
 800fbc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fbcc:	4770      	bx	lr
	...

0800fbd0 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 800fbd0:	b480      	push	{r7}
 800fbd2:	b085      	sub	sp, #20
 800fbd4:	af00      	add	r7, sp, #0
 800fbd6:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800fbd8:	687b      	ldr	r3, [r7, #4]
 800fbda:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 800fbdc:	68fb      	ldr	r3, [r7, #12]
 800fbde:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800fbe2:	681a      	ldr	r2, [r3, #0]
 800fbe4:	68fb      	ldr	r3, [r7, #12]
 800fbe6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800fbea:	4619      	mov	r1, r3
 800fbec:	4b09      	ldr	r3, [pc, #36]	; (800fc14 <USB_ActivateSetup+0x44>)
 800fbee:	4013      	ands	r3, r2
 800fbf0:	600b      	str	r3, [r1, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 800fbf2:	68fb      	ldr	r3, [r7, #12]
 800fbf4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800fbf8:	685b      	ldr	r3, [r3, #4]
 800fbfa:	68fa      	ldr	r2, [r7, #12]
 800fbfc:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800fc00:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800fc04:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800fc06:	2300      	movs	r3, #0
}
 800fc08:	4618      	mov	r0, r3
 800fc0a:	3714      	adds	r7, #20
 800fc0c:	46bd      	mov	sp, r7
 800fc0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fc12:	4770      	bx	lr
 800fc14:	fffff800 	.word	0xfffff800

0800fc18 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 800fc18:	b480      	push	{r7}
 800fc1a:	b087      	sub	sp, #28
 800fc1c:	af00      	add	r7, sp, #0
 800fc1e:	60f8      	str	r0, [r7, #12]
 800fc20:	460b      	mov	r3, r1
 800fc22:	607a      	str	r2, [r7, #4]
 800fc24:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800fc26:	68fb      	ldr	r3, [r7, #12]
 800fc28:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 800fc2a:	68fb      	ldr	r3, [r7, #12]
 800fc2c:	333c      	adds	r3, #60	; 0x3c
 800fc2e:	3304      	adds	r3, #4
 800fc30:	681b      	ldr	r3, [r3, #0]
 800fc32:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 800fc34:	693b      	ldr	r3, [r7, #16]
 800fc36:	4a26      	ldr	r2, [pc, #152]	; (800fcd0 <USB_EP0_OutStart+0xb8>)
 800fc38:	4293      	cmp	r3, r2
 800fc3a:	d90a      	bls.n	800fc52 <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800fc3c:	697b      	ldr	r3, [r7, #20]
 800fc3e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800fc42:	681b      	ldr	r3, [r3, #0]
 800fc44:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800fc48:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800fc4c:	d101      	bne.n	800fc52 <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 800fc4e:	2300      	movs	r3, #0
 800fc50:	e037      	b.n	800fcc2 <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 800fc52:	697b      	ldr	r3, [r7, #20]
 800fc54:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800fc58:	461a      	mov	r2, r3
 800fc5a:	2300      	movs	r3, #0
 800fc5c:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800fc5e:	697b      	ldr	r3, [r7, #20]
 800fc60:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800fc64:	691b      	ldr	r3, [r3, #16]
 800fc66:	697a      	ldr	r2, [r7, #20]
 800fc68:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800fc6c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800fc70:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 800fc72:	697b      	ldr	r3, [r7, #20]
 800fc74:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800fc78:	691b      	ldr	r3, [r3, #16]
 800fc7a:	697a      	ldr	r2, [r7, #20]
 800fc7c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800fc80:	f043 0318 	orr.w	r3, r3, #24
 800fc84:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 800fc86:	697b      	ldr	r3, [r7, #20]
 800fc88:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800fc8c:	691b      	ldr	r3, [r3, #16]
 800fc8e:	697a      	ldr	r2, [r7, #20]
 800fc90:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800fc94:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 800fc98:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 800fc9a:	7afb      	ldrb	r3, [r7, #11]
 800fc9c:	2b01      	cmp	r3, #1
 800fc9e:	d10f      	bne.n	800fcc0 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 800fca0:	697b      	ldr	r3, [r7, #20]
 800fca2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800fca6:	461a      	mov	r2, r3
 800fca8:	687b      	ldr	r3, [r7, #4]
 800fcaa:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 800fcac:	697b      	ldr	r3, [r7, #20]
 800fcae:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800fcb2:	681b      	ldr	r3, [r3, #0]
 800fcb4:	697a      	ldr	r2, [r7, #20]
 800fcb6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800fcba:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 800fcbe:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800fcc0:	2300      	movs	r3, #0
}
 800fcc2:	4618      	mov	r0, r3
 800fcc4:	371c      	adds	r7, #28
 800fcc6:	46bd      	mov	sp, r7
 800fcc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fccc:	4770      	bx	lr
 800fcce:	bf00      	nop
 800fcd0:	4f54300a 	.word	0x4f54300a

0800fcd4 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800fcd4:	b480      	push	{r7}
 800fcd6:	b085      	sub	sp, #20
 800fcd8:	af00      	add	r7, sp, #0
 800fcda:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 800fcdc:	2300      	movs	r3, #0
 800fcde:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 800fce0:	68fb      	ldr	r3, [r7, #12]
 800fce2:	3301      	adds	r3, #1
 800fce4:	60fb      	str	r3, [r7, #12]
 800fce6:	68fb      	ldr	r3, [r7, #12]
 800fce8:	4a13      	ldr	r2, [pc, #76]	; (800fd38 <USB_CoreReset+0x64>)
 800fcea:	4293      	cmp	r3, r2
 800fcec:	d901      	bls.n	800fcf2 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800fcee:	2303      	movs	r3, #3
 800fcf0:	e01b      	b.n	800fd2a <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800fcf2:	687b      	ldr	r3, [r7, #4]
 800fcf4:	691b      	ldr	r3, [r3, #16]
 800fcf6:	2b00      	cmp	r3, #0
 800fcf8:	daf2      	bge.n	800fce0 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800fcfa:	2300      	movs	r3, #0
 800fcfc:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800fcfe:	687b      	ldr	r3, [r7, #4]
 800fd00:	691b      	ldr	r3, [r3, #16]
 800fd02:	f043 0201 	orr.w	r2, r3, #1
 800fd06:	687b      	ldr	r3, [r7, #4]
 800fd08:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800fd0a:	68fb      	ldr	r3, [r7, #12]
 800fd0c:	3301      	adds	r3, #1
 800fd0e:	60fb      	str	r3, [r7, #12]
 800fd10:	68fb      	ldr	r3, [r7, #12]
 800fd12:	4a09      	ldr	r2, [pc, #36]	; (800fd38 <USB_CoreReset+0x64>)
 800fd14:	4293      	cmp	r3, r2
 800fd16:	d901      	bls.n	800fd1c <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 800fd18:	2303      	movs	r3, #3
 800fd1a:	e006      	b.n	800fd2a <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800fd1c:	687b      	ldr	r3, [r7, #4]
 800fd1e:	691b      	ldr	r3, [r3, #16]
 800fd20:	f003 0301 	and.w	r3, r3, #1
 800fd24:	2b01      	cmp	r3, #1
 800fd26:	d0f0      	beq.n	800fd0a <USB_CoreReset+0x36>

  return HAL_OK;
 800fd28:	2300      	movs	r3, #0
}
 800fd2a:	4618      	mov	r0, r3
 800fd2c:	3714      	adds	r7, #20
 800fd2e:	46bd      	mov	sp, r7
 800fd30:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fd34:	4770      	bx	lr
 800fd36:	bf00      	nop
 800fd38:	00030d40 	.word	0x00030d40

0800fd3c <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 800fd3c:	b580      	push	{r7, lr}
 800fd3e:	af00      	add	r7, sp, #0
  /*## FatFS: Link the SD driver ###########################*/
  retSD = FATFS_LinkDriver(&SD_Driver, SDPath);
 800fd40:	4904      	ldr	r1, [pc, #16]	; (800fd54 <MX_FATFS_Init+0x18>)
 800fd42:	4805      	ldr	r0, [pc, #20]	; (800fd58 <MX_FATFS_Init+0x1c>)
 800fd44:	f001 fe4c 	bl	80119e0 <FATFS_LinkDriver>
 800fd48:	4603      	mov	r3, r0
 800fd4a:	461a      	mov	r2, r3
 800fd4c:	4b03      	ldr	r3, [pc, #12]	; (800fd5c <MX_FATFS_Init+0x20>)
 800fd4e:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 800fd50:	bf00      	nop
 800fd52:	bd80      	pop	{r7, pc}
 800fd54:	24000930 	.word	0x24000930
 800fd58:	080167c8 	.word	0x080167c8
 800fd5c:	2400092c 	.word	0x2400092c

0800fd60 <BSP_SD_Init>:
/**
  * @brief  Initializes the SD card device.
  * @retval SD status
  */
__weak uint8_t BSP_SD_Init(void)
{
 800fd60:	b580      	push	{r7, lr}
 800fd62:	b082      	sub	sp, #8
 800fd64:	af00      	add	r7, sp, #0
  uint8_t sd_state = MSD_OK;
 800fd66:	2300      	movs	r3, #0
 800fd68:	71fb      	strb	r3, [r7, #7]
  /* Check if the SD card is plugged in the slot */
  if (BSP_SD_IsDetected() != SD_PRESENT)
 800fd6a:	f000 f885 	bl	800fe78 <BSP_SD_IsDetected>
 800fd6e:	4603      	mov	r3, r0
 800fd70:	2b01      	cmp	r3, #1
 800fd72:	d001      	beq.n	800fd78 <BSP_SD_Init+0x18>
  {
    return MSD_ERROR_SD_NOT_PRESENT;
 800fd74:	2302      	movs	r3, #2
 800fd76:	e012      	b.n	800fd9e <BSP_SD_Init+0x3e>
  }
  /* HAL SD initialization */
  sd_state = HAL_SD_Init(&hsd1);
 800fd78:	480b      	ldr	r0, [pc, #44]	; (800fda8 <BSP_SD_Init+0x48>)
 800fd7a:	f7fa f909 	bl	8009f90 <HAL_SD_Init>
 800fd7e:	4603      	mov	r3, r0
 800fd80:	71fb      	strb	r3, [r7, #7]
  /* Configure SD Bus width (4 bits mode selected) */
  if (sd_state == MSD_OK)
 800fd82:	79fb      	ldrb	r3, [r7, #7]
 800fd84:	2b00      	cmp	r3, #0
 800fd86:	d109      	bne.n	800fd9c <BSP_SD_Init+0x3c>
  {
    /* Enable wide operation */
    if (HAL_SD_ConfigWideBusOperation(&hsd1, SDMMC_BUS_WIDE_4B) != HAL_OK)
 800fd88:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800fd8c:	4806      	ldr	r0, [pc, #24]	; (800fda8 <BSP_SD_Init+0x48>)
 800fd8e:	f7fa ffaf 	bl	800acf0 <HAL_SD_ConfigWideBusOperation>
 800fd92:	4603      	mov	r3, r0
 800fd94:	2b00      	cmp	r3, #0
 800fd96:	d001      	beq.n	800fd9c <BSP_SD_Init+0x3c>
    {
      sd_state = MSD_ERROR;
 800fd98:	2301      	movs	r3, #1
 800fd9a:	71fb      	strb	r3, [r7, #7]
    }
  }

  return sd_state;
 800fd9c:	79fb      	ldrb	r3, [r7, #7]
}
 800fd9e:	4618      	mov	r0, r3
 800fda0:	3708      	adds	r7, #8
 800fda2:	46bd      	mov	sp, r7
 800fda4:	bd80      	pop	{r7, pc}
 800fda6:	bf00      	nop
 800fda8:	24000708 	.word	0x24000708

0800fdac <BSP_SD_ReadBlocks_DMA>:
  * @param  ReadAddr: Address from where data is to be read
  * @param  NumOfBlocks: Number of SD blocks to read
  * @retval SD status
  */
__weak uint8_t BSP_SD_ReadBlocks_DMA(uint32_t *pData, uint32_t ReadAddr, uint32_t NumOfBlocks)
{
 800fdac:	b580      	push	{r7, lr}
 800fdae:	b086      	sub	sp, #24
 800fdb0:	af00      	add	r7, sp, #0
 800fdb2:	60f8      	str	r0, [r7, #12]
 800fdb4:	60b9      	str	r1, [r7, #8]
 800fdb6:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 800fdb8:	2300      	movs	r3, #0
 800fdba:	75fb      	strb	r3, [r7, #23]

  /* Read block(s) in DMA transfer mode */
  if (HAL_SD_ReadBlocks_DMA(&hsd1, (uint8_t *)pData, ReadAddr, NumOfBlocks) != HAL_OK)
 800fdbc:	687b      	ldr	r3, [r7, #4]
 800fdbe:	68ba      	ldr	r2, [r7, #8]
 800fdc0:	68f9      	ldr	r1, [r7, #12]
 800fdc2:	4806      	ldr	r0, [pc, #24]	; (800fddc <BSP_SD_ReadBlocks_DMA+0x30>)
 800fdc4:	f7fa f9fc 	bl	800a1c0 <HAL_SD_ReadBlocks_DMA>
 800fdc8:	4603      	mov	r3, r0
 800fdca:	2b00      	cmp	r3, #0
 800fdcc:	d001      	beq.n	800fdd2 <BSP_SD_ReadBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 800fdce:	2301      	movs	r3, #1
 800fdd0:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 800fdd2:	7dfb      	ldrb	r3, [r7, #23]
}
 800fdd4:	4618      	mov	r0, r3
 800fdd6:	3718      	adds	r7, #24
 800fdd8:	46bd      	mov	sp, r7
 800fdda:	bd80      	pop	{r7, pc}
 800fddc:	24000708 	.word	0x24000708

0800fde0 <BSP_SD_WriteBlocks_DMA>:
  * @param  WriteAddr: Address from where data is to be written
  * @param  NumOfBlocks: Number of SD blocks to write
  * @retval SD status
  */
__weak uint8_t BSP_SD_WriteBlocks_DMA(uint32_t *pData, uint32_t WriteAddr, uint32_t NumOfBlocks)
{
 800fde0:	b580      	push	{r7, lr}
 800fde2:	b086      	sub	sp, #24
 800fde4:	af00      	add	r7, sp, #0
 800fde6:	60f8      	str	r0, [r7, #12]
 800fde8:	60b9      	str	r1, [r7, #8]
 800fdea:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 800fdec:	2300      	movs	r3, #0
 800fdee:	75fb      	strb	r3, [r7, #23]

  /* Write block(s) in DMA transfer mode */
  if (HAL_SD_WriteBlocks_DMA(&hsd1, (uint8_t *)pData, WriteAddr, NumOfBlocks) != HAL_OK)
 800fdf0:	687b      	ldr	r3, [r7, #4]
 800fdf2:	68ba      	ldr	r2, [r7, #8]
 800fdf4:	68f9      	ldr	r1, [r7, #12]
 800fdf6:	4806      	ldr	r0, [pc, #24]	; (800fe10 <BSP_SD_WriteBlocks_DMA+0x30>)
 800fdf8:	f7fa fa8a 	bl	800a310 <HAL_SD_WriteBlocks_DMA>
 800fdfc:	4603      	mov	r3, r0
 800fdfe:	2b00      	cmp	r3, #0
 800fe00:	d001      	beq.n	800fe06 <BSP_SD_WriteBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 800fe02:	2301      	movs	r3, #1
 800fe04:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 800fe06:	7dfb      	ldrb	r3, [r7, #23]
}
 800fe08:	4618      	mov	r0, r3
 800fe0a:	3718      	adds	r7, #24
 800fe0c:	46bd      	mov	sp, r7
 800fe0e:	bd80      	pop	{r7, pc}
 800fe10:	24000708 	.word	0x24000708

0800fe14 <BSP_SD_GetCardState>:
  *          This value can be one of the following values:
  *            @arg  SD_TRANSFER_OK: No data transfer is acting
  *            @arg  SD_TRANSFER_BUSY: Data transfer is acting
  */
__weak uint8_t BSP_SD_GetCardState(void)
{
 800fe14:	b580      	push	{r7, lr}
 800fe16:	af00      	add	r7, sp, #0
  return ((HAL_SD_GetCardState(&hsd1) == HAL_SD_CARD_TRANSFER ) ? SD_TRANSFER_OK : SD_TRANSFER_BUSY);
 800fe18:	4805      	ldr	r0, [pc, #20]	; (800fe30 <BSP_SD_GetCardState+0x1c>)
 800fe1a:	f7fb f879 	bl	800af10 <HAL_SD_GetCardState>
 800fe1e:	4603      	mov	r3, r0
 800fe20:	2b04      	cmp	r3, #4
 800fe22:	bf14      	ite	ne
 800fe24:	2301      	movne	r3, #1
 800fe26:	2300      	moveq	r3, #0
 800fe28:	b2db      	uxtb	r3, r3
}
 800fe2a:	4618      	mov	r0, r3
 800fe2c:	bd80      	pop	{r7, pc}
 800fe2e:	bf00      	nop
 800fe30:	24000708 	.word	0x24000708

0800fe34 <BSP_SD_GetCardInfo>:
  * @brief  Get SD information about specific SD card.
  * @param  CardInfo: Pointer to HAL_SD_CardInfoTypedef structure
  * @retval None
  */
__weak void BSP_SD_GetCardInfo(HAL_SD_CardInfoTypeDef *CardInfo)
{
 800fe34:	b580      	push	{r7, lr}
 800fe36:	b082      	sub	sp, #8
 800fe38:	af00      	add	r7, sp, #0
 800fe3a:	6078      	str	r0, [r7, #4]
  /* Get SD card Information */
  HAL_SD_GetCardInfo(&hsd1, CardInfo);
 800fe3c:	6879      	ldr	r1, [r7, #4]
 800fe3e:	4803      	ldr	r0, [pc, #12]	; (800fe4c <BSP_SD_GetCardInfo+0x18>)
 800fe40:	f7fa ff2a 	bl	800ac98 <HAL_SD_GetCardInfo>
}
 800fe44:	bf00      	nop
 800fe46:	3708      	adds	r7, #8
 800fe48:	46bd      	mov	sp, r7
 800fe4a:	bd80      	pop	{r7, pc}
 800fe4c:	24000708 	.word	0x24000708

0800fe50 <HAL_SD_TxCpltCallback>:
  * @brief Tx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_TxCpltCallback(SD_HandleTypeDef *hsd)
{
 800fe50:	b580      	push	{r7, lr}
 800fe52:	b082      	sub	sp, #8
 800fe54:	af00      	add	r7, sp, #0
 800fe56:	6078      	str	r0, [r7, #4]
  BSP_SD_WriteCpltCallback();
 800fe58:	f000 f9a0 	bl	801019c <BSP_SD_WriteCpltCallback>
}
 800fe5c:	bf00      	nop
 800fe5e:	3708      	adds	r7, #8
 800fe60:	46bd      	mov	sp, r7
 800fe62:	bd80      	pop	{r7, pc}

0800fe64 <HAL_SD_RxCpltCallback>:
  * @brief Rx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_RxCpltCallback(SD_HandleTypeDef *hsd)
{
 800fe64:	b580      	push	{r7, lr}
 800fe66:	b082      	sub	sp, #8
 800fe68:	af00      	add	r7, sp, #0
 800fe6a:	6078      	str	r0, [r7, #4]
  BSP_SD_ReadCpltCallback();
 800fe6c:	f000 f9a2 	bl	80101b4 <BSP_SD_ReadCpltCallback>
}
 800fe70:	bf00      	nop
 800fe72:	3708      	adds	r7, #8
 800fe74:	46bd      	mov	sp, r7
 800fe76:	bd80      	pop	{r7, pc}

0800fe78 <BSP_SD_IsDetected>:
 * @brief  Detects if SD card is correctly plugged in the memory slot or not.
 * @param  None
 * @retval Returns if SD is detected or not
 */
__weak uint8_t BSP_SD_IsDetected(void)
{
 800fe78:	b580      	push	{r7, lr}
 800fe7a:	b082      	sub	sp, #8
 800fe7c:	af00      	add	r7, sp, #0
  __IO uint8_t status = SD_PRESENT;
 800fe7e:	2301      	movs	r3, #1
 800fe80:	71fb      	strb	r3, [r7, #7]

  if (BSP_PlatformIsDetected() == 0x0)
 800fe82:	f000 f80b 	bl	800fe9c <BSP_PlatformIsDetected>
 800fe86:	4603      	mov	r3, r0
 800fe88:	2b00      	cmp	r3, #0
 800fe8a:	d101      	bne.n	800fe90 <BSP_SD_IsDetected+0x18>
  {
    status = SD_NOT_PRESENT;
 800fe8c:	2300      	movs	r3, #0
 800fe8e:	71fb      	strb	r3, [r7, #7]
  }

  return status;
 800fe90:	79fb      	ldrb	r3, [r7, #7]
 800fe92:	b2db      	uxtb	r3, r3
}
 800fe94:	4618      	mov	r0, r3
 800fe96:	3708      	adds	r7, #8
 800fe98:	46bd      	mov	sp, r7
 800fe9a:	bd80      	pop	{r7, pc}

0800fe9c <BSP_PlatformIsDetected>:
  *
  ******************************************************************************
*/
#include "fatfs_platform.h"

uint8_t	BSP_PlatformIsDetected(void) {
 800fe9c:	b580      	push	{r7, lr}
 800fe9e:	b082      	sub	sp, #8
 800fea0:	af00      	add	r7, sp, #0
    uint8_t status = SD_PRESENT;
 800fea2:	2301      	movs	r3, #1
 800fea4:	71fb      	strb	r3, [r7, #7]
    /* Check SD card detect pin */
    if(HAL_GPIO_ReadPin(SD_DETECT_GPIO_PORT, SD_DETECT_PIN) != GPIO_PIN_RESET)
 800fea6:	f44f 7180 	mov.w	r1, #256	; 0x100
 800feaa:	4806      	ldr	r0, [pc, #24]	; (800fec4 <BSP_PlatformIsDetected+0x28>)
 800feac:	f7f4 fef8 	bl	8004ca0 <HAL_GPIO_ReadPin>
 800feb0:	4603      	mov	r3, r0
 800feb2:	2b00      	cmp	r3, #0
 800feb4:	d001      	beq.n	800feba <BSP_PlatformIsDetected+0x1e>
    {
        status = SD_NOT_PRESENT;
 800feb6:	2300      	movs	r3, #0
 800feb8:	71fb      	strb	r3, [r7, #7]
    }
    /* USER CODE BEGIN 1 */
    /* user code can be inserted here */
    /* USER CODE END 1 */
    return status;
 800feba:	79fb      	ldrb	r3, [r7, #7]
}
 800febc:	4618      	mov	r0, r3
 800febe:	3708      	adds	r7, #8
 800fec0:	46bd      	mov	sp, r7
 800fec2:	bd80      	pop	{r7, pc}
 800fec4:	58020000 	.word	0x58020000

0800fec8 <SD_CheckStatusWithTimeout>:
/* USER CODE END beforeFunctionSection */

/* Private functions ---------------------------------------------------------*/

static int SD_CheckStatusWithTimeout(uint32_t timeout)
{
 800fec8:	b580      	push	{r7, lr}
 800feca:	b084      	sub	sp, #16
 800fecc:	af00      	add	r7, sp, #0
 800fece:	6078      	str	r0, [r7, #4]
  uint32_t timer = HAL_GetTick();
 800fed0:	f7f2 fa6e 	bl	80023b0 <HAL_GetTick>
 800fed4:	60f8      	str	r0, [r7, #12]
  /* block until SDIO IP is ready again or a timeout occur */
  while(HAL_GetTick() - timer < timeout)
 800fed6:	e006      	b.n	800fee6 <SD_CheckStatusWithTimeout+0x1e>
  {
    if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 800fed8:	f7ff ff9c 	bl	800fe14 <BSP_SD_GetCardState>
 800fedc:	4603      	mov	r3, r0
 800fede:	2b00      	cmp	r3, #0
 800fee0:	d101      	bne.n	800fee6 <SD_CheckStatusWithTimeout+0x1e>
    {
      return 0;
 800fee2:	2300      	movs	r3, #0
 800fee4:	e009      	b.n	800fefa <SD_CheckStatusWithTimeout+0x32>
  while(HAL_GetTick() - timer < timeout)
 800fee6:	f7f2 fa63 	bl	80023b0 <HAL_GetTick>
 800feea:	4602      	mov	r2, r0
 800feec:	68fb      	ldr	r3, [r7, #12]
 800feee:	1ad3      	subs	r3, r2, r3
 800fef0:	687a      	ldr	r2, [r7, #4]
 800fef2:	429a      	cmp	r2, r3
 800fef4:	d8f0      	bhi.n	800fed8 <SD_CheckStatusWithTimeout+0x10>
    }
  }

  return -1;
 800fef6:	f04f 33ff 	mov.w	r3, #4294967295
}
 800fefa:	4618      	mov	r0, r3
 800fefc:	3710      	adds	r7, #16
 800fefe:	46bd      	mov	sp, r7
 800ff00:	bd80      	pop	{r7, pc}
	...

0800ff04 <SD_CheckStatus>:

static DSTATUS SD_CheckStatus(BYTE lun)
{
 800ff04:	b580      	push	{r7, lr}
 800ff06:	b082      	sub	sp, #8
 800ff08:	af00      	add	r7, sp, #0
 800ff0a:	4603      	mov	r3, r0
 800ff0c:	71fb      	strb	r3, [r7, #7]
  Stat = STA_NOINIT;
 800ff0e:	4b0b      	ldr	r3, [pc, #44]	; (800ff3c <SD_CheckStatus+0x38>)
 800ff10:	2201      	movs	r2, #1
 800ff12:	701a      	strb	r2, [r3, #0]

  if(BSP_SD_GetCardState() == MSD_OK)
 800ff14:	f7ff ff7e 	bl	800fe14 <BSP_SD_GetCardState>
 800ff18:	4603      	mov	r3, r0
 800ff1a:	2b00      	cmp	r3, #0
 800ff1c:	d107      	bne.n	800ff2e <SD_CheckStatus+0x2a>
  {
    Stat &= ~STA_NOINIT;
 800ff1e:	4b07      	ldr	r3, [pc, #28]	; (800ff3c <SD_CheckStatus+0x38>)
 800ff20:	781b      	ldrb	r3, [r3, #0]
 800ff22:	b2db      	uxtb	r3, r3
 800ff24:	f023 0301 	bic.w	r3, r3, #1
 800ff28:	b2da      	uxtb	r2, r3
 800ff2a:	4b04      	ldr	r3, [pc, #16]	; (800ff3c <SD_CheckStatus+0x38>)
 800ff2c:	701a      	strb	r2, [r3, #0]
  }

  return Stat;
 800ff2e:	4b03      	ldr	r3, [pc, #12]	; (800ff3c <SD_CheckStatus+0x38>)
 800ff30:	781b      	ldrb	r3, [r3, #0]
 800ff32:	b2db      	uxtb	r3, r3
}
 800ff34:	4618      	mov	r0, r3
 800ff36:	3708      	adds	r7, #8
 800ff38:	46bd      	mov	sp, r7
 800ff3a:	bd80      	pop	{r7, pc}
 800ff3c:	2400000d 	.word	0x2400000d

0800ff40 <SD_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_initialize(BYTE lun)
{
 800ff40:	b580      	push	{r7, lr}
 800ff42:	b082      	sub	sp, #8
 800ff44:	af00      	add	r7, sp, #0
 800ff46:	4603      	mov	r3, r0
 800ff48:	71fb      	strb	r3, [r7, #7]

#if !defined(DISABLE_SD_INIT)

  if(BSP_SD_Init() == MSD_OK)
 800ff4a:	f7ff ff09 	bl	800fd60 <BSP_SD_Init>
 800ff4e:	4603      	mov	r3, r0
 800ff50:	2b00      	cmp	r3, #0
 800ff52:	d107      	bne.n	800ff64 <SD_initialize+0x24>
  {
    Stat = SD_CheckStatus(lun);
 800ff54:	79fb      	ldrb	r3, [r7, #7]
 800ff56:	4618      	mov	r0, r3
 800ff58:	f7ff ffd4 	bl	800ff04 <SD_CheckStatus>
 800ff5c:	4603      	mov	r3, r0
 800ff5e:	461a      	mov	r2, r3
 800ff60:	4b04      	ldr	r3, [pc, #16]	; (800ff74 <SD_initialize+0x34>)
 800ff62:	701a      	strb	r2, [r3, #0]

#else
  Stat = SD_CheckStatus(lun);
#endif

  return Stat;
 800ff64:	4b03      	ldr	r3, [pc, #12]	; (800ff74 <SD_initialize+0x34>)
 800ff66:	781b      	ldrb	r3, [r3, #0]
 800ff68:	b2db      	uxtb	r3, r3
}
 800ff6a:	4618      	mov	r0, r3
 800ff6c:	3708      	adds	r7, #8
 800ff6e:	46bd      	mov	sp, r7
 800ff70:	bd80      	pop	{r7, pc}
 800ff72:	bf00      	nop
 800ff74:	2400000d 	.word	0x2400000d

0800ff78 <SD_status>:
  * @brief  Gets Disk Status
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_status(BYTE lun)
{
 800ff78:	b580      	push	{r7, lr}
 800ff7a:	b082      	sub	sp, #8
 800ff7c:	af00      	add	r7, sp, #0
 800ff7e:	4603      	mov	r3, r0
 800ff80:	71fb      	strb	r3, [r7, #7]
  return SD_CheckStatus(lun);
 800ff82:	79fb      	ldrb	r3, [r7, #7]
 800ff84:	4618      	mov	r0, r3
 800ff86:	f7ff ffbd 	bl	800ff04 <SD_CheckStatus>
 800ff8a:	4603      	mov	r3, r0
}
 800ff8c:	4618      	mov	r0, r3
 800ff8e:	3708      	adds	r7, #8
 800ff90:	46bd      	mov	sp, r7
 800ff92:	bd80      	pop	{r7, pc}

0800ff94 <SD_read>:
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */

DRESULT SD_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 800ff94:	b580      	push	{r7, lr}
 800ff96:	b086      	sub	sp, #24
 800ff98:	af00      	add	r7, sp, #0
 800ff9a:	60b9      	str	r1, [r7, #8]
 800ff9c:	607a      	str	r2, [r7, #4]
 800ff9e:	603b      	str	r3, [r7, #0]
 800ffa0:	4603      	mov	r3, r0
 800ffa2:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 800ffa4:	2301      	movs	r3, #1
 800ffa6:	75fb      	strb	r3, [r7, #23]

  /*
  * ensure the SDCard is ready for a new operation
  */

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 800ffa8:	f247 5030 	movw	r0, #30000	; 0x7530
 800ffac:	f7ff ff8c 	bl	800fec8 <SD_CheckStatusWithTimeout>
 800ffb0:	4603      	mov	r3, r0
 800ffb2:	2b00      	cmp	r3, #0
 800ffb4:	da01      	bge.n	800ffba <SD_read+0x26>
  {
    return res;
 800ffb6:	7dfb      	ldrb	r3, [r7, #23]
 800ffb8:	e03b      	b.n	8010032 <SD_read+0x9e>

#if defined(ENABLE_SCRATCH_BUFFER)
  if (!((uint32_t)buff & 0x3))
  {
#endif
    if(BSP_SD_ReadBlocks_DMA((uint32_t*)buff,
 800ffba:	683a      	ldr	r2, [r7, #0]
 800ffbc:	6879      	ldr	r1, [r7, #4]
 800ffbe:	68b8      	ldr	r0, [r7, #8]
 800ffc0:	f7ff fef4 	bl	800fdac <BSP_SD_ReadBlocks_DMA>
 800ffc4:	4603      	mov	r3, r0
 800ffc6:	2b00      	cmp	r3, #0
 800ffc8:	d132      	bne.n	8010030 <SD_read+0x9c>
                             (uint32_t) (sector),
                             count) == MSD_OK)
    {
      ReadStatus = 0;
 800ffca:	4b1c      	ldr	r3, [pc, #112]	; (801003c <SD_read+0xa8>)
 800ffcc:	2200      	movs	r2, #0
 800ffce:	601a      	str	r2, [r3, #0]
      /* Wait that the reading process is completed or a timeout occurs */
      timeout = HAL_GetTick();
 800ffd0:	f7f2 f9ee 	bl	80023b0 <HAL_GetTick>
 800ffd4:	6138      	str	r0, [r7, #16]
      while((ReadStatus == 0) && ((HAL_GetTick() - timeout) < SD_TIMEOUT))
 800ffd6:	bf00      	nop
 800ffd8:	4b18      	ldr	r3, [pc, #96]	; (801003c <SD_read+0xa8>)
 800ffda:	681b      	ldr	r3, [r3, #0]
 800ffdc:	2b00      	cmp	r3, #0
 800ffde:	d108      	bne.n	800fff2 <SD_read+0x5e>
 800ffe0:	f7f2 f9e6 	bl	80023b0 <HAL_GetTick>
 800ffe4:	4602      	mov	r2, r0
 800ffe6:	693b      	ldr	r3, [r7, #16]
 800ffe8:	1ad3      	subs	r3, r2, r3
 800ffea:	f247 522f 	movw	r2, #29999	; 0x752f
 800ffee:	4293      	cmp	r3, r2
 800fff0:	d9f2      	bls.n	800ffd8 <SD_read+0x44>
      {
      }
      /* in case of a timeout return error */
      if (ReadStatus == 0)
 800fff2:	4b12      	ldr	r3, [pc, #72]	; (801003c <SD_read+0xa8>)
 800fff4:	681b      	ldr	r3, [r3, #0]
 800fff6:	2b00      	cmp	r3, #0
 800fff8:	d102      	bne.n	8010000 <SD_read+0x6c>
      {
        res = RES_ERROR;
 800fffa:	2301      	movs	r3, #1
 800fffc:	75fb      	strb	r3, [r7, #23]
 800fffe:	e017      	b.n	8010030 <SD_read+0x9c>
      }
      else
      {
        ReadStatus = 0;
 8010000:	4b0e      	ldr	r3, [pc, #56]	; (801003c <SD_read+0xa8>)
 8010002:	2200      	movs	r2, #0
 8010004:	601a      	str	r2, [r3, #0]
        timeout = HAL_GetTick();
 8010006:	f7f2 f9d3 	bl	80023b0 <HAL_GetTick>
 801000a:	6138      	str	r0, [r7, #16]

        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 801000c:	e007      	b.n	801001e <SD_read+0x8a>
        {
          if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 801000e:	f7ff ff01 	bl	800fe14 <BSP_SD_GetCardState>
 8010012:	4603      	mov	r3, r0
 8010014:	2b00      	cmp	r3, #0
 8010016:	d102      	bne.n	801001e <SD_read+0x8a>
          {
            res = RES_OK;
 8010018:	2300      	movs	r3, #0
 801001a:	75fb      	strb	r3, [r7, #23]
            adjust the address and the D-Cache size to invalidate accordingly.
            */
            alignedAddr = (uint32_t)buff & ~0x1F;
            SCB_InvalidateDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif
            break;
 801001c:	e008      	b.n	8010030 <SD_read+0x9c>
        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 801001e:	f7f2 f9c7 	bl	80023b0 <HAL_GetTick>
 8010022:	4602      	mov	r2, r0
 8010024:	693b      	ldr	r3, [r7, #16]
 8010026:	1ad3      	subs	r3, r2, r3
 8010028:	f247 522f 	movw	r2, #29999	; 0x752f
 801002c:	4293      	cmp	r3, r2
 801002e:	d9ee      	bls.n	801000e <SD_read+0x7a>
      if ((i == count) && (ret == MSD_OK))
        res = RES_OK;
    }
#endif

  return res;
 8010030:	7dfb      	ldrb	r3, [r7, #23]
}
 8010032:	4618      	mov	r0, r3
 8010034:	3718      	adds	r7, #24
 8010036:	46bd      	mov	sp, r7
 8010038:	bd80      	pop	{r7, pc}
 801003a:	bf00      	nop
 801003c:	24000938 	.word	0x24000938

08010040 <SD_write>:
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1

DRESULT SD_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 8010040:	b580      	push	{r7, lr}
 8010042:	b086      	sub	sp, #24
 8010044:	af00      	add	r7, sp, #0
 8010046:	60b9      	str	r1, [r7, #8]
 8010048:	607a      	str	r2, [r7, #4]
 801004a:	603b      	str	r3, [r7, #0]
 801004c:	4603      	mov	r3, r0
 801004e:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 8010050:	2301      	movs	r3, #1
 8010052:	75fb      	strb	r3, [r7, #23]
#if defined(ENABLE_SCRATCH_BUFFER)
  uint8_t ret;
  int i;
#endif

   WriteStatus = 0;
 8010054:	4b24      	ldr	r3, [pc, #144]	; (80100e8 <SD_write+0xa8>)
 8010056:	2200      	movs	r2, #0
 8010058:	601a      	str	r2, [r3, #0]
#if (ENABLE_SD_DMA_CACHE_MAINTENANCE == 1)
  uint32_t alignedAddr;
#endif

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 801005a:	f247 5030 	movw	r0, #30000	; 0x7530
 801005e:	f7ff ff33 	bl	800fec8 <SD_CheckStatusWithTimeout>
 8010062:	4603      	mov	r3, r0
 8010064:	2b00      	cmp	r3, #0
 8010066:	da01      	bge.n	801006c <SD_write+0x2c>
  {
    return res;
 8010068:	7dfb      	ldrb	r3, [r7, #23]
 801006a:	e038      	b.n	80100de <SD_write+0x9e>
    */
    alignedAddr = (uint32_t)buff &  ~0x1F;
    SCB_CleanDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif

    if(BSP_SD_WriteBlocks_DMA((uint32_t*)buff,
 801006c:	683a      	ldr	r2, [r7, #0]
 801006e:	6879      	ldr	r1, [r7, #4]
 8010070:	68b8      	ldr	r0, [r7, #8]
 8010072:	f7ff feb5 	bl	800fde0 <BSP_SD_WriteBlocks_DMA>
 8010076:	4603      	mov	r3, r0
 8010078:	2b00      	cmp	r3, #0
 801007a:	d12f      	bne.n	80100dc <SD_write+0x9c>
                              (uint32_t)(sector),
                              count) == MSD_OK)
    {
      /* Wait that writing process is completed or a timeout occurs */

      timeout = HAL_GetTick();
 801007c:	f7f2 f998 	bl	80023b0 <HAL_GetTick>
 8010080:	6138      	str	r0, [r7, #16]
      while((WriteStatus == 0) && ((HAL_GetTick() - timeout) < SD_TIMEOUT))
 8010082:	bf00      	nop
 8010084:	4b18      	ldr	r3, [pc, #96]	; (80100e8 <SD_write+0xa8>)
 8010086:	681b      	ldr	r3, [r3, #0]
 8010088:	2b00      	cmp	r3, #0
 801008a:	d108      	bne.n	801009e <SD_write+0x5e>
 801008c:	f7f2 f990 	bl	80023b0 <HAL_GetTick>
 8010090:	4602      	mov	r2, r0
 8010092:	693b      	ldr	r3, [r7, #16]
 8010094:	1ad3      	subs	r3, r2, r3
 8010096:	f247 522f 	movw	r2, #29999	; 0x752f
 801009a:	4293      	cmp	r3, r2
 801009c:	d9f2      	bls.n	8010084 <SD_write+0x44>
      {
      }
      /* in case of a timeout return error */
      if (WriteStatus == 0)
 801009e:	4b12      	ldr	r3, [pc, #72]	; (80100e8 <SD_write+0xa8>)
 80100a0:	681b      	ldr	r3, [r3, #0]
 80100a2:	2b00      	cmp	r3, #0
 80100a4:	d102      	bne.n	80100ac <SD_write+0x6c>
      {
        res = RES_ERROR;
 80100a6:	2301      	movs	r3, #1
 80100a8:	75fb      	strb	r3, [r7, #23]
 80100aa:	e017      	b.n	80100dc <SD_write+0x9c>
      }
      else
      {
        WriteStatus = 0;
 80100ac:	4b0e      	ldr	r3, [pc, #56]	; (80100e8 <SD_write+0xa8>)
 80100ae:	2200      	movs	r2, #0
 80100b0:	601a      	str	r2, [r3, #0]
        timeout = HAL_GetTick();
 80100b2:	f7f2 f97d 	bl	80023b0 <HAL_GetTick>
 80100b6:	6138      	str	r0, [r7, #16]

        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 80100b8:	e007      	b.n	80100ca <SD_write+0x8a>
        {
          if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 80100ba:	f7ff feab 	bl	800fe14 <BSP_SD_GetCardState>
 80100be:	4603      	mov	r3, r0
 80100c0:	2b00      	cmp	r3, #0
 80100c2:	d102      	bne.n	80100ca <SD_write+0x8a>
          {
            res = RES_OK;
 80100c4:	2300      	movs	r3, #0
 80100c6:	75fb      	strb	r3, [r7, #23]
            break;
 80100c8:	e008      	b.n	80100dc <SD_write+0x9c>
        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 80100ca:	f7f2 f971 	bl	80023b0 <HAL_GetTick>
 80100ce:	4602      	mov	r2, r0
 80100d0:	693b      	ldr	r3, [r7, #16]
 80100d2:	1ad3      	subs	r3, r2, r3
 80100d4:	f247 522f 	movw	r2, #29999	; 0x752f
 80100d8:	4293      	cmp	r3, r2
 80100da:	d9ee      	bls.n	80100ba <SD_write+0x7a>
      }
      if ((i == count) && (ret == MSD_OK))
        res = RES_OK;
    }
#endif
  return res;
 80100dc:	7dfb      	ldrb	r3, [r7, #23]
}
 80100de:	4618      	mov	r0, r3
 80100e0:	3718      	adds	r7, #24
 80100e2:	46bd      	mov	sp, r7
 80100e4:	bd80      	pop	{r7, pc}
 80100e6:	bf00      	nop
 80100e8:	24000934 	.word	0x24000934

080100ec <SD_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT SD_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 80100ec:	b580      	push	{r7, lr}
 80100ee:	b08c      	sub	sp, #48	; 0x30
 80100f0:	af00      	add	r7, sp, #0
 80100f2:	4603      	mov	r3, r0
 80100f4:	603a      	str	r2, [r7, #0]
 80100f6:	71fb      	strb	r3, [r7, #7]
 80100f8:	460b      	mov	r3, r1
 80100fa:	71bb      	strb	r3, [r7, #6]
  DRESULT res = RES_ERROR;
 80100fc:	2301      	movs	r3, #1
 80100fe:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  BSP_SD_CardInfo CardInfo;

  if (Stat & STA_NOINIT) return RES_NOTRDY;
 8010102:	4b25      	ldr	r3, [pc, #148]	; (8010198 <SD_ioctl+0xac>)
 8010104:	781b      	ldrb	r3, [r3, #0]
 8010106:	b2db      	uxtb	r3, r3
 8010108:	f003 0301 	and.w	r3, r3, #1
 801010c:	2b00      	cmp	r3, #0
 801010e:	d001      	beq.n	8010114 <SD_ioctl+0x28>
 8010110:	2303      	movs	r3, #3
 8010112:	e03c      	b.n	801018e <SD_ioctl+0xa2>

  switch (cmd)
 8010114:	79bb      	ldrb	r3, [r7, #6]
 8010116:	2b03      	cmp	r3, #3
 8010118:	d834      	bhi.n	8010184 <SD_ioctl+0x98>
 801011a:	a201      	add	r2, pc, #4	; (adr r2, 8010120 <SD_ioctl+0x34>)
 801011c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010120:	08010131 	.word	0x08010131
 8010124:	08010139 	.word	0x08010139
 8010128:	08010151 	.word	0x08010151
 801012c:	0801016b 	.word	0x0801016b
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC :
    res = RES_OK;
 8010130:	2300      	movs	r3, #0
 8010132:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 8010136:	e028      	b.n	801018a <SD_ioctl+0x9e>

  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    BSP_SD_GetCardInfo(&CardInfo);
 8010138:	f107 0308 	add.w	r3, r7, #8
 801013c:	4618      	mov	r0, r3
 801013e:	f7ff fe79 	bl	800fe34 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockNbr;
 8010142:	6a3a      	ldr	r2, [r7, #32]
 8010144:	683b      	ldr	r3, [r7, #0]
 8010146:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 8010148:	2300      	movs	r3, #0
 801014a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 801014e:	e01c      	b.n	801018a <SD_ioctl+0x9e>

  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 8010150:	f107 0308 	add.w	r3, r7, #8
 8010154:	4618      	mov	r0, r3
 8010156:	f7ff fe6d 	bl	800fe34 <BSP_SD_GetCardInfo>
    *(WORD*)buff = CardInfo.LogBlockSize;
 801015a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801015c:	b29a      	uxth	r2, r3
 801015e:	683b      	ldr	r3, [r7, #0]
 8010160:	801a      	strh	r2, [r3, #0]
    res = RES_OK;
 8010162:	2300      	movs	r3, #0
 8010164:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 8010168:	e00f      	b.n	801018a <SD_ioctl+0x9e>

  /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 801016a:	f107 0308 	add.w	r3, r7, #8
 801016e:	4618      	mov	r0, r3
 8010170:	f7ff fe60 	bl	800fe34 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
 8010174:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010176:	0a5a      	lsrs	r2, r3, #9
 8010178:	683b      	ldr	r3, [r7, #0]
 801017a:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 801017c:	2300      	movs	r3, #0
 801017e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 8010182:	e002      	b.n	801018a <SD_ioctl+0x9e>

  default:
    res = RES_PARERR;
 8010184:	2304      	movs	r3, #4
 8010186:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  }

  return res;
 801018a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 801018e:	4618      	mov	r0, r3
 8010190:	3730      	adds	r7, #48	; 0x30
 8010192:	46bd      	mov	sp, r7
 8010194:	bd80      	pop	{r7, pc}
 8010196:	bf00      	nop
 8010198:	2400000d 	.word	0x2400000d

0801019c <BSP_SD_WriteCpltCallback>:
  * @brief Tx Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
void BSP_SD_WriteCpltCallback(void)
{
 801019c:	b480      	push	{r7}
 801019e:	af00      	add	r7, sp, #0

  WriteStatus = 1;
 80101a0:	4b03      	ldr	r3, [pc, #12]	; (80101b0 <BSP_SD_WriteCpltCallback+0x14>)
 80101a2:	2201      	movs	r2, #1
 80101a4:	601a      	str	r2, [r3, #0]
}
 80101a6:	bf00      	nop
 80101a8:	46bd      	mov	sp, r7
 80101aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80101ae:	4770      	bx	lr
 80101b0:	24000934 	.word	0x24000934

080101b4 <BSP_SD_ReadCpltCallback>:
  * @brief Rx Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
void BSP_SD_ReadCpltCallback(void)
{
 80101b4:	b480      	push	{r7}
 80101b6:	af00      	add	r7, sp, #0
  ReadStatus = 1;
 80101b8:	4b03      	ldr	r3, [pc, #12]	; (80101c8 <BSP_SD_ReadCpltCallback+0x14>)
 80101ba:	2201      	movs	r2, #1
 80101bc:	601a      	str	r2, [r3, #0]
}
 80101be:	bf00      	nop
 80101c0:	46bd      	mov	sp, r7
 80101c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80101c6:	4770      	bx	lr
 80101c8:	24000938 	.word	0x24000938

080101cc <USBD_CUSTOM_HID_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CUSTOM_HID_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80101cc:	b580      	push	{r7, lr}
 80101ce:	b084      	sub	sp, #16
 80101d0:	af00      	add	r7, sp, #0
 80101d2:	6078      	str	r0, [r7, #4]
 80101d4:	460b      	mov	r3, r1
 80101d6:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CUSTOM_HID_HandleTypeDef *hhid;

  hhid = USBD_malloc(sizeof(USBD_CUSTOM_HID_HandleTypeDef));
 80101d8:	2018      	movs	r0, #24
 80101da:	f002 f855 	bl	8012288 <USBD_static_malloc>
 80101de:	60f8      	str	r0, [r7, #12]

  if (hhid == NULL)
 80101e0:	68fb      	ldr	r3, [r7, #12]
 80101e2:	2b00      	cmp	r3, #0
 80101e4:	d105      	bne.n	80101f2 <USBD_CUSTOM_HID_Init+0x26>
  {
    pdev->pClassData = NULL;
 80101e6:	687b      	ldr	r3, [r7, #4]
 80101e8:	2200      	movs	r2, #0
 80101ea:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    return (uint8_t)USBD_EMEM;
 80101ee:	2302      	movs	r3, #2
 80101f0:	e038      	b.n	8010264 <USBD_CUSTOM_HID_Init+0x98>
  }

  pdev->pClassData = (void *)hhid;
 80101f2:	687b      	ldr	r3, [r7, #4]
 80101f4:	68fa      	ldr	r2, [r7, #12]
 80101f6:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80101fa:	687b      	ldr	r3, [r7, #4]
 80101fc:	7c1b      	ldrb	r3, [r3, #16]
 80101fe:	2b00      	cmp	r3, #0
 8010200:	d107      	bne.n	8010212 <USBD_CUSTOM_HID_Init+0x46>
  {
    pdev->ep_in[CUSTOM_HID_EPIN_ADDR & 0xFU].bInterval = CUSTOM_HID_HS_BINTERVAL;
 8010202:	687b      	ldr	r3, [r7, #4]
 8010204:	2205      	movs	r2, #5
 8010206:	875a      	strh	r2, [r3, #58]	; 0x3a
    pdev->ep_out[CUSTOM_HID_EPOUT_ADDR & 0xFU].bInterval = CUSTOM_HID_HS_BINTERVAL;
 8010208:	687b      	ldr	r3, [r7, #4]
 801020a:	2205      	movs	r2, #5
 801020c:	f8a3 217a 	strh.w	r2, [r3, #378]	; 0x17a
 8010210:	e006      	b.n	8010220 <USBD_CUSTOM_HID_Init+0x54>
  }
  else   /* LOW and FULL-speed endpoints */
  {
    pdev->ep_in[CUSTOM_HID_EPIN_ADDR & 0xFU].bInterval = CUSTOM_HID_FS_BINTERVAL;
 8010212:	687b      	ldr	r3, [r7, #4]
 8010214:	2205      	movs	r2, #5
 8010216:	875a      	strh	r2, [r3, #58]	; 0x3a
    pdev->ep_out[CUSTOM_HID_EPOUT_ADDR & 0xFU].bInterval = CUSTOM_HID_FS_BINTERVAL;
 8010218:	687b      	ldr	r3, [r7, #4]
 801021a:	2205      	movs	r2, #5
 801021c:	f8a3 217a 	strh.w	r2, [r3, #378]	; 0x17a
  }

  /* Open EP IN */
  (void)USBD_LL_OpenEP(pdev, CUSTOM_HID_EPIN_ADDR, USBD_EP_TYPE_INTR,
 8010220:	2302      	movs	r3, #2
 8010222:	2203      	movs	r2, #3
 8010224:	2181      	movs	r1, #129	; 0x81
 8010226:	6878      	ldr	r0, [r7, #4]
 8010228:	f001 ff1d 	bl	8012066 <USBD_LL_OpenEP>
                       CUSTOM_HID_EPIN_SIZE);

  pdev->ep_in[CUSTOM_HID_EPIN_ADDR & 0xFU].is_used = 1U;
 801022c:	687b      	ldr	r3, [r7, #4]
 801022e:	2201      	movs	r2, #1
 8010230:	871a      	strh	r2, [r3, #56]	; 0x38

  /* Open EP OUT */
  (void)USBD_LL_OpenEP(pdev, CUSTOM_HID_EPOUT_ADDR, USBD_EP_TYPE_INTR,
 8010232:	2302      	movs	r3, #2
 8010234:	2203      	movs	r2, #3
 8010236:	2101      	movs	r1, #1
 8010238:	6878      	ldr	r0, [r7, #4]
 801023a:	f001 ff14 	bl	8012066 <USBD_LL_OpenEP>
                       CUSTOM_HID_EPOUT_SIZE);

  pdev->ep_out[CUSTOM_HID_EPOUT_ADDR & 0xFU].is_used = 1U;
 801023e:	687b      	ldr	r3, [r7, #4]
 8010240:	2201      	movs	r2, #1
 8010242:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

  hhid->state = CUSTOM_HID_IDLE;
 8010246:	68fb      	ldr	r3, [r7, #12]
 8010248:	2200      	movs	r2, #0
 801024a:	751a      	strb	r2, [r3, #20]

  ((USBD_CUSTOM_HID_ItfTypeDef *)pdev->pUserData)->Init();
 801024c:	687b      	ldr	r3, [r7, #4]
 801024e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8010252:	685b      	ldr	r3, [r3, #4]
 8010254:	4798      	blx	r3

  /* Prepare Out endpoint to receive 1st packet */
  (void)USBD_LL_PrepareReceive(pdev, CUSTOM_HID_EPOUT_ADDR, hhid->Report_buf,
 8010256:	68fa      	ldr	r2, [r7, #12]
 8010258:	2302      	movs	r3, #2
 801025a:	2101      	movs	r1, #1
 801025c:	6878      	ldr	r0, [r7, #4]
 801025e:	f001 fff1 	bl	8012244 <USBD_LL_PrepareReceive>
                               USBD_CUSTOMHID_OUTREPORT_BUF_SIZE);

  return (uint8_t)USBD_OK;
 8010262:	2300      	movs	r3, #0
}
 8010264:	4618      	mov	r0, r3
 8010266:	3710      	adds	r7, #16
 8010268:	46bd      	mov	sp, r7
 801026a:	bd80      	pop	{r7, pc}

0801026c <USBD_CUSTOM_HID_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CUSTOM_HID_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 801026c:	b580      	push	{r7, lr}
 801026e:	b082      	sub	sp, #8
 8010270:	af00      	add	r7, sp, #0
 8010272:	6078      	str	r0, [r7, #4]
 8010274:	460b      	mov	r3, r1
 8010276:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);

  /* Close CUSTOM_HID EP IN */
  (void)USBD_LL_CloseEP(pdev, CUSTOM_HID_EPIN_ADDR);
 8010278:	2181      	movs	r1, #129	; 0x81
 801027a:	6878      	ldr	r0, [r7, #4]
 801027c:	f001 ff19 	bl	80120b2 <USBD_LL_CloseEP>
  pdev->ep_in[CUSTOM_HID_EPIN_ADDR & 0xFU].is_used = 0U;
 8010280:	687b      	ldr	r3, [r7, #4]
 8010282:	2200      	movs	r2, #0
 8010284:	871a      	strh	r2, [r3, #56]	; 0x38
  pdev->ep_in[CUSTOM_HID_EPIN_ADDR & 0xFU].bInterval = 0U;
 8010286:	687b      	ldr	r3, [r7, #4]
 8010288:	2200      	movs	r2, #0
 801028a:	875a      	strh	r2, [r3, #58]	; 0x3a

  /* Close CUSTOM_HID EP OUT */
  (void)USBD_LL_CloseEP(pdev, CUSTOM_HID_EPOUT_ADDR);
 801028c:	2101      	movs	r1, #1
 801028e:	6878      	ldr	r0, [r7, #4]
 8010290:	f001 ff0f 	bl	80120b2 <USBD_LL_CloseEP>
  pdev->ep_out[CUSTOM_HID_EPOUT_ADDR & 0xFU].is_used = 0U;
 8010294:	687b      	ldr	r3, [r7, #4]
 8010296:	2200      	movs	r2, #0
 8010298:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178
  pdev->ep_out[CUSTOM_HID_EPOUT_ADDR & 0xFU].bInterval = 0U;
 801029c:	687b      	ldr	r3, [r7, #4]
 801029e:	2200      	movs	r2, #0
 80102a0:	f8a3 217a 	strh.w	r2, [r3, #378]	; 0x17a

  /* Free allocated memory */
  if (pdev->pClassData != NULL)
 80102a4:	687b      	ldr	r3, [r7, #4]
 80102a6:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80102aa:	2b00      	cmp	r3, #0
 80102ac:	d00e      	beq.n	80102cc <USBD_CUSTOM_HID_DeInit+0x60>
  {
    ((USBD_CUSTOM_HID_ItfTypeDef *)pdev->pUserData)->DeInit();
 80102ae:	687b      	ldr	r3, [r7, #4]
 80102b0:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80102b4:	689b      	ldr	r3, [r3, #8]
 80102b6:	4798      	blx	r3
    USBD_free(pdev->pClassData);
 80102b8:	687b      	ldr	r3, [r7, #4]
 80102ba:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80102be:	4618      	mov	r0, r3
 80102c0:	f001 fff0 	bl	80122a4 <USBD_static_free>
    pdev->pClassData = NULL;
 80102c4:	687b      	ldr	r3, [r7, #4]
 80102c6:	2200      	movs	r2, #0
 80102c8:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 80102cc:	2300      	movs	r3, #0
}
 80102ce:	4618      	mov	r0, r3
 80102d0:	3708      	adds	r7, #8
 80102d2:	46bd      	mov	sp, r7
 80102d4:	bd80      	pop	{r7, pc}
	...

080102d8 <USBD_CUSTOM_HID_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CUSTOM_HID_Setup(USBD_HandleTypeDef *pdev,
                                     USBD_SetupReqTypedef *req)
{
 80102d8:	b580      	push	{r7, lr}
 80102da:	b088      	sub	sp, #32
 80102dc:	af00      	add	r7, sp, #0
 80102de:	6078      	str	r0, [r7, #4]
 80102e0:	6039      	str	r1, [r7, #0]
  USBD_CUSTOM_HID_HandleTypeDef *hhid = (USBD_CUSTOM_HID_HandleTypeDef *)pdev->pClassData;
 80102e2:	687b      	ldr	r3, [r7, #4]
 80102e4:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80102e8:	613b      	str	r3, [r7, #16]
  uint16_t len = 0U;
 80102ea:	2300      	movs	r3, #0
 80102ec:	83fb      	strh	r3, [r7, #30]
  uint8_t  *pbuf = NULL;
 80102ee:	2300      	movs	r3, #0
 80102f0:	61bb      	str	r3, [r7, #24]
  uint16_t status_info = 0U;
 80102f2:	2300      	movs	r3, #0
 80102f4:	81fb      	strh	r3, [r7, #14]
  USBD_StatusTypeDef ret = USBD_OK;
 80102f6:	2300      	movs	r3, #0
 80102f8:	75fb      	strb	r3, [r7, #23]

  if (hhid == NULL)
 80102fa:	693b      	ldr	r3, [r7, #16]
 80102fc:	2b00      	cmp	r3, #0
 80102fe:	d101      	bne.n	8010304 <USBD_CUSTOM_HID_Setup+0x2c>
  {
    return (uint8_t)USBD_FAIL;
 8010300:	2303      	movs	r3, #3
 8010302:	e0ed      	b.n	80104e0 <USBD_CUSTOM_HID_Setup+0x208>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8010304:	683b      	ldr	r3, [r7, #0]
 8010306:	781b      	ldrb	r3, [r3, #0]
 8010308:	f003 0360 	and.w	r3, r3, #96	; 0x60
 801030c:	2b00      	cmp	r3, #0
 801030e:	d052      	beq.n	80103b6 <USBD_CUSTOM_HID_Setup+0xde>
 8010310:	2b20      	cmp	r3, #32
 8010312:	f040 80dd 	bne.w	80104d0 <USBD_CUSTOM_HID_Setup+0x1f8>
  {
    case USB_REQ_TYPE_CLASS:
      switch (req->bRequest)
 8010316:	683b      	ldr	r3, [r7, #0]
 8010318:	785b      	ldrb	r3, [r3, #1]
 801031a:	3b02      	subs	r3, #2
 801031c:	2b09      	cmp	r3, #9
 801031e:	d842      	bhi.n	80103a6 <USBD_CUSTOM_HID_Setup+0xce>
 8010320:	a201      	add	r2, pc, #4	; (adr r2, 8010328 <USBD_CUSTOM_HID_Setup+0x50>)
 8010322:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010326:	bf00      	nop
 8010328:	08010381 	.word	0x08010381
 801032c:	0801035f 	.word	0x0801035f
 8010330:	080103a7 	.word	0x080103a7
 8010334:	080103a7 	.word	0x080103a7
 8010338:	080103a7 	.word	0x080103a7
 801033c:	080103a7 	.word	0x080103a7
 8010340:	080103a7 	.word	0x080103a7
 8010344:	08010391 	.word	0x08010391
 8010348:	0801036f 	.word	0x0801036f
 801034c:	08010351 	.word	0x08010351
      {
        case CUSTOM_HID_REQ_SET_PROTOCOL:
          hhid->Protocol = (uint8_t)(req->wValue);
 8010350:	683b      	ldr	r3, [r7, #0]
 8010352:	885b      	ldrh	r3, [r3, #2]
 8010354:	b2db      	uxtb	r3, r3
 8010356:	461a      	mov	r2, r3
 8010358:	693b      	ldr	r3, [r7, #16]
 801035a:	605a      	str	r2, [r3, #4]
          break;
 801035c:	e02a      	b.n	80103b4 <USBD_CUSTOM_HID_Setup+0xdc>

        case CUSTOM_HID_REQ_GET_PROTOCOL:
          (void)USBD_CtlSendData(pdev, (uint8_t *)&hhid->Protocol, 1U);
 801035e:	693b      	ldr	r3, [r7, #16]
 8010360:	3304      	adds	r3, #4
 8010362:	2201      	movs	r2, #1
 8010364:	4619      	mov	r1, r3
 8010366:	6878      	ldr	r0, [r7, #4]
 8010368:	f001 fa6d 	bl	8011846 <USBD_CtlSendData>
          break;
 801036c:	e022      	b.n	80103b4 <USBD_CUSTOM_HID_Setup+0xdc>

        case CUSTOM_HID_REQ_SET_IDLE:
          hhid->IdleState = (uint8_t)(req->wValue >> 8);
 801036e:	683b      	ldr	r3, [r7, #0]
 8010370:	885b      	ldrh	r3, [r3, #2]
 8010372:	0a1b      	lsrs	r3, r3, #8
 8010374:	b29b      	uxth	r3, r3
 8010376:	b2db      	uxtb	r3, r3
 8010378:	461a      	mov	r2, r3
 801037a:	693b      	ldr	r3, [r7, #16]
 801037c:	609a      	str	r2, [r3, #8]
          break;
 801037e:	e019      	b.n	80103b4 <USBD_CUSTOM_HID_Setup+0xdc>

        case CUSTOM_HID_REQ_GET_IDLE:
          (void)USBD_CtlSendData(pdev, (uint8_t *)&hhid->IdleState, 1U);
 8010380:	693b      	ldr	r3, [r7, #16]
 8010382:	3308      	adds	r3, #8
 8010384:	2201      	movs	r2, #1
 8010386:	4619      	mov	r1, r3
 8010388:	6878      	ldr	r0, [r7, #4]
 801038a:	f001 fa5c 	bl	8011846 <USBD_CtlSendData>
          break;
 801038e:	e011      	b.n	80103b4 <USBD_CUSTOM_HID_Setup+0xdc>

        case CUSTOM_HID_REQ_SET_REPORT:
          hhid->IsReportAvailable = 1U;
 8010390:	693b      	ldr	r3, [r7, #16]
 8010392:	2201      	movs	r2, #1
 8010394:	611a      	str	r2, [r3, #16]
          (void)USBD_CtlPrepareRx(pdev, hhid->Report_buf, req->wLength);
 8010396:	6939      	ldr	r1, [r7, #16]
 8010398:	683b      	ldr	r3, [r7, #0]
 801039a:	88db      	ldrh	r3, [r3, #6]
 801039c:	461a      	mov	r2, r3
 801039e:	6878      	ldr	r0, [r7, #4]
 80103a0:	f001 fa7d 	bl	801189e <USBD_CtlPrepareRx>
          break;
 80103a4:	e006      	b.n	80103b4 <USBD_CUSTOM_HID_Setup+0xdc>

        default:
          USBD_CtlError(pdev, req);
 80103a6:	6839      	ldr	r1, [r7, #0]
 80103a8:	6878      	ldr	r0, [r7, #4]
 80103aa:	f001 f9db 	bl	8011764 <USBD_CtlError>
          ret = USBD_FAIL;
 80103ae:	2303      	movs	r3, #3
 80103b0:	75fb      	strb	r3, [r7, #23]
          break;
 80103b2:	bf00      	nop
      }
      break;
 80103b4:	e093      	b.n	80104de <USBD_CUSTOM_HID_Setup+0x206>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80103b6:	683b      	ldr	r3, [r7, #0]
 80103b8:	785b      	ldrb	r3, [r3, #1]
 80103ba:	2b0b      	cmp	r3, #11
 80103bc:	d87f      	bhi.n	80104be <USBD_CUSTOM_HID_Setup+0x1e6>
 80103be:	a201      	add	r2, pc, #4	; (adr r2, 80103c4 <USBD_CUSTOM_HID_Setup+0xec>)
 80103c0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80103c4:	080103f5 	.word	0x080103f5
 80103c8:	080104cd 	.word	0x080104cd
 80103cc:	080104bf 	.word	0x080104bf
 80103d0:	080104bf 	.word	0x080104bf
 80103d4:	080104bf 	.word	0x080104bf
 80103d8:	080104bf 	.word	0x080104bf
 80103dc:	0801041f 	.word	0x0801041f
 80103e0:	080104bf 	.word	0x080104bf
 80103e4:	080104bf 	.word	0x080104bf
 80103e8:	080104bf 	.word	0x080104bf
 80103ec:	0801046d 	.word	0x0801046d
 80103f0:	08010497 	.word	0x08010497
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80103f4:	687b      	ldr	r3, [r7, #4]
 80103f6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80103fa:	b2db      	uxtb	r3, r3
 80103fc:	2b03      	cmp	r3, #3
 80103fe:	d107      	bne.n	8010410 <USBD_CUSTOM_HID_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8010400:	f107 030e 	add.w	r3, r7, #14
 8010404:	2202      	movs	r2, #2
 8010406:	4619      	mov	r1, r3
 8010408:	6878      	ldr	r0, [r7, #4]
 801040a:	f001 fa1c 	bl	8011846 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 801040e:	e05e      	b.n	80104ce <USBD_CUSTOM_HID_Setup+0x1f6>
            USBD_CtlError(pdev, req);
 8010410:	6839      	ldr	r1, [r7, #0]
 8010412:	6878      	ldr	r0, [r7, #4]
 8010414:	f001 f9a6 	bl	8011764 <USBD_CtlError>
            ret = USBD_FAIL;
 8010418:	2303      	movs	r3, #3
 801041a:	75fb      	strb	r3, [r7, #23]
          break;
 801041c:	e057      	b.n	80104ce <USBD_CUSTOM_HID_Setup+0x1f6>

        case USB_REQ_GET_DESCRIPTOR:
          if ((req->wValue >> 8) == CUSTOM_HID_REPORT_DESC)
 801041e:	683b      	ldr	r3, [r7, #0]
 8010420:	885b      	ldrh	r3, [r3, #2]
 8010422:	0a1b      	lsrs	r3, r3, #8
 8010424:	b29b      	uxth	r3, r3
 8010426:	2b22      	cmp	r3, #34	; 0x22
 8010428:	d10b      	bne.n	8010442 <USBD_CUSTOM_HID_Setup+0x16a>
          {
            len = MIN(USBD_CUSTOM_HID_REPORT_DESC_SIZE, req->wLength);
 801042a:	683b      	ldr	r3, [r7, #0]
 801042c:	88db      	ldrh	r3, [r3, #6]
 801042e:	2b02      	cmp	r3, #2
 8010430:	bf28      	it	cs
 8010432:	2302      	movcs	r3, #2
 8010434:	83fb      	strh	r3, [r7, #30]
            pbuf = ((USBD_CUSTOM_HID_ItfTypeDef *)pdev->pUserData)->pReport;
 8010436:	687b      	ldr	r3, [r7, #4]
 8010438:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 801043c:	681b      	ldr	r3, [r3, #0]
 801043e:	61bb      	str	r3, [r7, #24]
 8010440:	e00d      	b.n	801045e <USBD_CUSTOM_HID_Setup+0x186>
          }
          else
          {
            if ((req->wValue >> 8) == CUSTOM_HID_DESCRIPTOR_TYPE)
 8010442:	683b      	ldr	r3, [r7, #0]
 8010444:	885b      	ldrh	r3, [r3, #2]
 8010446:	0a1b      	lsrs	r3, r3, #8
 8010448:	b29b      	uxth	r3, r3
 801044a:	2b21      	cmp	r3, #33	; 0x21
 801044c:	d107      	bne.n	801045e <USBD_CUSTOM_HID_Setup+0x186>
            {
              pbuf = USBD_CUSTOM_HID_Desc;
 801044e:	4b26      	ldr	r3, [pc, #152]	; (80104e8 <USBD_CUSTOM_HID_Setup+0x210>)
 8010450:	61bb      	str	r3, [r7, #24]
              len = MIN(USB_CUSTOM_HID_DESC_SIZ, req->wLength);
 8010452:	683b      	ldr	r3, [r7, #0]
 8010454:	88db      	ldrh	r3, [r3, #6]
 8010456:	2b09      	cmp	r3, #9
 8010458:	bf28      	it	cs
 801045a:	2309      	movcs	r3, #9
 801045c:	83fb      	strh	r3, [r7, #30]
            }
          }

          (void)USBD_CtlSendData(pdev, pbuf, len);
 801045e:	8bfb      	ldrh	r3, [r7, #30]
 8010460:	461a      	mov	r2, r3
 8010462:	69b9      	ldr	r1, [r7, #24]
 8010464:	6878      	ldr	r0, [r7, #4]
 8010466:	f001 f9ee 	bl	8011846 <USBD_CtlSendData>
          break;
 801046a:	e030      	b.n	80104ce <USBD_CUSTOM_HID_Setup+0x1f6>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 801046c:	687b      	ldr	r3, [r7, #4]
 801046e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8010472:	b2db      	uxtb	r3, r3
 8010474:	2b03      	cmp	r3, #3
 8010476:	d107      	bne.n	8010488 <USBD_CUSTOM_HID_Setup+0x1b0>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&hhid->AltSetting, 1U);
 8010478:	693b      	ldr	r3, [r7, #16]
 801047a:	330c      	adds	r3, #12
 801047c:	2201      	movs	r2, #1
 801047e:	4619      	mov	r1, r3
 8010480:	6878      	ldr	r0, [r7, #4]
 8010482:	f001 f9e0 	bl	8011846 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8010486:	e022      	b.n	80104ce <USBD_CUSTOM_HID_Setup+0x1f6>
            USBD_CtlError(pdev, req);
 8010488:	6839      	ldr	r1, [r7, #0]
 801048a:	6878      	ldr	r0, [r7, #4]
 801048c:	f001 f96a 	bl	8011764 <USBD_CtlError>
            ret = USBD_FAIL;
 8010490:	2303      	movs	r3, #3
 8010492:	75fb      	strb	r3, [r7, #23]
          break;
 8010494:	e01b      	b.n	80104ce <USBD_CUSTOM_HID_Setup+0x1f6>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8010496:	687b      	ldr	r3, [r7, #4]
 8010498:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 801049c:	b2db      	uxtb	r3, r3
 801049e:	2b03      	cmp	r3, #3
 80104a0:	d106      	bne.n	80104b0 <USBD_CUSTOM_HID_Setup+0x1d8>
          {
            hhid->AltSetting = (uint8_t)(req->wValue);
 80104a2:	683b      	ldr	r3, [r7, #0]
 80104a4:	885b      	ldrh	r3, [r3, #2]
 80104a6:	b2db      	uxtb	r3, r3
 80104a8:	461a      	mov	r2, r3
 80104aa:	693b      	ldr	r3, [r7, #16]
 80104ac:	60da      	str	r2, [r3, #12]
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 80104ae:	e00e      	b.n	80104ce <USBD_CUSTOM_HID_Setup+0x1f6>
            USBD_CtlError(pdev, req);
 80104b0:	6839      	ldr	r1, [r7, #0]
 80104b2:	6878      	ldr	r0, [r7, #4]
 80104b4:	f001 f956 	bl	8011764 <USBD_CtlError>
            ret = USBD_FAIL;
 80104b8:	2303      	movs	r3, #3
 80104ba:	75fb      	strb	r3, [r7, #23]
          break;
 80104bc:	e007      	b.n	80104ce <USBD_CUSTOM_HID_Setup+0x1f6>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 80104be:	6839      	ldr	r1, [r7, #0]
 80104c0:	6878      	ldr	r0, [r7, #4]
 80104c2:	f001 f94f 	bl	8011764 <USBD_CtlError>
          ret = USBD_FAIL;
 80104c6:	2303      	movs	r3, #3
 80104c8:	75fb      	strb	r3, [r7, #23]
          break;
 80104ca:	e000      	b.n	80104ce <USBD_CUSTOM_HID_Setup+0x1f6>
          break;
 80104cc:	bf00      	nop
      }
      break;
 80104ce:	e006      	b.n	80104de <USBD_CUSTOM_HID_Setup+0x206>

    default:
      USBD_CtlError(pdev, req);
 80104d0:	6839      	ldr	r1, [r7, #0]
 80104d2:	6878      	ldr	r0, [r7, #4]
 80104d4:	f001 f946 	bl	8011764 <USBD_CtlError>
      ret = USBD_FAIL;
 80104d8:	2303      	movs	r3, #3
 80104da:	75fb      	strb	r3, [r7, #23]
      break;
 80104dc:	bf00      	nop
  }
  return (uint8_t)ret;
 80104de:	7dfb      	ldrb	r3, [r7, #23]
}
 80104e0:	4618      	mov	r0, r3
 80104e2:	3720      	adds	r7, #32
 80104e4:	46bd      	mov	sp, r7
 80104e6:	bd80      	pop	{r7, pc}
 80104e8:	240000cc 	.word	0x240000cc

080104ec <USBD_CUSTOM_HID_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CUSTOM_HID_GetFSCfgDesc(uint16_t *length)
{
 80104ec:	b480      	push	{r7}
 80104ee:	b083      	sub	sp, #12
 80104f0:	af00      	add	r7, sp, #0
 80104f2:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CUSTOM_HID_CfgFSDesc);
 80104f4:	687b      	ldr	r3, [r7, #4]
 80104f6:	2229      	movs	r2, #41	; 0x29
 80104f8:	801a      	strh	r2, [r3, #0]

  return USBD_CUSTOM_HID_CfgFSDesc;
 80104fa:	4b03      	ldr	r3, [pc, #12]	; (8010508 <USBD_CUSTOM_HID_GetFSCfgDesc+0x1c>)
}
 80104fc:	4618      	mov	r0, r3
 80104fe:	370c      	adds	r7, #12
 8010500:	46bd      	mov	sp, r7
 8010502:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010506:	4770      	bx	lr
 8010508:	24000048 	.word	0x24000048

0801050c <USBD_CUSTOM_HID_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CUSTOM_HID_GetHSCfgDesc(uint16_t *length)
{
 801050c:	b480      	push	{r7}
 801050e:	b083      	sub	sp, #12
 8010510:	af00      	add	r7, sp, #0
 8010512:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CUSTOM_HID_CfgHSDesc);
 8010514:	687b      	ldr	r3, [r7, #4]
 8010516:	2229      	movs	r2, #41	; 0x29
 8010518:	801a      	strh	r2, [r3, #0]

  return USBD_CUSTOM_HID_CfgHSDesc;
 801051a:	4b03      	ldr	r3, [pc, #12]	; (8010528 <USBD_CUSTOM_HID_GetHSCfgDesc+0x1c>)
}
 801051c:	4618      	mov	r0, r3
 801051e:	370c      	adds	r7, #12
 8010520:	46bd      	mov	sp, r7
 8010522:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010526:	4770      	bx	lr
 8010528:	24000074 	.word	0x24000074

0801052c <USBD_CUSTOM_HID_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CUSTOM_HID_GetOtherSpeedCfgDesc(uint16_t *length)
{
 801052c:	b480      	push	{r7}
 801052e:	b083      	sub	sp, #12
 8010530:	af00      	add	r7, sp, #0
 8010532:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CUSTOM_HID_OtherSpeedCfgDesc);
 8010534:	687b      	ldr	r3, [r7, #4]
 8010536:	2229      	movs	r2, #41	; 0x29
 8010538:	801a      	strh	r2, [r3, #0]

  return USBD_CUSTOM_HID_OtherSpeedCfgDesc;
 801053a:	4b03      	ldr	r3, [pc, #12]	; (8010548 <USBD_CUSTOM_HID_GetOtherSpeedCfgDesc+0x1c>)
}
 801053c:	4618      	mov	r0, r3
 801053e:	370c      	adds	r7, #12
 8010540:	46bd      	mov	sp, r7
 8010542:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010546:	4770      	bx	lr
 8010548:	240000a0 	.word	0x240000a0

0801054c <USBD_CUSTOM_HID_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint index
  * @retval status
  */
static uint8_t USBD_CUSTOM_HID_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 801054c:	b480      	push	{r7}
 801054e:	b083      	sub	sp, #12
 8010550:	af00      	add	r7, sp, #0
 8010552:	6078      	str	r0, [r7, #4]
 8010554:	460b      	mov	r3, r1
 8010556:	70fb      	strb	r3, [r7, #3]
  UNUSED(epnum);

  /* Ensure that the FIFO is empty before a new transfer, this condition could
  be caused by  a new transfer before the end of the previous transfer */
  ((USBD_CUSTOM_HID_HandleTypeDef *)pdev->pClassData)->state = CUSTOM_HID_IDLE;
 8010558:	687b      	ldr	r3, [r7, #4]
 801055a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 801055e:	2200      	movs	r2, #0
 8010560:	751a      	strb	r2, [r3, #20]

  return (uint8_t)USBD_OK;
 8010562:	2300      	movs	r3, #0
}
 8010564:	4618      	mov	r0, r3
 8010566:	370c      	adds	r7, #12
 8010568:	46bd      	mov	sp, r7
 801056a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801056e:	4770      	bx	lr

08010570 <USBD_CUSTOM_HID_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint index
  * @retval status
  */
static uint8_t USBD_CUSTOM_HID_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8010570:	b580      	push	{r7, lr}
 8010572:	b084      	sub	sp, #16
 8010574:	af00      	add	r7, sp, #0
 8010576:	6078      	str	r0, [r7, #4]
 8010578:	460b      	mov	r3, r1
 801057a:	70fb      	strb	r3, [r7, #3]
  UNUSED(epnum);
  USBD_CUSTOM_HID_HandleTypeDef *hhid;

  if (pdev->pClassData == NULL)
 801057c:	687b      	ldr	r3, [r7, #4]
 801057e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8010582:	2b00      	cmp	r3, #0
 8010584:	d101      	bne.n	801058a <USBD_CUSTOM_HID_DataOut+0x1a>
  {
    return (uint8_t)USBD_FAIL;
 8010586:	2303      	movs	r3, #3
 8010588:	e00e      	b.n	80105a8 <USBD_CUSTOM_HID_DataOut+0x38>
  }

  hhid = (USBD_CUSTOM_HID_HandleTypeDef *)pdev->pClassData;
 801058a:	687b      	ldr	r3, [r7, #4]
 801058c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8010590:	60fb      	str	r3, [r7, #12]

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application processing */
  ((USBD_CUSTOM_HID_ItfTypeDef *)pdev->pUserData)->OutEvent(hhid->Report_buf[0],
 8010592:	687b      	ldr	r3, [r7, #4]
 8010594:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8010598:	68db      	ldr	r3, [r3, #12]
 801059a:	68fa      	ldr	r2, [r7, #12]
 801059c:	7810      	ldrb	r0, [r2, #0]
 801059e:	68fa      	ldr	r2, [r7, #12]
 80105a0:	7852      	ldrb	r2, [r2, #1]
 80105a2:	4611      	mov	r1, r2
 80105a4:	4798      	blx	r3
                                                            hhid->Report_buf[1]);

  return (uint8_t)USBD_OK;
 80105a6:	2300      	movs	r3, #0
}
 80105a8:	4618      	mov	r0, r3
 80105aa:	3710      	adds	r7, #16
 80105ac:	46bd      	mov	sp, r7
 80105ae:	bd80      	pop	{r7, pc}

080105b0 <USBD_CUSTOM_HID_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CUSTOM_HID_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 80105b0:	b580      	push	{r7, lr}
 80105b2:	b084      	sub	sp, #16
 80105b4:	af00      	add	r7, sp, #0
 80105b6:	6078      	str	r0, [r7, #4]
  USBD_CUSTOM_HID_HandleTypeDef *hhid;

  if (pdev->pClassData == NULL)
 80105b8:	687b      	ldr	r3, [r7, #4]
 80105ba:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80105be:	2b00      	cmp	r3, #0
 80105c0:	d101      	bne.n	80105c6 <USBD_CUSTOM_HID_ReceivePacket+0x16>
  {
    return (uint8_t)USBD_FAIL;
 80105c2:	2303      	movs	r3, #3
 80105c4:	e00a      	b.n	80105dc <USBD_CUSTOM_HID_ReceivePacket+0x2c>
  }

  hhid = (USBD_CUSTOM_HID_HandleTypeDef *)pdev->pClassData;
 80105c6:	687b      	ldr	r3, [r7, #4]
 80105c8:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80105cc:	60fb      	str	r3, [r7, #12]

  /* Resume USB Out process */
  (void)USBD_LL_PrepareReceive(pdev, CUSTOM_HID_EPOUT_ADDR, hhid->Report_buf,
 80105ce:	68fa      	ldr	r2, [r7, #12]
 80105d0:	2302      	movs	r3, #2
 80105d2:	2101      	movs	r1, #1
 80105d4:	6878      	ldr	r0, [r7, #4]
 80105d6:	f001 fe35 	bl	8012244 <USBD_LL_PrepareReceive>
                               USBD_CUSTOMHID_OUTREPORT_BUF_SIZE);

  return (uint8_t)USBD_OK;
 80105da:	2300      	movs	r3, #0
}
 80105dc:	4618      	mov	r0, r3
 80105de:	3710      	adds	r7, #16
 80105e0:	46bd      	mov	sp, r7
 80105e2:	bd80      	pop	{r7, pc}

080105e4 <USBD_CUSTOM_HID_EP0_RxReady>:
  *         Handles control request data.
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CUSTOM_HID_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 80105e4:	b580      	push	{r7, lr}
 80105e6:	b084      	sub	sp, #16
 80105e8:	af00      	add	r7, sp, #0
 80105ea:	6078      	str	r0, [r7, #4]
  USBD_CUSTOM_HID_HandleTypeDef *hhid = (USBD_CUSTOM_HID_HandleTypeDef *)pdev->pClassData;
 80105ec:	687b      	ldr	r3, [r7, #4]
 80105ee:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80105f2:	60fb      	str	r3, [r7, #12]

  if (hhid == NULL)
 80105f4:	68fb      	ldr	r3, [r7, #12]
 80105f6:	2b00      	cmp	r3, #0
 80105f8:	d101      	bne.n	80105fe <USBD_CUSTOM_HID_EP0_RxReady+0x1a>
  {
    return (uint8_t)USBD_FAIL;
 80105fa:	2303      	movs	r3, #3
 80105fc:	e011      	b.n	8010622 <USBD_CUSTOM_HID_EP0_RxReady+0x3e>
  }

  if (hhid->IsReportAvailable == 1U)
 80105fe:	68fb      	ldr	r3, [r7, #12]
 8010600:	691b      	ldr	r3, [r3, #16]
 8010602:	2b01      	cmp	r3, #1
 8010604:	d10c      	bne.n	8010620 <USBD_CUSTOM_HID_EP0_RxReady+0x3c>
  {
    ((USBD_CUSTOM_HID_ItfTypeDef *)pdev->pUserData)->OutEvent(hhid->Report_buf[0],
 8010606:	687b      	ldr	r3, [r7, #4]
 8010608:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 801060c:	68db      	ldr	r3, [r3, #12]
 801060e:	68fa      	ldr	r2, [r7, #12]
 8010610:	7810      	ldrb	r0, [r2, #0]
 8010612:	68fa      	ldr	r2, [r7, #12]
 8010614:	7852      	ldrb	r2, [r2, #1]
 8010616:	4611      	mov	r1, r2
 8010618:	4798      	blx	r3
                                                              hhid->Report_buf[1]);
    hhid->IsReportAvailable = 0U;
 801061a:	68fb      	ldr	r3, [r7, #12]
 801061c:	2200      	movs	r2, #0
 801061e:	611a      	str	r2, [r3, #16]
  }

  return (uint8_t)USBD_OK;
 8010620:	2300      	movs	r3, #0
}
 8010622:	4618      	mov	r0, r3
 8010624:	3710      	adds	r7, #16
 8010626:	46bd      	mov	sp, r7
 8010628:	bd80      	pop	{r7, pc}
	...

0801062c <USBD_CUSTOM_HID_GetDeviceQualifierDesc>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CUSTOM_HID_GetDeviceQualifierDesc(uint16_t *length)
{
 801062c:	b480      	push	{r7}
 801062e:	b083      	sub	sp, #12
 8010630:	af00      	add	r7, sp, #0
 8010632:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CUSTOM_HID_DeviceQualifierDesc);
 8010634:	687b      	ldr	r3, [r7, #4]
 8010636:	220a      	movs	r2, #10
 8010638:	801a      	strh	r2, [r3, #0]

  return USBD_CUSTOM_HID_DeviceQualifierDesc;
 801063a:	4b03      	ldr	r3, [pc, #12]	; (8010648 <USBD_CUSTOM_HID_GetDeviceQualifierDesc+0x1c>)
}
 801063c:	4618      	mov	r0, r3
 801063e:	370c      	adds	r7, #12
 8010640:	46bd      	mov	sp, r7
 8010642:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010646:	4770      	bx	lr
 8010648:	240000d8 	.word	0x240000d8

0801064c <USBD_CUSTOM_HID_RegisterInterface>:
  * @param  fops: CUSTOMHID Interface callback
  * @retval status
  */
uint8_t USBD_CUSTOM_HID_RegisterInterface(USBD_HandleTypeDef *pdev,
                                          USBD_CUSTOM_HID_ItfTypeDef *fops)
{
 801064c:	b480      	push	{r7}
 801064e:	b083      	sub	sp, #12
 8010650:	af00      	add	r7, sp, #0
 8010652:	6078      	str	r0, [r7, #4]
 8010654:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 8010656:	683b      	ldr	r3, [r7, #0]
 8010658:	2b00      	cmp	r3, #0
 801065a:	d101      	bne.n	8010660 <USBD_CUSTOM_HID_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 801065c:	2303      	movs	r3, #3
 801065e:	e004      	b.n	801066a <USBD_CUSTOM_HID_RegisterInterface+0x1e>
  }

  pdev->pUserData = fops;
 8010660:	687b      	ldr	r3, [r7, #4]
 8010662:	683a      	ldr	r2, [r7, #0]
 8010664:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  return (uint8_t)USBD_OK;
 8010668:	2300      	movs	r3, #0
}
 801066a:	4618      	mov	r0, r3
 801066c:	370c      	adds	r7, #12
 801066e:	46bd      	mov	sp, r7
 8010670:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010674:	4770      	bx	lr

08010676 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8010676:	b580      	push	{r7, lr}
 8010678:	b086      	sub	sp, #24
 801067a:	af00      	add	r7, sp, #0
 801067c:	60f8      	str	r0, [r7, #12]
 801067e:	60b9      	str	r1, [r7, #8]
 8010680:	4613      	mov	r3, r2
 8010682:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8010684:	68fb      	ldr	r3, [r7, #12]
 8010686:	2b00      	cmp	r3, #0
 8010688:	d101      	bne.n	801068e <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 801068a:	2303      	movs	r3, #3
 801068c:	e01f      	b.n	80106ce <USBD_Init+0x58>
  }

  /* Unlink previous class resources */
  pdev->pClass = NULL;
 801068e:	68fb      	ldr	r3, [r7, #12]
 8010690:	2200      	movs	r2, #0
 8010692:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData = NULL;
 8010696:	68fb      	ldr	r3, [r7, #12]
 8010698:	2200      	movs	r2, #0
 801069a:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0
  pdev->pConfDesc = NULL;
 801069e:	68fb      	ldr	r3, [r7, #12]
 80106a0:	2200      	movs	r2, #0
 80106a2:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 80106a6:	68bb      	ldr	r3, [r7, #8]
 80106a8:	2b00      	cmp	r3, #0
 80106aa:	d003      	beq.n	80106b4 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 80106ac:	68fb      	ldr	r3, [r7, #12]
 80106ae:	68ba      	ldr	r2, [r7, #8]
 80106b0:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80106b4:	68fb      	ldr	r3, [r7, #12]
 80106b6:	2201      	movs	r2, #1
 80106b8:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 80106bc:	68fb      	ldr	r3, [r7, #12]
 80106be:	79fa      	ldrb	r2, [r7, #7]
 80106c0:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 80106c2:	68f8      	ldr	r0, [r7, #12]
 80106c4:	f001 fc64 	bl	8011f90 <USBD_LL_Init>
 80106c8:	4603      	mov	r3, r0
 80106ca:	75fb      	strb	r3, [r7, #23]

  return ret;
 80106cc:	7dfb      	ldrb	r3, [r7, #23]
}
 80106ce:	4618      	mov	r0, r3
 80106d0:	3718      	adds	r7, #24
 80106d2:	46bd      	mov	sp, r7
 80106d4:	bd80      	pop	{r7, pc}

080106d6 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 80106d6:	b580      	push	{r7, lr}
 80106d8:	b084      	sub	sp, #16
 80106da:	af00      	add	r7, sp, #0
 80106dc:	6078      	str	r0, [r7, #4]
 80106de:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 80106e0:	2300      	movs	r3, #0
 80106e2:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 80106e4:	683b      	ldr	r3, [r7, #0]
 80106e6:	2b00      	cmp	r3, #0
 80106e8:	d101      	bne.n	80106ee <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    return USBD_FAIL;
 80106ea:	2303      	movs	r3, #3
 80106ec:	e016      	b.n	801071c <USBD_RegisterClass+0x46>
  }

  /* link the class to the USB Device handle */
  pdev->pClass = pclass;
 80106ee:	687b      	ldr	r3, [r7, #4]
 80106f0:	683a      	ldr	r2, [r7, #0]
 80106f2:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass->GetFSConfigDescriptor != NULL)
 80106f6:	687b      	ldr	r3, [r7, #4]
 80106f8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80106fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80106fe:	2b00      	cmp	r3, #0
 8010700:	d00b      	beq.n	801071a <USBD_RegisterClass+0x44>
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetFSConfigDescriptor(&len);
 8010702:	687b      	ldr	r3, [r7, #4]
 8010704:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8010708:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801070a:	f107 020e 	add.w	r2, r7, #14
 801070e:	4610      	mov	r0, r2
 8010710:	4798      	blx	r3
 8010712:	4602      	mov	r2, r0
 8010714:	687b      	ldr	r3, [r7, #4]
 8010716:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
  }
#endif /* USE_USB_FS */

  return USBD_OK;
 801071a:	2300      	movs	r3, #0
}
 801071c:	4618      	mov	r0, r3
 801071e:	3710      	adds	r7, #16
 8010720:	46bd      	mov	sp, r7
 8010722:	bd80      	pop	{r7, pc}

08010724 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8010724:	b580      	push	{r7, lr}
 8010726:	b082      	sub	sp, #8
 8010728:	af00      	add	r7, sp, #0
 801072a:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 801072c:	6878      	ldr	r0, [r7, #4]
 801072e:	f001 fc7f 	bl	8012030 <USBD_LL_Start>
 8010732:	4603      	mov	r3, r0
}
 8010734:	4618      	mov	r0, r3
 8010736:	3708      	adds	r7, #8
 8010738:	46bd      	mov	sp, r7
 801073a:	bd80      	pop	{r7, pc}

0801073c <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 801073c:	b480      	push	{r7}
 801073e:	b083      	sub	sp, #12
 8010740:	af00      	add	r7, sp, #0
 8010742:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8010744:	2300      	movs	r3, #0
}
 8010746:	4618      	mov	r0, r3
 8010748:	370c      	adds	r7, #12
 801074a:	46bd      	mov	sp, r7
 801074c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010750:	4770      	bx	lr

08010752 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8010752:	b580      	push	{r7, lr}
 8010754:	b084      	sub	sp, #16
 8010756:	af00      	add	r7, sp, #0
 8010758:	6078      	str	r0, [r7, #4]
 801075a:	460b      	mov	r3, r1
 801075c:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 801075e:	2303      	movs	r3, #3
 8010760:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 8010762:	687b      	ldr	r3, [r7, #4]
 8010764:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8010768:	2b00      	cmp	r3, #0
 801076a:	d009      	beq.n	8010780 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass->Init(pdev, cfgidx);
 801076c:	687b      	ldr	r3, [r7, #4]
 801076e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8010772:	681b      	ldr	r3, [r3, #0]
 8010774:	78fa      	ldrb	r2, [r7, #3]
 8010776:	4611      	mov	r1, r2
 8010778:	6878      	ldr	r0, [r7, #4]
 801077a:	4798      	blx	r3
 801077c:	4603      	mov	r3, r0
 801077e:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 8010780:	7bfb      	ldrb	r3, [r7, #15]
}
 8010782:	4618      	mov	r0, r3
 8010784:	3710      	adds	r7, #16
 8010786:	46bd      	mov	sp, r7
 8010788:	bd80      	pop	{r7, pc}

0801078a <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 801078a:	b580      	push	{r7, lr}
 801078c:	b082      	sub	sp, #8
 801078e:	af00      	add	r7, sp, #0
 8010790:	6078      	str	r0, [r7, #4]
 8010792:	460b      	mov	r3, r1
 8010794:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration and De-initialize the Class process */
  if (pdev->pClass != NULL)
 8010796:	687b      	ldr	r3, [r7, #4]
 8010798:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 801079c:	2b00      	cmp	r3, #0
 801079e:	d007      	beq.n	80107b0 <USBD_ClrClassConfig+0x26>
  {
    pdev->pClass->DeInit(pdev, cfgidx);
 80107a0:	687b      	ldr	r3, [r7, #4]
 80107a2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80107a6:	685b      	ldr	r3, [r3, #4]
 80107a8:	78fa      	ldrb	r2, [r7, #3]
 80107aa:	4611      	mov	r1, r2
 80107ac:	6878      	ldr	r0, [r7, #4]
 80107ae:	4798      	blx	r3
  }

  return USBD_OK;
 80107b0:	2300      	movs	r3, #0
}
 80107b2:	4618      	mov	r0, r3
 80107b4:	3708      	adds	r7, #8
 80107b6:	46bd      	mov	sp, r7
 80107b8:	bd80      	pop	{r7, pc}

080107ba <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 80107ba:	b580      	push	{r7, lr}
 80107bc:	b084      	sub	sp, #16
 80107be:	af00      	add	r7, sp, #0
 80107c0:	6078      	str	r0, [r7, #4]
 80107c2:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 80107c4:	687b      	ldr	r3, [r7, #4]
 80107c6:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 80107ca:	6839      	ldr	r1, [r7, #0]
 80107cc:	4618      	mov	r0, r3
 80107ce:	f000 ff8f 	bl	80116f0 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 80107d2:	687b      	ldr	r3, [r7, #4]
 80107d4:	2201      	movs	r2, #1
 80107d6:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 80107da:	687b      	ldr	r3, [r7, #4]
 80107dc:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 80107e0:	461a      	mov	r2, r3
 80107e2:	687b      	ldr	r3, [r7, #4]
 80107e4:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 80107e8:	687b      	ldr	r3, [r7, #4]
 80107ea:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 80107ee:	f003 031f 	and.w	r3, r3, #31
 80107f2:	2b02      	cmp	r3, #2
 80107f4:	d01a      	beq.n	801082c <USBD_LL_SetupStage+0x72>
 80107f6:	2b02      	cmp	r3, #2
 80107f8:	d822      	bhi.n	8010840 <USBD_LL_SetupStage+0x86>
 80107fa:	2b00      	cmp	r3, #0
 80107fc:	d002      	beq.n	8010804 <USBD_LL_SetupStage+0x4a>
 80107fe:	2b01      	cmp	r3, #1
 8010800:	d00a      	beq.n	8010818 <USBD_LL_SetupStage+0x5e>
 8010802:	e01d      	b.n	8010840 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8010804:	687b      	ldr	r3, [r7, #4]
 8010806:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 801080a:	4619      	mov	r1, r3
 801080c:	6878      	ldr	r0, [r7, #4]
 801080e:	f000 fa61 	bl	8010cd4 <USBD_StdDevReq>
 8010812:	4603      	mov	r3, r0
 8010814:	73fb      	strb	r3, [r7, #15]
      break;
 8010816:	e020      	b.n	801085a <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8010818:	687b      	ldr	r3, [r7, #4]
 801081a:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 801081e:	4619      	mov	r1, r3
 8010820:	6878      	ldr	r0, [r7, #4]
 8010822:	f000 fac5 	bl	8010db0 <USBD_StdItfReq>
 8010826:	4603      	mov	r3, r0
 8010828:	73fb      	strb	r3, [r7, #15]
      break;
 801082a:	e016      	b.n	801085a <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 801082c:	687b      	ldr	r3, [r7, #4]
 801082e:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8010832:	4619      	mov	r1, r3
 8010834:	6878      	ldr	r0, [r7, #4]
 8010836:	f000 fb04 	bl	8010e42 <USBD_StdEPReq>
 801083a:	4603      	mov	r3, r0
 801083c:	73fb      	strb	r3, [r7, #15]
      break;
 801083e:	e00c      	b.n	801085a <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8010840:	687b      	ldr	r3, [r7, #4]
 8010842:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8010846:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 801084a:	b2db      	uxtb	r3, r3
 801084c:	4619      	mov	r1, r3
 801084e:	6878      	ldr	r0, [r7, #4]
 8010850:	f001 fc4e 	bl	80120f0 <USBD_LL_StallEP>
 8010854:	4603      	mov	r3, r0
 8010856:	73fb      	strb	r3, [r7, #15]
      break;
 8010858:	bf00      	nop
  }

  return ret;
 801085a:	7bfb      	ldrb	r3, [r7, #15]
}
 801085c:	4618      	mov	r0, r3
 801085e:	3710      	adds	r7, #16
 8010860:	46bd      	mov	sp, r7
 8010862:	bd80      	pop	{r7, pc}

08010864 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8010864:	b580      	push	{r7, lr}
 8010866:	b086      	sub	sp, #24
 8010868:	af00      	add	r7, sp, #0
 801086a:	60f8      	str	r0, [r7, #12]
 801086c:	460b      	mov	r3, r1
 801086e:	607a      	str	r2, [r7, #4]
 8010870:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 8010872:	7afb      	ldrb	r3, [r7, #11]
 8010874:	2b00      	cmp	r3, #0
 8010876:	d138      	bne.n	80108ea <USBD_LL_DataOutStage+0x86>
  {
    pep = &pdev->ep_out[0];
 8010878:	68fb      	ldr	r3, [r7, #12]
 801087a:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 801087e:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8010880:	68fb      	ldr	r3, [r7, #12]
 8010882:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8010886:	2b03      	cmp	r3, #3
 8010888:	d14a      	bne.n	8010920 <USBD_LL_DataOutStage+0xbc>
    {
      if (pep->rem_length > pep->maxpacket)
 801088a:	693b      	ldr	r3, [r7, #16]
 801088c:	689a      	ldr	r2, [r3, #8]
 801088e:	693b      	ldr	r3, [r7, #16]
 8010890:	68db      	ldr	r3, [r3, #12]
 8010892:	429a      	cmp	r2, r3
 8010894:	d913      	bls.n	80108be <USBD_LL_DataOutStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8010896:	693b      	ldr	r3, [r7, #16]
 8010898:	689a      	ldr	r2, [r3, #8]
 801089a:	693b      	ldr	r3, [r7, #16]
 801089c:	68db      	ldr	r3, [r3, #12]
 801089e:	1ad2      	subs	r2, r2, r3
 80108a0:	693b      	ldr	r3, [r7, #16]
 80108a2:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 80108a4:	693b      	ldr	r3, [r7, #16]
 80108a6:	68da      	ldr	r2, [r3, #12]
 80108a8:	693b      	ldr	r3, [r7, #16]
 80108aa:	689b      	ldr	r3, [r3, #8]
 80108ac:	4293      	cmp	r3, r2
 80108ae:	bf28      	it	cs
 80108b0:	4613      	movcs	r3, r2
 80108b2:	461a      	mov	r2, r3
 80108b4:	6879      	ldr	r1, [r7, #4]
 80108b6:	68f8      	ldr	r0, [r7, #12]
 80108b8:	f001 f80e 	bl	80118d8 <USBD_CtlContinueRx>
 80108bc:	e030      	b.n	8010920 <USBD_LL_DataOutStage+0xbc>
      }
      else
      {
        if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80108be:	68fb      	ldr	r3, [r7, #12]
 80108c0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80108c4:	b2db      	uxtb	r3, r3
 80108c6:	2b03      	cmp	r3, #3
 80108c8:	d10b      	bne.n	80108e2 <USBD_LL_DataOutStage+0x7e>
        {
          if (pdev->pClass->EP0_RxReady != NULL)
 80108ca:	68fb      	ldr	r3, [r7, #12]
 80108cc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80108d0:	691b      	ldr	r3, [r3, #16]
 80108d2:	2b00      	cmp	r3, #0
 80108d4:	d005      	beq.n	80108e2 <USBD_LL_DataOutStage+0x7e>
          {
            pdev->pClass->EP0_RxReady(pdev);
 80108d6:	68fb      	ldr	r3, [r7, #12]
 80108d8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80108dc:	691b      	ldr	r3, [r3, #16]
 80108de:	68f8      	ldr	r0, [r7, #12]
 80108e0:	4798      	blx	r3
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 80108e2:	68f8      	ldr	r0, [r7, #12]
 80108e4:	f001 f809 	bl	80118fa <USBD_CtlSendStatus>
 80108e8:	e01a      	b.n	8010920 <USBD_LL_DataOutStage+0xbc>
#endif
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80108ea:	68fb      	ldr	r3, [r7, #12]
 80108ec:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80108f0:	b2db      	uxtb	r3, r3
 80108f2:	2b03      	cmp	r3, #3
 80108f4:	d114      	bne.n	8010920 <USBD_LL_DataOutStage+0xbc>
    {
      if (pdev->pClass->DataOut != NULL)
 80108f6:	68fb      	ldr	r3, [r7, #12]
 80108f8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80108fc:	699b      	ldr	r3, [r3, #24]
 80108fe:	2b00      	cmp	r3, #0
 8010900:	d00e      	beq.n	8010920 <USBD_LL_DataOutStage+0xbc>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataOut(pdev, epnum);
 8010902:	68fb      	ldr	r3, [r7, #12]
 8010904:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8010908:	699b      	ldr	r3, [r3, #24]
 801090a:	7afa      	ldrb	r2, [r7, #11]
 801090c:	4611      	mov	r1, r2
 801090e:	68f8      	ldr	r0, [r7, #12]
 8010910:	4798      	blx	r3
 8010912:	4603      	mov	r3, r0
 8010914:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 8010916:	7dfb      	ldrb	r3, [r7, #23]
 8010918:	2b00      	cmp	r3, #0
 801091a:	d001      	beq.n	8010920 <USBD_LL_DataOutStage+0xbc>
        {
          return ret;
 801091c:	7dfb      	ldrb	r3, [r7, #23]
 801091e:	e000      	b.n	8010922 <USBD_LL_DataOutStage+0xbe>
        }
      }
    }
  }

  return USBD_OK;
 8010920:	2300      	movs	r3, #0
}
 8010922:	4618      	mov	r0, r3
 8010924:	3718      	adds	r7, #24
 8010926:	46bd      	mov	sp, r7
 8010928:	bd80      	pop	{r7, pc}

0801092a <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 801092a:	b580      	push	{r7, lr}
 801092c:	b086      	sub	sp, #24
 801092e:	af00      	add	r7, sp, #0
 8010930:	60f8      	str	r0, [r7, #12]
 8010932:	460b      	mov	r3, r1
 8010934:	607a      	str	r2, [r7, #4]
 8010936:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 8010938:	7afb      	ldrb	r3, [r7, #11]
 801093a:	2b00      	cmp	r3, #0
 801093c:	d16b      	bne.n	8010a16 <USBD_LL_DataInStage+0xec>
  {
    pep = &pdev->ep_in[0];
 801093e:	68fb      	ldr	r3, [r7, #12]
 8010940:	3314      	adds	r3, #20
 8010942:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8010944:	68fb      	ldr	r3, [r7, #12]
 8010946:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 801094a:	2b02      	cmp	r3, #2
 801094c:	d156      	bne.n	80109fc <USBD_LL_DataInStage+0xd2>
    {
      if (pep->rem_length > pep->maxpacket)
 801094e:	693b      	ldr	r3, [r7, #16]
 8010950:	689a      	ldr	r2, [r3, #8]
 8010952:	693b      	ldr	r3, [r7, #16]
 8010954:	68db      	ldr	r3, [r3, #12]
 8010956:	429a      	cmp	r2, r3
 8010958:	d914      	bls.n	8010984 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 801095a:	693b      	ldr	r3, [r7, #16]
 801095c:	689a      	ldr	r2, [r3, #8]
 801095e:	693b      	ldr	r3, [r7, #16]
 8010960:	68db      	ldr	r3, [r3, #12]
 8010962:	1ad2      	subs	r2, r2, r3
 8010964:	693b      	ldr	r3, [r7, #16]
 8010966:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 8010968:	693b      	ldr	r3, [r7, #16]
 801096a:	689b      	ldr	r3, [r3, #8]
 801096c:	461a      	mov	r2, r3
 801096e:	6879      	ldr	r1, [r7, #4]
 8010970:	68f8      	ldr	r0, [r7, #12]
 8010972:	f000 ff83 	bl	801187c <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8010976:	2300      	movs	r3, #0
 8010978:	2200      	movs	r2, #0
 801097a:	2100      	movs	r1, #0
 801097c:	68f8      	ldr	r0, [r7, #12]
 801097e:	f001 fc61 	bl	8012244 <USBD_LL_PrepareReceive>
 8010982:	e03b      	b.n	80109fc <USBD_LL_DataInStage+0xd2>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 8010984:	693b      	ldr	r3, [r7, #16]
 8010986:	68da      	ldr	r2, [r3, #12]
 8010988:	693b      	ldr	r3, [r7, #16]
 801098a:	689b      	ldr	r3, [r3, #8]
 801098c:	429a      	cmp	r2, r3
 801098e:	d11c      	bne.n	80109ca <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 8010990:	693b      	ldr	r3, [r7, #16]
 8010992:	685a      	ldr	r2, [r3, #4]
 8010994:	693b      	ldr	r3, [r7, #16]
 8010996:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 8010998:	429a      	cmp	r2, r3
 801099a:	d316      	bcc.n	80109ca <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 801099c:	693b      	ldr	r3, [r7, #16]
 801099e:	685a      	ldr	r2, [r3, #4]
 80109a0:	68fb      	ldr	r3, [r7, #12]
 80109a2:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 80109a6:	429a      	cmp	r2, r3
 80109a8:	d20f      	bcs.n	80109ca <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 80109aa:	2200      	movs	r2, #0
 80109ac:	2100      	movs	r1, #0
 80109ae:	68f8      	ldr	r0, [r7, #12]
 80109b0:	f000 ff64 	bl	801187c <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 80109b4:	68fb      	ldr	r3, [r7, #12]
 80109b6:	2200      	movs	r2, #0
 80109b8:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80109bc:	2300      	movs	r3, #0
 80109be:	2200      	movs	r2, #0
 80109c0:	2100      	movs	r1, #0
 80109c2:	68f8      	ldr	r0, [r7, #12]
 80109c4:	f001 fc3e 	bl	8012244 <USBD_LL_PrepareReceive>
 80109c8:	e018      	b.n	80109fc <USBD_LL_DataInStage+0xd2>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80109ca:	68fb      	ldr	r3, [r7, #12]
 80109cc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80109d0:	b2db      	uxtb	r3, r3
 80109d2:	2b03      	cmp	r3, #3
 80109d4:	d10b      	bne.n	80109ee <USBD_LL_DataInStage+0xc4>
          {
            if (pdev->pClass->EP0_TxSent != NULL)
 80109d6:	68fb      	ldr	r3, [r7, #12]
 80109d8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80109dc:	68db      	ldr	r3, [r3, #12]
 80109de:	2b00      	cmp	r3, #0
 80109e0:	d005      	beq.n	80109ee <USBD_LL_DataInStage+0xc4>
            {
              pdev->pClass->EP0_TxSent(pdev);
 80109e2:	68fb      	ldr	r3, [r7, #12]
 80109e4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80109e8:	68db      	ldr	r3, [r3, #12]
 80109ea:	68f8      	ldr	r0, [r7, #12]
 80109ec:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 80109ee:	2180      	movs	r1, #128	; 0x80
 80109f0:	68f8      	ldr	r0, [r7, #12]
 80109f2:	f001 fb7d 	bl	80120f0 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 80109f6:	68f8      	ldr	r0, [r7, #12]
 80109f8:	f000 ff92 	bl	8011920 <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode == 1U)
 80109fc:	68fb      	ldr	r3, [r7, #12]
 80109fe:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 8010a02:	2b01      	cmp	r3, #1
 8010a04:	d122      	bne.n	8010a4c <USBD_LL_DataInStage+0x122>
    {
      (void)USBD_RunTestMode(pdev);
 8010a06:	68f8      	ldr	r0, [r7, #12]
 8010a08:	f7ff fe98 	bl	801073c <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8010a0c:	68fb      	ldr	r3, [r7, #12]
 8010a0e:	2200      	movs	r2, #0
 8010a10:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 8010a14:	e01a      	b.n	8010a4c <USBD_LL_DataInStage+0x122>
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8010a16:	68fb      	ldr	r3, [r7, #12]
 8010a18:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8010a1c:	b2db      	uxtb	r3, r3
 8010a1e:	2b03      	cmp	r3, #3
 8010a20:	d114      	bne.n	8010a4c <USBD_LL_DataInStage+0x122>
    {
      if (pdev->pClass->DataIn != NULL)
 8010a22:	68fb      	ldr	r3, [r7, #12]
 8010a24:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8010a28:	695b      	ldr	r3, [r3, #20]
 8010a2a:	2b00      	cmp	r3, #0
 8010a2c:	d00e      	beq.n	8010a4c <USBD_LL_DataInStage+0x122>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataIn(pdev, epnum);
 8010a2e:	68fb      	ldr	r3, [r7, #12]
 8010a30:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8010a34:	695b      	ldr	r3, [r3, #20]
 8010a36:	7afa      	ldrb	r2, [r7, #11]
 8010a38:	4611      	mov	r1, r2
 8010a3a:	68f8      	ldr	r0, [r7, #12]
 8010a3c:	4798      	blx	r3
 8010a3e:	4603      	mov	r3, r0
 8010a40:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 8010a42:	7dfb      	ldrb	r3, [r7, #23]
 8010a44:	2b00      	cmp	r3, #0
 8010a46:	d001      	beq.n	8010a4c <USBD_LL_DataInStage+0x122>
        {
          return ret;
 8010a48:	7dfb      	ldrb	r3, [r7, #23]
 8010a4a:	e000      	b.n	8010a4e <USBD_LL_DataInStage+0x124>
        }
      }
    }
  }

  return USBD_OK;
 8010a4c:	2300      	movs	r3, #0
}
 8010a4e:	4618      	mov	r0, r3
 8010a50:	3718      	adds	r7, #24
 8010a52:	46bd      	mov	sp, r7
 8010a54:	bd80      	pop	{r7, pc}

08010a56 <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8010a56:	b580      	push	{r7, lr}
 8010a58:	b082      	sub	sp, #8
 8010a5a:	af00      	add	r7, sp, #0
 8010a5c:	6078      	str	r0, [r7, #4]
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8010a5e:	687b      	ldr	r3, [r7, #4]
 8010a60:	2201      	movs	r2, #1
 8010a62:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8010a66:	687b      	ldr	r3, [r7, #4]
 8010a68:	2200      	movs	r2, #0
 8010a6a:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 8010a6e:	687b      	ldr	r3, [r7, #4]
 8010a70:	2200      	movs	r2, #0
 8010a72:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8010a74:	687b      	ldr	r3, [r7, #4]
 8010a76:	2200      	movs	r2, #0
 8010a78:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClass == NULL)
 8010a7c:	687b      	ldr	r3, [r7, #4]
 8010a7e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8010a82:	2b00      	cmp	r3, #0
 8010a84:	d101      	bne.n	8010a8a <USBD_LL_Reset+0x34>
  {
    return USBD_FAIL;
 8010a86:	2303      	movs	r3, #3
 8010a88:	e02f      	b.n	8010aea <USBD_LL_Reset+0x94>
  }

  if (pdev->pClassData != NULL)
 8010a8a:	687b      	ldr	r3, [r7, #4]
 8010a8c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8010a90:	2b00      	cmp	r3, #0
 8010a92:	d00f      	beq.n	8010ab4 <USBD_LL_Reset+0x5e>
  {
    if (pdev->pClass->DeInit != NULL)
 8010a94:	687b      	ldr	r3, [r7, #4]
 8010a96:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8010a9a:	685b      	ldr	r3, [r3, #4]
 8010a9c:	2b00      	cmp	r3, #0
 8010a9e:	d009      	beq.n	8010ab4 <USBD_LL_Reset+0x5e>
    {
      (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8010aa0:	687b      	ldr	r3, [r7, #4]
 8010aa2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8010aa6:	685b      	ldr	r3, [r3, #4]
 8010aa8:	687a      	ldr	r2, [r7, #4]
 8010aaa:	6852      	ldr	r2, [r2, #4]
 8010aac:	b2d2      	uxtb	r2, r2
 8010aae:	4611      	mov	r1, r2
 8010ab0:	6878      	ldr	r0, [r7, #4]
 8010ab2:	4798      	blx	r3
    }
  }

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8010ab4:	2340      	movs	r3, #64	; 0x40
 8010ab6:	2200      	movs	r2, #0
 8010ab8:	2100      	movs	r1, #0
 8010aba:	6878      	ldr	r0, [r7, #4]
 8010abc:	f001 fad3 	bl	8012066 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8010ac0:	687b      	ldr	r3, [r7, #4]
 8010ac2:	2201      	movs	r2, #1
 8010ac4:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8010ac8:	687b      	ldr	r3, [r7, #4]
 8010aca:	2240      	movs	r2, #64	; 0x40
 8010acc:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8010ad0:	2340      	movs	r3, #64	; 0x40
 8010ad2:	2200      	movs	r2, #0
 8010ad4:	2180      	movs	r1, #128	; 0x80
 8010ad6:	6878      	ldr	r0, [r7, #4]
 8010ad8:	f001 fac5 	bl	8012066 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8010adc:	687b      	ldr	r3, [r7, #4]
 8010ade:	2201      	movs	r2, #1
 8010ae0:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8010ae2:	687b      	ldr	r3, [r7, #4]
 8010ae4:	2240      	movs	r2, #64	; 0x40
 8010ae6:	621a      	str	r2, [r3, #32]

  return USBD_OK;
 8010ae8:	2300      	movs	r3, #0
}
 8010aea:	4618      	mov	r0, r3
 8010aec:	3708      	adds	r7, #8
 8010aee:	46bd      	mov	sp, r7
 8010af0:	bd80      	pop	{r7, pc}

08010af2 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8010af2:	b480      	push	{r7}
 8010af4:	b083      	sub	sp, #12
 8010af6:	af00      	add	r7, sp, #0
 8010af8:	6078      	str	r0, [r7, #4]
 8010afa:	460b      	mov	r3, r1
 8010afc:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8010afe:	687b      	ldr	r3, [r7, #4]
 8010b00:	78fa      	ldrb	r2, [r7, #3]
 8010b02:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8010b04:	2300      	movs	r3, #0
}
 8010b06:	4618      	mov	r0, r3
 8010b08:	370c      	adds	r7, #12
 8010b0a:	46bd      	mov	sp, r7
 8010b0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010b10:	4770      	bx	lr

08010b12 <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8010b12:	b480      	push	{r7}
 8010b14:	b083      	sub	sp, #12
 8010b16:	af00      	add	r7, sp, #0
 8010b18:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 8010b1a:	687b      	ldr	r3, [r7, #4]
 8010b1c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8010b20:	b2da      	uxtb	r2, r3
 8010b22:	687b      	ldr	r3, [r7, #4]
 8010b24:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 8010b28:	687b      	ldr	r3, [r7, #4]
 8010b2a:	2204      	movs	r2, #4
 8010b2c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 8010b30:	2300      	movs	r3, #0
}
 8010b32:	4618      	mov	r0, r3
 8010b34:	370c      	adds	r7, #12
 8010b36:	46bd      	mov	sp, r7
 8010b38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010b3c:	4770      	bx	lr

08010b3e <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8010b3e:	b480      	push	{r7}
 8010b40:	b083      	sub	sp, #12
 8010b42:	af00      	add	r7, sp, #0
 8010b44:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8010b46:	687b      	ldr	r3, [r7, #4]
 8010b48:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8010b4c:	b2db      	uxtb	r3, r3
 8010b4e:	2b04      	cmp	r3, #4
 8010b50:	d106      	bne.n	8010b60 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 8010b52:	687b      	ldr	r3, [r7, #4]
 8010b54:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 8010b58:	b2da      	uxtb	r2, r3
 8010b5a:	687b      	ldr	r3, [r7, #4]
 8010b5c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 8010b60:	2300      	movs	r3, #0
}
 8010b62:	4618      	mov	r0, r3
 8010b64:	370c      	adds	r7, #12
 8010b66:	46bd      	mov	sp, r7
 8010b68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010b6c:	4770      	bx	lr

08010b6e <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8010b6e:	b580      	push	{r7, lr}
 8010b70:	b082      	sub	sp, #8
 8010b72:	af00      	add	r7, sp, #0
 8010b74:	6078      	str	r0, [r7, #4]
  if (pdev->pClass == NULL)
 8010b76:	687b      	ldr	r3, [r7, #4]
 8010b78:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8010b7c:	2b00      	cmp	r3, #0
 8010b7e:	d101      	bne.n	8010b84 <USBD_LL_SOF+0x16>
  {
    return USBD_FAIL;
 8010b80:	2303      	movs	r3, #3
 8010b82:	e012      	b.n	8010baa <USBD_LL_SOF+0x3c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8010b84:	687b      	ldr	r3, [r7, #4]
 8010b86:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8010b8a:	b2db      	uxtb	r3, r3
 8010b8c:	2b03      	cmp	r3, #3
 8010b8e:	d10b      	bne.n	8010ba8 <USBD_LL_SOF+0x3a>
  {
    if (pdev->pClass->SOF != NULL)
 8010b90:	687b      	ldr	r3, [r7, #4]
 8010b92:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8010b96:	69db      	ldr	r3, [r3, #28]
 8010b98:	2b00      	cmp	r3, #0
 8010b9a:	d005      	beq.n	8010ba8 <USBD_LL_SOF+0x3a>
    {
      (void)pdev->pClass->SOF(pdev);
 8010b9c:	687b      	ldr	r3, [r7, #4]
 8010b9e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8010ba2:	69db      	ldr	r3, [r3, #28]
 8010ba4:	6878      	ldr	r0, [r7, #4]
 8010ba6:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8010ba8:	2300      	movs	r3, #0
}
 8010baa:	4618      	mov	r0, r3
 8010bac:	3708      	adds	r7, #8
 8010bae:	46bd      	mov	sp, r7
 8010bb0:	bd80      	pop	{r7, pc}

08010bb2 <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 8010bb2:	b580      	push	{r7, lr}
 8010bb4:	b082      	sub	sp, #8
 8010bb6:	af00      	add	r7, sp, #0
 8010bb8:	6078      	str	r0, [r7, #4]
 8010bba:	460b      	mov	r3, r1
 8010bbc:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass == NULL)
 8010bbe:	687b      	ldr	r3, [r7, #4]
 8010bc0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8010bc4:	2b00      	cmp	r3, #0
 8010bc6:	d101      	bne.n	8010bcc <USBD_LL_IsoINIncomplete+0x1a>
  {
    return USBD_FAIL;
 8010bc8:	2303      	movs	r3, #3
 8010bca:	e014      	b.n	8010bf6 <USBD_LL_IsoINIncomplete+0x44>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8010bcc:	687b      	ldr	r3, [r7, #4]
 8010bce:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8010bd2:	b2db      	uxtb	r3, r3
 8010bd4:	2b03      	cmp	r3, #3
 8010bd6:	d10d      	bne.n	8010bf4 <USBD_LL_IsoINIncomplete+0x42>
  {
    if (pdev->pClass->IsoINIncomplete != NULL)
 8010bd8:	687b      	ldr	r3, [r7, #4]
 8010bda:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8010bde:	6a1b      	ldr	r3, [r3, #32]
 8010be0:	2b00      	cmp	r3, #0
 8010be2:	d007      	beq.n	8010bf4 <USBD_LL_IsoINIncomplete+0x42>
    {
      (void)pdev->pClass->IsoINIncomplete(pdev, epnum);
 8010be4:	687b      	ldr	r3, [r7, #4]
 8010be6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8010bea:	6a1b      	ldr	r3, [r3, #32]
 8010bec:	78fa      	ldrb	r2, [r7, #3]
 8010bee:	4611      	mov	r1, r2
 8010bf0:	6878      	ldr	r0, [r7, #4]
 8010bf2:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8010bf4:	2300      	movs	r3, #0
}
 8010bf6:	4618      	mov	r0, r3
 8010bf8:	3708      	adds	r7, #8
 8010bfa:	46bd      	mov	sp, r7
 8010bfc:	bd80      	pop	{r7, pc}

08010bfe <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 8010bfe:	b580      	push	{r7, lr}
 8010c00:	b082      	sub	sp, #8
 8010c02:	af00      	add	r7, sp, #0
 8010c04:	6078      	str	r0, [r7, #4]
 8010c06:	460b      	mov	r3, r1
 8010c08:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass == NULL)
 8010c0a:	687b      	ldr	r3, [r7, #4]
 8010c0c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8010c10:	2b00      	cmp	r3, #0
 8010c12:	d101      	bne.n	8010c18 <USBD_LL_IsoOUTIncomplete+0x1a>
  {
    return USBD_FAIL;
 8010c14:	2303      	movs	r3, #3
 8010c16:	e014      	b.n	8010c42 <USBD_LL_IsoOUTIncomplete+0x44>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8010c18:	687b      	ldr	r3, [r7, #4]
 8010c1a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8010c1e:	b2db      	uxtb	r3, r3
 8010c20:	2b03      	cmp	r3, #3
 8010c22:	d10d      	bne.n	8010c40 <USBD_LL_IsoOUTIncomplete+0x42>
  {
    if (pdev->pClass->IsoOUTIncomplete != NULL)
 8010c24:	687b      	ldr	r3, [r7, #4]
 8010c26:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8010c2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010c2c:	2b00      	cmp	r3, #0
 8010c2e:	d007      	beq.n	8010c40 <USBD_LL_IsoOUTIncomplete+0x42>
    {
      (void)pdev->pClass->IsoOUTIncomplete(pdev, epnum);
 8010c30:	687b      	ldr	r3, [r7, #4]
 8010c32:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8010c36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010c38:	78fa      	ldrb	r2, [r7, #3]
 8010c3a:	4611      	mov	r1, r2
 8010c3c:	6878      	ldr	r0, [r7, #4]
 8010c3e:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8010c40:	2300      	movs	r3, #0
}
 8010c42:	4618      	mov	r0, r3
 8010c44:	3708      	adds	r7, #8
 8010c46:	46bd      	mov	sp, r7
 8010c48:	bd80      	pop	{r7, pc}

08010c4a <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 8010c4a:	b480      	push	{r7}
 8010c4c:	b083      	sub	sp, #12
 8010c4e:	af00      	add	r7, sp, #0
 8010c50:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8010c52:	2300      	movs	r3, #0
}
 8010c54:	4618      	mov	r0, r3
 8010c56:	370c      	adds	r7, #12
 8010c58:	46bd      	mov	sp, r7
 8010c5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010c5e:	4770      	bx	lr

08010c60 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 8010c60:	b580      	push	{r7, lr}
 8010c62:	b082      	sub	sp, #8
 8010c64:	af00      	add	r7, sp, #0
 8010c66:	6078      	str	r0, [r7, #4]
  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8010c68:	687b      	ldr	r3, [r7, #4]
 8010c6a:	2201      	movs	r2, #1
 8010c6c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  if (pdev->pClass != NULL)
 8010c70:	687b      	ldr	r3, [r7, #4]
 8010c72:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8010c76:	2b00      	cmp	r3, #0
 8010c78:	d009      	beq.n	8010c8e <USBD_LL_DevDisconnected+0x2e>
  {
    (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8010c7a:	687b      	ldr	r3, [r7, #4]
 8010c7c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8010c80:	685b      	ldr	r3, [r3, #4]
 8010c82:	687a      	ldr	r2, [r7, #4]
 8010c84:	6852      	ldr	r2, [r2, #4]
 8010c86:	b2d2      	uxtb	r2, r2
 8010c88:	4611      	mov	r1, r2
 8010c8a:	6878      	ldr	r0, [r7, #4]
 8010c8c:	4798      	blx	r3
  }

  return USBD_OK;
 8010c8e:	2300      	movs	r3, #0
}
 8010c90:	4618      	mov	r0, r3
 8010c92:	3708      	adds	r7, #8
 8010c94:	46bd      	mov	sp, r7
 8010c96:	bd80      	pop	{r7, pc}

08010c98 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 8010c98:	b480      	push	{r7}
 8010c9a:	b087      	sub	sp, #28
 8010c9c:	af00      	add	r7, sp, #0
 8010c9e:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 8010ca0:	687b      	ldr	r3, [r7, #4]
 8010ca2:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 8010ca4:	697b      	ldr	r3, [r7, #20]
 8010ca6:	781b      	ldrb	r3, [r3, #0]
 8010ca8:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 8010caa:	697b      	ldr	r3, [r7, #20]
 8010cac:	3301      	adds	r3, #1
 8010cae:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 8010cb0:	697b      	ldr	r3, [r7, #20]
 8010cb2:	781b      	ldrb	r3, [r3, #0]
 8010cb4:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 8010cb6:	8a3b      	ldrh	r3, [r7, #16]
 8010cb8:	021b      	lsls	r3, r3, #8
 8010cba:	b21a      	sxth	r2, r3
 8010cbc:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8010cc0:	4313      	orrs	r3, r2
 8010cc2:	b21b      	sxth	r3, r3
 8010cc4:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 8010cc6:	89fb      	ldrh	r3, [r7, #14]
}
 8010cc8:	4618      	mov	r0, r3
 8010cca:	371c      	adds	r7, #28
 8010ccc:	46bd      	mov	sp, r7
 8010cce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010cd2:	4770      	bx	lr

08010cd4 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8010cd4:	b580      	push	{r7, lr}
 8010cd6:	b084      	sub	sp, #16
 8010cd8:	af00      	add	r7, sp, #0
 8010cda:	6078      	str	r0, [r7, #4]
 8010cdc:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8010cde:	2300      	movs	r3, #0
 8010ce0:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8010ce2:	683b      	ldr	r3, [r7, #0]
 8010ce4:	781b      	ldrb	r3, [r3, #0]
 8010ce6:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8010cea:	2b40      	cmp	r3, #64	; 0x40
 8010cec:	d005      	beq.n	8010cfa <USBD_StdDevReq+0x26>
 8010cee:	2b40      	cmp	r3, #64	; 0x40
 8010cf0:	d853      	bhi.n	8010d9a <USBD_StdDevReq+0xc6>
 8010cf2:	2b00      	cmp	r3, #0
 8010cf4:	d00b      	beq.n	8010d0e <USBD_StdDevReq+0x3a>
 8010cf6:	2b20      	cmp	r3, #32
 8010cf8:	d14f      	bne.n	8010d9a <USBD_StdDevReq+0xc6>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8010cfa:	687b      	ldr	r3, [r7, #4]
 8010cfc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8010d00:	689b      	ldr	r3, [r3, #8]
 8010d02:	6839      	ldr	r1, [r7, #0]
 8010d04:	6878      	ldr	r0, [r7, #4]
 8010d06:	4798      	blx	r3
 8010d08:	4603      	mov	r3, r0
 8010d0a:	73fb      	strb	r3, [r7, #15]
      break;
 8010d0c:	e04a      	b.n	8010da4 <USBD_StdDevReq+0xd0>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8010d0e:	683b      	ldr	r3, [r7, #0]
 8010d10:	785b      	ldrb	r3, [r3, #1]
 8010d12:	2b09      	cmp	r3, #9
 8010d14:	d83b      	bhi.n	8010d8e <USBD_StdDevReq+0xba>
 8010d16:	a201      	add	r2, pc, #4	; (adr r2, 8010d1c <USBD_StdDevReq+0x48>)
 8010d18:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010d1c:	08010d71 	.word	0x08010d71
 8010d20:	08010d85 	.word	0x08010d85
 8010d24:	08010d8f 	.word	0x08010d8f
 8010d28:	08010d7b 	.word	0x08010d7b
 8010d2c:	08010d8f 	.word	0x08010d8f
 8010d30:	08010d4f 	.word	0x08010d4f
 8010d34:	08010d45 	.word	0x08010d45
 8010d38:	08010d8f 	.word	0x08010d8f
 8010d3c:	08010d67 	.word	0x08010d67
 8010d40:	08010d59 	.word	0x08010d59
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8010d44:	6839      	ldr	r1, [r7, #0]
 8010d46:	6878      	ldr	r0, [r7, #4]
 8010d48:	f000 f9de 	bl	8011108 <USBD_GetDescriptor>
          break;
 8010d4c:	e024      	b.n	8010d98 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8010d4e:	6839      	ldr	r1, [r7, #0]
 8010d50:	6878      	ldr	r0, [r7, #4]
 8010d52:	f000 fb43 	bl	80113dc <USBD_SetAddress>
          break;
 8010d56:	e01f      	b.n	8010d98 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 8010d58:	6839      	ldr	r1, [r7, #0]
 8010d5a:	6878      	ldr	r0, [r7, #4]
 8010d5c:	f000 fb82 	bl	8011464 <USBD_SetConfig>
 8010d60:	4603      	mov	r3, r0
 8010d62:	73fb      	strb	r3, [r7, #15]
          break;
 8010d64:	e018      	b.n	8010d98 <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8010d66:	6839      	ldr	r1, [r7, #0]
 8010d68:	6878      	ldr	r0, [r7, #4]
 8010d6a:	f000 fc21 	bl	80115b0 <USBD_GetConfig>
          break;
 8010d6e:	e013      	b.n	8010d98 <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8010d70:	6839      	ldr	r1, [r7, #0]
 8010d72:	6878      	ldr	r0, [r7, #4]
 8010d74:	f000 fc52 	bl	801161c <USBD_GetStatus>
          break;
 8010d78:	e00e      	b.n	8010d98 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8010d7a:	6839      	ldr	r1, [r7, #0]
 8010d7c:	6878      	ldr	r0, [r7, #4]
 8010d7e:	f000 fc81 	bl	8011684 <USBD_SetFeature>
          break;
 8010d82:	e009      	b.n	8010d98 <USBD_StdDevReq+0xc4>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8010d84:	6839      	ldr	r1, [r7, #0]
 8010d86:	6878      	ldr	r0, [r7, #4]
 8010d88:	f000 fc90 	bl	80116ac <USBD_ClrFeature>
          break;
 8010d8c:	e004      	b.n	8010d98 <USBD_StdDevReq+0xc4>

        default:
          USBD_CtlError(pdev, req);
 8010d8e:	6839      	ldr	r1, [r7, #0]
 8010d90:	6878      	ldr	r0, [r7, #4]
 8010d92:	f000 fce7 	bl	8011764 <USBD_CtlError>
          break;
 8010d96:	bf00      	nop
      }
      break;
 8010d98:	e004      	b.n	8010da4 <USBD_StdDevReq+0xd0>

    default:
      USBD_CtlError(pdev, req);
 8010d9a:	6839      	ldr	r1, [r7, #0]
 8010d9c:	6878      	ldr	r0, [r7, #4]
 8010d9e:	f000 fce1 	bl	8011764 <USBD_CtlError>
      break;
 8010da2:	bf00      	nop
  }

  return ret;
 8010da4:	7bfb      	ldrb	r3, [r7, #15]
}
 8010da6:	4618      	mov	r0, r3
 8010da8:	3710      	adds	r7, #16
 8010daa:	46bd      	mov	sp, r7
 8010dac:	bd80      	pop	{r7, pc}
 8010dae:	bf00      	nop

08010db0 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8010db0:	b580      	push	{r7, lr}
 8010db2:	b084      	sub	sp, #16
 8010db4:	af00      	add	r7, sp, #0
 8010db6:	6078      	str	r0, [r7, #4]
 8010db8:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8010dba:	2300      	movs	r3, #0
 8010dbc:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8010dbe:	683b      	ldr	r3, [r7, #0]
 8010dc0:	781b      	ldrb	r3, [r3, #0]
 8010dc2:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8010dc6:	2b40      	cmp	r3, #64	; 0x40
 8010dc8:	d005      	beq.n	8010dd6 <USBD_StdItfReq+0x26>
 8010dca:	2b40      	cmp	r3, #64	; 0x40
 8010dcc:	d82f      	bhi.n	8010e2e <USBD_StdItfReq+0x7e>
 8010dce:	2b00      	cmp	r3, #0
 8010dd0:	d001      	beq.n	8010dd6 <USBD_StdItfReq+0x26>
 8010dd2:	2b20      	cmp	r3, #32
 8010dd4:	d12b      	bne.n	8010e2e <USBD_StdItfReq+0x7e>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8010dd6:	687b      	ldr	r3, [r7, #4]
 8010dd8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8010ddc:	b2db      	uxtb	r3, r3
 8010dde:	3b01      	subs	r3, #1
 8010de0:	2b02      	cmp	r3, #2
 8010de2:	d81d      	bhi.n	8010e20 <USBD_StdItfReq+0x70>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8010de4:	683b      	ldr	r3, [r7, #0]
 8010de6:	889b      	ldrh	r3, [r3, #4]
 8010de8:	b2db      	uxtb	r3, r3
 8010dea:	2b01      	cmp	r3, #1
 8010dec:	d813      	bhi.n	8010e16 <USBD_StdItfReq+0x66>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8010dee:	687b      	ldr	r3, [r7, #4]
 8010df0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8010df4:	689b      	ldr	r3, [r3, #8]
 8010df6:	6839      	ldr	r1, [r7, #0]
 8010df8:	6878      	ldr	r0, [r7, #4]
 8010dfa:	4798      	blx	r3
 8010dfc:	4603      	mov	r3, r0
 8010dfe:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8010e00:	683b      	ldr	r3, [r7, #0]
 8010e02:	88db      	ldrh	r3, [r3, #6]
 8010e04:	2b00      	cmp	r3, #0
 8010e06:	d110      	bne.n	8010e2a <USBD_StdItfReq+0x7a>
 8010e08:	7bfb      	ldrb	r3, [r7, #15]
 8010e0a:	2b00      	cmp	r3, #0
 8010e0c:	d10d      	bne.n	8010e2a <USBD_StdItfReq+0x7a>
            {
              (void)USBD_CtlSendStatus(pdev);
 8010e0e:	6878      	ldr	r0, [r7, #4]
 8010e10:	f000 fd73 	bl	80118fa <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8010e14:	e009      	b.n	8010e2a <USBD_StdItfReq+0x7a>
            USBD_CtlError(pdev, req);
 8010e16:	6839      	ldr	r1, [r7, #0]
 8010e18:	6878      	ldr	r0, [r7, #4]
 8010e1a:	f000 fca3 	bl	8011764 <USBD_CtlError>
          break;
 8010e1e:	e004      	b.n	8010e2a <USBD_StdItfReq+0x7a>

        default:
          USBD_CtlError(pdev, req);
 8010e20:	6839      	ldr	r1, [r7, #0]
 8010e22:	6878      	ldr	r0, [r7, #4]
 8010e24:	f000 fc9e 	bl	8011764 <USBD_CtlError>
          break;
 8010e28:	e000      	b.n	8010e2c <USBD_StdItfReq+0x7c>
          break;
 8010e2a:	bf00      	nop
      }
      break;
 8010e2c:	e004      	b.n	8010e38 <USBD_StdItfReq+0x88>

    default:
      USBD_CtlError(pdev, req);
 8010e2e:	6839      	ldr	r1, [r7, #0]
 8010e30:	6878      	ldr	r0, [r7, #4]
 8010e32:	f000 fc97 	bl	8011764 <USBD_CtlError>
      break;
 8010e36:	bf00      	nop
  }

  return ret;
 8010e38:	7bfb      	ldrb	r3, [r7, #15]
}
 8010e3a:	4618      	mov	r0, r3
 8010e3c:	3710      	adds	r7, #16
 8010e3e:	46bd      	mov	sp, r7
 8010e40:	bd80      	pop	{r7, pc}

08010e42 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8010e42:	b580      	push	{r7, lr}
 8010e44:	b084      	sub	sp, #16
 8010e46:	af00      	add	r7, sp, #0
 8010e48:	6078      	str	r0, [r7, #4]
 8010e4a:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 8010e4c:	2300      	movs	r3, #0
 8010e4e:	73fb      	strb	r3, [r7, #15]
  ep_addr = LOBYTE(req->wIndex);
 8010e50:	683b      	ldr	r3, [r7, #0]
 8010e52:	889b      	ldrh	r3, [r3, #4]
 8010e54:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8010e56:	683b      	ldr	r3, [r7, #0]
 8010e58:	781b      	ldrb	r3, [r3, #0]
 8010e5a:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8010e5e:	2b40      	cmp	r3, #64	; 0x40
 8010e60:	d007      	beq.n	8010e72 <USBD_StdEPReq+0x30>
 8010e62:	2b40      	cmp	r3, #64	; 0x40
 8010e64:	f200 8145 	bhi.w	80110f2 <USBD_StdEPReq+0x2b0>
 8010e68:	2b00      	cmp	r3, #0
 8010e6a:	d00c      	beq.n	8010e86 <USBD_StdEPReq+0x44>
 8010e6c:	2b20      	cmp	r3, #32
 8010e6e:	f040 8140 	bne.w	80110f2 <USBD_StdEPReq+0x2b0>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8010e72:	687b      	ldr	r3, [r7, #4]
 8010e74:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8010e78:	689b      	ldr	r3, [r3, #8]
 8010e7a:	6839      	ldr	r1, [r7, #0]
 8010e7c:	6878      	ldr	r0, [r7, #4]
 8010e7e:	4798      	blx	r3
 8010e80:	4603      	mov	r3, r0
 8010e82:	73fb      	strb	r3, [r7, #15]
      break;
 8010e84:	e13a      	b.n	80110fc <USBD_StdEPReq+0x2ba>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8010e86:	683b      	ldr	r3, [r7, #0]
 8010e88:	785b      	ldrb	r3, [r3, #1]
 8010e8a:	2b03      	cmp	r3, #3
 8010e8c:	d007      	beq.n	8010e9e <USBD_StdEPReq+0x5c>
 8010e8e:	2b03      	cmp	r3, #3
 8010e90:	f300 8129 	bgt.w	80110e6 <USBD_StdEPReq+0x2a4>
 8010e94:	2b00      	cmp	r3, #0
 8010e96:	d07f      	beq.n	8010f98 <USBD_StdEPReq+0x156>
 8010e98:	2b01      	cmp	r3, #1
 8010e9a:	d03c      	beq.n	8010f16 <USBD_StdEPReq+0xd4>
 8010e9c:	e123      	b.n	80110e6 <USBD_StdEPReq+0x2a4>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8010e9e:	687b      	ldr	r3, [r7, #4]
 8010ea0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8010ea4:	b2db      	uxtb	r3, r3
 8010ea6:	2b02      	cmp	r3, #2
 8010ea8:	d002      	beq.n	8010eb0 <USBD_StdEPReq+0x6e>
 8010eaa:	2b03      	cmp	r3, #3
 8010eac:	d016      	beq.n	8010edc <USBD_StdEPReq+0x9a>
 8010eae:	e02c      	b.n	8010f0a <USBD_StdEPReq+0xc8>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8010eb0:	7bbb      	ldrb	r3, [r7, #14]
 8010eb2:	2b00      	cmp	r3, #0
 8010eb4:	d00d      	beq.n	8010ed2 <USBD_StdEPReq+0x90>
 8010eb6:	7bbb      	ldrb	r3, [r7, #14]
 8010eb8:	2b80      	cmp	r3, #128	; 0x80
 8010eba:	d00a      	beq.n	8010ed2 <USBD_StdEPReq+0x90>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8010ebc:	7bbb      	ldrb	r3, [r7, #14]
 8010ebe:	4619      	mov	r1, r3
 8010ec0:	6878      	ldr	r0, [r7, #4]
 8010ec2:	f001 f915 	bl	80120f0 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8010ec6:	2180      	movs	r1, #128	; 0x80
 8010ec8:	6878      	ldr	r0, [r7, #4]
 8010eca:	f001 f911 	bl	80120f0 <USBD_LL_StallEP>
 8010ece:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8010ed0:	e020      	b.n	8010f14 <USBD_StdEPReq+0xd2>
                USBD_CtlError(pdev, req);
 8010ed2:	6839      	ldr	r1, [r7, #0]
 8010ed4:	6878      	ldr	r0, [r7, #4]
 8010ed6:	f000 fc45 	bl	8011764 <USBD_CtlError>
              break;
 8010eda:	e01b      	b.n	8010f14 <USBD_StdEPReq+0xd2>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8010edc:	683b      	ldr	r3, [r7, #0]
 8010ede:	885b      	ldrh	r3, [r3, #2]
 8010ee0:	2b00      	cmp	r3, #0
 8010ee2:	d10e      	bne.n	8010f02 <USBD_StdEPReq+0xc0>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8010ee4:	7bbb      	ldrb	r3, [r7, #14]
 8010ee6:	2b00      	cmp	r3, #0
 8010ee8:	d00b      	beq.n	8010f02 <USBD_StdEPReq+0xc0>
 8010eea:	7bbb      	ldrb	r3, [r7, #14]
 8010eec:	2b80      	cmp	r3, #128	; 0x80
 8010eee:	d008      	beq.n	8010f02 <USBD_StdEPReq+0xc0>
 8010ef0:	683b      	ldr	r3, [r7, #0]
 8010ef2:	88db      	ldrh	r3, [r3, #6]
 8010ef4:	2b00      	cmp	r3, #0
 8010ef6:	d104      	bne.n	8010f02 <USBD_StdEPReq+0xc0>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 8010ef8:	7bbb      	ldrb	r3, [r7, #14]
 8010efa:	4619      	mov	r1, r3
 8010efc:	6878      	ldr	r0, [r7, #4]
 8010efe:	f001 f8f7 	bl	80120f0 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 8010f02:	6878      	ldr	r0, [r7, #4]
 8010f04:	f000 fcf9 	bl	80118fa <USBD_CtlSendStatus>

              break;
 8010f08:	e004      	b.n	8010f14 <USBD_StdEPReq+0xd2>

            default:
              USBD_CtlError(pdev, req);
 8010f0a:	6839      	ldr	r1, [r7, #0]
 8010f0c:	6878      	ldr	r0, [r7, #4]
 8010f0e:	f000 fc29 	bl	8011764 <USBD_CtlError>
              break;
 8010f12:	bf00      	nop
          }
          break;
 8010f14:	e0ec      	b.n	80110f0 <USBD_StdEPReq+0x2ae>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8010f16:	687b      	ldr	r3, [r7, #4]
 8010f18:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8010f1c:	b2db      	uxtb	r3, r3
 8010f1e:	2b02      	cmp	r3, #2
 8010f20:	d002      	beq.n	8010f28 <USBD_StdEPReq+0xe6>
 8010f22:	2b03      	cmp	r3, #3
 8010f24:	d016      	beq.n	8010f54 <USBD_StdEPReq+0x112>
 8010f26:	e030      	b.n	8010f8a <USBD_StdEPReq+0x148>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8010f28:	7bbb      	ldrb	r3, [r7, #14]
 8010f2a:	2b00      	cmp	r3, #0
 8010f2c:	d00d      	beq.n	8010f4a <USBD_StdEPReq+0x108>
 8010f2e:	7bbb      	ldrb	r3, [r7, #14]
 8010f30:	2b80      	cmp	r3, #128	; 0x80
 8010f32:	d00a      	beq.n	8010f4a <USBD_StdEPReq+0x108>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8010f34:	7bbb      	ldrb	r3, [r7, #14]
 8010f36:	4619      	mov	r1, r3
 8010f38:	6878      	ldr	r0, [r7, #4]
 8010f3a:	f001 f8d9 	bl	80120f0 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8010f3e:	2180      	movs	r1, #128	; 0x80
 8010f40:	6878      	ldr	r0, [r7, #4]
 8010f42:	f001 f8d5 	bl	80120f0 <USBD_LL_StallEP>
 8010f46:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8010f48:	e025      	b.n	8010f96 <USBD_StdEPReq+0x154>
                USBD_CtlError(pdev, req);
 8010f4a:	6839      	ldr	r1, [r7, #0]
 8010f4c:	6878      	ldr	r0, [r7, #4]
 8010f4e:	f000 fc09 	bl	8011764 <USBD_CtlError>
              break;
 8010f52:	e020      	b.n	8010f96 <USBD_StdEPReq+0x154>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8010f54:	683b      	ldr	r3, [r7, #0]
 8010f56:	885b      	ldrh	r3, [r3, #2]
 8010f58:	2b00      	cmp	r3, #0
 8010f5a:	d11b      	bne.n	8010f94 <USBD_StdEPReq+0x152>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8010f5c:	7bbb      	ldrb	r3, [r7, #14]
 8010f5e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8010f62:	2b00      	cmp	r3, #0
 8010f64:	d004      	beq.n	8010f70 <USBD_StdEPReq+0x12e>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 8010f66:	7bbb      	ldrb	r3, [r7, #14]
 8010f68:	4619      	mov	r1, r3
 8010f6a:	6878      	ldr	r0, [r7, #4]
 8010f6c:	f001 f8df 	bl	801212e <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 8010f70:	6878      	ldr	r0, [r7, #4]
 8010f72:	f000 fcc2 	bl	80118fa <USBD_CtlSendStatus>
                ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8010f76:	687b      	ldr	r3, [r7, #4]
 8010f78:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8010f7c:	689b      	ldr	r3, [r3, #8]
 8010f7e:	6839      	ldr	r1, [r7, #0]
 8010f80:	6878      	ldr	r0, [r7, #4]
 8010f82:	4798      	blx	r3
 8010f84:	4603      	mov	r3, r0
 8010f86:	73fb      	strb	r3, [r7, #15]
              }
              break;
 8010f88:	e004      	b.n	8010f94 <USBD_StdEPReq+0x152>

            default:
              USBD_CtlError(pdev, req);
 8010f8a:	6839      	ldr	r1, [r7, #0]
 8010f8c:	6878      	ldr	r0, [r7, #4]
 8010f8e:	f000 fbe9 	bl	8011764 <USBD_CtlError>
              break;
 8010f92:	e000      	b.n	8010f96 <USBD_StdEPReq+0x154>
              break;
 8010f94:	bf00      	nop
          }
          break;
 8010f96:	e0ab      	b.n	80110f0 <USBD_StdEPReq+0x2ae>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8010f98:	687b      	ldr	r3, [r7, #4]
 8010f9a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8010f9e:	b2db      	uxtb	r3, r3
 8010fa0:	2b02      	cmp	r3, #2
 8010fa2:	d002      	beq.n	8010faa <USBD_StdEPReq+0x168>
 8010fa4:	2b03      	cmp	r3, #3
 8010fa6:	d032      	beq.n	801100e <USBD_StdEPReq+0x1cc>
 8010fa8:	e097      	b.n	80110da <USBD_StdEPReq+0x298>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8010faa:	7bbb      	ldrb	r3, [r7, #14]
 8010fac:	2b00      	cmp	r3, #0
 8010fae:	d007      	beq.n	8010fc0 <USBD_StdEPReq+0x17e>
 8010fb0:	7bbb      	ldrb	r3, [r7, #14]
 8010fb2:	2b80      	cmp	r3, #128	; 0x80
 8010fb4:	d004      	beq.n	8010fc0 <USBD_StdEPReq+0x17e>
              {
                USBD_CtlError(pdev, req);
 8010fb6:	6839      	ldr	r1, [r7, #0]
 8010fb8:	6878      	ldr	r0, [r7, #4]
 8010fba:	f000 fbd3 	bl	8011764 <USBD_CtlError>
                break;
 8010fbe:	e091      	b.n	80110e4 <USBD_StdEPReq+0x2a2>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8010fc0:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8010fc4:	2b00      	cmp	r3, #0
 8010fc6:	da0b      	bge.n	8010fe0 <USBD_StdEPReq+0x19e>
 8010fc8:	7bbb      	ldrb	r3, [r7, #14]
 8010fca:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8010fce:	4613      	mov	r3, r2
 8010fd0:	009b      	lsls	r3, r3, #2
 8010fd2:	4413      	add	r3, r2
 8010fd4:	009b      	lsls	r3, r3, #2
 8010fd6:	3310      	adds	r3, #16
 8010fd8:	687a      	ldr	r2, [r7, #4]
 8010fda:	4413      	add	r3, r2
 8010fdc:	3304      	adds	r3, #4
 8010fde:	e00b      	b.n	8010ff8 <USBD_StdEPReq+0x1b6>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8010fe0:	7bbb      	ldrb	r3, [r7, #14]
 8010fe2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8010fe6:	4613      	mov	r3, r2
 8010fe8:	009b      	lsls	r3, r3, #2
 8010fea:	4413      	add	r3, r2
 8010fec:	009b      	lsls	r3, r3, #2
 8010fee:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8010ff2:	687a      	ldr	r2, [r7, #4]
 8010ff4:	4413      	add	r3, r2
 8010ff6:	3304      	adds	r3, #4
 8010ff8:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8010ffa:	68bb      	ldr	r3, [r7, #8]
 8010ffc:	2200      	movs	r2, #0
 8010ffe:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8011000:	68bb      	ldr	r3, [r7, #8]
 8011002:	2202      	movs	r2, #2
 8011004:	4619      	mov	r1, r3
 8011006:	6878      	ldr	r0, [r7, #4]
 8011008:	f000 fc1d 	bl	8011846 <USBD_CtlSendData>
              break;
 801100c:	e06a      	b.n	80110e4 <USBD_StdEPReq+0x2a2>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 801100e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8011012:	2b00      	cmp	r3, #0
 8011014:	da11      	bge.n	801103a <USBD_StdEPReq+0x1f8>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8011016:	7bbb      	ldrb	r3, [r7, #14]
 8011018:	f003 020f 	and.w	r2, r3, #15
 801101c:	6879      	ldr	r1, [r7, #4]
 801101e:	4613      	mov	r3, r2
 8011020:	009b      	lsls	r3, r3, #2
 8011022:	4413      	add	r3, r2
 8011024:	009b      	lsls	r3, r3, #2
 8011026:	440b      	add	r3, r1
 8011028:	3324      	adds	r3, #36	; 0x24
 801102a:	881b      	ldrh	r3, [r3, #0]
 801102c:	2b00      	cmp	r3, #0
 801102e:	d117      	bne.n	8011060 <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 8011030:	6839      	ldr	r1, [r7, #0]
 8011032:	6878      	ldr	r0, [r7, #4]
 8011034:	f000 fb96 	bl	8011764 <USBD_CtlError>
                  break;
 8011038:	e054      	b.n	80110e4 <USBD_StdEPReq+0x2a2>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 801103a:	7bbb      	ldrb	r3, [r7, #14]
 801103c:	f003 020f 	and.w	r2, r3, #15
 8011040:	6879      	ldr	r1, [r7, #4]
 8011042:	4613      	mov	r3, r2
 8011044:	009b      	lsls	r3, r3, #2
 8011046:	4413      	add	r3, r2
 8011048:	009b      	lsls	r3, r3, #2
 801104a:	440b      	add	r3, r1
 801104c:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8011050:	881b      	ldrh	r3, [r3, #0]
 8011052:	2b00      	cmp	r3, #0
 8011054:	d104      	bne.n	8011060 <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 8011056:	6839      	ldr	r1, [r7, #0]
 8011058:	6878      	ldr	r0, [r7, #4]
 801105a:	f000 fb83 	bl	8011764 <USBD_CtlError>
                  break;
 801105e:	e041      	b.n	80110e4 <USBD_StdEPReq+0x2a2>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8011060:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8011064:	2b00      	cmp	r3, #0
 8011066:	da0b      	bge.n	8011080 <USBD_StdEPReq+0x23e>
 8011068:	7bbb      	ldrb	r3, [r7, #14]
 801106a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 801106e:	4613      	mov	r3, r2
 8011070:	009b      	lsls	r3, r3, #2
 8011072:	4413      	add	r3, r2
 8011074:	009b      	lsls	r3, r3, #2
 8011076:	3310      	adds	r3, #16
 8011078:	687a      	ldr	r2, [r7, #4]
 801107a:	4413      	add	r3, r2
 801107c:	3304      	adds	r3, #4
 801107e:	e00b      	b.n	8011098 <USBD_StdEPReq+0x256>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8011080:	7bbb      	ldrb	r3, [r7, #14]
 8011082:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8011086:	4613      	mov	r3, r2
 8011088:	009b      	lsls	r3, r3, #2
 801108a:	4413      	add	r3, r2
 801108c:	009b      	lsls	r3, r3, #2
 801108e:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8011092:	687a      	ldr	r2, [r7, #4]
 8011094:	4413      	add	r3, r2
 8011096:	3304      	adds	r3, #4
 8011098:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 801109a:	7bbb      	ldrb	r3, [r7, #14]
 801109c:	2b00      	cmp	r3, #0
 801109e:	d002      	beq.n	80110a6 <USBD_StdEPReq+0x264>
 80110a0:	7bbb      	ldrb	r3, [r7, #14]
 80110a2:	2b80      	cmp	r3, #128	; 0x80
 80110a4:	d103      	bne.n	80110ae <USBD_StdEPReq+0x26c>
              {
                pep->status = 0x0000U;
 80110a6:	68bb      	ldr	r3, [r7, #8]
 80110a8:	2200      	movs	r2, #0
 80110aa:	601a      	str	r2, [r3, #0]
 80110ac:	e00e      	b.n	80110cc <USBD_StdEPReq+0x28a>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 80110ae:	7bbb      	ldrb	r3, [r7, #14]
 80110b0:	4619      	mov	r1, r3
 80110b2:	6878      	ldr	r0, [r7, #4]
 80110b4:	f001 f85a 	bl	801216c <USBD_LL_IsStallEP>
 80110b8:	4603      	mov	r3, r0
 80110ba:	2b00      	cmp	r3, #0
 80110bc:	d003      	beq.n	80110c6 <USBD_StdEPReq+0x284>
              {
                pep->status = 0x0001U;
 80110be:	68bb      	ldr	r3, [r7, #8]
 80110c0:	2201      	movs	r2, #1
 80110c2:	601a      	str	r2, [r3, #0]
 80110c4:	e002      	b.n	80110cc <USBD_StdEPReq+0x28a>
              }
              else
              {
                pep->status = 0x0000U;
 80110c6:	68bb      	ldr	r3, [r7, #8]
 80110c8:	2200      	movs	r2, #0
 80110ca:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 80110cc:	68bb      	ldr	r3, [r7, #8]
 80110ce:	2202      	movs	r2, #2
 80110d0:	4619      	mov	r1, r3
 80110d2:	6878      	ldr	r0, [r7, #4]
 80110d4:	f000 fbb7 	bl	8011846 <USBD_CtlSendData>
              break;
 80110d8:	e004      	b.n	80110e4 <USBD_StdEPReq+0x2a2>

            default:
              USBD_CtlError(pdev, req);
 80110da:	6839      	ldr	r1, [r7, #0]
 80110dc:	6878      	ldr	r0, [r7, #4]
 80110de:	f000 fb41 	bl	8011764 <USBD_CtlError>
              break;
 80110e2:	bf00      	nop
          }
          break;
 80110e4:	e004      	b.n	80110f0 <USBD_StdEPReq+0x2ae>

        default:
          USBD_CtlError(pdev, req);
 80110e6:	6839      	ldr	r1, [r7, #0]
 80110e8:	6878      	ldr	r0, [r7, #4]
 80110ea:	f000 fb3b 	bl	8011764 <USBD_CtlError>
          break;
 80110ee:	bf00      	nop
      }
      break;
 80110f0:	e004      	b.n	80110fc <USBD_StdEPReq+0x2ba>

    default:
      USBD_CtlError(pdev, req);
 80110f2:	6839      	ldr	r1, [r7, #0]
 80110f4:	6878      	ldr	r0, [r7, #4]
 80110f6:	f000 fb35 	bl	8011764 <USBD_CtlError>
      break;
 80110fa:	bf00      	nop
  }

  return ret;
 80110fc:	7bfb      	ldrb	r3, [r7, #15]
}
 80110fe:	4618      	mov	r0, r3
 8011100:	3710      	adds	r7, #16
 8011102:	46bd      	mov	sp, r7
 8011104:	bd80      	pop	{r7, pc}
	...

08011108 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8011108:	b580      	push	{r7, lr}
 801110a:	b084      	sub	sp, #16
 801110c:	af00      	add	r7, sp, #0
 801110e:	6078      	str	r0, [r7, #4]
 8011110:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8011112:	2300      	movs	r3, #0
 8011114:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8011116:	2300      	movs	r3, #0
 8011118:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 801111a:	2300      	movs	r3, #0
 801111c:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 801111e:	683b      	ldr	r3, [r7, #0]
 8011120:	885b      	ldrh	r3, [r3, #2]
 8011122:	0a1b      	lsrs	r3, r3, #8
 8011124:	b29b      	uxth	r3, r3
 8011126:	3b01      	subs	r3, #1
 8011128:	2b06      	cmp	r3, #6
 801112a:	f200 8128 	bhi.w	801137e <USBD_GetDescriptor+0x276>
 801112e:	a201      	add	r2, pc, #4	; (adr r2, 8011134 <USBD_GetDescriptor+0x2c>)
 8011130:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011134:	08011151 	.word	0x08011151
 8011138:	08011169 	.word	0x08011169
 801113c:	080111a9 	.word	0x080111a9
 8011140:	0801137f 	.word	0x0801137f
 8011144:	0801137f 	.word	0x0801137f
 8011148:	0801131f 	.word	0x0801131f
 801114c:	0801134b 	.word	0x0801134b
        err++;
      }
      break;
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8011150:	687b      	ldr	r3, [r7, #4]
 8011152:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8011156:	681b      	ldr	r3, [r3, #0]
 8011158:	687a      	ldr	r2, [r7, #4]
 801115a:	7c12      	ldrb	r2, [r2, #16]
 801115c:	f107 0108 	add.w	r1, r7, #8
 8011160:	4610      	mov	r0, r2
 8011162:	4798      	blx	r3
 8011164:	60f8      	str	r0, [r7, #12]
      break;
 8011166:	e112      	b.n	801138e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8011168:	687b      	ldr	r3, [r7, #4]
 801116a:	7c1b      	ldrb	r3, [r3, #16]
 801116c:	2b00      	cmp	r3, #0
 801116e:	d10d      	bne.n	801118c <USBD_GetDescriptor+0x84>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 8011170:	687b      	ldr	r3, [r7, #4]
 8011172:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8011176:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8011178:	f107 0208 	add.w	r2, r7, #8
 801117c:	4610      	mov	r0, r2
 801117e:	4798      	blx	r3
 8011180:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8011182:	68fb      	ldr	r3, [r7, #12]
 8011184:	3301      	adds	r3, #1
 8011186:	2202      	movs	r2, #2
 8011188:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 801118a:	e100      	b.n	801138e <USBD_GetDescriptor+0x286>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 801118c:	687b      	ldr	r3, [r7, #4]
 801118e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8011192:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011194:	f107 0208 	add.w	r2, r7, #8
 8011198:	4610      	mov	r0, r2
 801119a:	4798      	blx	r3
 801119c:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 801119e:	68fb      	ldr	r3, [r7, #12]
 80111a0:	3301      	adds	r3, #1
 80111a2:	2202      	movs	r2, #2
 80111a4:	701a      	strb	r2, [r3, #0]
      break;
 80111a6:	e0f2      	b.n	801138e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 80111a8:	683b      	ldr	r3, [r7, #0]
 80111aa:	885b      	ldrh	r3, [r3, #2]
 80111ac:	b2db      	uxtb	r3, r3
 80111ae:	2b05      	cmp	r3, #5
 80111b0:	f200 80ac 	bhi.w	801130c <USBD_GetDescriptor+0x204>
 80111b4:	a201      	add	r2, pc, #4	; (adr r2, 80111bc <USBD_GetDescriptor+0xb4>)
 80111b6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80111ba:	bf00      	nop
 80111bc:	080111d5 	.word	0x080111d5
 80111c0:	08011209 	.word	0x08011209
 80111c4:	0801123d 	.word	0x0801123d
 80111c8:	08011271 	.word	0x08011271
 80111cc:	080112a5 	.word	0x080112a5
 80111d0:	080112d9 	.word	0x080112d9
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 80111d4:	687b      	ldr	r3, [r7, #4]
 80111d6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80111da:	685b      	ldr	r3, [r3, #4]
 80111dc:	2b00      	cmp	r3, #0
 80111de:	d00b      	beq.n	80111f8 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 80111e0:	687b      	ldr	r3, [r7, #4]
 80111e2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80111e6:	685b      	ldr	r3, [r3, #4]
 80111e8:	687a      	ldr	r2, [r7, #4]
 80111ea:	7c12      	ldrb	r2, [r2, #16]
 80111ec:	f107 0108 	add.w	r1, r7, #8
 80111f0:	4610      	mov	r0, r2
 80111f2:	4798      	blx	r3
 80111f4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80111f6:	e091      	b.n	801131c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80111f8:	6839      	ldr	r1, [r7, #0]
 80111fa:	6878      	ldr	r0, [r7, #4]
 80111fc:	f000 fab2 	bl	8011764 <USBD_CtlError>
            err++;
 8011200:	7afb      	ldrb	r3, [r7, #11]
 8011202:	3301      	adds	r3, #1
 8011204:	72fb      	strb	r3, [r7, #11]
          break;
 8011206:	e089      	b.n	801131c <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8011208:	687b      	ldr	r3, [r7, #4]
 801120a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 801120e:	689b      	ldr	r3, [r3, #8]
 8011210:	2b00      	cmp	r3, #0
 8011212:	d00b      	beq.n	801122c <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8011214:	687b      	ldr	r3, [r7, #4]
 8011216:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 801121a:	689b      	ldr	r3, [r3, #8]
 801121c:	687a      	ldr	r2, [r7, #4]
 801121e:	7c12      	ldrb	r2, [r2, #16]
 8011220:	f107 0108 	add.w	r1, r7, #8
 8011224:	4610      	mov	r0, r2
 8011226:	4798      	blx	r3
 8011228:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 801122a:	e077      	b.n	801131c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 801122c:	6839      	ldr	r1, [r7, #0]
 801122e:	6878      	ldr	r0, [r7, #4]
 8011230:	f000 fa98 	bl	8011764 <USBD_CtlError>
            err++;
 8011234:	7afb      	ldrb	r3, [r7, #11]
 8011236:	3301      	adds	r3, #1
 8011238:	72fb      	strb	r3, [r7, #11]
          break;
 801123a:	e06f      	b.n	801131c <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 801123c:	687b      	ldr	r3, [r7, #4]
 801123e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8011242:	68db      	ldr	r3, [r3, #12]
 8011244:	2b00      	cmp	r3, #0
 8011246:	d00b      	beq.n	8011260 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8011248:	687b      	ldr	r3, [r7, #4]
 801124a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 801124e:	68db      	ldr	r3, [r3, #12]
 8011250:	687a      	ldr	r2, [r7, #4]
 8011252:	7c12      	ldrb	r2, [r2, #16]
 8011254:	f107 0108 	add.w	r1, r7, #8
 8011258:	4610      	mov	r0, r2
 801125a:	4798      	blx	r3
 801125c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 801125e:	e05d      	b.n	801131c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8011260:	6839      	ldr	r1, [r7, #0]
 8011262:	6878      	ldr	r0, [r7, #4]
 8011264:	f000 fa7e 	bl	8011764 <USBD_CtlError>
            err++;
 8011268:	7afb      	ldrb	r3, [r7, #11]
 801126a:	3301      	adds	r3, #1
 801126c:	72fb      	strb	r3, [r7, #11]
          break;
 801126e:	e055      	b.n	801131c <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8011270:	687b      	ldr	r3, [r7, #4]
 8011272:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8011276:	691b      	ldr	r3, [r3, #16]
 8011278:	2b00      	cmp	r3, #0
 801127a:	d00b      	beq.n	8011294 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 801127c:	687b      	ldr	r3, [r7, #4]
 801127e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8011282:	691b      	ldr	r3, [r3, #16]
 8011284:	687a      	ldr	r2, [r7, #4]
 8011286:	7c12      	ldrb	r2, [r2, #16]
 8011288:	f107 0108 	add.w	r1, r7, #8
 801128c:	4610      	mov	r0, r2
 801128e:	4798      	blx	r3
 8011290:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8011292:	e043      	b.n	801131c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8011294:	6839      	ldr	r1, [r7, #0]
 8011296:	6878      	ldr	r0, [r7, #4]
 8011298:	f000 fa64 	bl	8011764 <USBD_CtlError>
            err++;
 801129c:	7afb      	ldrb	r3, [r7, #11]
 801129e:	3301      	adds	r3, #1
 80112a0:	72fb      	strb	r3, [r7, #11]
          break;
 80112a2:	e03b      	b.n	801131c <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 80112a4:	687b      	ldr	r3, [r7, #4]
 80112a6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80112aa:	695b      	ldr	r3, [r3, #20]
 80112ac:	2b00      	cmp	r3, #0
 80112ae:	d00b      	beq.n	80112c8 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 80112b0:	687b      	ldr	r3, [r7, #4]
 80112b2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80112b6:	695b      	ldr	r3, [r3, #20]
 80112b8:	687a      	ldr	r2, [r7, #4]
 80112ba:	7c12      	ldrb	r2, [r2, #16]
 80112bc:	f107 0108 	add.w	r1, r7, #8
 80112c0:	4610      	mov	r0, r2
 80112c2:	4798      	blx	r3
 80112c4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80112c6:	e029      	b.n	801131c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80112c8:	6839      	ldr	r1, [r7, #0]
 80112ca:	6878      	ldr	r0, [r7, #4]
 80112cc:	f000 fa4a 	bl	8011764 <USBD_CtlError>
            err++;
 80112d0:	7afb      	ldrb	r3, [r7, #11]
 80112d2:	3301      	adds	r3, #1
 80112d4:	72fb      	strb	r3, [r7, #11]
          break;
 80112d6:	e021      	b.n	801131c <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 80112d8:	687b      	ldr	r3, [r7, #4]
 80112da:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80112de:	699b      	ldr	r3, [r3, #24]
 80112e0:	2b00      	cmp	r3, #0
 80112e2:	d00b      	beq.n	80112fc <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 80112e4:	687b      	ldr	r3, [r7, #4]
 80112e6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80112ea:	699b      	ldr	r3, [r3, #24]
 80112ec:	687a      	ldr	r2, [r7, #4]
 80112ee:	7c12      	ldrb	r2, [r2, #16]
 80112f0:	f107 0108 	add.w	r1, r7, #8
 80112f4:	4610      	mov	r0, r2
 80112f6:	4798      	blx	r3
 80112f8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80112fa:	e00f      	b.n	801131c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80112fc:	6839      	ldr	r1, [r7, #0]
 80112fe:	6878      	ldr	r0, [r7, #4]
 8011300:	f000 fa30 	bl	8011764 <USBD_CtlError>
            err++;
 8011304:	7afb      	ldrb	r3, [r7, #11]
 8011306:	3301      	adds	r3, #1
 8011308:	72fb      	strb	r3, [r7, #11]
          break;
 801130a:	e007      	b.n	801131c <USBD_GetDescriptor+0x214>
            err++;
          }
#endif

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 801130c:	6839      	ldr	r1, [r7, #0]
 801130e:	6878      	ldr	r0, [r7, #4]
 8011310:	f000 fa28 	bl	8011764 <USBD_CtlError>
          err++;
 8011314:	7afb      	ldrb	r3, [r7, #11]
 8011316:	3301      	adds	r3, #1
 8011318:	72fb      	strb	r3, [r7, #11]
#endif
          break;
 801131a:	bf00      	nop
      }
      break;
 801131c:	e037      	b.n	801138e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 801131e:	687b      	ldr	r3, [r7, #4]
 8011320:	7c1b      	ldrb	r3, [r3, #16]
 8011322:	2b00      	cmp	r3, #0
 8011324:	d109      	bne.n	801133a <USBD_GetDescriptor+0x232>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 8011326:	687b      	ldr	r3, [r7, #4]
 8011328:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 801132c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801132e:	f107 0208 	add.w	r2, r7, #8
 8011332:	4610      	mov	r0, r2
 8011334:	4798      	blx	r3
 8011336:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8011338:	e029      	b.n	801138e <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 801133a:	6839      	ldr	r1, [r7, #0]
 801133c:	6878      	ldr	r0, [r7, #4]
 801133e:	f000 fa11 	bl	8011764 <USBD_CtlError>
        err++;
 8011342:	7afb      	ldrb	r3, [r7, #11]
 8011344:	3301      	adds	r3, #1
 8011346:	72fb      	strb	r3, [r7, #11]
      break;
 8011348:	e021      	b.n	801138e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 801134a:	687b      	ldr	r3, [r7, #4]
 801134c:	7c1b      	ldrb	r3, [r3, #16]
 801134e:	2b00      	cmp	r3, #0
 8011350:	d10d      	bne.n	801136e <USBD_GetDescriptor+0x266>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 8011352:	687b      	ldr	r3, [r7, #4]
 8011354:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8011358:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801135a:	f107 0208 	add.w	r2, r7, #8
 801135e:	4610      	mov	r0, r2
 8011360:	4798      	blx	r3
 8011362:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8011364:	68fb      	ldr	r3, [r7, #12]
 8011366:	3301      	adds	r3, #1
 8011368:	2207      	movs	r2, #7
 801136a:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 801136c:	e00f      	b.n	801138e <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 801136e:	6839      	ldr	r1, [r7, #0]
 8011370:	6878      	ldr	r0, [r7, #4]
 8011372:	f000 f9f7 	bl	8011764 <USBD_CtlError>
        err++;
 8011376:	7afb      	ldrb	r3, [r7, #11]
 8011378:	3301      	adds	r3, #1
 801137a:	72fb      	strb	r3, [r7, #11]
      break;
 801137c:	e007      	b.n	801138e <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 801137e:	6839      	ldr	r1, [r7, #0]
 8011380:	6878      	ldr	r0, [r7, #4]
 8011382:	f000 f9ef 	bl	8011764 <USBD_CtlError>
      err++;
 8011386:	7afb      	ldrb	r3, [r7, #11]
 8011388:	3301      	adds	r3, #1
 801138a:	72fb      	strb	r3, [r7, #11]
      break;
 801138c:	bf00      	nop
  }

  if (err != 0U)
 801138e:	7afb      	ldrb	r3, [r7, #11]
 8011390:	2b00      	cmp	r3, #0
 8011392:	d11e      	bne.n	80113d2 <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 8011394:	683b      	ldr	r3, [r7, #0]
 8011396:	88db      	ldrh	r3, [r3, #6]
 8011398:	2b00      	cmp	r3, #0
 801139a:	d016      	beq.n	80113ca <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 801139c:	893b      	ldrh	r3, [r7, #8]
 801139e:	2b00      	cmp	r3, #0
 80113a0:	d00e      	beq.n	80113c0 <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 80113a2:	683b      	ldr	r3, [r7, #0]
 80113a4:	88da      	ldrh	r2, [r3, #6]
 80113a6:	893b      	ldrh	r3, [r7, #8]
 80113a8:	4293      	cmp	r3, r2
 80113aa:	bf28      	it	cs
 80113ac:	4613      	movcs	r3, r2
 80113ae:	b29b      	uxth	r3, r3
 80113b0:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 80113b2:	893b      	ldrh	r3, [r7, #8]
 80113b4:	461a      	mov	r2, r3
 80113b6:	68f9      	ldr	r1, [r7, #12]
 80113b8:	6878      	ldr	r0, [r7, #4]
 80113ba:	f000 fa44 	bl	8011846 <USBD_CtlSendData>
 80113be:	e009      	b.n	80113d4 <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 80113c0:	6839      	ldr	r1, [r7, #0]
 80113c2:	6878      	ldr	r0, [r7, #4]
 80113c4:	f000 f9ce 	bl	8011764 <USBD_CtlError>
 80113c8:	e004      	b.n	80113d4 <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 80113ca:	6878      	ldr	r0, [r7, #4]
 80113cc:	f000 fa95 	bl	80118fa <USBD_CtlSendStatus>
 80113d0:	e000      	b.n	80113d4 <USBD_GetDescriptor+0x2cc>
    return;
 80113d2:	bf00      	nop
  }
}
 80113d4:	3710      	adds	r7, #16
 80113d6:	46bd      	mov	sp, r7
 80113d8:	bd80      	pop	{r7, pc}
 80113da:	bf00      	nop

080113dc <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80113dc:	b580      	push	{r7, lr}
 80113de:	b084      	sub	sp, #16
 80113e0:	af00      	add	r7, sp, #0
 80113e2:	6078      	str	r0, [r7, #4]
 80113e4:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 80113e6:	683b      	ldr	r3, [r7, #0]
 80113e8:	889b      	ldrh	r3, [r3, #4]
 80113ea:	2b00      	cmp	r3, #0
 80113ec:	d131      	bne.n	8011452 <USBD_SetAddress+0x76>
 80113ee:	683b      	ldr	r3, [r7, #0]
 80113f0:	88db      	ldrh	r3, [r3, #6]
 80113f2:	2b00      	cmp	r3, #0
 80113f4:	d12d      	bne.n	8011452 <USBD_SetAddress+0x76>
 80113f6:	683b      	ldr	r3, [r7, #0]
 80113f8:	885b      	ldrh	r3, [r3, #2]
 80113fa:	2b7f      	cmp	r3, #127	; 0x7f
 80113fc:	d829      	bhi.n	8011452 <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 80113fe:	683b      	ldr	r3, [r7, #0]
 8011400:	885b      	ldrh	r3, [r3, #2]
 8011402:	b2db      	uxtb	r3, r3
 8011404:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8011408:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 801140a:	687b      	ldr	r3, [r7, #4]
 801140c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8011410:	b2db      	uxtb	r3, r3
 8011412:	2b03      	cmp	r3, #3
 8011414:	d104      	bne.n	8011420 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 8011416:	6839      	ldr	r1, [r7, #0]
 8011418:	6878      	ldr	r0, [r7, #4]
 801141a:	f000 f9a3 	bl	8011764 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 801141e:	e01d      	b.n	801145c <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8011420:	687b      	ldr	r3, [r7, #4]
 8011422:	7bfa      	ldrb	r2, [r7, #15]
 8011424:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 8011428:	7bfb      	ldrb	r3, [r7, #15]
 801142a:	4619      	mov	r1, r3
 801142c:	6878      	ldr	r0, [r7, #4]
 801142e:	f000 fec9 	bl	80121c4 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 8011432:	6878      	ldr	r0, [r7, #4]
 8011434:	f000 fa61 	bl	80118fa <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8011438:	7bfb      	ldrb	r3, [r7, #15]
 801143a:	2b00      	cmp	r3, #0
 801143c:	d004      	beq.n	8011448 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 801143e:	687b      	ldr	r3, [r7, #4]
 8011440:	2202      	movs	r2, #2
 8011442:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8011446:	e009      	b.n	801145c <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8011448:	687b      	ldr	r3, [r7, #4]
 801144a:	2201      	movs	r2, #1
 801144c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8011450:	e004      	b.n	801145c <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8011452:	6839      	ldr	r1, [r7, #0]
 8011454:	6878      	ldr	r0, [r7, #4]
 8011456:	f000 f985 	bl	8011764 <USBD_CtlError>
  }
}
 801145a:	bf00      	nop
 801145c:	bf00      	nop
 801145e:	3710      	adds	r7, #16
 8011460:	46bd      	mov	sp, r7
 8011462:	bd80      	pop	{r7, pc}

08011464 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8011464:	b580      	push	{r7, lr}
 8011466:	b084      	sub	sp, #16
 8011468:	af00      	add	r7, sp, #0
 801146a:	6078      	str	r0, [r7, #4]
 801146c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 801146e:	2300      	movs	r3, #0
 8011470:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8011472:	683b      	ldr	r3, [r7, #0]
 8011474:	885b      	ldrh	r3, [r3, #2]
 8011476:	b2da      	uxtb	r2, r3
 8011478:	4b4c      	ldr	r3, [pc, #304]	; (80115ac <USBD_SetConfig+0x148>)
 801147a:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 801147c:	4b4b      	ldr	r3, [pc, #300]	; (80115ac <USBD_SetConfig+0x148>)
 801147e:	781b      	ldrb	r3, [r3, #0]
 8011480:	2b01      	cmp	r3, #1
 8011482:	d905      	bls.n	8011490 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 8011484:	6839      	ldr	r1, [r7, #0]
 8011486:	6878      	ldr	r0, [r7, #4]
 8011488:	f000 f96c 	bl	8011764 <USBD_CtlError>
    return USBD_FAIL;
 801148c:	2303      	movs	r3, #3
 801148e:	e088      	b.n	80115a2 <USBD_SetConfig+0x13e>
  }

  switch (pdev->dev_state)
 8011490:	687b      	ldr	r3, [r7, #4]
 8011492:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8011496:	b2db      	uxtb	r3, r3
 8011498:	2b02      	cmp	r3, #2
 801149a:	d002      	beq.n	80114a2 <USBD_SetConfig+0x3e>
 801149c:	2b03      	cmp	r3, #3
 801149e:	d025      	beq.n	80114ec <USBD_SetConfig+0x88>
 80114a0:	e071      	b.n	8011586 <USBD_SetConfig+0x122>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 80114a2:	4b42      	ldr	r3, [pc, #264]	; (80115ac <USBD_SetConfig+0x148>)
 80114a4:	781b      	ldrb	r3, [r3, #0]
 80114a6:	2b00      	cmp	r3, #0
 80114a8:	d01c      	beq.n	80114e4 <USBD_SetConfig+0x80>
      {
        pdev->dev_config = cfgidx;
 80114aa:	4b40      	ldr	r3, [pc, #256]	; (80115ac <USBD_SetConfig+0x148>)
 80114ac:	781b      	ldrb	r3, [r3, #0]
 80114ae:	461a      	mov	r2, r3
 80114b0:	687b      	ldr	r3, [r7, #4]
 80114b2:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 80114b4:	4b3d      	ldr	r3, [pc, #244]	; (80115ac <USBD_SetConfig+0x148>)
 80114b6:	781b      	ldrb	r3, [r3, #0]
 80114b8:	4619      	mov	r1, r3
 80114ba:	6878      	ldr	r0, [r7, #4]
 80114bc:	f7ff f949 	bl	8010752 <USBD_SetClassConfig>
 80114c0:	4603      	mov	r3, r0
 80114c2:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 80114c4:	7bfb      	ldrb	r3, [r7, #15]
 80114c6:	2b00      	cmp	r3, #0
 80114c8:	d004      	beq.n	80114d4 <USBD_SetConfig+0x70>
        {
          USBD_CtlError(pdev, req);
 80114ca:	6839      	ldr	r1, [r7, #0]
 80114cc:	6878      	ldr	r0, [r7, #4]
 80114ce:	f000 f949 	bl	8011764 <USBD_CtlError>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 80114d2:	e065      	b.n	80115a0 <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 80114d4:	6878      	ldr	r0, [r7, #4]
 80114d6:	f000 fa10 	bl	80118fa <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 80114da:	687b      	ldr	r3, [r7, #4]
 80114dc:	2203      	movs	r2, #3
 80114de:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 80114e2:	e05d      	b.n	80115a0 <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 80114e4:	6878      	ldr	r0, [r7, #4]
 80114e6:	f000 fa08 	bl	80118fa <USBD_CtlSendStatus>
      break;
 80114ea:	e059      	b.n	80115a0 <USBD_SetConfig+0x13c>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 80114ec:	4b2f      	ldr	r3, [pc, #188]	; (80115ac <USBD_SetConfig+0x148>)
 80114ee:	781b      	ldrb	r3, [r3, #0]
 80114f0:	2b00      	cmp	r3, #0
 80114f2:	d112      	bne.n	801151a <USBD_SetConfig+0xb6>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 80114f4:	687b      	ldr	r3, [r7, #4]
 80114f6:	2202      	movs	r2, #2
 80114f8:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 80114fc:	4b2b      	ldr	r3, [pc, #172]	; (80115ac <USBD_SetConfig+0x148>)
 80114fe:	781b      	ldrb	r3, [r3, #0]
 8011500:	461a      	mov	r2, r3
 8011502:	687b      	ldr	r3, [r7, #4]
 8011504:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 8011506:	4b29      	ldr	r3, [pc, #164]	; (80115ac <USBD_SetConfig+0x148>)
 8011508:	781b      	ldrb	r3, [r3, #0]
 801150a:	4619      	mov	r1, r3
 801150c:	6878      	ldr	r0, [r7, #4]
 801150e:	f7ff f93c 	bl	801078a <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 8011512:	6878      	ldr	r0, [r7, #4]
 8011514:	f000 f9f1 	bl	80118fa <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8011518:	e042      	b.n	80115a0 <USBD_SetConfig+0x13c>
      else if (cfgidx != pdev->dev_config)
 801151a:	4b24      	ldr	r3, [pc, #144]	; (80115ac <USBD_SetConfig+0x148>)
 801151c:	781b      	ldrb	r3, [r3, #0]
 801151e:	461a      	mov	r2, r3
 8011520:	687b      	ldr	r3, [r7, #4]
 8011522:	685b      	ldr	r3, [r3, #4]
 8011524:	429a      	cmp	r2, r3
 8011526:	d02a      	beq.n	801157e <USBD_SetConfig+0x11a>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8011528:	687b      	ldr	r3, [r7, #4]
 801152a:	685b      	ldr	r3, [r3, #4]
 801152c:	b2db      	uxtb	r3, r3
 801152e:	4619      	mov	r1, r3
 8011530:	6878      	ldr	r0, [r7, #4]
 8011532:	f7ff f92a 	bl	801078a <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 8011536:	4b1d      	ldr	r3, [pc, #116]	; (80115ac <USBD_SetConfig+0x148>)
 8011538:	781b      	ldrb	r3, [r3, #0]
 801153a:	461a      	mov	r2, r3
 801153c:	687b      	ldr	r3, [r7, #4]
 801153e:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 8011540:	4b1a      	ldr	r3, [pc, #104]	; (80115ac <USBD_SetConfig+0x148>)
 8011542:	781b      	ldrb	r3, [r3, #0]
 8011544:	4619      	mov	r1, r3
 8011546:	6878      	ldr	r0, [r7, #4]
 8011548:	f7ff f903 	bl	8010752 <USBD_SetClassConfig>
 801154c:	4603      	mov	r3, r0
 801154e:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 8011550:	7bfb      	ldrb	r3, [r7, #15]
 8011552:	2b00      	cmp	r3, #0
 8011554:	d00f      	beq.n	8011576 <USBD_SetConfig+0x112>
          USBD_CtlError(pdev, req);
 8011556:	6839      	ldr	r1, [r7, #0]
 8011558:	6878      	ldr	r0, [r7, #4]
 801155a:	f000 f903 	bl	8011764 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 801155e:	687b      	ldr	r3, [r7, #4]
 8011560:	685b      	ldr	r3, [r3, #4]
 8011562:	b2db      	uxtb	r3, r3
 8011564:	4619      	mov	r1, r3
 8011566:	6878      	ldr	r0, [r7, #4]
 8011568:	f7ff f90f 	bl	801078a <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 801156c:	687b      	ldr	r3, [r7, #4]
 801156e:	2202      	movs	r2, #2
 8011570:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 8011574:	e014      	b.n	80115a0 <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 8011576:	6878      	ldr	r0, [r7, #4]
 8011578:	f000 f9bf 	bl	80118fa <USBD_CtlSendStatus>
      break;
 801157c:	e010      	b.n	80115a0 <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 801157e:	6878      	ldr	r0, [r7, #4]
 8011580:	f000 f9bb 	bl	80118fa <USBD_CtlSendStatus>
      break;
 8011584:	e00c      	b.n	80115a0 <USBD_SetConfig+0x13c>

    default:
      USBD_CtlError(pdev, req);
 8011586:	6839      	ldr	r1, [r7, #0]
 8011588:	6878      	ldr	r0, [r7, #4]
 801158a:	f000 f8eb 	bl	8011764 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 801158e:	4b07      	ldr	r3, [pc, #28]	; (80115ac <USBD_SetConfig+0x148>)
 8011590:	781b      	ldrb	r3, [r3, #0]
 8011592:	4619      	mov	r1, r3
 8011594:	6878      	ldr	r0, [r7, #4]
 8011596:	f7ff f8f8 	bl	801078a <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 801159a:	2303      	movs	r3, #3
 801159c:	73fb      	strb	r3, [r7, #15]
      break;
 801159e:	bf00      	nop
  }

  return ret;
 80115a0:	7bfb      	ldrb	r3, [r7, #15]
}
 80115a2:	4618      	mov	r0, r3
 80115a4:	3710      	adds	r7, #16
 80115a6:	46bd      	mov	sp, r7
 80115a8:	bd80      	pop	{r7, pc}
 80115aa:	bf00      	nop
 80115ac:	2400093c 	.word	0x2400093c

080115b0 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80115b0:	b580      	push	{r7, lr}
 80115b2:	b082      	sub	sp, #8
 80115b4:	af00      	add	r7, sp, #0
 80115b6:	6078      	str	r0, [r7, #4]
 80115b8:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 80115ba:	683b      	ldr	r3, [r7, #0]
 80115bc:	88db      	ldrh	r3, [r3, #6]
 80115be:	2b01      	cmp	r3, #1
 80115c0:	d004      	beq.n	80115cc <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 80115c2:	6839      	ldr	r1, [r7, #0]
 80115c4:	6878      	ldr	r0, [r7, #4]
 80115c6:	f000 f8cd 	bl	8011764 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 80115ca:	e023      	b.n	8011614 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 80115cc:	687b      	ldr	r3, [r7, #4]
 80115ce:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80115d2:	b2db      	uxtb	r3, r3
 80115d4:	2b02      	cmp	r3, #2
 80115d6:	dc02      	bgt.n	80115de <USBD_GetConfig+0x2e>
 80115d8:	2b00      	cmp	r3, #0
 80115da:	dc03      	bgt.n	80115e4 <USBD_GetConfig+0x34>
 80115dc:	e015      	b.n	801160a <USBD_GetConfig+0x5a>
 80115de:	2b03      	cmp	r3, #3
 80115e0:	d00b      	beq.n	80115fa <USBD_GetConfig+0x4a>
 80115e2:	e012      	b.n	801160a <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 80115e4:	687b      	ldr	r3, [r7, #4]
 80115e6:	2200      	movs	r2, #0
 80115e8:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 80115ea:	687b      	ldr	r3, [r7, #4]
 80115ec:	3308      	adds	r3, #8
 80115ee:	2201      	movs	r2, #1
 80115f0:	4619      	mov	r1, r3
 80115f2:	6878      	ldr	r0, [r7, #4]
 80115f4:	f000 f927 	bl	8011846 <USBD_CtlSendData>
        break;
 80115f8:	e00c      	b.n	8011614 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 80115fa:	687b      	ldr	r3, [r7, #4]
 80115fc:	3304      	adds	r3, #4
 80115fe:	2201      	movs	r2, #1
 8011600:	4619      	mov	r1, r3
 8011602:	6878      	ldr	r0, [r7, #4]
 8011604:	f000 f91f 	bl	8011846 <USBD_CtlSendData>
        break;
 8011608:	e004      	b.n	8011614 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 801160a:	6839      	ldr	r1, [r7, #0]
 801160c:	6878      	ldr	r0, [r7, #4]
 801160e:	f000 f8a9 	bl	8011764 <USBD_CtlError>
        break;
 8011612:	bf00      	nop
}
 8011614:	bf00      	nop
 8011616:	3708      	adds	r7, #8
 8011618:	46bd      	mov	sp, r7
 801161a:	bd80      	pop	{r7, pc}

0801161c <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 801161c:	b580      	push	{r7, lr}
 801161e:	b082      	sub	sp, #8
 8011620:	af00      	add	r7, sp, #0
 8011622:	6078      	str	r0, [r7, #4]
 8011624:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8011626:	687b      	ldr	r3, [r7, #4]
 8011628:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 801162c:	b2db      	uxtb	r3, r3
 801162e:	3b01      	subs	r3, #1
 8011630:	2b02      	cmp	r3, #2
 8011632:	d81e      	bhi.n	8011672 <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8011634:	683b      	ldr	r3, [r7, #0]
 8011636:	88db      	ldrh	r3, [r3, #6]
 8011638:	2b02      	cmp	r3, #2
 801163a:	d004      	beq.n	8011646 <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 801163c:	6839      	ldr	r1, [r7, #0]
 801163e:	6878      	ldr	r0, [r7, #4]
 8011640:	f000 f890 	bl	8011764 <USBD_CtlError>
        break;
 8011644:	e01a      	b.n	801167c <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8011646:	687b      	ldr	r3, [r7, #4]
 8011648:	2201      	movs	r2, #1
 801164a:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup != 0U)
 801164c:	687b      	ldr	r3, [r7, #4]
 801164e:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 8011652:	2b00      	cmp	r3, #0
 8011654:	d005      	beq.n	8011662 <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8011656:	687b      	ldr	r3, [r7, #4]
 8011658:	68db      	ldr	r3, [r3, #12]
 801165a:	f043 0202 	orr.w	r2, r3, #2
 801165e:	687b      	ldr	r3, [r7, #4]
 8011660:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 8011662:	687b      	ldr	r3, [r7, #4]
 8011664:	330c      	adds	r3, #12
 8011666:	2202      	movs	r2, #2
 8011668:	4619      	mov	r1, r3
 801166a:	6878      	ldr	r0, [r7, #4]
 801166c:	f000 f8eb 	bl	8011846 <USBD_CtlSendData>
      break;
 8011670:	e004      	b.n	801167c <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 8011672:	6839      	ldr	r1, [r7, #0]
 8011674:	6878      	ldr	r0, [r7, #4]
 8011676:	f000 f875 	bl	8011764 <USBD_CtlError>
      break;
 801167a:	bf00      	nop
  }
}
 801167c:	bf00      	nop
 801167e:	3708      	adds	r7, #8
 8011680:	46bd      	mov	sp, r7
 8011682:	bd80      	pop	{r7, pc}

08011684 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8011684:	b580      	push	{r7, lr}
 8011686:	b082      	sub	sp, #8
 8011688:	af00      	add	r7, sp, #0
 801168a:	6078      	str	r0, [r7, #4]
 801168c:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 801168e:	683b      	ldr	r3, [r7, #0]
 8011690:	885b      	ldrh	r3, [r3, #2]
 8011692:	2b01      	cmp	r3, #1
 8011694:	d106      	bne.n	80116a4 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 8011696:	687b      	ldr	r3, [r7, #4]
 8011698:	2201      	movs	r2, #1
 801169a:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 801169e:	6878      	ldr	r0, [r7, #4]
 80116a0:	f000 f92b 	bl	80118fa <USBD_CtlSendStatus>
  }
}
 80116a4:	bf00      	nop
 80116a6:	3708      	adds	r7, #8
 80116a8:	46bd      	mov	sp, r7
 80116aa:	bd80      	pop	{r7, pc}

080116ac <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80116ac:	b580      	push	{r7, lr}
 80116ae:	b082      	sub	sp, #8
 80116b0:	af00      	add	r7, sp, #0
 80116b2:	6078      	str	r0, [r7, #4]
 80116b4:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 80116b6:	687b      	ldr	r3, [r7, #4]
 80116b8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80116bc:	b2db      	uxtb	r3, r3
 80116be:	3b01      	subs	r3, #1
 80116c0:	2b02      	cmp	r3, #2
 80116c2:	d80b      	bhi.n	80116dc <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80116c4:	683b      	ldr	r3, [r7, #0]
 80116c6:	885b      	ldrh	r3, [r3, #2]
 80116c8:	2b01      	cmp	r3, #1
 80116ca:	d10c      	bne.n	80116e6 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 80116cc:	687b      	ldr	r3, [r7, #4]
 80116ce:	2200      	movs	r2, #0
 80116d0:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 80116d4:	6878      	ldr	r0, [r7, #4]
 80116d6:	f000 f910 	bl	80118fa <USBD_CtlSendStatus>
      }
      break;
 80116da:	e004      	b.n	80116e6 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 80116dc:	6839      	ldr	r1, [r7, #0]
 80116de:	6878      	ldr	r0, [r7, #4]
 80116e0:	f000 f840 	bl	8011764 <USBD_CtlError>
      break;
 80116e4:	e000      	b.n	80116e8 <USBD_ClrFeature+0x3c>
      break;
 80116e6:	bf00      	nop
  }
}
 80116e8:	bf00      	nop
 80116ea:	3708      	adds	r7, #8
 80116ec:	46bd      	mov	sp, r7
 80116ee:	bd80      	pop	{r7, pc}

080116f0 <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 80116f0:	b580      	push	{r7, lr}
 80116f2:	b084      	sub	sp, #16
 80116f4:	af00      	add	r7, sp, #0
 80116f6:	6078      	str	r0, [r7, #4]
 80116f8:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 80116fa:	683b      	ldr	r3, [r7, #0]
 80116fc:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 80116fe:	68fb      	ldr	r3, [r7, #12]
 8011700:	781a      	ldrb	r2, [r3, #0]
 8011702:	687b      	ldr	r3, [r7, #4]
 8011704:	701a      	strb	r2, [r3, #0]

  pbuff++;
 8011706:	68fb      	ldr	r3, [r7, #12]
 8011708:	3301      	adds	r3, #1
 801170a:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 801170c:	68fb      	ldr	r3, [r7, #12]
 801170e:	781a      	ldrb	r2, [r3, #0]
 8011710:	687b      	ldr	r3, [r7, #4]
 8011712:	705a      	strb	r2, [r3, #1]

  pbuff++;
 8011714:	68fb      	ldr	r3, [r7, #12]
 8011716:	3301      	adds	r3, #1
 8011718:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 801171a:	68f8      	ldr	r0, [r7, #12]
 801171c:	f7ff fabc 	bl	8010c98 <SWAPBYTE>
 8011720:	4603      	mov	r3, r0
 8011722:	461a      	mov	r2, r3
 8011724:	687b      	ldr	r3, [r7, #4]
 8011726:	805a      	strh	r2, [r3, #2]

  pbuff++;
 8011728:	68fb      	ldr	r3, [r7, #12]
 801172a:	3301      	adds	r3, #1
 801172c:	60fb      	str	r3, [r7, #12]
  pbuff++;
 801172e:	68fb      	ldr	r3, [r7, #12]
 8011730:	3301      	adds	r3, #1
 8011732:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 8011734:	68f8      	ldr	r0, [r7, #12]
 8011736:	f7ff faaf 	bl	8010c98 <SWAPBYTE>
 801173a:	4603      	mov	r3, r0
 801173c:	461a      	mov	r2, r3
 801173e:	687b      	ldr	r3, [r7, #4]
 8011740:	809a      	strh	r2, [r3, #4]

  pbuff++;
 8011742:	68fb      	ldr	r3, [r7, #12]
 8011744:	3301      	adds	r3, #1
 8011746:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8011748:	68fb      	ldr	r3, [r7, #12]
 801174a:	3301      	adds	r3, #1
 801174c:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 801174e:	68f8      	ldr	r0, [r7, #12]
 8011750:	f7ff faa2 	bl	8010c98 <SWAPBYTE>
 8011754:	4603      	mov	r3, r0
 8011756:	461a      	mov	r2, r3
 8011758:	687b      	ldr	r3, [r7, #4]
 801175a:	80da      	strh	r2, [r3, #6]
}
 801175c:	bf00      	nop
 801175e:	3710      	adds	r7, #16
 8011760:	46bd      	mov	sp, r7
 8011762:	bd80      	pop	{r7, pc}

08011764 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8011764:	b580      	push	{r7, lr}
 8011766:	b082      	sub	sp, #8
 8011768:	af00      	add	r7, sp, #0
 801176a:	6078      	str	r0, [r7, #4]
 801176c:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 801176e:	2180      	movs	r1, #128	; 0x80
 8011770:	6878      	ldr	r0, [r7, #4]
 8011772:	f000 fcbd 	bl	80120f0 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8011776:	2100      	movs	r1, #0
 8011778:	6878      	ldr	r0, [r7, #4]
 801177a:	f000 fcb9 	bl	80120f0 <USBD_LL_StallEP>
}
 801177e:	bf00      	nop
 8011780:	3708      	adds	r7, #8
 8011782:	46bd      	mov	sp, r7
 8011784:	bd80      	pop	{r7, pc}

08011786 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8011786:	b580      	push	{r7, lr}
 8011788:	b086      	sub	sp, #24
 801178a:	af00      	add	r7, sp, #0
 801178c:	60f8      	str	r0, [r7, #12]
 801178e:	60b9      	str	r1, [r7, #8]
 8011790:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8011792:	2300      	movs	r3, #0
 8011794:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 8011796:	68fb      	ldr	r3, [r7, #12]
 8011798:	2b00      	cmp	r3, #0
 801179a:	d036      	beq.n	801180a <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 801179c:	68fb      	ldr	r3, [r7, #12]
 801179e:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 80117a0:	6938      	ldr	r0, [r7, #16]
 80117a2:	f000 f836 	bl	8011812 <USBD_GetLen>
 80117a6:	4603      	mov	r3, r0
 80117a8:	3301      	adds	r3, #1
 80117aa:	b29b      	uxth	r3, r3
 80117ac:	005b      	lsls	r3, r3, #1
 80117ae:	b29a      	uxth	r2, r3
 80117b0:	687b      	ldr	r3, [r7, #4]
 80117b2:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 80117b4:	7dfb      	ldrb	r3, [r7, #23]
 80117b6:	68ba      	ldr	r2, [r7, #8]
 80117b8:	4413      	add	r3, r2
 80117ba:	687a      	ldr	r2, [r7, #4]
 80117bc:	7812      	ldrb	r2, [r2, #0]
 80117be:	701a      	strb	r2, [r3, #0]
  idx++;
 80117c0:	7dfb      	ldrb	r3, [r7, #23]
 80117c2:	3301      	adds	r3, #1
 80117c4:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 80117c6:	7dfb      	ldrb	r3, [r7, #23]
 80117c8:	68ba      	ldr	r2, [r7, #8]
 80117ca:	4413      	add	r3, r2
 80117cc:	2203      	movs	r2, #3
 80117ce:	701a      	strb	r2, [r3, #0]
  idx++;
 80117d0:	7dfb      	ldrb	r3, [r7, #23]
 80117d2:	3301      	adds	r3, #1
 80117d4:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 80117d6:	e013      	b.n	8011800 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 80117d8:	7dfb      	ldrb	r3, [r7, #23]
 80117da:	68ba      	ldr	r2, [r7, #8]
 80117dc:	4413      	add	r3, r2
 80117de:	693a      	ldr	r2, [r7, #16]
 80117e0:	7812      	ldrb	r2, [r2, #0]
 80117e2:	701a      	strb	r2, [r3, #0]
    pdesc++;
 80117e4:	693b      	ldr	r3, [r7, #16]
 80117e6:	3301      	adds	r3, #1
 80117e8:	613b      	str	r3, [r7, #16]
    idx++;
 80117ea:	7dfb      	ldrb	r3, [r7, #23]
 80117ec:	3301      	adds	r3, #1
 80117ee:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 80117f0:	7dfb      	ldrb	r3, [r7, #23]
 80117f2:	68ba      	ldr	r2, [r7, #8]
 80117f4:	4413      	add	r3, r2
 80117f6:	2200      	movs	r2, #0
 80117f8:	701a      	strb	r2, [r3, #0]
    idx++;
 80117fa:	7dfb      	ldrb	r3, [r7, #23]
 80117fc:	3301      	adds	r3, #1
 80117fe:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 8011800:	693b      	ldr	r3, [r7, #16]
 8011802:	781b      	ldrb	r3, [r3, #0]
 8011804:	2b00      	cmp	r3, #0
 8011806:	d1e7      	bne.n	80117d8 <USBD_GetString+0x52>
 8011808:	e000      	b.n	801180c <USBD_GetString+0x86>
    return;
 801180a:	bf00      	nop
  }
}
 801180c:	3718      	adds	r7, #24
 801180e:	46bd      	mov	sp, r7
 8011810:	bd80      	pop	{r7, pc}

08011812 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8011812:	b480      	push	{r7}
 8011814:	b085      	sub	sp, #20
 8011816:	af00      	add	r7, sp, #0
 8011818:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 801181a:	2300      	movs	r3, #0
 801181c:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 801181e:	687b      	ldr	r3, [r7, #4]
 8011820:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 8011822:	e005      	b.n	8011830 <USBD_GetLen+0x1e>
  {
    len++;
 8011824:	7bfb      	ldrb	r3, [r7, #15]
 8011826:	3301      	adds	r3, #1
 8011828:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 801182a:	68bb      	ldr	r3, [r7, #8]
 801182c:	3301      	adds	r3, #1
 801182e:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 8011830:	68bb      	ldr	r3, [r7, #8]
 8011832:	781b      	ldrb	r3, [r3, #0]
 8011834:	2b00      	cmp	r3, #0
 8011836:	d1f5      	bne.n	8011824 <USBD_GetLen+0x12>
  }

  return len;
 8011838:	7bfb      	ldrb	r3, [r7, #15]
}
 801183a:	4618      	mov	r0, r3
 801183c:	3714      	adds	r7, #20
 801183e:	46bd      	mov	sp, r7
 8011840:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011844:	4770      	bx	lr

08011846 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 8011846:	b580      	push	{r7, lr}
 8011848:	b084      	sub	sp, #16
 801184a:	af00      	add	r7, sp, #0
 801184c:	60f8      	str	r0, [r7, #12]
 801184e:	60b9      	str	r1, [r7, #8]
 8011850:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8011852:	68fb      	ldr	r3, [r7, #12]
 8011854:	2202      	movs	r2, #2
 8011856:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 801185a:	68fb      	ldr	r3, [r7, #12]
 801185c:	687a      	ldr	r2, [r7, #4]
 801185e:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 8011860:	68fb      	ldr	r3, [r7, #12]
 8011862:	687a      	ldr	r2, [r7, #4]
 8011864:	61da      	str	r2, [r3, #28]
#endif

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8011866:	687b      	ldr	r3, [r7, #4]
 8011868:	68ba      	ldr	r2, [r7, #8]
 801186a:	2100      	movs	r1, #0
 801186c:	68f8      	ldr	r0, [r7, #12]
 801186e:	f000 fcc8 	bl	8012202 <USBD_LL_Transmit>

  return USBD_OK;
 8011872:	2300      	movs	r3, #0
}
 8011874:	4618      	mov	r0, r3
 8011876:	3710      	adds	r7, #16
 8011878:	46bd      	mov	sp, r7
 801187a:	bd80      	pop	{r7, pc}

0801187c <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 801187c:	b580      	push	{r7, lr}
 801187e:	b084      	sub	sp, #16
 8011880:	af00      	add	r7, sp, #0
 8011882:	60f8      	str	r0, [r7, #12]
 8011884:	60b9      	str	r1, [r7, #8]
 8011886:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8011888:	687b      	ldr	r3, [r7, #4]
 801188a:	68ba      	ldr	r2, [r7, #8]
 801188c:	2100      	movs	r1, #0
 801188e:	68f8      	ldr	r0, [r7, #12]
 8011890:	f000 fcb7 	bl	8012202 <USBD_LL_Transmit>

  return USBD_OK;
 8011894:	2300      	movs	r3, #0
}
 8011896:	4618      	mov	r0, r3
 8011898:	3710      	adds	r7, #16
 801189a:	46bd      	mov	sp, r7
 801189c:	bd80      	pop	{r7, pc}

0801189e <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 801189e:	b580      	push	{r7, lr}
 80118a0:	b084      	sub	sp, #16
 80118a2:	af00      	add	r7, sp, #0
 80118a4:	60f8      	str	r0, [r7, #12]
 80118a6:	60b9      	str	r1, [r7, #8]
 80118a8:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 80118aa:	68fb      	ldr	r3, [r7, #12]
 80118ac:	2203      	movs	r2, #3
 80118ae:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 80118b2:	68fb      	ldr	r3, [r7, #12]
 80118b4:	687a      	ldr	r2, [r7, #4]
 80118b6:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 80118ba:	68fb      	ldr	r3, [r7, #12]
 80118bc:	687a      	ldr	r2, [r7, #4]
 80118be:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 80118c2:	687b      	ldr	r3, [r7, #4]
 80118c4:	68ba      	ldr	r2, [r7, #8]
 80118c6:	2100      	movs	r1, #0
 80118c8:	68f8      	ldr	r0, [r7, #12]
 80118ca:	f000 fcbb 	bl	8012244 <USBD_LL_PrepareReceive>

  return USBD_OK;
 80118ce:	2300      	movs	r3, #0
}
 80118d0:	4618      	mov	r0, r3
 80118d2:	3710      	adds	r7, #16
 80118d4:	46bd      	mov	sp, r7
 80118d6:	bd80      	pop	{r7, pc}

080118d8 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 80118d8:	b580      	push	{r7, lr}
 80118da:	b084      	sub	sp, #16
 80118dc:	af00      	add	r7, sp, #0
 80118de:	60f8      	str	r0, [r7, #12]
 80118e0:	60b9      	str	r1, [r7, #8]
 80118e2:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 80118e4:	687b      	ldr	r3, [r7, #4]
 80118e6:	68ba      	ldr	r2, [r7, #8]
 80118e8:	2100      	movs	r1, #0
 80118ea:	68f8      	ldr	r0, [r7, #12]
 80118ec:	f000 fcaa 	bl	8012244 <USBD_LL_PrepareReceive>

  return USBD_OK;
 80118f0:	2300      	movs	r3, #0
}
 80118f2:	4618      	mov	r0, r3
 80118f4:	3710      	adds	r7, #16
 80118f6:	46bd      	mov	sp, r7
 80118f8:	bd80      	pop	{r7, pc}

080118fa <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 80118fa:	b580      	push	{r7, lr}
 80118fc:	b082      	sub	sp, #8
 80118fe:	af00      	add	r7, sp, #0
 8011900:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8011902:	687b      	ldr	r3, [r7, #4]
 8011904:	2204      	movs	r2, #4
 8011906:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 801190a:	2300      	movs	r3, #0
 801190c:	2200      	movs	r2, #0
 801190e:	2100      	movs	r1, #0
 8011910:	6878      	ldr	r0, [r7, #4]
 8011912:	f000 fc76 	bl	8012202 <USBD_LL_Transmit>

  return USBD_OK;
 8011916:	2300      	movs	r3, #0
}
 8011918:	4618      	mov	r0, r3
 801191a:	3708      	adds	r7, #8
 801191c:	46bd      	mov	sp, r7
 801191e:	bd80      	pop	{r7, pc}

08011920 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8011920:	b580      	push	{r7, lr}
 8011922:	b082      	sub	sp, #8
 8011924:	af00      	add	r7, sp, #0
 8011926:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8011928:	687b      	ldr	r3, [r7, #4]
 801192a:	2205      	movs	r2, #5
 801192c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8011930:	2300      	movs	r3, #0
 8011932:	2200      	movs	r2, #0
 8011934:	2100      	movs	r1, #0
 8011936:	6878      	ldr	r0, [r7, #4]
 8011938:	f000 fc84 	bl	8012244 <USBD_LL_PrepareReceive>

  return USBD_OK;
 801193c:	2300      	movs	r3, #0
}
 801193e:	4618      	mov	r0, r3
 8011940:	3708      	adds	r7, #8
 8011942:	46bd      	mov	sp, r7
 8011944:	bd80      	pop	{r7, pc}
	...

08011948 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 8011948:	b480      	push	{r7}
 801194a:	b087      	sub	sp, #28
 801194c:	af00      	add	r7, sp, #0
 801194e:	60f8      	str	r0, [r7, #12]
 8011950:	60b9      	str	r1, [r7, #8]
 8011952:	4613      	mov	r3, r2
 8011954:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 8011956:	2301      	movs	r3, #1
 8011958:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 801195a:	2300      	movs	r3, #0
 801195c:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 801195e:	4b1f      	ldr	r3, [pc, #124]	; (80119dc <FATFS_LinkDriverEx+0x94>)
 8011960:	7a5b      	ldrb	r3, [r3, #9]
 8011962:	b2db      	uxtb	r3, r3
 8011964:	2b00      	cmp	r3, #0
 8011966:	d131      	bne.n	80119cc <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 8011968:	4b1c      	ldr	r3, [pc, #112]	; (80119dc <FATFS_LinkDriverEx+0x94>)
 801196a:	7a5b      	ldrb	r3, [r3, #9]
 801196c:	b2db      	uxtb	r3, r3
 801196e:	461a      	mov	r2, r3
 8011970:	4b1a      	ldr	r3, [pc, #104]	; (80119dc <FATFS_LinkDriverEx+0x94>)
 8011972:	2100      	movs	r1, #0
 8011974:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 8011976:	4b19      	ldr	r3, [pc, #100]	; (80119dc <FATFS_LinkDriverEx+0x94>)
 8011978:	7a5b      	ldrb	r3, [r3, #9]
 801197a:	b2db      	uxtb	r3, r3
 801197c:	4a17      	ldr	r2, [pc, #92]	; (80119dc <FATFS_LinkDriverEx+0x94>)
 801197e:	009b      	lsls	r3, r3, #2
 8011980:	4413      	add	r3, r2
 8011982:	68fa      	ldr	r2, [r7, #12]
 8011984:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 8011986:	4b15      	ldr	r3, [pc, #84]	; (80119dc <FATFS_LinkDriverEx+0x94>)
 8011988:	7a5b      	ldrb	r3, [r3, #9]
 801198a:	b2db      	uxtb	r3, r3
 801198c:	461a      	mov	r2, r3
 801198e:	4b13      	ldr	r3, [pc, #76]	; (80119dc <FATFS_LinkDriverEx+0x94>)
 8011990:	4413      	add	r3, r2
 8011992:	79fa      	ldrb	r2, [r7, #7]
 8011994:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 8011996:	4b11      	ldr	r3, [pc, #68]	; (80119dc <FATFS_LinkDriverEx+0x94>)
 8011998:	7a5b      	ldrb	r3, [r3, #9]
 801199a:	b2db      	uxtb	r3, r3
 801199c:	1c5a      	adds	r2, r3, #1
 801199e:	b2d1      	uxtb	r1, r2
 80119a0:	4a0e      	ldr	r2, [pc, #56]	; (80119dc <FATFS_LinkDriverEx+0x94>)
 80119a2:	7251      	strb	r1, [r2, #9]
 80119a4:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 80119a6:	7dbb      	ldrb	r3, [r7, #22]
 80119a8:	3330      	adds	r3, #48	; 0x30
 80119aa:	b2da      	uxtb	r2, r3
 80119ac:	68bb      	ldr	r3, [r7, #8]
 80119ae:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 80119b0:	68bb      	ldr	r3, [r7, #8]
 80119b2:	3301      	adds	r3, #1
 80119b4:	223a      	movs	r2, #58	; 0x3a
 80119b6:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 80119b8:	68bb      	ldr	r3, [r7, #8]
 80119ba:	3302      	adds	r3, #2
 80119bc:	222f      	movs	r2, #47	; 0x2f
 80119be:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 80119c0:	68bb      	ldr	r3, [r7, #8]
 80119c2:	3303      	adds	r3, #3
 80119c4:	2200      	movs	r2, #0
 80119c6:	701a      	strb	r2, [r3, #0]
    ret = 0;
 80119c8:	2300      	movs	r3, #0
 80119ca:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 80119cc:	7dfb      	ldrb	r3, [r7, #23]
}
 80119ce:	4618      	mov	r0, r3
 80119d0:	371c      	adds	r7, #28
 80119d2:	46bd      	mov	sp, r7
 80119d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80119d8:	4770      	bx	lr
 80119da:	bf00      	nop
 80119dc:	24000940 	.word	0x24000940

080119e0 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 80119e0:	b580      	push	{r7, lr}
 80119e2:	b082      	sub	sp, #8
 80119e4:	af00      	add	r7, sp, #0
 80119e6:	6078      	str	r0, [r7, #4]
 80119e8:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 80119ea:	2200      	movs	r2, #0
 80119ec:	6839      	ldr	r1, [r7, #0]
 80119ee:	6878      	ldr	r0, [r7, #4]
 80119f0:	f7ff ffaa 	bl	8011948 <FATFS_LinkDriverEx>
 80119f4:	4603      	mov	r3, r0
}
 80119f6:	4618      	mov	r0, r3
 80119f8:	3708      	adds	r7, #8
 80119fa:	46bd      	mov	sp, r7
 80119fc:	bd80      	pop	{r7, pc}
	...

08011a00 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8011a00:	b580      	push	{r7, lr}
 8011a02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8011a04:	2200      	movs	r2, #0
 8011a06:	4913      	ldr	r1, [pc, #76]	; (8011a54 <MX_USB_DEVICE_Init+0x54>)
 8011a08:	4813      	ldr	r0, [pc, #76]	; (8011a58 <MX_USB_DEVICE_Init+0x58>)
 8011a0a:	f7fe fe34 	bl	8010676 <USBD_Init>
 8011a0e:	4603      	mov	r3, r0
 8011a10:	2b00      	cmp	r3, #0
 8011a12:	d001      	beq.n	8011a18 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8011a14:	f7ef ff88 	bl	8001928 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CUSTOM_HID) != USBD_OK)
 8011a18:	4910      	ldr	r1, [pc, #64]	; (8011a5c <MX_USB_DEVICE_Init+0x5c>)
 8011a1a:	480f      	ldr	r0, [pc, #60]	; (8011a58 <MX_USB_DEVICE_Init+0x58>)
 8011a1c:	f7fe fe5b 	bl	80106d6 <USBD_RegisterClass>
 8011a20:	4603      	mov	r3, r0
 8011a22:	2b00      	cmp	r3, #0
 8011a24:	d001      	beq.n	8011a2a <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 8011a26:	f7ef ff7f 	bl	8001928 <Error_Handler>
  }
  if (USBD_CUSTOM_HID_RegisterInterface(&hUsbDeviceFS, &USBD_CustomHID_fops_FS) != USBD_OK)
 8011a2a:	490d      	ldr	r1, [pc, #52]	; (8011a60 <MX_USB_DEVICE_Init+0x60>)
 8011a2c:	480a      	ldr	r0, [pc, #40]	; (8011a58 <MX_USB_DEVICE_Init+0x58>)
 8011a2e:	f7fe fe0d 	bl	801064c <USBD_CUSTOM_HID_RegisterInterface>
 8011a32:	4603      	mov	r3, r0
 8011a34:	2b00      	cmp	r3, #0
 8011a36:	d001      	beq.n	8011a3c <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 8011a38:	f7ef ff76 	bl	8001928 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8011a3c:	4806      	ldr	r0, [pc, #24]	; (8011a58 <MX_USB_DEVICE_Init+0x58>)
 8011a3e:	f7fe fe71 	bl	8010724 <USBD_Start>
 8011a42:	4603      	mov	r3, r0
 8011a44:	2b00      	cmp	r3, #0
 8011a46:	d001      	beq.n	8011a4c <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 8011a48:	f7ef ff6e 	bl	8001928 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */
  HAL_PWREx_EnableUSBVoltageDetector();
 8011a4c:	f7f5 f96a 	bl	8006d24 <HAL_PWREx_EnableUSBVoltageDetector>

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8011a50:	bf00      	nop
 8011a52:	bd80      	pop	{r7, pc}
 8011a54:	240000f8 	.word	0x240000f8
 8011a58:	2400094c 	.word	0x2400094c
 8011a5c:	24000010 	.word	0x24000010
 8011a60:	240000e8 	.word	0x240000e8

08011a64 <CUSTOM_HID_Init_FS>:
/**
  * @brief  Initializes the CUSTOM HID media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CUSTOM_HID_Init_FS(void)
{
 8011a64:	b480      	push	{r7}
 8011a66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 8011a68:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 8011a6a:	4618      	mov	r0, r3
 8011a6c:	46bd      	mov	sp, r7
 8011a6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011a72:	4770      	bx	lr

08011a74 <CUSTOM_HID_DeInit_FS>:
/**
  * @brief  DeInitializes the CUSTOM HID media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CUSTOM_HID_DeInit_FS(void)
{
 8011a74:	b480      	push	{r7}
 8011a76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 5 */
  return (USBD_OK);
 8011a78:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8011a7a:	4618      	mov	r0, r3
 8011a7c:	46bd      	mov	sp, r7
 8011a7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011a82:	4770      	bx	lr

08011a84 <CUSTOM_HID_OutEvent_FS>:
  * @param  event_idx: Event index
  * @param  state: Event state
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CUSTOM_HID_OutEvent_FS(uint8_t event_idx, uint8_t state)
{
 8011a84:	b580      	push	{r7, lr}
 8011a86:	b082      	sub	sp, #8
 8011a88:	af00      	add	r7, sp, #0
 8011a8a:	4603      	mov	r3, r0
 8011a8c:	460a      	mov	r2, r1
 8011a8e:	71fb      	strb	r3, [r7, #7]
 8011a90:	4613      	mov	r3, r2
 8011a92:	71bb      	strb	r3, [r7, #6]
  /* USER CODE BEGIN 6 */
  UNUSED(event_idx);
  UNUSED(state);

  /* Start next USB packet transfer once data processing is completed */
  USBD_CUSTOM_HID_ReceivePacket(&hUsbDeviceFS);
 8011a94:	4803      	ldr	r0, [pc, #12]	; (8011aa4 <CUSTOM_HID_OutEvent_FS+0x20>)
 8011a96:	f7fe fd8b 	bl	80105b0 <USBD_CUSTOM_HID_ReceivePacket>

  return (USBD_OK);
 8011a9a:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 8011a9c:	4618      	mov	r0, r3
 8011a9e:	3708      	adds	r7, #8
 8011aa0:	46bd      	mov	sp, r7
 8011aa2:	bd80      	pop	{r7, pc}
 8011aa4:	2400094c 	.word	0x2400094c

08011aa8 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8011aa8:	b480      	push	{r7}
 8011aaa:	b083      	sub	sp, #12
 8011aac:	af00      	add	r7, sp, #0
 8011aae:	4603      	mov	r3, r0
 8011ab0:	6039      	str	r1, [r7, #0]
 8011ab2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8011ab4:	683b      	ldr	r3, [r7, #0]
 8011ab6:	2212      	movs	r2, #18
 8011ab8:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 8011aba:	4b03      	ldr	r3, [pc, #12]	; (8011ac8 <USBD_FS_DeviceDescriptor+0x20>)
}
 8011abc:	4618      	mov	r0, r3
 8011abe:	370c      	adds	r7, #12
 8011ac0:	46bd      	mov	sp, r7
 8011ac2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011ac6:	4770      	bx	lr
 8011ac8:	24000114 	.word	0x24000114

08011acc <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8011acc:	b480      	push	{r7}
 8011ace:	b083      	sub	sp, #12
 8011ad0:	af00      	add	r7, sp, #0
 8011ad2:	4603      	mov	r3, r0
 8011ad4:	6039      	str	r1, [r7, #0]
 8011ad6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8011ad8:	683b      	ldr	r3, [r7, #0]
 8011ada:	2204      	movs	r2, #4
 8011adc:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8011ade:	4b03      	ldr	r3, [pc, #12]	; (8011aec <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8011ae0:	4618      	mov	r0, r3
 8011ae2:	370c      	adds	r7, #12
 8011ae4:	46bd      	mov	sp, r7
 8011ae6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011aea:	4770      	bx	lr
 8011aec:	24000128 	.word	0x24000128

08011af0 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8011af0:	b580      	push	{r7, lr}
 8011af2:	b082      	sub	sp, #8
 8011af4:	af00      	add	r7, sp, #0
 8011af6:	4603      	mov	r3, r0
 8011af8:	6039      	str	r1, [r7, #0]
 8011afa:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8011afc:	79fb      	ldrb	r3, [r7, #7]
 8011afe:	2b00      	cmp	r3, #0
 8011b00:	d105      	bne.n	8011b0e <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8011b02:	683a      	ldr	r2, [r7, #0]
 8011b04:	4907      	ldr	r1, [pc, #28]	; (8011b24 <USBD_FS_ProductStrDescriptor+0x34>)
 8011b06:	4808      	ldr	r0, [pc, #32]	; (8011b28 <USBD_FS_ProductStrDescriptor+0x38>)
 8011b08:	f7ff fe3d 	bl	8011786 <USBD_GetString>
 8011b0c:	e004      	b.n	8011b18 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8011b0e:	683a      	ldr	r2, [r7, #0]
 8011b10:	4904      	ldr	r1, [pc, #16]	; (8011b24 <USBD_FS_ProductStrDescriptor+0x34>)
 8011b12:	4805      	ldr	r0, [pc, #20]	; (8011b28 <USBD_FS_ProductStrDescriptor+0x38>)
 8011b14:	f7ff fe37 	bl	8011786 <USBD_GetString>
  }
  return USBD_StrDesc;
 8011b18:	4b02      	ldr	r3, [pc, #8]	; (8011b24 <USBD_FS_ProductStrDescriptor+0x34>)
}
 8011b1a:	4618      	mov	r0, r3
 8011b1c:	3708      	adds	r7, #8
 8011b1e:	46bd      	mov	sp, r7
 8011b20:	bd80      	pop	{r7, pc}
 8011b22:	bf00      	nop
 8011b24:	24000c1c 	.word	0x24000c1c
 8011b28:	080166cc 	.word	0x080166cc

08011b2c <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8011b2c:	b580      	push	{r7, lr}
 8011b2e:	b082      	sub	sp, #8
 8011b30:	af00      	add	r7, sp, #0
 8011b32:	4603      	mov	r3, r0
 8011b34:	6039      	str	r1, [r7, #0]
 8011b36:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8011b38:	683a      	ldr	r2, [r7, #0]
 8011b3a:	4904      	ldr	r1, [pc, #16]	; (8011b4c <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8011b3c:	4804      	ldr	r0, [pc, #16]	; (8011b50 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 8011b3e:	f7ff fe22 	bl	8011786 <USBD_GetString>
  return USBD_StrDesc;
 8011b42:	4b02      	ldr	r3, [pc, #8]	; (8011b4c <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8011b44:	4618      	mov	r0, r3
 8011b46:	3708      	adds	r7, #8
 8011b48:	46bd      	mov	sp, r7
 8011b4a:	bd80      	pop	{r7, pc}
 8011b4c:	24000c1c 	.word	0x24000c1c
 8011b50:	080166ec 	.word	0x080166ec

08011b54 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8011b54:	b580      	push	{r7, lr}
 8011b56:	b082      	sub	sp, #8
 8011b58:	af00      	add	r7, sp, #0
 8011b5a:	4603      	mov	r3, r0
 8011b5c:	6039      	str	r1, [r7, #0]
 8011b5e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8011b60:	683b      	ldr	r3, [r7, #0]
 8011b62:	221a      	movs	r2, #26
 8011b64:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8011b66:	f000 f843 	bl	8011bf0 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 8011b6a:	4b02      	ldr	r3, [pc, #8]	; (8011b74 <USBD_FS_SerialStrDescriptor+0x20>)
}
 8011b6c:	4618      	mov	r0, r3
 8011b6e:	3708      	adds	r7, #8
 8011b70:	46bd      	mov	sp, r7
 8011b72:	bd80      	pop	{r7, pc}
 8011b74:	2400012c 	.word	0x2400012c

08011b78 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8011b78:	b580      	push	{r7, lr}
 8011b7a:	b082      	sub	sp, #8
 8011b7c:	af00      	add	r7, sp, #0
 8011b7e:	4603      	mov	r3, r0
 8011b80:	6039      	str	r1, [r7, #0]
 8011b82:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8011b84:	79fb      	ldrb	r3, [r7, #7]
 8011b86:	2b00      	cmp	r3, #0
 8011b88:	d105      	bne.n	8011b96 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8011b8a:	683a      	ldr	r2, [r7, #0]
 8011b8c:	4907      	ldr	r1, [pc, #28]	; (8011bac <USBD_FS_ConfigStrDescriptor+0x34>)
 8011b8e:	4808      	ldr	r0, [pc, #32]	; (8011bb0 <USBD_FS_ConfigStrDescriptor+0x38>)
 8011b90:	f7ff fdf9 	bl	8011786 <USBD_GetString>
 8011b94:	e004      	b.n	8011ba0 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8011b96:	683a      	ldr	r2, [r7, #0]
 8011b98:	4904      	ldr	r1, [pc, #16]	; (8011bac <USBD_FS_ConfigStrDescriptor+0x34>)
 8011b9a:	4805      	ldr	r0, [pc, #20]	; (8011bb0 <USBD_FS_ConfigStrDescriptor+0x38>)
 8011b9c:	f7ff fdf3 	bl	8011786 <USBD_GetString>
  }
  return USBD_StrDesc;
 8011ba0:	4b02      	ldr	r3, [pc, #8]	; (8011bac <USBD_FS_ConfigStrDescriptor+0x34>)
}
 8011ba2:	4618      	mov	r0, r3
 8011ba4:	3708      	adds	r7, #8
 8011ba6:	46bd      	mov	sp, r7
 8011ba8:	bd80      	pop	{r7, pc}
 8011baa:	bf00      	nop
 8011bac:	24000c1c 	.word	0x24000c1c
 8011bb0:	08016700 	.word	0x08016700

08011bb4 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8011bb4:	b580      	push	{r7, lr}
 8011bb6:	b082      	sub	sp, #8
 8011bb8:	af00      	add	r7, sp, #0
 8011bba:	4603      	mov	r3, r0
 8011bbc:	6039      	str	r1, [r7, #0]
 8011bbe:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8011bc0:	79fb      	ldrb	r3, [r7, #7]
 8011bc2:	2b00      	cmp	r3, #0
 8011bc4:	d105      	bne.n	8011bd2 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8011bc6:	683a      	ldr	r2, [r7, #0]
 8011bc8:	4907      	ldr	r1, [pc, #28]	; (8011be8 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8011bca:	4808      	ldr	r0, [pc, #32]	; (8011bec <USBD_FS_InterfaceStrDescriptor+0x38>)
 8011bcc:	f7ff fddb 	bl	8011786 <USBD_GetString>
 8011bd0:	e004      	b.n	8011bdc <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8011bd2:	683a      	ldr	r2, [r7, #0]
 8011bd4:	4904      	ldr	r1, [pc, #16]	; (8011be8 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8011bd6:	4805      	ldr	r0, [pc, #20]	; (8011bec <USBD_FS_InterfaceStrDescriptor+0x38>)
 8011bd8:	f7ff fdd5 	bl	8011786 <USBD_GetString>
  }
  return USBD_StrDesc;
 8011bdc:	4b02      	ldr	r3, [pc, #8]	; (8011be8 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 8011bde:	4618      	mov	r0, r3
 8011be0:	3708      	adds	r7, #8
 8011be2:	46bd      	mov	sp, r7
 8011be4:	bd80      	pop	{r7, pc}
 8011be6:	bf00      	nop
 8011be8:	24000c1c 	.word	0x24000c1c
 8011bec:	08016714 	.word	0x08016714

08011bf0 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8011bf0:	b580      	push	{r7, lr}
 8011bf2:	b084      	sub	sp, #16
 8011bf4:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8011bf6:	4b0f      	ldr	r3, [pc, #60]	; (8011c34 <Get_SerialNum+0x44>)
 8011bf8:	681b      	ldr	r3, [r3, #0]
 8011bfa:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8011bfc:	4b0e      	ldr	r3, [pc, #56]	; (8011c38 <Get_SerialNum+0x48>)
 8011bfe:	681b      	ldr	r3, [r3, #0]
 8011c00:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8011c02:	4b0e      	ldr	r3, [pc, #56]	; (8011c3c <Get_SerialNum+0x4c>)
 8011c04:	681b      	ldr	r3, [r3, #0]
 8011c06:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8011c08:	68fa      	ldr	r2, [r7, #12]
 8011c0a:	687b      	ldr	r3, [r7, #4]
 8011c0c:	4413      	add	r3, r2
 8011c0e:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8011c10:	68fb      	ldr	r3, [r7, #12]
 8011c12:	2b00      	cmp	r3, #0
 8011c14:	d009      	beq.n	8011c2a <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8011c16:	2208      	movs	r2, #8
 8011c18:	4909      	ldr	r1, [pc, #36]	; (8011c40 <Get_SerialNum+0x50>)
 8011c1a:	68f8      	ldr	r0, [r7, #12]
 8011c1c:	f000 f814 	bl	8011c48 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8011c20:	2204      	movs	r2, #4
 8011c22:	4908      	ldr	r1, [pc, #32]	; (8011c44 <Get_SerialNum+0x54>)
 8011c24:	68b8      	ldr	r0, [r7, #8]
 8011c26:	f000 f80f 	bl	8011c48 <IntToUnicode>
  }
}
 8011c2a:	bf00      	nop
 8011c2c:	3710      	adds	r7, #16
 8011c2e:	46bd      	mov	sp, r7
 8011c30:	bd80      	pop	{r7, pc}
 8011c32:	bf00      	nop
 8011c34:	1ff1e800 	.word	0x1ff1e800
 8011c38:	1ff1e804 	.word	0x1ff1e804
 8011c3c:	1ff1e808 	.word	0x1ff1e808
 8011c40:	2400012e 	.word	0x2400012e
 8011c44:	2400013e 	.word	0x2400013e

08011c48 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8011c48:	b480      	push	{r7}
 8011c4a:	b087      	sub	sp, #28
 8011c4c:	af00      	add	r7, sp, #0
 8011c4e:	60f8      	str	r0, [r7, #12]
 8011c50:	60b9      	str	r1, [r7, #8]
 8011c52:	4613      	mov	r3, r2
 8011c54:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8011c56:	2300      	movs	r3, #0
 8011c58:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8011c5a:	2300      	movs	r3, #0
 8011c5c:	75fb      	strb	r3, [r7, #23]
 8011c5e:	e027      	b.n	8011cb0 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8011c60:	68fb      	ldr	r3, [r7, #12]
 8011c62:	0f1b      	lsrs	r3, r3, #28
 8011c64:	2b09      	cmp	r3, #9
 8011c66:	d80b      	bhi.n	8011c80 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8011c68:	68fb      	ldr	r3, [r7, #12]
 8011c6a:	0f1b      	lsrs	r3, r3, #28
 8011c6c:	b2da      	uxtb	r2, r3
 8011c6e:	7dfb      	ldrb	r3, [r7, #23]
 8011c70:	005b      	lsls	r3, r3, #1
 8011c72:	4619      	mov	r1, r3
 8011c74:	68bb      	ldr	r3, [r7, #8]
 8011c76:	440b      	add	r3, r1
 8011c78:	3230      	adds	r2, #48	; 0x30
 8011c7a:	b2d2      	uxtb	r2, r2
 8011c7c:	701a      	strb	r2, [r3, #0]
 8011c7e:	e00a      	b.n	8011c96 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8011c80:	68fb      	ldr	r3, [r7, #12]
 8011c82:	0f1b      	lsrs	r3, r3, #28
 8011c84:	b2da      	uxtb	r2, r3
 8011c86:	7dfb      	ldrb	r3, [r7, #23]
 8011c88:	005b      	lsls	r3, r3, #1
 8011c8a:	4619      	mov	r1, r3
 8011c8c:	68bb      	ldr	r3, [r7, #8]
 8011c8e:	440b      	add	r3, r1
 8011c90:	3237      	adds	r2, #55	; 0x37
 8011c92:	b2d2      	uxtb	r2, r2
 8011c94:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8011c96:	68fb      	ldr	r3, [r7, #12]
 8011c98:	011b      	lsls	r3, r3, #4
 8011c9a:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8011c9c:	7dfb      	ldrb	r3, [r7, #23]
 8011c9e:	005b      	lsls	r3, r3, #1
 8011ca0:	3301      	adds	r3, #1
 8011ca2:	68ba      	ldr	r2, [r7, #8]
 8011ca4:	4413      	add	r3, r2
 8011ca6:	2200      	movs	r2, #0
 8011ca8:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8011caa:	7dfb      	ldrb	r3, [r7, #23]
 8011cac:	3301      	adds	r3, #1
 8011cae:	75fb      	strb	r3, [r7, #23]
 8011cb0:	7dfa      	ldrb	r2, [r7, #23]
 8011cb2:	79fb      	ldrb	r3, [r7, #7]
 8011cb4:	429a      	cmp	r2, r3
 8011cb6:	d3d3      	bcc.n	8011c60 <IntToUnicode+0x18>
  }
}
 8011cb8:	bf00      	nop
 8011cba:	bf00      	nop
 8011cbc:	371c      	adds	r7, #28
 8011cbe:	46bd      	mov	sp, r7
 8011cc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011cc4:	4770      	bx	lr
	...

08011cc8 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8011cc8:	b580      	push	{r7, lr}
 8011cca:	b0b8      	sub	sp, #224	; 0xe0
 8011ccc:	af00      	add	r7, sp, #0
 8011cce:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8011cd0:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8011cd4:	2200      	movs	r2, #0
 8011cd6:	601a      	str	r2, [r3, #0]
 8011cd8:	605a      	str	r2, [r3, #4]
 8011cda:	609a      	str	r2, [r3, #8]
 8011cdc:	60da      	str	r2, [r3, #12]
 8011cde:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8011ce0:	f107 0310 	add.w	r3, r7, #16
 8011ce4:	22bc      	movs	r2, #188	; 0xbc
 8011ce6:	2100      	movs	r1, #0
 8011ce8:	4618      	mov	r0, r3
 8011cea:	f001 fe6d 	bl	80139c8 <memset>
  if(pcdHandle->Instance==USB_OTG_FS)
 8011cee:	687b      	ldr	r3, [r7, #4]
 8011cf0:	681b      	ldr	r3, [r3, #0]
 8011cf2:	4a2b      	ldr	r2, [pc, #172]	; (8011da0 <HAL_PCD_MspInit+0xd8>)
 8011cf4:	4293      	cmp	r3, r2
 8011cf6:	d14e      	bne.n	8011d96 <HAL_PCD_MspInit+0xce>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USB;
 8011cf8:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8011cfc:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_HSI48;
 8011cfe:	f44f 1340 	mov.w	r3, #3145728	; 0x300000
 8011d02:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8011d06:	f107 0310 	add.w	r3, r7, #16
 8011d0a:	4618      	mov	r0, r3
 8011d0c:	f7f5 ffb4 	bl	8007c78 <HAL_RCCEx_PeriphCLKConfig>
 8011d10:	4603      	mov	r3, r0
 8011d12:	2b00      	cmp	r3, #0
 8011d14:	d001      	beq.n	8011d1a <HAL_PCD_MspInit+0x52>
    {
      Error_Handler();
 8011d16:	f7ef fe07 	bl	8001928 <Error_Handler>
    }
  /** Enable USB Voltage detector
  */
    HAL_PWREx_EnableUSBVoltageDetector();
 8011d1a:	f7f5 f803 	bl	8006d24 <HAL_PWREx_EnableUSBVoltageDetector>

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8011d1e:	4b21      	ldr	r3, [pc, #132]	; (8011da4 <HAL_PCD_MspInit+0xdc>)
 8011d20:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8011d24:	4a1f      	ldr	r2, [pc, #124]	; (8011da4 <HAL_PCD_MspInit+0xdc>)
 8011d26:	f043 0301 	orr.w	r3, r3, #1
 8011d2a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8011d2e:	4b1d      	ldr	r3, [pc, #116]	; (8011da4 <HAL_PCD_MspInit+0xdc>)
 8011d30:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8011d34:	f003 0301 	and.w	r3, r3, #1
 8011d38:	60fb      	str	r3, [r7, #12]
 8011d3a:	68fb      	ldr	r3, [r7, #12]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8011d3c:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8011d40:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8011d44:	2302      	movs	r3, #2
 8011d46:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8011d4a:	2300      	movs	r3, #0
 8011d4c:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8011d50:	2300      	movs	r3, #0
 8011d52:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_FS;
 8011d56:	230a      	movs	r3, #10
 8011d58:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8011d5c:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8011d60:	4619      	mov	r1, r3
 8011d62:	4811      	ldr	r0, [pc, #68]	; (8011da8 <HAL_PCD_MspInit+0xe0>)
 8011d64:	f7f2 fdec 	bl	8004940 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8011d68:	4b0e      	ldr	r3, [pc, #56]	; (8011da4 <HAL_PCD_MspInit+0xdc>)
 8011d6a:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8011d6e:	4a0d      	ldr	r2, [pc, #52]	; (8011da4 <HAL_PCD_MspInit+0xdc>)
 8011d70:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8011d74:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8011d78:	4b0a      	ldr	r3, [pc, #40]	; (8011da4 <HAL_PCD_MspInit+0xdc>)
 8011d7a:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8011d7e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8011d82:	60bb      	str	r3, [r7, #8]
 8011d84:	68bb      	ldr	r3, [r7, #8]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 8011d86:	2200      	movs	r2, #0
 8011d88:	2100      	movs	r1, #0
 8011d8a:	2065      	movs	r0, #101	; 0x65
 8011d8c:	f7f1 fcc7 	bl	800371e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8011d90:	2065      	movs	r0, #101	; 0x65
 8011d92:	f7f1 fcde 	bl	8003752 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8011d96:	bf00      	nop
 8011d98:	37e0      	adds	r7, #224	; 0xe0
 8011d9a:	46bd      	mov	sp, r7
 8011d9c:	bd80      	pop	{r7, pc}
 8011d9e:	bf00      	nop
 8011da0:	40080000 	.word	0x40080000
 8011da4:	58024400 	.word	0x58024400
 8011da8:	58020000 	.word	0x58020000

08011dac <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8011dac:	b580      	push	{r7, lr}
 8011dae:	b082      	sub	sp, #8
 8011db0:	af00      	add	r7, sp, #0
 8011db2:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8011db4:	687b      	ldr	r3, [r7, #4]
 8011db6:	f8d3 2404 	ldr.w	r2, [r3, #1028]	; 0x404
 8011dba:	687b      	ldr	r3, [r7, #4]
 8011dbc:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8011dc0:	4619      	mov	r1, r3
 8011dc2:	4610      	mov	r0, r2
 8011dc4:	f7fe fcf9 	bl	80107ba <USBD_LL_SetupStage>
}
 8011dc8:	bf00      	nop
 8011dca:	3708      	adds	r7, #8
 8011dcc:	46bd      	mov	sp, r7
 8011dce:	bd80      	pop	{r7, pc}

08011dd0 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8011dd0:	b580      	push	{r7, lr}
 8011dd2:	b082      	sub	sp, #8
 8011dd4:	af00      	add	r7, sp, #0
 8011dd6:	6078      	str	r0, [r7, #4]
 8011dd8:	460b      	mov	r3, r1
 8011dda:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8011ddc:	687b      	ldr	r3, [r7, #4]
 8011dde:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 8011de2:	78fa      	ldrb	r2, [r7, #3]
 8011de4:	6879      	ldr	r1, [r7, #4]
 8011de6:	4613      	mov	r3, r2
 8011de8:	00db      	lsls	r3, r3, #3
 8011dea:	1a9b      	subs	r3, r3, r2
 8011dec:	009b      	lsls	r3, r3, #2
 8011dee:	440b      	add	r3, r1
 8011df0:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8011df4:	681a      	ldr	r2, [r3, #0]
 8011df6:	78fb      	ldrb	r3, [r7, #3]
 8011df8:	4619      	mov	r1, r3
 8011dfa:	f7fe fd33 	bl	8010864 <USBD_LL_DataOutStage>
}
 8011dfe:	bf00      	nop
 8011e00:	3708      	adds	r7, #8
 8011e02:	46bd      	mov	sp, r7
 8011e04:	bd80      	pop	{r7, pc}

08011e06 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8011e06:	b580      	push	{r7, lr}
 8011e08:	b082      	sub	sp, #8
 8011e0a:	af00      	add	r7, sp, #0
 8011e0c:	6078      	str	r0, [r7, #4]
 8011e0e:	460b      	mov	r3, r1
 8011e10:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8011e12:	687b      	ldr	r3, [r7, #4]
 8011e14:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 8011e18:	78fa      	ldrb	r2, [r7, #3]
 8011e1a:	6879      	ldr	r1, [r7, #4]
 8011e1c:	4613      	mov	r3, r2
 8011e1e:	00db      	lsls	r3, r3, #3
 8011e20:	1a9b      	subs	r3, r3, r2
 8011e22:	009b      	lsls	r3, r3, #2
 8011e24:	440b      	add	r3, r1
 8011e26:	3348      	adds	r3, #72	; 0x48
 8011e28:	681a      	ldr	r2, [r3, #0]
 8011e2a:	78fb      	ldrb	r3, [r7, #3]
 8011e2c:	4619      	mov	r1, r3
 8011e2e:	f7fe fd7c 	bl	801092a <USBD_LL_DataInStage>
}
 8011e32:	bf00      	nop
 8011e34:	3708      	adds	r7, #8
 8011e36:	46bd      	mov	sp, r7
 8011e38:	bd80      	pop	{r7, pc}

08011e3a <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8011e3a:	b580      	push	{r7, lr}
 8011e3c:	b082      	sub	sp, #8
 8011e3e:	af00      	add	r7, sp, #0
 8011e40:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8011e42:	687b      	ldr	r3, [r7, #4]
 8011e44:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8011e48:	4618      	mov	r0, r3
 8011e4a:	f7fe fe90 	bl	8010b6e <USBD_LL_SOF>
}
 8011e4e:	bf00      	nop
 8011e50:	3708      	adds	r7, #8
 8011e52:	46bd      	mov	sp, r7
 8011e54:	bd80      	pop	{r7, pc}

08011e56 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8011e56:	b580      	push	{r7, lr}
 8011e58:	b084      	sub	sp, #16
 8011e5a:	af00      	add	r7, sp, #0
 8011e5c:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8011e5e:	2301      	movs	r3, #1
 8011e60:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 8011e62:	687b      	ldr	r3, [r7, #4]
 8011e64:	68db      	ldr	r3, [r3, #12]
 8011e66:	2b00      	cmp	r3, #0
 8011e68:	d102      	bne.n	8011e70 <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 8011e6a:	2300      	movs	r3, #0
 8011e6c:	73fb      	strb	r3, [r7, #15]
 8011e6e:	e008      	b.n	8011e82 <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 8011e70:	687b      	ldr	r3, [r7, #4]
 8011e72:	68db      	ldr	r3, [r3, #12]
 8011e74:	2b02      	cmp	r3, #2
 8011e76:	d102      	bne.n	8011e7e <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 8011e78:	2301      	movs	r3, #1
 8011e7a:	73fb      	strb	r3, [r7, #15]
 8011e7c:	e001      	b.n	8011e82 <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 8011e7e:	f7ef fd53 	bl	8001928 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8011e82:	687b      	ldr	r3, [r7, #4]
 8011e84:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8011e88:	7bfa      	ldrb	r2, [r7, #15]
 8011e8a:	4611      	mov	r1, r2
 8011e8c:	4618      	mov	r0, r3
 8011e8e:	f7fe fe30 	bl	8010af2 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8011e92:	687b      	ldr	r3, [r7, #4]
 8011e94:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8011e98:	4618      	mov	r0, r3
 8011e9a:	f7fe fddc 	bl	8010a56 <USBD_LL_Reset>
}
 8011e9e:	bf00      	nop
 8011ea0:	3710      	adds	r7, #16
 8011ea2:	46bd      	mov	sp, r7
 8011ea4:	bd80      	pop	{r7, pc}
	...

08011ea8 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8011ea8:	b580      	push	{r7, lr}
 8011eaa:	b082      	sub	sp, #8
 8011eac:	af00      	add	r7, sp, #0
 8011eae:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8011eb0:	687b      	ldr	r3, [r7, #4]
 8011eb2:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8011eb6:	4618      	mov	r0, r3
 8011eb8:	f7fe fe2b 	bl	8010b12 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8011ebc:	687b      	ldr	r3, [r7, #4]
 8011ebe:	681b      	ldr	r3, [r3, #0]
 8011ec0:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8011ec4:	681b      	ldr	r3, [r3, #0]
 8011ec6:	687a      	ldr	r2, [r7, #4]
 8011ec8:	6812      	ldr	r2, [r2, #0]
 8011eca:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8011ece:	f043 0301 	orr.w	r3, r3, #1
 8011ed2:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8011ed4:	687b      	ldr	r3, [r7, #4]
 8011ed6:	6a1b      	ldr	r3, [r3, #32]
 8011ed8:	2b00      	cmp	r3, #0
 8011eda:	d005      	beq.n	8011ee8 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8011edc:	4b04      	ldr	r3, [pc, #16]	; (8011ef0 <HAL_PCD_SuspendCallback+0x48>)
 8011ede:	691b      	ldr	r3, [r3, #16]
 8011ee0:	4a03      	ldr	r2, [pc, #12]	; (8011ef0 <HAL_PCD_SuspendCallback+0x48>)
 8011ee2:	f043 0306 	orr.w	r3, r3, #6
 8011ee6:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8011ee8:	bf00      	nop
 8011eea:	3708      	adds	r7, #8
 8011eec:	46bd      	mov	sp, r7
 8011eee:	bd80      	pop	{r7, pc}
 8011ef0:	e000ed00 	.word	0xe000ed00

08011ef4 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8011ef4:	b580      	push	{r7, lr}
 8011ef6:	b082      	sub	sp, #8
 8011ef8:	af00      	add	r7, sp, #0
 8011efa:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8011efc:	687b      	ldr	r3, [r7, #4]
 8011efe:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8011f02:	4618      	mov	r0, r3
 8011f04:	f7fe fe1b 	bl	8010b3e <USBD_LL_Resume>
}
 8011f08:	bf00      	nop
 8011f0a:	3708      	adds	r7, #8
 8011f0c:	46bd      	mov	sp, r7
 8011f0e:	bd80      	pop	{r7, pc}

08011f10 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8011f10:	b580      	push	{r7, lr}
 8011f12:	b082      	sub	sp, #8
 8011f14:	af00      	add	r7, sp, #0
 8011f16:	6078      	str	r0, [r7, #4]
 8011f18:	460b      	mov	r3, r1
 8011f1a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8011f1c:	687b      	ldr	r3, [r7, #4]
 8011f1e:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8011f22:	78fa      	ldrb	r2, [r7, #3]
 8011f24:	4611      	mov	r1, r2
 8011f26:	4618      	mov	r0, r3
 8011f28:	f7fe fe69 	bl	8010bfe <USBD_LL_IsoOUTIncomplete>
}
 8011f2c:	bf00      	nop
 8011f2e:	3708      	adds	r7, #8
 8011f30:	46bd      	mov	sp, r7
 8011f32:	bd80      	pop	{r7, pc}

08011f34 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8011f34:	b580      	push	{r7, lr}
 8011f36:	b082      	sub	sp, #8
 8011f38:	af00      	add	r7, sp, #0
 8011f3a:	6078      	str	r0, [r7, #4]
 8011f3c:	460b      	mov	r3, r1
 8011f3e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8011f40:	687b      	ldr	r3, [r7, #4]
 8011f42:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8011f46:	78fa      	ldrb	r2, [r7, #3]
 8011f48:	4611      	mov	r1, r2
 8011f4a:	4618      	mov	r0, r3
 8011f4c:	f7fe fe31 	bl	8010bb2 <USBD_LL_IsoINIncomplete>
}
 8011f50:	bf00      	nop
 8011f52:	3708      	adds	r7, #8
 8011f54:	46bd      	mov	sp, r7
 8011f56:	bd80      	pop	{r7, pc}

08011f58 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8011f58:	b580      	push	{r7, lr}
 8011f5a:	b082      	sub	sp, #8
 8011f5c:	af00      	add	r7, sp, #0
 8011f5e:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 8011f60:	687b      	ldr	r3, [r7, #4]
 8011f62:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8011f66:	4618      	mov	r0, r3
 8011f68:	f7fe fe6f 	bl	8010c4a <USBD_LL_DevConnected>
}
 8011f6c:	bf00      	nop
 8011f6e:	3708      	adds	r7, #8
 8011f70:	46bd      	mov	sp, r7
 8011f72:	bd80      	pop	{r7, pc}

08011f74 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8011f74:	b580      	push	{r7, lr}
 8011f76:	b082      	sub	sp, #8
 8011f78:	af00      	add	r7, sp, #0
 8011f7a:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 8011f7c:	687b      	ldr	r3, [r7, #4]
 8011f7e:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8011f82:	4618      	mov	r0, r3
 8011f84:	f7fe fe6c 	bl	8010c60 <USBD_LL_DevDisconnected>
}
 8011f88:	bf00      	nop
 8011f8a:	3708      	adds	r7, #8
 8011f8c:	46bd      	mov	sp, r7
 8011f8e:	bd80      	pop	{r7, pc}

08011f90 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8011f90:	b580      	push	{r7, lr}
 8011f92:	b082      	sub	sp, #8
 8011f94:	af00      	add	r7, sp, #0
 8011f96:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 8011f98:	687b      	ldr	r3, [r7, #4]
 8011f9a:	781b      	ldrb	r3, [r3, #0]
 8011f9c:	2b00      	cmp	r3, #0
 8011f9e:	d13e      	bne.n	801201e <USBD_LL_Init+0x8e>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 8011fa0:	4a21      	ldr	r2, [pc, #132]	; (8012028 <USBD_LL_Init+0x98>)
 8011fa2:	687b      	ldr	r3, [r7, #4]
 8011fa4:	f8c2 3404 	str.w	r3, [r2, #1028]	; 0x404
  pdev->pData = &hpcd_USB_OTG_FS;
 8011fa8:	687b      	ldr	r3, [r7, #4]
 8011faa:	4a1f      	ldr	r2, [pc, #124]	; (8012028 <USBD_LL_Init+0x98>)
 8011fac:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8011fb0:	4b1d      	ldr	r3, [pc, #116]	; (8012028 <USBD_LL_Init+0x98>)
 8011fb2:	4a1e      	ldr	r2, [pc, #120]	; (801202c <USBD_LL_Init+0x9c>)
 8011fb4:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 9;
 8011fb6:	4b1c      	ldr	r3, [pc, #112]	; (8012028 <USBD_LL_Init+0x98>)
 8011fb8:	2209      	movs	r2, #9
 8011fba:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8011fbc:	4b1a      	ldr	r3, [pc, #104]	; (8012028 <USBD_LL_Init+0x98>)
 8011fbe:	2202      	movs	r2, #2
 8011fc0:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8011fc2:	4b19      	ldr	r3, [pc, #100]	; (8012028 <USBD_LL_Init+0x98>)
 8011fc4:	2200      	movs	r2, #0
 8011fc6:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8011fc8:	4b17      	ldr	r3, [pc, #92]	; (8012028 <USBD_LL_Init+0x98>)
 8011fca:	2202      	movs	r2, #2
 8011fcc:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 8011fce:	4b16      	ldr	r3, [pc, #88]	; (8012028 <USBD_LL_Init+0x98>)
 8011fd0:	2201      	movs	r2, #1
 8011fd2:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8011fd4:	4b14      	ldr	r3, [pc, #80]	; (8012028 <USBD_LL_Init+0x98>)
 8011fd6:	2200      	movs	r2, #0
 8011fd8:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8011fda:	4b13      	ldr	r3, [pc, #76]	; (8012028 <USBD_LL_Init+0x98>)
 8011fdc:	2200      	movs	r2, #0
 8011fde:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.battery_charging_enable = DISABLE;
 8011fe0:	4b11      	ldr	r3, [pc, #68]	; (8012028 <USBD_LL_Init+0x98>)
 8011fe2:	2200      	movs	r2, #0
 8011fe4:	629a      	str	r2, [r3, #40]	; 0x28
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 8011fe6:	4b10      	ldr	r3, [pc, #64]	; (8012028 <USBD_LL_Init+0x98>)
 8011fe8:	2200      	movs	r2, #0
 8011fea:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8011fec:	4b0e      	ldr	r3, [pc, #56]	; (8012028 <USBD_LL_Init+0x98>)
 8011fee:	2200      	movs	r2, #0
 8011ff0:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8011ff2:	480d      	ldr	r0, [pc, #52]	; (8012028 <USBD_LL_Init+0x98>)
 8011ff4:	f7f3 fc98 	bl	8005928 <HAL_PCD_Init>
 8011ff8:	4603      	mov	r3, r0
 8011ffa:	2b00      	cmp	r3, #0
 8011ffc:	d001      	beq.n	8012002 <USBD_LL_Init+0x72>
  {
    Error_Handler( );
 8011ffe:	f7ef fc93 	bl	8001928 <Error_Handler>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN TxRx_Configuration */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 8012002:	2180      	movs	r1, #128	; 0x80
 8012004:	4808      	ldr	r0, [pc, #32]	; (8012028 <USBD_LL_Init+0x98>)
 8012006:	f7f4 fe12 	bl	8006c2e <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 801200a:	2240      	movs	r2, #64	; 0x40
 801200c:	2100      	movs	r1, #0
 801200e:	4806      	ldr	r0, [pc, #24]	; (8012028 <USBD_LL_Init+0x98>)
 8012010:	f7f4 fdc6 	bl	8006ba0 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 8012014:	2280      	movs	r2, #128	; 0x80
 8012016:	2101      	movs	r1, #1
 8012018:	4803      	ldr	r0, [pc, #12]	; (8012028 <USBD_LL_Init+0x98>)
 801201a:	f7f4 fdc1 	bl	8006ba0 <HAL_PCDEx_SetTxFiFo>
  /* USER CODE END TxRx_Configuration */
  }
  return USBD_OK;
 801201e:	2300      	movs	r3, #0
}
 8012020:	4618      	mov	r0, r3
 8012022:	3708      	adds	r7, #8
 8012024:	46bd      	mov	sp, r7
 8012026:	bd80      	pop	{r7, pc}
 8012028:	24000e1c 	.word	0x24000e1c
 801202c:	40080000 	.word	0x40080000

08012030 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8012030:	b580      	push	{r7, lr}
 8012032:	b084      	sub	sp, #16
 8012034:	af00      	add	r7, sp, #0
 8012036:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8012038:	2300      	movs	r3, #0
 801203a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801203c:	2300      	movs	r3, #0
 801203e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 8012040:	687b      	ldr	r3, [r7, #4]
 8012042:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8012046:	4618      	mov	r0, r3
 8012048:	f7f3 fd92 	bl	8005b70 <HAL_PCD_Start>
 801204c:	4603      	mov	r3, r0
 801204e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8012050:	7bfb      	ldrb	r3, [r7, #15]
 8012052:	4618      	mov	r0, r3
 8012054:	f000 f930 	bl	80122b8 <USBD_Get_USB_Status>
 8012058:	4603      	mov	r3, r0
 801205a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 801205c:	7bbb      	ldrb	r3, [r7, #14]
}
 801205e:	4618      	mov	r0, r3
 8012060:	3710      	adds	r7, #16
 8012062:	46bd      	mov	sp, r7
 8012064:	bd80      	pop	{r7, pc}

08012066 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8012066:	b580      	push	{r7, lr}
 8012068:	b084      	sub	sp, #16
 801206a:	af00      	add	r7, sp, #0
 801206c:	6078      	str	r0, [r7, #4]
 801206e:	4608      	mov	r0, r1
 8012070:	4611      	mov	r1, r2
 8012072:	461a      	mov	r2, r3
 8012074:	4603      	mov	r3, r0
 8012076:	70fb      	strb	r3, [r7, #3]
 8012078:	460b      	mov	r3, r1
 801207a:	70bb      	strb	r3, [r7, #2]
 801207c:	4613      	mov	r3, r2
 801207e:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8012080:	2300      	movs	r3, #0
 8012082:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8012084:	2300      	movs	r3, #0
 8012086:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8012088:	687b      	ldr	r3, [r7, #4]
 801208a:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 801208e:	78bb      	ldrb	r3, [r7, #2]
 8012090:	883a      	ldrh	r2, [r7, #0]
 8012092:	78f9      	ldrb	r1, [r7, #3]
 8012094:	f7f4 f9a3 	bl	80063de <HAL_PCD_EP_Open>
 8012098:	4603      	mov	r3, r0
 801209a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801209c:	7bfb      	ldrb	r3, [r7, #15]
 801209e:	4618      	mov	r0, r3
 80120a0:	f000 f90a 	bl	80122b8 <USBD_Get_USB_Status>
 80120a4:	4603      	mov	r3, r0
 80120a6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80120a8:	7bbb      	ldrb	r3, [r7, #14]
}
 80120aa:	4618      	mov	r0, r3
 80120ac:	3710      	adds	r7, #16
 80120ae:	46bd      	mov	sp, r7
 80120b0:	bd80      	pop	{r7, pc}

080120b2 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80120b2:	b580      	push	{r7, lr}
 80120b4:	b084      	sub	sp, #16
 80120b6:	af00      	add	r7, sp, #0
 80120b8:	6078      	str	r0, [r7, #4]
 80120ba:	460b      	mov	r3, r1
 80120bc:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80120be:	2300      	movs	r3, #0
 80120c0:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80120c2:	2300      	movs	r3, #0
 80120c4:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 80120c6:	687b      	ldr	r3, [r7, #4]
 80120c8:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 80120cc:	78fa      	ldrb	r2, [r7, #3]
 80120ce:	4611      	mov	r1, r2
 80120d0:	4618      	mov	r0, r3
 80120d2:	f7f4 f9ec 	bl	80064ae <HAL_PCD_EP_Close>
 80120d6:	4603      	mov	r3, r0
 80120d8:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80120da:	7bfb      	ldrb	r3, [r7, #15]
 80120dc:	4618      	mov	r0, r3
 80120de:	f000 f8eb 	bl	80122b8 <USBD_Get_USB_Status>
 80120e2:	4603      	mov	r3, r0
 80120e4:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80120e6:	7bbb      	ldrb	r3, [r7, #14]
}
 80120e8:	4618      	mov	r0, r3
 80120ea:	3710      	adds	r7, #16
 80120ec:	46bd      	mov	sp, r7
 80120ee:	bd80      	pop	{r7, pc}

080120f0 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80120f0:	b580      	push	{r7, lr}
 80120f2:	b084      	sub	sp, #16
 80120f4:	af00      	add	r7, sp, #0
 80120f6:	6078      	str	r0, [r7, #4]
 80120f8:	460b      	mov	r3, r1
 80120fa:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80120fc:	2300      	movs	r3, #0
 80120fe:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8012100:	2300      	movs	r3, #0
 8012102:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8012104:	687b      	ldr	r3, [r7, #4]
 8012106:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 801210a:	78fa      	ldrb	r2, [r7, #3]
 801210c:	4611      	mov	r1, r2
 801210e:	4618      	mov	r0, r3
 8012110:	f7f4 faac 	bl	800666c <HAL_PCD_EP_SetStall>
 8012114:	4603      	mov	r3, r0
 8012116:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8012118:	7bfb      	ldrb	r3, [r7, #15]
 801211a:	4618      	mov	r0, r3
 801211c:	f000 f8cc 	bl	80122b8 <USBD_Get_USB_Status>
 8012120:	4603      	mov	r3, r0
 8012122:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8012124:	7bbb      	ldrb	r3, [r7, #14]
}
 8012126:	4618      	mov	r0, r3
 8012128:	3710      	adds	r7, #16
 801212a:	46bd      	mov	sp, r7
 801212c:	bd80      	pop	{r7, pc}

0801212e <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 801212e:	b580      	push	{r7, lr}
 8012130:	b084      	sub	sp, #16
 8012132:	af00      	add	r7, sp, #0
 8012134:	6078      	str	r0, [r7, #4]
 8012136:	460b      	mov	r3, r1
 8012138:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801213a:	2300      	movs	r3, #0
 801213c:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801213e:	2300      	movs	r3, #0
 8012140:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8012142:	687b      	ldr	r3, [r7, #4]
 8012144:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8012148:	78fa      	ldrb	r2, [r7, #3]
 801214a:	4611      	mov	r1, r2
 801214c:	4618      	mov	r0, r3
 801214e:	f7f4 faf1 	bl	8006734 <HAL_PCD_EP_ClrStall>
 8012152:	4603      	mov	r3, r0
 8012154:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8012156:	7bfb      	ldrb	r3, [r7, #15]
 8012158:	4618      	mov	r0, r3
 801215a:	f000 f8ad 	bl	80122b8 <USBD_Get_USB_Status>
 801215e:	4603      	mov	r3, r0
 8012160:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8012162:	7bbb      	ldrb	r3, [r7, #14]
}
 8012164:	4618      	mov	r0, r3
 8012166:	3710      	adds	r7, #16
 8012168:	46bd      	mov	sp, r7
 801216a:	bd80      	pop	{r7, pc}

0801216c <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 801216c:	b480      	push	{r7}
 801216e:	b085      	sub	sp, #20
 8012170:	af00      	add	r7, sp, #0
 8012172:	6078      	str	r0, [r7, #4]
 8012174:	460b      	mov	r3, r1
 8012176:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8012178:	687b      	ldr	r3, [r7, #4]
 801217a:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 801217e:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8012180:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8012184:	2b00      	cmp	r3, #0
 8012186:	da0b      	bge.n	80121a0 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8012188:	78fb      	ldrb	r3, [r7, #3]
 801218a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 801218e:	68f9      	ldr	r1, [r7, #12]
 8012190:	4613      	mov	r3, r2
 8012192:	00db      	lsls	r3, r3, #3
 8012194:	1a9b      	subs	r3, r3, r2
 8012196:	009b      	lsls	r3, r3, #2
 8012198:	440b      	add	r3, r1
 801219a:	333e      	adds	r3, #62	; 0x3e
 801219c:	781b      	ldrb	r3, [r3, #0]
 801219e:	e00b      	b.n	80121b8 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 80121a0:	78fb      	ldrb	r3, [r7, #3]
 80121a2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80121a6:	68f9      	ldr	r1, [r7, #12]
 80121a8:	4613      	mov	r3, r2
 80121aa:	00db      	lsls	r3, r3, #3
 80121ac:	1a9b      	subs	r3, r3, r2
 80121ae:	009b      	lsls	r3, r3, #2
 80121b0:	440b      	add	r3, r1
 80121b2:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 80121b6:	781b      	ldrb	r3, [r3, #0]
  }
}
 80121b8:	4618      	mov	r0, r3
 80121ba:	3714      	adds	r7, #20
 80121bc:	46bd      	mov	sp, r7
 80121be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80121c2:	4770      	bx	lr

080121c4 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 80121c4:	b580      	push	{r7, lr}
 80121c6:	b084      	sub	sp, #16
 80121c8:	af00      	add	r7, sp, #0
 80121ca:	6078      	str	r0, [r7, #4]
 80121cc:	460b      	mov	r3, r1
 80121ce:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80121d0:	2300      	movs	r3, #0
 80121d2:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80121d4:	2300      	movs	r3, #0
 80121d6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 80121d8:	687b      	ldr	r3, [r7, #4]
 80121da:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 80121de:	78fa      	ldrb	r2, [r7, #3]
 80121e0:	4611      	mov	r1, r2
 80121e2:	4618      	mov	r0, r3
 80121e4:	f7f4 f8d6 	bl	8006394 <HAL_PCD_SetAddress>
 80121e8:	4603      	mov	r3, r0
 80121ea:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80121ec:	7bfb      	ldrb	r3, [r7, #15]
 80121ee:	4618      	mov	r0, r3
 80121f0:	f000 f862 	bl	80122b8 <USBD_Get_USB_Status>
 80121f4:	4603      	mov	r3, r0
 80121f6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80121f8:	7bbb      	ldrb	r3, [r7, #14]
}
 80121fa:	4618      	mov	r0, r3
 80121fc:	3710      	adds	r7, #16
 80121fe:	46bd      	mov	sp, r7
 8012200:	bd80      	pop	{r7, pc}

08012202 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8012202:	b580      	push	{r7, lr}
 8012204:	b086      	sub	sp, #24
 8012206:	af00      	add	r7, sp, #0
 8012208:	60f8      	str	r0, [r7, #12]
 801220a:	607a      	str	r2, [r7, #4]
 801220c:	603b      	str	r3, [r7, #0]
 801220e:	460b      	mov	r3, r1
 8012210:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8012212:	2300      	movs	r3, #0
 8012214:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8012216:	2300      	movs	r3, #0
 8012218:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 801221a:	68fb      	ldr	r3, [r7, #12]
 801221c:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8012220:	7af9      	ldrb	r1, [r7, #11]
 8012222:	683b      	ldr	r3, [r7, #0]
 8012224:	687a      	ldr	r2, [r7, #4]
 8012226:	f7f4 f9d7 	bl	80065d8 <HAL_PCD_EP_Transmit>
 801222a:	4603      	mov	r3, r0
 801222c:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801222e:	7dfb      	ldrb	r3, [r7, #23]
 8012230:	4618      	mov	r0, r3
 8012232:	f000 f841 	bl	80122b8 <USBD_Get_USB_Status>
 8012236:	4603      	mov	r3, r0
 8012238:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 801223a:	7dbb      	ldrb	r3, [r7, #22]
}
 801223c:	4618      	mov	r0, r3
 801223e:	3718      	adds	r7, #24
 8012240:	46bd      	mov	sp, r7
 8012242:	bd80      	pop	{r7, pc}

08012244 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8012244:	b580      	push	{r7, lr}
 8012246:	b086      	sub	sp, #24
 8012248:	af00      	add	r7, sp, #0
 801224a:	60f8      	str	r0, [r7, #12]
 801224c:	607a      	str	r2, [r7, #4]
 801224e:	603b      	str	r3, [r7, #0]
 8012250:	460b      	mov	r3, r1
 8012252:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8012254:	2300      	movs	r3, #0
 8012256:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8012258:	2300      	movs	r3, #0
 801225a:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 801225c:	68fb      	ldr	r3, [r7, #12]
 801225e:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8012262:	7af9      	ldrb	r1, [r7, #11]
 8012264:	683b      	ldr	r3, [r7, #0]
 8012266:	687a      	ldr	r2, [r7, #4]
 8012268:	f7f4 f96b 	bl	8006542 <HAL_PCD_EP_Receive>
 801226c:	4603      	mov	r3, r0
 801226e:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8012270:	7dfb      	ldrb	r3, [r7, #23]
 8012272:	4618      	mov	r0, r3
 8012274:	f000 f820 	bl	80122b8 <USBD_Get_USB_Status>
 8012278:	4603      	mov	r3, r0
 801227a:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 801227c:	7dbb      	ldrb	r3, [r7, #22]
}
 801227e:	4618      	mov	r0, r3
 8012280:	3718      	adds	r7, #24
 8012282:	46bd      	mov	sp, r7
 8012284:	bd80      	pop	{r7, pc}
	...

08012288 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 8012288:	b480      	push	{r7}
 801228a:	b083      	sub	sp, #12
 801228c:	af00      	add	r7, sp, #0
 801228e:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CUSTOM_HID_HandleTypeDef)/4+1)];/* On 32-bit boundary */
  return mem;
 8012290:	4b03      	ldr	r3, [pc, #12]	; (80122a0 <USBD_static_malloc+0x18>)
}
 8012292:	4618      	mov	r0, r3
 8012294:	370c      	adds	r7, #12
 8012296:	46bd      	mov	sp, r7
 8012298:	f85d 7b04 	ldr.w	r7, [sp], #4
 801229c:	4770      	bx	lr
 801229e:	bf00      	nop
 80122a0:	24001224 	.word	0x24001224

080122a4 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 80122a4:	b480      	push	{r7}
 80122a6:	b083      	sub	sp, #12
 80122a8:	af00      	add	r7, sp, #0
 80122aa:	6078      	str	r0, [r7, #4]

}
 80122ac:	bf00      	nop
 80122ae:	370c      	adds	r7, #12
 80122b0:	46bd      	mov	sp, r7
 80122b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80122b6:	4770      	bx	lr

080122b8 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 80122b8:	b480      	push	{r7}
 80122ba:	b085      	sub	sp, #20
 80122bc:	af00      	add	r7, sp, #0
 80122be:	4603      	mov	r3, r0
 80122c0:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80122c2:	2300      	movs	r3, #0
 80122c4:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 80122c6:	79fb      	ldrb	r3, [r7, #7]
 80122c8:	2b03      	cmp	r3, #3
 80122ca:	d817      	bhi.n	80122fc <USBD_Get_USB_Status+0x44>
 80122cc:	a201      	add	r2, pc, #4	; (adr r2, 80122d4 <USBD_Get_USB_Status+0x1c>)
 80122ce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80122d2:	bf00      	nop
 80122d4:	080122e5 	.word	0x080122e5
 80122d8:	080122eb 	.word	0x080122eb
 80122dc:	080122f1 	.word	0x080122f1
 80122e0:	080122f7 	.word	0x080122f7
  {
    case HAL_OK :
      usb_status = USBD_OK;
 80122e4:	2300      	movs	r3, #0
 80122e6:	73fb      	strb	r3, [r7, #15]
    break;
 80122e8:	e00b      	b.n	8012302 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 80122ea:	2303      	movs	r3, #3
 80122ec:	73fb      	strb	r3, [r7, #15]
    break;
 80122ee:	e008      	b.n	8012302 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 80122f0:	2301      	movs	r3, #1
 80122f2:	73fb      	strb	r3, [r7, #15]
    break;
 80122f4:	e005      	b.n	8012302 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 80122f6:	2303      	movs	r3, #3
 80122f8:	73fb      	strb	r3, [r7, #15]
    break;
 80122fa:	e002      	b.n	8012302 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 80122fc:	2303      	movs	r3, #3
 80122fe:	73fb      	strb	r3, [r7, #15]
    break;
 8012300:	bf00      	nop
  }
  return usb_status;
 8012302:	7bfb      	ldrb	r3, [r7, #15]
}
 8012304:	4618      	mov	r0, r3
 8012306:	3714      	adds	r7, #20
 8012308:	46bd      	mov	sp, r7
 801230a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801230e:	4770      	bx	lr

08012310 <CORE_Delay>:

#include "common/processor.h"

#include <string.h>

void CORE_Delay(uint32_t ms) {
 8012310:	b580      	push	{r7, lr}
 8012312:	b082      	sub	sp, #8
 8012314:	af00      	add	r7, sp, #0
 8012316:	6078      	str	r0, [r7, #4]
    HAL_Delay(ms);
 8012318:	6878      	ldr	r0, [r7, #4]
 801231a:	f7f0 f855 	bl	80023c8 <HAL_Delay>
}
 801231e:	bf00      	nop
 8012320:	3708      	adds	r7, #8
 8012322:	46bd      	mov	sp, r7
 8012324:	bd80      	pop	{r7, pc}
	...

08012328 <LOG_SetDestination>:
#include <stdarg.h>
#include <stdio.h>

static LOG_Stream_t m_stream;

void LOG_SetDestination(LOG_Stream_t stream) {
 8012328:	b480      	push	{r7}
 801232a:	b083      	sub	sp, #12
 801232c:	af00      	add	r7, sp, #0
 801232e:	6078      	str	r0, [r7, #4]
	m_stream = stream;
 8012330:	4a04      	ldr	r2, [pc, #16]	; (8012344 <LOG_SetDestination+0x1c>)
 8012332:	687b      	ldr	r3, [r7, #4]
 8012334:	6013      	str	r3, [r2, #0]
}
 8012336:	bf00      	nop
 8012338:	370c      	adds	r7, #12
 801233a:	46bd      	mov	sp, r7
 801233c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012340:	4770      	bx	lr
 8012342:	bf00      	nop
 8012344:	24001240 	.word	0x24001240

08012348 <LOG_VPrint>:
LOG_Stream_t LOG_GetDestination(void) {
	return m_stream;
}


static void LOG_VPrint(bool new_line, const char *fmt, va_list args) {
 8012348:	b580      	push	{r7, lr}
 801234a:	f5ad 7d06 	sub.w	sp, sp, #536	; 0x218
 801234e:	af00      	add	r7, sp, #0
 8012350:	f507 7306 	add.w	r3, r7, #536	; 0x218
 8012354:	f5a3 7304 	sub.w	r3, r3, #528	; 0x210
 8012358:	6019      	str	r1, [r3, #0]
 801235a:	f507 7306 	add.w	r3, r7, #536	; 0x218
 801235e:	f5a3 7305 	sub.w	r3, r3, #532	; 0x214
 8012362:	601a      	str	r2, [r3, #0]
 8012364:	f507 7306 	add.w	r3, r7, #536	; 0x218
 8012368:	f2a3 2309 	subw	r3, r3, #521	; 0x209
 801236c:	4602      	mov	r2, r0
 801236e:	701a      	strb	r2, [r3, #0]
	if (m_stream == NULL) return;
 8012370:	4b12      	ldr	r3, [pc, #72]	; (80123bc <LOG_VPrint+0x74>)
 8012372:	681b      	ldr	r3, [r3, #0]
 8012374:	2b00      	cmp	r3, #0
 8012376:	d01b      	beq.n	80123b0 <LOG_VPrint+0x68>

	char buffer[LOGGER_MAX_CHARACTERS + 1];
	vsnprintf(buffer, LOGGER_MAX_CHARACTERS, fmt, args);
 8012378:	f507 7306 	add.w	r3, r7, #536	; 0x218
 801237c:	f5a3 7305 	sub.w	r3, r3, #532	; 0x214
 8012380:	f507 7206 	add.w	r2, r7, #536	; 0x218
 8012384:	f5a2 7204 	sub.w	r2, r2, #528	; 0x210
 8012388:	f107 0014 	add.w	r0, r7, #20
 801238c:	681b      	ldr	r3, [r3, #0]
 801238e:	6812      	ldr	r2, [r2, #0]
 8012390:	f44f 7100 	mov.w	r1, #512	; 0x200
 8012394:	f001 ff8e 	bl	80142b4 <vsniprintf>
	m_stream(buffer, new_line);
 8012398:	4b08      	ldr	r3, [pc, #32]	; (80123bc <LOG_VPrint+0x74>)
 801239a:	681b      	ldr	r3, [r3, #0]
 801239c:	f507 7206 	add.w	r2, r7, #536	; 0x218
 80123a0:	f2a2 2209 	subw	r2, r2, #521	; 0x209
 80123a4:	7811      	ldrb	r1, [r2, #0]
 80123a6:	f107 0214 	add.w	r2, r7, #20
 80123aa:	4610      	mov	r0, r2
 80123ac:	4798      	blx	r3
 80123ae:	e000      	b.n	80123b2 <LOG_VPrint+0x6a>
	if (m_stream == NULL) return;
 80123b0:	bf00      	nop
}
 80123b2:	f507 7706 	add.w	r7, r7, #536	; 0x218
 80123b6:	46bd      	mov	sp, r7
 80123b8:	bd80      	pop	{r7, pc}
 80123ba:	bf00      	nop
 80123bc:	24001240 	.word	0x24001240

080123c0 <LOG_Print>:

void LOG_Print(bool new_line, const char *fmt, ...) {
 80123c0:	b40e      	push	{r1, r2, r3}
 80123c2:	b580      	push	{r7, lr}
 80123c4:	b085      	sub	sp, #20
 80123c6:	af00      	add	r7, sp, #0
 80123c8:	4603      	mov	r3, r0
 80123ca:	71fb      	strb	r3, [r7, #7]
	va_list args;
	va_start(args, fmt);
 80123cc:	f107 0320 	add.w	r3, r7, #32
 80123d0:	60fb      	str	r3, [r7, #12]
	LOG_VPrint(new_line, fmt, args);
 80123d2:	79fb      	ldrb	r3, [r7, #7]
 80123d4:	68fa      	ldr	r2, [r7, #12]
 80123d6:	69f9      	ldr	r1, [r7, #28]
 80123d8:	4618      	mov	r0, r3
 80123da:	f7ff ffb5 	bl	8012348 <LOG_VPrint>
	va_end(args);
}
 80123de:	bf00      	nop
 80123e0:	3714      	adds	r7, #20
 80123e2:	46bd      	mov	sp, r7
 80123e4:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80123e8:	b003      	add	sp, #12
 80123ea:	4770      	bx	lr

080123ec <LOG_Info>:
		va_end(args);

	#endif
}

void LOG_Info(const char *fmt, ...) {
 80123ec:	b40f      	push	{r0, r1, r2, r3}
 80123ee:	b580      	push	{r7, lr}
 80123f0:	b082      	sub	sp, #8
 80123f2:	af00      	add	r7, sp, #0
	va_list args;
	va_start(args, fmt);
 80123f4:	f107 0314 	add.w	r3, r7, #20
 80123f8:	607b      	str	r3, [r7, #4]
	LOG_Print(false, "[INFO]  ");
 80123fa:	4908      	ldr	r1, [pc, #32]	; (801241c <LOG_Info+0x30>)
 80123fc:	2000      	movs	r0, #0
 80123fe:	f7ff ffdf 	bl	80123c0 <LOG_Print>
	LOG_VPrint(true, fmt, args);
 8012402:	687a      	ldr	r2, [r7, #4]
 8012404:	6939      	ldr	r1, [r7, #16]
 8012406:	2001      	movs	r0, #1
 8012408:	f7ff ff9e 	bl	8012348 <LOG_VPrint>
	va_end(args);
}
 801240c:	bf00      	nop
 801240e:	3708      	adds	r7, #8
 8012410:	46bd      	mov	sp, r7
 8012412:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8012416:	b004      	add	sp, #16
 8012418:	4770      	bx	lr
 801241a:	bf00      	nop
 801241c:	08016738 	.word	0x08016738

08012420 <LEGUAN_Init>:
  *  @brief Main leguan implementations
  */

#include "leguan.h"

result_t LEGUAN_Init(void) {
 8012420:	b580      	push	{r7, lr}
 8012422:	af00      	add	r7, sp, #0
	R_TRY(FPGA_Init());
 8012424:	f000 f88a 	bl	801253c <FPGA_Init>
 8012428:	4603      	mov	r3, r0
 801242a:	2b00      	cmp	r3, #0
 801242c:	d003      	beq.n	8012436 <LEGUAN_Init+0x16>
 801242e:	f000 f885 	bl	801253c <FPGA_Init>
 8012432:	4603      	mov	r3, r0
 8012434:	e077      	b.n	8012526 <LEGUAN_Init+0x106>
	R_TRY(LCD_Init());
 8012436:	f000 f92d 	bl	8012694 <LCD_Init>
 801243a:	4603      	mov	r3, r0
 801243c:	2b00      	cmp	r3, #0
 801243e:	d003      	beq.n	8012448 <LEGUAN_Init+0x28>
 8012440:	f000 f928 	bl	8012694 <LCD_Init>
 8012444:	4603      	mov	r3, r0
 8012446:	e06e      	b.n	8012526 <LEGUAN_Init+0x106>
	R_TRY(LCD_TouchInit());
 8012448:	f000 fb3e 	bl	8012ac8 <LCD_TouchInit>
 801244c:	4603      	mov	r3, r0
 801244e:	2b00      	cmp	r3, #0
 8012450:	d003      	beq.n	801245a <LEGUAN_Init+0x3a>
 8012452:	f000 fb39 	bl	8012ac8 <LCD_TouchInit>
 8012456:	4603      	mov	r3, r0
 8012458:	e065      	b.n	8012526 <LEGUAN_Init+0x106>
	R_TRY(SENSOR_Init());
 801245a:	f000 fb50 	bl	8012afe <SENSOR_Init>
 801245e:	4603      	mov	r3, r0
 8012460:	2b00      	cmp	r3, #0
 8012462:	d003      	beq.n	801246c <LEGUAN_Init+0x4c>
 8012464:	f000 fb4b 	bl	8012afe <SENSOR_Init>
 8012468:	4603      	mov	r3, r0
 801246a:	e05c      	b.n	8012526 <LEGUAN_Init+0x106>

	R_TRY(GPIO_Init());
 801246c:	f000 ff06 	bl	801327c <GPIO_Init>
 8012470:	4603      	mov	r3, r0
 8012472:	2b00      	cmp	r3, #0
 8012474:	d003      	beq.n	801247e <LEGUAN_Init+0x5e>
 8012476:	f000 ff01 	bl	801327c <GPIO_Init>
 801247a:	4603      	mov	r3, r0
 801247c:	e053      	b.n	8012526 <LEGUAN_Init+0x106>
	R_TRY(SERIAL_Init());
 801247e:	f001 f86b 	bl	8013558 <SERIAL_Init>
 8012482:	4603      	mov	r3, r0
 8012484:	2b00      	cmp	r3, #0
 8012486:	d003      	beq.n	8012490 <LEGUAN_Init+0x70>
 8012488:	f001 f866 	bl	8013558 <SERIAL_Init>
 801248c:	4603      	mov	r3, r0
 801248e:	e04a      	b.n	8012526 <LEGUAN_Init+0x106>
	R_TRY(SPI_Init(SPI_Sensor));
 8012490:	4b26      	ldr	r3, [pc, #152]	; (801252c <LEGUAN_Init+0x10c>)
 8012492:	6818      	ldr	r0, [r3, #0]
 8012494:	f001 f868 	bl	8013568 <SPI_Init>
 8012498:	4603      	mov	r3, r0
 801249a:	2b00      	cmp	r3, #0
 801249c:	d005      	beq.n	80124aa <LEGUAN_Init+0x8a>
 801249e:	4b23      	ldr	r3, [pc, #140]	; (801252c <LEGUAN_Init+0x10c>)
 80124a0:	6818      	ldr	r0, [r3, #0]
 80124a2:	f001 f861 	bl	8013568 <SPI_Init>
 80124a6:	4603      	mov	r3, r0
 80124a8:	e03d      	b.n	8012526 <LEGUAN_Init+0x106>
	R_TRY(SPI_Init(SPI_Touch));
 80124aa:	4b21      	ldr	r3, [pc, #132]	; (8012530 <LEGUAN_Init+0x110>)
 80124ac:	6818      	ldr	r0, [r3, #0]
 80124ae:	f001 f85b 	bl	8013568 <SPI_Init>
 80124b2:	4603      	mov	r3, r0
 80124b4:	2b00      	cmp	r3, #0
 80124b6:	d005      	beq.n	80124c4 <LEGUAN_Init+0xa4>
 80124b8:	4b1d      	ldr	r3, [pc, #116]	; (8012530 <LEGUAN_Init+0x110>)
 80124ba:	6818      	ldr	r0, [r3, #0]
 80124bc:	f001 f854 	bl	8013568 <SPI_Init>
 80124c0:	4603      	mov	r3, r0
 80124c2:	e030      	b.n	8012526 <LEGUAN_Init+0x106>
	R_TRY(I2C_Init());
 80124c4:	f000 ffa6 	bl	8013414 <I2C_Init>
 80124c8:	4603      	mov	r3, r0
 80124ca:	2b00      	cmp	r3, #0
 80124cc:	d003      	beq.n	80124d6 <LEGUAN_Init+0xb6>
 80124ce:	f000 ffa1 	bl	8013414 <I2C_Init>
 80124d2:	4603      	mov	r3, r0
 80124d4:	e027      	b.n	8012526 <LEGUAN_Init+0x106>
	R_TRY(ADC_Init());
 80124d6:	f000 fea6 	bl	8013226 <ADC_Init>
 80124da:	4603      	mov	r3, r0
 80124dc:	2b00      	cmp	r3, #0
 80124de:	d003      	beq.n	80124e8 <LEGUAN_Init+0xc8>
 80124e0:	f000 fea1 	bl	8013226 <ADC_Init>
 80124e4:	4603      	mov	r3, r0
 80124e6:	e01e      	b.n	8012526 <LEGUAN_Init+0x106>
	R_TRY(DAC_Init(DAC1_CH1));
 80124e8:	4b12      	ldr	r3, [pc, #72]	; (8012534 <LEGUAN_Init+0x114>)
 80124ea:	e893 0003 	ldmia.w	r3, {r0, r1}
 80124ee:	f000 fea2 	bl	8013236 <DAC_Init>
 80124f2:	4603      	mov	r3, r0
 80124f4:	2b00      	cmp	r3, #0
 80124f6:	d006      	beq.n	8012506 <LEGUAN_Init+0xe6>
 80124f8:	4b0e      	ldr	r3, [pc, #56]	; (8012534 <LEGUAN_Init+0x114>)
 80124fa:	e893 0003 	ldmia.w	r3, {r0, r1}
 80124fe:	f000 fe9a 	bl	8013236 <DAC_Init>
 8012502:	4603      	mov	r3, r0
 8012504:	e00f      	b.n	8012526 <LEGUAN_Init+0x106>
	R_TRY(DAC_Init(DAC1_CH2));
 8012506:	4b0c      	ldr	r3, [pc, #48]	; (8012538 <LEGUAN_Init+0x118>)
 8012508:	e893 0003 	ldmia.w	r3, {r0, r1}
 801250c:	f000 fe93 	bl	8013236 <DAC_Init>
 8012510:	4603      	mov	r3, r0
 8012512:	2b00      	cmp	r3, #0
 8012514:	d006      	beq.n	8012524 <LEGUAN_Init+0x104>
 8012516:	4b08      	ldr	r3, [pc, #32]	; (8012538 <LEGUAN_Init+0x118>)
 8012518:	e893 0003 	ldmia.w	r3, {r0, r1}
 801251c:	f000 fe8b 	bl	8013236 <DAC_Init>
 8012520:	4603      	mov	r3, r0
 8012522:	e000      	b.n	8012526 <LEGUAN_Init+0x106>

	return RESULT_SUCCESS;
 8012524:	2300      	movs	r3, #0
}
 8012526:	4618      	mov	r0, r3
 8012528:	bd80      	pop	{r7, pc}
 801252a:	bf00      	nop
 801252c:	24000158 	.word	0x24000158
 8012530:	2400015c 	.word	0x2400015c
 8012534:	24000148 	.word	0x24000148
 8012538:	24000150 	.word	0x24000150

0801253c <FPGA_Init>:

#include "peripherals/external/fpga.h"
#include "common/math.h"


result_t FPGA_Init(void) {
 801253c:	b580      	push	{r7, lr}
 801253e:	af00      	add	r7, sp, #0
	FPGA_Reset();
 8012540:	f000 f803 	bl	801254a <FPGA_Reset>

	return RESULT_SUCCESS;
 8012544:	2300      	movs	r3, #0
}
 8012546:	4618      	mov	r0, r3
 8012548:	bd80      	pop	{r7, pc}

0801254a <FPGA_Reset>:


result_t FPGA_Reset(void) {
 801254a:	b480      	push	{r7}
 801254c:	af00      	add	r7, sp, #0
    FPGA->reset = true;
 801254e:	f04f 4348 	mov.w	r3, #3355443200	; 0xc8000000
 8012552:	781a      	ldrb	r2, [r3, #0]
 8012554:	2200      	movs	r2, #0
 8012556:	f042 0201 	orr.w	r2, r2, #1
 801255a:	701a      	strb	r2, [r3, #0]
 801255c:	785a      	ldrb	r2, [r3, #1]
 801255e:	2200      	movs	r2, #0
 8012560:	705a      	strb	r2, [r3, #1]

    return RESULT_SUCCESS;
 8012562:	2300      	movs	r3, #0
}
 8012564:	4618      	mov	r0, r3
 8012566:	46bd      	mov	sp, r7
 8012568:	f85d 7b04 	ldr.w	r7, [sp], #4
 801256c:	4770      	bx	lr

0801256e <LCD_SetDrawArea>:
static LEGUAN_ALWAYS_INLINE void LCD_CommandData16(uint8_t cmd, uint16_t data) {
    LCD_Command(cmd);
    LCD_Data16(data);
}

result_t LCD_SetDrawArea(uint16_t x1, uint16_t y1, uint16_t x2, uint16_t y2) {
 801256e:	b490      	push	{r4, r7}
 8012570:	b086      	sub	sp, #24
 8012572:	af00      	add	r7, sp, #0
 8012574:	4604      	mov	r4, r0
 8012576:	4608      	mov	r0, r1
 8012578:	4611      	mov	r1, r2
 801257a:	461a      	mov	r2, r3
 801257c:	4623      	mov	r3, r4
 801257e:	80fb      	strh	r3, [r7, #6]
 8012580:	4603      	mov	r3, r0
 8012582:	80bb      	strh	r3, [r7, #4]
 8012584:	460b      	mov	r3, r1
 8012586:	807b      	strh	r3, [r7, #2]
 8012588:	4613      	mov	r3, r2
 801258a:	803b      	strh	r3, [r7, #0]
	if (x1 > LCD_WIDTH || y1 > LCD_HEIGHT)
 801258c:	88fb      	ldrh	r3, [r7, #6]
 801258e:	f5b3 7f48 	cmp.w	r3, #800	; 0x320
 8012592:	d803      	bhi.n	801259c <LCD_SetDrawArea+0x2e>
 8012594:	88bb      	ldrh	r3, [r7, #4]
 8012596:	f5b3 7ff0 	cmp.w	r3, #480	; 0x1e0
 801259a:	d901      	bls.n	80125a0 <LCD_SetDrawArea+0x32>
		return RESULT_INVALID_ARGUMENTS;
 801259c:	2302      	movs	r3, #2
 801259e:	e062      	b.n	8012666 <LCD_SetDrawArea+0xf8>
	if (x2 > LCD_WIDTH || y2 > LCD_HEIGHT)
 80125a0:	887b      	ldrh	r3, [r7, #2]
 80125a2:	f5b3 7f48 	cmp.w	r3, #800	; 0x320
 80125a6:	d803      	bhi.n	80125b0 <LCD_SetDrawArea+0x42>
 80125a8:	883b      	ldrh	r3, [r7, #0]
 80125aa:	f5b3 7ff0 	cmp.w	r3, #480	; 0x1e0
 80125ae:	d901      	bls.n	80125b4 <LCD_SetDrawArea+0x46>
		return RESULT_INVALID_ARGUMENTS;
 80125b0:	2302      	movs	r3, #2
 80125b2:	e058      	b.n	8012666 <LCD_SetDrawArea+0xf8>
 80125b4:	232a      	movs	r3, #42	; 0x2a
 80125b6:	73bb      	strb	r3, [r7, #14]
    LCD->cmd = cmd;
 80125b8:	f04f 4340 	mov.w	r3, #3221225472	; 0xc0000000
 80125bc:	7bba      	ldrb	r2, [r7, #14]
 80125be:	b292      	uxth	r2, r2
 80125c0:	801a      	strh	r2, [r3, #0]
}
 80125c2:	bf00      	nop

    /* Set horizontal region */
    LCD_Command(LCD_CMD_SET_COLUMN_ADDRESS);
    LCD_Data8(x1 >> 8);
 80125c4:	88fb      	ldrh	r3, [r7, #6]
 80125c6:	0a1b      	lsrs	r3, r3, #8
 80125c8:	b29b      	uxth	r3, r3
 80125ca:	b2db      	uxtb	r3, r3
 80125cc:	73fb      	strb	r3, [r7, #15]
    LCD->data8 = data;
 80125ce:	f04f 4240 	mov.w	r2, #3221225472	; 0xc0000000
 80125d2:	7bfb      	ldrb	r3, [r7, #15]
 80125d4:	7093      	strb	r3, [r2, #2]
}
 80125d6:	bf00      	nop
    LCD_Data8(x1 & 0xFF);
 80125d8:	88fb      	ldrh	r3, [r7, #6]
 80125da:	b2db      	uxtb	r3, r3
 80125dc:	743b      	strb	r3, [r7, #16]
    LCD->data8 = data;
 80125de:	f04f 4240 	mov.w	r2, #3221225472	; 0xc0000000
 80125e2:	7c3b      	ldrb	r3, [r7, #16]
 80125e4:	7093      	strb	r3, [r2, #2]
}
 80125e6:	bf00      	nop
    LCD_Data8(x2 >> 8);
 80125e8:	887b      	ldrh	r3, [r7, #2]
 80125ea:	0a1b      	lsrs	r3, r3, #8
 80125ec:	b29b      	uxth	r3, r3
 80125ee:	b2db      	uxtb	r3, r3
 80125f0:	747b      	strb	r3, [r7, #17]
    LCD->data8 = data;
 80125f2:	f04f 4240 	mov.w	r2, #3221225472	; 0xc0000000
 80125f6:	7c7b      	ldrb	r3, [r7, #17]
 80125f8:	7093      	strb	r3, [r2, #2]
}
 80125fa:	bf00      	nop
    LCD_Data8(x2 & 0xFF);
 80125fc:	887b      	ldrh	r3, [r7, #2]
 80125fe:	b2db      	uxtb	r3, r3
 8012600:	74bb      	strb	r3, [r7, #18]
    LCD->data8 = data;
 8012602:	f04f 4240 	mov.w	r2, #3221225472	; 0xc0000000
 8012606:	7cbb      	ldrb	r3, [r7, #18]
 8012608:	7093      	strb	r3, [r2, #2]
}
 801260a:	bf00      	nop
 801260c:	232b      	movs	r3, #43	; 0x2b
 801260e:	74fb      	strb	r3, [r7, #19]
    LCD->cmd = cmd;
 8012610:	f04f 4340 	mov.w	r3, #3221225472	; 0xc0000000
 8012614:	7cfa      	ldrb	r2, [r7, #19]
 8012616:	b292      	uxth	r2, r2
 8012618:	801a      	strh	r2, [r3, #0]
}
 801261a:	bf00      	nop

    /* Set vertical region */
    LCD_Command(LCD_CMD_SET_PAGE_ADDRESS);
    LCD_Data8(y1 >> 8);
 801261c:	88bb      	ldrh	r3, [r7, #4]
 801261e:	0a1b      	lsrs	r3, r3, #8
 8012620:	b29b      	uxth	r3, r3
 8012622:	b2db      	uxtb	r3, r3
 8012624:	753b      	strb	r3, [r7, #20]
    LCD->data8 = data;
 8012626:	f04f 4240 	mov.w	r2, #3221225472	; 0xc0000000
 801262a:	7d3b      	ldrb	r3, [r7, #20]
 801262c:	7093      	strb	r3, [r2, #2]
}
 801262e:	bf00      	nop
    LCD_Data8(y1 & 0xFF);
 8012630:	88bb      	ldrh	r3, [r7, #4]
 8012632:	b2db      	uxtb	r3, r3
 8012634:	757b      	strb	r3, [r7, #21]
    LCD->data8 = data;
 8012636:	f04f 4240 	mov.w	r2, #3221225472	; 0xc0000000
 801263a:	7d7b      	ldrb	r3, [r7, #21]
 801263c:	7093      	strb	r3, [r2, #2]
}
 801263e:	bf00      	nop
    LCD_Data8(y2 >> 8);
 8012640:	883b      	ldrh	r3, [r7, #0]
 8012642:	0a1b      	lsrs	r3, r3, #8
 8012644:	b29b      	uxth	r3, r3
 8012646:	b2db      	uxtb	r3, r3
 8012648:	75bb      	strb	r3, [r7, #22]
    LCD->data8 = data;
 801264a:	f04f 4240 	mov.w	r2, #3221225472	; 0xc0000000
 801264e:	7dbb      	ldrb	r3, [r7, #22]
 8012650:	7093      	strb	r3, [r2, #2]
}
 8012652:	bf00      	nop
    LCD_Data8(y2 & 0xFF);
 8012654:	883b      	ldrh	r3, [r7, #0]
 8012656:	b2db      	uxtb	r3, r3
 8012658:	75fb      	strb	r3, [r7, #23]
    LCD->data8 = data;
 801265a:	f04f 4240 	mov.w	r2, #3221225472	; 0xc0000000
 801265e:	7dfb      	ldrb	r3, [r7, #23]
 8012660:	7093      	strb	r3, [r2, #2]
}
 8012662:	bf00      	nop

    return RESULT_SUCCESS;
 8012664:	2300      	movs	r3, #0
}
 8012666:	4618      	mov	r0, r3
 8012668:	3718      	adds	r7, #24
 801266a:	46bd      	mov	sp, r7
 801266c:	bc90      	pop	{r4, r7}
 801266e:	4770      	bx	lr

08012670 <LCD_EnableDrawMode>:

void LCD_EnableDrawMode(void) {
 8012670:	b480      	push	{r7}
 8012672:	b083      	sub	sp, #12
 8012674:	af00      	add	r7, sp, #0
 8012676:	232c      	movs	r3, #44	; 0x2c
 8012678:	71fb      	strb	r3, [r7, #7]
    LCD->cmd = cmd;
 801267a:	f04f 4340 	mov.w	r3, #3221225472	; 0xc0000000
 801267e:	79fa      	ldrb	r2, [r7, #7]
 8012680:	b292      	uxth	r2, r2
 8012682:	801a      	strh	r2, [r3, #0]
}
 8012684:	bf00      	nop
    LCD_Command(LCD_CMD_WRITE_MEMORY_START);
}
 8012686:	bf00      	nop
 8012688:	370c      	adds	r7, #12
 801268a:	46bd      	mov	sp, r7
 801268c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012690:	4770      	bx	lr
	...

08012694 <LCD_Init>:

result_t LCD_Init(void) {
 8012694:	b580      	push	{r7, lr}
 8012696:	b084      	sub	sp, #16
 8012698:	af00      	add	r7, sp, #0
 801269a:	2329      	movs	r3, #41	; 0x29
 801269c:	71fb      	strb	r3, [r7, #7]
    LCD->cmd = cmd;
 801269e:	f04f 4340 	mov.w	r3, #3221225472	; 0xc0000000
 80126a2:	79fa      	ldrb	r2, [r7, #7]
 80126a4:	b292      	uxth	r2, r2
 80126a6:	801a      	strh	r2, [r3, #0]
}
 80126a8:	bf00      	nop
 80126aa:	2336      	movs	r3, #54	; 0x36
 80126ac:	72fb      	strb	r3, [r7, #11]
 80126ae:	2302      	movs	r3, #2
 80126b0:	72bb      	strb	r3, [r7, #10]
 80126b2:	7afb      	ldrb	r3, [r7, #11]
 80126b4:	727b      	strb	r3, [r7, #9]
    LCD->cmd = cmd;
 80126b6:	f04f 4340 	mov.w	r3, #3221225472	; 0xc0000000
 80126ba:	7a7a      	ldrb	r2, [r7, #9]
 80126bc:	b292      	uxth	r2, r2
 80126be:	801a      	strh	r2, [r3, #0]
}
 80126c0:	bf00      	nop
 80126c2:	7abb      	ldrb	r3, [r7, #10]
 80126c4:	723b      	strb	r3, [r7, #8]
    LCD->data8 = data;
 80126c6:	f04f 4240 	mov.w	r2, #3221225472	; 0xc0000000
 80126ca:	7a3b      	ldrb	r3, [r7, #8]
 80126cc:	7093      	strb	r3, [r2, #2]
}
 80126ce:	bf00      	nop
}
 80126d0:	bf00      	nop
    LCD_Command(LCD_CMD_SET_DISPLAY_ON);

    /* Flip LCD horizontally */
    LCD_CommandData8(LCD_CMD_SET_ADDRESS_MODE, 0b00000010);

    CORE_Delay(10);
 80126d2:	200a      	movs	r0, #10
 80126d4:	f7ff fe1c 	bl	8012310 <CORE_Delay>

    /* Set LCD color format */
    LCD->cmd  = LCD_CMD_SET_PIXEL_DATA_INTERFACE;
 80126d8:	f04f 4340 	mov.w	r3, #3221225472	; 0xc0000000
 80126dc:	781a      	ldrb	r2, [r3, #0]
 80126de:	2200      	movs	r2, #0
 80126e0:	f062 020f 	orn	r2, r2, #15
 80126e4:	701a      	strb	r2, [r3, #0]
 80126e6:	785a      	ldrb	r2, [r3, #1]
 80126e8:	2200      	movs	r2, #0
 80126ea:	705a      	strb	r2, [r3, #1]
 80126ec:	23f0      	movs	r3, #240	; 0xf0
 80126ee:	73fb      	strb	r3, [r7, #15]
 80126f0:	2303      	movs	r3, #3
 80126f2:	73bb      	strb	r3, [r7, #14]
 80126f4:	7bfb      	ldrb	r3, [r7, #15]
 80126f6:	737b      	strb	r3, [r7, #13]
    LCD->cmd = cmd;
 80126f8:	f04f 4340 	mov.w	r3, #3221225472	; 0xc0000000
 80126fc:	7b7a      	ldrb	r2, [r7, #13]
 80126fe:	b292      	uxth	r2, r2
 8012700:	801a      	strh	r2, [r3, #0]
}
 8012702:	bf00      	nop
 8012704:	7bbb      	ldrb	r3, [r7, #14]
 8012706:	733b      	strb	r3, [r7, #12]
    LCD->data8 = data;
 8012708:	f04f 4240 	mov.w	r2, #3221225472	; 0xc0000000
 801270c:	7b3b      	ldrb	r3, [r7, #12]
 801270e:	7093      	strb	r3, [r2, #2]
}
 8012710:	bf00      	nop
}
 8012712:	bf00      	nop
    LCD_CommandData8(LCD_CMD_SET_PIXEL_DATA_INTERFACE, 0b011); // RGB565

    LCD_SetDrawArea(0, 0, LCD_WIDTH - 1, LCD_HEIGHT - 1);
 8012714:	f240 13df 	movw	r3, #479	; 0x1df
 8012718:	f240 321f 	movw	r2, #799	; 0x31f
 801271c:	2100      	movs	r1, #0
 801271e:	2000      	movs	r0, #0
 8012720:	f7ff ff25 	bl	801256e <LCD_SetDrawArea>

    CORE_Delay(100);
 8012724:	2064      	movs	r0, #100	; 0x64
 8012726:	f7ff fdf3 	bl	8012310 <CORE_Delay>

    /* Start pixel access mode */
    LCD_EnableDrawMode();
 801272a:	f7ff ffa1 	bl	8012670 <LCD_EnableDrawMode>

    LCD_SetForegroundColor(ColorWhite);
 801272e:	4b08      	ldr	r3, [pc, #32]	; (8012750 <LCD_Init+0xbc>)
 8012730:	e893 0003 	ldmia.w	r3, {r0, r1}
 8012734:	f000 f834 	bl	80127a0 <LCD_SetForegroundColor>
    LCD_SetBackgroundColor(ColorBlack);
 8012738:	4b06      	ldr	r3, [pc, #24]	; (8012754 <LCD_Init+0xc0>)
 801273a:	e893 0003 	ldmia.w	r3, {r0, r1}
 801273e:	f000 f859 	bl	80127f4 <LCD_SetBackgroundColor>
    LCD_Clear();
 8012742:	f000 f933 	bl	80129ac <LCD_Clear>

    return RESULT_SUCCESS;
 8012746:	2300      	movs	r3, #0
}
 8012748:	4618      	mov	r0, r3
 801274a:	3710      	adds	r7, #16
 801274c:	46bd      	mov	sp, r7
 801274e:	bd80      	pop	{r7, pc}
 8012750:	080167e4 	.word	0x080167e4
 8012754:	080167dc 	.word	0x080167dc

08012758 <LCD_Stream>:


void LCD_Stream(const char *string, bool new_line) {
 8012758:	b580      	push	{r7, lr}
 801275a:	b082      	sub	sp, #8
 801275c:	af00      	add	r7, sp, #0
 801275e:	6078      	str	r0, [r7, #4]
 8012760:	460b      	mov	r3, r1
 8012762:	70fb      	strb	r3, [r7, #3]
	if (m_console_cursor_y >= LCD_HEIGHT - CONSOLE_FONT_CHAR_HEIGHT) {
 8012764:	4b0c      	ldr	r3, [pc, #48]	; (8012798 <LCD_Stream+0x40>)
 8012766:	881b      	ldrh	r3, [r3, #0]
 8012768:	f5b3 7feb 	cmp.w	r3, #470	; 0x1d6
 801276c:	d902      	bls.n	8012774 <LCD_Stream+0x1c>
		m_console_cursor_y = 0;
 801276e:	4b0a      	ldr	r3, [pc, #40]	; (8012798 <LCD_Stream+0x40>)
 8012770:	2200      	movs	r2, #0
 8012772:	801a      	strh	r2, [r3, #0]
	}

	if (new_line) {
 8012774:	78fb      	ldrb	r3, [r7, #3]
 8012776:	2b00      	cmp	r3, #0
 8012778:	d006      	beq.n	8012788 <LCD_Stream+0x30>
		LCD_StringContinue(string);
 801277a:	6878      	ldr	r0, [r7, #4]
 801277c:	f000 f900 	bl	8012980 <LCD_StringContinue>
		LCD_StringContinue("\n");
 8012780:	4806      	ldr	r0, [pc, #24]	; (801279c <LCD_Stream+0x44>)
 8012782:	f000 f8fd 	bl	8012980 <LCD_StringContinue>
	}
	else
	    LCD_StringContinue(string);
}
 8012786:	e002      	b.n	801278e <LCD_Stream+0x36>
	    LCD_StringContinue(string);
 8012788:	6878      	ldr	r0, [r7, #4]
 801278a:	f000 f8f9 	bl	8012980 <LCD_StringContinue>
}
 801278e:	bf00      	nop
 8012790:	3708      	adds	r7, #8
 8012792:	46bd      	mov	sp, r7
 8012794:	bd80      	pop	{r7, pc}
 8012796:	bf00      	nop
 8012798:	2400124c 	.word	0x2400124c
 801279c:	08016768 	.word	0x08016768

080127a0 <LCD_SetForegroundColor>:


void LCD_SetForegroundColor(color_t color) {
 80127a0:	b480      	push	{r7}
 80127a2:	b083      	sub	sp, #12
 80127a4:	af00      	add	r7, sp, #0
 80127a6:	463b      	mov	r3, r7
 80127a8:	e883 0003 	stmia.w	r3, {r0, r1}
	m_foreground_color.r = color.r;
 80127ac:	883b      	ldrh	r3, [r7, #0]
 80127ae:	f003 031f 	and.w	r3, r3, #31
 80127b2:	b2d9      	uxtb	r1, r3
 80127b4:	4a0e      	ldr	r2, [pc, #56]	; (80127f0 <LCD_SetForegroundColor+0x50>)
 80127b6:	7853      	ldrb	r3, [r2, #1]
 80127b8:	f361 03c7 	bfi	r3, r1, #3, #5
 80127bc:	7053      	strb	r3, [r2, #1]
	m_foreground_color.g = color.g;
 80127be:	887b      	ldrh	r3, [r7, #2]
 80127c0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80127c4:	b2d9      	uxtb	r1, r3
 80127c6:	4a0a      	ldr	r2, [pc, #40]	; (80127f0 <LCD_SetForegroundColor+0x50>)
 80127c8:	8813      	ldrh	r3, [r2, #0]
 80127ca:	f361 134a 	bfi	r3, r1, #5, #6
 80127ce:	8013      	strh	r3, [r2, #0]
	m_foreground_color.b = color.b;
 80127d0:	88bb      	ldrh	r3, [r7, #4]
 80127d2:	f003 031f 	and.w	r3, r3, #31
 80127d6:	b2d9      	uxtb	r1, r3
 80127d8:	4a05      	ldr	r2, [pc, #20]	; (80127f0 <LCD_SetForegroundColor+0x50>)
 80127da:	7813      	ldrb	r3, [r2, #0]
 80127dc:	f361 0304 	bfi	r3, r1, #0, #5
 80127e0:	7013      	strb	r3, [r2, #0]
}
 80127e2:	bf00      	nop
 80127e4:	370c      	adds	r7, #12
 80127e6:	46bd      	mov	sp, r7
 80127e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80127ec:	4770      	bx	lr
 80127ee:	bf00      	nop
 80127f0:	24001244 	.word	0x24001244

080127f4 <LCD_SetBackgroundColor>:

void LCD_SetBackgroundColor(color_t color) {
 80127f4:	b480      	push	{r7}
 80127f6:	b083      	sub	sp, #12
 80127f8:	af00      	add	r7, sp, #0
 80127fa:	463b      	mov	r3, r7
 80127fc:	e883 0003 	stmia.w	r3, {r0, r1}
	m_background_color.r = color.r;
 8012800:	883b      	ldrh	r3, [r7, #0]
 8012802:	f003 031f 	and.w	r3, r3, #31
 8012806:	b2d9      	uxtb	r1, r3
 8012808:	4a0e      	ldr	r2, [pc, #56]	; (8012844 <LCD_SetBackgroundColor+0x50>)
 801280a:	7853      	ldrb	r3, [r2, #1]
 801280c:	f361 03c7 	bfi	r3, r1, #3, #5
 8012810:	7053      	strb	r3, [r2, #1]
	m_background_color.g = color.g;
 8012812:	887b      	ldrh	r3, [r7, #2]
 8012814:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8012818:	b2d9      	uxtb	r1, r3
 801281a:	4a0a      	ldr	r2, [pc, #40]	; (8012844 <LCD_SetBackgroundColor+0x50>)
 801281c:	8813      	ldrh	r3, [r2, #0]
 801281e:	f361 134a 	bfi	r3, r1, #5, #6
 8012822:	8013      	strh	r3, [r2, #0]
	m_background_color.b = color.b;
 8012824:	88bb      	ldrh	r3, [r7, #4]
 8012826:	f003 031f 	and.w	r3, r3, #31
 801282a:	b2d9      	uxtb	r1, r3
 801282c:	4a05      	ldr	r2, [pc, #20]	; (8012844 <LCD_SetBackgroundColor+0x50>)
 801282e:	7813      	ldrb	r3, [r2, #0]
 8012830:	f361 0304 	bfi	r3, r1, #0, #5
 8012834:	7013      	strb	r3, [r2, #0]
}
 8012836:	bf00      	nop
 8012838:	370c      	adds	r7, #12
 801283a:	46bd      	mov	sp, r7
 801283c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012840:	4770      	bx	lr
 8012842:	bf00      	nop
 8012844:	24001248 	.word	0x24001248

08012848 <LCD_Character>:
    }

    return RESULT_SUCCESS;
}

result_t LCD_Character(uint16_t x, uint16_t y, char c) {
 8012848:	b580      	push	{r7, lr}
 801284a:	b088      	sub	sp, #32
 801284c:	af00      	add	r7, sp, #0
 801284e:	4603      	mov	r3, r0
 8012850:	80fb      	strh	r3, [r7, #6]
 8012852:	460b      	mov	r3, r1
 8012854:	80bb      	strh	r3, [r7, #4]
 8012856:	4613      	mov	r3, r2
 8012858:	70fb      	strb	r3, [r7, #3]
	/* Set working region same size as character bitmap */
    R_TRY(LCD_SetDrawArea(x, y, x + CONSOLE_FONT_CHAR_WIDTH, y + CONSOLE_FONT_CHAR_HEIGHT));
 801285a:	88fb      	ldrh	r3, [r7, #6]
 801285c:	3307      	adds	r3, #7
 801285e:	b29a      	uxth	r2, r3
 8012860:	88bb      	ldrh	r3, [r7, #4]
 8012862:	3309      	adds	r3, #9
 8012864:	b29b      	uxth	r3, r3
 8012866:	88b9      	ldrh	r1, [r7, #4]
 8012868:	88f8      	ldrh	r0, [r7, #6]
 801286a:	f7ff fe80 	bl	801256e <LCD_SetDrawArea>
 801286e:	4603      	mov	r3, r0
 8012870:	2b00      	cmp	r3, #0
 8012872:	d00b      	beq.n	801288c <LCD_Character+0x44>
 8012874:	88fb      	ldrh	r3, [r7, #6]
 8012876:	3307      	adds	r3, #7
 8012878:	b29a      	uxth	r2, r3
 801287a:	88bb      	ldrh	r3, [r7, #4]
 801287c:	3309      	adds	r3, #9
 801287e:	b29b      	uxth	r3, r3
 8012880:	88b9      	ldrh	r1, [r7, #4]
 8012882:	88f8      	ldrh	r0, [r7, #6]
 8012884:	f7ff fe73 	bl	801256e <LCD_SetDrawArea>
 8012888:	4603      	mov	r3, r0
 801288a:	e033      	b.n	80128f4 <LCD_Character+0xac>
    LCD_EnableDrawMode();
 801288c:	f7ff fef0 	bl	8012670 <LCD_EnableDrawMode>

    /* Draw all 1s in bitmap with foreground color, all 0s with background color */
    for (uint32_t i = 0; i < CONSOLE_FONT_CHAR_WIDTH * CONSOLE_FONT_CHAR_HEIGHT; i++) {
 8012890:	2300      	movs	r3, #0
 8012892:	61fb      	str	r3, [r7, #28]
 8012894:	e02a      	b.n	80128ec <LCD_Character+0xa4>
        if (ConsoleFont[(uint8_t)c][i / 8] & (1 << (i % 8)))
 8012896:	78fa      	ldrb	r2, [r7, #3]
 8012898:	69fb      	ldr	r3, [r7, #28]
 801289a:	08db      	lsrs	r3, r3, #3
 801289c:	4917      	ldr	r1, [pc, #92]	; (80128fc <LCD_Character+0xb4>)
 801289e:	00d2      	lsls	r2, r2, #3
 80128a0:	440a      	add	r2, r1
 80128a2:	4413      	add	r3, r2
 80128a4:	781b      	ldrb	r3, [r3, #0]
 80128a6:	461a      	mov	r2, r3
 80128a8:	69fb      	ldr	r3, [r7, #28]
 80128aa:	f003 0307 	and.w	r3, r3, #7
 80128ae:	fa42 f303 	asr.w	r3, r2, r3
 80128b2:	f003 0301 	and.w	r3, r3, #1
 80128b6:	2b00      	cmp	r3, #0
 80128b8:	d00a      	beq.n	80128d0 <LCD_Character+0x88>
 80128ba:	4b11      	ldr	r3, [pc, #68]	; (8012900 <LCD_Character+0xb8>)
 80128bc:	61bb      	str	r3, [r7, #24]
    LCD_Data16(*(const uint16_t*)color);
 80128be:	69bb      	ldr	r3, [r7, #24]
 80128c0:	881b      	ldrh	r3, [r3, #0]
 80128c2:	82fb      	strh	r3, [r7, #22]
    LCD->data16 = data;
 80128c4:	f04f 4340 	mov.w	r3, #3221225472	; 0xc0000000
 80128c8:	8afa      	ldrh	r2, [r7, #22]
 80128ca:	805a      	strh	r2, [r3, #2]
}
 80128cc:	bf00      	nop
}
 80128ce:	e00a      	b.n	80128e6 <LCD_Character+0x9e>
 80128d0:	4b0c      	ldr	r3, [pc, #48]	; (8012904 <LCD_Character+0xbc>)
 80128d2:	613b      	str	r3, [r7, #16]
    LCD_Data16(*(const uint16_t*)color);
 80128d4:	693b      	ldr	r3, [r7, #16]
 80128d6:	881b      	ldrh	r3, [r3, #0]
 80128d8:	81fb      	strh	r3, [r7, #14]
    LCD->data16 = data;
 80128da:	f04f 4340 	mov.w	r3, #3221225472	; 0xc0000000
 80128de:	89fa      	ldrh	r2, [r7, #14]
 80128e0:	805a      	strh	r2, [r3, #2]
}
 80128e2:	bf00      	nop
}
 80128e4:	bf00      	nop
    for (uint32_t i = 0; i < CONSOLE_FONT_CHAR_WIDTH * CONSOLE_FONT_CHAR_HEIGHT; i++) {
 80128e6:	69fb      	ldr	r3, [r7, #28]
 80128e8:	3301      	adds	r3, #1
 80128ea:	61fb      	str	r3, [r7, #28]
 80128ec:	69fb      	ldr	r3, [r7, #28]
 80128ee:	2b3e      	cmp	r3, #62	; 0x3e
 80128f0:	d9d1      	bls.n	8012896 <LCD_Character+0x4e>
        else {
            LCD_Set(&m_background_color);
        }
    }

    return RESULT_SUCCESS;
 80128f2:	2300      	movs	r3, #0
}
 80128f4:	4618      	mov	r0, r3
 80128f6:	3720      	adds	r7, #32
 80128f8:	46bd      	mov	sp, r7
 80128fa:	bd80      	pop	{r7, pc}
 80128fc:	080167ec 	.word	0x080167ec
 8012900:	24001244 	.word	0x24001244
 8012904:	24001248 	.word	0x24001248

08012908 <LCD_String>:

result_t LCD_String(uint16_t start_x, uint16_t start_y, const char *string) {
 8012908:	b580      	push	{r7, lr}
 801290a:	b084      	sub	sp, #16
 801290c:	af00      	add	r7, sp, #0
 801290e:	4603      	mov	r3, r0
 8012910:	603a      	str	r2, [r7, #0]
 8012912:	80fb      	strh	r3, [r7, #6]
 8012914:	460b      	mov	r3, r1
 8012916:	80bb      	strh	r3, [r7, #4]
    uint16_t x = start_x, y = start_y;
 8012918:	88fb      	ldrh	r3, [r7, #6]
 801291a:	81fb      	strh	r3, [r7, #14]
 801291c:	88bb      	ldrh	r3, [r7, #4]
 801291e:	81bb      	strh	r3, [r7, #12]
    while (true) {
    	char c = *string++;
 8012920:	683b      	ldr	r3, [r7, #0]
 8012922:	1c5a      	adds	r2, r3, #1
 8012924:	603a      	str	r2, [r7, #0]
 8012926:	781b      	ldrb	r3, [r3, #0]
 8012928:	72fb      	strb	r3, [r7, #11]

    	if (c == '\n') {
 801292a:	7afb      	ldrb	r3, [r7, #11]
 801292c:	2b0a      	cmp	r3, #10
 801292e:	d105      	bne.n	801293c <LCD_String+0x34>
    		x = 0;
 8012930:	2300      	movs	r3, #0
 8012932:	81fb      	strh	r3, [r7, #14]
    		y += CONSOLE_FONT_CHAR_HEIGHT;
 8012934:	89bb      	ldrh	r3, [r7, #12]
 8012936:	3309      	adds	r3, #9
 8012938:	81bb      	strh	r3, [r7, #12]
    		continue;
 801293a:	e010      	b.n	801295e <LCD_String+0x56>
    	} else if (c == '\x00') {
 801293c:	7afb      	ldrb	r3, [r7, #11]
 801293e:	2b00      	cmp	r3, #0
 8012940:	d00e      	beq.n	8012960 <LCD_String+0x58>
    		break;
    	}

        if (LCD_Character(x, y, c) != RESULT_SUCCESS)
 8012942:	7afa      	ldrb	r2, [r7, #11]
 8012944:	89b9      	ldrh	r1, [r7, #12]
 8012946:	89fb      	ldrh	r3, [r7, #14]
 8012948:	4618      	mov	r0, r3
 801294a:	f7ff ff7d 	bl	8012848 <LCD_Character>
 801294e:	4603      	mov	r3, r0
 8012950:	2b00      	cmp	r3, #0
 8012952:	d001      	beq.n	8012958 <LCD_String+0x50>
        	return RESULT_INVALID_ARGUMENTS;
 8012954:	2302      	movs	r3, #2
 8012956:	e00b      	b.n	8012970 <LCD_String+0x68>

        /* Advance cursor horizontally */
        x += CONSOLE_FONT_CHAR_WIDTH;
 8012958:	89fb      	ldrh	r3, [r7, #14]
 801295a:	3307      	adds	r3, #7
 801295c:	81fb      	strh	r3, [r7, #14]
    while (true) {
 801295e:	e7df      	b.n	8012920 <LCD_String+0x18>
    		break;
 8012960:	bf00      	nop
    }

    m_console_cursor_x = x;
 8012962:	4a05      	ldr	r2, [pc, #20]	; (8012978 <LCD_String+0x70>)
 8012964:	89fb      	ldrh	r3, [r7, #14]
 8012966:	8013      	strh	r3, [r2, #0]
    m_console_cursor_y = y;
 8012968:	4a04      	ldr	r2, [pc, #16]	; (801297c <LCD_String+0x74>)
 801296a:	89bb      	ldrh	r3, [r7, #12]
 801296c:	8013      	strh	r3, [r2, #0]

    return RESULT_SUCCESS;
 801296e:	2300      	movs	r3, #0
}
 8012970:	4618      	mov	r0, r3
 8012972:	3710      	adds	r7, #16
 8012974:	46bd      	mov	sp, r7
 8012976:	bd80      	pop	{r7, pc}
 8012978:	2400124a 	.word	0x2400124a
 801297c:	2400124c 	.word	0x2400124c

08012980 <LCD_StringContinue>:

result_t LCD_StringContinue(const char *string) {
 8012980:	b580      	push	{r7, lr}
 8012982:	b082      	sub	sp, #8
 8012984:	af00      	add	r7, sp, #0
 8012986:	6078      	str	r0, [r7, #4]
	return LCD_String(m_console_cursor_x, m_console_cursor_y, string);
 8012988:	4b06      	ldr	r3, [pc, #24]	; (80129a4 <LCD_StringContinue+0x24>)
 801298a:	881b      	ldrh	r3, [r3, #0]
 801298c:	4a06      	ldr	r2, [pc, #24]	; (80129a8 <LCD_StringContinue+0x28>)
 801298e:	8811      	ldrh	r1, [r2, #0]
 8012990:	687a      	ldr	r2, [r7, #4]
 8012992:	4618      	mov	r0, r3
 8012994:	f7ff ffb8 	bl	8012908 <LCD_String>
 8012998:	4603      	mov	r3, r0
}
 801299a:	4618      	mov	r0, r3
 801299c:	3708      	adds	r7, #8
 801299e:	46bd      	mov	sp, r7
 80129a0:	bd80      	pop	{r7, pc}
 80129a2:	bf00      	nop
 80129a4:	2400124a 	.word	0x2400124a
 80129a8:	2400124c 	.word	0x2400124c

080129ac <LCD_Clear>:

void LCD_Clear(void) {
 80129ac:	b580      	push	{r7, lr}
 80129ae:	b084      	sub	sp, #16
 80129b0:	af00      	add	r7, sp, #0
	/* Set working region fill entire screen */
    LCD_SetDrawArea(0, 0, LCD_WIDTH - 1, LCD_HEIGHT - 1);
 80129b2:	f240 13df 	movw	r3, #479	; 0x1df
 80129b6:	f240 321f 	movw	r2, #799	; 0x31f
 80129ba:	2100      	movs	r1, #0
 80129bc:	2000      	movs	r0, #0
 80129be:	f7ff fdd6 	bl	801256e <LCD_SetDrawArea>
    LCD_EnableDrawMode();
 80129c2:	f7ff fe55 	bl	8012670 <LCD_EnableDrawMode>

    for (uint32_t pixel = 0; pixel < LCD_WIDTH * LCD_HEIGHT; pixel++) {
 80129c6:	2300      	movs	r3, #0
 80129c8:	60fb      	str	r3, [r7, #12]
 80129ca:	e00d      	b.n	80129e8 <LCD_Clear+0x3c>
 80129cc:	4b0d      	ldr	r3, [pc, #52]	; (8012a04 <LCD_Clear+0x58>)
 80129ce:	60bb      	str	r3, [r7, #8]
    LCD_Data16(*(const uint16_t*)color);
 80129d0:	68bb      	ldr	r3, [r7, #8]
 80129d2:	881b      	ldrh	r3, [r3, #0]
 80129d4:	80fb      	strh	r3, [r7, #6]
    LCD->data16 = data;
 80129d6:	f04f 4340 	mov.w	r3, #3221225472	; 0xc0000000
 80129da:	88fa      	ldrh	r2, [r7, #6]
 80129dc:	805a      	strh	r2, [r3, #2]
}
 80129de:	bf00      	nop
}
 80129e0:	bf00      	nop
    for (uint32_t pixel = 0; pixel < LCD_WIDTH * LCD_HEIGHT; pixel++) {
 80129e2:	68fb      	ldr	r3, [r7, #12]
 80129e4:	3301      	adds	r3, #1
 80129e6:	60fb      	str	r3, [r7, #12]
 80129e8:	68fb      	ldr	r3, [r7, #12]
 80129ea:	4a07      	ldr	r2, [pc, #28]	; (8012a08 <LCD_Clear+0x5c>)
 80129ec:	4293      	cmp	r3, r2
 80129ee:	d9ed      	bls.n	80129cc <LCD_Clear+0x20>
        LCD_Set(&m_background_color);
    }

    m_console_cursor_x = 0;
 80129f0:	4b06      	ldr	r3, [pc, #24]	; (8012a0c <LCD_Clear+0x60>)
 80129f2:	2200      	movs	r2, #0
 80129f4:	801a      	strh	r2, [r3, #0]
    m_console_cursor_y = 0;
 80129f6:	4b06      	ldr	r3, [pc, #24]	; (8012a10 <LCD_Clear+0x64>)
 80129f8:	2200      	movs	r2, #0
 80129fa:	801a      	strh	r2, [r3, #0]

}
 80129fc:	bf00      	nop
 80129fe:	3710      	adds	r7, #16
 8012a00:	46bd      	mov	sp, r7
 8012a02:	bd80      	pop	{r7, pc}
 8012a04:	24001248 	.word	0x24001248
 8012a08:	0005dbff 	.word	0x0005dbff
 8012a0c:	2400124a 	.word	0x2400124a
 8012a10:	2400124c 	.word	0x2400124c

08012a14 <LCD_TouchEnable>:
}


/* Touch */

static void LCD_TouchEnable(void) {
 8012a14:	b580      	push	{r7, lr}
 8012a16:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(GPIOD, GPIO_PIN_13, GPIO_PIN_RESET);
 8012a18:	2200      	movs	r2, #0
 8012a1a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8012a1e:	4802      	ldr	r0, [pc, #8]	; (8012a28 <LCD_TouchEnable+0x14>)
 8012a20:	f7f2 f956 	bl	8004cd0 <HAL_GPIO_WritePin>
}
 8012a24:	bf00      	nop
 8012a26:	bd80      	pop	{r7, pc}
 8012a28:	58020c00 	.word	0x58020c00

08012a2c <LCD_TouchDisable>:

static void LCD_TouchDisable(void) {
 8012a2c:	b580      	push	{r7, lr}
 8012a2e:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(GPIOD, GPIO_PIN_13, GPIO_PIN_SET);
 8012a30:	2201      	movs	r2, #1
 8012a32:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8012a36:	4802      	ldr	r0, [pc, #8]	; (8012a40 <LCD_TouchDisable+0x14>)
 8012a38:	f7f2 f94a 	bl	8004cd0 <HAL_GPIO_WritePin>
}
 8012a3c:	bf00      	nop
 8012a3e:	bd80      	pop	{r7, pc}
 8012a40:	58020c00 	.word	0x58020c00

08012a44 <LCD_TouchWriteRegister>:
    LCD_TouchDisable();

    return result;
}

static result_t LCD_TouchWriteRegister(uint8_t address, uint8_t data) {
 8012a44:	b580      	push	{r7, lr}
 8012a46:	b084      	sub	sp, #16
 8012a48:	af00      	add	r7, sp, #0
 8012a4a:	4603      	mov	r3, r0
 8012a4c:	460a      	mov	r2, r1
 8012a4e:	71fb      	strb	r3, [r7, #7]
 8012a50:	4613      	mov	r3, r2
 8012a52:	71bb      	strb	r3, [r7, #6]
    uint8_t send_buffer[] = { address << 1 | 0, data };
 8012a54:	79fb      	ldrb	r3, [r7, #7]
 8012a56:	005b      	lsls	r3, r3, #1
 8012a58:	b2db      	uxtb	r3, r3
 8012a5a:	733b      	strb	r3, [r7, #12]
 8012a5c:	79bb      	ldrb	r3, [r7, #6]
 8012a5e:	737b      	strb	r3, [r7, #13]

    LCD_TouchEnable();
 8012a60:	f7ff ffd8 	bl	8012a14 <LCD_TouchEnable>
    result_t result = SPI_Write(SPI_Touch, send_buffer, 2);
 8012a64:	f107 030c 	add.w	r3, r7, #12
 8012a68:	4807      	ldr	r0, [pc, #28]	; (8012a88 <LCD_TouchWriteRegister+0x44>)
 8012a6a:	2202      	movs	r2, #2
 8012a6c:	4619      	mov	r1, r3
 8012a6e:	6800      	ldr	r0, [r0, #0]
 8012a70:	f000 fd85 	bl	801357e <SPI_Write>
 8012a74:	4603      	mov	r3, r0
 8012a76:	81fb      	strh	r3, [r7, #14]
    LCD_TouchDisable();
 8012a78:	f7ff ffd8 	bl	8012a2c <LCD_TouchDisable>

    return result;
 8012a7c:	89fb      	ldrh	r3, [r7, #14]
}
 8012a7e:	4618      	mov	r0, r3
 8012a80:	3710      	adds	r7, #16
 8012a82:	46bd      	mov	sp, r7
 8012a84:	bd80      	pop	{r7, pc}
 8012a86:	bf00      	nop
 8012a88:	2400015c 	.word	0x2400015c

08012a8c <LCD_TouchSendCommand>:

static result_t LCD_TouchSendCommand(uint8_t address) {
 8012a8c:	b580      	push	{r7, lr}
 8012a8e:	b084      	sub	sp, #16
 8012a90:	af00      	add	r7, sp, #0
 8012a92:	4603      	mov	r3, r0
 8012a94:	71fb      	strb	r3, [r7, #7]
    address <<= 1;
 8012a96:	79fb      	ldrb	r3, [r7, #7]
 8012a98:	005b      	lsls	r3, r3, #1
 8012a9a:	b2db      	uxtb	r3, r3
 8012a9c:	71fb      	strb	r3, [r7, #7]

    LCD_TouchEnable();
 8012a9e:	f7ff ffb9 	bl	8012a14 <LCD_TouchEnable>
    result_t result = SPI_Write(SPI_Touch, &address, 1);
 8012aa2:	1dfb      	adds	r3, r7, #7
 8012aa4:	4807      	ldr	r0, [pc, #28]	; (8012ac4 <LCD_TouchSendCommand+0x38>)
 8012aa6:	2201      	movs	r2, #1
 8012aa8:	4619      	mov	r1, r3
 8012aaa:	6800      	ldr	r0, [r0, #0]
 8012aac:	f000 fd67 	bl	801357e <SPI_Write>
 8012ab0:	4603      	mov	r3, r0
 8012ab2:	81fb      	strh	r3, [r7, #14]
    LCD_TouchDisable();
 8012ab4:	f7ff ffba 	bl	8012a2c <LCD_TouchDisable>

    return result;
 8012ab8:	89fb      	ldrh	r3, [r7, #14]
}
 8012aba:	4618      	mov	r0, r3
 8012abc:	3710      	adds	r7, #16
 8012abe:	46bd      	mov	sp, r7
 8012ac0:	bd80      	pop	{r7, pc}
 8012ac2:	bf00      	nop
 8012ac4:	2400015c 	.word	0x2400015c

08012ac8 <LCD_TouchInit>:

result_t LCD_TouchInit(void) {
 8012ac8:	b580      	push	{r7, lr}
 8012aca:	af00      	add	r7, sp, #0
    /* Set interrupt line to push-pull */
    //lcd_touch_write_register(LCD_TOUCH_REG_GENERAL_CONFIG, 0xC0);

    /* Enable position and pressure averaging */
    R_TRY(LCD_TouchWriteRegister(LCD_TOUCH_REG_OP_MODE_CONFIG, 0x06));
 8012acc:	2106      	movs	r1, #6
 8012ace:	200b      	movs	r0, #11
 8012ad0:	f7ff ffb8 	bl	8012a44 <LCD_TouchWriteRegister>
 8012ad4:	4603      	mov	r3, r0
 8012ad6:	2b00      	cmp	r3, #0
 8012ad8:	d005      	beq.n	8012ae6 <LCD_TouchInit+0x1e>
 8012ada:	2106      	movs	r1, #6
 8012adc:	200b      	movs	r0, #11
 8012ade:	f7ff ffb1 	bl	8012a44 <LCD_TouchWriteRegister>
 8012ae2:	4603      	mov	r3, r0
 8012ae4:	e002      	b.n	8012aec <LCD_TouchInit+0x24>

    /* Sample for 32us */
    //lcd_touch_write_register(LCD_TOUCH_REG_ADC_SAMPLE_TIME_CONFIG, 0xA0);

    /* Start first measurement */
    LCD_TouchStartMeasurement();
 8012ae6:	f000 f803 	bl	8012af0 <LCD_TouchStartMeasurement>

    return RESULT_SUCCESS;
 8012aea:	2300      	movs	r3, #0
}
 8012aec:	4618      	mov	r0, r3
 8012aee:	bd80      	pop	{r7, pc}

08012af0 <LCD_TouchStartMeasurement>:

void LCD_TouchStartMeasurement(void) {
 8012af0:	b580      	push	{r7, lr}
 8012af2:	af00      	add	r7, sp, #0
    LCD_TouchSendCommand(LCD_TOUCH_CMD_MEASURE_XY);
 8012af4:	2070      	movs	r0, #112	; 0x70
 8012af6:	f7ff ffc9 	bl	8012a8c <LCD_TouchSendCommand>
}
 8012afa:	bf00      	nop
 8012afc:	bd80      	pop	{r7, pc}

08012afe <SENSOR_Init>:
#include "peripherals/external/sensors/sht40.h"
#include "peripherals/external/sensors/tcs34725.h"
#include "peripherals/external/sensors/icm42605.h"
#include "peripherals/external/sensors.h"

result_t SENSOR_Init(void) {
 8012afe:	b580      	push	{r7, lr}
 8012b00:	af00      	add	r7, sp, #0
	R_TRY(LPS22BH_Init());
 8012b02:	f000 faa9 	bl	8013058 <LPS22BH_Init>
 8012b06:	4603      	mov	r3, r0
 8012b08:	2b00      	cmp	r3, #0
 8012b0a:	d003      	beq.n	8012b14 <SENSOR_Init+0x16>
 8012b0c:	f000 faa4 	bl	8013058 <LPS22BH_Init>
 8012b10:	4603      	mov	r3, r0
 8012b12:	e023      	b.n	8012b5c <SENSOR_Init+0x5e>
	R_TRY(SHT40_Init());
 8012b14:	f000 fac3 	bl	801309e <SHT40_Init>
 8012b18:	4603      	mov	r3, r0
 8012b1a:	2b00      	cmp	r3, #0
 8012b1c:	d003      	beq.n	8012b26 <SENSOR_Init+0x28>
 8012b1e:	f000 fabe 	bl	801309e <SHT40_Init>
 8012b22:	4603      	mov	r3, r0
 8012b24:	e01a      	b.n	8012b5c <SENSOR_Init+0x5e>
	R_TRY(TC3A227E_Init());
 8012b26:	f000 fb51 	bl	80131cc <TC3A227E_Init>
 8012b2a:	4603      	mov	r3, r0
 8012b2c:	2b00      	cmp	r3, #0
 8012b2e:	d003      	beq.n	8012b38 <SENSOR_Init+0x3a>
 8012b30:	f000 fb4c 	bl	80131cc <TC3A227E_Init>
 8012b34:	4603      	mov	r3, r0
 8012b36:	e011      	b.n	8012b5c <SENSOR_Init+0x5e>
  R_TRY(ICM42605_Init(ICM42605_AccelFullScaleRange_2G, ICM42605_GyroFullScaleRange_250DPS, ICM42605_AccelOutputDataRange_1000Hz, ICM42605_GyroOutputDataRange_1000Hz));
 8012b38:	2306      	movs	r3, #6
 8012b3a:	2206      	movs	r2, #6
 8012b3c:	2103      	movs	r1, #3
 8012b3e:	2003      	movs	r0, #3
 8012b40:	f000 f860 	bl	8012c04 <ICM42605_Init>
 8012b44:	4603      	mov	r3, r0
 8012b46:	2b00      	cmp	r3, #0
 8012b48:	d007      	beq.n	8012b5a <SENSOR_Init+0x5c>
 8012b4a:	2306      	movs	r3, #6
 8012b4c:	2206      	movs	r2, #6
 8012b4e:	2103      	movs	r1, #3
 8012b50:	2003      	movs	r0, #3
 8012b52:	f000 f857 	bl	8012c04 <ICM42605_Init>
 8012b56:	4603      	mov	r3, r0
 8012b58:	e000      	b.n	8012b5c <SENSOR_Init+0x5e>

	return RESULT_SUCCESS;
 8012b5a:	2300      	movs	r3, #0
}
 8012b5c:	4618      	mov	r0, r3
 8012b5e:	bd80      	pop	{r7, pc}

08012b60 <write>:
	OFFSET_USER7       = 0x7E,
	OFFSET_USER8       = 0x7F
} RegisterBank4;


static result_t write(const uint8_t *buffer, size_t size) {
 8012b60:	b580      	push	{r7, lr}
 8012b62:	b084      	sub	sp, #16
 8012b64:	af00      	add	r7, sp, #0
 8012b66:	6078      	str	r0, [r7, #4]
 8012b68:	6039      	str	r1, [r7, #0]
	GPIO_SetValue(SensorChipSelect, true);
 8012b6a:	4b0f      	ldr	r3, [pc, #60]	; (8012ba8 <write+0x48>)
 8012b6c:	2201      	movs	r2, #1
 8012b6e:	e893 0003 	ldmia.w	r3, {r0, r1}
 8012b72:	f000 fc17 	bl	80133a4 <GPIO_SetValue>
	CORE_Delay(10);
 8012b76:	200a      	movs	r0, #10
 8012b78:	f7ff fbca 	bl	8012310 <CORE_Delay>
	result_t result = SPI_Write(SPI_Sensor, buffer, size);
 8012b7c:	4b0b      	ldr	r3, [pc, #44]	; (8012bac <write+0x4c>)
 8012b7e:	683a      	ldr	r2, [r7, #0]
 8012b80:	6879      	ldr	r1, [r7, #4]
 8012b82:	6818      	ldr	r0, [r3, #0]
 8012b84:	f000 fcfb 	bl	801357e <SPI_Write>
 8012b88:	4603      	mov	r3, r0
 8012b8a:	81fb      	strh	r3, [r7, #14]
	CORE_Delay(10);
 8012b8c:	200a      	movs	r0, #10
 8012b8e:	f7ff fbbf 	bl	8012310 <CORE_Delay>
	GPIO_SetValue(SensorChipSelect, false);
 8012b92:	4b05      	ldr	r3, [pc, #20]	; (8012ba8 <write+0x48>)
 8012b94:	2200      	movs	r2, #0
 8012b96:	e893 0003 	ldmia.w	r3, {r0, r1}
 8012b9a:	f000 fc03 	bl	80133a4 <GPIO_SetValue>

	return result;
 8012b9e:	89fb      	ldrh	r3, [r7, #14]
}
 8012ba0:	4618      	mov	r0, r3
 8012ba2:	3710      	adds	r7, #16
 8012ba4:	46bd      	mov	sp, r7
 8012ba6:	bd80      	pop	{r7, pc}
 8012ba8:	08016fec 	.word	0x08016fec
 8012bac:	24000158 	.word	0x24000158

08012bb0 <writeRead>:

static result_t writeRead(const uint8_t *sendBuffer, uint8_t *readBuffer, size_t size) {
 8012bb0:	b580      	push	{r7, lr}
 8012bb2:	b086      	sub	sp, #24
 8012bb4:	af00      	add	r7, sp, #0
 8012bb6:	60f8      	str	r0, [r7, #12]
 8012bb8:	60b9      	str	r1, [r7, #8]
 8012bba:	607a      	str	r2, [r7, #4]
	GPIO_SetValue(SensorChipSelect, true);
 8012bbc:	4b0f      	ldr	r3, [pc, #60]	; (8012bfc <writeRead+0x4c>)
 8012bbe:	2201      	movs	r2, #1
 8012bc0:	e893 0003 	ldmia.w	r3, {r0, r1}
 8012bc4:	f000 fbee 	bl	80133a4 <GPIO_SetValue>
	CORE_Delay(10);
 8012bc8:	200a      	movs	r0, #10
 8012bca:	f7ff fba1 	bl	8012310 <CORE_Delay>
	result_t result = SPI_WriteRead(SPI_Sensor, readBuffer, sendBuffer, size);
 8012bce:	480c      	ldr	r0, [pc, #48]	; (8012c00 <writeRead+0x50>)
 8012bd0:	687b      	ldr	r3, [r7, #4]
 8012bd2:	68fa      	ldr	r2, [r7, #12]
 8012bd4:	68b9      	ldr	r1, [r7, #8]
 8012bd6:	6800      	ldr	r0, [r0, #0]
 8012bd8:	f000 fcf2 	bl	80135c0 <SPI_WriteRead>
 8012bdc:	4603      	mov	r3, r0
 8012bde:	82fb      	strh	r3, [r7, #22]
	CORE_Delay(10);
 8012be0:	200a      	movs	r0, #10
 8012be2:	f7ff fb95 	bl	8012310 <CORE_Delay>
	GPIO_SetValue(SensorChipSelect, false);
 8012be6:	4b05      	ldr	r3, [pc, #20]	; (8012bfc <writeRead+0x4c>)
 8012be8:	2200      	movs	r2, #0
 8012bea:	e893 0003 	ldmia.w	r3, {r0, r1}
 8012bee:	f000 fbd9 	bl	80133a4 <GPIO_SetValue>

	return result;
 8012bf2:	8afb      	ldrh	r3, [r7, #22]
}
 8012bf4:	4618      	mov	r0, r3
 8012bf6:	3718      	adds	r7, #24
 8012bf8:	46bd      	mov	sp, r7
 8012bfa:	bd80      	pop	{r7, pc}
 8012bfc:	08016fec 	.word	0x08016fec
 8012c00:	24000158 	.word	0x24000158

08012c04 <ICM42605_Init>:

result_t ICM42605_Init(ICM42605_AccelFullScaleRange accelScaleRange, ICM42605_GyroFullScaleRange gyroScaleRange, ICM42605_AccelOutputDataRange accelOutputDataRange, ICM42605_GyroOutputDataRange gyroOutputDataRange) {
 8012c04:	b590      	push	{r4, r7, lr}
 8012c06:	b09f      	sub	sp, #124	; 0x7c
 8012c08:	af00      	add	r7, sp, #0
 8012c0a:	4604      	mov	r4, r0
 8012c0c:	4608      	mov	r0, r1
 8012c0e:	4611      	mov	r1, r2
 8012c10:	461a      	mov	r2, r3
 8012c12:	4623      	mov	r3, r4
 8012c14:	71fb      	strb	r3, [r7, #7]
 8012c16:	4603      	mov	r3, r0
 8012c18:	71bb      	strb	r3, [r7, #6]
 8012c1a:	460b      	mov	r3, r1
 8012c1c:	717b      	strb	r3, [r7, #5]
 8012c1e:	4613      	mov	r3, r2
 8012c20:	713b      	strb	r3, [r7, #4]

	s_accelScaleRange = accelScaleRange;
 8012c22:	4ad0      	ldr	r2, [pc, #832]	; (8012f64 <ICM42605_Init+0x360>)
 8012c24:	79fb      	ldrb	r3, [r7, #7]
 8012c26:	7013      	strb	r3, [r2, #0]
	s_gyroScaleRange = gyroScaleRange;
 8012c28:	4acf      	ldr	r2, [pc, #828]	; (8012f68 <ICM42605_Init+0x364>)
 8012c2a:	79bb      	ldrb	r3, [r7, #6]
 8012c2c:	7013      	strb	r3, [r2, #0]

	{
		uint8_t writeBuffer[2] = { WHO_AM_I | REQUEST_RESPONSE, 0x00 };
 8012c2e:	23f5      	movs	r3, #245	; 0xf5
 8012c30:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
		uint8_t readBuffer[2] = { 0x00 };
 8012c34:	2300      	movs	r3, #0
 8012c36:	f8a7 3068 	strh.w	r3, [r7, #104]	; 0x68
		R_TRY(writeRead(writeBuffer, readBuffer, 2));
 8012c3a:	f107 0168 	add.w	r1, r7, #104	; 0x68
 8012c3e:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8012c42:	2202      	movs	r2, #2
 8012c44:	4618      	mov	r0, r3
 8012c46:	f7ff ffb3 	bl	8012bb0 <writeRead>
 8012c4a:	4603      	mov	r3, r0
 8012c4c:	2b00      	cmp	r3, #0
 8012c4e:	d009      	beq.n	8012c64 <ICM42605_Init+0x60>
 8012c50:	f107 0168 	add.w	r1, r7, #104	; 0x68
 8012c54:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8012c58:	2202      	movs	r2, #2
 8012c5a:	4618      	mov	r0, r3
 8012c5c:	f7ff ffa8 	bl	8012bb0 <writeRead>
 8012c60:	4603      	mov	r3, r0
 8012c62:	e1f4      	b.n	801304e <ICM42605_Init+0x44a>

		if (readBuffer[1] != DEVICE_ID)
 8012c64:	f897 3069 	ldrb.w	r3, [r7, #105]	; 0x69
 8012c68:	2b42      	cmp	r3, #66	; 0x42
 8012c6a:	d001      	beq.n	8012c70 <ICM42605_Init+0x6c>
			return RESULT_INITIALIZATION_ERROR;
 8012c6c:	2301      	movs	r3, #1
 8012c6e:	e1ee      	b.n	801304e <ICM42605_Init+0x44a>
	}

	// Enable gyroscope and accelerometer in low noise mode
	{
		uint8_t pwrMgmt0 = 0;
 8012c70:	2300      	movs	r3, #0
 8012c72:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
		{
			uint8_t writeBuffer[2] = { PWR_MGMT0 | REQUEST_RESPONSE, 0x00 };
 8012c76:	23ce      	movs	r3, #206	; 0xce
 8012c78:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
			uint8_t readBuffer[2] = { 0x00 };
 8012c7c:	2300      	movs	r3, #0
 8012c7e:	f8a7 3060 	strh.w	r3, [r7, #96]	; 0x60
			R_TRY(writeRead(writeBuffer, readBuffer, 2));
 8012c82:	f107 0160 	add.w	r1, r7, #96	; 0x60
 8012c86:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8012c8a:	2202      	movs	r2, #2
 8012c8c:	4618      	mov	r0, r3
 8012c8e:	f7ff ff8f 	bl	8012bb0 <writeRead>
 8012c92:	4603      	mov	r3, r0
 8012c94:	2b00      	cmp	r3, #0
 8012c96:	d009      	beq.n	8012cac <ICM42605_Init+0xa8>
 8012c98:	f107 0160 	add.w	r1, r7, #96	; 0x60
 8012c9c:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8012ca0:	2202      	movs	r2, #2
 8012ca2:	4618      	mov	r0, r3
 8012ca4:	f7ff ff84 	bl	8012bb0 <writeRead>
 8012ca8:	4603      	mov	r3, r0
 8012caa:	e1d0      	b.n	801304e <ICM42605_Init+0x44a>
			pwrMgmt0 = readBuffer[1];
 8012cac:	f897 3061 	ldrb.w	r3, [r7, #97]	; 0x61
 8012cb0:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
		}

		{
			uint8_t writeBuffer[2] = { PWR_MGMT0, pwrMgmt0 | 0x0F };
 8012cb4:	234e      	movs	r3, #78	; 0x4e
 8012cb6:	f887 305c 	strb.w	r3, [r7, #92]	; 0x5c
 8012cba:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 8012cbe:	f043 030f 	orr.w	r3, r3, #15
 8012cc2:	b2db      	uxtb	r3, r3
 8012cc4:	f887 305d 	strb.w	r3, [r7, #93]	; 0x5d
			R_TRY(write(writeBuffer, 2));
 8012cc8:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8012ccc:	2102      	movs	r1, #2
 8012cce:	4618      	mov	r0, r3
 8012cd0:	f7ff ff46 	bl	8012b60 <write>
 8012cd4:	4603      	mov	r3, r0
 8012cd6:	2b00      	cmp	r3, #0
 8012cd8:	d007      	beq.n	8012cea <ICM42605_Init+0xe6>
 8012cda:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8012cde:	2102      	movs	r1, #2
 8012ce0:	4618      	mov	r0, r3
 8012ce2:	f7ff ff3d 	bl	8012b60 <write>
 8012ce6:	4603      	mov	r3, r0
 8012ce8:	e1b1      	b.n	801304e <ICM42605_Init+0x44a>
		}
	}

	CORE_Delay(100);
 8012cea:	2064      	movs	r0, #100	; 0x64
 8012cec:	f7ff fb10 	bl	8012310 <CORE_Delay>

	// Set gyro scale and data rate
	{
		uint8_t gyroConfig0 = 0;
 8012cf0:	2300      	movs	r3, #0
 8012cf2:	f887 3076 	strb.w	r3, [r7, #118]	; 0x76
		{
			uint8_t writeBuffer[2] = { GYRO_CONFIG0 | REQUEST_RESPONSE, 0x00 };
 8012cf6:	23cf      	movs	r3, #207	; 0xcf
 8012cf8:	f8a7 3058 	strh.w	r3, [r7, #88]	; 0x58
			uint8_t readBuffer[2] = { 0x00 };
 8012cfc:	2300      	movs	r3, #0
 8012cfe:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
			R_TRY(writeRead(writeBuffer, readBuffer, 2));
 8012d02:	f107 0154 	add.w	r1, r7, #84	; 0x54
 8012d06:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8012d0a:	2202      	movs	r2, #2
 8012d0c:	4618      	mov	r0, r3
 8012d0e:	f7ff ff4f 	bl	8012bb0 <writeRead>
 8012d12:	4603      	mov	r3, r0
 8012d14:	2b00      	cmp	r3, #0
 8012d16:	d009      	beq.n	8012d2c <ICM42605_Init+0x128>
 8012d18:	f107 0154 	add.w	r1, r7, #84	; 0x54
 8012d1c:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8012d20:	2202      	movs	r2, #2
 8012d22:	4618      	mov	r0, r3
 8012d24:	f7ff ff44 	bl	8012bb0 <writeRead>
 8012d28:	4603      	mov	r3, r0
 8012d2a:	e190      	b.n	801304e <ICM42605_Init+0x44a>
			gyroConfig0 = readBuffer[1];
 8012d2c:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 8012d30:	f887 3076 	strb.w	r3, [r7, #118]	; 0x76
		}

		{
			uint8_t writeBuffer[2] = { GYRO_CONFIG0, gyroConfig0 | gyroOutputDataRange | (gyroScaleRange << 5) };
 8012d34:	234f      	movs	r3, #79	; 0x4f
 8012d36:	f887 3050 	strb.w	r3, [r7, #80]	; 0x50
 8012d3a:	f897 2076 	ldrb.w	r2, [r7, #118]	; 0x76
 8012d3e:	793b      	ldrb	r3, [r7, #4]
 8012d40:	4313      	orrs	r3, r2
 8012d42:	b2db      	uxtb	r3, r3
 8012d44:	b25a      	sxtb	r2, r3
 8012d46:	79bb      	ldrb	r3, [r7, #6]
 8012d48:	015b      	lsls	r3, r3, #5
 8012d4a:	b25b      	sxtb	r3, r3
 8012d4c:	4313      	orrs	r3, r2
 8012d4e:	b25b      	sxtb	r3, r3
 8012d50:	b2db      	uxtb	r3, r3
 8012d52:	f887 3051 	strb.w	r3, [r7, #81]	; 0x51
			R_TRY(write(writeBuffer, 2));
 8012d56:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8012d5a:	2102      	movs	r1, #2
 8012d5c:	4618      	mov	r0, r3
 8012d5e:	f7ff feff 	bl	8012b60 <write>
 8012d62:	4603      	mov	r3, r0
 8012d64:	2b00      	cmp	r3, #0
 8012d66:	d007      	beq.n	8012d78 <ICM42605_Init+0x174>
 8012d68:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8012d6c:	2102      	movs	r1, #2
 8012d6e:	4618      	mov	r0, r3
 8012d70:	f7ff fef6 	bl	8012b60 <write>
 8012d74:	4603      	mov	r3, r0
 8012d76:	e16a      	b.n	801304e <ICM42605_Init+0x44a>
		}
	}

	// Set accel scale and data rate
	{
		uint8_t accelConfig0 = 0;
 8012d78:	2300      	movs	r3, #0
 8012d7a:	f887 3075 	strb.w	r3, [r7, #117]	; 0x75
		{
			uint8_t writeBuffer[2] = { ACCEL_CONFIG0 | REQUEST_RESPONSE, 0x00 };
 8012d7e:	23d0      	movs	r3, #208	; 0xd0
 8012d80:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
			uint8_t readBuffer[2] = { 0x00 };
 8012d84:	2300      	movs	r3, #0
 8012d86:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
			R_TRY(writeRead(writeBuffer, readBuffer, 2));
 8012d8a:	f107 0148 	add.w	r1, r7, #72	; 0x48
 8012d8e:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8012d92:	2202      	movs	r2, #2
 8012d94:	4618      	mov	r0, r3
 8012d96:	f7ff ff0b 	bl	8012bb0 <writeRead>
 8012d9a:	4603      	mov	r3, r0
 8012d9c:	2b00      	cmp	r3, #0
 8012d9e:	d009      	beq.n	8012db4 <ICM42605_Init+0x1b0>
 8012da0:	f107 0148 	add.w	r1, r7, #72	; 0x48
 8012da4:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8012da8:	2202      	movs	r2, #2
 8012daa:	4618      	mov	r0, r3
 8012dac:	f7ff ff00 	bl	8012bb0 <writeRead>
 8012db0:	4603      	mov	r3, r0
 8012db2:	e14c      	b.n	801304e <ICM42605_Init+0x44a>
			accelConfig0 = readBuffer[1];
 8012db4:	f897 3049 	ldrb.w	r3, [r7, #73]	; 0x49
 8012db8:	f887 3075 	strb.w	r3, [r7, #117]	; 0x75
		}

		{
			uint8_t writeBuffer[2] = { ACCEL_CONFIG0, accelConfig0 | accelOutputDataRange | (accelScaleRange << 5) };
 8012dbc:	2350      	movs	r3, #80	; 0x50
 8012dbe:	f887 3044 	strb.w	r3, [r7, #68]	; 0x44
 8012dc2:	f897 2075 	ldrb.w	r2, [r7, #117]	; 0x75
 8012dc6:	797b      	ldrb	r3, [r7, #5]
 8012dc8:	4313      	orrs	r3, r2
 8012dca:	b2db      	uxtb	r3, r3
 8012dcc:	b25a      	sxtb	r2, r3
 8012dce:	79fb      	ldrb	r3, [r7, #7]
 8012dd0:	015b      	lsls	r3, r3, #5
 8012dd2:	b25b      	sxtb	r3, r3
 8012dd4:	4313      	orrs	r3, r2
 8012dd6:	b25b      	sxtb	r3, r3
 8012dd8:	b2db      	uxtb	r3, r3
 8012dda:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45
			R_TRY(write(writeBuffer, 2));
 8012dde:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8012de2:	2102      	movs	r1, #2
 8012de4:	4618      	mov	r0, r3
 8012de6:	f7ff febb 	bl	8012b60 <write>
 8012dea:	4603      	mov	r3, r0
 8012dec:	2b00      	cmp	r3, #0
 8012dee:	d007      	beq.n	8012e00 <ICM42605_Init+0x1fc>
 8012df0:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8012df4:	2102      	movs	r1, #2
 8012df6:	4618      	mov	r0, r3
 8012df8:	f7ff feb2 	bl	8012b60 <write>
 8012dfc:	4603      	mov	r3, r0
 8012dfe:	e126      	b.n	801304e <ICM42605_Init+0x44a>
		}
	}

	// Set temperature low pass filter to a minimum and use first order filter for gyro
	{
		uint8_t gyroConfig1  = 0;
 8012e00:	2300      	movs	r3, #0
 8012e02:	f887 3074 	strb.w	r3, [r7, #116]	; 0x74
		{
			uint8_t writeBuffer[2] = { GYRO_CONFIG1 | REQUEST_RESPONSE, 0x00 };
 8012e06:	23d1      	movs	r3, #209	; 0xd1
 8012e08:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
			uint8_t readBuffer[2] = { 0x00 };
 8012e0c:	2300      	movs	r3, #0
 8012e0e:	87bb      	strh	r3, [r7, #60]	; 0x3c
			R_TRY(writeRead(writeBuffer, readBuffer, 2));
 8012e10:	f107 013c 	add.w	r1, r7, #60	; 0x3c
 8012e14:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8012e18:	2202      	movs	r2, #2
 8012e1a:	4618      	mov	r0, r3
 8012e1c:	f7ff fec8 	bl	8012bb0 <writeRead>
 8012e20:	4603      	mov	r3, r0
 8012e22:	2b00      	cmp	r3, #0
 8012e24:	d009      	beq.n	8012e3a <ICM42605_Init+0x236>
 8012e26:	f107 013c 	add.w	r1, r7, #60	; 0x3c
 8012e2a:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8012e2e:	2202      	movs	r2, #2
 8012e30:	4618      	mov	r0, r3
 8012e32:	f7ff febd 	bl	8012bb0 <writeRead>
 8012e36:	4603      	mov	r3, r0
 8012e38:	e109      	b.n	801304e <ICM42605_Init+0x44a>
			gyroConfig1  = readBuffer[1];
 8012e3a:	f897 303d 	ldrb.w	r3, [r7, #61]	; 0x3d
 8012e3e:	f887 3074 	strb.w	r3, [r7, #116]	; 0x74
		}

		{
			uint8_t writeBuffer[2] = { GYRO_CONFIG1, gyroConfig1 | 0x0D };
 8012e42:	2351      	movs	r3, #81	; 0x51
 8012e44:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
 8012e48:	f897 3074 	ldrb.w	r3, [r7, #116]	; 0x74
 8012e4c:	f043 030d 	orr.w	r3, r3, #13
 8012e50:	b2db      	uxtb	r3, r3
 8012e52:	f887 3039 	strb.w	r3, [r7, #57]	; 0x39
			R_TRY(write(writeBuffer, 2));
 8012e56:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8012e5a:	2102      	movs	r1, #2
 8012e5c:	4618      	mov	r0, r3
 8012e5e:	f7ff fe7f 	bl	8012b60 <write>
 8012e62:	4603      	mov	r3, r0
 8012e64:	2b00      	cmp	r3, #0
 8012e66:	d007      	beq.n	8012e78 <ICM42605_Init+0x274>
 8012e68:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8012e6c:	2102      	movs	r1, #2
 8012e6e:	4618      	mov	r0, r3
 8012e70:	f7ff fe76 	bl	8012b60 <write>
 8012e74:	4603      	mov	r3, r0
 8012e76:	e0ea      	b.n	801304e <ICM42605_Init+0x44a>
		}
	}

	// Setup interrupt pins
	{
		uint8_t intConfig0  = 0;
 8012e78:	2300      	movs	r3, #0
 8012e7a:	f887 3073 	strb.w	r3, [r7, #115]	; 0x73
		{
			uint8_t writeBuffer[2] = { INT_CONFIG | REQUEST_RESPONSE, 0x00 };
 8012e7e:	2394      	movs	r3, #148	; 0x94
 8012e80:	86bb      	strh	r3, [r7, #52]	; 0x34
			uint8_t readBuffer[2] = { 0x00 };
 8012e82:	2300      	movs	r3, #0
 8012e84:	863b      	strh	r3, [r7, #48]	; 0x30
			R_TRY(writeRead(writeBuffer, readBuffer, 2));
 8012e86:	f107 0130 	add.w	r1, r7, #48	; 0x30
 8012e8a:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8012e8e:	2202      	movs	r2, #2
 8012e90:	4618      	mov	r0, r3
 8012e92:	f7ff fe8d 	bl	8012bb0 <writeRead>
 8012e96:	4603      	mov	r3, r0
 8012e98:	2b00      	cmp	r3, #0
 8012e9a:	d009      	beq.n	8012eb0 <ICM42605_Init+0x2ac>
 8012e9c:	f107 0130 	add.w	r1, r7, #48	; 0x30
 8012ea0:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8012ea4:	2202      	movs	r2, #2
 8012ea6:	4618      	mov	r0, r3
 8012ea8:	f7ff fe82 	bl	8012bb0 <writeRead>
 8012eac:	4603      	mov	r3, r0
 8012eae:	e0ce      	b.n	801304e <ICM42605_Init+0x44a>
			intConfig0 = readBuffer[1];
 8012eb0:	f897 3031 	ldrb.w	r3, [r7, #49]	; 0x31
 8012eb4:	f887 3073 	strb.w	r3, [r7, #115]	; 0x73
		}

		{
			uint8_t writeBuffer[2] = { INT_CONFIG, intConfig0 | 0x18 | 0x03 };
 8012eb8:	2314      	movs	r3, #20
 8012eba:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
 8012ebe:	f897 3073 	ldrb.w	r3, [r7, #115]	; 0x73
 8012ec2:	f043 031b 	orr.w	r3, r3, #27
 8012ec6:	b2db      	uxtb	r3, r3
 8012ec8:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
			R_TRY(write(writeBuffer, 2));
 8012ecc:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8012ed0:	2102      	movs	r1, #2
 8012ed2:	4618      	mov	r0, r3
 8012ed4:	f7ff fe44 	bl	8012b60 <write>
 8012ed8:	4603      	mov	r3, r0
 8012eda:	2b00      	cmp	r3, #0
 8012edc:	d007      	beq.n	8012eee <ICM42605_Init+0x2ea>
 8012ede:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8012ee2:	2102      	movs	r1, #2
 8012ee4:	4618      	mov	r0, r3
 8012ee6:	f7ff fe3b 	bl	8012b60 <write>
 8012eea:	4603      	mov	r3, r0
 8012eec:	e0af      	b.n	801304e <ICM42605_Init+0x44a>
		}
	}

	// Enable async interrupt reset
	{
		uint8_t intConfig1 = 0;
 8012eee:	2300      	movs	r3, #0
 8012ef0:	f887 3072 	strb.w	r3, [r7, #114]	; 0x72
		{
			uint8_t writeBuffer[2] = { INT_CONFIG1 | REQUEST_RESPONSE, 0x00 };
 8012ef4:	23e4      	movs	r3, #228	; 0xe4
 8012ef6:	853b      	strh	r3, [r7, #40]	; 0x28
			uint8_t readBuffer[2] = { 0x00 };
 8012ef8:	2300      	movs	r3, #0
 8012efa:	84bb      	strh	r3, [r7, #36]	; 0x24
			R_TRY(writeRead(writeBuffer, readBuffer, 2));
 8012efc:	f107 0124 	add.w	r1, r7, #36	; 0x24
 8012f00:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8012f04:	2202      	movs	r2, #2
 8012f06:	4618      	mov	r0, r3
 8012f08:	f7ff fe52 	bl	8012bb0 <writeRead>
 8012f0c:	4603      	mov	r3, r0
 8012f0e:	2b00      	cmp	r3, #0
 8012f10:	d009      	beq.n	8012f26 <ICM42605_Init+0x322>
 8012f12:	f107 0124 	add.w	r1, r7, #36	; 0x24
 8012f16:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8012f1a:	2202      	movs	r2, #2
 8012f1c:	4618      	mov	r0, r3
 8012f1e:	f7ff fe47 	bl	8012bb0 <writeRead>
 8012f22:	4603      	mov	r3, r0
 8012f24:	e093      	b.n	801304e <ICM42605_Init+0x44a>
			intConfig1 = readBuffer[1];
 8012f26:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8012f2a:	f887 3072 	strb.w	r3, [r7, #114]	; 0x72
		}

		{
			uint8_t writeBuffer[2] = { INT_CONFIG1, intConfig1 & ~0x10 };
 8012f2e:	2364      	movs	r3, #100	; 0x64
 8012f30:	f887 3020 	strb.w	r3, [r7, #32]
 8012f34:	f897 3072 	ldrb.w	r3, [r7, #114]	; 0x72
 8012f38:	f023 0310 	bic.w	r3, r3, #16
 8012f3c:	b2db      	uxtb	r3, r3
 8012f3e:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
			R_TRY(write(writeBuffer, 2));
 8012f42:	f107 0320 	add.w	r3, r7, #32
 8012f46:	2102      	movs	r1, #2
 8012f48:	4618      	mov	r0, r3
 8012f4a:	f7ff fe09 	bl	8012b60 <write>
 8012f4e:	4603      	mov	r3, r0
 8012f50:	2b00      	cmp	r3, #0
 8012f52:	d00b      	beq.n	8012f6c <ICM42605_Init+0x368>
 8012f54:	f107 0320 	add.w	r3, r7, #32
 8012f58:	2102      	movs	r1, #2
 8012f5a:	4618      	mov	r0, r3
 8012f5c:	f7ff fe00 	bl	8012b60 <write>
 8012f60:	4603      	mov	r3, r0
 8012f62:	e074      	b.n	801304e <ICM42605_Init+0x44a>
 8012f64:	2400124e 	.word	0x2400124e
 8012f68:	2400124f 	.word	0x2400124f
		}
	}

	// Route data ready interrupt to INT1
	{
		uint8_t intSource0 = 0;
 8012f6c:	2300      	movs	r3, #0
 8012f6e:	f887 3071 	strb.w	r3, [r7, #113]	; 0x71
		{
			uint8_t writeBuffer[2] = { INT_SOURCE0 | REQUEST_RESPONSE, 0x00 };
 8012f72:	23e5      	movs	r3, #229	; 0xe5
 8012f74:	83bb      	strh	r3, [r7, #28]
			uint8_t readBuffer[2] = { 0x00 };
 8012f76:	2300      	movs	r3, #0
 8012f78:	833b      	strh	r3, [r7, #24]
			R_TRY(writeRead(writeBuffer, readBuffer, 2));
 8012f7a:	f107 0118 	add.w	r1, r7, #24
 8012f7e:	f107 031c 	add.w	r3, r7, #28
 8012f82:	2202      	movs	r2, #2
 8012f84:	4618      	mov	r0, r3
 8012f86:	f7ff fe13 	bl	8012bb0 <writeRead>
 8012f8a:	4603      	mov	r3, r0
 8012f8c:	2b00      	cmp	r3, #0
 8012f8e:	d009      	beq.n	8012fa4 <ICM42605_Init+0x3a0>
 8012f90:	f107 0118 	add.w	r1, r7, #24
 8012f94:	f107 031c 	add.w	r3, r7, #28
 8012f98:	2202      	movs	r2, #2
 8012f9a:	4618      	mov	r0, r3
 8012f9c:	f7ff fe08 	bl	8012bb0 <writeRead>
 8012fa0:	4603      	mov	r3, r0
 8012fa2:	e054      	b.n	801304e <ICM42605_Init+0x44a>
			intSource0 = readBuffer[1];
 8012fa4:	7e7b      	ldrb	r3, [r7, #25]
 8012fa6:	f887 3071 	strb.w	r3, [r7, #113]	; 0x71
		}

		{
			uint8_t writeBuffer[2] = { INT_SOURCE0, intSource0 | 0x08 };
 8012faa:	2365      	movs	r3, #101	; 0x65
 8012fac:	753b      	strb	r3, [r7, #20]
 8012fae:	f897 3071 	ldrb.w	r3, [r7, #113]	; 0x71
 8012fb2:	f043 0308 	orr.w	r3, r3, #8
 8012fb6:	b2db      	uxtb	r3, r3
 8012fb8:	757b      	strb	r3, [r7, #21]
			R_TRY(write(writeBuffer, 2));
 8012fba:	f107 0314 	add.w	r3, r7, #20
 8012fbe:	2102      	movs	r1, #2
 8012fc0:	4618      	mov	r0, r3
 8012fc2:	f7ff fdcd 	bl	8012b60 <write>
 8012fc6:	4603      	mov	r3, r0
 8012fc8:	2b00      	cmp	r3, #0
 8012fca:	d007      	beq.n	8012fdc <ICM42605_Init+0x3d8>
 8012fcc:	f107 0314 	add.w	r3, r7, #20
 8012fd0:	2102      	movs	r1, #2
 8012fd2:	4618      	mov	r0, r3
 8012fd4:	f7ff fdc4 	bl	8012b60 <write>
 8012fd8:	4603      	mov	r3, r0
 8012fda:	e038      	b.n	801304e <ICM42605_Init+0x44a>
		}
	}

	// Route AGC interrupt to INT2
	{
		uint8_t intSource3 = 0;
 8012fdc:	2300      	movs	r3, #0
 8012fde:	f887 3070 	strb.w	r3, [r7, #112]	; 0x70
		{
			uint8_t writeBuffer[2] = { INT_SOURCE3 | REQUEST_RESPONSE, 0x00 };
 8012fe2:	23e8      	movs	r3, #232	; 0xe8
 8012fe4:	823b      	strh	r3, [r7, #16]
			uint8_t readBuffer[2] = { 0x00 };
 8012fe6:	2300      	movs	r3, #0
 8012fe8:	81bb      	strh	r3, [r7, #12]
			R_TRY(writeRead(writeBuffer, readBuffer, 2));
 8012fea:	f107 010c 	add.w	r1, r7, #12
 8012fee:	f107 0310 	add.w	r3, r7, #16
 8012ff2:	2202      	movs	r2, #2
 8012ff4:	4618      	mov	r0, r3
 8012ff6:	f7ff fddb 	bl	8012bb0 <writeRead>
 8012ffa:	4603      	mov	r3, r0
 8012ffc:	2b00      	cmp	r3, #0
 8012ffe:	d009      	beq.n	8013014 <ICM42605_Init+0x410>
 8013000:	f107 010c 	add.w	r1, r7, #12
 8013004:	f107 0310 	add.w	r3, r7, #16
 8013008:	2202      	movs	r2, #2
 801300a:	4618      	mov	r0, r3
 801300c:	f7ff fdd0 	bl	8012bb0 <writeRead>
 8013010:	4603      	mov	r3, r0
 8013012:	e01c      	b.n	801304e <ICM42605_Init+0x44a>
			intSource3 = readBuffer[1];
 8013014:	7b7b      	ldrb	r3, [r7, #13]
 8013016:	f887 3070 	strb.w	r3, [r7, #112]	; 0x70
		}

		{
			uint8_t writeBuffer[2] = { INT_SOURCE3, intSource3 | 0x01 };
 801301a:	2368      	movs	r3, #104	; 0x68
 801301c:	723b      	strb	r3, [r7, #8]
 801301e:	f897 3070 	ldrb.w	r3, [r7, #112]	; 0x70
 8013022:	f043 0301 	orr.w	r3, r3, #1
 8013026:	b2db      	uxtb	r3, r3
 8013028:	727b      	strb	r3, [r7, #9]
			R_TRY(write(writeBuffer, 2));
 801302a:	f107 0308 	add.w	r3, r7, #8
 801302e:	2102      	movs	r1, #2
 8013030:	4618      	mov	r0, r3
 8013032:	f7ff fd95 	bl	8012b60 <write>
 8013036:	4603      	mov	r3, r0
 8013038:	2b00      	cmp	r3, #0
 801303a:	d007      	beq.n	801304c <ICM42605_Init+0x448>
 801303c:	f107 0308 	add.w	r3, r7, #8
 8013040:	2102      	movs	r1, #2
 8013042:	4618      	mov	r0, r3
 8013044:	f7ff fd8c 	bl	8012b60 <write>
 8013048:	4603      	mov	r3, r0
 801304a:	e000      	b.n	801304e <ICM42605_Init+0x44a>
		}
	}

	return RESULT_SUCCESS;
 801304c:	2300      	movs	r3, #0
}
 801304e:	4618      	mov	r0, r3
 8013050:	377c      	adds	r7, #124	; 0x7c
 8013052:	46bd      	mov	sp, r7
 8013054:	bd90      	pop	{r4, r7, pc}
 8013056:	bf00      	nop

08013058 <LPS22BH_Init>:
	uint8_t FIFO_EN		: 1;	///< FIFO enable
	uint8_t BOOT			: 1;	///< Reboot memory content
} ControlRegister2_t;


result_t LPS22BH_Init(void) {
 8013058:	b580      	push	{r7, lr}
 801305a:	b082      	sub	sp, #8
 801305c:	af00      	add	r7, sp, #0
	uint8_t readDeviceId = 0x00;
 801305e:	2300      	movs	r3, #0
 8013060:	71fb      	strb	r3, [r7, #7]
	do {
		R_TRY(I2C_ReadRegister(DEVICE_ADDRESS, WHO_AM_I | REQUEST_RESPONSE, &readDeviceId));
 8013062:	1dfb      	adds	r3, r7, #7
 8013064:	461a      	mov	r2, r3
 8013066:	218f      	movs	r1, #143	; 0x8f
 8013068:	205c      	movs	r0, #92	; 0x5c
 801306a:	f000 fa45 	bl	80134f8 <I2C_ReadRegister>
 801306e:	4603      	mov	r3, r0
 8013070:	2b00      	cmp	r3, #0
 8013072:	d007      	beq.n	8013084 <LPS22BH_Init+0x2c>
 8013074:	1dfb      	adds	r3, r7, #7
 8013076:	461a      	mov	r2, r3
 8013078:	218f      	movs	r1, #143	; 0x8f
 801307a:	205c      	movs	r0, #92	; 0x5c
 801307c:	f000 fa3c 	bl	80134f8 <I2C_ReadRegister>
 8013080:	4603      	mov	r3, r0
 8013082:	e008      	b.n	8013096 <LPS22BH_Init+0x3e>
		if (readDeviceId == DEVICE_ID)
 8013084:	79fb      	ldrb	r3, [r7, #7]
 8013086:	2bb1      	cmp	r3, #177	; 0xb1
 8013088:	d003      	beq.n	8013092 <LPS22BH_Init+0x3a>
			break;

		CORE_Delay(100);
 801308a:	2064      	movs	r0, #100	; 0x64
 801308c:	f7ff f940 	bl	8012310 <CORE_Delay>
		R_TRY(I2C_ReadRegister(DEVICE_ADDRESS, WHO_AM_I | REQUEST_RESPONSE, &readDeviceId));
 8013090:	e7e7      	b.n	8013062 <LPS22BH_Init+0xa>
			break;
 8013092:	bf00      	nop
	} while (true);

	return RESULT_SUCCESS;
 8013094:	2300      	movs	r3, #0
}
 8013096:	4618      	mov	r0, r3
 8013098:	3708      	adds	r7, #8
 801309a:	46bd      	mov	sp, r7
 801309c:	bd80      	pop	{r7, pc}

0801309e <SHT40_Init>:
typedef struct {
    float32_t humidity;
    float32_t temperature;
} SensorData_t;

result_t SHT40_Init(void) {
 801309e:	b580      	push	{r7, lr}
 80130a0:	af00      	add	r7, sp, #0
	R_TRY(I2C_Write(DEVICE_ADDRESS, SoftReset));
 80130a2:	2194      	movs	r1, #148	; 0x94
 80130a4:	2044      	movs	r0, #68	; 0x44
 80130a6:	f000 f9bd 	bl	8013424 <I2C_Write>
 80130aa:	4603      	mov	r3, r0
 80130ac:	2b00      	cmp	r3, #0
 80130ae:	d005      	beq.n	80130bc <SHT40_Init+0x1e>
 80130b0:	2194      	movs	r1, #148	; 0x94
 80130b2:	2044      	movs	r0, #68	; 0x44
 80130b4:	f000 f9b6 	bl	8013424 <I2C_Write>
 80130b8:	4603      	mov	r3, r0
 80130ba:	e003      	b.n	80130c4 <SHT40_Init+0x26>
	CORE_Delay(2);
 80130bc:	2002      	movs	r0, #2
 80130be:	f7ff f927 	bl	8012310 <CORE_Delay>

	return RESULT_SUCCESS;
 80130c2:	2300      	movs	r3, #0
}
 80130c4:	4618      	mov	r0, r3
 80130c6:	bd80      	pop	{r7, pc}

080130c8 <SetIntegrationTime>:
  _16x 	= 0x02, ///<  16x gain
  _60x 	= 0x03  ///<  60x gain
} Gain_t;


static result_t SetIntegrationTime(IntegrationTime_t integrationTime) {
 80130c8:	b580      	push	{r7, lr}
 80130ca:	b082      	sub	sp, #8
 80130cc:	af00      	add	r7, sp, #0
 80130ce:	4603      	mov	r3, r0
 80130d0:	71fb      	strb	r3, [r7, #7]
	R_TRY(I2C_WriteRegister(DEVICE_ADDRESS, ATIME | COMMAND, integrationTime));
 80130d2:	79fb      	ldrb	r3, [r7, #7]
 80130d4:	461a      	mov	r2, r3
 80130d6:	2181      	movs	r1, #129	; 0x81
 80130d8:	2029      	movs	r0, #41	; 0x29
 80130da:	f000 f9c3 	bl	8013464 <I2C_WriteRegister>
 80130de:	4603      	mov	r3, r0
 80130e0:	2b00      	cmp	r3, #0
 80130e2:	d007      	beq.n	80130f4 <SetIntegrationTime+0x2c>
 80130e4:	79fb      	ldrb	r3, [r7, #7]
 80130e6:	461a      	mov	r2, r3
 80130e8:	2181      	movs	r1, #129	; 0x81
 80130ea:	2029      	movs	r0, #41	; 0x29
 80130ec:	f000 f9ba 	bl	8013464 <I2C_WriteRegister>
 80130f0:	4603      	mov	r3, r0
 80130f2:	e000      	b.n	80130f6 <SetIntegrationTime+0x2e>

	return RESULT_SUCCESS;
 80130f4:	2300      	movs	r3, #0
}
 80130f6:	4618      	mov	r0, r3
 80130f8:	3708      	adds	r7, #8
 80130fa:	46bd      	mov	sp, r7
 80130fc:	bd80      	pop	{r7, pc}

080130fe <SetGain>:

static result_t SetGain(Gain_t gain) {
 80130fe:	b580      	push	{r7, lr}
 8013100:	b082      	sub	sp, #8
 8013102:	af00      	add	r7, sp, #0
 8013104:	4603      	mov	r3, r0
 8013106:	71fb      	strb	r3, [r7, #7]
    R_TRY(I2C_WriteRegister(DEVICE_ADDRESS, CTRL | COMMAND, gain));
 8013108:	79fb      	ldrb	r3, [r7, #7]
 801310a:	461a      	mov	r2, r3
 801310c:	218f      	movs	r1, #143	; 0x8f
 801310e:	2029      	movs	r0, #41	; 0x29
 8013110:	f000 f9a8 	bl	8013464 <I2C_WriteRegister>
 8013114:	4603      	mov	r3, r0
 8013116:	2b00      	cmp	r3, #0
 8013118:	d007      	beq.n	801312a <SetGain+0x2c>
 801311a:	79fb      	ldrb	r3, [r7, #7]
 801311c:	461a      	mov	r2, r3
 801311e:	218f      	movs	r1, #143	; 0x8f
 8013120:	2029      	movs	r0, #41	; 0x29
 8013122:	f000 f99f 	bl	8013464 <I2C_WriteRegister>
 8013126:	4603      	mov	r3, r0
 8013128:	e000      	b.n	801312c <SetGain+0x2e>

    return RESULT_SUCCESS;
 801312a:	2300      	movs	r3, #0
}
 801312c:	4618      	mov	r0, r3
 801312e:	3708      	adds	r7, #8
 8013130:	46bd      	mov	sp, r7
 8013132:	bd80      	pop	{r7, pc}

08013134 <Enable>:

static result_t Enable(void) {
 8013134:	b580      	push	{r7, lr}
 8013136:	b082      	sub	sp, #8
 8013138:	af00      	add	r7, sp, #0
	EnableRegister_t reg = { .PON = true };
 801313a:	2300      	movs	r3, #0
 801313c:	713b      	strb	r3, [r7, #4]
 801313e:	793b      	ldrb	r3, [r7, #4]
 8013140:	f043 0301 	orr.w	r3, r3, #1
 8013144:	713b      	strb	r3, [r7, #4]
	R_TRY(I2C_WriteRegister(DEVICE_ADDRESS, EN | COMMAND, *(uint8_t*)&reg));
 8013146:	1d3b      	adds	r3, r7, #4
 8013148:	781b      	ldrb	r3, [r3, #0]
 801314a:	461a      	mov	r2, r3
 801314c:	2180      	movs	r1, #128	; 0x80
 801314e:	2029      	movs	r0, #41	; 0x29
 8013150:	f000 f988 	bl	8013464 <I2C_WriteRegister>
 8013154:	4603      	mov	r3, r0
 8013156:	2b00      	cmp	r3, #0
 8013158:	d008      	beq.n	801316c <Enable+0x38>
 801315a:	1d3b      	adds	r3, r7, #4
 801315c:	781b      	ldrb	r3, [r3, #0]
 801315e:	461a      	mov	r2, r3
 8013160:	2180      	movs	r1, #128	; 0x80
 8013162:	2029      	movs	r0, #41	; 0x29
 8013164:	f000 f97e 	bl	8013464 <I2C_WriteRegister>
 8013168:	4603      	mov	r3, r0
 801316a:	e003      	b.n	8013174 <Enable+0x40>

	CORE_Delay(3);
 801316c:	2003      	movs	r0, #3
 801316e:	f7ff f8cf 	bl	8012310 <CORE_Delay>

	return RESULT_SUCCESS;
 8013172:	2300      	movs	r3, #0
}
 8013174:	4618      	mov	r0, r3
 8013176:	3708      	adds	r7, #8
 8013178:	46bd      	mov	sp, r7
 801317a:	bd80      	pop	{r7, pc}

0801317c <StartConversion>:
	CORE_Delay(3);

	return RESULT_SUCCESS;
}

static result_t StartConversion(void) {
 801317c:	b580      	push	{r7, lr}
 801317e:	b082      	sub	sp, #8
 8013180:	af00      	add	r7, sp, #0
    EnableRegister_t reg = { .PON = true, .AEN = true };
 8013182:	2300      	movs	r3, #0
 8013184:	713b      	strb	r3, [r7, #4]
 8013186:	793b      	ldrb	r3, [r7, #4]
 8013188:	f043 0301 	orr.w	r3, r3, #1
 801318c:	713b      	strb	r3, [r7, #4]
 801318e:	793b      	ldrb	r3, [r7, #4]
 8013190:	f043 0302 	orr.w	r3, r3, #2
 8013194:	713b      	strb	r3, [r7, #4]
	R_TRY(I2C_WriteRegister(DEVICE_ADDRESS, EN | COMMAND, *(uint8_t*)&reg));
 8013196:	1d3b      	adds	r3, r7, #4
 8013198:	781b      	ldrb	r3, [r3, #0]
 801319a:	461a      	mov	r2, r3
 801319c:	2180      	movs	r1, #128	; 0x80
 801319e:	2029      	movs	r0, #41	; 0x29
 80131a0:	f000 f960 	bl	8013464 <I2C_WriteRegister>
 80131a4:	4603      	mov	r3, r0
 80131a6:	2b00      	cmp	r3, #0
 80131a8:	d008      	beq.n	80131bc <StartConversion+0x40>
 80131aa:	1d3b      	adds	r3, r7, #4
 80131ac:	781b      	ldrb	r3, [r3, #0]
 80131ae:	461a      	mov	r2, r3
 80131b0:	2180      	movs	r1, #128	; 0x80
 80131b2:	2029      	movs	r0, #41	; 0x29
 80131b4:	f000 f956 	bl	8013464 <I2C_WriteRegister>
 80131b8:	4603      	mov	r3, r0
 80131ba:	e003      	b.n	80131c4 <StartConversion+0x48>

	CORE_Delay(3);
 80131bc:	2003      	movs	r0, #3
 80131be:	f7ff f8a7 	bl	8012310 <CORE_Delay>

	return RESULT_SUCCESS;
 80131c2:	2300      	movs	r3, #0
}
 80131c4:	4618      	mov	r0, r3
 80131c6:	3708      	adds	r7, #8
 80131c8:	46bd      	mov	sp, r7
 80131ca:	bd80      	pop	{r7, pc}

080131cc <TC3A227E_Init>:
		return false;

	return status & 0x01;
}

result_t TC3A227E_Init(void) {
 80131cc:	b580      	push	{r7, lr}
 80131ce:	af00      	add	r7, sp, #0
	R_TRY(SetIntegrationTime(_24ms));
 80131d0:	20f6      	movs	r0, #246	; 0xf6
 80131d2:	f7ff ff79 	bl	80130c8 <SetIntegrationTime>
 80131d6:	4603      	mov	r3, r0
 80131d8:	2b00      	cmp	r3, #0
 80131da:	d004      	beq.n	80131e6 <TC3A227E_Init+0x1a>
 80131dc:	20f6      	movs	r0, #246	; 0xf6
 80131de:	f7ff ff73 	bl	80130c8 <SetIntegrationTime>
 80131e2:	4603      	mov	r3, r0
 80131e4:	e01d      	b.n	8013222 <TC3A227E_Init+0x56>
	R_TRY(SetGain(_60x));
 80131e6:	2003      	movs	r0, #3
 80131e8:	f7ff ff89 	bl	80130fe <SetGain>
 80131ec:	4603      	mov	r3, r0
 80131ee:	2b00      	cmp	r3, #0
 80131f0:	d004      	beq.n	80131fc <TC3A227E_Init+0x30>
 80131f2:	2003      	movs	r0, #3
 80131f4:	f7ff ff83 	bl	80130fe <SetGain>
 80131f8:	4603      	mov	r3, r0
 80131fa:	e012      	b.n	8013222 <TC3A227E_Init+0x56>
	R_TRY(Enable());
 80131fc:	f7ff ff9a 	bl	8013134 <Enable>
 8013200:	4603      	mov	r3, r0
 8013202:	2b00      	cmp	r3, #0
 8013204:	d003      	beq.n	801320e <TC3A227E_Init+0x42>
 8013206:	f7ff ff95 	bl	8013134 <Enable>
 801320a:	4603      	mov	r3, r0
 801320c:	e009      	b.n	8013222 <TC3A227E_Init+0x56>
	R_TRY(StartConversion());
 801320e:	f7ff ffb5 	bl	801317c <StartConversion>
 8013212:	4603      	mov	r3, r0
 8013214:	2b00      	cmp	r3, #0
 8013216:	d003      	beq.n	8013220 <TC3A227E_Init+0x54>
 8013218:	f7ff ffb0 	bl	801317c <StartConversion>
 801321c:	4603      	mov	r3, r0
 801321e:	e000      	b.n	8013222 <TC3A227E_Init+0x56>

	return RESULT_SUCCESS;
 8013220:	2300      	movs	r3, #0
}
 8013222:	4618      	mov	r0, r3
 8013224:	bd80      	pop	{r7, pc}

08013226 <ADC_Init>:
		default: return 16;
	}
}


result_t ADC_Init(void) {
 8013226:	b480      	push	{r7}
 8013228:	af00      	add	r7, sp, #0
	/* Noting to do */
	return RESULT_SUCCESS;
 801322a:	2300      	movs	r3, #0
}
 801322c:	4618      	mov	r0, r3
 801322e:	46bd      	mov	sp, r7
 8013230:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013234:	4770      	bx	lr

08013236 <DAC_Init>:
#include "common/processor.h"

DAC_Handle_t DAC1_CH1 = { DAC1, 1 };
DAC_Handle_t DAC1_CH2 = { DAC1, 2 };

result_t DAC_Init(DAC_Handle_t handle) {
 8013236:	b480      	push	{r7}
 8013238:	b083      	sub	sp, #12
 801323a:	af00      	add	r7, sp, #0
 801323c:	463b      	mov	r3, r7
 801323e:	e883 0003 	stmia.w	r3, {r0, r1}
	if (handle.channel == 1)
 8013242:	687b      	ldr	r3, [r7, #4]
 8013244:	2b01      	cmp	r3, #1
 8013246:	d106      	bne.n	8013256 <DAC_Init+0x20>
		handle.handle->CR |= DAC_CR_EN1;
 8013248:	683b      	ldr	r3, [r7, #0]
 801324a:	681a      	ldr	r2, [r3, #0]
 801324c:	683b      	ldr	r3, [r7, #0]
 801324e:	f042 0201 	orr.w	r2, r2, #1
 8013252:	601a      	str	r2, [r3, #0]
 8013254:	e00b      	b.n	801326e <DAC_Init+0x38>
	else if (handle.channel == 2)
 8013256:	687b      	ldr	r3, [r7, #4]
 8013258:	2b02      	cmp	r3, #2
 801325a:	d106      	bne.n	801326a <DAC_Init+0x34>
		handle.handle->CR |= DAC_CR_EN2;
 801325c:	683b      	ldr	r3, [r7, #0]
 801325e:	681a      	ldr	r2, [r3, #0]
 8013260:	683b      	ldr	r3, [r7, #0]
 8013262:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8013266:	601a      	str	r2, [r3, #0]
 8013268:	e001      	b.n	801326e <DAC_Init+0x38>
	else
		return RESULT_INVALID_ARGUMENTS;
 801326a:	2302      	movs	r3, #2
 801326c:	e000      	b.n	8013270 <DAC_Init+0x3a>

	return RESULT_SUCCESS;
 801326e:	2300      	movs	r3, #0
}
 8013270:	4618      	mov	r0, r3
 8013272:	370c      	adds	r7, #12
 8013274:	46bd      	mov	sp, r7
 8013276:	f85d 7b04 	ldr.w	r7, [sp], #4
 801327a:	4770      	bx	lr

0801327c <GPIO_Init>:
  *  @brief GPIO implementations
  */

#include "peripherals/internal/gpio.h"

result_t GPIO_Init() {
 801327c:	b480      	push	{r7}
 801327e:	b08b      	sub	sp, #44	; 0x2c
 8013280:	af00      	add	r7, sp, #0

	/* Enable all GPIO Clocks */
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8013282:	4b47      	ldr	r3, [pc, #284]	; (80133a0 <GPIO_Init+0x124>)
 8013284:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8013288:	4a45      	ldr	r2, [pc, #276]	; (80133a0 <GPIO_Init+0x124>)
 801328a:	f043 0301 	orr.w	r3, r3, #1
 801328e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8013292:	4b43      	ldr	r3, [pc, #268]	; (80133a0 <GPIO_Init+0x124>)
 8013294:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8013298:	f003 0301 	and.w	r3, r3, #1
 801329c:	627b      	str	r3, [r7, #36]	; 0x24
 801329e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
	__HAL_RCC_GPIOB_CLK_ENABLE();
 80132a0:	4b3f      	ldr	r3, [pc, #252]	; (80133a0 <GPIO_Init+0x124>)
 80132a2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80132a6:	4a3e      	ldr	r2, [pc, #248]	; (80133a0 <GPIO_Init+0x124>)
 80132a8:	f043 0302 	orr.w	r3, r3, #2
 80132ac:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80132b0:	4b3b      	ldr	r3, [pc, #236]	; (80133a0 <GPIO_Init+0x124>)
 80132b2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80132b6:	f003 0302 	and.w	r3, r3, #2
 80132ba:	623b      	str	r3, [r7, #32]
 80132bc:	6a3b      	ldr	r3, [r7, #32]
	__HAL_RCC_GPIOC_CLK_ENABLE();
 80132be:	4b38      	ldr	r3, [pc, #224]	; (80133a0 <GPIO_Init+0x124>)
 80132c0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80132c4:	4a36      	ldr	r2, [pc, #216]	; (80133a0 <GPIO_Init+0x124>)
 80132c6:	f043 0304 	orr.w	r3, r3, #4
 80132ca:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80132ce:	4b34      	ldr	r3, [pc, #208]	; (80133a0 <GPIO_Init+0x124>)
 80132d0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80132d4:	f003 0304 	and.w	r3, r3, #4
 80132d8:	61fb      	str	r3, [r7, #28]
 80132da:	69fb      	ldr	r3, [r7, #28]
	__HAL_RCC_GPIOD_CLK_ENABLE();
 80132dc:	4b30      	ldr	r3, [pc, #192]	; (80133a0 <GPIO_Init+0x124>)
 80132de:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80132e2:	4a2f      	ldr	r2, [pc, #188]	; (80133a0 <GPIO_Init+0x124>)
 80132e4:	f043 0308 	orr.w	r3, r3, #8
 80132e8:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80132ec:	4b2c      	ldr	r3, [pc, #176]	; (80133a0 <GPIO_Init+0x124>)
 80132ee:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80132f2:	f003 0308 	and.w	r3, r3, #8
 80132f6:	61bb      	str	r3, [r7, #24]
 80132f8:	69bb      	ldr	r3, [r7, #24]
	__HAL_RCC_GPIOE_CLK_ENABLE();
 80132fa:	4b29      	ldr	r3, [pc, #164]	; (80133a0 <GPIO_Init+0x124>)
 80132fc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8013300:	4a27      	ldr	r2, [pc, #156]	; (80133a0 <GPIO_Init+0x124>)
 8013302:	f043 0310 	orr.w	r3, r3, #16
 8013306:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 801330a:	4b25      	ldr	r3, [pc, #148]	; (80133a0 <GPIO_Init+0x124>)
 801330c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8013310:	f003 0310 	and.w	r3, r3, #16
 8013314:	617b      	str	r3, [r7, #20]
 8013316:	697b      	ldr	r3, [r7, #20]
	__HAL_RCC_GPIOF_CLK_ENABLE();
 8013318:	4b21      	ldr	r3, [pc, #132]	; (80133a0 <GPIO_Init+0x124>)
 801331a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 801331e:	4a20      	ldr	r2, [pc, #128]	; (80133a0 <GPIO_Init+0x124>)
 8013320:	f043 0320 	orr.w	r3, r3, #32
 8013324:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8013328:	4b1d      	ldr	r3, [pc, #116]	; (80133a0 <GPIO_Init+0x124>)
 801332a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 801332e:	f003 0320 	and.w	r3, r3, #32
 8013332:	613b      	str	r3, [r7, #16]
 8013334:	693b      	ldr	r3, [r7, #16]
	__HAL_RCC_GPIOG_CLK_ENABLE();
 8013336:	4b1a      	ldr	r3, [pc, #104]	; (80133a0 <GPIO_Init+0x124>)
 8013338:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 801333c:	4a18      	ldr	r2, [pc, #96]	; (80133a0 <GPIO_Init+0x124>)
 801333e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8013342:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8013346:	4b16      	ldr	r3, [pc, #88]	; (80133a0 <GPIO_Init+0x124>)
 8013348:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 801334c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8013350:	60fb      	str	r3, [r7, #12]
 8013352:	68fb      	ldr	r3, [r7, #12]
	__HAL_RCC_GPIOH_CLK_ENABLE();
 8013354:	4b12      	ldr	r3, [pc, #72]	; (80133a0 <GPIO_Init+0x124>)
 8013356:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 801335a:	4a11      	ldr	r2, [pc, #68]	; (80133a0 <GPIO_Init+0x124>)
 801335c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8013360:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8013364:	4b0e      	ldr	r3, [pc, #56]	; (80133a0 <GPIO_Init+0x124>)
 8013366:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 801336a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 801336e:	60bb      	str	r3, [r7, #8]
 8013370:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOI_CLK_ENABLE();
 8013372:	4b0b      	ldr	r3, [pc, #44]	; (80133a0 <GPIO_Init+0x124>)
 8013374:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8013378:	4a09      	ldr	r2, [pc, #36]	; (80133a0 <GPIO_Init+0x124>)
 801337a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 801337e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8013382:	4b07      	ldr	r3, [pc, #28]	; (80133a0 <GPIO_Init+0x124>)
 8013384:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8013388:	f403 7380 	and.w	r3, r3, #256	; 0x100
 801338c:	607b      	str	r3, [r7, #4]
 801338e:	687b      	ldr	r3, [r7, #4]

	return RESULT_SUCCESS;
 8013390:	2300      	movs	r3, #0
}
 8013392:	4618      	mov	r0, r3
 8013394:	372c      	adds	r7, #44	; 0x2c
 8013396:	46bd      	mov	sp, r7
 8013398:	f85d 7b04 	ldr.w	r7, [sp], #4
 801339c:	4770      	bx	lr
 801339e:	bf00      	nop
 80133a0:	58024400 	.word	0x58024400

080133a4 <GPIO_SetValue>:
		result = !result;

	return result;
}

void GPIO_SetValue(GPIO_Handle_t handle, bool state) {
 80133a4:	b480      	push	{r7}
 80133a6:	b085      	sub	sp, #20
 80133a8:	af00      	add	r7, sp, #0
 80133aa:	f107 0308 	add.w	r3, r7, #8
 80133ae:	e883 0003 	stmia.w	r3, {r0, r1}
 80133b2:	4613      	mov	r3, r2
 80133b4:	71fb      	strb	r3, [r7, #7]
	if (handle.low_active)
 80133b6:	7bbb      	ldrb	r3, [r7, #14]
 80133b8:	2b00      	cmp	r3, #0
 80133ba:	d00d      	beq.n	80133d8 <GPIO_SetValue+0x34>
		state = !state;
 80133bc:	79fb      	ldrb	r3, [r7, #7]
 80133be:	2b00      	cmp	r3, #0
 80133c0:	bf14      	ite	ne
 80133c2:	2301      	movne	r3, #1
 80133c4:	2300      	moveq	r3, #0
 80133c6:	b2db      	uxtb	r3, r3
 80133c8:	f083 0301 	eor.w	r3, r3, #1
 80133cc:	b2db      	uxtb	r3, r3
 80133ce:	71fb      	strb	r3, [r7, #7]
 80133d0:	79fb      	ldrb	r3, [r7, #7]
 80133d2:	f003 0301 	and.w	r3, r3, #1
 80133d6:	71fb      	strb	r3, [r7, #7]

	if (state)
 80133d8:	79fb      	ldrb	r3, [r7, #7]
 80133da:	2b00      	cmp	r3, #0
 80133dc:	d00a      	beq.n	80133f4 <GPIO_SetValue+0x50>
		handle.port->ODR |= (1U << handle.pin);
 80133de:	68bb      	ldr	r3, [r7, #8]
 80133e0:	6959      	ldr	r1, [r3, #20]
 80133e2:	89bb      	ldrh	r3, [r7, #12]
 80133e4:	461a      	mov	r2, r3
 80133e6:	2301      	movs	r3, #1
 80133e8:	fa03 f202 	lsl.w	r2, r3, r2
 80133ec:	68bb      	ldr	r3, [r7, #8]
 80133ee:	430a      	orrs	r2, r1
 80133f0:	615a      	str	r2, [r3, #20]
	else
		handle.port->ODR &= ~(1U << handle.pin);
}
 80133f2:	e009      	b.n	8013408 <GPIO_SetValue+0x64>
		handle.port->ODR &= ~(1U << handle.pin);
 80133f4:	68bb      	ldr	r3, [r7, #8]
 80133f6:	6959      	ldr	r1, [r3, #20]
 80133f8:	89bb      	ldrh	r3, [r7, #12]
 80133fa:	461a      	mov	r2, r3
 80133fc:	2301      	movs	r3, #1
 80133fe:	4093      	lsls	r3, r2
 8013400:	43da      	mvns	r2, r3
 8013402:	68bb      	ldr	r3, [r7, #8]
 8013404:	400a      	ands	r2, r1
 8013406:	615a      	str	r2, [r3, #20]
}
 8013408:	bf00      	nop
 801340a:	3714      	adds	r7, #20
 801340c:	46bd      	mov	sp, r7
 801340e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013412:	4770      	bx	lr

08013414 <I2C_Init>:
#include "common/processor.h"


extern I2C_HandleTypeDef hi2c2;

result_t I2C_Init(void) {
 8013414:	b480      	push	{r7}
 8013416:	af00      	add	r7, sp, #0
	/* Noting to do */

	return RESULT_SUCCESS;
 8013418:	2300      	movs	r3, #0
}
 801341a:	4618      	mov	r0, r3
 801341c:	46bd      	mov	sp, r7
 801341e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013422:	4770      	bx	lr

08013424 <I2C_Write>:

result_t I2C_Write(uint8_t address, uint8_t data) {
 8013424:	b580      	push	{r7, lr}
 8013426:	b084      	sub	sp, #16
 8013428:	af02      	add	r7, sp, #8
 801342a:	4603      	mov	r3, r0
 801342c:	460a      	mov	r2, r1
 801342e:	71fb      	strb	r3, [r7, #7]
 8013430:	4613      	mov	r3, r2
 8013432:	71bb      	strb	r3, [r7, #6]
	if (HAL_I2C_Master_Transmit(&hi2c2, address << 1, &data, 1, HAL_MAX_DELAY) != HAL_OK)
 8013434:	79fb      	ldrb	r3, [r7, #7]
 8013436:	b29b      	uxth	r3, r3
 8013438:	005b      	lsls	r3, r3, #1
 801343a:	b299      	uxth	r1, r3
 801343c:	1dba      	adds	r2, r7, #6
 801343e:	f04f 33ff 	mov.w	r3, #4294967295
 8013442:	9300      	str	r3, [sp, #0]
 8013444:	2301      	movs	r3, #1
 8013446:	4806      	ldr	r0, [pc, #24]	; (8013460 <I2C_Write+0x3c>)
 8013448:	f7f1 fcec 	bl	8004e24 <HAL_I2C_Master_Transmit>
 801344c:	4603      	mov	r3, r0
 801344e:	2b00      	cmp	r3, #0
 8013450:	d001      	beq.n	8013456 <I2C_Write+0x32>
		return RESULT_I2C_WRITE_ERROR;
 8013452:	23c9      	movs	r3, #201	; 0xc9
 8013454:	e000      	b.n	8013458 <I2C_Write+0x34>

	return RESULT_SUCCESS;
 8013456:	2300      	movs	r3, #0
}
 8013458:	4618      	mov	r0, r3
 801345a:	3708      	adds	r7, #8
 801345c:	46bd      	mov	sp, r7
 801345e:	bd80      	pop	{r7, pc}
 8013460:	24000668 	.word	0x24000668

08013464 <I2C_WriteRegister>:

result_t I2C_WriteRegister(uint8_t address, uint8_t reg, uint8_t data) {
 8013464:	b580      	push	{r7, lr}
 8013466:	b086      	sub	sp, #24
 8013468:	af02      	add	r7, sp, #8
 801346a:	4603      	mov	r3, r0
 801346c:	71fb      	strb	r3, [r7, #7]
 801346e:	460b      	mov	r3, r1
 8013470:	71bb      	strb	r3, [r7, #6]
 8013472:	4613      	mov	r3, r2
 8013474:	717b      	strb	r3, [r7, #5]
	uint8_t transmission[] = { reg, data };
 8013476:	79bb      	ldrb	r3, [r7, #6]
 8013478:	733b      	strb	r3, [r7, #12]
 801347a:	797b      	ldrb	r3, [r7, #5]
 801347c:	737b      	strb	r3, [r7, #13]
	if (HAL_I2C_Master_Transmit(&hi2c2, address << 1, transmission, 2, HAL_MAX_DELAY) != HAL_OK)
 801347e:	79fb      	ldrb	r3, [r7, #7]
 8013480:	b29b      	uxth	r3, r3
 8013482:	005b      	lsls	r3, r3, #1
 8013484:	b299      	uxth	r1, r3
 8013486:	f107 020c 	add.w	r2, r7, #12
 801348a:	f04f 33ff 	mov.w	r3, #4294967295
 801348e:	9300      	str	r3, [sp, #0]
 8013490:	2302      	movs	r3, #2
 8013492:	4806      	ldr	r0, [pc, #24]	; (80134ac <I2C_WriteRegister+0x48>)
 8013494:	f7f1 fcc6 	bl	8004e24 <HAL_I2C_Master_Transmit>
 8013498:	4603      	mov	r3, r0
 801349a:	2b00      	cmp	r3, #0
 801349c:	d001      	beq.n	80134a2 <I2C_WriteRegister+0x3e>
		return RESULT_I2C_WRITE_ERROR;
 801349e:	23c9      	movs	r3, #201	; 0xc9
 80134a0:	e000      	b.n	80134a4 <I2C_WriteRegister+0x40>

	return RESULT_SUCCESS;
 80134a2:	2300      	movs	r3, #0
}
 80134a4:	4618      	mov	r0, r3
 80134a6:	3710      	adds	r7, #16
 80134a8:	46bd      	mov	sp, r7
 80134aa:	bd80      	pop	{r7, pc}
 80134ac:	24000668 	.word	0x24000668

080134b0 <I2C_Read>:

result_t I2C_Read(uint8_t address, uint8_t *value) {
 80134b0:	b580      	push	{r7, lr}
 80134b2:	b084      	sub	sp, #16
 80134b4:	af02      	add	r7, sp, #8
 80134b6:	4603      	mov	r3, r0
 80134b8:	6039      	str	r1, [r7, #0]
 80134ba:	71fb      	strb	r3, [r7, #7]
	if (value == NULL)
 80134bc:	683b      	ldr	r3, [r7, #0]
 80134be:	2b00      	cmp	r3, #0
 80134c0:	d101      	bne.n	80134c6 <I2C_Read+0x16>
		return RESULT_INVALID_ARGUMENTS;
 80134c2:	2302      	movs	r3, #2
 80134c4:	e011      	b.n	80134ea <I2C_Read+0x3a>

	if (HAL_I2C_Master_Receive(&hi2c2, address << 1, value, 1, HAL_MAX_DELAY) != HAL_OK)
 80134c6:	79fb      	ldrb	r3, [r7, #7]
 80134c8:	b29b      	uxth	r3, r3
 80134ca:	005b      	lsls	r3, r3, #1
 80134cc:	b299      	uxth	r1, r3
 80134ce:	f04f 33ff 	mov.w	r3, #4294967295
 80134d2:	9300      	str	r3, [sp, #0]
 80134d4:	2301      	movs	r3, #1
 80134d6:	683a      	ldr	r2, [r7, #0]
 80134d8:	4806      	ldr	r0, [pc, #24]	; (80134f4 <I2C_Read+0x44>)
 80134da:	f7f1 fd97 	bl	800500c <HAL_I2C_Master_Receive>
 80134de:	4603      	mov	r3, r0
 80134e0:	2b00      	cmp	r3, #0
 80134e2:	d001      	beq.n	80134e8 <I2C_Read+0x38>
		return RESULT_I2C_READ_ERROR;
 80134e4:	23c8      	movs	r3, #200	; 0xc8
 80134e6:	e000      	b.n	80134ea <I2C_Read+0x3a>

	return RESULT_SUCCESS;
 80134e8:	2300      	movs	r3, #0
}
 80134ea:	4618      	mov	r0, r3
 80134ec:	3708      	adds	r7, #8
 80134ee:	46bd      	mov	sp, r7
 80134f0:	bd80      	pop	{r7, pc}
 80134f2:	bf00      	nop
 80134f4:	24000668 	.word	0x24000668

080134f8 <I2C_ReadRegister>:
		return RESULT_I2C_READ_ERROR;

	return RESULT_SUCCESS;
}

result_t I2C_ReadRegister(uint8_t address, uint8_t reg, uint8_t *value) {
 80134f8:	b580      	push	{r7, lr}
 80134fa:	b084      	sub	sp, #16
 80134fc:	af02      	add	r7, sp, #8
 80134fe:	4603      	mov	r3, r0
 8013500:	603a      	str	r2, [r7, #0]
 8013502:	71fb      	strb	r3, [r7, #7]
 8013504:	460b      	mov	r3, r1
 8013506:	71bb      	strb	r3, [r7, #6]
	if (value == NULL)
 8013508:	683b      	ldr	r3, [r7, #0]
 801350a:	2b00      	cmp	r3, #0
 801350c:	d101      	bne.n	8013512 <I2C_ReadRegister+0x1a>
		return RESULT_INVALID_ARGUMENTS;
 801350e:	2302      	movs	r3, #2
 8013510:	e01b      	b.n	801354a <I2C_ReadRegister+0x52>

	if (HAL_I2C_Master_Transmit(&hi2c2, address << 1, &reg, 1, HAL_MAX_DELAY) != HAL_OK)
 8013512:	79fb      	ldrb	r3, [r7, #7]
 8013514:	b29b      	uxth	r3, r3
 8013516:	005b      	lsls	r3, r3, #1
 8013518:	b299      	uxth	r1, r3
 801351a:	1dba      	adds	r2, r7, #6
 801351c:	f04f 33ff 	mov.w	r3, #4294967295
 8013520:	9300      	str	r3, [sp, #0]
 8013522:	2301      	movs	r3, #1
 8013524:	480b      	ldr	r0, [pc, #44]	; (8013554 <I2C_ReadRegister+0x5c>)
 8013526:	f7f1 fc7d 	bl	8004e24 <HAL_I2C_Master_Transmit>
 801352a:	4603      	mov	r3, r0
 801352c:	2b00      	cmp	r3, #0
 801352e:	d001      	beq.n	8013534 <I2C_ReadRegister+0x3c>
		return RESULT_I2C_READ_ERROR;
 8013530:	23c8      	movs	r3, #200	; 0xc8
 8013532:	e00a      	b.n	801354a <I2C_ReadRegister+0x52>

	if (I2C_Read(address, value) != RESULT_SUCCESS)
 8013534:	79fb      	ldrb	r3, [r7, #7]
 8013536:	6839      	ldr	r1, [r7, #0]
 8013538:	4618      	mov	r0, r3
 801353a:	f7ff ffb9 	bl	80134b0 <I2C_Read>
 801353e:	4603      	mov	r3, r0
 8013540:	2b00      	cmp	r3, #0
 8013542:	d001      	beq.n	8013548 <I2C_ReadRegister+0x50>
		return RESULT_I2C_READ_ERROR;
 8013544:	23c8      	movs	r3, #200	; 0xc8
 8013546:	e000      	b.n	801354a <I2C_ReadRegister+0x52>

	return RESULT_SUCCESS;
 8013548:	2300      	movs	r3, #0
}
 801354a:	4618      	mov	r0, r3
 801354c:	3708      	adds	r7, #8
 801354e:	46bd      	mov	sp, r7
 8013550:	bd80      	pop	{r7, pc}
 8013552:	bf00      	nop
 8013554:	24000668 	.word	0x24000668

08013558 <SERIAL_Init>:
#include <string.h>


extern UART_HandleTypeDef huart1;

result_t SERIAL_Init(void){
 8013558:	b480      	push	{r7}
 801355a:	af00      	add	r7, sp, #0
	/* Noting to do */

	return RESULT_SUCCESS;
 801355c:	2300      	movs	r3, #0
}
 801355e:	4618      	mov	r0, r3
 8013560:	46bd      	mov	sp, r7
 8013562:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013566:	4770      	bx	lr

08013568 <SPI_Init>:
extern SPI_HandleTypeDef hspi6;

SPI_Handle_t SPI_Sensor = { &hspi6 };
SPI_Handle_t SPI_Touch  = { &hspi4 };

result_t SPI_Init(SPI_Handle_t handle) {
 8013568:	b480      	push	{r7}
 801356a:	b083      	sub	sp, #12
 801356c:	af00      	add	r7, sp, #0
 801356e:	6078      	str	r0, [r7, #4]
    LEGUAN_UNUSED(handle);

    return RESULT_SUCCESS;
 8013570:	2300      	movs	r3, #0
}
 8013572:	4618      	mov	r0, r3
 8013574:	370c      	adds	r7, #12
 8013576:	46bd      	mov	sp, r7
 8013578:	f85d 7b04 	ldr.w	r7, [sp], #4
 801357c:	4770      	bx	lr

0801357e <SPI_Write>:
    	return RESULT_SPI_READ_ERROR;

    return RESULT_SUCCESS;
}

result_t SPI_Write(SPI_Handle_t handle, const uint8_t *buffer, size_t size) {
 801357e:	b580      	push	{r7, lr}
 8013580:	b084      	sub	sp, #16
 8013582:	af00      	add	r7, sp, #0
 8013584:	60f8      	str	r0, [r7, #12]
 8013586:	60b9      	str	r1, [r7, #8]
 8013588:	607a      	str	r2, [r7, #4]
	if (buffer == NULL || size == 0)
 801358a:	68bb      	ldr	r3, [r7, #8]
 801358c:	2b00      	cmp	r3, #0
 801358e:	d002      	beq.n	8013596 <SPI_Write+0x18>
 8013590:	687b      	ldr	r3, [r7, #4]
 8013592:	2b00      	cmp	r3, #0
 8013594:	d101      	bne.n	801359a <SPI_Write+0x1c>
		return RESULT_INVALID_ARGUMENTS;
 8013596:	2302      	movs	r3, #2
 8013598:	e00e      	b.n	80135b8 <SPI_Write+0x3a>

    if (HAL_SPI_Transmit(handle.handle, (uint8_t*)buffer, size, HAL_MAX_DELAY) != HAL_OK)
 801359a:	68f8      	ldr	r0, [r7, #12]
 801359c:	687b      	ldr	r3, [r7, #4]
 801359e:	b29a      	uxth	r2, r3
 80135a0:	f04f 33ff 	mov.w	r3, #4294967295
 80135a4:	68b9      	ldr	r1, [r7, #8]
 80135a6:	f7f8 fa6d 	bl	800ba84 <HAL_SPI_Transmit>
 80135aa:	4603      	mov	r3, r0
 80135ac:	2b00      	cmp	r3, #0
 80135ae:	d002      	beq.n	80135b6 <SPI_Write+0x38>
    	return RESULT_SPI_WRITE_ERROR;
 80135b0:	f240 1391 	movw	r3, #401	; 0x191
 80135b4:	e000      	b.n	80135b8 <SPI_Write+0x3a>

    return RESULT_SUCCESS;
 80135b6:	2300      	movs	r3, #0
}
 80135b8:	4618      	mov	r0, r3
 80135ba:	3710      	adds	r7, #16
 80135bc:	46bd      	mov	sp, r7
 80135be:	bd80      	pop	{r7, pc}

080135c0 <SPI_WriteRead>:

result_t SPI_WriteRead(SPI_Handle_t handle, uint8_t *read_buffer, const uint8_t *write_buffer, size_t size) {
 80135c0:	b580      	push	{r7, lr}
 80135c2:	b086      	sub	sp, #24
 80135c4:	af02      	add	r7, sp, #8
 80135c6:	60f8      	str	r0, [r7, #12]
 80135c8:	60b9      	str	r1, [r7, #8]
 80135ca:	607a      	str	r2, [r7, #4]
 80135cc:	603b      	str	r3, [r7, #0]
	if (read_buffer == NULL || write_buffer == NULL || size == 0)
 80135ce:	68bb      	ldr	r3, [r7, #8]
 80135d0:	2b00      	cmp	r3, #0
 80135d2:	d005      	beq.n	80135e0 <SPI_WriteRead+0x20>
 80135d4:	687b      	ldr	r3, [r7, #4]
 80135d6:	2b00      	cmp	r3, #0
 80135d8:	d002      	beq.n	80135e0 <SPI_WriteRead+0x20>
 80135da:	683b      	ldr	r3, [r7, #0]
 80135dc:	2b00      	cmp	r3, #0
 80135de:	d101      	bne.n	80135e4 <SPI_WriteRead+0x24>
		return RESULT_INVALID_ARGUMENTS;
 80135e0:	2302      	movs	r3, #2
 80135e2:	e010      	b.n	8013606 <SPI_WriteRead+0x46>

	if (HAL_SPI_TransmitReceive(handle.handle, (uint8_t*)write_buffer, read_buffer, size, HAL_MAX_DELAY) != HAL_OK)
 80135e4:	68f8      	ldr	r0, [r7, #12]
 80135e6:	683b      	ldr	r3, [r7, #0]
 80135e8:	b29b      	uxth	r3, r3
 80135ea:	f04f 32ff 	mov.w	r2, #4294967295
 80135ee:	9200      	str	r2, [sp, #0]
 80135f0:	68ba      	ldr	r2, [r7, #8]
 80135f2:	6879      	ldr	r1, [r7, #4]
 80135f4:	f7f8 fc38 	bl	800be68 <HAL_SPI_TransmitReceive>
 80135f8:	4603      	mov	r3, r0
 80135fa:	2b00      	cmp	r3, #0
 80135fc:	d002      	beq.n	8013604 <SPI_WriteRead+0x44>
		return RESULT_SPI_READ_ERROR;
 80135fe:	f44f 73c8 	mov.w	r3, #400	; 0x190
 8013602:	e000      	b.n	8013606 <SPI_WriteRead+0x46>

	return RESULT_SUCCESS;
 8013604:	2300      	movs	r3, #0
}
 8013606:	4618      	mov	r0, r3
 8013608:	3710      	adds	r7, #16
 801360a:	46bd      	mov	sp, r7
 801360c:	bd80      	pop	{r7, pc}
	...

08013610 <main>:
 * @return		always 0
 */
__attribute__((optimize("0")))  /* Make sure the compiler doesn't optimize away the loops */

int main(void)
{
 8013610:	b580      	push	{r7, lr}
 8013612:	b086      	sub	sp, #24
 8013614:	af00      	add	r7, sp, #0
    uint32_t start_tick;        /* tick count when starting calculation */
    uint32_t end_tick;          /* tick count when calculation done */
    uint32_t time_loop;         /* measures time for loop only */
    float res;                  /* result of sqrt */
    float value = 25.0F;        /* operand for sprt() */
 8013616:	4b17      	ldr	r3, [pc, #92]	; (8013674 <main+0x64>)
 8013618:	613b      	str	r3, [r7, #16]
    uint32_t i;                 /* loop variable */

    /* Initialize Hardware */
    CUBEMX_Init();
 801361a:	f7ed fa83 	bl	8000b24 <CUBEMX_Init>
    /* Initialize Leguan board */
    LEGUAN_Init();
 801361e:	f7fe feff 	bl	8012420 <LEGUAN_Init>

    /* Set logging output destination to be the LCD */
    LOG_SetDestination(LCD_Stream);
 8013622:	4815      	ldr	r0, [pc, #84]	; (8013678 <main+0x68>)
 8013624:	f7fe fe80 	bl	8012328 <LOG_SetDestination>


    /* Main loop */
    for (;;) {
        /* measure time to do a loop NBR_LOOPS times */
        start_tick = HAL_GetTick();
 8013628:	f7ee fec2 	bl	80023b0 <HAL_GetTick>
 801362c:	60f8      	str	r0, [r7, #12]
        for (i=0; i<NBR_LOOPS; i++) {
 801362e:	2300      	movs	r3, #0
 8013630:	617b      	str	r3, [r7, #20]
 8013632:	e002      	b.n	801363a <main+0x2a>
 8013634:	697b      	ldr	r3, [r7, #20]
 8013636:	3301      	adds	r3, #1
 8013638:	617b      	str	r3, [r7, #20]
 801363a:	697b      	ldr	r3, [r7, #20]
 801363c:	4a0f      	ldr	r2, [pc, #60]	; (801367c <main+0x6c>)
 801363e:	4293      	cmp	r3, r2
 8013640:	d9f8      	bls.n	8013634 <main+0x24>
            /* do nothing, just to get loop time */
        }
        end_tick = HAL_GetTick();
 8013642:	f7ee feb5 	bl	80023b0 <HAL_GetTick>
 8013646:	60b8      	str	r0, [r7, #8]
        time_loop = end_tick - start_tick;
 8013648:	68ba      	ldr	r2, [r7, #8]
 801364a:	68fb      	ldr	r3, [r7, #12]
 801364c:	1ad3      	subs	r3, r2, r3
 801364e:	607b      	str	r3, [r7, #4]
        LOG_Info("Time to do a loop in ns: %d", time_loop);
 8013650:	6879      	ldr	r1, [r7, #4]
 8013652:	480b      	ldr	r0, [pc, #44]	; (8013680 <main+0x70>)
 8013654:	f7fe feca 	bl	80123ec <LOG_Info>

        /* measure sqrtf() using FPU and print result */
        /* put your code here */
        asm volatile("vsqrt.f32 %0, %1" : "=w" (res) : "w" (value));
 8013658:	edd7 7a04 	vldr	s15, [r7, #16]
 801365c:	eef1 7ae7 	vsqrt.f32	s15, s15
 8013660:	edc7 7a00 	vstr	s15, [r7]

        /* measure sqrtf() using library function and print result */
        /* put your code here */
        res = my_sqrtf(value);
 8013664:	ed97 0a04 	vldr	s0, [r7, #16]
 8013668:	f000 f85c 	bl	8013724 <my_sqrtf>
 801366c:	ed87 0a00 	vstr	s0, [r7]
        start_tick = HAL_GetTick();
 8013670:	e7da      	b.n	8013628 <main+0x18>
 8013672:	bf00      	nop
 8013674:	41c80000 	.word	0x41c80000
 8013678:	08012759 	.word	0x08012759
 801367c:	000f423f 	.word	0x000f423f
 8013680:	08016774 	.word	0x08016774

08013684 <rep_clz>:
typedef float fp_t;
typedef uint32_t rep_t;
static const int significandBits = 23;
#define REP_C UINT32_C

static inline int rep_clz(rep_t a) {
 8013684:	b480      	push	{r7}
 8013686:	b083      	sub	sp, #12
 8013688:	af00      	add	r7, sp, #0
 801368a:	6078      	str	r0, [r7, #4]
    return __builtin_clz(a);
 801368c:	687b      	ldr	r3, [r7, #4]
 801368e:	fab3 f383 	clz	r3, r3
}
 8013692:	4618      	mov	r0, r3
 8013694:	370c      	adds	r7, #12
 8013696:	46bd      	mov	sp, r7
 8013698:	f85d 7b04 	ldr.w	r7, [sp], #4
 801369c:	4770      	bx	lr

0801369e <toRep>:

static inline rep_t toRep(fp_t x) {
 801369e:	b480      	push	{r7}
 80136a0:	b085      	sub	sp, #20
 80136a2:	af00      	add	r7, sp, #0
 80136a4:	ed87 0a01 	vstr	s0, [r7, #4]
    const union { rep_t i; fp_t f; } rep = { .f = x };
 80136a8:	687b      	ldr	r3, [r7, #4]
 80136aa:	60fb      	str	r3, [r7, #12]
    return rep.i;
 80136ac:	68fb      	ldr	r3, [r7, #12]
}
 80136ae:	4618      	mov	r0, r3
 80136b0:	3714      	adds	r7, #20
 80136b2:	46bd      	mov	sp, r7
 80136b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80136b8:	4770      	bx	lr

080136ba <fromRep>:

static inline fp_t fromRep(rep_t x) {
 80136ba:	b480      	push	{r7}
 80136bc:	b085      	sub	sp, #20
 80136be:	af00      	add	r7, sp, #0
 80136c0:	6078      	str	r0, [r7, #4]
    const union { rep_t i; fp_t f; } rep = { .i = x };
 80136c2:	687b      	ldr	r3, [r7, #4]
 80136c4:	60fb      	str	r3, [r7, #12]
    return rep.f;
 80136c6:	68fb      	ldr	r3, [r7, #12]
 80136c8:	ee07 3a90 	vmov	s15, r3
}
 80136cc:	eeb0 0a67 	vmov.f32	s0, s15
 80136d0:	3714      	adds	r7, #20
 80136d2:	46bd      	mov	sp, r7
 80136d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80136d8:	4770      	bx	lr

080136da <mulhi>:

static inline uint32_t mulhi(uint32_t a, uint32_t b) {
 80136da:	e92d 03b0 	stmdb	sp!, {r4, r5, r7, r8, r9}
 80136de:	b083      	sub	sp, #12
 80136e0:	af00      	add	r7, sp, #0
 80136e2:	6078      	str	r0, [r7, #4]
 80136e4:	6039      	str	r1, [r7, #0]
    return (uint64_t)a*b >> 32;
 80136e6:	6879      	ldr	r1, [r7, #4]
 80136e8:	2000      	movs	r0, #0
 80136ea:	4688      	mov	r8, r1
 80136ec:	4681      	mov	r9, r0
 80136ee:	6839      	ldr	r1, [r7, #0]
 80136f0:	2000      	movs	r0, #0
 80136f2:	460c      	mov	r4, r1
 80136f4:	4605      	mov	r5, r0
 80136f6:	fb04 f009 	mul.w	r0, r4, r9
 80136fa:	fb08 f105 	mul.w	r1, r8, r5
 80136fe:	4401      	add	r1, r0
 8013700:	fba8 2304 	umull	r2, r3, r8, r4
 8013704:	4419      	add	r1, r3
 8013706:	460b      	mov	r3, r1
 8013708:	f04f 0000 	mov.w	r0, #0
 801370c:	f04f 0100 	mov.w	r1, #0
 8013710:	0018      	movs	r0, r3
 8013712:	2100      	movs	r1, #0
 8013714:	4603      	mov	r3, r0
}
 8013716:	4618      	mov	r0, r3
 8013718:	370c      	adds	r7, #12
 801371a:	46bd      	mov	sp, r7
 801371c:	e8bd 03b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9}
 8013720:	4770      	bx	lr
	...

08013724 <my_sqrtf>:

fp_t my_sqrtf(fp_t x) {
 8013724:	b590      	push	{r4, r7, lr}
 8013726:	b091      	sub	sp, #68	; 0x44
 8013728:	af00      	add	r7, sp, #0
 801372a:	ed87 0a01 	vstr	s0, [r7, #4]
    static const rep_t absMask = signBit - 1;
    static const rep_t infRep = absMask ^ significandMask;
    static const rep_t qnan = infRep | REP_C(1) << (significandBits - 1);

    // Extract the various important bits of x
    const rep_t xRep = toRep(x);
 801372e:	ed97 0a01 	vldr	s0, [r7, #4]
 8013732:	f7ff ffb4 	bl	801369e <toRep>
 8013736:	6378      	str	r0, [r7, #52]	; 0x34
    rep_t significand = xRep & significandMask;
 8013738:	4b7f      	ldr	r3, [pc, #508]	; (8013938 <my_sqrtf+0x214>)
 801373a:	681b      	ldr	r3, [r3, #0]
 801373c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 801373e:	4013      	ands	r3, r2
 8013740:	63fb      	str	r3, [r7, #60]	; 0x3c
    int exponent = (xRep >> significandBits) - exponentBias;
 8013742:	2217      	movs	r2, #23
 8013744:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8013746:	40d3      	lsrs	r3, r2
 8013748:	4a7c      	ldr	r2, [pc, #496]	; (801393c <my_sqrtf+0x218>)
 801374a:	6812      	ldr	r2, [r2, #0]
 801374c:	1a9b      	subs	r3, r3, r2
 801374e:	63bb      	str	r3, [r7, #56]	; 0x38

    // Using an unsigned integer compare, we can detect all of the special
    // cases with a single branch: zero, denormal, negative, infinity, or NaN.
    if (xRep - minNormal >= infRep - minNormal) {
 8013750:	4b7b      	ldr	r3, [pc, #492]	; (8013940 <my_sqrtf+0x21c>)
 8013752:	681b      	ldr	r3, [r3, #0]
 8013754:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8013756:	1ad2      	subs	r2, r2, r3
 8013758:	4b7a      	ldr	r3, [pc, #488]	; (8013944 <my_sqrtf+0x220>)
 801375a:	6819      	ldr	r1, [r3, #0]
 801375c:	4b78      	ldr	r3, [pc, #480]	; (8013940 <my_sqrtf+0x21c>)
 801375e:	681b      	ldr	r3, [r3, #0]
 8013760:	1acb      	subs	r3, r1, r3
 8013762:	429a      	cmp	r2, r3
 8013764:	d345      	bcc.n	80137f2 <my_sqrtf+0xce>
        const rep_t xAbs = xRep & absMask;
 8013766:	4b78      	ldr	r3, [pc, #480]	; (8013948 <my_sqrtf+0x224>)
 8013768:	681b      	ldr	r3, [r3, #0]
 801376a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 801376c:	4013      	ands	r3, r2
 801376e:	633b      	str	r3, [r7, #48]	; 0x30
        // sqrt(+/- 0) = +/- 0
        if (xAbs == 0) return x;
 8013770:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013772:	2b00      	cmp	r3, #0
 8013774:	d102      	bne.n	801377c <my_sqrtf+0x58>
 8013776:	edd7 7a01 	vldr	s15, [r7, #4]
 801377a:	e0d7      	b.n	801392c <my_sqrtf+0x208>
        // sqrt(NaN) = qNaN
        if (xAbs > infRep) return fromRep(qnan | xRep);
 801377c:	4b71      	ldr	r3, [pc, #452]	; (8013944 <my_sqrtf+0x220>)
 801377e:	681b      	ldr	r3, [r3, #0]
 8013780:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8013782:	429a      	cmp	r2, r3
 8013784:	d909      	bls.n	801379a <my_sqrtf+0x76>
 8013786:	4b71      	ldr	r3, [pc, #452]	; (801394c <my_sqrtf+0x228>)
 8013788:	681a      	ldr	r2, [r3, #0]
 801378a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801378c:	4313      	orrs	r3, r2
 801378e:	4618      	mov	r0, r3
 8013790:	f7ff ff93 	bl	80136ba <fromRep>
 8013794:	eef0 7a40 	vmov.f32	s15, s0
 8013798:	e0c8      	b.n	801392c <my_sqrtf+0x208>
        // sqrt(negative) = qNaN
        if (xRep > signBit) return fromRep(qnan);
 801379a:	4b6d      	ldr	r3, [pc, #436]	; (8013950 <my_sqrtf+0x22c>)
 801379c:	681b      	ldr	r3, [r3, #0]
 801379e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80137a0:	429a      	cmp	r2, r3
 80137a2:	d907      	bls.n	80137b4 <my_sqrtf+0x90>
 80137a4:	4b69      	ldr	r3, [pc, #420]	; (801394c <my_sqrtf+0x228>)
 80137a6:	681b      	ldr	r3, [r3, #0]
 80137a8:	4618      	mov	r0, r3
 80137aa:	f7ff ff86 	bl	80136ba <fromRep>
 80137ae:	eef0 7a40 	vmov.f32	s15, s0
 80137b2:	e0bb      	b.n	801392c <my_sqrtf+0x208>
        // sqrt(infinity) = infinity
        if (xRep == infRep) return x;
 80137b4:	4b63      	ldr	r3, [pc, #396]	; (8013944 <my_sqrtf+0x220>)
 80137b6:	681b      	ldr	r3, [r3, #0]
 80137b8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80137ba:	429a      	cmp	r2, r3
 80137bc:	d102      	bne.n	80137c4 <my_sqrtf+0xa0>
 80137be:	edd7 7a01 	vldr	s15, [r7, #4]
 80137c2:	e0b3      	b.n	801392c <my_sqrtf+0x208>

        // normalize denormals and fall back into the mainline
        const int shift = rep_clz(significand) - rep_clz(minNormal);
 80137c4:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 80137c6:	f7ff ff5d 	bl	8013684 <rep_clz>
 80137ca:	4604      	mov	r4, r0
 80137cc:	4b5c      	ldr	r3, [pc, #368]	; (8013940 <my_sqrtf+0x21c>)
 80137ce:	681b      	ldr	r3, [r3, #0]
 80137d0:	4618      	mov	r0, r3
 80137d2:	f7ff ff57 	bl	8013684 <rep_clz>
 80137d6:	4603      	mov	r3, r0
 80137d8:	1ae3      	subs	r3, r4, r3
 80137da:	62fb      	str	r3, [r7, #44]	; 0x2c
        significand <<= shift;
 80137dc:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80137de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80137e0:	fa02 f303 	lsl.w	r3, r2, r3
 80137e4:	63fb      	str	r3, [r7, #60]	; 0x3c
        exponent += 1 - shift;
 80137e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80137e8:	f1c3 0301 	rsb	r3, r3, #1
 80137ec:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80137ee:	4413      	add	r3, r2
 80137f0:	63bb      	str	r3, [r7, #56]	; 0x38
    }

    // Insert the implicit bit of the significand.  If x was denormal, then
    // this bit was already set by the normalization process, but it won't hurt
    // to set it twice.
    significand |= minNormal;
 80137f2:	4b53      	ldr	r3, [pc, #332]	; (8013940 <my_sqrtf+0x21c>)
 80137f4:	681b      	ldr	r3, [r3, #0]
 80137f6:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80137f8:	4313      	orrs	r3, r2
 80137fa:	63fb      	str	r3, [r7, #60]	; 0x3c

    // Halve the exponent to get the exponent of the result, and transform the
    // significand into a Q30 fixed-point xQ30 in the range [1,4) -- if the
    // exponent of x is odd, then xQ30 is in [2,4); if it is even, then xQ30
    // is in [1,2).
    const int resultExponent = exponent >> 1;
 80137fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80137fe:	105b      	asrs	r3, r3, #1
 8013800:	62bb      	str	r3, [r7, #40]	; 0x28
    uint32_t xQ30 = significand << (7 + (exponent & 1));
 8013802:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013804:	f003 0301 	and.w	r3, r3, #1
 8013808:	3307      	adds	r3, #7
 801380a:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 801380c:	fa02 f303 	lsl.w	r3, r2, r3
 8013810:	627b      	str	r3, [r7, #36]	; 0x24

    // Q32 linear approximation to the reciprocal square root of xQ30.  This
    // approximation is good to a bit more than 3.5 bits:
    //
    //     1/sqrt(a) ~ 1.1033542890963095 - a/6
    const uint32_t oneSixthQ34 = UINT32_C(0xaaaaaaaa);
 8013812:	f04f 33aa 	mov.w	r3, #2863311530	; 0xaaaaaaaa
 8013816:	623b      	str	r3, [r7, #32]
    uint32_t recipQ32 = UINT32_C(0x1a756d3b) - mulhi(oneSixthQ34, xQ30);
 8013818:	6a79      	ldr	r1, [r7, #36]	; 0x24
 801381a:	6a38      	ldr	r0, [r7, #32]
 801381c:	f7ff ff5d 	bl	80136da <mulhi>
 8013820:	4602      	mov	r2, r0
 8013822:	4b4c      	ldr	r3, [pc, #304]	; (8013954 <my_sqrtf+0x230>)
 8013824:	1a9b      	subs	r3, r3, r2
 8013826:	61fb      	str	r3, [r7, #28]

    // Newton-Raphson iterations to improve our reciprocal:
    const uint32_t threeQ30 = UINT32_C(0xc0000000);
 8013828:	f04f 4340 	mov.w	r3, #3221225472	; 0xc0000000
 801382c:	61bb      	str	r3, [r7, #24]
    uint32_t residualQ30 = mulhi(xQ30, mulhi(recipQ32, recipQ32));
 801382e:	69f9      	ldr	r1, [r7, #28]
 8013830:	69f8      	ldr	r0, [r7, #28]
 8013832:	f7ff ff52 	bl	80136da <mulhi>
 8013836:	4603      	mov	r3, r0
 8013838:	4619      	mov	r1, r3
 801383a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801383c:	f7ff ff4d 	bl	80136da <mulhi>
 8013840:	6178      	str	r0, [r7, #20]
    recipQ32 = mulhi(recipQ32, threeQ30 - residualQ30) << 1;
 8013842:	69ba      	ldr	r2, [r7, #24]
 8013844:	697b      	ldr	r3, [r7, #20]
 8013846:	1ad3      	subs	r3, r2, r3
 8013848:	4619      	mov	r1, r3
 801384a:	69f8      	ldr	r0, [r7, #28]
 801384c:	f7ff ff45 	bl	80136da <mulhi>
 8013850:	4603      	mov	r3, r0
 8013852:	005b      	lsls	r3, r3, #1
 8013854:	61fb      	str	r3, [r7, #28]
    residualQ30 = mulhi(xQ30, mulhi(recipQ32, recipQ32));
 8013856:	69f9      	ldr	r1, [r7, #28]
 8013858:	69f8      	ldr	r0, [r7, #28]
 801385a:	f7ff ff3e 	bl	80136da <mulhi>
 801385e:	4603      	mov	r3, r0
 8013860:	4619      	mov	r1, r3
 8013862:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8013864:	f7ff ff39 	bl	80136da <mulhi>
 8013868:	6178      	str	r0, [r7, #20]
    recipQ32 = mulhi(recipQ32, threeQ30 - residualQ30) << 1;
 801386a:	69ba      	ldr	r2, [r7, #24]
 801386c:	697b      	ldr	r3, [r7, #20]
 801386e:	1ad3      	subs	r3, r2, r3
 8013870:	4619      	mov	r1, r3
 8013872:	69f8      	ldr	r0, [r7, #28]
 8013874:	f7ff ff31 	bl	80136da <mulhi>
 8013878:	4603      	mov	r3, r0
 801387a:	005b      	lsls	r3, r3, #1
 801387c:	61fb      	str	r3, [r7, #28]
    residualQ30 = mulhi(xQ30, mulhi(recipQ32, recipQ32));
 801387e:	69f9      	ldr	r1, [r7, #28]
 8013880:	69f8      	ldr	r0, [r7, #28]
 8013882:	f7ff ff2a 	bl	80136da <mulhi>
 8013886:	4603      	mov	r3, r0
 8013888:	4619      	mov	r1, r3
 801388a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801388c:	f7ff ff25 	bl	80136da <mulhi>
 8013890:	6178      	str	r0, [r7, #20]
    recipQ32 = mulhi(recipQ32, threeQ30 - residualQ30) << 1;
 8013892:	69ba      	ldr	r2, [r7, #24]
 8013894:	697b      	ldr	r3, [r7, #20]
 8013896:	1ad3      	subs	r3, r2, r3
 8013898:	4619      	mov	r1, r3
 801389a:	69f8      	ldr	r0, [r7, #28]
 801389c:	f7ff ff1d 	bl	80136da <mulhi>
 80138a0:	4603      	mov	r3, r0
 80138a2:	005b      	lsls	r3, r3, #1
 80138a4:	61fb      	str	r3, [r7, #28]
    residualQ30 = mulhi(xQ30, mulhi(recipQ32, recipQ32));
 80138a6:	69f9      	ldr	r1, [r7, #28]
 80138a8:	69f8      	ldr	r0, [r7, #28]
 80138aa:	f7ff ff16 	bl	80136da <mulhi>
 80138ae:	4603      	mov	r3, r0
 80138b0:	4619      	mov	r1, r3
 80138b2:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80138b4:	f7ff ff11 	bl	80136da <mulhi>
 80138b8:	6178      	str	r0, [r7, #20]
    recipQ32 = mulhi(recipQ32, threeQ30 - residualQ30) << 1;
 80138ba:	69ba      	ldr	r2, [r7, #24]
 80138bc:	697b      	ldr	r3, [r7, #20]
 80138be:	1ad3      	subs	r3, r2, r3
 80138c0:	4619      	mov	r1, r3
 80138c2:	69f8      	ldr	r0, [r7, #28]
 80138c4:	f7ff ff09 	bl	80136da <mulhi>
 80138c8:	4603      	mov	r3, r0
 80138ca:	005b      	lsls	r3, r3, #1
 80138cc:	61fb      	str	r3, [r7, #28]
    // recipQ32 now holds an approximate 1/sqrt(x).  Multiply by x to get an
    // initial sqrt(x) in Q23.  From the construction of this estimate, we know
    // that it is either the correctly rounded significand of the result or one
    // less than the correctly rounded significand (the -2 guarantees that we
    // fall on the correct side of the actual square root).
    rep_t result = (mulhi(recipQ32, xQ30) - 2) >> 7;
 80138ce:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80138d0:	69f8      	ldr	r0, [r7, #28]
 80138d2:	f7ff ff02 	bl	80136da <mulhi>
 80138d6:	4603      	mov	r3, r0
 80138d8:	3b02      	subs	r3, #2
 80138da:	09db      	lsrs	r3, r3, #7
 80138dc:	613b      	str	r3, [r7, #16]

    // Compute the residual x - result*result to decide if the result needs to
    // be rounded up.
    rep_t residual = (xQ30 << 16) - result*result;
 80138de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80138e0:	041a      	lsls	r2, r3, #16
 80138e2:	693b      	ldr	r3, [r7, #16]
 80138e4:	fb03 f303 	mul.w	r3, r3, r3
 80138e8:	1ad3      	subs	r3, r2, r3
 80138ea:	60fb      	str	r3, [r7, #12]
    result += residual > result;
 80138ec:	68fa      	ldr	r2, [r7, #12]
 80138ee:	693b      	ldr	r3, [r7, #16]
 80138f0:	429a      	cmp	r2, r3
 80138f2:	bf8c      	ite	hi
 80138f4:	2301      	movhi	r3, #1
 80138f6:	2300      	movls	r3, #0
 80138f8:	b2db      	uxtb	r3, r3
 80138fa:	461a      	mov	r2, r3
 80138fc:	693b      	ldr	r3, [r7, #16]
 80138fe:	4413      	add	r3, r2
 8013900:	613b      	str	r3, [r7, #16]

    // Clear the implicit bit of result:
    result &= significandMask;
 8013902:	4b0d      	ldr	r3, [pc, #52]	; (8013938 <my_sqrtf+0x214>)
 8013904:	681b      	ldr	r3, [r3, #0]
 8013906:	693a      	ldr	r2, [r7, #16]
 8013908:	4013      	ands	r3, r2
 801390a:	613b      	str	r3, [r7, #16]
    // Insert the exponent:
    result |= (rep_t)(resultExponent + exponentBias) << significandBits;
 801390c:	4b0b      	ldr	r3, [pc, #44]	; (801393c <my_sqrtf+0x218>)
 801390e:	681a      	ldr	r2, [r3, #0]
 8013910:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013912:	4413      	add	r3, r2
 8013914:	461a      	mov	r2, r3
 8013916:	2317      	movs	r3, #23
 8013918:	fa02 f303 	lsl.w	r3, r2, r3
 801391c:	693a      	ldr	r2, [r7, #16]
 801391e:	4313      	orrs	r3, r2
 8013920:	613b      	str	r3, [r7, #16]
    return fromRep(result);
 8013922:	6938      	ldr	r0, [r7, #16]
 8013924:	f7ff fec9 	bl	80136ba <fromRep>
 8013928:	eef0 7a40 	vmov.f32	s15, s0
}
 801392c:	eeb0 0a67 	vmov.f32	s0, s15
 8013930:	3744      	adds	r7, #68	; 0x44
 8013932:	46bd      	mov	sp, r7
 8013934:	bd90      	pop	{r4, r7, pc}
 8013936:	bf00      	nop
 8013938:	08016ff4 	.word	0x08016ff4
 801393c:	08016ff8 	.word	0x08016ff8
 8013940:	08016ffc 	.word	0x08016ffc
 8013944:	08017000 	.word	0x08017000
 8013948:	08017004 	.word	0x08017004
 801394c:	08017008 	.word	0x08017008
 8013950:	0801700c 	.word	0x0801700c
 8013954:	1a756d3b 	.word	0x1a756d3b

08013958 <__errno>:
 8013958:	4b01      	ldr	r3, [pc, #4]	; (8013960 <__errno+0x8>)
 801395a:	6818      	ldr	r0, [r3, #0]
 801395c:	4770      	bx	lr
 801395e:	bf00      	nop
 8013960:	24000160 	.word	0x24000160

08013964 <__libc_init_array>:
 8013964:	b570      	push	{r4, r5, r6, lr}
 8013966:	4d0d      	ldr	r5, [pc, #52]	; (801399c <__libc_init_array+0x38>)
 8013968:	4c0d      	ldr	r4, [pc, #52]	; (80139a0 <__libc_init_array+0x3c>)
 801396a:	1b64      	subs	r4, r4, r5
 801396c:	10a4      	asrs	r4, r4, #2
 801396e:	2600      	movs	r6, #0
 8013970:	42a6      	cmp	r6, r4
 8013972:	d109      	bne.n	8013988 <__libc_init_array+0x24>
 8013974:	4d0b      	ldr	r5, [pc, #44]	; (80139a4 <__libc_init_array+0x40>)
 8013976:	4c0c      	ldr	r4, [pc, #48]	; (80139a8 <__libc_init_array+0x44>)
 8013978:	f002 fe74 	bl	8016664 <_init>
 801397c:	1b64      	subs	r4, r4, r5
 801397e:	10a4      	asrs	r4, r4, #2
 8013980:	2600      	movs	r6, #0
 8013982:	42a6      	cmp	r6, r4
 8013984:	d105      	bne.n	8013992 <__libc_init_array+0x2e>
 8013986:	bd70      	pop	{r4, r5, r6, pc}
 8013988:	f855 3b04 	ldr.w	r3, [r5], #4
 801398c:	4798      	blx	r3
 801398e:	3601      	adds	r6, #1
 8013990:	e7ee      	b.n	8013970 <__libc_init_array+0xc>
 8013992:	f855 3b04 	ldr.w	r3, [r5], #4
 8013996:	4798      	blx	r3
 8013998:	3601      	adds	r6, #1
 801399a:	e7f2      	b.n	8013982 <__libc_init_array+0x1e>
 801399c:	080173f4 	.word	0x080173f4
 80139a0:	080173f4 	.word	0x080173f4
 80139a4:	080173f4 	.word	0x080173f4
 80139a8:	080173f8 	.word	0x080173f8

080139ac <memcpy>:
 80139ac:	440a      	add	r2, r1
 80139ae:	4291      	cmp	r1, r2
 80139b0:	f100 33ff 	add.w	r3, r0, #4294967295
 80139b4:	d100      	bne.n	80139b8 <memcpy+0xc>
 80139b6:	4770      	bx	lr
 80139b8:	b510      	push	{r4, lr}
 80139ba:	f811 4b01 	ldrb.w	r4, [r1], #1
 80139be:	f803 4f01 	strb.w	r4, [r3, #1]!
 80139c2:	4291      	cmp	r1, r2
 80139c4:	d1f9      	bne.n	80139ba <memcpy+0xe>
 80139c6:	bd10      	pop	{r4, pc}

080139c8 <memset>:
 80139c8:	4402      	add	r2, r0
 80139ca:	4603      	mov	r3, r0
 80139cc:	4293      	cmp	r3, r2
 80139ce:	d100      	bne.n	80139d2 <memset+0xa>
 80139d0:	4770      	bx	lr
 80139d2:	f803 1b01 	strb.w	r1, [r3], #1
 80139d6:	e7f9      	b.n	80139cc <memset+0x4>

080139d8 <__cvt>:
 80139d8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80139da:	ed2d 8b02 	vpush	{d8}
 80139de:	eeb0 8b40 	vmov.f64	d8, d0
 80139e2:	b085      	sub	sp, #20
 80139e4:	4617      	mov	r7, r2
 80139e6:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 80139e8:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 80139ea:	ee18 2a90 	vmov	r2, s17
 80139ee:	f025 0520 	bic.w	r5, r5, #32
 80139f2:	2a00      	cmp	r2, #0
 80139f4:	bfb6      	itet	lt
 80139f6:	222d      	movlt	r2, #45	; 0x2d
 80139f8:	2200      	movge	r2, #0
 80139fa:	eeb1 8b40 	vneglt.f64	d8, d0
 80139fe:	2d46      	cmp	r5, #70	; 0x46
 8013a00:	460c      	mov	r4, r1
 8013a02:	701a      	strb	r2, [r3, #0]
 8013a04:	d004      	beq.n	8013a10 <__cvt+0x38>
 8013a06:	2d45      	cmp	r5, #69	; 0x45
 8013a08:	d100      	bne.n	8013a0c <__cvt+0x34>
 8013a0a:	3401      	adds	r4, #1
 8013a0c:	2102      	movs	r1, #2
 8013a0e:	e000      	b.n	8013a12 <__cvt+0x3a>
 8013a10:	2103      	movs	r1, #3
 8013a12:	ab03      	add	r3, sp, #12
 8013a14:	9301      	str	r3, [sp, #4]
 8013a16:	ab02      	add	r3, sp, #8
 8013a18:	9300      	str	r3, [sp, #0]
 8013a1a:	4622      	mov	r2, r4
 8013a1c:	4633      	mov	r3, r6
 8013a1e:	eeb0 0b48 	vmov.f64	d0, d8
 8013a22:	f000 fce1 	bl	80143e8 <_dtoa_r>
 8013a26:	2d47      	cmp	r5, #71	; 0x47
 8013a28:	d101      	bne.n	8013a2e <__cvt+0x56>
 8013a2a:	07fb      	lsls	r3, r7, #31
 8013a2c:	d51a      	bpl.n	8013a64 <__cvt+0x8c>
 8013a2e:	2d46      	cmp	r5, #70	; 0x46
 8013a30:	eb00 0204 	add.w	r2, r0, r4
 8013a34:	d10c      	bne.n	8013a50 <__cvt+0x78>
 8013a36:	7803      	ldrb	r3, [r0, #0]
 8013a38:	2b30      	cmp	r3, #48	; 0x30
 8013a3a:	d107      	bne.n	8013a4c <__cvt+0x74>
 8013a3c:	eeb5 8b40 	vcmp.f64	d8, #0.0
 8013a40:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013a44:	bf1c      	itt	ne
 8013a46:	f1c4 0401 	rsbne	r4, r4, #1
 8013a4a:	6034      	strne	r4, [r6, #0]
 8013a4c:	6833      	ldr	r3, [r6, #0]
 8013a4e:	441a      	add	r2, r3
 8013a50:	eeb5 8b40 	vcmp.f64	d8, #0.0
 8013a54:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013a58:	bf08      	it	eq
 8013a5a:	9203      	streq	r2, [sp, #12]
 8013a5c:	2130      	movs	r1, #48	; 0x30
 8013a5e:	9b03      	ldr	r3, [sp, #12]
 8013a60:	4293      	cmp	r3, r2
 8013a62:	d307      	bcc.n	8013a74 <__cvt+0x9c>
 8013a64:	9b03      	ldr	r3, [sp, #12]
 8013a66:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8013a68:	1a1b      	subs	r3, r3, r0
 8013a6a:	6013      	str	r3, [r2, #0]
 8013a6c:	b005      	add	sp, #20
 8013a6e:	ecbd 8b02 	vpop	{d8}
 8013a72:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8013a74:	1c5c      	adds	r4, r3, #1
 8013a76:	9403      	str	r4, [sp, #12]
 8013a78:	7019      	strb	r1, [r3, #0]
 8013a7a:	e7f0      	b.n	8013a5e <__cvt+0x86>

08013a7c <__exponent>:
 8013a7c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8013a7e:	4603      	mov	r3, r0
 8013a80:	2900      	cmp	r1, #0
 8013a82:	bfb8      	it	lt
 8013a84:	4249      	neglt	r1, r1
 8013a86:	f803 2b02 	strb.w	r2, [r3], #2
 8013a8a:	bfb4      	ite	lt
 8013a8c:	222d      	movlt	r2, #45	; 0x2d
 8013a8e:	222b      	movge	r2, #43	; 0x2b
 8013a90:	2909      	cmp	r1, #9
 8013a92:	7042      	strb	r2, [r0, #1]
 8013a94:	dd2a      	ble.n	8013aec <__exponent+0x70>
 8013a96:	f10d 0407 	add.w	r4, sp, #7
 8013a9a:	46a4      	mov	ip, r4
 8013a9c:	270a      	movs	r7, #10
 8013a9e:	46a6      	mov	lr, r4
 8013aa0:	460a      	mov	r2, r1
 8013aa2:	fb91 f6f7 	sdiv	r6, r1, r7
 8013aa6:	fb07 1516 	mls	r5, r7, r6, r1
 8013aaa:	3530      	adds	r5, #48	; 0x30
 8013aac:	2a63      	cmp	r2, #99	; 0x63
 8013aae:	f104 34ff 	add.w	r4, r4, #4294967295
 8013ab2:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8013ab6:	4631      	mov	r1, r6
 8013ab8:	dcf1      	bgt.n	8013a9e <__exponent+0x22>
 8013aba:	3130      	adds	r1, #48	; 0x30
 8013abc:	f1ae 0502 	sub.w	r5, lr, #2
 8013ac0:	f804 1c01 	strb.w	r1, [r4, #-1]
 8013ac4:	1c44      	adds	r4, r0, #1
 8013ac6:	4629      	mov	r1, r5
 8013ac8:	4561      	cmp	r1, ip
 8013aca:	d30a      	bcc.n	8013ae2 <__exponent+0x66>
 8013acc:	f10d 0209 	add.w	r2, sp, #9
 8013ad0:	eba2 020e 	sub.w	r2, r2, lr
 8013ad4:	4565      	cmp	r5, ip
 8013ad6:	bf88      	it	hi
 8013ad8:	2200      	movhi	r2, #0
 8013ada:	4413      	add	r3, r2
 8013adc:	1a18      	subs	r0, r3, r0
 8013ade:	b003      	add	sp, #12
 8013ae0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8013ae2:	f811 2b01 	ldrb.w	r2, [r1], #1
 8013ae6:	f804 2f01 	strb.w	r2, [r4, #1]!
 8013aea:	e7ed      	b.n	8013ac8 <__exponent+0x4c>
 8013aec:	2330      	movs	r3, #48	; 0x30
 8013aee:	3130      	adds	r1, #48	; 0x30
 8013af0:	7083      	strb	r3, [r0, #2]
 8013af2:	70c1      	strb	r1, [r0, #3]
 8013af4:	1d03      	adds	r3, r0, #4
 8013af6:	e7f1      	b.n	8013adc <__exponent+0x60>

08013af8 <_printf_float>:
 8013af8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013afc:	b08b      	sub	sp, #44	; 0x2c
 8013afe:	460c      	mov	r4, r1
 8013b00:	f8dd 8050 	ldr.w	r8, [sp, #80]	; 0x50
 8013b04:	4616      	mov	r6, r2
 8013b06:	461f      	mov	r7, r3
 8013b08:	4605      	mov	r5, r0
 8013b0a:	f001 f9db 	bl	8014ec4 <_localeconv_r>
 8013b0e:	f8d0 b000 	ldr.w	fp, [r0]
 8013b12:	4658      	mov	r0, fp
 8013b14:	f7ec fbe4 	bl	80002e0 <strlen>
 8013b18:	2300      	movs	r3, #0
 8013b1a:	9308      	str	r3, [sp, #32]
 8013b1c:	f8d8 3000 	ldr.w	r3, [r8]
 8013b20:	f894 9018 	ldrb.w	r9, [r4, #24]
 8013b24:	6822      	ldr	r2, [r4, #0]
 8013b26:	3307      	adds	r3, #7
 8013b28:	f023 0307 	bic.w	r3, r3, #7
 8013b2c:	f103 0108 	add.w	r1, r3, #8
 8013b30:	f8c8 1000 	str.w	r1, [r8]
 8013b34:	4682      	mov	sl, r0
 8013b36:	e9d3 0100 	ldrd	r0, r1, [r3]
 8013b3a:	e9c4 0112 	strd	r0, r1, [r4, #72]	; 0x48
 8013b3e:	ed9f 7b98 	vldr	d7, [pc, #608]	; 8013da0 <_printf_float+0x2a8>
 8013b42:	ed94 0b12 	vldr	d0, [r4, #72]	; 0x48
 8013b46:	eeb0 6bc0 	vabs.f64	d6, d0
 8013b4a:	eeb4 6b47 	vcmp.f64	d6, d7
 8013b4e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013b52:	dd24      	ble.n	8013b9e <_printf_float+0xa6>
 8013b54:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 8013b58:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013b5c:	d502      	bpl.n	8013b64 <_printf_float+0x6c>
 8013b5e:	232d      	movs	r3, #45	; 0x2d
 8013b60:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8013b64:	4b90      	ldr	r3, [pc, #576]	; (8013da8 <_printf_float+0x2b0>)
 8013b66:	4891      	ldr	r0, [pc, #580]	; (8013dac <_printf_float+0x2b4>)
 8013b68:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 8013b6c:	bf94      	ite	ls
 8013b6e:	4698      	movls	r8, r3
 8013b70:	4680      	movhi	r8, r0
 8013b72:	2303      	movs	r3, #3
 8013b74:	6123      	str	r3, [r4, #16]
 8013b76:	f022 0204 	bic.w	r2, r2, #4
 8013b7a:	2300      	movs	r3, #0
 8013b7c:	6022      	str	r2, [r4, #0]
 8013b7e:	9304      	str	r3, [sp, #16]
 8013b80:	9700      	str	r7, [sp, #0]
 8013b82:	4633      	mov	r3, r6
 8013b84:	aa09      	add	r2, sp, #36	; 0x24
 8013b86:	4621      	mov	r1, r4
 8013b88:	4628      	mov	r0, r5
 8013b8a:	f000 f9d3 	bl	8013f34 <_printf_common>
 8013b8e:	3001      	adds	r0, #1
 8013b90:	f040 808a 	bne.w	8013ca8 <_printf_float+0x1b0>
 8013b94:	f04f 30ff 	mov.w	r0, #4294967295
 8013b98:	b00b      	add	sp, #44	; 0x2c
 8013b9a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013b9e:	eeb4 0b40 	vcmp.f64	d0, d0
 8013ba2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013ba6:	d709      	bvc.n	8013bbc <_printf_float+0xc4>
 8013ba8:	ee10 3a90 	vmov	r3, s1
 8013bac:	2b00      	cmp	r3, #0
 8013bae:	bfbc      	itt	lt
 8013bb0:	232d      	movlt	r3, #45	; 0x2d
 8013bb2:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8013bb6:	487e      	ldr	r0, [pc, #504]	; (8013db0 <_printf_float+0x2b8>)
 8013bb8:	4b7e      	ldr	r3, [pc, #504]	; (8013db4 <_printf_float+0x2bc>)
 8013bba:	e7d5      	b.n	8013b68 <_printf_float+0x70>
 8013bbc:	6863      	ldr	r3, [r4, #4]
 8013bbe:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 8013bc2:	9104      	str	r1, [sp, #16]
 8013bc4:	1c59      	adds	r1, r3, #1
 8013bc6:	d13c      	bne.n	8013c42 <_printf_float+0x14a>
 8013bc8:	2306      	movs	r3, #6
 8013bca:	6063      	str	r3, [r4, #4]
 8013bcc:	2300      	movs	r3, #0
 8013bce:	9303      	str	r3, [sp, #12]
 8013bd0:	ab08      	add	r3, sp, #32
 8013bd2:	e9cd 9301 	strd	r9, r3, [sp, #4]
 8013bd6:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8013bda:	ab07      	add	r3, sp, #28
 8013bdc:	6861      	ldr	r1, [r4, #4]
 8013bde:	9300      	str	r3, [sp, #0]
 8013be0:	6022      	str	r2, [r4, #0]
 8013be2:	f10d 031b 	add.w	r3, sp, #27
 8013be6:	4628      	mov	r0, r5
 8013be8:	f7ff fef6 	bl	80139d8 <__cvt>
 8013bec:	9b04      	ldr	r3, [sp, #16]
 8013bee:	9907      	ldr	r1, [sp, #28]
 8013bf0:	2b47      	cmp	r3, #71	; 0x47
 8013bf2:	4680      	mov	r8, r0
 8013bf4:	d108      	bne.n	8013c08 <_printf_float+0x110>
 8013bf6:	1cc8      	adds	r0, r1, #3
 8013bf8:	db02      	blt.n	8013c00 <_printf_float+0x108>
 8013bfa:	6863      	ldr	r3, [r4, #4]
 8013bfc:	4299      	cmp	r1, r3
 8013bfe:	dd41      	ble.n	8013c84 <_printf_float+0x18c>
 8013c00:	f1a9 0902 	sub.w	r9, r9, #2
 8013c04:	fa5f f989 	uxtb.w	r9, r9
 8013c08:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8013c0c:	d820      	bhi.n	8013c50 <_printf_float+0x158>
 8013c0e:	3901      	subs	r1, #1
 8013c10:	464a      	mov	r2, r9
 8013c12:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8013c16:	9107      	str	r1, [sp, #28]
 8013c18:	f7ff ff30 	bl	8013a7c <__exponent>
 8013c1c:	9a08      	ldr	r2, [sp, #32]
 8013c1e:	9004      	str	r0, [sp, #16]
 8013c20:	1813      	adds	r3, r2, r0
 8013c22:	2a01      	cmp	r2, #1
 8013c24:	6123      	str	r3, [r4, #16]
 8013c26:	dc02      	bgt.n	8013c2e <_printf_float+0x136>
 8013c28:	6822      	ldr	r2, [r4, #0]
 8013c2a:	07d2      	lsls	r2, r2, #31
 8013c2c:	d501      	bpl.n	8013c32 <_printf_float+0x13a>
 8013c2e:	3301      	adds	r3, #1
 8013c30:	6123      	str	r3, [r4, #16]
 8013c32:	f89d 301b 	ldrb.w	r3, [sp, #27]
 8013c36:	2b00      	cmp	r3, #0
 8013c38:	d0a2      	beq.n	8013b80 <_printf_float+0x88>
 8013c3a:	232d      	movs	r3, #45	; 0x2d
 8013c3c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8013c40:	e79e      	b.n	8013b80 <_printf_float+0x88>
 8013c42:	9904      	ldr	r1, [sp, #16]
 8013c44:	2947      	cmp	r1, #71	; 0x47
 8013c46:	d1c1      	bne.n	8013bcc <_printf_float+0xd4>
 8013c48:	2b00      	cmp	r3, #0
 8013c4a:	d1bf      	bne.n	8013bcc <_printf_float+0xd4>
 8013c4c:	2301      	movs	r3, #1
 8013c4e:	e7bc      	b.n	8013bca <_printf_float+0xd2>
 8013c50:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 8013c54:	d118      	bne.n	8013c88 <_printf_float+0x190>
 8013c56:	2900      	cmp	r1, #0
 8013c58:	6863      	ldr	r3, [r4, #4]
 8013c5a:	dd0b      	ble.n	8013c74 <_printf_float+0x17c>
 8013c5c:	6121      	str	r1, [r4, #16]
 8013c5e:	b913      	cbnz	r3, 8013c66 <_printf_float+0x16e>
 8013c60:	6822      	ldr	r2, [r4, #0]
 8013c62:	07d0      	lsls	r0, r2, #31
 8013c64:	d502      	bpl.n	8013c6c <_printf_float+0x174>
 8013c66:	3301      	adds	r3, #1
 8013c68:	440b      	add	r3, r1
 8013c6a:	6123      	str	r3, [r4, #16]
 8013c6c:	2300      	movs	r3, #0
 8013c6e:	65a1      	str	r1, [r4, #88]	; 0x58
 8013c70:	9304      	str	r3, [sp, #16]
 8013c72:	e7de      	b.n	8013c32 <_printf_float+0x13a>
 8013c74:	b913      	cbnz	r3, 8013c7c <_printf_float+0x184>
 8013c76:	6822      	ldr	r2, [r4, #0]
 8013c78:	07d2      	lsls	r2, r2, #31
 8013c7a:	d501      	bpl.n	8013c80 <_printf_float+0x188>
 8013c7c:	3302      	adds	r3, #2
 8013c7e:	e7f4      	b.n	8013c6a <_printf_float+0x172>
 8013c80:	2301      	movs	r3, #1
 8013c82:	e7f2      	b.n	8013c6a <_printf_float+0x172>
 8013c84:	f04f 0967 	mov.w	r9, #103	; 0x67
 8013c88:	9b08      	ldr	r3, [sp, #32]
 8013c8a:	4299      	cmp	r1, r3
 8013c8c:	db05      	blt.n	8013c9a <_printf_float+0x1a2>
 8013c8e:	6823      	ldr	r3, [r4, #0]
 8013c90:	6121      	str	r1, [r4, #16]
 8013c92:	07d8      	lsls	r0, r3, #31
 8013c94:	d5ea      	bpl.n	8013c6c <_printf_float+0x174>
 8013c96:	1c4b      	adds	r3, r1, #1
 8013c98:	e7e7      	b.n	8013c6a <_printf_float+0x172>
 8013c9a:	2900      	cmp	r1, #0
 8013c9c:	bfd4      	ite	le
 8013c9e:	f1c1 0202 	rsble	r2, r1, #2
 8013ca2:	2201      	movgt	r2, #1
 8013ca4:	4413      	add	r3, r2
 8013ca6:	e7e0      	b.n	8013c6a <_printf_float+0x172>
 8013ca8:	6823      	ldr	r3, [r4, #0]
 8013caa:	055a      	lsls	r2, r3, #21
 8013cac:	d407      	bmi.n	8013cbe <_printf_float+0x1c6>
 8013cae:	6923      	ldr	r3, [r4, #16]
 8013cb0:	4642      	mov	r2, r8
 8013cb2:	4631      	mov	r1, r6
 8013cb4:	4628      	mov	r0, r5
 8013cb6:	47b8      	blx	r7
 8013cb8:	3001      	adds	r0, #1
 8013cba:	d12a      	bne.n	8013d12 <_printf_float+0x21a>
 8013cbc:	e76a      	b.n	8013b94 <_printf_float+0x9c>
 8013cbe:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8013cc2:	f240 80e2 	bls.w	8013e8a <_printf_float+0x392>
 8013cc6:	ed94 7b12 	vldr	d7, [r4, #72]	; 0x48
 8013cca:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8013cce:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013cd2:	d133      	bne.n	8013d3c <_printf_float+0x244>
 8013cd4:	4a38      	ldr	r2, [pc, #224]	; (8013db8 <_printf_float+0x2c0>)
 8013cd6:	2301      	movs	r3, #1
 8013cd8:	4631      	mov	r1, r6
 8013cda:	4628      	mov	r0, r5
 8013cdc:	47b8      	blx	r7
 8013cde:	3001      	adds	r0, #1
 8013ce0:	f43f af58 	beq.w	8013b94 <_printf_float+0x9c>
 8013ce4:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 8013ce8:	429a      	cmp	r2, r3
 8013cea:	db02      	blt.n	8013cf2 <_printf_float+0x1fa>
 8013cec:	6823      	ldr	r3, [r4, #0]
 8013cee:	07d8      	lsls	r0, r3, #31
 8013cf0:	d50f      	bpl.n	8013d12 <_printf_float+0x21a>
 8013cf2:	4653      	mov	r3, sl
 8013cf4:	465a      	mov	r2, fp
 8013cf6:	4631      	mov	r1, r6
 8013cf8:	4628      	mov	r0, r5
 8013cfa:	47b8      	blx	r7
 8013cfc:	3001      	adds	r0, #1
 8013cfe:	f43f af49 	beq.w	8013b94 <_printf_float+0x9c>
 8013d02:	f04f 0800 	mov.w	r8, #0
 8013d06:	f104 091a 	add.w	r9, r4, #26
 8013d0a:	9b08      	ldr	r3, [sp, #32]
 8013d0c:	3b01      	subs	r3, #1
 8013d0e:	4543      	cmp	r3, r8
 8013d10:	dc09      	bgt.n	8013d26 <_printf_float+0x22e>
 8013d12:	6823      	ldr	r3, [r4, #0]
 8013d14:	079b      	lsls	r3, r3, #30
 8013d16:	f100 8108 	bmi.w	8013f2a <_printf_float+0x432>
 8013d1a:	68e0      	ldr	r0, [r4, #12]
 8013d1c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8013d1e:	4298      	cmp	r0, r3
 8013d20:	bfb8      	it	lt
 8013d22:	4618      	movlt	r0, r3
 8013d24:	e738      	b.n	8013b98 <_printf_float+0xa0>
 8013d26:	2301      	movs	r3, #1
 8013d28:	464a      	mov	r2, r9
 8013d2a:	4631      	mov	r1, r6
 8013d2c:	4628      	mov	r0, r5
 8013d2e:	47b8      	blx	r7
 8013d30:	3001      	adds	r0, #1
 8013d32:	f43f af2f 	beq.w	8013b94 <_printf_float+0x9c>
 8013d36:	f108 0801 	add.w	r8, r8, #1
 8013d3a:	e7e6      	b.n	8013d0a <_printf_float+0x212>
 8013d3c:	9b07      	ldr	r3, [sp, #28]
 8013d3e:	2b00      	cmp	r3, #0
 8013d40:	dc3c      	bgt.n	8013dbc <_printf_float+0x2c4>
 8013d42:	4a1d      	ldr	r2, [pc, #116]	; (8013db8 <_printf_float+0x2c0>)
 8013d44:	2301      	movs	r3, #1
 8013d46:	4631      	mov	r1, r6
 8013d48:	4628      	mov	r0, r5
 8013d4a:	47b8      	blx	r7
 8013d4c:	3001      	adds	r0, #1
 8013d4e:	f43f af21 	beq.w	8013b94 <_printf_float+0x9c>
 8013d52:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 8013d56:	4313      	orrs	r3, r2
 8013d58:	d102      	bne.n	8013d60 <_printf_float+0x268>
 8013d5a:	6823      	ldr	r3, [r4, #0]
 8013d5c:	07d9      	lsls	r1, r3, #31
 8013d5e:	d5d8      	bpl.n	8013d12 <_printf_float+0x21a>
 8013d60:	4653      	mov	r3, sl
 8013d62:	465a      	mov	r2, fp
 8013d64:	4631      	mov	r1, r6
 8013d66:	4628      	mov	r0, r5
 8013d68:	47b8      	blx	r7
 8013d6a:	3001      	adds	r0, #1
 8013d6c:	f43f af12 	beq.w	8013b94 <_printf_float+0x9c>
 8013d70:	f04f 0900 	mov.w	r9, #0
 8013d74:	f104 0a1a 	add.w	sl, r4, #26
 8013d78:	9b07      	ldr	r3, [sp, #28]
 8013d7a:	425b      	negs	r3, r3
 8013d7c:	454b      	cmp	r3, r9
 8013d7e:	dc01      	bgt.n	8013d84 <_printf_float+0x28c>
 8013d80:	9b08      	ldr	r3, [sp, #32]
 8013d82:	e795      	b.n	8013cb0 <_printf_float+0x1b8>
 8013d84:	2301      	movs	r3, #1
 8013d86:	4652      	mov	r2, sl
 8013d88:	4631      	mov	r1, r6
 8013d8a:	4628      	mov	r0, r5
 8013d8c:	47b8      	blx	r7
 8013d8e:	3001      	adds	r0, #1
 8013d90:	f43f af00 	beq.w	8013b94 <_printf_float+0x9c>
 8013d94:	f109 0901 	add.w	r9, r9, #1
 8013d98:	e7ee      	b.n	8013d78 <_printf_float+0x280>
 8013d9a:	bf00      	nop
 8013d9c:	f3af 8000 	nop.w
 8013da0:	ffffffff 	.word	0xffffffff
 8013da4:	7fefffff 	.word	0x7fefffff
 8013da8:	08017014 	.word	0x08017014
 8013dac:	08017018 	.word	0x08017018
 8013db0:	08017020 	.word	0x08017020
 8013db4:	0801701c 	.word	0x0801701c
 8013db8:	08017024 	.word	0x08017024
 8013dbc:	9a08      	ldr	r2, [sp, #32]
 8013dbe:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8013dc0:	429a      	cmp	r2, r3
 8013dc2:	bfa8      	it	ge
 8013dc4:	461a      	movge	r2, r3
 8013dc6:	2a00      	cmp	r2, #0
 8013dc8:	4691      	mov	r9, r2
 8013dca:	dc38      	bgt.n	8013e3e <_printf_float+0x346>
 8013dcc:	2300      	movs	r3, #0
 8013dce:	9305      	str	r3, [sp, #20]
 8013dd0:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8013dd4:	f104 021a 	add.w	r2, r4, #26
 8013dd8:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8013dda:	9905      	ldr	r1, [sp, #20]
 8013ddc:	9304      	str	r3, [sp, #16]
 8013dde:	eba3 0309 	sub.w	r3, r3, r9
 8013de2:	428b      	cmp	r3, r1
 8013de4:	dc33      	bgt.n	8013e4e <_printf_float+0x356>
 8013de6:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 8013dea:	429a      	cmp	r2, r3
 8013dec:	db3c      	blt.n	8013e68 <_printf_float+0x370>
 8013dee:	6823      	ldr	r3, [r4, #0]
 8013df0:	07da      	lsls	r2, r3, #31
 8013df2:	d439      	bmi.n	8013e68 <_printf_float+0x370>
 8013df4:	9b08      	ldr	r3, [sp, #32]
 8013df6:	9a04      	ldr	r2, [sp, #16]
 8013df8:	9907      	ldr	r1, [sp, #28]
 8013dfa:	1a9a      	subs	r2, r3, r2
 8013dfc:	eba3 0901 	sub.w	r9, r3, r1
 8013e00:	4591      	cmp	r9, r2
 8013e02:	bfa8      	it	ge
 8013e04:	4691      	movge	r9, r2
 8013e06:	f1b9 0f00 	cmp.w	r9, #0
 8013e0a:	dc35      	bgt.n	8013e78 <_printf_float+0x380>
 8013e0c:	f04f 0800 	mov.w	r8, #0
 8013e10:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8013e14:	f104 0a1a 	add.w	sl, r4, #26
 8013e18:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 8013e1c:	1a9b      	subs	r3, r3, r2
 8013e1e:	eba3 0309 	sub.w	r3, r3, r9
 8013e22:	4543      	cmp	r3, r8
 8013e24:	f77f af75 	ble.w	8013d12 <_printf_float+0x21a>
 8013e28:	2301      	movs	r3, #1
 8013e2a:	4652      	mov	r2, sl
 8013e2c:	4631      	mov	r1, r6
 8013e2e:	4628      	mov	r0, r5
 8013e30:	47b8      	blx	r7
 8013e32:	3001      	adds	r0, #1
 8013e34:	f43f aeae 	beq.w	8013b94 <_printf_float+0x9c>
 8013e38:	f108 0801 	add.w	r8, r8, #1
 8013e3c:	e7ec      	b.n	8013e18 <_printf_float+0x320>
 8013e3e:	4613      	mov	r3, r2
 8013e40:	4631      	mov	r1, r6
 8013e42:	4642      	mov	r2, r8
 8013e44:	4628      	mov	r0, r5
 8013e46:	47b8      	blx	r7
 8013e48:	3001      	adds	r0, #1
 8013e4a:	d1bf      	bne.n	8013dcc <_printf_float+0x2d4>
 8013e4c:	e6a2      	b.n	8013b94 <_printf_float+0x9c>
 8013e4e:	2301      	movs	r3, #1
 8013e50:	4631      	mov	r1, r6
 8013e52:	4628      	mov	r0, r5
 8013e54:	9204      	str	r2, [sp, #16]
 8013e56:	47b8      	blx	r7
 8013e58:	3001      	adds	r0, #1
 8013e5a:	f43f ae9b 	beq.w	8013b94 <_printf_float+0x9c>
 8013e5e:	9b05      	ldr	r3, [sp, #20]
 8013e60:	9a04      	ldr	r2, [sp, #16]
 8013e62:	3301      	adds	r3, #1
 8013e64:	9305      	str	r3, [sp, #20]
 8013e66:	e7b7      	b.n	8013dd8 <_printf_float+0x2e0>
 8013e68:	4653      	mov	r3, sl
 8013e6a:	465a      	mov	r2, fp
 8013e6c:	4631      	mov	r1, r6
 8013e6e:	4628      	mov	r0, r5
 8013e70:	47b8      	blx	r7
 8013e72:	3001      	adds	r0, #1
 8013e74:	d1be      	bne.n	8013df4 <_printf_float+0x2fc>
 8013e76:	e68d      	b.n	8013b94 <_printf_float+0x9c>
 8013e78:	9a04      	ldr	r2, [sp, #16]
 8013e7a:	464b      	mov	r3, r9
 8013e7c:	4442      	add	r2, r8
 8013e7e:	4631      	mov	r1, r6
 8013e80:	4628      	mov	r0, r5
 8013e82:	47b8      	blx	r7
 8013e84:	3001      	adds	r0, #1
 8013e86:	d1c1      	bne.n	8013e0c <_printf_float+0x314>
 8013e88:	e684      	b.n	8013b94 <_printf_float+0x9c>
 8013e8a:	9a08      	ldr	r2, [sp, #32]
 8013e8c:	2a01      	cmp	r2, #1
 8013e8e:	dc01      	bgt.n	8013e94 <_printf_float+0x39c>
 8013e90:	07db      	lsls	r3, r3, #31
 8013e92:	d537      	bpl.n	8013f04 <_printf_float+0x40c>
 8013e94:	2301      	movs	r3, #1
 8013e96:	4642      	mov	r2, r8
 8013e98:	4631      	mov	r1, r6
 8013e9a:	4628      	mov	r0, r5
 8013e9c:	47b8      	blx	r7
 8013e9e:	3001      	adds	r0, #1
 8013ea0:	f43f ae78 	beq.w	8013b94 <_printf_float+0x9c>
 8013ea4:	4653      	mov	r3, sl
 8013ea6:	465a      	mov	r2, fp
 8013ea8:	4631      	mov	r1, r6
 8013eaa:	4628      	mov	r0, r5
 8013eac:	47b8      	blx	r7
 8013eae:	3001      	adds	r0, #1
 8013eb0:	f43f ae70 	beq.w	8013b94 <_printf_float+0x9c>
 8013eb4:	ed94 7b12 	vldr	d7, [r4, #72]	; 0x48
 8013eb8:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8013ebc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013ec0:	d01b      	beq.n	8013efa <_printf_float+0x402>
 8013ec2:	9b08      	ldr	r3, [sp, #32]
 8013ec4:	f108 0201 	add.w	r2, r8, #1
 8013ec8:	3b01      	subs	r3, #1
 8013eca:	4631      	mov	r1, r6
 8013ecc:	4628      	mov	r0, r5
 8013ece:	47b8      	blx	r7
 8013ed0:	3001      	adds	r0, #1
 8013ed2:	d10e      	bne.n	8013ef2 <_printf_float+0x3fa>
 8013ed4:	e65e      	b.n	8013b94 <_printf_float+0x9c>
 8013ed6:	2301      	movs	r3, #1
 8013ed8:	464a      	mov	r2, r9
 8013eda:	4631      	mov	r1, r6
 8013edc:	4628      	mov	r0, r5
 8013ede:	47b8      	blx	r7
 8013ee0:	3001      	adds	r0, #1
 8013ee2:	f43f ae57 	beq.w	8013b94 <_printf_float+0x9c>
 8013ee6:	f108 0801 	add.w	r8, r8, #1
 8013eea:	9b08      	ldr	r3, [sp, #32]
 8013eec:	3b01      	subs	r3, #1
 8013eee:	4543      	cmp	r3, r8
 8013ef0:	dcf1      	bgt.n	8013ed6 <_printf_float+0x3de>
 8013ef2:	9b04      	ldr	r3, [sp, #16]
 8013ef4:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8013ef8:	e6db      	b.n	8013cb2 <_printf_float+0x1ba>
 8013efa:	f04f 0800 	mov.w	r8, #0
 8013efe:	f104 091a 	add.w	r9, r4, #26
 8013f02:	e7f2      	b.n	8013eea <_printf_float+0x3f2>
 8013f04:	2301      	movs	r3, #1
 8013f06:	4642      	mov	r2, r8
 8013f08:	e7df      	b.n	8013eca <_printf_float+0x3d2>
 8013f0a:	2301      	movs	r3, #1
 8013f0c:	464a      	mov	r2, r9
 8013f0e:	4631      	mov	r1, r6
 8013f10:	4628      	mov	r0, r5
 8013f12:	47b8      	blx	r7
 8013f14:	3001      	adds	r0, #1
 8013f16:	f43f ae3d 	beq.w	8013b94 <_printf_float+0x9c>
 8013f1a:	f108 0801 	add.w	r8, r8, #1
 8013f1e:	68e3      	ldr	r3, [r4, #12]
 8013f20:	9909      	ldr	r1, [sp, #36]	; 0x24
 8013f22:	1a5b      	subs	r3, r3, r1
 8013f24:	4543      	cmp	r3, r8
 8013f26:	dcf0      	bgt.n	8013f0a <_printf_float+0x412>
 8013f28:	e6f7      	b.n	8013d1a <_printf_float+0x222>
 8013f2a:	f04f 0800 	mov.w	r8, #0
 8013f2e:	f104 0919 	add.w	r9, r4, #25
 8013f32:	e7f4      	b.n	8013f1e <_printf_float+0x426>

08013f34 <_printf_common>:
 8013f34:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8013f38:	4616      	mov	r6, r2
 8013f3a:	4699      	mov	r9, r3
 8013f3c:	688a      	ldr	r2, [r1, #8]
 8013f3e:	690b      	ldr	r3, [r1, #16]
 8013f40:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8013f44:	4293      	cmp	r3, r2
 8013f46:	bfb8      	it	lt
 8013f48:	4613      	movlt	r3, r2
 8013f4a:	6033      	str	r3, [r6, #0]
 8013f4c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8013f50:	4607      	mov	r7, r0
 8013f52:	460c      	mov	r4, r1
 8013f54:	b10a      	cbz	r2, 8013f5a <_printf_common+0x26>
 8013f56:	3301      	adds	r3, #1
 8013f58:	6033      	str	r3, [r6, #0]
 8013f5a:	6823      	ldr	r3, [r4, #0]
 8013f5c:	0699      	lsls	r1, r3, #26
 8013f5e:	bf42      	ittt	mi
 8013f60:	6833      	ldrmi	r3, [r6, #0]
 8013f62:	3302      	addmi	r3, #2
 8013f64:	6033      	strmi	r3, [r6, #0]
 8013f66:	6825      	ldr	r5, [r4, #0]
 8013f68:	f015 0506 	ands.w	r5, r5, #6
 8013f6c:	d106      	bne.n	8013f7c <_printf_common+0x48>
 8013f6e:	f104 0a19 	add.w	sl, r4, #25
 8013f72:	68e3      	ldr	r3, [r4, #12]
 8013f74:	6832      	ldr	r2, [r6, #0]
 8013f76:	1a9b      	subs	r3, r3, r2
 8013f78:	42ab      	cmp	r3, r5
 8013f7a:	dc26      	bgt.n	8013fca <_printf_common+0x96>
 8013f7c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8013f80:	1e13      	subs	r3, r2, #0
 8013f82:	6822      	ldr	r2, [r4, #0]
 8013f84:	bf18      	it	ne
 8013f86:	2301      	movne	r3, #1
 8013f88:	0692      	lsls	r2, r2, #26
 8013f8a:	d42b      	bmi.n	8013fe4 <_printf_common+0xb0>
 8013f8c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8013f90:	4649      	mov	r1, r9
 8013f92:	4638      	mov	r0, r7
 8013f94:	47c0      	blx	r8
 8013f96:	3001      	adds	r0, #1
 8013f98:	d01e      	beq.n	8013fd8 <_printf_common+0xa4>
 8013f9a:	6823      	ldr	r3, [r4, #0]
 8013f9c:	68e5      	ldr	r5, [r4, #12]
 8013f9e:	6832      	ldr	r2, [r6, #0]
 8013fa0:	f003 0306 	and.w	r3, r3, #6
 8013fa4:	2b04      	cmp	r3, #4
 8013fa6:	bf08      	it	eq
 8013fa8:	1aad      	subeq	r5, r5, r2
 8013faa:	68a3      	ldr	r3, [r4, #8]
 8013fac:	6922      	ldr	r2, [r4, #16]
 8013fae:	bf0c      	ite	eq
 8013fb0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8013fb4:	2500      	movne	r5, #0
 8013fb6:	4293      	cmp	r3, r2
 8013fb8:	bfc4      	itt	gt
 8013fba:	1a9b      	subgt	r3, r3, r2
 8013fbc:	18ed      	addgt	r5, r5, r3
 8013fbe:	2600      	movs	r6, #0
 8013fc0:	341a      	adds	r4, #26
 8013fc2:	42b5      	cmp	r5, r6
 8013fc4:	d11a      	bne.n	8013ffc <_printf_common+0xc8>
 8013fc6:	2000      	movs	r0, #0
 8013fc8:	e008      	b.n	8013fdc <_printf_common+0xa8>
 8013fca:	2301      	movs	r3, #1
 8013fcc:	4652      	mov	r2, sl
 8013fce:	4649      	mov	r1, r9
 8013fd0:	4638      	mov	r0, r7
 8013fd2:	47c0      	blx	r8
 8013fd4:	3001      	adds	r0, #1
 8013fd6:	d103      	bne.n	8013fe0 <_printf_common+0xac>
 8013fd8:	f04f 30ff 	mov.w	r0, #4294967295
 8013fdc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8013fe0:	3501      	adds	r5, #1
 8013fe2:	e7c6      	b.n	8013f72 <_printf_common+0x3e>
 8013fe4:	18e1      	adds	r1, r4, r3
 8013fe6:	1c5a      	adds	r2, r3, #1
 8013fe8:	2030      	movs	r0, #48	; 0x30
 8013fea:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8013fee:	4422      	add	r2, r4
 8013ff0:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8013ff4:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8013ff8:	3302      	adds	r3, #2
 8013ffa:	e7c7      	b.n	8013f8c <_printf_common+0x58>
 8013ffc:	2301      	movs	r3, #1
 8013ffe:	4622      	mov	r2, r4
 8014000:	4649      	mov	r1, r9
 8014002:	4638      	mov	r0, r7
 8014004:	47c0      	blx	r8
 8014006:	3001      	adds	r0, #1
 8014008:	d0e6      	beq.n	8013fd8 <_printf_common+0xa4>
 801400a:	3601      	adds	r6, #1
 801400c:	e7d9      	b.n	8013fc2 <_printf_common+0x8e>
	...

08014010 <_printf_i>:
 8014010:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8014014:	7e0f      	ldrb	r7, [r1, #24]
 8014016:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8014018:	2f78      	cmp	r7, #120	; 0x78
 801401a:	4691      	mov	r9, r2
 801401c:	4680      	mov	r8, r0
 801401e:	460c      	mov	r4, r1
 8014020:	469a      	mov	sl, r3
 8014022:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8014026:	d807      	bhi.n	8014038 <_printf_i+0x28>
 8014028:	2f62      	cmp	r7, #98	; 0x62
 801402a:	d80a      	bhi.n	8014042 <_printf_i+0x32>
 801402c:	2f00      	cmp	r7, #0
 801402e:	f000 80d8 	beq.w	80141e2 <_printf_i+0x1d2>
 8014032:	2f58      	cmp	r7, #88	; 0x58
 8014034:	f000 80a3 	beq.w	801417e <_printf_i+0x16e>
 8014038:	f104 0542 	add.w	r5, r4, #66	; 0x42
 801403c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8014040:	e03a      	b.n	80140b8 <_printf_i+0xa8>
 8014042:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8014046:	2b15      	cmp	r3, #21
 8014048:	d8f6      	bhi.n	8014038 <_printf_i+0x28>
 801404a:	a101      	add	r1, pc, #4	; (adr r1, 8014050 <_printf_i+0x40>)
 801404c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8014050:	080140a9 	.word	0x080140a9
 8014054:	080140bd 	.word	0x080140bd
 8014058:	08014039 	.word	0x08014039
 801405c:	08014039 	.word	0x08014039
 8014060:	08014039 	.word	0x08014039
 8014064:	08014039 	.word	0x08014039
 8014068:	080140bd 	.word	0x080140bd
 801406c:	08014039 	.word	0x08014039
 8014070:	08014039 	.word	0x08014039
 8014074:	08014039 	.word	0x08014039
 8014078:	08014039 	.word	0x08014039
 801407c:	080141c9 	.word	0x080141c9
 8014080:	080140ed 	.word	0x080140ed
 8014084:	080141ab 	.word	0x080141ab
 8014088:	08014039 	.word	0x08014039
 801408c:	08014039 	.word	0x08014039
 8014090:	080141eb 	.word	0x080141eb
 8014094:	08014039 	.word	0x08014039
 8014098:	080140ed 	.word	0x080140ed
 801409c:	08014039 	.word	0x08014039
 80140a0:	08014039 	.word	0x08014039
 80140a4:	080141b3 	.word	0x080141b3
 80140a8:	682b      	ldr	r3, [r5, #0]
 80140aa:	1d1a      	adds	r2, r3, #4
 80140ac:	681b      	ldr	r3, [r3, #0]
 80140ae:	602a      	str	r2, [r5, #0]
 80140b0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80140b4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80140b8:	2301      	movs	r3, #1
 80140ba:	e0a3      	b.n	8014204 <_printf_i+0x1f4>
 80140bc:	6820      	ldr	r0, [r4, #0]
 80140be:	6829      	ldr	r1, [r5, #0]
 80140c0:	0606      	lsls	r6, r0, #24
 80140c2:	f101 0304 	add.w	r3, r1, #4
 80140c6:	d50a      	bpl.n	80140de <_printf_i+0xce>
 80140c8:	680e      	ldr	r6, [r1, #0]
 80140ca:	602b      	str	r3, [r5, #0]
 80140cc:	2e00      	cmp	r6, #0
 80140ce:	da03      	bge.n	80140d8 <_printf_i+0xc8>
 80140d0:	232d      	movs	r3, #45	; 0x2d
 80140d2:	4276      	negs	r6, r6
 80140d4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80140d8:	485e      	ldr	r0, [pc, #376]	; (8014254 <_printf_i+0x244>)
 80140da:	230a      	movs	r3, #10
 80140dc:	e019      	b.n	8014112 <_printf_i+0x102>
 80140de:	680e      	ldr	r6, [r1, #0]
 80140e0:	602b      	str	r3, [r5, #0]
 80140e2:	f010 0f40 	tst.w	r0, #64	; 0x40
 80140e6:	bf18      	it	ne
 80140e8:	b236      	sxthne	r6, r6
 80140ea:	e7ef      	b.n	80140cc <_printf_i+0xbc>
 80140ec:	682b      	ldr	r3, [r5, #0]
 80140ee:	6820      	ldr	r0, [r4, #0]
 80140f0:	1d19      	adds	r1, r3, #4
 80140f2:	6029      	str	r1, [r5, #0]
 80140f4:	0601      	lsls	r1, r0, #24
 80140f6:	d501      	bpl.n	80140fc <_printf_i+0xec>
 80140f8:	681e      	ldr	r6, [r3, #0]
 80140fa:	e002      	b.n	8014102 <_printf_i+0xf2>
 80140fc:	0646      	lsls	r6, r0, #25
 80140fe:	d5fb      	bpl.n	80140f8 <_printf_i+0xe8>
 8014100:	881e      	ldrh	r6, [r3, #0]
 8014102:	4854      	ldr	r0, [pc, #336]	; (8014254 <_printf_i+0x244>)
 8014104:	2f6f      	cmp	r7, #111	; 0x6f
 8014106:	bf0c      	ite	eq
 8014108:	2308      	moveq	r3, #8
 801410a:	230a      	movne	r3, #10
 801410c:	2100      	movs	r1, #0
 801410e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8014112:	6865      	ldr	r5, [r4, #4]
 8014114:	60a5      	str	r5, [r4, #8]
 8014116:	2d00      	cmp	r5, #0
 8014118:	bfa2      	ittt	ge
 801411a:	6821      	ldrge	r1, [r4, #0]
 801411c:	f021 0104 	bicge.w	r1, r1, #4
 8014120:	6021      	strge	r1, [r4, #0]
 8014122:	b90e      	cbnz	r6, 8014128 <_printf_i+0x118>
 8014124:	2d00      	cmp	r5, #0
 8014126:	d04d      	beq.n	80141c4 <_printf_i+0x1b4>
 8014128:	4615      	mov	r5, r2
 801412a:	fbb6 f1f3 	udiv	r1, r6, r3
 801412e:	fb03 6711 	mls	r7, r3, r1, r6
 8014132:	5dc7      	ldrb	r7, [r0, r7]
 8014134:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8014138:	4637      	mov	r7, r6
 801413a:	42bb      	cmp	r3, r7
 801413c:	460e      	mov	r6, r1
 801413e:	d9f4      	bls.n	801412a <_printf_i+0x11a>
 8014140:	2b08      	cmp	r3, #8
 8014142:	d10b      	bne.n	801415c <_printf_i+0x14c>
 8014144:	6823      	ldr	r3, [r4, #0]
 8014146:	07de      	lsls	r6, r3, #31
 8014148:	d508      	bpl.n	801415c <_printf_i+0x14c>
 801414a:	6923      	ldr	r3, [r4, #16]
 801414c:	6861      	ldr	r1, [r4, #4]
 801414e:	4299      	cmp	r1, r3
 8014150:	bfde      	ittt	le
 8014152:	2330      	movle	r3, #48	; 0x30
 8014154:	f805 3c01 	strble.w	r3, [r5, #-1]
 8014158:	f105 35ff 	addle.w	r5, r5, #4294967295
 801415c:	1b52      	subs	r2, r2, r5
 801415e:	6122      	str	r2, [r4, #16]
 8014160:	f8cd a000 	str.w	sl, [sp]
 8014164:	464b      	mov	r3, r9
 8014166:	aa03      	add	r2, sp, #12
 8014168:	4621      	mov	r1, r4
 801416a:	4640      	mov	r0, r8
 801416c:	f7ff fee2 	bl	8013f34 <_printf_common>
 8014170:	3001      	adds	r0, #1
 8014172:	d14c      	bne.n	801420e <_printf_i+0x1fe>
 8014174:	f04f 30ff 	mov.w	r0, #4294967295
 8014178:	b004      	add	sp, #16
 801417a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801417e:	4835      	ldr	r0, [pc, #212]	; (8014254 <_printf_i+0x244>)
 8014180:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8014184:	6829      	ldr	r1, [r5, #0]
 8014186:	6823      	ldr	r3, [r4, #0]
 8014188:	f851 6b04 	ldr.w	r6, [r1], #4
 801418c:	6029      	str	r1, [r5, #0]
 801418e:	061d      	lsls	r5, r3, #24
 8014190:	d514      	bpl.n	80141bc <_printf_i+0x1ac>
 8014192:	07df      	lsls	r7, r3, #31
 8014194:	bf44      	itt	mi
 8014196:	f043 0320 	orrmi.w	r3, r3, #32
 801419a:	6023      	strmi	r3, [r4, #0]
 801419c:	b91e      	cbnz	r6, 80141a6 <_printf_i+0x196>
 801419e:	6823      	ldr	r3, [r4, #0]
 80141a0:	f023 0320 	bic.w	r3, r3, #32
 80141a4:	6023      	str	r3, [r4, #0]
 80141a6:	2310      	movs	r3, #16
 80141a8:	e7b0      	b.n	801410c <_printf_i+0xfc>
 80141aa:	6823      	ldr	r3, [r4, #0]
 80141ac:	f043 0320 	orr.w	r3, r3, #32
 80141b0:	6023      	str	r3, [r4, #0]
 80141b2:	2378      	movs	r3, #120	; 0x78
 80141b4:	4828      	ldr	r0, [pc, #160]	; (8014258 <_printf_i+0x248>)
 80141b6:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80141ba:	e7e3      	b.n	8014184 <_printf_i+0x174>
 80141bc:	0659      	lsls	r1, r3, #25
 80141be:	bf48      	it	mi
 80141c0:	b2b6      	uxthmi	r6, r6
 80141c2:	e7e6      	b.n	8014192 <_printf_i+0x182>
 80141c4:	4615      	mov	r5, r2
 80141c6:	e7bb      	b.n	8014140 <_printf_i+0x130>
 80141c8:	682b      	ldr	r3, [r5, #0]
 80141ca:	6826      	ldr	r6, [r4, #0]
 80141cc:	6961      	ldr	r1, [r4, #20]
 80141ce:	1d18      	adds	r0, r3, #4
 80141d0:	6028      	str	r0, [r5, #0]
 80141d2:	0635      	lsls	r5, r6, #24
 80141d4:	681b      	ldr	r3, [r3, #0]
 80141d6:	d501      	bpl.n	80141dc <_printf_i+0x1cc>
 80141d8:	6019      	str	r1, [r3, #0]
 80141da:	e002      	b.n	80141e2 <_printf_i+0x1d2>
 80141dc:	0670      	lsls	r0, r6, #25
 80141de:	d5fb      	bpl.n	80141d8 <_printf_i+0x1c8>
 80141e0:	8019      	strh	r1, [r3, #0]
 80141e2:	2300      	movs	r3, #0
 80141e4:	6123      	str	r3, [r4, #16]
 80141e6:	4615      	mov	r5, r2
 80141e8:	e7ba      	b.n	8014160 <_printf_i+0x150>
 80141ea:	682b      	ldr	r3, [r5, #0]
 80141ec:	1d1a      	adds	r2, r3, #4
 80141ee:	602a      	str	r2, [r5, #0]
 80141f0:	681d      	ldr	r5, [r3, #0]
 80141f2:	6862      	ldr	r2, [r4, #4]
 80141f4:	2100      	movs	r1, #0
 80141f6:	4628      	mov	r0, r5
 80141f8:	f7ec f87a 	bl	80002f0 <memchr>
 80141fc:	b108      	cbz	r0, 8014202 <_printf_i+0x1f2>
 80141fe:	1b40      	subs	r0, r0, r5
 8014200:	6060      	str	r0, [r4, #4]
 8014202:	6863      	ldr	r3, [r4, #4]
 8014204:	6123      	str	r3, [r4, #16]
 8014206:	2300      	movs	r3, #0
 8014208:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801420c:	e7a8      	b.n	8014160 <_printf_i+0x150>
 801420e:	6923      	ldr	r3, [r4, #16]
 8014210:	462a      	mov	r2, r5
 8014212:	4649      	mov	r1, r9
 8014214:	4640      	mov	r0, r8
 8014216:	47d0      	blx	sl
 8014218:	3001      	adds	r0, #1
 801421a:	d0ab      	beq.n	8014174 <_printf_i+0x164>
 801421c:	6823      	ldr	r3, [r4, #0]
 801421e:	079b      	lsls	r3, r3, #30
 8014220:	d413      	bmi.n	801424a <_printf_i+0x23a>
 8014222:	68e0      	ldr	r0, [r4, #12]
 8014224:	9b03      	ldr	r3, [sp, #12]
 8014226:	4298      	cmp	r0, r3
 8014228:	bfb8      	it	lt
 801422a:	4618      	movlt	r0, r3
 801422c:	e7a4      	b.n	8014178 <_printf_i+0x168>
 801422e:	2301      	movs	r3, #1
 8014230:	4632      	mov	r2, r6
 8014232:	4649      	mov	r1, r9
 8014234:	4640      	mov	r0, r8
 8014236:	47d0      	blx	sl
 8014238:	3001      	adds	r0, #1
 801423a:	d09b      	beq.n	8014174 <_printf_i+0x164>
 801423c:	3501      	adds	r5, #1
 801423e:	68e3      	ldr	r3, [r4, #12]
 8014240:	9903      	ldr	r1, [sp, #12]
 8014242:	1a5b      	subs	r3, r3, r1
 8014244:	42ab      	cmp	r3, r5
 8014246:	dcf2      	bgt.n	801422e <_printf_i+0x21e>
 8014248:	e7eb      	b.n	8014222 <_printf_i+0x212>
 801424a:	2500      	movs	r5, #0
 801424c:	f104 0619 	add.w	r6, r4, #25
 8014250:	e7f5      	b.n	801423e <_printf_i+0x22e>
 8014252:	bf00      	nop
 8014254:	08017026 	.word	0x08017026
 8014258:	08017037 	.word	0x08017037

0801425c <_vsniprintf_r>:
 801425c:	b530      	push	{r4, r5, lr}
 801425e:	4614      	mov	r4, r2
 8014260:	2c00      	cmp	r4, #0
 8014262:	b09b      	sub	sp, #108	; 0x6c
 8014264:	4605      	mov	r5, r0
 8014266:	461a      	mov	r2, r3
 8014268:	da05      	bge.n	8014276 <_vsniprintf_r+0x1a>
 801426a:	238b      	movs	r3, #139	; 0x8b
 801426c:	6003      	str	r3, [r0, #0]
 801426e:	f04f 30ff 	mov.w	r0, #4294967295
 8014272:	b01b      	add	sp, #108	; 0x6c
 8014274:	bd30      	pop	{r4, r5, pc}
 8014276:	f44f 7302 	mov.w	r3, #520	; 0x208
 801427a:	f8ad 300c 	strh.w	r3, [sp, #12]
 801427e:	bf14      	ite	ne
 8014280:	f104 33ff 	addne.w	r3, r4, #4294967295
 8014284:	4623      	moveq	r3, r4
 8014286:	9302      	str	r3, [sp, #8]
 8014288:	9305      	str	r3, [sp, #20]
 801428a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 801428e:	9100      	str	r1, [sp, #0]
 8014290:	9104      	str	r1, [sp, #16]
 8014292:	f8ad 300e 	strh.w	r3, [sp, #14]
 8014296:	4669      	mov	r1, sp
 8014298:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 801429a:	f001 faf5 	bl	8015888 <_svfiprintf_r>
 801429e:	1c43      	adds	r3, r0, #1
 80142a0:	bfbc      	itt	lt
 80142a2:	238b      	movlt	r3, #139	; 0x8b
 80142a4:	602b      	strlt	r3, [r5, #0]
 80142a6:	2c00      	cmp	r4, #0
 80142a8:	d0e3      	beq.n	8014272 <_vsniprintf_r+0x16>
 80142aa:	9b00      	ldr	r3, [sp, #0]
 80142ac:	2200      	movs	r2, #0
 80142ae:	701a      	strb	r2, [r3, #0]
 80142b0:	e7df      	b.n	8014272 <_vsniprintf_r+0x16>
	...

080142b4 <vsniprintf>:
 80142b4:	b507      	push	{r0, r1, r2, lr}
 80142b6:	9300      	str	r3, [sp, #0]
 80142b8:	4613      	mov	r3, r2
 80142ba:	460a      	mov	r2, r1
 80142bc:	4601      	mov	r1, r0
 80142be:	4803      	ldr	r0, [pc, #12]	; (80142cc <vsniprintf+0x18>)
 80142c0:	6800      	ldr	r0, [r0, #0]
 80142c2:	f7ff ffcb 	bl	801425c <_vsniprintf_r>
 80142c6:	b003      	add	sp, #12
 80142c8:	f85d fb04 	ldr.w	pc, [sp], #4
 80142cc:	24000160 	.word	0x24000160

080142d0 <quorem>:
 80142d0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80142d4:	6903      	ldr	r3, [r0, #16]
 80142d6:	690c      	ldr	r4, [r1, #16]
 80142d8:	42a3      	cmp	r3, r4
 80142da:	4607      	mov	r7, r0
 80142dc:	f2c0 8081 	blt.w	80143e2 <quorem+0x112>
 80142e0:	3c01      	subs	r4, #1
 80142e2:	f101 0814 	add.w	r8, r1, #20
 80142e6:	f100 0514 	add.w	r5, r0, #20
 80142ea:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80142ee:	9301      	str	r3, [sp, #4]
 80142f0:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 80142f4:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80142f8:	3301      	adds	r3, #1
 80142fa:	429a      	cmp	r2, r3
 80142fc:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8014300:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8014304:	fbb2 f6f3 	udiv	r6, r2, r3
 8014308:	d331      	bcc.n	801436e <quorem+0x9e>
 801430a:	f04f 0e00 	mov.w	lr, #0
 801430e:	4640      	mov	r0, r8
 8014310:	46ac      	mov	ip, r5
 8014312:	46f2      	mov	sl, lr
 8014314:	f850 2b04 	ldr.w	r2, [r0], #4
 8014318:	b293      	uxth	r3, r2
 801431a:	fb06 e303 	mla	r3, r6, r3, lr
 801431e:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8014322:	b29b      	uxth	r3, r3
 8014324:	ebaa 0303 	sub.w	r3, sl, r3
 8014328:	f8dc a000 	ldr.w	sl, [ip]
 801432c:	0c12      	lsrs	r2, r2, #16
 801432e:	fa13 f38a 	uxtah	r3, r3, sl
 8014332:	fb06 e202 	mla	r2, r6, r2, lr
 8014336:	9300      	str	r3, [sp, #0]
 8014338:	9b00      	ldr	r3, [sp, #0]
 801433a:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 801433e:	b292      	uxth	r2, r2
 8014340:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8014344:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8014348:	f8bd 3000 	ldrh.w	r3, [sp]
 801434c:	4581      	cmp	r9, r0
 801434e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8014352:	f84c 3b04 	str.w	r3, [ip], #4
 8014356:	ea4f 4a22 	mov.w	sl, r2, asr #16
 801435a:	d2db      	bcs.n	8014314 <quorem+0x44>
 801435c:	f855 300b 	ldr.w	r3, [r5, fp]
 8014360:	b92b      	cbnz	r3, 801436e <quorem+0x9e>
 8014362:	9b01      	ldr	r3, [sp, #4]
 8014364:	3b04      	subs	r3, #4
 8014366:	429d      	cmp	r5, r3
 8014368:	461a      	mov	r2, r3
 801436a:	d32e      	bcc.n	80143ca <quorem+0xfa>
 801436c:	613c      	str	r4, [r7, #16]
 801436e:	4638      	mov	r0, r7
 8014370:	f001 f836 	bl	80153e0 <__mcmp>
 8014374:	2800      	cmp	r0, #0
 8014376:	db24      	blt.n	80143c2 <quorem+0xf2>
 8014378:	3601      	adds	r6, #1
 801437a:	4628      	mov	r0, r5
 801437c:	f04f 0c00 	mov.w	ip, #0
 8014380:	f858 2b04 	ldr.w	r2, [r8], #4
 8014384:	f8d0 e000 	ldr.w	lr, [r0]
 8014388:	b293      	uxth	r3, r2
 801438a:	ebac 0303 	sub.w	r3, ip, r3
 801438e:	0c12      	lsrs	r2, r2, #16
 8014390:	fa13 f38e 	uxtah	r3, r3, lr
 8014394:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8014398:	eb02 4223 	add.w	r2, r2, r3, asr #16
 801439c:	b29b      	uxth	r3, r3
 801439e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80143a2:	45c1      	cmp	r9, r8
 80143a4:	f840 3b04 	str.w	r3, [r0], #4
 80143a8:	ea4f 4c22 	mov.w	ip, r2, asr #16
 80143ac:	d2e8      	bcs.n	8014380 <quorem+0xb0>
 80143ae:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80143b2:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80143b6:	b922      	cbnz	r2, 80143c2 <quorem+0xf2>
 80143b8:	3b04      	subs	r3, #4
 80143ba:	429d      	cmp	r5, r3
 80143bc:	461a      	mov	r2, r3
 80143be:	d30a      	bcc.n	80143d6 <quorem+0x106>
 80143c0:	613c      	str	r4, [r7, #16]
 80143c2:	4630      	mov	r0, r6
 80143c4:	b003      	add	sp, #12
 80143c6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80143ca:	6812      	ldr	r2, [r2, #0]
 80143cc:	3b04      	subs	r3, #4
 80143ce:	2a00      	cmp	r2, #0
 80143d0:	d1cc      	bne.n	801436c <quorem+0x9c>
 80143d2:	3c01      	subs	r4, #1
 80143d4:	e7c7      	b.n	8014366 <quorem+0x96>
 80143d6:	6812      	ldr	r2, [r2, #0]
 80143d8:	3b04      	subs	r3, #4
 80143da:	2a00      	cmp	r2, #0
 80143dc:	d1f0      	bne.n	80143c0 <quorem+0xf0>
 80143de:	3c01      	subs	r4, #1
 80143e0:	e7eb      	b.n	80143ba <quorem+0xea>
 80143e2:	2000      	movs	r0, #0
 80143e4:	e7ee      	b.n	80143c4 <quorem+0xf4>
	...

080143e8 <_dtoa_r>:
 80143e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80143ec:	ed2d 8b02 	vpush	{d8}
 80143f0:	6a45      	ldr	r5, [r0, #36]	; 0x24
 80143f2:	b091      	sub	sp, #68	; 0x44
 80143f4:	ed8d 0b02 	vstr	d0, [sp, #8]
 80143f8:	ec59 8b10 	vmov	r8, r9, d0
 80143fc:	9c1c      	ldr	r4, [sp, #112]	; 0x70
 80143fe:	9106      	str	r1, [sp, #24]
 8014400:	4606      	mov	r6, r0
 8014402:	9208      	str	r2, [sp, #32]
 8014404:	930c      	str	r3, [sp, #48]	; 0x30
 8014406:	b975      	cbnz	r5, 8014426 <_dtoa_r+0x3e>
 8014408:	2010      	movs	r0, #16
 801440a:	f000 fd5f 	bl	8014ecc <malloc>
 801440e:	4602      	mov	r2, r0
 8014410:	6270      	str	r0, [r6, #36]	; 0x24
 8014412:	b920      	cbnz	r0, 801441e <_dtoa_r+0x36>
 8014414:	4baa      	ldr	r3, [pc, #680]	; (80146c0 <_dtoa_r+0x2d8>)
 8014416:	21ea      	movs	r1, #234	; 0xea
 8014418:	48aa      	ldr	r0, [pc, #680]	; (80146c4 <_dtoa_r+0x2dc>)
 801441a:	f001 fb45 	bl	8015aa8 <__assert_func>
 801441e:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8014422:	6005      	str	r5, [r0, #0]
 8014424:	60c5      	str	r5, [r0, #12]
 8014426:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8014428:	6819      	ldr	r1, [r3, #0]
 801442a:	b151      	cbz	r1, 8014442 <_dtoa_r+0x5a>
 801442c:	685a      	ldr	r2, [r3, #4]
 801442e:	604a      	str	r2, [r1, #4]
 8014430:	2301      	movs	r3, #1
 8014432:	4093      	lsls	r3, r2
 8014434:	608b      	str	r3, [r1, #8]
 8014436:	4630      	mov	r0, r6
 8014438:	f000 fd90 	bl	8014f5c <_Bfree>
 801443c:	6a73      	ldr	r3, [r6, #36]	; 0x24
 801443e:	2200      	movs	r2, #0
 8014440:	601a      	str	r2, [r3, #0]
 8014442:	f1b9 0300 	subs.w	r3, r9, #0
 8014446:	bfbb      	ittet	lt
 8014448:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 801444c:	9303      	strlt	r3, [sp, #12]
 801444e:	2300      	movge	r3, #0
 8014450:	2201      	movlt	r2, #1
 8014452:	bfac      	ite	ge
 8014454:	6023      	strge	r3, [r4, #0]
 8014456:	6022      	strlt	r2, [r4, #0]
 8014458:	4b9b      	ldr	r3, [pc, #620]	; (80146c8 <_dtoa_r+0x2e0>)
 801445a:	9c03      	ldr	r4, [sp, #12]
 801445c:	43a3      	bics	r3, r4
 801445e:	d11c      	bne.n	801449a <_dtoa_r+0xb2>
 8014460:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8014462:	f242 730f 	movw	r3, #9999	; 0x270f
 8014466:	6013      	str	r3, [r2, #0]
 8014468:	f3c4 0313 	ubfx	r3, r4, #0, #20
 801446c:	ea53 0308 	orrs.w	r3, r3, r8
 8014470:	f000 84fd 	beq.w	8014e6e <_dtoa_r+0xa86>
 8014474:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8014476:	b963      	cbnz	r3, 8014492 <_dtoa_r+0xaa>
 8014478:	4b94      	ldr	r3, [pc, #592]	; (80146cc <_dtoa_r+0x2e4>)
 801447a:	e01f      	b.n	80144bc <_dtoa_r+0xd4>
 801447c:	4b94      	ldr	r3, [pc, #592]	; (80146d0 <_dtoa_r+0x2e8>)
 801447e:	9301      	str	r3, [sp, #4]
 8014480:	3308      	adds	r3, #8
 8014482:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 8014484:	6013      	str	r3, [r2, #0]
 8014486:	9801      	ldr	r0, [sp, #4]
 8014488:	b011      	add	sp, #68	; 0x44
 801448a:	ecbd 8b02 	vpop	{d8}
 801448e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014492:	4b8e      	ldr	r3, [pc, #568]	; (80146cc <_dtoa_r+0x2e4>)
 8014494:	9301      	str	r3, [sp, #4]
 8014496:	3303      	adds	r3, #3
 8014498:	e7f3      	b.n	8014482 <_dtoa_r+0x9a>
 801449a:	ed9d 8b02 	vldr	d8, [sp, #8]
 801449e:	eeb5 8b40 	vcmp.f64	d8, #0.0
 80144a2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80144a6:	d10b      	bne.n	80144c0 <_dtoa_r+0xd8>
 80144a8:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80144aa:	2301      	movs	r3, #1
 80144ac:	6013      	str	r3, [r2, #0]
 80144ae:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 80144b0:	2b00      	cmp	r3, #0
 80144b2:	f000 84d9 	beq.w	8014e68 <_dtoa_r+0xa80>
 80144b6:	4887      	ldr	r0, [pc, #540]	; (80146d4 <_dtoa_r+0x2ec>)
 80144b8:	6018      	str	r0, [r3, #0]
 80144ba:	1e43      	subs	r3, r0, #1
 80144bc:	9301      	str	r3, [sp, #4]
 80144be:	e7e2      	b.n	8014486 <_dtoa_r+0x9e>
 80144c0:	a90f      	add	r1, sp, #60	; 0x3c
 80144c2:	aa0e      	add	r2, sp, #56	; 0x38
 80144c4:	4630      	mov	r0, r6
 80144c6:	eeb0 0b48 	vmov.f64	d0, d8
 80144ca:	f001 f82f 	bl	801552c <__d2b>
 80144ce:	f3c4 510a 	ubfx	r1, r4, #20, #11
 80144d2:	4605      	mov	r5, r0
 80144d4:	980e      	ldr	r0, [sp, #56]	; 0x38
 80144d6:	2900      	cmp	r1, #0
 80144d8:	d046      	beq.n	8014568 <_dtoa_r+0x180>
 80144da:	ee18 4a90 	vmov	r4, s17
 80144de:	f3c4 0413 	ubfx	r4, r4, #0, #20
 80144e2:	ec53 2b18 	vmov	r2, r3, d8
 80144e6:	f044 537f 	orr.w	r3, r4, #1069547520	; 0x3fc00000
 80144ea:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 80144ee:	f2a1 31ff 	subw	r1, r1, #1023	; 0x3ff
 80144f2:	2400      	movs	r4, #0
 80144f4:	ec43 2b16 	vmov	d6, r2, r3
 80144f8:	eeb7 7b08 	vmov.f64	d7, #120	; 0x3fc00000  1.5
 80144fc:	ed9f 5b6a 	vldr	d5, [pc, #424]	; 80146a8 <_dtoa_r+0x2c0>
 8014500:	ee36 7b47 	vsub.f64	d7, d6, d7
 8014504:	ed9f 6b6a 	vldr	d6, [pc, #424]	; 80146b0 <_dtoa_r+0x2c8>
 8014508:	eea7 6b05 	vfma.f64	d6, d7, d5
 801450c:	ed9f 5b6a 	vldr	d5, [pc, #424]	; 80146b8 <_dtoa_r+0x2d0>
 8014510:	ee07 1a90 	vmov	s15, r1
 8014514:	eeb8 4be7 	vcvt.f64.s32	d4, s15
 8014518:	eeb0 7b46 	vmov.f64	d7, d6
 801451c:	eea4 7b05 	vfma.f64	d7, d4, d5
 8014520:	eefd 6bc7 	vcvt.s32.f64	s13, d7
 8014524:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 8014528:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801452c:	ee16 ba90 	vmov	fp, s13
 8014530:	940a      	str	r4, [sp, #40]	; 0x28
 8014532:	d508      	bpl.n	8014546 <_dtoa_r+0x15e>
 8014534:	eeb8 6be6 	vcvt.f64.s32	d6, s13
 8014538:	eeb4 6b47 	vcmp.f64	d6, d7
 801453c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014540:	bf18      	it	ne
 8014542:	f10b 3bff 	addne.w	fp, fp, #4294967295
 8014546:	f1bb 0f16 	cmp.w	fp, #22
 801454a:	d82f      	bhi.n	80145ac <_dtoa_r+0x1c4>
 801454c:	4b62      	ldr	r3, [pc, #392]	; (80146d8 <_dtoa_r+0x2f0>)
 801454e:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8014552:	ed93 7b00 	vldr	d7, [r3]
 8014556:	eeb4 8bc7 	vcmpe.f64	d8, d7
 801455a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801455e:	d501      	bpl.n	8014564 <_dtoa_r+0x17c>
 8014560:	f10b 3bff 	add.w	fp, fp, #4294967295
 8014564:	2300      	movs	r3, #0
 8014566:	e022      	b.n	80145ae <_dtoa_r+0x1c6>
 8014568:	990f      	ldr	r1, [sp, #60]	; 0x3c
 801456a:	4401      	add	r1, r0
 801456c:	f201 4332 	addw	r3, r1, #1074	; 0x432
 8014570:	2b20      	cmp	r3, #32
 8014572:	bfc1      	itttt	gt
 8014574:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8014578:	fa04 f303 	lslgt.w	r3, r4, r3
 801457c:	f201 4412 	addwgt	r4, r1, #1042	; 0x412
 8014580:	fa28 f804 	lsrgt.w	r8, r8, r4
 8014584:	bfd6      	itet	le
 8014586:	f1c3 0320 	rsble	r3, r3, #32
 801458a:	ea43 0808 	orrgt.w	r8, r3, r8
 801458e:	fa08 f803 	lslle.w	r8, r8, r3
 8014592:	ee07 8a90 	vmov	s15, r8
 8014596:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 801459a:	3901      	subs	r1, #1
 801459c:	ee17 4a90 	vmov	r4, s15
 80145a0:	ec53 2b17 	vmov	r2, r3, d7
 80145a4:	f1a4 73f8 	sub.w	r3, r4, #32505856	; 0x1f00000
 80145a8:	2401      	movs	r4, #1
 80145aa:	e7a3      	b.n	80144f4 <_dtoa_r+0x10c>
 80145ac:	2301      	movs	r3, #1
 80145ae:	930b      	str	r3, [sp, #44]	; 0x2c
 80145b0:	1a43      	subs	r3, r0, r1
 80145b2:	1e5a      	subs	r2, r3, #1
 80145b4:	bf45      	ittet	mi
 80145b6:	f1c3 0301 	rsbmi	r3, r3, #1
 80145ba:	9304      	strmi	r3, [sp, #16]
 80145bc:	2300      	movpl	r3, #0
 80145be:	2300      	movmi	r3, #0
 80145c0:	9205      	str	r2, [sp, #20]
 80145c2:	bf54      	ite	pl
 80145c4:	9304      	strpl	r3, [sp, #16]
 80145c6:	9305      	strmi	r3, [sp, #20]
 80145c8:	f1bb 0f00 	cmp.w	fp, #0
 80145cc:	db18      	blt.n	8014600 <_dtoa_r+0x218>
 80145ce:	9b05      	ldr	r3, [sp, #20]
 80145d0:	f8cd b024 	str.w	fp, [sp, #36]	; 0x24
 80145d4:	445b      	add	r3, fp
 80145d6:	9305      	str	r3, [sp, #20]
 80145d8:	2300      	movs	r3, #0
 80145da:	9a06      	ldr	r2, [sp, #24]
 80145dc:	2a09      	cmp	r2, #9
 80145de:	d849      	bhi.n	8014674 <_dtoa_r+0x28c>
 80145e0:	2a05      	cmp	r2, #5
 80145e2:	bfc4      	itt	gt
 80145e4:	3a04      	subgt	r2, #4
 80145e6:	9206      	strgt	r2, [sp, #24]
 80145e8:	9a06      	ldr	r2, [sp, #24]
 80145ea:	f1a2 0202 	sub.w	r2, r2, #2
 80145ee:	bfcc      	ite	gt
 80145f0:	2400      	movgt	r4, #0
 80145f2:	2401      	movle	r4, #1
 80145f4:	2a03      	cmp	r2, #3
 80145f6:	d848      	bhi.n	801468a <_dtoa_r+0x2a2>
 80145f8:	e8df f002 	tbb	[pc, r2]
 80145fc:	3a2c2e0b 	.word	0x3a2c2e0b
 8014600:	9b04      	ldr	r3, [sp, #16]
 8014602:	2200      	movs	r2, #0
 8014604:	eba3 030b 	sub.w	r3, r3, fp
 8014608:	9304      	str	r3, [sp, #16]
 801460a:	9209      	str	r2, [sp, #36]	; 0x24
 801460c:	f1cb 0300 	rsb	r3, fp, #0
 8014610:	e7e3      	b.n	80145da <_dtoa_r+0x1f2>
 8014612:	2200      	movs	r2, #0
 8014614:	9207      	str	r2, [sp, #28]
 8014616:	9a08      	ldr	r2, [sp, #32]
 8014618:	2a00      	cmp	r2, #0
 801461a:	dc39      	bgt.n	8014690 <_dtoa_r+0x2a8>
 801461c:	f04f 0a01 	mov.w	sl, #1
 8014620:	46d1      	mov	r9, sl
 8014622:	4652      	mov	r2, sl
 8014624:	f8cd a020 	str.w	sl, [sp, #32]
 8014628:	6a77      	ldr	r7, [r6, #36]	; 0x24
 801462a:	2100      	movs	r1, #0
 801462c:	6079      	str	r1, [r7, #4]
 801462e:	2004      	movs	r0, #4
 8014630:	f100 0c14 	add.w	ip, r0, #20
 8014634:	4594      	cmp	ip, r2
 8014636:	6879      	ldr	r1, [r7, #4]
 8014638:	d92f      	bls.n	801469a <_dtoa_r+0x2b2>
 801463a:	4630      	mov	r0, r6
 801463c:	930d      	str	r3, [sp, #52]	; 0x34
 801463e:	f000 fc4d 	bl	8014edc <_Balloc>
 8014642:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8014644:	9001      	str	r0, [sp, #4]
 8014646:	4602      	mov	r2, r0
 8014648:	2800      	cmp	r0, #0
 801464a:	d149      	bne.n	80146e0 <_dtoa_r+0x2f8>
 801464c:	4b23      	ldr	r3, [pc, #140]	; (80146dc <_dtoa_r+0x2f4>)
 801464e:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8014652:	e6e1      	b.n	8014418 <_dtoa_r+0x30>
 8014654:	2201      	movs	r2, #1
 8014656:	e7dd      	b.n	8014614 <_dtoa_r+0x22c>
 8014658:	2200      	movs	r2, #0
 801465a:	9207      	str	r2, [sp, #28]
 801465c:	9a08      	ldr	r2, [sp, #32]
 801465e:	eb0b 0a02 	add.w	sl, fp, r2
 8014662:	f10a 0901 	add.w	r9, sl, #1
 8014666:	464a      	mov	r2, r9
 8014668:	2a01      	cmp	r2, #1
 801466a:	bfb8      	it	lt
 801466c:	2201      	movlt	r2, #1
 801466e:	e7db      	b.n	8014628 <_dtoa_r+0x240>
 8014670:	2201      	movs	r2, #1
 8014672:	e7f2      	b.n	801465a <_dtoa_r+0x272>
 8014674:	2401      	movs	r4, #1
 8014676:	2200      	movs	r2, #0
 8014678:	e9cd 2406 	strd	r2, r4, [sp, #24]
 801467c:	f04f 3aff 	mov.w	sl, #4294967295
 8014680:	2100      	movs	r1, #0
 8014682:	46d1      	mov	r9, sl
 8014684:	2212      	movs	r2, #18
 8014686:	9108      	str	r1, [sp, #32]
 8014688:	e7ce      	b.n	8014628 <_dtoa_r+0x240>
 801468a:	2201      	movs	r2, #1
 801468c:	9207      	str	r2, [sp, #28]
 801468e:	e7f5      	b.n	801467c <_dtoa_r+0x294>
 8014690:	f8dd a020 	ldr.w	sl, [sp, #32]
 8014694:	46d1      	mov	r9, sl
 8014696:	4652      	mov	r2, sl
 8014698:	e7c6      	b.n	8014628 <_dtoa_r+0x240>
 801469a:	3101      	adds	r1, #1
 801469c:	6079      	str	r1, [r7, #4]
 801469e:	0040      	lsls	r0, r0, #1
 80146a0:	e7c6      	b.n	8014630 <_dtoa_r+0x248>
 80146a2:	bf00      	nop
 80146a4:	f3af 8000 	nop.w
 80146a8:	636f4361 	.word	0x636f4361
 80146ac:	3fd287a7 	.word	0x3fd287a7
 80146b0:	8b60c8b3 	.word	0x8b60c8b3
 80146b4:	3fc68a28 	.word	0x3fc68a28
 80146b8:	509f79fb 	.word	0x509f79fb
 80146bc:	3fd34413 	.word	0x3fd34413
 80146c0:	08017055 	.word	0x08017055
 80146c4:	0801706c 	.word	0x0801706c
 80146c8:	7ff00000 	.word	0x7ff00000
 80146cc:	08017051 	.word	0x08017051
 80146d0:	08017048 	.word	0x08017048
 80146d4:	08017025 	.word	0x08017025
 80146d8:	08017160 	.word	0x08017160
 80146dc:	080170c7 	.word	0x080170c7
 80146e0:	6a72      	ldr	r2, [r6, #36]	; 0x24
 80146e2:	9901      	ldr	r1, [sp, #4]
 80146e4:	6011      	str	r1, [r2, #0]
 80146e6:	f1b9 0f0e 	cmp.w	r9, #14
 80146ea:	d86c      	bhi.n	80147c6 <_dtoa_r+0x3de>
 80146ec:	2c00      	cmp	r4, #0
 80146ee:	d06a      	beq.n	80147c6 <_dtoa_r+0x3de>
 80146f0:	f1bb 0f00 	cmp.w	fp, #0
 80146f4:	f340 80a0 	ble.w	8014838 <_dtoa_r+0x450>
 80146f8:	49c1      	ldr	r1, [pc, #772]	; (8014a00 <_dtoa_r+0x618>)
 80146fa:	f00b 020f 	and.w	r2, fp, #15
 80146fe:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
 8014702:	f41b 7f80 	tst.w	fp, #256	; 0x100
 8014706:	ed92 7b00 	vldr	d7, [r2]
 801470a:	ea4f 112b 	mov.w	r1, fp, asr #4
 801470e:	f000 8087 	beq.w	8014820 <_dtoa_r+0x438>
 8014712:	4abc      	ldr	r2, [pc, #752]	; (8014a04 <_dtoa_r+0x61c>)
 8014714:	ed92 6b08 	vldr	d6, [r2, #32]
 8014718:	ee88 6b06 	vdiv.f64	d6, d8, d6
 801471c:	ed8d 6b02 	vstr	d6, [sp, #8]
 8014720:	f001 010f 	and.w	r1, r1, #15
 8014724:	2203      	movs	r2, #3
 8014726:	48b7      	ldr	r0, [pc, #732]	; (8014a04 <_dtoa_r+0x61c>)
 8014728:	2900      	cmp	r1, #0
 801472a:	d17b      	bne.n	8014824 <_dtoa_r+0x43c>
 801472c:	ed9d 6b02 	vldr	d6, [sp, #8]
 8014730:	ee86 7b07 	vdiv.f64	d7, d6, d7
 8014734:	ed8d 7b02 	vstr	d7, [sp, #8]
 8014738:	990b      	ldr	r1, [sp, #44]	; 0x2c
 801473a:	2900      	cmp	r1, #0
 801473c:	f000 80a2 	beq.w	8014884 <_dtoa_r+0x49c>
 8014740:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 8014744:	ed9d 7b02 	vldr	d7, [sp, #8]
 8014748:	eeb4 7bc6 	vcmpe.f64	d7, d6
 801474c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014750:	f140 8098 	bpl.w	8014884 <_dtoa_r+0x49c>
 8014754:	f1b9 0f00 	cmp.w	r9, #0
 8014758:	f000 8094 	beq.w	8014884 <_dtoa_r+0x49c>
 801475c:	f1ba 0f00 	cmp.w	sl, #0
 8014760:	dd2f      	ble.n	80147c2 <_dtoa_r+0x3da>
 8014762:	eeb2 6b04 	vmov.f64	d6, #36	; 0x41200000  10.0
 8014766:	ee27 7b06 	vmul.f64	d7, d7, d6
 801476a:	ed8d 7b02 	vstr	d7, [sp, #8]
 801476e:	f10b 37ff 	add.w	r7, fp, #4294967295
 8014772:	3201      	adds	r2, #1
 8014774:	4650      	mov	r0, sl
 8014776:	ed9d 6b02 	vldr	d6, [sp, #8]
 801477a:	eeb1 5b0c 	vmov.f64	d5, #28	; 0x40e00000  7.0
 801477e:	ee07 2a90 	vmov	s15, r2
 8014782:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8014786:	eea7 5b06 	vfma.f64	d5, d7, d6
 801478a:	ee15 4a90 	vmov	r4, s11
 801478e:	ec52 1b15 	vmov	r1, r2, d5
 8014792:	f1a4 7250 	sub.w	r2, r4, #54525952	; 0x3400000
 8014796:	2800      	cmp	r0, #0
 8014798:	d177      	bne.n	801488a <_dtoa_r+0x4a2>
 801479a:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
 801479e:	ee36 6b47 	vsub.f64	d6, d6, d7
 80147a2:	ec42 1b17 	vmov	d7, r1, r2
 80147a6:	eeb4 6bc7 	vcmpe.f64	d6, d7
 80147aa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80147ae:	f300 8263 	bgt.w	8014c78 <_dtoa_r+0x890>
 80147b2:	eeb1 7b47 	vneg.f64	d7, d7
 80147b6:	eeb4 6bc7 	vcmpe.f64	d6, d7
 80147ba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80147be:	f100 8258 	bmi.w	8014c72 <_dtoa_r+0x88a>
 80147c2:	ed8d 8b02 	vstr	d8, [sp, #8]
 80147c6:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80147c8:	2a00      	cmp	r2, #0
 80147ca:	f2c0 811d 	blt.w	8014a08 <_dtoa_r+0x620>
 80147ce:	f1bb 0f0e 	cmp.w	fp, #14
 80147d2:	f300 8119 	bgt.w	8014a08 <_dtoa_r+0x620>
 80147d6:	4b8a      	ldr	r3, [pc, #552]	; (8014a00 <_dtoa_r+0x618>)
 80147d8:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 80147dc:	ed93 6b00 	vldr	d6, [r3]
 80147e0:	9b08      	ldr	r3, [sp, #32]
 80147e2:	2b00      	cmp	r3, #0
 80147e4:	f280 80b7 	bge.w	8014956 <_dtoa_r+0x56e>
 80147e8:	f1b9 0f00 	cmp.w	r9, #0
 80147ec:	f300 80b3 	bgt.w	8014956 <_dtoa_r+0x56e>
 80147f0:	f040 823f 	bne.w	8014c72 <_dtoa_r+0x88a>
 80147f4:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
 80147f8:	ee26 6b07 	vmul.f64	d6, d6, d7
 80147fc:	ed9d 7b02 	vldr	d7, [sp, #8]
 8014800:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8014804:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014808:	464c      	mov	r4, r9
 801480a:	464f      	mov	r7, r9
 801480c:	f280 8215 	bge.w	8014c3a <_dtoa_r+0x852>
 8014810:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8014814:	2331      	movs	r3, #49	; 0x31
 8014816:	f808 3b01 	strb.w	r3, [r8], #1
 801481a:	f10b 0b01 	add.w	fp, fp, #1
 801481e:	e211      	b.n	8014c44 <_dtoa_r+0x85c>
 8014820:	2202      	movs	r2, #2
 8014822:	e780      	b.n	8014726 <_dtoa_r+0x33e>
 8014824:	07cc      	lsls	r4, r1, #31
 8014826:	d504      	bpl.n	8014832 <_dtoa_r+0x44a>
 8014828:	ed90 6b00 	vldr	d6, [r0]
 801482c:	3201      	adds	r2, #1
 801482e:	ee27 7b06 	vmul.f64	d7, d7, d6
 8014832:	1049      	asrs	r1, r1, #1
 8014834:	3008      	adds	r0, #8
 8014836:	e777      	b.n	8014728 <_dtoa_r+0x340>
 8014838:	d022      	beq.n	8014880 <_dtoa_r+0x498>
 801483a:	f1cb 0100 	rsb	r1, fp, #0
 801483e:	4a70      	ldr	r2, [pc, #448]	; (8014a00 <_dtoa_r+0x618>)
 8014840:	f001 000f 	and.w	r0, r1, #15
 8014844:	eb02 02c0 	add.w	r2, r2, r0, lsl #3
 8014848:	ed92 7b00 	vldr	d7, [r2]
 801484c:	ee28 7b07 	vmul.f64	d7, d8, d7
 8014850:	ed8d 7b02 	vstr	d7, [sp, #8]
 8014854:	486b      	ldr	r0, [pc, #428]	; (8014a04 <_dtoa_r+0x61c>)
 8014856:	1109      	asrs	r1, r1, #4
 8014858:	2400      	movs	r4, #0
 801485a:	2202      	movs	r2, #2
 801485c:	b929      	cbnz	r1, 801486a <_dtoa_r+0x482>
 801485e:	2c00      	cmp	r4, #0
 8014860:	f43f af6a 	beq.w	8014738 <_dtoa_r+0x350>
 8014864:	ed8d 7b02 	vstr	d7, [sp, #8]
 8014868:	e766      	b.n	8014738 <_dtoa_r+0x350>
 801486a:	07cf      	lsls	r7, r1, #31
 801486c:	d505      	bpl.n	801487a <_dtoa_r+0x492>
 801486e:	ed90 6b00 	vldr	d6, [r0]
 8014872:	3201      	adds	r2, #1
 8014874:	2401      	movs	r4, #1
 8014876:	ee27 7b06 	vmul.f64	d7, d7, d6
 801487a:	1049      	asrs	r1, r1, #1
 801487c:	3008      	adds	r0, #8
 801487e:	e7ed      	b.n	801485c <_dtoa_r+0x474>
 8014880:	2202      	movs	r2, #2
 8014882:	e759      	b.n	8014738 <_dtoa_r+0x350>
 8014884:	465f      	mov	r7, fp
 8014886:	4648      	mov	r0, r9
 8014888:	e775      	b.n	8014776 <_dtoa_r+0x38e>
 801488a:	ec42 1b17 	vmov	d7, r1, r2
 801488e:	4a5c      	ldr	r2, [pc, #368]	; (8014a00 <_dtoa_r+0x618>)
 8014890:	eb02 02c0 	add.w	r2, r2, r0, lsl #3
 8014894:	ed12 4b02 	vldr	d4, [r2, #-8]
 8014898:	9a01      	ldr	r2, [sp, #4]
 801489a:	1814      	adds	r4, r2, r0
 801489c:	9a07      	ldr	r2, [sp, #28]
 801489e:	b352      	cbz	r2, 80148f6 <_dtoa_r+0x50e>
 80148a0:	eeb6 3b00 	vmov.f64	d3, #96	; 0x3f000000  0.5
 80148a4:	eeb7 2b00 	vmov.f64	d2, #112	; 0x3f800000  1.0
 80148a8:	f8dd 8004 	ldr.w	r8, [sp, #4]
 80148ac:	ee83 5b04 	vdiv.f64	d5, d3, d4
 80148b0:	eeb2 3b04 	vmov.f64	d3, #36	; 0x41200000  10.0
 80148b4:	ee35 7b47 	vsub.f64	d7, d5, d7
 80148b8:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 80148bc:	ee14 2a90 	vmov	r2, s9
 80148c0:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 80148c4:	3230      	adds	r2, #48	; 0x30
 80148c6:	ee36 6b45 	vsub.f64	d6, d6, d5
 80148ca:	eeb4 6bc7 	vcmpe.f64	d6, d7
 80148ce:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80148d2:	f808 2b01 	strb.w	r2, [r8], #1
 80148d6:	d439      	bmi.n	801494c <_dtoa_r+0x564>
 80148d8:	ee32 5b46 	vsub.f64	d5, d2, d6
 80148dc:	eeb4 5bc7 	vcmpe.f64	d5, d7
 80148e0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80148e4:	d472      	bmi.n	80149cc <_dtoa_r+0x5e4>
 80148e6:	45a0      	cmp	r8, r4
 80148e8:	f43f af6b 	beq.w	80147c2 <_dtoa_r+0x3da>
 80148ec:	ee27 7b03 	vmul.f64	d7, d7, d3
 80148f0:	ee26 6b03 	vmul.f64	d6, d6, d3
 80148f4:	e7e0      	b.n	80148b8 <_dtoa_r+0x4d0>
 80148f6:	f8dd 8004 	ldr.w	r8, [sp, #4]
 80148fa:	ee27 7b04 	vmul.f64	d7, d7, d4
 80148fe:	4621      	mov	r1, r4
 8014900:	eeb2 3b04 	vmov.f64	d3, #36	; 0x41200000  10.0
 8014904:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 8014908:	ee14 2a90 	vmov	r2, s9
 801490c:	3230      	adds	r2, #48	; 0x30
 801490e:	f808 2b01 	strb.w	r2, [r8], #1
 8014912:	45a0      	cmp	r8, r4
 8014914:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 8014918:	ee36 6b45 	vsub.f64	d6, d6, d5
 801491c:	d118      	bne.n	8014950 <_dtoa_r+0x568>
 801491e:	eeb6 5b00 	vmov.f64	d5, #96	; 0x3f000000  0.5
 8014922:	ee37 4b05 	vadd.f64	d4, d7, d5
 8014926:	eeb4 6bc4 	vcmpe.f64	d6, d4
 801492a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801492e:	dc4d      	bgt.n	80149cc <_dtoa_r+0x5e4>
 8014930:	ee35 7b47 	vsub.f64	d7, d5, d7
 8014934:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8014938:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801493c:	f57f af41 	bpl.w	80147c2 <_dtoa_r+0x3da>
 8014940:	4688      	mov	r8, r1
 8014942:	3901      	subs	r1, #1
 8014944:	f818 3c01 	ldrb.w	r3, [r8, #-1]
 8014948:	2b30      	cmp	r3, #48	; 0x30
 801494a:	d0f9      	beq.n	8014940 <_dtoa_r+0x558>
 801494c:	46bb      	mov	fp, r7
 801494e:	e02a      	b.n	80149a6 <_dtoa_r+0x5be>
 8014950:	ee26 6b03 	vmul.f64	d6, d6, d3
 8014954:	e7d6      	b.n	8014904 <_dtoa_r+0x51c>
 8014956:	ed9d 7b02 	vldr	d7, [sp, #8]
 801495a:	eeb2 4b04 	vmov.f64	d4, #36	; 0x41200000  10.0
 801495e:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8014962:	ee87 5b06 	vdiv.f64	d5, d7, d6
 8014966:	eebd 5bc5 	vcvt.s32.f64	s10, d5
 801496a:	ee15 3a10 	vmov	r3, s10
 801496e:	3330      	adds	r3, #48	; 0x30
 8014970:	f808 3b01 	strb.w	r3, [r8], #1
 8014974:	9b01      	ldr	r3, [sp, #4]
 8014976:	eba8 0303 	sub.w	r3, r8, r3
 801497a:	4599      	cmp	r9, r3
 801497c:	eeb8 3bc5 	vcvt.f64.s32	d3, s10
 8014980:	eea3 7b46 	vfms.f64	d7, d3, d6
 8014984:	d133      	bne.n	80149ee <_dtoa_r+0x606>
 8014986:	ee37 7b07 	vadd.f64	d7, d7, d7
 801498a:	eeb4 7bc6 	vcmpe.f64	d7, d6
 801498e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014992:	dc1a      	bgt.n	80149ca <_dtoa_r+0x5e2>
 8014994:	eeb4 7b46 	vcmp.f64	d7, d6
 8014998:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801499c:	d103      	bne.n	80149a6 <_dtoa_r+0x5be>
 801499e:	ee15 3a10 	vmov	r3, s10
 80149a2:	07d9      	lsls	r1, r3, #31
 80149a4:	d411      	bmi.n	80149ca <_dtoa_r+0x5e2>
 80149a6:	4629      	mov	r1, r5
 80149a8:	4630      	mov	r0, r6
 80149aa:	f000 fad7 	bl	8014f5c <_Bfree>
 80149ae:	2300      	movs	r3, #0
 80149b0:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80149b2:	f888 3000 	strb.w	r3, [r8]
 80149b6:	f10b 0301 	add.w	r3, fp, #1
 80149ba:	6013      	str	r3, [r2, #0]
 80149bc:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 80149be:	2b00      	cmp	r3, #0
 80149c0:	f43f ad61 	beq.w	8014486 <_dtoa_r+0x9e>
 80149c4:	f8c3 8000 	str.w	r8, [r3]
 80149c8:	e55d      	b.n	8014486 <_dtoa_r+0x9e>
 80149ca:	465f      	mov	r7, fp
 80149cc:	4643      	mov	r3, r8
 80149ce:	4698      	mov	r8, r3
 80149d0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80149d4:	2a39      	cmp	r2, #57	; 0x39
 80149d6:	d106      	bne.n	80149e6 <_dtoa_r+0x5fe>
 80149d8:	9a01      	ldr	r2, [sp, #4]
 80149da:	429a      	cmp	r2, r3
 80149dc:	d1f7      	bne.n	80149ce <_dtoa_r+0x5e6>
 80149de:	9901      	ldr	r1, [sp, #4]
 80149e0:	2230      	movs	r2, #48	; 0x30
 80149e2:	3701      	adds	r7, #1
 80149e4:	700a      	strb	r2, [r1, #0]
 80149e6:	781a      	ldrb	r2, [r3, #0]
 80149e8:	3201      	adds	r2, #1
 80149ea:	701a      	strb	r2, [r3, #0]
 80149ec:	e7ae      	b.n	801494c <_dtoa_r+0x564>
 80149ee:	ee27 7b04 	vmul.f64	d7, d7, d4
 80149f2:	eeb5 7b40 	vcmp.f64	d7, #0.0
 80149f6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80149fa:	d1b2      	bne.n	8014962 <_dtoa_r+0x57a>
 80149fc:	e7d3      	b.n	80149a6 <_dtoa_r+0x5be>
 80149fe:	bf00      	nop
 8014a00:	08017160 	.word	0x08017160
 8014a04:	08017138 	.word	0x08017138
 8014a08:	9907      	ldr	r1, [sp, #28]
 8014a0a:	2900      	cmp	r1, #0
 8014a0c:	f000 80d0 	beq.w	8014bb0 <_dtoa_r+0x7c8>
 8014a10:	9906      	ldr	r1, [sp, #24]
 8014a12:	2901      	cmp	r1, #1
 8014a14:	f300 80b4 	bgt.w	8014b80 <_dtoa_r+0x798>
 8014a18:	990a      	ldr	r1, [sp, #40]	; 0x28
 8014a1a:	2900      	cmp	r1, #0
 8014a1c:	f000 80ac 	beq.w	8014b78 <_dtoa_r+0x790>
 8014a20:	f202 4233 	addw	r2, r2, #1075	; 0x433
 8014a24:	f8dd 8010 	ldr.w	r8, [sp, #16]
 8014a28:	461c      	mov	r4, r3
 8014a2a:	930a      	str	r3, [sp, #40]	; 0x28
 8014a2c:	9b04      	ldr	r3, [sp, #16]
 8014a2e:	4413      	add	r3, r2
 8014a30:	9304      	str	r3, [sp, #16]
 8014a32:	9b05      	ldr	r3, [sp, #20]
 8014a34:	2101      	movs	r1, #1
 8014a36:	4413      	add	r3, r2
 8014a38:	4630      	mov	r0, r6
 8014a3a:	9305      	str	r3, [sp, #20]
 8014a3c:	f000 fb46 	bl	80150cc <__i2b>
 8014a40:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8014a42:	4607      	mov	r7, r0
 8014a44:	f1b8 0f00 	cmp.w	r8, #0
 8014a48:	dd0d      	ble.n	8014a66 <_dtoa_r+0x67e>
 8014a4a:	9a05      	ldr	r2, [sp, #20]
 8014a4c:	2a00      	cmp	r2, #0
 8014a4e:	dd0a      	ble.n	8014a66 <_dtoa_r+0x67e>
 8014a50:	4542      	cmp	r2, r8
 8014a52:	9904      	ldr	r1, [sp, #16]
 8014a54:	bfa8      	it	ge
 8014a56:	4642      	movge	r2, r8
 8014a58:	1a89      	subs	r1, r1, r2
 8014a5a:	9104      	str	r1, [sp, #16]
 8014a5c:	9905      	ldr	r1, [sp, #20]
 8014a5e:	eba8 0802 	sub.w	r8, r8, r2
 8014a62:	1a8a      	subs	r2, r1, r2
 8014a64:	9205      	str	r2, [sp, #20]
 8014a66:	b303      	cbz	r3, 8014aaa <_dtoa_r+0x6c2>
 8014a68:	9a07      	ldr	r2, [sp, #28]
 8014a6a:	2a00      	cmp	r2, #0
 8014a6c:	f000 80a5 	beq.w	8014bba <_dtoa_r+0x7d2>
 8014a70:	2c00      	cmp	r4, #0
 8014a72:	dd13      	ble.n	8014a9c <_dtoa_r+0x6b4>
 8014a74:	4639      	mov	r1, r7
 8014a76:	4622      	mov	r2, r4
 8014a78:	4630      	mov	r0, r6
 8014a7a:	930d      	str	r3, [sp, #52]	; 0x34
 8014a7c:	f000 fbe6 	bl	801524c <__pow5mult>
 8014a80:	462a      	mov	r2, r5
 8014a82:	4601      	mov	r1, r0
 8014a84:	4607      	mov	r7, r0
 8014a86:	4630      	mov	r0, r6
 8014a88:	f000 fb36 	bl	80150f8 <__multiply>
 8014a8c:	4629      	mov	r1, r5
 8014a8e:	900a      	str	r0, [sp, #40]	; 0x28
 8014a90:	4630      	mov	r0, r6
 8014a92:	f000 fa63 	bl	8014f5c <_Bfree>
 8014a96:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8014a98:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8014a9a:	4615      	mov	r5, r2
 8014a9c:	1b1a      	subs	r2, r3, r4
 8014a9e:	d004      	beq.n	8014aaa <_dtoa_r+0x6c2>
 8014aa0:	4629      	mov	r1, r5
 8014aa2:	4630      	mov	r0, r6
 8014aa4:	f000 fbd2 	bl	801524c <__pow5mult>
 8014aa8:	4605      	mov	r5, r0
 8014aaa:	2101      	movs	r1, #1
 8014aac:	4630      	mov	r0, r6
 8014aae:	f000 fb0d 	bl	80150cc <__i2b>
 8014ab2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8014ab4:	2b00      	cmp	r3, #0
 8014ab6:	4604      	mov	r4, r0
 8014ab8:	f340 8081 	ble.w	8014bbe <_dtoa_r+0x7d6>
 8014abc:	461a      	mov	r2, r3
 8014abe:	4601      	mov	r1, r0
 8014ac0:	4630      	mov	r0, r6
 8014ac2:	f000 fbc3 	bl	801524c <__pow5mult>
 8014ac6:	9b06      	ldr	r3, [sp, #24]
 8014ac8:	2b01      	cmp	r3, #1
 8014aca:	4604      	mov	r4, r0
 8014acc:	dd7a      	ble.n	8014bc4 <_dtoa_r+0x7dc>
 8014ace:	2300      	movs	r3, #0
 8014ad0:	930a      	str	r3, [sp, #40]	; 0x28
 8014ad2:	6922      	ldr	r2, [r4, #16]
 8014ad4:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 8014ad8:	6910      	ldr	r0, [r2, #16]
 8014ada:	f000 faa7 	bl	801502c <__hi0bits>
 8014ade:	f1c0 0020 	rsb	r0, r0, #32
 8014ae2:	9b05      	ldr	r3, [sp, #20]
 8014ae4:	4418      	add	r0, r3
 8014ae6:	f010 001f 	ands.w	r0, r0, #31
 8014aea:	f000 808c 	beq.w	8014c06 <_dtoa_r+0x81e>
 8014aee:	f1c0 0220 	rsb	r2, r0, #32
 8014af2:	2a04      	cmp	r2, #4
 8014af4:	f340 8085 	ble.w	8014c02 <_dtoa_r+0x81a>
 8014af8:	f1c0 001c 	rsb	r0, r0, #28
 8014afc:	9b04      	ldr	r3, [sp, #16]
 8014afe:	4403      	add	r3, r0
 8014b00:	9304      	str	r3, [sp, #16]
 8014b02:	9b05      	ldr	r3, [sp, #20]
 8014b04:	4403      	add	r3, r0
 8014b06:	4480      	add	r8, r0
 8014b08:	9305      	str	r3, [sp, #20]
 8014b0a:	9b04      	ldr	r3, [sp, #16]
 8014b0c:	2b00      	cmp	r3, #0
 8014b0e:	dd05      	ble.n	8014b1c <_dtoa_r+0x734>
 8014b10:	4629      	mov	r1, r5
 8014b12:	461a      	mov	r2, r3
 8014b14:	4630      	mov	r0, r6
 8014b16:	f000 fbf3 	bl	8015300 <__lshift>
 8014b1a:	4605      	mov	r5, r0
 8014b1c:	9b05      	ldr	r3, [sp, #20]
 8014b1e:	2b00      	cmp	r3, #0
 8014b20:	dd05      	ble.n	8014b2e <_dtoa_r+0x746>
 8014b22:	4621      	mov	r1, r4
 8014b24:	461a      	mov	r2, r3
 8014b26:	4630      	mov	r0, r6
 8014b28:	f000 fbea 	bl	8015300 <__lshift>
 8014b2c:	4604      	mov	r4, r0
 8014b2e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8014b30:	2b00      	cmp	r3, #0
 8014b32:	d06a      	beq.n	8014c0a <_dtoa_r+0x822>
 8014b34:	4621      	mov	r1, r4
 8014b36:	4628      	mov	r0, r5
 8014b38:	f000 fc52 	bl	80153e0 <__mcmp>
 8014b3c:	2800      	cmp	r0, #0
 8014b3e:	da64      	bge.n	8014c0a <_dtoa_r+0x822>
 8014b40:	2300      	movs	r3, #0
 8014b42:	4629      	mov	r1, r5
 8014b44:	220a      	movs	r2, #10
 8014b46:	4630      	mov	r0, r6
 8014b48:	f000 fa2a 	bl	8014fa0 <__multadd>
 8014b4c:	9b07      	ldr	r3, [sp, #28]
 8014b4e:	f10b 3bff 	add.w	fp, fp, #4294967295
 8014b52:	4605      	mov	r5, r0
 8014b54:	2b00      	cmp	r3, #0
 8014b56:	f000 8191 	beq.w	8014e7c <_dtoa_r+0xa94>
 8014b5a:	4639      	mov	r1, r7
 8014b5c:	2300      	movs	r3, #0
 8014b5e:	220a      	movs	r2, #10
 8014b60:	4630      	mov	r0, r6
 8014b62:	f000 fa1d 	bl	8014fa0 <__multadd>
 8014b66:	f1ba 0f00 	cmp.w	sl, #0
 8014b6a:	4607      	mov	r7, r0
 8014b6c:	f300 808d 	bgt.w	8014c8a <_dtoa_r+0x8a2>
 8014b70:	9b06      	ldr	r3, [sp, #24]
 8014b72:	2b02      	cmp	r3, #2
 8014b74:	dc50      	bgt.n	8014c18 <_dtoa_r+0x830>
 8014b76:	e088      	b.n	8014c8a <_dtoa_r+0x8a2>
 8014b78:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8014b7a:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 8014b7e:	e751      	b.n	8014a24 <_dtoa_r+0x63c>
 8014b80:	f109 34ff 	add.w	r4, r9, #4294967295
 8014b84:	42a3      	cmp	r3, r4
 8014b86:	bfbf      	itttt	lt
 8014b88:	9a09      	ldrlt	r2, [sp, #36]	; 0x24
 8014b8a:	1ae3      	sublt	r3, r4, r3
 8014b8c:	18d2      	addlt	r2, r2, r3
 8014b8e:	9209      	strlt	r2, [sp, #36]	; 0x24
 8014b90:	bfb6      	itet	lt
 8014b92:	4623      	movlt	r3, r4
 8014b94:	1b1c      	subge	r4, r3, r4
 8014b96:	2400      	movlt	r4, #0
 8014b98:	f1b9 0f00 	cmp.w	r9, #0
 8014b9c:	bfb5      	itete	lt
 8014b9e:	9a04      	ldrlt	r2, [sp, #16]
 8014ba0:	f8dd 8010 	ldrge.w	r8, [sp, #16]
 8014ba4:	eba2 0809 	sublt.w	r8, r2, r9
 8014ba8:	464a      	movge	r2, r9
 8014baa:	bfb8      	it	lt
 8014bac:	2200      	movlt	r2, #0
 8014bae:	e73c      	b.n	8014a2a <_dtoa_r+0x642>
 8014bb0:	f8dd 8010 	ldr.w	r8, [sp, #16]
 8014bb4:	9f07      	ldr	r7, [sp, #28]
 8014bb6:	461c      	mov	r4, r3
 8014bb8:	e744      	b.n	8014a44 <_dtoa_r+0x65c>
 8014bba:	461a      	mov	r2, r3
 8014bbc:	e770      	b.n	8014aa0 <_dtoa_r+0x6b8>
 8014bbe:	9b06      	ldr	r3, [sp, #24]
 8014bc0:	2b01      	cmp	r3, #1
 8014bc2:	dc18      	bgt.n	8014bf6 <_dtoa_r+0x80e>
 8014bc4:	9b02      	ldr	r3, [sp, #8]
 8014bc6:	b9b3      	cbnz	r3, 8014bf6 <_dtoa_r+0x80e>
 8014bc8:	9b03      	ldr	r3, [sp, #12]
 8014bca:	f3c3 0213 	ubfx	r2, r3, #0, #20
 8014bce:	b9a2      	cbnz	r2, 8014bfa <_dtoa_r+0x812>
 8014bd0:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8014bd4:	0d12      	lsrs	r2, r2, #20
 8014bd6:	0512      	lsls	r2, r2, #20
 8014bd8:	b18a      	cbz	r2, 8014bfe <_dtoa_r+0x816>
 8014bda:	9b04      	ldr	r3, [sp, #16]
 8014bdc:	3301      	adds	r3, #1
 8014bde:	9304      	str	r3, [sp, #16]
 8014be0:	9b05      	ldr	r3, [sp, #20]
 8014be2:	3301      	adds	r3, #1
 8014be4:	9305      	str	r3, [sp, #20]
 8014be6:	2301      	movs	r3, #1
 8014be8:	930a      	str	r3, [sp, #40]	; 0x28
 8014bea:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8014bec:	2b00      	cmp	r3, #0
 8014bee:	f47f af70 	bne.w	8014ad2 <_dtoa_r+0x6ea>
 8014bf2:	2001      	movs	r0, #1
 8014bf4:	e775      	b.n	8014ae2 <_dtoa_r+0x6fa>
 8014bf6:	2300      	movs	r3, #0
 8014bf8:	e7f6      	b.n	8014be8 <_dtoa_r+0x800>
 8014bfa:	9b02      	ldr	r3, [sp, #8]
 8014bfc:	e7f4      	b.n	8014be8 <_dtoa_r+0x800>
 8014bfe:	920a      	str	r2, [sp, #40]	; 0x28
 8014c00:	e7f3      	b.n	8014bea <_dtoa_r+0x802>
 8014c02:	d082      	beq.n	8014b0a <_dtoa_r+0x722>
 8014c04:	4610      	mov	r0, r2
 8014c06:	301c      	adds	r0, #28
 8014c08:	e778      	b.n	8014afc <_dtoa_r+0x714>
 8014c0a:	f1b9 0f00 	cmp.w	r9, #0
 8014c0e:	dc37      	bgt.n	8014c80 <_dtoa_r+0x898>
 8014c10:	9b06      	ldr	r3, [sp, #24]
 8014c12:	2b02      	cmp	r3, #2
 8014c14:	dd34      	ble.n	8014c80 <_dtoa_r+0x898>
 8014c16:	46ca      	mov	sl, r9
 8014c18:	f1ba 0f00 	cmp.w	sl, #0
 8014c1c:	d10d      	bne.n	8014c3a <_dtoa_r+0x852>
 8014c1e:	4621      	mov	r1, r4
 8014c20:	4653      	mov	r3, sl
 8014c22:	2205      	movs	r2, #5
 8014c24:	4630      	mov	r0, r6
 8014c26:	f000 f9bb 	bl	8014fa0 <__multadd>
 8014c2a:	4601      	mov	r1, r0
 8014c2c:	4604      	mov	r4, r0
 8014c2e:	4628      	mov	r0, r5
 8014c30:	f000 fbd6 	bl	80153e0 <__mcmp>
 8014c34:	2800      	cmp	r0, #0
 8014c36:	f73f adeb 	bgt.w	8014810 <_dtoa_r+0x428>
 8014c3a:	9b08      	ldr	r3, [sp, #32]
 8014c3c:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8014c40:	ea6f 0b03 	mvn.w	fp, r3
 8014c44:	f04f 0900 	mov.w	r9, #0
 8014c48:	4621      	mov	r1, r4
 8014c4a:	4630      	mov	r0, r6
 8014c4c:	f000 f986 	bl	8014f5c <_Bfree>
 8014c50:	2f00      	cmp	r7, #0
 8014c52:	f43f aea8 	beq.w	80149a6 <_dtoa_r+0x5be>
 8014c56:	f1b9 0f00 	cmp.w	r9, #0
 8014c5a:	d005      	beq.n	8014c68 <_dtoa_r+0x880>
 8014c5c:	45b9      	cmp	r9, r7
 8014c5e:	d003      	beq.n	8014c68 <_dtoa_r+0x880>
 8014c60:	4649      	mov	r1, r9
 8014c62:	4630      	mov	r0, r6
 8014c64:	f000 f97a 	bl	8014f5c <_Bfree>
 8014c68:	4639      	mov	r1, r7
 8014c6a:	4630      	mov	r0, r6
 8014c6c:	f000 f976 	bl	8014f5c <_Bfree>
 8014c70:	e699      	b.n	80149a6 <_dtoa_r+0x5be>
 8014c72:	2400      	movs	r4, #0
 8014c74:	4627      	mov	r7, r4
 8014c76:	e7e0      	b.n	8014c3a <_dtoa_r+0x852>
 8014c78:	46bb      	mov	fp, r7
 8014c7a:	4604      	mov	r4, r0
 8014c7c:	4607      	mov	r7, r0
 8014c7e:	e5c7      	b.n	8014810 <_dtoa_r+0x428>
 8014c80:	9b07      	ldr	r3, [sp, #28]
 8014c82:	46ca      	mov	sl, r9
 8014c84:	2b00      	cmp	r3, #0
 8014c86:	f000 8100 	beq.w	8014e8a <_dtoa_r+0xaa2>
 8014c8a:	f1b8 0f00 	cmp.w	r8, #0
 8014c8e:	dd05      	ble.n	8014c9c <_dtoa_r+0x8b4>
 8014c90:	4639      	mov	r1, r7
 8014c92:	4642      	mov	r2, r8
 8014c94:	4630      	mov	r0, r6
 8014c96:	f000 fb33 	bl	8015300 <__lshift>
 8014c9a:	4607      	mov	r7, r0
 8014c9c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8014c9e:	2b00      	cmp	r3, #0
 8014ca0:	d05d      	beq.n	8014d5e <_dtoa_r+0x976>
 8014ca2:	6879      	ldr	r1, [r7, #4]
 8014ca4:	4630      	mov	r0, r6
 8014ca6:	f000 f919 	bl	8014edc <_Balloc>
 8014caa:	4680      	mov	r8, r0
 8014cac:	b928      	cbnz	r0, 8014cba <_dtoa_r+0x8d2>
 8014cae:	4b82      	ldr	r3, [pc, #520]	; (8014eb8 <_dtoa_r+0xad0>)
 8014cb0:	4602      	mov	r2, r0
 8014cb2:	f240 21ea 	movw	r1, #746	; 0x2ea
 8014cb6:	f7ff bbaf 	b.w	8014418 <_dtoa_r+0x30>
 8014cba:	693a      	ldr	r2, [r7, #16]
 8014cbc:	3202      	adds	r2, #2
 8014cbe:	0092      	lsls	r2, r2, #2
 8014cc0:	f107 010c 	add.w	r1, r7, #12
 8014cc4:	300c      	adds	r0, #12
 8014cc6:	f7fe fe71 	bl	80139ac <memcpy>
 8014cca:	2201      	movs	r2, #1
 8014ccc:	4641      	mov	r1, r8
 8014cce:	4630      	mov	r0, r6
 8014cd0:	f000 fb16 	bl	8015300 <__lshift>
 8014cd4:	9b01      	ldr	r3, [sp, #4]
 8014cd6:	3301      	adds	r3, #1
 8014cd8:	9304      	str	r3, [sp, #16]
 8014cda:	9b01      	ldr	r3, [sp, #4]
 8014cdc:	4453      	add	r3, sl
 8014cde:	9308      	str	r3, [sp, #32]
 8014ce0:	9b02      	ldr	r3, [sp, #8]
 8014ce2:	f003 0301 	and.w	r3, r3, #1
 8014ce6:	46b9      	mov	r9, r7
 8014ce8:	9307      	str	r3, [sp, #28]
 8014cea:	4607      	mov	r7, r0
 8014cec:	9b04      	ldr	r3, [sp, #16]
 8014cee:	4621      	mov	r1, r4
 8014cf0:	3b01      	subs	r3, #1
 8014cf2:	4628      	mov	r0, r5
 8014cf4:	9302      	str	r3, [sp, #8]
 8014cf6:	f7ff faeb 	bl	80142d0 <quorem>
 8014cfa:	4603      	mov	r3, r0
 8014cfc:	3330      	adds	r3, #48	; 0x30
 8014cfe:	9005      	str	r0, [sp, #20]
 8014d00:	4649      	mov	r1, r9
 8014d02:	4628      	mov	r0, r5
 8014d04:	9309      	str	r3, [sp, #36]	; 0x24
 8014d06:	f000 fb6b 	bl	80153e0 <__mcmp>
 8014d0a:	463a      	mov	r2, r7
 8014d0c:	4682      	mov	sl, r0
 8014d0e:	4621      	mov	r1, r4
 8014d10:	4630      	mov	r0, r6
 8014d12:	f000 fb81 	bl	8015418 <__mdiff>
 8014d16:	68c2      	ldr	r2, [r0, #12]
 8014d18:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8014d1a:	4680      	mov	r8, r0
 8014d1c:	bb0a      	cbnz	r2, 8014d62 <_dtoa_r+0x97a>
 8014d1e:	4601      	mov	r1, r0
 8014d20:	4628      	mov	r0, r5
 8014d22:	f000 fb5d 	bl	80153e0 <__mcmp>
 8014d26:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8014d28:	4602      	mov	r2, r0
 8014d2a:	4641      	mov	r1, r8
 8014d2c:	4630      	mov	r0, r6
 8014d2e:	e9cd 3209 	strd	r3, r2, [sp, #36]	; 0x24
 8014d32:	f000 f913 	bl	8014f5c <_Bfree>
 8014d36:	9b06      	ldr	r3, [sp, #24]
 8014d38:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8014d3a:	f8dd 8010 	ldr.w	r8, [sp, #16]
 8014d3e:	ea43 0102 	orr.w	r1, r3, r2
 8014d42:	9b07      	ldr	r3, [sp, #28]
 8014d44:	430b      	orrs	r3, r1
 8014d46:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8014d48:	d10d      	bne.n	8014d66 <_dtoa_r+0x97e>
 8014d4a:	2b39      	cmp	r3, #57	; 0x39
 8014d4c:	d029      	beq.n	8014da2 <_dtoa_r+0x9ba>
 8014d4e:	f1ba 0f00 	cmp.w	sl, #0
 8014d52:	dd01      	ble.n	8014d58 <_dtoa_r+0x970>
 8014d54:	9b05      	ldr	r3, [sp, #20]
 8014d56:	3331      	adds	r3, #49	; 0x31
 8014d58:	9a02      	ldr	r2, [sp, #8]
 8014d5a:	7013      	strb	r3, [r2, #0]
 8014d5c:	e774      	b.n	8014c48 <_dtoa_r+0x860>
 8014d5e:	4638      	mov	r0, r7
 8014d60:	e7b8      	b.n	8014cd4 <_dtoa_r+0x8ec>
 8014d62:	2201      	movs	r2, #1
 8014d64:	e7e1      	b.n	8014d2a <_dtoa_r+0x942>
 8014d66:	f1ba 0f00 	cmp.w	sl, #0
 8014d6a:	db06      	blt.n	8014d7a <_dtoa_r+0x992>
 8014d6c:	9906      	ldr	r1, [sp, #24]
 8014d6e:	ea41 0a0a 	orr.w	sl, r1, sl
 8014d72:	9907      	ldr	r1, [sp, #28]
 8014d74:	ea5a 0101 	orrs.w	r1, sl, r1
 8014d78:	d120      	bne.n	8014dbc <_dtoa_r+0x9d4>
 8014d7a:	2a00      	cmp	r2, #0
 8014d7c:	ddec      	ble.n	8014d58 <_dtoa_r+0x970>
 8014d7e:	4629      	mov	r1, r5
 8014d80:	2201      	movs	r2, #1
 8014d82:	4630      	mov	r0, r6
 8014d84:	9304      	str	r3, [sp, #16]
 8014d86:	f000 fabb 	bl	8015300 <__lshift>
 8014d8a:	4621      	mov	r1, r4
 8014d8c:	4605      	mov	r5, r0
 8014d8e:	f000 fb27 	bl	80153e0 <__mcmp>
 8014d92:	2800      	cmp	r0, #0
 8014d94:	9b04      	ldr	r3, [sp, #16]
 8014d96:	dc02      	bgt.n	8014d9e <_dtoa_r+0x9b6>
 8014d98:	d1de      	bne.n	8014d58 <_dtoa_r+0x970>
 8014d9a:	07da      	lsls	r2, r3, #31
 8014d9c:	d5dc      	bpl.n	8014d58 <_dtoa_r+0x970>
 8014d9e:	2b39      	cmp	r3, #57	; 0x39
 8014da0:	d1d8      	bne.n	8014d54 <_dtoa_r+0x96c>
 8014da2:	9a02      	ldr	r2, [sp, #8]
 8014da4:	2339      	movs	r3, #57	; 0x39
 8014da6:	7013      	strb	r3, [r2, #0]
 8014da8:	4643      	mov	r3, r8
 8014daa:	4698      	mov	r8, r3
 8014dac:	3b01      	subs	r3, #1
 8014dae:	f818 2c01 	ldrb.w	r2, [r8, #-1]
 8014db2:	2a39      	cmp	r2, #57	; 0x39
 8014db4:	d051      	beq.n	8014e5a <_dtoa_r+0xa72>
 8014db6:	3201      	adds	r2, #1
 8014db8:	701a      	strb	r2, [r3, #0]
 8014dba:	e745      	b.n	8014c48 <_dtoa_r+0x860>
 8014dbc:	2a00      	cmp	r2, #0
 8014dbe:	dd03      	ble.n	8014dc8 <_dtoa_r+0x9e0>
 8014dc0:	2b39      	cmp	r3, #57	; 0x39
 8014dc2:	d0ee      	beq.n	8014da2 <_dtoa_r+0x9ba>
 8014dc4:	3301      	adds	r3, #1
 8014dc6:	e7c7      	b.n	8014d58 <_dtoa_r+0x970>
 8014dc8:	9a04      	ldr	r2, [sp, #16]
 8014dca:	9908      	ldr	r1, [sp, #32]
 8014dcc:	f802 3c01 	strb.w	r3, [r2, #-1]
 8014dd0:	428a      	cmp	r2, r1
 8014dd2:	d02b      	beq.n	8014e2c <_dtoa_r+0xa44>
 8014dd4:	4629      	mov	r1, r5
 8014dd6:	2300      	movs	r3, #0
 8014dd8:	220a      	movs	r2, #10
 8014dda:	4630      	mov	r0, r6
 8014ddc:	f000 f8e0 	bl	8014fa0 <__multadd>
 8014de0:	45b9      	cmp	r9, r7
 8014de2:	4605      	mov	r5, r0
 8014de4:	f04f 0300 	mov.w	r3, #0
 8014de8:	f04f 020a 	mov.w	r2, #10
 8014dec:	4649      	mov	r1, r9
 8014dee:	4630      	mov	r0, r6
 8014df0:	d107      	bne.n	8014e02 <_dtoa_r+0xa1a>
 8014df2:	f000 f8d5 	bl	8014fa0 <__multadd>
 8014df6:	4681      	mov	r9, r0
 8014df8:	4607      	mov	r7, r0
 8014dfa:	9b04      	ldr	r3, [sp, #16]
 8014dfc:	3301      	adds	r3, #1
 8014dfe:	9304      	str	r3, [sp, #16]
 8014e00:	e774      	b.n	8014cec <_dtoa_r+0x904>
 8014e02:	f000 f8cd 	bl	8014fa0 <__multadd>
 8014e06:	4639      	mov	r1, r7
 8014e08:	4681      	mov	r9, r0
 8014e0a:	2300      	movs	r3, #0
 8014e0c:	220a      	movs	r2, #10
 8014e0e:	4630      	mov	r0, r6
 8014e10:	f000 f8c6 	bl	8014fa0 <__multadd>
 8014e14:	4607      	mov	r7, r0
 8014e16:	e7f0      	b.n	8014dfa <_dtoa_r+0xa12>
 8014e18:	f1ba 0f00 	cmp.w	sl, #0
 8014e1c:	9a01      	ldr	r2, [sp, #4]
 8014e1e:	bfcc      	ite	gt
 8014e20:	46d0      	movgt	r8, sl
 8014e22:	f04f 0801 	movle.w	r8, #1
 8014e26:	4490      	add	r8, r2
 8014e28:	f04f 0900 	mov.w	r9, #0
 8014e2c:	4629      	mov	r1, r5
 8014e2e:	2201      	movs	r2, #1
 8014e30:	4630      	mov	r0, r6
 8014e32:	9302      	str	r3, [sp, #8]
 8014e34:	f000 fa64 	bl	8015300 <__lshift>
 8014e38:	4621      	mov	r1, r4
 8014e3a:	4605      	mov	r5, r0
 8014e3c:	f000 fad0 	bl	80153e0 <__mcmp>
 8014e40:	2800      	cmp	r0, #0
 8014e42:	dcb1      	bgt.n	8014da8 <_dtoa_r+0x9c0>
 8014e44:	d102      	bne.n	8014e4c <_dtoa_r+0xa64>
 8014e46:	9b02      	ldr	r3, [sp, #8]
 8014e48:	07db      	lsls	r3, r3, #31
 8014e4a:	d4ad      	bmi.n	8014da8 <_dtoa_r+0x9c0>
 8014e4c:	4643      	mov	r3, r8
 8014e4e:	4698      	mov	r8, r3
 8014e50:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8014e54:	2a30      	cmp	r2, #48	; 0x30
 8014e56:	d0fa      	beq.n	8014e4e <_dtoa_r+0xa66>
 8014e58:	e6f6      	b.n	8014c48 <_dtoa_r+0x860>
 8014e5a:	9a01      	ldr	r2, [sp, #4]
 8014e5c:	429a      	cmp	r2, r3
 8014e5e:	d1a4      	bne.n	8014daa <_dtoa_r+0x9c2>
 8014e60:	f10b 0b01 	add.w	fp, fp, #1
 8014e64:	2331      	movs	r3, #49	; 0x31
 8014e66:	e778      	b.n	8014d5a <_dtoa_r+0x972>
 8014e68:	4b14      	ldr	r3, [pc, #80]	; (8014ebc <_dtoa_r+0xad4>)
 8014e6a:	f7ff bb27 	b.w	80144bc <_dtoa_r+0xd4>
 8014e6e:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8014e70:	2b00      	cmp	r3, #0
 8014e72:	f47f ab03 	bne.w	801447c <_dtoa_r+0x94>
 8014e76:	4b12      	ldr	r3, [pc, #72]	; (8014ec0 <_dtoa_r+0xad8>)
 8014e78:	f7ff bb20 	b.w	80144bc <_dtoa_r+0xd4>
 8014e7c:	f1ba 0f00 	cmp.w	sl, #0
 8014e80:	dc03      	bgt.n	8014e8a <_dtoa_r+0xaa2>
 8014e82:	9b06      	ldr	r3, [sp, #24]
 8014e84:	2b02      	cmp	r3, #2
 8014e86:	f73f aec7 	bgt.w	8014c18 <_dtoa_r+0x830>
 8014e8a:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8014e8e:	4621      	mov	r1, r4
 8014e90:	4628      	mov	r0, r5
 8014e92:	f7ff fa1d 	bl	80142d0 <quorem>
 8014e96:	f100 0330 	add.w	r3, r0, #48	; 0x30
 8014e9a:	f808 3b01 	strb.w	r3, [r8], #1
 8014e9e:	9a01      	ldr	r2, [sp, #4]
 8014ea0:	eba8 0202 	sub.w	r2, r8, r2
 8014ea4:	4592      	cmp	sl, r2
 8014ea6:	ddb7      	ble.n	8014e18 <_dtoa_r+0xa30>
 8014ea8:	4629      	mov	r1, r5
 8014eaa:	2300      	movs	r3, #0
 8014eac:	220a      	movs	r2, #10
 8014eae:	4630      	mov	r0, r6
 8014eb0:	f000 f876 	bl	8014fa0 <__multadd>
 8014eb4:	4605      	mov	r5, r0
 8014eb6:	e7ea      	b.n	8014e8e <_dtoa_r+0xaa6>
 8014eb8:	080170c7 	.word	0x080170c7
 8014ebc:	08017024 	.word	0x08017024
 8014ec0:	08017048 	.word	0x08017048

08014ec4 <_localeconv_r>:
 8014ec4:	4800      	ldr	r0, [pc, #0]	; (8014ec8 <_localeconv_r+0x4>)
 8014ec6:	4770      	bx	lr
 8014ec8:	240002b4 	.word	0x240002b4

08014ecc <malloc>:
 8014ecc:	4b02      	ldr	r3, [pc, #8]	; (8014ed8 <malloc+0xc>)
 8014ece:	4601      	mov	r1, r0
 8014ed0:	6818      	ldr	r0, [r3, #0]
 8014ed2:	f000 bc09 	b.w	80156e8 <_malloc_r>
 8014ed6:	bf00      	nop
 8014ed8:	24000160 	.word	0x24000160

08014edc <_Balloc>:
 8014edc:	b570      	push	{r4, r5, r6, lr}
 8014ede:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8014ee0:	4604      	mov	r4, r0
 8014ee2:	460d      	mov	r5, r1
 8014ee4:	b976      	cbnz	r6, 8014f04 <_Balloc+0x28>
 8014ee6:	2010      	movs	r0, #16
 8014ee8:	f7ff fff0 	bl	8014ecc <malloc>
 8014eec:	4602      	mov	r2, r0
 8014eee:	6260      	str	r0, [r4, #36]	; 0x24
 8014ef0:	b920      	cbnz	r0, 8014efc <_Balloc+0x20>
 8014ef2:	4b18      	ldr	r3, [pc, #96]	; (8014f54 <_Balloc+0x78>)
 8014ef4:	4818      	ldr	r0, [pc, #96]	; (8014f58 <_Balloc+0x7c>)
 8014ef6:	2166      	movs	r1, #102	; 0x66
 8014ef8:	f000 fdd6 	bl	8015aa8 <__assert_func>
 8014efc:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8014f00:	6006      	str	r6, [r0, #0]
 8014f02:	60c6      	str	r6, [r0, #12]
 8014f04:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8014f06:	68f3      	ldr	r3, [r6, #12]
 8014f08:	b183      	cbz	r3, 8014f2c <_Balloc+0x50>
 8014f0a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8014f0c:	68db      	ldr	r3, [r3, #12]
 8014f0e:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8014f12:	b9b8      	cbnz	r0, 8014f44 <_Balloc+0x68>
 8014f14:	2101      	movs	r1, #1
 8014f16:	fa01 f605 	lsl.w	r6, r1, r5
 8014f1a:	1d72      	adds	r2, r6, #5
 8014f1c:	0092      	lsls	r2, r2, #2
 8014f1e:	4620      	mov	r0, r4
 8014f20:	f000 fb60 	bl	80155e4 <_calloc_r>
 8014f24:	b160      	cbz	r0, 8014f40 <_Balloc+0x64>
 8014f26:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8014f2a:	e00e      	b.n	8014f4a <_Balloc+0x6e>
 8014f2c:	2221      	movs	r2, #33	; 0x21
 8014f2e:	2104      	movs	r1, #4
 8014f30:	4620      	mov	r0, r4
 8014f32:	f000 fb57 	bl	80155e4 <_calloc_r>
 8014f36:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8014f38:	60f0      	str	r0, [r6, #12]
 8014f3a:	68db      	ldr	r3, [r3, #12]
 8014f3c:	2b00      	cmp	r3, #0
 8014f3e:	d1e4      	bne.n	8014f0a <_Balloc+0x2e>
 8014f40:	2000      	movs	r0, #0
 8014f42:	bd70      	pop	{r4, r5, r6, pc}
 8014f44:	6802      	ldr	r2, [r0, #0]
 8014f46:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8014f4a:	2300      	movs	r3, #0
 8014f4c:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8014f50:	e7f7      	b.n	8014f42 <_Balloc+0x66>
 8014f52:	bf00      	nop
 8014f54:	08017055 	.word	0x08017055
 8014f58:	080170d8 	.word	0x080170d8

08014f5c <_Bfree>:
 8014f5c:	b570      	push	{r4, r5, r6, lr}
 8014f5e:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8014f60:	4605      	mov	r5, r0
 8014f62:	460c      	mov	r4, r1
 8014f64:	b976      	cbnz	r6, 8014f84 <_Bfree+0x28>
 8014f66:	2010      	movs	r0, #16
 8014f68:	f7ff ffb0 	bl	8014ecc <malloc>
 8014f6c:	4602      	mov	r2, r0
 8014f6e:	6268      	str	r0, [r5, #36]	; 0x24
 8014f70:	b920      	cbnz	r0, 8014f7c <_Bfree+0x20>
 8014f72:	4b09      	ldr	r3, [pc, #36]	; (8014f98 <_Bfree+0x3c>)
 8014f74:	4809      	ldr	r0, [pc, #36]	; (8014f9c <_Bfree+0x40>)
 8014f76:	218a      	movs	r1, #138	; 0x8a
 8014f78:	f000 fd96 	bl	8015aa8 <__assert_func>
 8014f7c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8014f80:	6006      	str	r6, [r0, #0]
 8014f82:	60c6      	str	r6, [r0, #12]
 8014f84:	b13c      	cbz	r4, 8014f96 <_Bfree+0x3a>
 8014f86:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8014f88:	6862      	ldr	r2, [r4, #4]
 8014f8a:	68db      	ldr	r3, [r3, #12]
 8014f8c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8014f90:	6021      	str	r1, [r4, #0]
 8014f92:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8014f96:	bd70      	pop	{r4, r5, r6, pc}
 8014f98:	08017055 	.word	0x08017055
 8014f9c:	080170d8 	.word	0x080170d8

08014fa0 <__multadd>:
 8014fa0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8014fa4:	690d      	ldr	r5, [r1, #16]
 8014fa6:	4607      	mov	r7, r0
 8014fa8:	460c      	mov	r4, r1
 8014faa:	461e      	mov	r6, r3
 8014fac:	f101 0c14 	add.w	ip, r1, #20
 8014fb0:	2000      	movs	r0, #0
 8014fb2:	f8dc 3000 	ldr.w	r3, [ip]
 8014fb6:	b299      	uxth	r1, r3
 8014fb8:	fb02 6101 	mla	r1, r2, r1, r6
 8014fbc:	0c1e      	lsrs	r6, r3, #16
 8014fbe:	0c0b      	lsrs	r3, r1, #16
 8014fc0:	fb02 3306 	mla	r3, r2, r6, r3
 8014fc4:	b289      	uxth	r1, r1
 8014fc6:	3001      	adds	r0, #1
 8014fc8:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8014fcc:	4285      	cmp	r5, r0
 8014fce:	f84c 1b04 	str.w	r1, [ip], #4
 8014fd2:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8014fd6:	dcec      	bgt.n	8014fb2 <__multadd+0x12>
 8014fd8:	b30e      	cbz	r6, 801501e <__multadd+0x7e>
 8014fda:	68a3      	ldr	r3, [r4, #8]
 8014fdc:	42ab      	cmp	r3, r5
 8014fde:	dc19      	bgt.n	8015014 <__multadd+0x74>
 8014fe0:	6861      	ldr	r1, [r4, #4]
 8014fe2:	4638      	mov	r0, r7
 8014fe4:	3101      	adds	r1, #1
 8014fe6:	f7ff ff79 	bl	8014edc <_Balloc>
 8014fea:	4680      	mov	r8, r0
 8014fec:	b928      	cbnz	r0, 8014ffa <__multadd+0x5a>
 8014fee:	4602      	mov	r2, r0
 8014ff0:	4b0c      	ldr	r3, [pc, #48]	; (8015024 <__multadd+0x84>)
 8014ff2:	480d      	ldr	r0, [pc, #52]	; (8015028 <__multadd+0x88>)
 8014ff4:	21b5      	movs	r1, #181	; 0xb5
 8014ff6:	f000 fd57 	bl	8015aa8 <__assert_func>
 8014ffa:	6922      	ldr	r2, [r4, #16]
 8014ffc:	3202      	adds	r2, #2
 8014ffe:	f104 010c 	add.w	r1, r4, #12
 8015002:	0092      	lsls	r2, r2, #2
 8015004:	300c      	adds	r0, #12
 8015006:	f7fe fcd1 	bl	80139ac <memcpy>
 801500a:	4621      	mov	r1, r4
 801500c:	4638      	mov	r0, r7
 801500e:	f7ff ffa5 	bl	8014f5c <_Bfree>
 8015012:	4644      	mov	r4, r8
 8015014:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8015018:	3501      	adds	r5, #1
 801501a:	615e      	str	r6, [r3, #20]
 801501c:	6125      	str	r5, [r4, #16]
 801501e:	4620      	mov	r0, r4
 8015020:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8015024:	080170c7 	.word	0x080170c7
 8015028:	080170d8 	.word	0x080170d8

0801502c <__hi0bits>:
 801502c:	0c03      	lsrs	r3, r0, #16
 801502e:	041b      	lsls	r3, r3, #16
 8015030:	b9d3      	cbnz	r3, 8015068 <__hi0bits+0x3c>
 8015032:	0400      	lsls	r0, r0, #16
 8015034:	2310      	movs	r3, #16
 8015036:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 801503a:	bf04      	itt	eq
 801503c:	0200      	lsleq	r0, r0, #8
 801503e:	3308      	addeq	r3, #8
 8015040:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8015044:	bf04      	itt	eq
 8015046:	0100      	lsleq	r0, r0, #4
 8015048:	3304      	addeq	r3, #4
 801504a:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 801504e:	bf04      	itt	eq
 8015050:	0080      	lsleq	r0, r0, #2
 8015052:	3302      	addeq	r3, #2
 8015054:	2800      	cmp	r0, #0
 8015056:	db05      	blt.n	8015064 <__hi0bits+0x38>
 8015058:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 801505c:	f103 0301 	add.w	r3, r3, #1
 8015060:	bf08      	it	eq
 8015062:	2320      	moveq	r3, #32
 8015064:	4618      	mov	r0, r3
 8015066:	4770      	bx	lr
 8015068:	2300      	movs	r3, #0
 801506a:	e7e4      	b.n	8015036 <__hi0bits+0xa>

0801506c <__lo0bits>:
 801506c:	6803      	ldr	r3, [r0, #0]
 801506e:	f013 0207 	ands.w	r2, r3, #7
 8015072:	4601      	mov	r1, r0
 8015074:	d00b      	beq.n	801508e <__lo0bits+0x22>
 8015076:	07da      	lsls	r2, r3, #31
 8015078:	d423      	bmi.n	80150c2 <__lo0bits+0x56>
 801507a:	0798      	lsls	r0, r3, #30
 801507c:	bf49      	itett	mi
 801507e:	085b      	lsrmi	r3, r3, #1
 8015080:	089b      	lsrpl	r3, r3, #2
 8015082:	2001      	movmi	r0, #1
 8015084:	600b      	strmi	r3, [r1, #0]
 8015086:	bf5c      	itt	pl
 8015088:	600b      	strpl	r3, [r1, #0]
 801508a:	2002      	movpl	r0, #2
 801508c:	4770      	bx	lr
 801508e:	b298      	uxth	r0, r3
 8015090:	b9a8      	cbnz	r0, 80150be <__lo0bits+0x52>
 8015092:	0c1b      	lsrs	r3, r3, #16
 8015094:	2010      	movs	r0, #16
 8015096:	b2da      	uxtb	r2, r3
 8015098:	b90a      	cbnz	r2, 801509e <__lo0bits+0x32>
 801509a:	3008      	adds	r0, #8
 801509c:	0a1b      	lsrs	r3, r3, #8
 801509e:	071a      	lsls	r2, r3, #28
 80150a0:	bf04      	itt	eq
 80150a2:	091b      	lsreq	r3, r3, #4
 80150a4:	3004      	addeq	r0, #4
 80150a6:	079a      	lsls	r2, r3, #30
 80150a8:	bf04      	itt	eq
 80150aa:	089b      	lsreq	r3, r3, #2
 80150ac:	3002      	addeq	r0, #2
 80150ae:	07da      	lsls	r2, r3, #31
 80150b0:	d403      	bmi.n	80150ba <__lo0bits+0x4e>
 80150b2:	085b      	lsrs	r3, r3, #1
 80150b4:	f100 0001 	add.w	r0, r0, #1
 80150b8:	d005      	beq.n	80150c6 <__lo0bits+0x5a>
 80150ba:	600b      	str	r3, [r1, #0]
 80150bc:	4770      	bx	lr
 80150be:	4610      	mov	r0, r2
 80150c0:	e7e9      	b.n	8015096 <__lo0bits+0x2a>
 80150c2:	2000      	movs	r0, #0
 80150c4:	4770      	bx	lr
 80150c6:	2020      	movs	r0, #32
 80150c8:	4770      	bx	lr
	...

080150cc <__i2b>:
 80150cc:	b510      	push	{r4, lr}
 80150ce:	460c      	mov	r4, r1
 80150d0:	2101      	movs	r1, #1
 80150d2:	f7ff ff03 	bl	8014edc <_Balloc>
 80150d6:	4602      	mov	r2, r0
 80150d8:	b928      	cbnz	r0, 80150e6 <__i2b+0x1a>
 80150da:	4b05      	ldr	r3, [pc, #20]	; (80150f0 <__i2b+0x24>)
 80150dc:	4805      	ldr	r0, [pc, #20]	; (80150f4 <__i2b+0x28>)
 80150de:	f44f 71a0 	mov.w	r1, #320	; 0x140
 80150e2:	f000 fce1 	bl	8015aa8 <__assert_func>
 80150e6:	2301      	movs	r3, #1
 80150e8:	6144      	str	r4, [r0, #20]
 80150ea:	6103      	str	r3, [r0, #16]
 80150ec:	bd10      	pop	{r4, pc}
 80150ee:	bf00      	nop
 80150f0:	080170c7 	.word	0x080170c7
 80150f4:	080170d8 	.word	0x080170d8

080150f8 <__multiply>:
 80150f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80150fc:	4691      	mov	r9, r2
 80150fe:	690a      	ldr	r2, [r1, #16]
 8015100:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8015104:	429a      	cmp	r2, r3
 8015106:	bfb8      	it	lt
 8015108:	460b      	movlt	r3, r1
 801510a:	460c      	mov	r4, r1
 801510c:	bfbc      	itt	lt
 801510e:	464c      	movlt	r4, r9
 8015110:	4699      	movlt	r9, r3
 8015112:	6927      	ldr	r7, [r4, #16]
 8015114:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8015118:	68a3      	ldr	r3, [r4, #8]
 801511a:	6861      	ldr	r1, [r4, #4]
 801511c:	eb07 060a 	add.w	r6, r7, sl
 8015120:	42b3      	cmp	r3, r6
 8015122:	b085      	sub	sp, #20
 8015124:	bfb8      	it	lt
 8015126:	3101      	addlt	r1, #1
 8015128:	f7ff fed8 	bl	8014edc <_Balloc>
 801512c:	b930      	cbnz	r0, 801513c <__multiply+0x44>
 801512e:	4602      	mov	r2, r0
 8015130:	4b44      	ldr	r3, [pc, #272]	; (8015244 <__multiply+0x14c>)
 8015132:	4845      	ldr	r0, [pc, #276]	; (8015248 <__multiply+0x150>)
 8015134:	f240 115d 	movw	r1, #349	; 0x15d
 8015138:	f000 fcb6 	bl	8015aa8 <__assert_func>
 801513c:	f100 0514 	add.w	r5, r0, #20
 8015140:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8015144:	462b      	mov	r3, r5
 8015146:	2200      	movs	r2, #0
 8015148:	4543      	cmp	r3, r8
 801514a:	d321      	bcc.n	8015190 <__multiply+0x98>
 801514c:	f104 0314 	add.w	r3, r4, #20
 8015150:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8015154:	f109 0314 	add.w	r3, r9, #20
 8015158:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 801515c:	9202      	str	r2, [sp, #8]
 801515e:	1b3a      	subs	r2, r7, r4
 8015160:	3a15      	subs	r2, #21
 8015162:	f022 0203 	bic.w	r2, r2, #3
 8015166:	3204      	adds	r2, #4
 8015168:	f104 0115 	add.w	r1, r4, #21
 801516c:	428f      	cmp	r7, r1
 801516e:	bf38      	it	cc
 8015170:	2204      	movcc	r2, #4
 8015172:	9201      	str	r2, [sp, #4]
 8015174:	9a02      	ldr	r2, [sp, #8]
 8015176:	9303      	str	r3, [sp, #12]
 8015178:	429a      	cmp	r2, r3
 801517a:	d80c      	bhi.n	8015196 <__multiply+0x9e>
 801517c:	2e00      	cmp	r6, #0
 801517e:	dd03      	ble.n	8015188 <__multiply+0x90>
 8015180:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8015184:	2b00      	cmp	r3, #0
 8015186:	d05a      	beq.n	801523e <__multiply+0x146>
 8015188:	6106      	str	r6, [r0, #16]
 801518a:	b005      	add	sp, #20
 801518c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015190:	f843 2b04 	str.w	r2, [r3], #4
 8015194:	e7d8      	b.n	8015148 <__multiply+0x50>
 8015196:	f8b3 a000 	ldrh.w	sl, [r3]
 801519a:	f1ba 0f00 	cmp.w	sl, #0
 801519e:	d024      	beq.n	80151ea <__multiply+0xf2>
 80151a0:	f104 0e14 	add.w	lr, r4, #20
 80151a4:	46a9      	mov	r9, r5
 80151a6:	f04f 0c00 	mov.w	ip, #0
 80151aa:	f85e 2b04 	ldr.w	r2, [lr], #4
 80151ae:	f8d9 1000 	ldr.w	r1, [r9]
 80151b2:	fa1f fb82 	uxth.w	fp, r2
 80151b6:	b289      	uxth	r1, r1
 80151b8:	fb0a 110b 	mla	r1, sl, fp, r1
 80151bc:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 80151c0:	f8d9 2000 	ldr.w	r2, [r9]
 80151c4:	4461      	add	r1, ip
 80151c6:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 80151ca:	fb0a c20b 	mla	r2, sl, fp, ip
 80151ce:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 80151d2:	b289      	uxth	r1, r1
 80151d4:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 80151d8:	4577      	cmp	r7, lr
 80151da:	f849 1b04 	str.w	r1, [r9], #4
 80151de:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 80151e2:	d8e2      	bhi.n	80151aa <__multiply+0xb2>
 80151e4:	9a01      	ldr	r2, [sp, #4]
 80151e6:	f845 c002 	str.w	ip, [r5, r2]
 80151ea:	9a03      	ldr	r2, [sp, #12]
 80151ec:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 80151f0:	3304      	adds	r3, #4
 80151f2:	f1b9 0f00 	cmp.w	r9, #0
 80151f6:	d020      	beq.n	801523a <__multiply+0x142>
 80151f8:	6829      	ldr	r1, [r5, #0]
 80151fa:	f104 0c14 	add.w	ip, r4, #20
 80151fe:	46ae      	mov	lr, r5
 8015200:	f04f 0a00 	mov.w	sl, #0
 8015204:	f8bc b000 	ldrh.w	fp, [ip]
 8015208:	f8be 2002 	ldrh.w	r2, [lr, #2]
 801520c:	fb09 220b 	mla	r2, r9, fp, r2
 8015210:	4492      	add	sl, r2
 8015212:	b289      	uxth	r1, r1
 8015214:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 8015218:	f84e 1b04 	str.w	r1, [lr], #4
 801521c:	f85c 2b04 	ldr.w	r2, [ip], #4
 8015220:	f8be 1000 	ldrh.w	r1, [lr]
 8015224:	0c12      	lsrs	r2, r2, #16
 8015226:	fb09 1102 	mla	r1, r9, r2, r1
 801522a:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 801522e:	4567      	cmp	r7, ip
 8015230:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8015234:	d8e6      	bhi.n	8015204 <__multiply+0x10c>
 8015236:	9a01      	ldr	r2, [sp, #4]
 8015238:	50a9      	str	r1, [r5, r2]
 801523a:	3504      	adds	r5, #4
 801523c:	e79a      	b.n	8015174 <__multiply+0x7c>
 801523e:	3e01      	subs	r6, #1
 8015240:	e79c      	b.n	801517c <__multiply+0x84>
 8015242:	bf00      	nop
 8015244:	080170c7 	.word	0x080170c7
 8015248:	080170d8 	.word	0x080170d8

0801524c <__pow5mult>:
 801524c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8015250:	4615      	mov	r5, r2
 8015252:	f012 0203 	ands.w	r2, r2, #3
 8015256:	4606      	mov	r6, r0
 8015258:	460f      	mov	r7, r1
 801525a:	d007      	beq.n	801526c <__pow5mult+0x20>
 801525c:	4c25      	ldr	r4, [pc, #148]	; (80152f4 <__pow5mult+0xa8>)
 801525e:	3a01      	subs	r2, #1
 8015260:	2300      	movs	r3, #0
 8015262:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8015266:	f7ff fe9b 	bl	8014fa0 <__multadd>
 801526a:	4607      	mov	r7, r0
 801526c:	10ad      	asrs	r5, r5, #2
 801526e:	d03d      	beq.n	80152ec <__pow5mult+0xa0>
 8015270:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8015272:	b97c      	cbnz	r4, 8015294 <__pow5mult+0x48>
 8015274:	2010      	movs	r0, #16
 8015276:	f7ff fe29 	bl	8014ecc <malloc>
 801527a:	4602      	mov	r2, r0
 801527c:	6270      	str	r0, [r6, #36]	; 0x24
 801527e:	b928      	cbnz	r0, 801528c <__pow5mult+0x40>
 8015280:	4b1d      	ldr	r3, [pc, #116]	; (80152f8 <__pow5mult+0xac>)
 8015282:	481e      	ldr	r0, [pc, #120]	; (80152fc <__pow5mult+0xb0>)
 8015284:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8015288:	f000 fc0e 	bl	8015aa8 <__assert_func>
 801528c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8015290:	6004      	str	r4, [r0, #0]
 8015292:	60c4      	str	r4, [r0, #12]
 8015294:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8015298:	f8d8 4008 	ldr.w	r4, [r8, #8]
 801529c:	b94c      	cbnz	r4, 80152b2 <__pow5mult+0x66>
 801529e:	f240 2171 	movw	r1, #625	; 0x271
 80152a2:	4630      	mov	r0, r6
 80152a4:	f7ff ff12 	bl	80150cc <__i2b>
 80152a8:	2300      	movs	r3, #0
 80152aa:	f8c8 0008 	str.w	r0, [r8, #8]
 80152ae:	4604      	mov	r4, r0
 80152b0:	6003      	str	r3, [r0, #0]
 80152b2:	f04f 0900 	mov.w	r9, #0
 80152b6:	07eb      	lsls	r3, r5, #31
 80152b8:	d50a      	bpl.n	80152d0 <__pow5mult+0x84>
 80152ba:	4639      	mov	r1, r7
 80152bc:	4622      	mov	r2, r4
 80152be:	4630      	mov	r0, r6
 80152c0:	f7ff ff1a 	bl	80150f8 <__multiply>
 80152c4:	4639      	mov	r1, r7
 80152c6:	4680      	mov	r8, r0
 80152c8:	4630      	mov	r0, r6
 80152ca:	f7ff fe47 	bl	8014f5c <_Bfree>
 80152ce:	4647      	mov	r7, r8
 80152d0:	106d      	asrs	r5, r5, #1
 80152d2:	d00b      	beq.n	80152ec <__pow5mult+0xa0>
 80152d4:	6820      	ldr	r0, [r4, #0]
 80152d6:	b938      	cbnz	r0, 80152e8 <__pow5mult+0x9c>
 80152d8:	4622      	mov	r2, r4
 80152da:	4621      	mov	r1, r4
 80152dc:	4630      	mov	r0, r6
 80152de:	f7ff ff0b 	bl	80150f8 <__multiply>
 80152e2:	6020      	str	r0, [r4, #0]
 80152e4:	f8c0 9000 	str.w	r9, [r0]
 80152e8:	4604      	mov	r4, r0
 80152ea:	e7e4      	b.n	80152b6 <__pow5mult+0x6a>
 80152ec:	4638      	mov	r0, r7
 80152ee:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80152f2:	bf00      	nop
 80152f4:	08017228 	.word	0x08017228
 80152f8:	08017055 	.word	0x08017055
 80152fc:	080170d8 	.word	0x080170d8

08015300 <__lshift>:
 8015300:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8015304:	460c      	mov	r4, r1
 8015306:	6849      	ldr	r1, [r1, #4]
 8015308:	6923      	ldr	r3, [r4, #16]
 801530a:	eb03 1862 	add.w	r8, r3, r2, asr #5
 801530e:	68a3      	ldr	r3, [r4, #8]
 8015310:	4607      	mov	r7, r0
 8015312:	4691      	mov	r9, r2
 8015314:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8015318:	f108 0601 	add.w	r6, r8, #1
 801531c:	42b3      	cmp	r3, r6
 801531e:	db0b      	blt.n	8015338 <__lshift+0x38>
 8015320:	4638      	mov	r0, r7
 8015322:	f7ff fddb 	bl	8014edc <_Balloc>
 8015326:	4605      	mov	r5, r0
 8015328:	b948      	cbnz	r0, 801533e <__lshift+0x3e>
 801532a:	4602      	mov	r2, r0
 801532c:	4b2a      	ldr	r3, [pc, #168]	; (80153d8 <__lshift+0xd8>)
 801532e:	482b      	ldr	r0, [pc, #172]	; (80153dc <__lshift+0xdc>)
 8015330:	f240 11d9 	movw	r1, #473	; 0x1d9
 8015334:	f000 fbb8 	bl	8015aa8 <__assert_func>
 8015338:	3101      	adds	r1, #1
 801533a:	005b      	lsls	r3, r3, #1
 801533c:	e7ee      	b.n	801531c <__lshift+0x1c>
 801533e:	2300      	movs	r3, #0
 8015340:	f100 0114 	add.w	r1, r0, #20
 8015344:	f100 0210 	add.w	r2, r0, #16
 8015348:	4618      	mov	r0, r3
 801534a:	4553      	cmp	r3, sl
 801534c:	db37      	blt.n	80153be <__lshift+0xbe>
 801534e:	6920      	ldr	r0, [r4, #16]
 8015350:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8015354:	f104 0314 	add.w	r3, r4, #20
 8015358:	f019 091f 	ands.w	r9, r9, #31
 801535c:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8015360:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8015364:	d02f      	beq.n	80153c6 <__lshift+0xc6>
 8015366:	f1c9 0e20 	rsb	lr, r9, #32
 801536a:	468a      	mov	sl, r1
 801536c:	f04f 0c00 	mov.w	ip, #0
 8015370:	681a      	ldr	r2, [r3, #0]
 8015372:	fa02 f209 	lsl.w	r2, r2, r9
 8015376:	ea42 020c 	orr.w	r2, r2, ip
 801537a:	f84a 2b04 	str.w	r2, [sl], #4
 801537e:	f853 2b04 	ldr.w	r2, [r3], #4
 8015382:	4298      	cmp	r0, r3
 8015384:	fa22 fc0e 	lsr.w	ip, r2, lr
 8015388:	d8f2      	bhi.n	8015370 <__lshift+0x70>
 801538a:	1b03      	subs	r3, r0, r4
 801538c:	3b15      	subs	r3, #21
 801538e:	f023 0303 	bic.w	r3, r3, #3
 8015392:	3304      	adds	r3, #4
 8015394:	f104 0215 	add.w	r2, r4, #21
 8015398:	4290      	cmp	r0, r2
 801539a:	bf38      	it	cc
 801539c:	2304      	movcc	r3, #4
 801539e:	f841 c003 	str.w	ip, [r1, r3]
 80153a2:	f1bc 0f00 	cmp.w	ip, #0
 80153a6:	d001      	beq.n	80153ac <__lshift+0xac>
 80153a8:	f108 0602 	add.w	r6, r8, #2
 80153ac:	3e01      	subs	r6, #1
 80153ae:	4638      	mov	r0, r7
 80153b0:	612e      	str	r6, [r5, #16]
 80153b2:	4621      	mov	r1, r4
 80153b4:	f7ff fdd2 	bl	8014f5c <_Bfree>
 80153b8:	4628      	mov	r0, r5
 80153ba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80153be:	f842 0f04 	str.w	r0, [r2, #4]!
 80153c2:	3301      	adds	r3, #1
 80153c4:	e7c1      	b.n	801534a <__lshift+0x4a>
 80153c6:	3904      	subs	r1, #4
 80153c8:	f853 2b04 	ldr.w	r2, [r3], #4
 80153cc:	f841 2f04 	str.w	r2, [r1, #4]!
 80153d0:	4298      	cmp	r0, r3
 80153d2:	d8f9      	bhi.n	80153c8 <__lshift+0xc8>
 80153d4:	e7ea      	b.n	80153ac <__lshift+0xac>
 80153d6:	bf00      	nop
 80153d8:	080170c7 	.word	0x080170c7
 80153dc:	080170d8 	.word	0x080170d8

080153e0 <__mcmp>:
 80153e0:	b530      	push	{r4, r5, lr}
 80153e2:	6902      	ldr	r2, [r0, #16]
 80153e4:	690c      	ldr	r4, [r1, #16]
 80153e6:	1b12      	subs	r2, r2, r4
 80153e8:	d10e      	bne.n	8015408 <__mcmp+0x28>
 80153ea:	f100 0314 	add.w	r3, r0, #20
 80153ee:	3114      	adds	r1, #20
 80153f0:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 80153f4:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 80153f8:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 80153fc:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8015400:	42a5      	cmp	r5, r4
 8015402:	d003      	beq.n	801540c <__mcmp+0x2c>
 8015404:	d305      	bcc.n	8015412 <__mcmp+0x32>
 8015406:	2201      	movs	r2, #1
 8015408:	4610      	mov	r0, r2
 801540a:	bd30      	pop	{r4, r5, pc}
 801540c:	4283      	cmp	r3, r0
 801540e:	d3f3      	bcc.n	80153f8 <__mcmp+0x18>
 8015410:	e7fa      	b.n	8015408 <__mcmp+0x28>
 8015412:	f04f 32ff 	mov.w	r2, #4294967295
 8015416:	e7f7      	b.n	8015408 <__mcmp+0x28>

08015418 <__mdiff>:
 8015418:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801541c:	460c      	mov	r4, r1
 801541e:	4606      	mov	r6, r0
 8015420:	4611      	mov	r1, r2
 8015422:	4620      	mov	r0, r4
 8015424:	4690      	mov	r8, r2
 8015426:	f7ff ffdb 	bl	80153e0 <__mcmp>
 801542a:	1e05      	subs	r5, r0, #0
 801542c:	d110      	bne.n	8015450 <__mdiff+0x38>
 801542e:	4629      	mov	r1, r5
 8015430:	4630      	mov	r0, r6
 8015432:	f7ff fd53 	bl	8014edc <_Balloc>
 8015436:	b930      	cbnz	r0, 8015446 <__mdiff+0x2e>
 8015438:	4b3a      	ldr	r3, [pc, #232]	; (8015524 <__mdiff+0x10c>)
 801543a:	4602      	mov	r2, r0
 801543c:	f240 2132 	movw	r1, #562	; 0x232
 8015440:	4839      	ldr	r0, [pc, #228]	; (8015528 <__mdiff+0x110>)
 8015442:	f000 fb31 	bl	8015aa8 <__assert_func>
 8015446:	2301      	movs	r3, #1
 8015448:	e9c0 3504 	strd	r3, r5, [r0, #16]
 801544c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015450:	bfa4      	itt	ge
 8015452:	4643      	movge	r3, r8
 8015454:	46a0      	movge	r8, r4
 8015456:	4630      	mov	r0, r6
 8015458:	f8d8 1004 	ldr.w	r1, [r8, #4]
 801545c:	bfa6      	itte	ge
 801545e:	461c      	movge	r4, r3
 8015460:	2500      	movge	r5, #0
 8015462:	2501      	movlt	r5, #1
 8015464:	f7ff fd3a 	bl	8014edc <_Balloc>
 8015468:	b920      	cbnz	r0, 8015474 <__mdiff+0x5c>
 801546a:	4b2e      	ldr	r3, [pc, #184]	; (8015524 <__mdiff+0x10c>)
 801546c:	4602      	mov	r2, r0
 801546e:	f44f 7110 	mov.w	r1, #576	; 0x240
 8015472:	e7e5      	b.n	8015440 <__mdiff+0x28>
 8015474:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8015478:	6926      	ldr	r6, [r4, #16]
 801547a:	60c5      	str	r5, [r0, #12]
 801547c:	f104 0914 	add.w	r9, r4, #20
 8015480:	f108 0514 	add.w	r5, r8, #20
 8015484:	f100 0e14 	add.w	lr, r0, #20
 8015488:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 801548c:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8015490:	f108 0210 	add.w	r2, r8, #16
 8015494:	46f2      	mov	sl, lr
 8015496:	2100      	movs	r1, #0
 8015498:	f859 3b04 	ldr.w	r3, [r9], #4
 801549c:	f852 bf04 	ldr.w	fp, [r2, #4]!
 80154a0:	fa1f f883 	uxth.w	r8, r3
 80154a4:	fa11 f18b 	uxtah	r1, r1, fp
 80154a8:	0c1b      	lsrs	r3, r3, #16
 80154aa:	eba1 0808 	sub.w	r8, r1, r8
 80154ae:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 80154b2:	eb03 4328 	add.w	r3, r3, r8, asr #16
 80154b6:	fa1f f888 	uxth.w	r8, r8
 80154ba:	1419      	asrs	r1, r3, #16
 80154bc:	454e      	cmp	r6, r9
 80154be:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 80154c2:	f84a 3b04 	str.w	r3, [sl], #4
 80154c6:	d8e7      	bhi.n	8015498 <__mdiff+0x80>
 80154c8:	1b33      	subs	r3, r6, r4
 80154ca:	3b15      	subs	r3, #21
 80154cc:	f023 0303 	bic.w	r3, r3, #3
 80154d0:	3304      	adds	r3, #4
 80154d2:	3415      	adds	r4, #21
 80154d4:	42a6      	cmp	r6, r4
 80154d6:	bf38      	it	cc
 80154d8:	2304      	movcc	r3, #4
 80154da:	441d      	add	r5, r3
 80154dc:	4473      	add	r3, lr
 80154de:	469e      	mov	lr, r3
 80154e0:	462e      	mov	r6, r5
 80154e2:	4566      	cmp	r6, ip
 80154e4:	d30e      	bcc.n	8015504 <__mdiff+0xec>
 80154e6:	f10c 0203 	add.w	r2, ip, #3
 80154ea:	1b52      	subs	r2, r2, r5
 80154ec:	f022 0203 	bic.w	r2, r2, #3
 80154f0:	3d03      	subs	r5, #3
 80154f2:	45ac      	cmp	ip, r5
 80154f4:	bf38      	it	cc
 80154f6:	2200      	movcc	r2, #0
 80154f8:	441a      	add	r2, r3
 80154fa:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 80154fe:	b17b      	cbz	r3, 8015520 <__mdiff+0x108>
 8015500:	6107      	str	r7, [r0, #16]
 8015502:	e7a3      	b.n	801544c <__mdiff+0x34>
 8015504:	f856 8b04 	ldr.w	r8, [r6], #4
 8015508:	fa11 f288 	uxtah	r2, r1, r8
 801550c:	1414      	asrs	r4, r2, #16
 801550e:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 8015512:	b292      	uxth	r2, r2
 8015514:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 8015518:	f84e 2b04 	str.w	r2, [lr], #4
 801551c:	1421      	asrs	r1, r4, #16
 801551e:	e7e0      	b.n	80154e2 <__mdiff+0xca>
 8015520:	3f01      	subs	r7, #1
 8015522:	e7ea      	b.n	80154fa <__mdiff+0xe2>
 8015524:	080170c7 	.word	0x080170c7
 8015528:	080170d8 	.word	0x080170d8

0801552c <__d2b>:
 801552c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8015530:	4689      	mov	r9, r1
 8015532:	2101      	movs	r1, #1
 8015534:	ec57 6b10 	vmov	r6, r7, d0
 8015538:	4690      	mov	r8, r2
 801553a:	f7ff fccf 	bl	8014edc <_Balloc>
 801553e:	4604      	mov	r4, r0
 8015540:	b930      	cbnz	r0, 8015550 <__d2b+0x24>
 8015542:	4602      	mov	r2, r0
 8015544:	4b25      	ldr	r3, [pc, #148]	; (80155dc <__d2b+0xb0>)
 8015546:	4826      	ldr	r0, [pc, #152]	; (80155e0 <__d2b+0xb4>)
 8015548:	f240 310a 	movw	r1, #778	; 0x30a
 801554c:	f000 faac 	bl	8015aa8 <__assert_func>
 8015550:	f3c7 550a 	ubfx	r5, r7, #20, #11
 8015554:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8015558:	bb35      	cbnz	r5, 80155a8 <__d2b+0x7c>
 801555a:	2e00      	cmp	r6, #0
 801555c:	9301      	str	r3, [sp, #4]
 801555e:	d028      	beq.n	80155b2 <__d2b+0x86>
 8015560:	4668      	mov	r0, sp
 8015562:	9600      	str	r6, [sp, #0]
 8015564:	f7ff fd82 	bl	801506c <__lo0bits>
 8015568:	9900      	ldr	r1, [sp, #0]
 801556a:	b300      	cbz	r0, 80155ae <__d2b+0x82>
 801556c:	9a01      	ldr	r2, [sp, #4]
 801556e:	f1c0 0320 	rsb	r3, r0, #32
 8015572:	fa02 f303 	lsl.w	r3, r2, r3
 8015576:	430b      	orrs	r3, r1
 8015578:	40c2      	lsrs	r2, r0
 801557a:	6163      	str	r3, [r4, #20]
 801557c:	9201      	str	r2, [sp, #4]
 801557e:	9b01      	ldr	r3, [sp, #4]
 8015580:	61a3      	str	r3, [r4, #24]
 8015582:	2b00      	cmp	r3, #0
 8015584:	bf14      	ite	ne
 8015586:	2202      	movne	r2, #2
 8015588:	2201      	moveq	r2, #1
 801558a:	6122      	str	r2, [r4, #16]
 801558c:	b1d5      	cbz	r5, 80155c4 <__d2b+0x98>
 801558e:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8015592:	4405      	add	r5, r0
 8015594:	f8c9 5000 	str.w	r5, [r9]
 8015598:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 801559c:	f8c8 0000 	str.w	r0, [r8]
 80155a0:	4620      	mov	r0, r4
 80155a2:	b003      	add	sp, #12
 80155a4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80155a8:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80155ac:	e7d5      	b.n	801555a <__d2b+0x2e>
 80155ae:	6161      	str	r1, [r4, #20]
 80155b0:	e7e5      	b.n	801557e <__d2b+0x52>
 80155b2:	a801      	add	r0, sp, #4
 80155b4:	f7ff fd5a 	bl	801506c <__lo0bits>
 80155b8:	9b01      	ldr	r3, [sp, #4]
 80155ba:	6163      	str	r3, [r4, #20]
 80155bc:	2201      	movs	r2, #1
 80155be:	6122      	str	r2, [r4, #16]
 80155c0:	3020      	adds	r0, #32
 80155c2:	e7e3      	b.n	801558c <__d2b+0x60>
 80155c4:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 80155c8:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 80155cc:	f8c9 0000 	str.w	r0, [r9]
 80155d0:	6918      	ldr	r0, [r3, #16]
 80155d2:	f7ff fd2b 	bl	801502c <__hi0bits>
 80155d6:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 80155da:	e7df      	b.n	801559c <__d2b+0x70>
 80155dc:	080170c7 	.word	0x080170c7
 80155e0:	080170d8 	.word	0x080170d8

080155e4 <_calloc_r>:
 80155e4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80155e6:	fba1 2402 	umull	r2, r4, r1, r2
 80155ea:	b94c      	cbnz	r4, 8015600 <_calloc_r+0x1c>
 80155ec:	4611      	mov	r1, r2
 80155ee:	9201      	str	r2, [sp, #4]
 80155f0:	f000 f87a 	bl	80156e8 <_malloc_r>
 80155f4:	9a01      	ldr	r2, [sp, #4]
 80155f6:	4605      	mov	r5, r0
 80155f8:	b930      	cbnz	r0, 8015608 <_calloc_r+0x24>
 80155fa:	4628      	mov	r0, r5
 80155fc:	b003      	add	sp, #12
 80155fe:	bd30      	pop	{r4, r5, pc}
 8015600:	220c      	movs	r2, #12
 8015602:	6002      	str	r2, [r0, #0]
 8015604:	2500      	movs	r5, #0
 8015606:	e7f8      	b.n	80155fa <_calloc_r+0x16>
 8015608:	4621      	mov	r1, r4
 801560a:	f7fe f9dd 	bl	80139c8 <memset>
 801560e:	e7f4      	b.n	80155fa <_calloc_r+0x16>

08015610 <_free_r>:
 8015610:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8015612:	2900      	cmp	r1, #0
 8015614:	d044      	beq.n	80156a0 <_free_r+0x90>
 8015616:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801561a:	9001      	str	r0, [sp, #4]
 801561c:	2b00      	cmp	r3, #0
 801561e:	f1a1 0404 	sub.w	r4, r1, #4
 8015622:	bfb8      	it	lt
 8015624:	18e4      	addlt	r4, r4, r3
 8015626:	f000 fa9b 	bl	8015b60 <__malloc_lock>
 801562a:	4a1e      	ldr	r2, [pc, #120]	; (80156a4 <_free_r+0x94>)
 801562c:	9801      	ldr	r0, [sp, #4]
 801562e:	6813      	ldr	r3, [r2, #0]
 8015630:	b933      	cbnz	r3, 8015640 <_free_r+0x30>
 8015632:	6063      	str	r3, [r4, #4]
 8015634:	6014      	str	r4, [r2, #0]
 8015636:	b003      	add	sp, #12
 8015638:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 801563c:	f000 ba96 	b.w	8015b6c <__malloc_unlock>
 8015640:	42a3      	cmp	r3, r4
 8015642:	d908      	bls.n	8015656 <_free_r+0x46>
 8015644:	6825      	ldr	r5, [r4, #0]
 8015646:	1961      	adds	r1, r4, r5
 8015648:	428b      	cmp	r3, r1
 801564a:	bf01      	itttt	eq
 801564c:	6819      	ldreq	r1, [r3, #0]
 801564e:	685b      	ldreq	r3, [r3, #4]
 8015650:	1949      	addeq	r1, r1, r5
 8015652:	6021      	streq	r1, [r4, #0]
 8015654:	e7ed      	b.n	8015632 <_free_r+0x22>
 8015656:	461a      	mov	r2, r3
 8015658:	685b      	ldr	r3, [r3, #4]
 801565a:	b10b      	cbz	r3, 8015660 <_free_r+0x50>
 801565c:	42a3      	cmp	r3, r4
 801565e:	d9fa      	bls.n	8015656 <_free_r+0x46>
 8015660:	6811      	ldr	r1, [r2, #0]
 8015662:	1855      	adds	r5, r2, r1
 8015664:	42a5      	cmp	r5, r4
 8015666:	d10b      	bne.n	8015680 <_free_r+0x70>
 8015668:	6824      	ldr	r4, [r4, #0]
 801566a:	4421      	add	r1, r4
 801566c:	1854      	adds	r4, r2, r1
 801566e:	42a3      	cmp	r3, r4
 8015670:	6011      	str	r1, [r2, #0]
 8015672:	d1e0      	bne.n	8015636 <_free_r+0x26>
 8015674:	681c      	ldr	r4, [r3, #0]
 8015676:	685b      	ldr	r3, [r3, #4]
 8015678:	6053      	str	r3, [r2, #4]
 801567a:	4421      	add	r1, r4
 801567c:	6011      	str	r1, [r2, #0]
 801567e:	e7da      	b.n	8015636 <_free_r+0x26>
 8015680:	d902      	bls.n	8015688 <_free_r+0x78>
 8015682:	230c      	movs	r3, #12
 8015684:	6003      	str	r3, [r0, #0]
 8015686:	e7d6      	b.n	8015636 <_free_r+0x26>
 8015688:	6825      	ldr	r5, [r4, #0]
 801568a:	1961      	adds	r1, r4, r5
 801568c:	428b      	cmp	r3, r1
 801568e:	bf04      	itt	eq
 8015690:	6819      	ldreq	r1, [r3, #0]
 8015692:	685b      	ldreq	r3, [r3, #4]
 8015694:	6063      	str	r3, [r4, #4]
 8015696:	bf04      	itt	eq
 8015698:	1949      	addeq	r1, r1, r5
 801569a:	6021      	streq	r1, [r4, #0]
 801569c:	6054      	str	r4, [r2, #4]
 801569e:	e7ca      	b.n	8015636 <_free_r+0x26>
 80156a0:	b003      	add	sp, #12
 80156a2:	bd30      	pop	{r4, r5, pc}
 80156a4:	24001250 	.word	0x24001250

080156a8 <sbrk_aligned>:
 80156a8:	b570      	push	{r4, r5, r6, lr}
 80156aa:	4e0e      	ldr	r6, [pc, #56]	; (80156e4 <sbrk_aligned+0x3c>)
 80156ac:	460c      	mov	r4, r1
 80156ae:	6831      	ldr	r1, [r6, #0]
 80156b0:	4605      	mov	r5, r0
 80156b2:	b911      	cbnz	r1, 80156ba <sbrk_aligned+0x12>
 80156b4:	f000 f9e8 	bl	8015a88 <_sbrk_r>
 80156b8:	6030      	str	r0, [r6, #0]
 80156ba:	4621      	mov	r1, r4
 80156bc:	4628      	mov	r0, r5
 80156be:	f000 f9e3 	bl	8015a88 <_sbrk_r>
 80156c2:	1c43      	adds	r3, r0, #1
 80156c4:	d00a      	beq.n	80156dc <sbrk_aligned+0x34>
 80156c6:	1cc4      	adds	r4, r0, #3
 80156c8:	f024 0403 	bic.w	r4, r4, #3
 80156cc:	42a0      	cmp	r0, r4
 80156ce:	d007      	beq.n	80156e0 <sbrk_aligned+0x38>
 80156d0:	1a21      	subs	r1, r4, r0
 80156d2:	4628      	mov	r0, r5
 80156d4:	f000 f9d8 	bl	8015a88 <_sbrk_r>
 80156d8:	3001      	adds	r0, #1
 80156da:	d101      	bne.n	80156e0 <sbrk_aligned+0x38>
 80156dc:	f04f 34ff 	mov.w	r4, #4294967295
 80156e0:	4620      	mov	r0, r4
 80156e2:	bd70      	pop	{r4, r5, r6, pc}
 80156e4:	24001254 	.word	0x24001254

080156e8 <_malloc_r>:
 80156e8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80156ec:	1ccd      	adds	r5, r1, #3
 80156ee:	f025 0503 	bic.w	r5, r5, #3
 80156f2:	3508      	adds	r5, #8
 80156f4:	2d0c      	cmp	r5, #12
 80156f6:	bf38      	it	cc
 80156f8:	250c      	movcc	r5, #12
 80156fa:	2d00      	cmp	r5, #0
 80156fc:	4607      	mov	r7, r0
 80156fe:	db01      	blt.n	8015704 <_malloc_r+0x1c>
 8015700:	42a9      	cmp	r1, r5
 8015702:	d905      	bls.n	8015710 <_malloc_r+0x28>
 8015704:	230c      	movs	r3, #12
 8015706:	603b      	str	r3, [r7, #0]
 8015708:	2600      	movs	r6, #0
 801570a:	4630      	mov	r0, r6
 801570c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8015710:	4e2e      	ldr	r6, [pc, #184]	; (80157cc <_malloc_r+0xe4>)
 8015712:	f000 fa25 	bl	8015b60 <__malloc_lock>
 8015716:	6833      	ldr	r3, [r6, #0]
 8015718:	461c      	mov	r4, r3
 801571a:	bb34      	cbnz	r4, 801576a <_malloc_r+0x82>
 801571c:	4629      	mov	r1, r5
 801571e:	4638      	mov	r0, r7
 8015720:	f7ff ffc2 	bl	80156a8 <sbrk_aligned>
 8015724:	1c43      	adds	r3, r0, #1
 8015726:	4604      	mov	r4, r0
 8015728:	d14d      	bne.n	80157c6 <_malloc_r+0xde>
 801572a:	6834      	ldr	r4, [r6, #0]
 801572c:	4626      	mov	r6, r4
 801572e:	2e00      	cmp	r6, #0
 8015730:	d140      	bne.n	80157b4 <_malloc_r+0xcc>
 8015732:	6823      	ldr	r3, [r4, #0]
 8015734:	4631      	mov	r1, r6
 8015736:	4638      	mov	r0, r7
 8015738:	eb04 0803 	add.w	r8, r4, r3
 801573c:	f000 f9a4 	bl	8015a88 <_sbrk_r>
 8015740:	4580      	cmp	r8, r0
 8015742:	d13a      	bne.n	80157ba <_malloc_r+0xd2>
 8015744:	6821      	ldr	r1, [r4, #0]
 8015746:	3503      	adds	r5, #3
 8015748:	1a6d      	subs	r5, r5, r1
 801574a:	f025 0503 	bic.w	r5, r5, #3
 801574e:	3508      	adds	r5, #8
 8015750:	2d0c      	cmp	r5, #12
 8015752:	bf38      	it	cc
 8015754:	250c      	movcc	r5, #12
 8015756:	4629      	mov	r1, r5
 8015758:	4638      	mov	r0, r7
 801575a:	f7ff ffa5 	bl	80156a8 <sbrk_aligned>
 801575e:	3001      	adds	r0, #1
 8015760:	d02b      	beq.n	80157ba <_malloc_r+0xd2>
 8015762:	6823      	ldr	r3, [r4, #0]
 8015764:	442b      	add	r3, r5
 8015766:	6023      	str	r3, [r4, #0]
 8015768:	e00e      	b.n	8015788 <_malloc_r+0xa0>
 801576a:	6822      	ldr	r2, [r4, #0]
 801576c:	1b52      	subs	r2, r2, r5
 801576e:	d41e      	bmi.n	80157ae <_malloc_r+0xc6>
 8015770:	2a0b      	cmp	r2, #11
 8015772:	d916      	bls.n	80157a2 <_malloc_r+0xba>
 8015774:	1961      	adds	r1, r4, r5
 8015776:	42a3      	cmp	r3, r4
 8015778:	6025      	str	r5, [r4, #0]
 801577a:	bf18      	it	ne
 801577c:	6059      	strne	r1, [r3, #4]
 801577e:	6863      	ldr	r3, [r4, #4]
 8015780:	bf08      	it	eq
 8015782:	6031      	streq	r1, [r6, #0]
 8015784:	5162      	str	r2, [r4, r5]
 8015786:	604b      	str	r3, [r1, #4]
 8015788:	4638      	mov	r0, r7
 801578a:	f104 060b 	add.w	r6, r4, #11
 801578e:	f000 f9ed 	bl	8015b6c <__malloc_unlock>
 8015792:	f026 0607 	bic.w	r6, r6, #7
 8015796:	1d23      	adds	r3, r4, #4
 8015798:	1af2      	subs	r2, r6, r3
 801579a:	d0b6      	beq.n	801570a <_malloc_r+0x22>
 801579c:	1b9b      	subs	r3, r3, r6
 801579e:	50a3      	str	r3, [r4, r2]
 80157a0:	e7b3      	b.n	801570a <_malloc_r+0x22>
 80157a2:	6862      	ldr	r2, [r4, #4]
 80157a4:	42a3      	cmp	r3, r4
 80157a6:	bf0c      	ite	eq
 80157a8:	6032      	streq	r2, [r6, #0]
 80157aa:	605a      	strne	r2, [r3, #4]
 80157ac:	e7ec      	b.n	8015788 <_malloc_r+0xa0>
 80157ae:	4623      	mov	r3, r4
 80157b0:	6864      	ldr	r4, [r4, #4]
 80157b2:	e7b2      	b.n	801571a <_malloc_r+0x32>
 80157b4:	4634      	mov	r4, r6
 80157b6:	6876      	ldr	r6, [r6, #4]
 80157b8:	e7b9      	b.n	801572e <_malloc_r+0x46>
 80157ba:	230c      	movs	r3, #12
 80157bc:	603b      	str	r3, [r7, #0]
 80157be:	4638      	mov	r0, r7
 80157c0:	f000 f9d4 	bl	8015b6c <__malloc_unlock>
 80157c4:	e7a1      	b.n	801570a <_malloc_r+0x22>
 80157c6:	6025      	str	r5, [r4, #0]
 80157c8:	e7de      	b.n	8015788 <_malloc_r+0xa0>
 80157ca:	bf00      	nop
 80157cc:	24001250 	.word	0x24001250

080157d0 <__ssputs_r>:
 80157d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80157d4:	688e      	ldr	r6, [r1, #8]
 80157d6:	429e      	cmp	r6, r3
 80157d8:	4682      	mov	sl, r0
 80157da:	460c      	mov	r4, r1
 80157dc:	4690      	mov	r8, r2
 80157de:	461f      	mov	r7, r3
 80157e0:	d838      	bhi.n	8015854 <__ssputs_r+0x84>
 80157e2:	898a      	ldrh	r2, [r1, #12]
 80157e4:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80157e8:	d032      	beq.n	8015850 <__ssputs_r+0x80>
 80157ea:	6825      	ldr	r5, [r4, #0]
 80157ec:	6909      	ldr	r1, [r1, #16]
 80157ee:	eba5 0901 	sub.w	r9, r5, r1
 80157f2:	6965      	ldr	r5, [r4, #20]
 80157f4:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80157f8:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80157fc:	3301      	adds	r3, #1
 80157fe:	444b      	add	r3, r9
 8015800:	106d      	asrs	r5, r5, #1
 8015802:	429d      	cmp	r5, r3
 8015804:	bf38      	it	cc
 8015806:	461d      	movcc	r5, r3
 8015808:	0553      	lsls	r3, r2, #21
 801580a:	d531      	bpl.n	8015870 <__ssputs_r+0xa0>
 801580c:	4629      	mov	r1, r5
 801580e:	f7ff ff6b 	bl	80156e8 <_malloc_r>
 8015812:	4606      	mov	r6, r0
 8015814:	b950      	cbnz	r0, 801582c <__ssputs_r+0x5c>
 8015816:	230c      	movs	r3, #12
 8015818:	f8ca 3000 	str.w	r3, [sl]
 801581c:	89a3      	ldrh	r3, [r4, #12]
 801581e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8015822:	81a3      	strh	r3, [r4, #12]
 8015824:	f04f 30ff 	mov.w	r0, #4294967295
 8015828:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801582c:	6921      	ldr	r1, [r4, #16]
 801582e:	464a      	mov	r2, r9
 8015830:	f7fe f8bc 	bl	80139ac <memcpy>
 8015834:	89a3      	ldrh	r3, [r4, #12]
 8015836:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 801583a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801583e:	81a3      	strh	r3, [r4, #12]
 8015840:	6126      	str	r6, [r4, #16]
 8015842:	6165      	str	r5, [r4, #20]
 8015844:	444e      	add	r6, r9
 8015846:	eba5 0509 	sub.w	r5, r5, r9
 801584a:	6026      	str	r6, [r4, #0]
 801584c:	60a5      	str	r5, [r4, #8]
 801584e:	463e      	mov	r6, r7
 8015850:	42be      	cmp	r6, r7
 8015852:	d900      	bls.n	8015856 <__ssputs_r+0x86>
 8015854:	463e      	mov	r6, r7
 8015856:	6820      	ldr	r0, [r4, #0]
 8015858:	4632      	mov	r2, r6
 801585a:	4641      	mov	r1, r8
 801585c:	f000 f966 	bl	8015b2c <memmove>
 8015860:	68a3      	ldr	r3, [r4, #8]
 8015862:	1b9b      	subs	r3, r3, r6
 8015864:	60a3      	str	r3, [r4, #8]
 8015866:	6823      	ldr	r3, [r4, #0]
 8015868:	4433      	add	r3, r6
 801586a:	6023      	str	r3, [r4, #0]
 801586c:	2000      	movs	r0, #0
 801586e:	e7db      	b.n	8015828 <__ssputs_r+0x58>
 8015870:	462a      	mov	r2, r5
 8015872:	f000 f981 	bl	8015b78 <_realloc_r>
 8015876:	4606      	mov	r6, r0
 8015878:	2800      	cmp	r0, #0
 801587a:	d1e1      	bne.n	8015840 <__ssputs_r+0x70>
 801587c:	6921      	ldr	r1, [r4, #16]
 801587e:	4650      	mov	r0, sl
 8015880:	f7ff fec6 	bl	8015610 <_free_r>
 8015884:	e7c7      	b.n	8015816 <__ssputs_r+0x46>
	...

08015888 <_svfiprintf_r>:
 8015888:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801588c:	4698      	mov	r8, r3
 801588e:	898b      	ldrh	r3, [r1, #12]
 8015890:	061b      	lsls	r3, r3, #24
 8015892:	b09d      	sub	sp, #116	; 0x74
 8015894:	4607      	mov	r7, r0
 8015896:	460d      	mov	r5, r1
 8015898:	4614      	mov	r4, r2
 801589a:	d50e      	bpl.n	80158ba <_svfiprintf_r+0x32>
 801589c:	690b      	ldr	r3, [r1, #16]
 801589e:	b963      	cbnz	r3, 80158ba <_svfiprintf_r+0x32>
 80158a0:	2140      	movs	r1, #64	; 0x40
 80158a2:	f7ff ff21 	bl	80156e8 <_malloc_r>
 80158a6:	6028      	str	r0, [r5, #0]
 80158a8:	6128      	str	r0, [r5, #16]
 80158aa:	b920      	cbnz	r0, 80158b6 <_svfiprintf_r+0x2e>
 80158ac:	230c      	movs	r3, #12
 80158ae:	603b      	str	r3, [r7, #0]
 80158b0:	f04f 30ff 	mov.w	r0, #4294967295
 80158b4:	e0d1      	b.n	8015a5a <_svfiprintf_r+0x1d2>
 80158b6:	2340      	movs	r3, #64	; 0x40
 80158b8:	616b      	str	r3, [r5, #20]
 80158ba:	2300      	movs	r3, #0
 80158bc:	9309      	str	r3, [sp, #36]	; 0x24
 80158be:	2320      	movs	r3, #32
 80158c0:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80158c4:	f8cd 800c 	str.w	r8, [sp, #12]
 80158c8:	2330      	movs	r3, #48	; 0x30
 80158ca:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8015a74 <_svfiprintf_r+0x1ec>
 80158ce:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80158d2:	f04f 0901 	mov.w	r9, #1
 80158d6:	4623      	mov	r3, r4
 80158d8:	469a      	mov	sl, r3
 80158da:	f813 2b01 	ldrb.w	r2, [r3], #1
 80158de:	b10a      	cbz	r2, 80158e4 <_svfiprintf_r+0x5c>
 80158e0:	2a25      	cmp	r2, #37	; 0x25
 80158e2:	d1f9      	bne.n	80158d8 <_svfiprintf_r+0x50>
 80158e4:	ebba 0b04 	subs.w	fp, sl, r4
 80158e8:	d00b      	beq.n	8015902 <_svfiprintf_r+0x7a>
 80158ea:	465b      	mov	r3, fp
 80158ec:	4622      	mov	r2, r4
 80158ee:	4629      	mov	r1, r5
 80158f0:	4638      	mov	r0, r7
 80158f2:	f7ff ff6d 	bl	80157d0 <__ssputs_r>
 80158f6:	3001      	adds	r0, #1
 80158f8:	f000 80aa 	beq.w	8015a50 <_svfiprintf_r+0x1c8>
 80158fc:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80158fe:	445a      	add	r2, fp
 8015900:	9209      	str	r2, [sp, #36]	; 0x24
 8015902:	f89a 3000 	ldrb.w	r3, [sl]
 8015906:	2b00      	cmp	r3, #0
 8015908:	f000 80a2 	beq.w	8015a50 <_svfiprintf_r+0x1c8>
 801590c:	2300      	movs	r3, #0
 801590e:	f04f 32ff 	mov.w	r2, #4294967295
 8015912:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8015916:	f10a 0a01 	add.w	sl, sl, #1
 801591a:	9304      	str	r3, [sp, #16]
 801591c:	9307      	str	r3, [sp, #28]
 801591e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8015922:	931a      	str	r3, [sp, #104]	; 0x68
 8015924:	4654      	mov	r4, sl
 8015926:	2205      	movs	r2, #5
 8015928:	f814 1b01 	ldrb.w	r1, [r4], #1
 801592c:	4851      	ldr	r0, [pc, #324]	; (8015a74 <_svfiprintf_r+0x1ec>)
 801592e:	f7ea fcdf 	bl	80002f0 <memchr>
 8015932:	9a04      	ldr	r2, [sp, #16]
 8015934:	b9d8      	cbnz	r0, 801596e <_svfiprintf_r+0xe6>
 8015936:	06d0      	lsls	r0, r2, #27
 8015938:	bf44      	itt	mi
 801593a:	2320      	movmi	r3, #32
 801593c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8015940:	0711      	lsls	r1, r2, #28
 8015942:	bf44      	itt	mi
 8015944:	232b      	movmi	r3, #43	; 0x2b
 8015946:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801594a:	f89a 3000 	ldrb.w	r3, [sl]
 801594e:	2b2a      	cmp	r3, #42	; 0x2a
 8015950:	d015      	beq.n	801597e <_svfiprintf_r+0xf6>
 8015952:	9a07      	ldr	r2, [sp, #28]
 8015954:	4654      	mov	r4, sl
 8015956:	2000      	movs	r0, #0
 8015958:	f04f 0c0a 	mov.w	ip, #10
 801595c:	4621      	mov	r1, r4
 801595e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8015962:	3b30      	subs	r3, #48	; 0x30
 8015964:	2b09      	cmp	r3, #9
 8015966:	d94e      	bls.n	8015a06 <_svfiprintf_r+0x17e>
 8015968:	b1b0      	cbz	r0, 8015998 <_svfiprintf_r+0x110>
 801596a:	9207      	str	r2, [sp, #28]
 801596c:	e014      	b.n	8015998 <_svfiprintf_r+0x110>
 801596e:	eba0 0308 	sub.w	r3, r0, r8
 8015972:	fa09 f303 	lsl.w	r3, r9, r3
 8015976:	4313      	orrs	r3, r2
 8015978:	9304      	str	r3, [sp, #16]
 801597a:	46a2      	mov	sl, r4
 801597c:	e7d2      	b.n	8015924 <_svfiprintf_r+0x9c>
 801597e:	9b03      	ldr	r3, [sp, #12]
 8015980:	1d19      	adds	r1, r3, #4
 8015982:	681b      	ldr	r3, [r3, #0]
 8015984:	9103      	str	r1, [sp, #12]
 8015986:	2b00      	cmp	r3, #0
 8015988:	bfbb      	ittet	lt
 801598a:	425b      	neglt	r3, r3
 801598c:	f042 0202 	orrlt.w	r2, r2, #2
 8015990:	9307      	strge	r3, [sp, #28]
 8015992:	9307      	strlt	r3, [sp, #28]
 8015994:	bfb8      	it	lt
 8015996:	9204      	strlt	r2, [sp, #16]
 8015998:	7823      	ldrb	r3, [r4, #0]
 801599a:	2b2e      	cmp	r3, #46	; 0x2e
 801599c:	d10c      	bne.n	80159b8 <_svfiprintf_r+0x130>
 801599e:	7863      	ldrb	r3, [r4, #1]
 80159a0:	2b2a      	cmp	r3, #42	; 0x2a
 80159a2:	d135      	bne.n	8015a10 <_svfiprintf_r+0x188>
 80159a4:	9b03      	ldr	r3, [sp, #12]
 80159a6:	1d1a      	adds	r2, r3, #4
 80159a8:	681b      	ldr	r3, [r3, #0]
 80159aa:	9203      	str	r2, [sp, #12]
 80159ac:	2b00      	cmp	r3, #0
 80159ae:	bfb8      	it	lt
 80159b0:	f04f 33ff 	movlt.w	r3, #4294967295
 80159b4:	3402      	adds	r4, #2
 80159b6:	9305      	str	r3, [sp, #20]
 80159b8:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8015a84 <_svfiprintf_r+0x1fc>
 80159bc:	7821      	ldrb	r1, [r4, #0]
 80159be:	2203      	movs	r2, #3
 80159c0:	4650      	mov	r0, sl
 80159c2:	f7ea fc95 	bl	80002f0 <memchr>
 80159c6:	b140      	cbz	r0, 80159da <_svfiprintf_r+0x152>
 80159c8:	2340      	movs	r3, #64	; 0x40
 80159ca:	eba0 000a 	sub.w	r0, r0, sl
 80159ce:	fa03 f000 	lsl.w	r0, r3, r0
 80159d2:	9b04      	ldr	r3, [sp, #16]
 80159d4:	4303      	orrs	r3, r0
 80159d6:	3401      	adds	r4, #1
 80159d8:	9304      	str	r3, [sp, #16]
 80159da:	f814 1b01 	ldrb.w	r1, [r4], #1
 80159de:	4826      	ldr	r0, [pc, #152]	; (8015a78 <_svfiprintf_r+0x1f0>)
 80159e0:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80159e4:	2206      	movs	r2, #6
 80159e6:	f7ea fc83 	bl	80002f0 <memchr>
 80159ea:	2800      	cmp	r0, #0
 80159ec:	d038      	beq.n	8015a60 <_svfiprintf_r+0x1d8>
 80159ee:	4b23      	ldr	r3, [pc, #140]	; (8015a7c <_svfiprintf_r+0x1f4>)
 80159f0:	bb1b      	cbnz	r3, 8015a3a <_svfiprintf_r+0x1b2>
 80159f2:	9b03      	ldr	r3, [sp, #12]
 80159f4:	3307      	adds	r3, #7
 80159f6:	f023 0307 	bic.w	r3, r3, #7
 80159fa:	3308      	adds	r3, #8
 80159fc:	9303      	str	r3, [sp, #12]
 80159fe:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8015a00:	4433      	add	r3, r6
 8015a02:	9309      	str	r3, [sp, #36]	; 0x24
 8015a04:	e767      	b.n	80158d6 <_svfiprintf_r+0x4e>
 8015a06:	fb0c 3202 	mla	r2, ip, r2, r3
 8015a0a:	460c      	mov	r4, r1
 8015a0c:	2001      	movs	r0, #1
 8015a0e:	e7a5      	b.n	801595c <_svfiprintf_r+0xd4>
 8015a10:	2300      	movs	r3, #0
 8015a12:	3401      	adds	r4, #1
 8015a14:	9305      	str	r3, [sp, #20]
 8015a16:	4619      	mov	r1, r3
 8015a18:	f04f 0c0a 	mov.w	ip, #10
 8015a1c:	4620      	mov	r0, r4
 8015a1e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8015a22:	3a30      	subs	r2, #48	; 0x30
 8015a24:	2a09      	cmp	r2, #9
 8015a26:	d903      	bls.n	8015a30 <_svfiprintf_r+0x1a8>
 8015a28:	2b00      	cmp	r3, #0
 8015a2a:	d0c5      	beq.n	80159b8 <_svfiprintf_r+0x130>
 8015a2c:	9105      	str	r1, [sp, #20]
 8015a2e:	e7c3      	b.n	80159b8 <_svfiprintf_r+0x130>
 8015a30:	fb0c 2101 	mla	r1, ip, r1, r2
 8015a34:	4604      	mov	r4, r0
 8015a36:	2301      	movs	r3, #1
 8015a38:	e7f0      	b.n	8015a1c <_svfiprintf_r+0x194>
 8015a3a:	ab03      	add	r3, sp, #12
 8015a3c:	9300      	str	r3, [sp, #0]
 8015a3e:	462a      	mov	r2, r5
 8015a40:	4b0f      	ldr	r3, [pc, #60]	; (8015a80 <_svfiprintf_r+0x1f8>)
 8015a42:	a904      	add	r1, sp, #16
 8015a44:	4638      	mov	r0, r7
 8015a46:	f7fe f857 	bl	8013af8 <_printf_float>
 8015a4a:	1c42      	adds	r2, r0, #1
 8015a4c:	4606      	mov	r6, r0
 8015a4e:	d1d6      	bne.n	80159fe <_svfiprintf_r+0x176>
 8015a50:	89ab      	ldrh	r3, [r5, #12]
 8015a52:	065b      	lsls	r3, r3, #25
 8015a54:	f53f af2c 	bmi.w	80158b0 <_svfiprintf_r+0x28>
 8015a58:	9809      	ldr	r0, [sp, #36]	; 0x24
 8015a5a:	b01d      	add	sp, #116	; 0x74
 8015a5c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015a60:	ab03      	add	r3, sp, #12
 8015a62:	9300      	str	r3, [sp, #0]
 8015a64:	462a      	mov	r2, r5
 8015a66:	4b06      	ldr	r3, [pc, #24]	; (8015a80 <_svfiprintf_r+0x1f8>)
 8015a68:	a904      	add	r1, sp, #16
 8015a6a:	4638      	mov	r0, r7
 8015a6c:	f7fe fad0 	bl	8014010 <_printf_i>
 8015a70:	e7eb      	b.n	8015a4a <_svfiprintf_r+0x1c2>
 8015a72:	bf00      	nop
 8015a74:	08017234 	.word	0x08017234
 8015a78:	0801723e 	.word	0x0801723e
 8015a7c:	08013af9 	.word	0x08013af9
 8015a80:	080157d1 	.word	0x080157d1
 8015a84:	0801723a 	.word	0x0801723a

08015a88 <_sbrk_r>:
 8015a88:	b538      	push	{r3, r4, r5, lr}
 8015a8a:	4d06      	ldr	r5, [pc, #24]	; (8015aa4 <_sbrk_r+0x1c>)
 8015a8c:	2300      	movs	r3, #0
 8015a8e:	4604      	mov	r4, r0
 8015a90:	4608      	mov	r0, r1
 8015a92:	602b      	str	r3, [r5, #0]
 8015a94:	f7ec fa68 	bl	8001f68 <_sbrk>
 8015a98:	1c43      	adds	r3, r0, #1
 8015a9a:	d102      	bne.n	8015aa2 <_sbrk_r+0x1a>
 8015a9c:	682b      	ldr	r3, [r5, #0]
 8015a9e:	b103      	cbz	r3, 8015aa2 <_sbrk_r+0x1a>
 8015aa0:	6023      	str	r3, [r4, #0]
 8015aa2:	bd38      	pop	{r3, r4, r5, pc}
 8015aa4:	24001258 	.word	0x24001258

08015aa8 <__assert_func>:
 8015aa8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8015aaa:	4614      	mov	r4, r2
 8015aac:	461a      	mov	r2, r3
 8015aae:	4b09      	ldr	r3, [pc, #36]	; (8015ad4 <__assert_func+0x2c>)
 8015ab0:	681b      	ldr	r3, [r3, #0]
 8015ab2:	4605      	mov	r5, r0
 8015ab4:	68d8      	ldr	r0, [r3, #12]
 8015ab6:	b14c      	cbz	r4, 8015acc <__assert_func+0x24>
 8015ab8:	4b07      	ldr	r3, [pc, #28]	; (8015ad8 <__assert_func+0x30>)
 8015aba:	9100      	str	r1, [sp, #0]
 8015abc:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8015ac0:	4906      	ldr	r1, [pc, #24]	; (8015adc <__assert_func+0x34>)
 8015ac2:	462b      	mov	r3, r5
 8015ac4:	f000 f80e 	bl	8015ae4 <fiprintf>
 8015ac8:	f000 faac 	bl	8016024 <abort>
 8015acc:	4b04      	ldr	r3, [pc, #16]	; (8015ae0 <__assert_func+0x38>)
 8015ace:	461c      	mov	r4, r3
 8015ad0:	e7f3      	b.n	8015aba <__assert_func+0x12>
 8015ad2:	bf00      	nop
 8015ad4:	24000160 	.word	0x24000160
 8015ad8:	08017245 	.word	0x08017245
 8015adc:	08017252 	.word	0x08017252
 8015ae0:	08017280 	.word	0x08017280

08015ae4 <fiprintf>:
 8015ae4:	b40e      	push	{r1, r2, r3}
 8015ae6:	b503      	push	{r0, r1, lr}
 8015ae8:	4601      	mov	r1, r0
 8015aea:	ab03      	add	r3, sp, #12
 8015aec:	4805      	ldr	r0, [pc, #20]	; (8015b04 <fiprintf+0x20>)
 8015aee:	f853 2b04 	ldr.w	r2, [r3], #4
 8015af2:	6800      	ldr	r0, [r0, #0]
 8015af4:	9301      	str	r3, [sp, #4]
 8015af6:	f000 f897 	bl	8015c28 <_vfiprintf_r>
 8015afa:	b002      	add	sp, #8
 8015afc:	f85d eb04 	ldr.w	lr, [sp], #4
 8015b00:	b003      	add	sp, #12
 8015b02:	4770      	bx	lr
 8015b04:	24000160 	.word	0x24000160

08015b08 <__ascii_mbtowc>:
 8015b08:	b082      	sub	sp, #8
 8015b0a:	b901      	cbnz	r1, 8015b0e <__ascii_mbtowc+0x6>
 8015b0c:	a901      	add	r1, sp, #4
 8015b0e:	b142      	cbz	r2, 8015b22 <__ascii_mbtowc+0x1a>
 8015b10:	b14b      	cbz	r3, 8015b26 <__ascii_mbtowc+0x1e>
 8015b12:	7813      	ldrb	r3, [r2, #0]
 8015b14:	600b      	str	r3, [r1, #0]
 8015b16:	7812      	ldrb	r2, [r2, #0]
 8015b18:	1e10      	subs	r0, r2, #0
 8015b1a:	bf18      	it	ne
 8015b1c:	2001      	movne	r0, #1
 8015b1e:	b002      	add	sp, #8
 8015b20:	4770      	bx	lr
 8015b22:	4610      	mov	r0, r2
 8015b24:	e7fb      	b.n	8015b1e <__ascii_mbtowc+0x16>
 8015b26:	f06f 0001 	mvn.w	r0, #1
 8015b2a:	e7f8      	b.n	8015b1e <__ascii_mbtowc+0x16>

08015b2c <memmove>:
 8015b2c:	4288      	cmp	r0, r1
 8015b2e:	b510      	push	{r4, lr}
 8015b30:	eb01 0402 	add.w	r4, r1, r2
 8015b34:	d902      	bls.n	8015b3c <memmove+0x10>
 8015b36:	4284      	cmp	r4, r0
 8015b38:	4623      	mov	r3, r4
 8015b3a:	d807      	bhi.n	8015b4c <memmove+0x20>
 8015b3c:	1e43      	subs	r3, r0, #1
 8015b3e:	42a1      	cmp	r1, r4
 8015b40:	d008      	beq.n	8015b54 <memmove+0x28>
 8015b42:	f811 2b01 	ldrb.w	r2, [r1], #1
 8015b46:	f803 2f01 	strb.w	r2, [r3, #1]!
 8015b4a:	e7f8      	b.n	8015b3e <memmove+0x12>
 8015b4c:	4402      	add	r2, r0
 8015b4e:	4601      	mov	r1, r0
 8015b50:	428a      	cmp	r2, r1
 8015b52:	d100      	bne.n	8015b56 <memmove+0x2a>
 8015b54:	bd10      	pop	{r4, pc}
 8015b56:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8015b5a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8015b5e:	e7f7      	b.n	8015b50 <memmove+0x24>

08015b60 <__malloc_lock>:
 8015b60:	4801      	ldr	r0, [pc, #4]	; (8015b68 <__malloc_lock+0x8>)
 8015b62:	f000 bc1f 	b.w	80163a4 <__retarget_lock_acquire_recursive>
 8015b66:	bf00      	nop
 8015b68:	2400125c 	.word	0x2400125c

08015b6c <__malloc_unlock>:
 8015b6c:	4801      	ldr	r0, [pc, #4]	; (8015b74 <__malloc_unlock+0x8>)
 8015b6e:	f000 bc1a 	b.w	80163a6 <__retarget_lock_release_recursive>
 8015b72:	bf00      	nop
 8015b74:	2400125c 	.word	0x2400125c

08015b78 <_realloc_r>:
 8015b78:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8015b7c:	4680      	mov	r8, r0
 8015b7e:	4614      	mov	r4, r2
 8015b80:	460e      	mov	r6, r1
 8015b82:	b921      	cbnz	r1, 8015b8e <_realloc_r+0x16>
 8015b84:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8015b88:	4611      	mov	r1, r2
 8015b8a:	f7ff bdad 	b.w	80156e8 <_malloc_r>
 8015b8e:	b92a      	cbnz	r2, 8015b9c <_realloc_r+0x24>
 8015b90:	f7ff fd3e 	bl	8015610 <_free_r>
 8015b94:	4625      	mov	r5, r4
 8015b96:	4628      	mov	r0, r5
 8015b98:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8015b9c:	f000 fc6a 	bl	8016474 <_malloc_usable_size_r>
 8015ba0:	4284      	cmp	r4, r0
 8015ba2:	4607      	mov	r7, r0
 8015ba4:	d802      	bhi.n	8015bac <_realloc_r+0x34>
 8015ba6:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8015baa:	d812      	bhi.n	8015bd2 <_realloc_r+0x5a>
 8015bac:	4621      	mov	r1, r4
 8015bae:	4640      	mov	r0, r8
 8015bb0:	f7ff fd9a 	bl	80156e8 <_malloc_r>
 8015bb4:	4605      	mov	r5, r0
 8015bb6:	2800      	cmp	r0, #0
 8015bb8:	d0ed      	beq.n	8015b96 <_realloc_r+0x1e>
 8015bba:	42bc      	cmp	r4, r7
 8015bbc:	4622      	mov	r2, r4
 8015bbe:	4631      	mov	r1, r6
 8015bc0:	bf28      	it	cs
 8015bc2:	463a      	movcs	r2, r7
 8015bc4:	f7fd fef2 	bl	80139ac <memcpy>
 8015bc8:	4631      	mov	r1, r6
 8015bca:	4640      	mov	r0, r8
 8015bcc:	f7ff fd20 	bl	8015610 <_free_r>
 8015bd0:	e7e1      	b.n	8015b96 <_realloc_r+0x1e>
 8015bd2:	4635      	mov	r5, r6
 8015bd4:	e7df      	b.n	8015b96 <_realloc_r+0x1e>

08015bd6 <__sfputc_r>:
 8015bd6:	6893      	ldr	r3, [r2, #8]
 8015bd8:	3b01      	subs	r3, #1
 8015bda:	2b00      	cmp	r3, #0
 8015bdc:	b410      	push	{r4}
 8015bde:	6093      	str	r3, [r2, #8]
 8015be0:	da08      	bge.n	8015bf4 <__sfputc_r+0x1e>
 8015be2:	6994      	ldr	r4, [r2, #24]
 8015be4:	42a3      	cmp	r3, r4
 8015be6:	db01      	blt.n	8015bec <__sfputc_r+0x16>
 8015be8:	290a      	cmp	r1, #10
 8015bea:	d103      	bne.n	8015bf4 <__sfputc_r+0x1e>
 8015bec:	f85d 4b04 	ldr.w	r4, [sp], #4
 8015bf0:	f000 b94a 	b.w	8015e88 <__swbuf_r>
 8015bf4:	6813      	ldr	r3, [r2, #0]
 8015bf6:	1c58      	adds	r0, r3, #1
 8015bf8:	6010      	str	r0, [r2, #0]
 8015bfa:	7019      	strb	r1, [r3, #0]
 8015bfc:	4608      	mov	r0, r1
 8015bfe:	f85d 4b04 	ldr.w	r4, [sp], #4
 8015c02:	4770      	bx	lr

08015c04 <__sfputs_r>:
 8015c04:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8015c06:	4606      	mov	r6, r0
 8015c08:	460f      	mov	r7, r1
 8015c0a:	4614      	mov	r4, r2
 8015c0c:	18d5      	adds	r5, r2, r3
 8015c0e:	42ac      	cmp	r4, r5
 8015c10:	d101      	bne.n	8015c16 <__sfputs_r+0x12>
 8015c12:	2000      	movs	r0, #0
 8015c14:	e007      	b.n	8015c26 <__sfputs_r+0x22>
 8015c16:	f814 1b01 	ldrb.w	r1, [r4], #1
 8015c1a:	463a      	mov	r2, r7
 8015c1c:	4630      	mov	r0, r6
 8015c1e:	f7ff ffda 	bl	8015bd6 <__sfputc_r>
 8015c22:	1c43      	adds	r3, r0, #1
 8015c24:	d1f3      	bne.n	8015c0e <__sfputs_r+0xa>
 8015c26:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08015c28 <_vfiprintf_r>:
 8015c28:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015c2c:	460d      	mov	r5, r1
 8015c2e:	b09d      	sub	sp, #116	; 0x74
 8015c30:	4614      	mov	r4, r2
 8015c32:	4698      	mov	r8, r3
 8015c34:	4606      	mov	r6, r0
 8015c36:	b118      	cbz	r0, 8015c40 <_vfiprintf_r+0x18>
 8015c38:	6983      	ldr	r3, [r0, #24]
 8015c3a:	b90b      	cbnz	r3, 8015c40 <_vfiprintf_r+0x18>
 8015c3c:	f000 fb14 	bl	8016268 <__sinit>
 8015c40:	4b89      	ldr	r3, [pc, #548]	; (8015e68 <_vfiprintf_r+0x240>)
 8015c42:	429d      	cmp	r5, r3
 8015c44:	d11b      	bne.n	8015c7e <_vfiprintf_r+0x56>
 8015c46:	6875      	ldr	r5, [r6, #4]
 8015c48:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8015c4a:	07d9      	lsls	r1, r3, #31
 8015c4c:	d405      	bmi.n	8015c5a <_vfiprintf_r+0x32>
 8015c4e:	89ab      	ldrh	r3, [r5, #12]
 8015c50:	059a      	lsls	r2, r3, #22
 8015c52:	d402      	bmi.n	8015c5a <_vfiprintf_r+0x32>
 8015c54:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8015c56:	f000 fba5 	bl	80163a4 <__retarget_lock_acquire_recursive>
 8015c5a:	89ab      	ldrh	r3, [r5, #12]
 8015c5c:	071b      	lsls	r3, r3, #28
 8015c5e:	d501      	bpl.n	8015c64 <_vfiprintf_r+0x3c>
 8015c60:	692b      	ldr	r3, [r5, #16]
 8015c62:	b9eb      	cbnz	r3, 8015ca0 <_vfiprintf_r+0x78>
 8015c64:	4629      	mov	r1, r5
 8015c66:	4630      	mov	r0, r6
 8015c68:	f000 f96e 	bl	8015f48 <__swsetup_r>
 8015c6c:	b1c0      	cbz	r0, 8015ca0 <_vfiprintf_r+0x78>
 8015c6e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8015c70:	07dc      	lsls	r4, r3, #31
 8015c72:	d50e      	bpl.n	8015c92 <_vfiprintf_r+0x6a>
 8015c74:	f04f 30ff 	mov.w	r0, #4294967295
 8015c78:	b01d      	add	sp, #116	; 0x74
 8015c7a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015c7e:	4b7b      	ldr	r3, [pc, #492]	; (8015e6c <_vfiprintf_r+0x244>)
 8015c80:	429d      	cmp	r5, r3
 8015c82:	d101      	bne.n	8015c88 <_vfiprintf_r+0x60>
 8015c84:	68b5      	ldr	r5, [r6, #8]
 8015c86:	e7df      	b.n	8015c48 <_vfiprintf_r+0x20>
 8015c88:	4b79      	ldr	r3, [pc, #484]	; (8015e70 <_vfiprintf_r+0x248>)
 8015c8a:	429d      	cmp	r5, r3
 8015c8c:	bf08      	it	eq
 8015c8e:	68f5      	ldreq	r5, [r6, #12]
 8015c90:	e7da      	b.n	8015c48 <_vfiprintf_r+0x20>
 8015c92:	89ab      	ldrh	r3, [r5, #12]
 8015c94:	0598      	lsls	r0, r3, #22
 8015c96:	d4ed      	bmi.n	8015c74 <_vfiprintf_r+0x4c>
 8015c98:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8015c9a:	f000 fb84 	bl	80163a6 <__retarget_lock_release_recursive>
 8015c9e:	e7e9      	b.n	8015c74 <_vfiprintf_r+0x4c>
 8015ca0:	2300      	movs	r3, #0
 8015ca2:	9309      	str	r3, [sp, #36]	; 0x24
 8015ca4:	2320      	movs	r3, #32
 8015ca6:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8015caa:	f8cd 800c 	str.w	r8, [sp, #12]
 8015cae:	2330      	movs	r3, #48	; 0x30
 8015cb0:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8015e74 <_vfiprintf_r+0x24c>
 8015cb4:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8015cb8:	f04f 0901 	mov.w	r9, #1
 8015cbc:	4623      	mov	r3, r4
 8015cbe:	469a      	mov	sl, r3
 8015cc0:	f813 2b01 	ldrb.w	r2, [r3], #1
 8015cc4:	b10a      	cbz	r2, 8015cca <_vfiprintf_r+0xa2>
 8015cc6:	2a25      	cmp	r2, #37	; 0x25
 8015cc8:	d1f9      	bne.n	8015cbe <_vfiprintf_r+0x96>
 8015cca:	ebba 0b04 	subs.w	fp, sl, r4
 8015cce:	d00b      	beq.n	8015ce8 <_vfiprintf_r+0xc0>
 8015cd0:	465b      	mov	r3, fp
 8015cd2:	4622      	mov	r2, r4
 8015cd4:	4629      	mov	r1, r5
 8015cd6:	4630      	mov	r0, r6
 8015cd8:	f7ff ff94 	bl	8015c04 <__sfputs_r>
 8015cdc:	3001      	adds	r0, #1
 8015cde:	f000 80aa 	beq.w	8015e36 <_vfiprintf_r+0x20e>
 8015ce2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8015ce4:	445a      	add	r2, fp
 8015ce6:	9209      	str	r2, [sp, #36]	; 0x24
 8015ce8:	f89a 3000 	ldrb.w	r3, [sl]
 8015cec:	2b00      	cmp	r3, #0
 8015cee:	f000 80a2 	beq.w	8015e36 <_vfiprintf_r+0x20e>
 8015cf2:	2300      	movs	r3, #0
 8015cf4:	f04f 32ff 	mov.w	r2, #4294967295
 8015cf8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8015cfc:	f10a 0a01 	add.w	sl, sl, #1
 8015d00:	9304      	str	r3, [sp, #16]
 8015d02:	9307      	str	r3, [sp, #28]
 8015d04:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8015d08:	931a      	str	r3, [sp, #104]	; 0x68
 8015d0a:	4654      	mov	r4, sl
 8015d0c:	2205      	movs	r2, #5
 8015d0e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8015d12:	4858      	ldr	r0, [pc, #352]	; (8015e74 <_vfiprintf_r+0x24c>)
 8015d14:	f7ea faec 	bl	80002f0 <memchr>
 8015d18:	9a04      	ldr	r2, [sp, #16]
 8015d1a:	b9d8      	cbnz	r0, 8015d54 <_vfiprintf_r+0x12c>
 8015d1c:	06d1      	lsls	r1, r2, #27
 8015d1e:	bf44      	itt	mi
 8015d20:	2320      	movmi	r3, #32
 8015d22:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8015d26:	0713      	lsls	r3, r2, #28
 8015d28:	bf44      	itt	mi
 8015d2a:	232b      	movmi	r3, #43	; 0x2b
 8015d2c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8015d30:	f89a 3000 	ldrb.w	r3, [sl]
 8015d34:	2b2a      	cmp	r3, #42	; 0x2a
 8015d36:	d015      	beq.n	8015d64 <_vfiprintf_r+0x13c>
 8015d38:	9a07      	ldr	r2, [sp, #28]
 8015d3a:	4654      	mov	r4, sl
 8015d3c:	2000      	movs	r0, #0
 8015d3e:	f04f 0c0a 	mov.w	ip, #10
 8015d42:	4621      	mov	r1, r4
 8015d44:	f811 3b01 	ldrb.w	r3, [r1], #1
 8015d48:	3b30      	subs	r3, #48	; 0x30
 8015d4a:	2b09      	cmp	r3, #9
 8015d4c:	d94e      	bls.n	8015dec <_vfiprintf_r+0x1c4>
 8015d4e:	b1b0      	cbz	r0, 8015d7e <_vfiprintf_r+0x156>
 8015d50:	9207      	str	r2, [sp, #28]
 8015d52:	e014      	b.n	8015d7e <_vfiprintf_r+0x156>
 8015d54:	eba0 0308 	sub.w	r3, r0, r8
 8015d58:	fa09 f303 	lsl.w	r3, r9, r3
 8015d5c:	4313      	orrs	r3, r2
 8015d5e:	9304      	str	r3, [sp, #16]
 8015d60:	46a2      	mov	sl, r4
 8015d62:	e7d2      	b.n	8015d0a <_vfiprintf_r+0xe2>
 8015d64:	9b03      	ldr	r3, [sp, #12]
 8015d66:	1d19      	adds	r1, r3, #4
 8015d68:	681b      	ldr	r3, [r3, #0]
 8015d6a:	9103      	str	r1, [sp, #12]
 8015d6c:	2b00      	cmp	r3, #0
 8015d6e:	bfbb      	ittet	lt
 8015d70:	425b      	neglt	r3, r3
 8015d72:	f042 0202 	orrlt.w	r2, r2, #2
 8015d76:	9307      	strge	r3, [sp, #28]
 8015d78:	9307      	strlt	r3, [sp, #28]
 8015d7a:	bfb8      	it	lt
 8015d7c:	9204      	strlt	r2, [sp, #16]
 8015d7e:	7823      	ldrb	r3, [r4, #0]
 8015d80:	2b2e      	cmp	r3, #46	; 0x2e
 8015d82:	d10c      	bne.n	8015d9e <_vfiprintf_r+0x176>
 8015d84:	7863      	ldrb	r3, [r4, #1]
 8015d86:	2b2a      	cmp	r3, #42	; 0x2a
 8015d88:	d135      	bne.n	8015df6 <_vfiprintf_r+0x1ce>
 8015d8a:	9b03      	ldr	r3, [sp, #12]
 8015d8c:	1d1a      	adds	r2, r3, #4
 8015d8e:	681b      	ldr	r3, [r3, #0]
 8015d90:	9203      	str	r2, [sp, #12]
 8015d92:	2b00      	cmp	r3, #0
 8015d94:	bfb8      	it	lt
 8015d96:	f04f 33ff 	movlt.w	r3, #4294967295
 8015d9a:	3402      	adds	r4, #2
 8015d9c:	9305      	str	r3, [sp, #20]
 8015d9e:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8015e84 <_vfiprintf_r+0x25c>
 8015da2:	7821      	ldrb	r1, [r4, #0]
 8015da4:	2203      	movs	r2, #3
 8015da6:	4650      	mov	r0, sl
 8015da8:	f7ea faa2 	bl	80002f0 <memchr>
 8015dac:	b140      	cbz	r0, 8015dc0 <_vfiprintf_r+0x198>
 8015dae:	2340      	movs	r3, #64	; 0x40
 8015db0:	eba0 000a 	sub.w	r0, r0, sl
 8015db4:	fa03 f000 	lsl.w	r0, r3, r0
 8015db8:	9b04      	ldr	r3, [sp, #16]
 8015dba:	4303      	orrs	r3, r0
 8015dbc:	3401      	adds	r4, #1
 8015dbe:	9304      	str	r3, [sp, #16]
 8015dc0:	f814 1b01 	ldrb.w	r1, [r4], #1
 8015dc4:	482c      	ldr	r0, [pc, #176]	; (8015e78 <_vfiprintf_r+0x250>)
 8015dc6:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8015dca:	2206      	movs	r2, #6
 8015dcc:	f7ea fa90 	bl	80002f0 <memchr>
 8015dd0:	2800      	cmp	r0, #0
 8015dd2:	d03f      	beq.n	8015e54 <_vfiprintf_r+0x22c>
 8015dd4:	4b29      	ldr	r3, [pc, #164]	; (8015e7c <_vfiprintf_r+0x254>)
 8015dd6:	bb1b      	cbnz	r3, 8015e20 <_vfiprintf_r+0x1f8>
 8015dd8:	9b03      	ldr	r3, [sp, #12]
 8015dda:	3307      	adds	r3, #7
 8015ddc:	f023 0307 	bic.w	r3, r3, #7
 8015de0:	3308      	adds	r3, #8
 8015de2:	9303      	str	r3, [sp, #12]
 8015de4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8015de6:	443b      	add	r3, r7
 8015de8:	9309      	str	r3, [sp, #36]	; 0x24
 8015dea:	e767      	b.n	8015cbc <_vfiprintf_r+0x94>
 8015dec:	fb0c 3202 	mla	r2, ip, r2, r3
 8015df0:	460c      	mov	r4, r1
 8015df2:	2001      	movs	r0, #1
 8015df4:	e7a5      	b.n	8015d42 <_vfiprintf_r+0x11a>
 8015df6:	2300      	movs	r3, #0
 8015df8:	3401      	adds	r4, #1
 8015dfa:	9305      	str	r3, [sp, #20]
 8015dfc:	4619      	mov	r1, r3
 8015dfe:	f04f 0c0a 	mov.w	ip, #10
 8015e02:	4620      	mov	r0, r4
 8015e04:	f810 2b01 	ldrb.w	r2, [r0], #1
 8015e08:	3a30      	subs	r2, #48	; 0x30
 8015e0a:	2a09      	cmp	r2, #9
 8015e0c:	d903      	bls.n	8015e16 <_vfiprintf_r+0x1ee>
 8015e0e:	2b00      	cmp	r3, #0
 8015e10:	d0c5      	beq.n	8015d9e <_vfiprintf_r+0x176>
 8015e12:	9105      	str	r1, [sp, #20]
 8015e14:	e7c3      	b.n	8015d9e <_vfiprintf_r+0x176>
 8015e16:	fb0c 2101 	mla	r1, ip, r1, r2
 8015e1a:	4604      	mov	r4, r0
 8015e1c:	2301      	movs	r3, #1
 8015e1e:	e7f0      	b.n	8015e02 <_vfiprintf_r+0x1da>
 8015e20:	ab03      	add	r3, sp, #12
 8015e22:	9300      	str	r3, [sp, #0]
 8015e24:	462a      	mov	r2, r5
 8015e26:	4b16      	ldr	r3, [pc, #88]	; (8015e80 <_vfiprintf_r+0x258>)
 8015e28:	a904      	add	r1, sp, #16
 8015e2a:	4630      	mov	r0, r6
 8015e2c:	f7fd fe64 	bl	8013af8 <_printf_float>
 8015e30:	4607      	mov	r7, r0
 8015e32:	1c78      	adds	r0, r7, #1
 8015e34:	d1d6      	bne.n	8015de4 <_vfiprintf_r+0x1bc>
 8015e36:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8015e38:	07d9      	lsls	r1, r3, #31
 8015e3a:	d405      	bmi.n	8015e48 <_vfiprintf_r+0x220>
 8015e3c:	89ab      	ldrh	r3, [r5, #12]
 8015e3e:	059a      	lsls	r2, r3, #22
 8015e40:	d402      	bmi.n	8015e48 <_vfiprintf_r+0x220>
 8015e42:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8015e44:	f000 faaf 	bl	80163a6 <__retarget_lock_release_recursive>
 8015e48:	89ab      	ldrh	r3, [r5, #12]
 8015e4a:	065b      	lsls	r3, r3, #25
 8015e4c:	f53f af12 	bmi.w	8015c74 <_vfiprintf_r+0x4c>
 8015e50:	9809      	ldr	r0, [sp, #36]	; 0x24
 8015e52:	e711      	b.n	8015c78 <_vfiprintf_r+0x50>
 8015e54:	ab03      	add	r3, sp, #12
 8015e56:	9300      	str	r3, [sp, #0]
 8015e58:	462a      	mov	r2, r5
 8015e5a:	4b09      	ldr	r3, [pc, #36]	; (8015e80 <_vfiprintf_r+0x258>)
 8015e5c:	a904      	add	r1, sp, #16
 8015e5e:	4630      	mov	r0, r6
 8015e60:	f7fe f8d6 	bl	8014010 <_printf_i>
 8015e64:	e7e4      	b.n	8015e30 <_vfiprintf_r+0x208>
 8015e66:	bf00      	nop
 8015e68:	080173ac 	.word	0x080173ac
 8015e6c:	080173cc 	.word	0x080173cc
 8015e70:	0801738c 	.word	0x0801738c
 8015e74:	08017234 	.word	0x08017234
 8015e78:	0801723e 	.word	0x0801723e
 8015e7c:	08013af9 	.word	0x08013af9
 8015e80:	08015c05 	.word	0x08015c05
 8015e84:	0801723a 	.word	0x0801723a

08015e88 <__swbuf_r>:
 8015e88:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8015e8a:	460e      	mov	r6, r1
 8015e8c:	4614      	mov	r4, r2
 8015e8e:	4605      	mov	r5, r0
 8015e90:	b118      	cbz	r0, 8015e9a <__swbuf_r+0x12>
 8015e92:	6983      	ldr	r3, [r0, #24]
 8015e94:	b90b      	cbnz	r3, 8015e9a <__swbuf_r+0x12>
 8015e96:	f000 f9e7 	bl	8016268 <__sinit>
 8015e9a:	4b21      	ldr	r3, [pc, #132]	; (8015f20 <__swbuf_r+0x98>)
 8015e9c:	429c      	cmp	r4, r3
 8015e9e:	d12b      	bne.n	8015ef8 <__swbuf_r+0x70>
 8015ea0:	686c      	ldr	r4, [r5, #4]
 8015ea2:	69a3      	ldr	r3, [r4, #24]
 8015ea4:	60a3      	str	r3, [r4, #8]
 8015ea6:	89a3      	ldrh	r3, [r4, #12]
 8015ea8:	071a      	lsls	r2, r3, #28
 8015eaa:	d52f      	bpl.n	8015f0c <__swbuf_r+0x84>
 8015eac:	6923      	ldr	r3, [r4, #16]
 8015eae:	b36b      	cbz	r3, 8015f0c <__swbuf_r+0x84>
 8015eb0:	6923      	ldr	r3, [r4, #16]
 8015eb2:	6820      	ldr	r0, [r4, #0]
 8015eb4:	1ac0      	subs	r0, r0, r3
 8015eb6:	6963      	ldr	r3, [r4, #20]
 8015eb8:	b2f6      	uxtb	r6, r6
 8015eba:	4283      	cmp	r3, r0
 8015ebc:	4637      	mov	r7, r6
 8015ebe:	dc04      	bgt.n	8015eca <__swbuf_r+0x42>
 8015ec0:	4621      	mov	r1, r4
 8015ec2:	4628      	mov	r0, r5
 8015ec4:	f000 f93c 	bl	8016140 <_fflush_r>
 8015ec8:	bb30      	cbnz	r0, 8015f18 <__swbuf_r+0x90>
 8015eca:	68a3      	ldr	r3, [r4, #8]
 8015ecc:	3b01      	subs	r3, #1
 8015ece:	60a3      	str	r3, [r4, #8]
 8015ed0:	6823      	ldr	r3, [r4, #0]
 8015ed2:	1c5a      	adds	r2, r3, #1
 8015ed4:	6022      	str	r2, [r4, #0]
 8015ed6:	701e      	strb	r6, [r3, #0]
 8015ed8:	6963      	ldr	r3, [r4, #20]
 8015eda:	3001      	adds	r0, #1
 8015edc:	4283      	cmp	r3, r0
 8015ede:	d004      	beq.n	8015eea <__swbuf_r+0x62>
 8015ee0:	89a3      	ldrh	r3, [r4, #12]
 8015ee2:	07db      	lsls	r3, r3, #31
 8015ee4:	d506      	bpl.n	8015ef4 <__swbuf_r+0x6c>
 8015ee6:	2e0a      	cmp	r6, #10
 8015ee8:	d104      	bne.n	8015ef4 <__swbuf_r+0x6c>
 8015eea:	4621      	mov	r1, r4
 8015eec:	4628      	mov	r0, r5
 8015eee:	f000 f927 	bl	8016140 <_fflush_r>
 8015ef2:	b988      	cbnz	r0, 8015f18 <__swbuf_r+0x90>
 8015ef4:	4638      	mov	r0, r7
 8015ef6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8015ef8:	4b0a      	ldr	r3, [pc, #40]	; (8015f24 <__swbuf_r+0x9c>)
 8015efa:	429c      	cmp	r4, r3
 8015efc:	d101      	bne.n	8015f02 <__swbuf_r+0x7a>
 8015efe:	68ac      	ldr	r4, [r5, #8]
 8015f00:	e7cf      	b.n	8015ea2 <__swbuf_r+0x1a>
 8015f02:	4b09      	ldr	r3, [pc, #36]	; (8015f28 <__swbuf_r+0xa0>)
 8015f04:	429c      	cmp	r4, r3
 8015f06:	bf08      	it	eq
 8015f08:	68ec      	ldreq	r4, [r5, #12]
 8015f0a:	e7ca      	b.n	8015ea2 <__swbuf_r+0x1a>
 8015f0c:	4621      	mov	r1, r4
 8015f0e:	4628      	mov	r0, r5
 8015f10:	f000 f81a 	bl	8015f48 <__swsetup_r>
 8015f14:	2800      	cmp	r0, #0
 8015f16:	d0cb      	beq.n	8015eb0 <__swbuf_r+0x28>
 8015f18:	f04f 37ff 	mov.w	r7, #4294967295
 8015f1c:	e7ea      	b.n	8015ef4 <__swbuf_r+0x6c>
 8015f1e:	bf00      	nop
 8015f20:	080173ac 	.word	0x080173ac
 8015f24:	080173cc 	.word	0x080173cc
 8015f28:	0801738c 	.word	0x0801738c

08015f2c <__ascii_wctomb>:
 8015f2c:	b149      	cbz	r1, 8015f42 <__ascii_wctomb+0x16>
 8015f2e:	2aff      	cmp	r2, #255	; 0xff
 8015f30:	bf85      	ittet	hi
 8015f32:	238a      	movhi	r3, #138	; 0x8a
 8015f34:	6003      	strhi	r3, [r0, #0]
 8015f36:	700a      	strbls	r2, [r1, #0]
 8015f38:	f04f 30ff 	movhi.w	r0, #4294967295
 8015f3c:	bf98      	it	ls
 8015f3e:	2001      	movls	r0, #1
 8015f40:	4770      	bx	lr
 8015f42:	4608      	mov	r0, r1
 8015f44:	4770      	bx	lr
	...

08015f48 <__swsetup_r>:
 8015f48:	4b32      	ldr	r3, [pc, #200]	; (8016014 <__swsetup_r+0xcc>)
 8015f4a:	b570      	push	{r4, r5, r6, lr}
 8015f4c:	681d      	ldr	r5, [r3, #0]
 8015f4e:	4606      	mov	r6, r0
 8015f50:	460c      	mov	r4, r1
 8015f52:	b125      	cbz	r5, 8015f5e <__swsetup_r+0x16>
 8015f54:	69ab      	ldr	r3, [r5, #24]
 8015f56:	b913      	cbnz	r3, 8015f5e <__swsetup_r+0x16>
 8015f58:	4628      	mov	r0, r5
 8015f5a:	f000 f985 	bl	8016268 <__sinit>
 8015f5e:	4b2e      	ldr	r3, [pc, #184]	; (8016018 <__swsetup_r+0xd0>)
 8015f60:	429c      	cmp	r4, r3
 8015f62:	d10f      	bne.n	8015f84 <__swsetup_r+0x3c>
 8015f64:	686c      	ldr	r4, [r5, #4]
 8015f66:	89a3      	ldrh	r3, [r4, #12]
 8015f68:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8015f6c:	0719      	lsls	r1, r3, #28
 8015f6e:	d42c      	bmi.n	8015fca <__swsetup_r+0x82>
 8015f70:	06dd      	lsls	r5, r3, #27
 8015f72:	d411      	bmi.n	8015f98 <__swsetup_r+0x50>
 8015f74:	2309      	movs	r3, #9
 8015f76:	6033      	str	r3, [r6, #0]
 8015f78:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8015f7c:	81a3      	strh	r3, [r4, #12]
 8015f7e:	f04f 30ff 	mov.w	r0, #4294967295
 8015f82:	e03e      	b.n	8016002 <__swsetup_r+0xba>
 8015f84:	4b25      	ldr	r3, [pc, #148]	; (801601c <__swsetup_r+0xd4>)
 8015f86:	429c      	cmp	r4, r3
 8015f88:	d101      	bne.n	8015f8e <__swsetup_r+0x46>
 8015f8a:	68ac      	ldr	r4, [r5, #8]
 8015f8c:	e7eb      	b.n	8015f66 <__swsetup_r+0x1e>
 8015f8e:	4b24      	ldr	r3, [pc, #144]	; (8016020 <__swsetup_r+0xd8>)
 8015f90:	429c      	cmp	r4, r3
 8015f92:	bf08      	it	eq
 8015f94:	68ec      	ldreq	r4, [r5, #12]
 8015f96:	e7e6      	b.n	8015f66 <__swsetup_r+0x1e>
 8015f98:	0758      	lsls	r0, r3, #29
 8015f9a:	d512      	bpl.n	8015fc2 <__swsetup_r+0x7a>
 8015f9c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8015f9e:	b141      	cbz	r1, 8015fb2 <__swsetup_r+0x6a>
 8015fa0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8015fa4:	4299      	cmp	r1, r3
 8015fa6:	d002      	beq.n	8015fae <__swsetup_r+0x66>
 8015fa8:	4630      	mov	r0, r6
 8015faa:	f7ff fb31 	bl	8015610 <_free_r>
 8015fae:	2300      	movs	r3, #0
 8015fb0:	6363      	str	r3, [r4, #52]	; 0x34
 8015fb2:	89a3      	ldrh	r3, [r4, #12]
 8015fb4:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8015fb8:	81a3      	strh	r3, [r4, #12]
 8015fba:	2300      	movs	r3, #0
 8015fbc:	6063      	str	r3, [r4, #4]
 8015fbe:	6923      	ldr	r3, [r4, #16]
 8015fc0:	6023      	str	r3, [r4, #0]
 8015fc2:	89a3      	ldrh	r3, [r4, #12]
 8015fc4:	f043 0308 	orr.w	r3, r3, #8
 8015fc8:	81a3      	strh	r3, [r4, #12]
 8015fca:	6923      	ldr	r3, [r4, #16]
 8015fcc:	b94b      	cbnz	r3, 8015fe2 <__swsetup_r+0x9a>
 8015fce:	89a3      	ldrh	r3, [r4, #12]
 8015fd0:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8015fd4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8015fd8:	d003      	beq.n	8015fe2 <__swsetup_r+0x9a>
 8015fda:	4621      	mov	r1, r4
 8015fdc:	4630      	mov	r0, r6
 8015fde:	f000 fa09 	bl	80163f4 <__smakebuf_r>
 8015fe2:	89a0      	ldrh	r0, [r4, #12]
 8015fe4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8015fe8:	f010 0301 	ands.w	r3, r0, #1
 8015fec:	d00a      	beq.n	8016004 <__swsetup_r+0xbc>
 8015fee:	2300      	movs	r3, #0
 8015ff0:	60a3      	str	r3, [r4, #8]
 8015ff2:	6963      	ldr	r3, [r4, #20]
 8015ff4:	425b      	negs	r3, r3
 8015ff6:	61a3      	str	r3, [r4, #24]
 8015ff8:	6923      	ldr	r3, [r4, #16]
 8015ffa:	b943      	cbnz	r3, 801600e <__swsetup_r+0xc6>
 8015ffc:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8016000:	d1ba      	bne.n	8015f78 <__swsetup_r+0x30>
 8016002:	bd70      	pop	{r4, r5, r6, pc}
 8016004:	0781      	lsls	r1, r0, #30
 8016006:	bf58      	it	pl
 8016008:	6963      	ldrpl	r3, [r4, #20]
 801600a:	60a3      	str	r3, [r4, #8]
 801600c:	e7f4      	b.n	8015ff8 <__swsetup_r+0xb0>
 801600e:	2000      	movs	r0, #0
 8016010:	e7f7      	b.n	8016002 <__swsetup_r+0xba>
 8016012:	bf00      	nop
 8016014:	24000160 	.word	0x24000160
 8016018:	080173ac 	.word	0x080173ac
 801601c:	080173cc 	.word	0x080173cc
 8016020:	0801738c 	.word	0x0801738c

08016024 <abort>:
 8016024:	b508      	push	{r3, lr}
 8016026:	2006      	movs	r0, #6
 8016028:	f000 fa54 	bl	80164d4 <raise>
 801602c:	2001      	movs	r0, #1
 801602e:	f7eb ff23 	bl	8001e78 <_exit>
	...

08016034 <__sflush_r>:
 8016034:	898a      	ldrh	r2, [r1, #12]
 8016036:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801603a:	4605      	mov	r5, r0
 801603c:	0710      	lsls	r0, r2, #28
 801603e:	460c      	mov	r4, r1
 8016040:	d458      	bmi.n	80160f4 <__sflush_r+0xc0>
 8016042:	684b      	ldr	r3, [r1, #4]
 8016044:	2b00      	cmp	r3, #0
 8016046:	dc05      	bgt.n	8016054 <__sflush_r+0x20>
 8016048:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 801604a:	2b00      	cmp	r3, #0
 801604c:	dc02      	bgt.n	8016054 <__sflush_r+0x20>
 801604e:	2000      	movs	r0, #0
 8016050:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8016054:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8016056:	2e00      	cmp	r6, #0
 8016058:	d0f9      	beq.n	801604e <__sflush_r+0x1a>
 801605a:	2300      	movs	r3, #0
 801605c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8016060:	682f      	ldr	r7, [r5, #0]
 8016062:	602b      	str	r3, [r5, #0]
 8016064:	d032      	beq.n	80160cc <__sflush_r+0x98>
 8016066:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8016068:	89a3      	ldrh	r3, [r4, #12]
 801606a:	075a      	lsls	r2, r3, #29
 801606c:	d505      	bpl.n	801607a <__sflush_r+0x46>
 801606e:	6863      	ldr	r3, [r4, #4]
 8016070:	1ac0      	subs	r0, r0, r3
 8016072:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8016074:	b10b      	cbz	r3, 801607a <__sflush_r+0x46>
 8016076:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8016078:	1ac0      	subs	r0, r0, r3
 801607a:	2300      	movs	r3, #0
 801607c:	4602      	mov	r2, r0
 801607e:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8016080:	6a21      	ldr	r1, [r4, #32]
 8016082:	4628      	mov	r0, r5
 8016084:	47b0      	blx	r6
 8016086:	1c43      	adds	r3, r0, #1
 8016088:	89a3      	ldrh	r3, [r4, #12]
 801608a:	d106      	bne.n	801609a <__sflush_r+0x66>
 801608c:	6829      	ldr	r1, [r5, #0]
 801608e:	291d      	cmp	r1, #29
 8016090:	d82c      	bhi.n	80160ec <__sflush_r+0xb8>
 8016092:	4a2a      	ldr	r2, [pc, #168]	; (801613c <__sflush_r+0x108>)
 8016094:	40ca      	lsrs	r2, r1
 8016096:	07d6      	lsls	r6, r2, #31
 8016098:	d528      	bpl.n	80160ec <__sflush_r+0xb8>
 801609a:	2200      	movs	r2, #0
 801609c:	6062      	str	r2, [r4, #4]
 801609e:	04d9      	lsls	r1, r3, #19
 80160a0:	6922      	ldr	r2, [r4, #16]
 80160a2:	6022      	str	r2, [r4, #0]
 80160a4:	d504      	bpl.n	80160b0 <__sflush_r+0x7c>
 80160a6:	1c42      	adds	r2, r0, #1
 80160a8:	d101      	bne.n	80160ae <__sflush_r+0x7a>
 80160aa:	682b      	ldr	r3, [r5, #0]
 80160ac:	b903      	cbnz	r3, 80160b0 <__sflush_r+0x7c>
 80160ae:	6560      	str	r0, [r4, #84]	; 0x54
 80160b0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80160b2:	602f      	str	r7, [r5, #0]
 80160b4:	2900      	cmp	r1, #0
 80160b6:	d0ca      	beq.n	801604e <__sflush_r+0x1a>
 80160b8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80160bc:	4299      	cmp	r1, r3
 80160be:	d002      	beq.n	80160c6 <__sflush_r+0x92>
 80160c0:	4628      	mov	r0, r5
 80160c2:	f7ff faa5 	bl	8015610 <_free_r>
 80160c6:	2000      	movs	r0, #0
 80160c8:	6360      	str	r0, [r4, #52]	; 0x34
 80160ca:	e7c1      	b.n	8016050 <__sflush_r+0x1c>
 80160cc:	6a21      	ldr	r1, [r4, #32]
 80160ce:	2301      	movs	r3, #1
 80160d0:	4628      	mov	r0, r5
 80160d2:	47b0      	blx	r6
 80160d4:	1c41      	adds	r1, r0, #1
 80160d6:	d1c7      	bne.n	8016068 <__sflush_r+0x34>
 80160d8:	682b      	ldr	r3, [r5, #0]
 80160da:	2b00      	cmp	r3, #0
 80160dc:	d0c4      	beq.n	8016068 <__sflush_r+0x34>
 80160de:	2b1d      	cmp	r3, #29
 80160e0:	d001      	beq.n	80160e6 <__sflush_r+0xb2>
 80160e2:	2b16      	cmp	r3, #22
 80160e4:	d101      	bne.n	80160ea <__sflush_r+0xb6>
 80160e6:	602f      	str	r7, [r5, #0]
 80160e8:	e7b1      	b.n	801604e <__sflush_r+0x1a>
 80160ea:	89a3      	ldrh	r3, [r4, #12]
 80160ec:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80160f0:	81a3      	strh	r3, [r4, #12]
 80160f2:	e7ad      	b.n	8016050 <__sflush_r+0x1c>
 80160f4:	690f      	ldr	r7, [r1, #16]
 80160f6:	2f00      	cmp	r7, #0
 80160f8:	d0a9      	beq.n	801604e <__sflush_r+0x1a>
 80160fa:	0793      	lsls	r3, r2, #30
 80160fc:	680e      	ldr	r6, [r1, #0]
 80160fe:	bf08      	it	eq
 8016100:	694b      	ldreq	r3, [r1, #20]
 8016102:	600f      	str	r7, [r1, #0]
 8016104:	bf18      	it	ne
 8016106:	2300      	movne	r3, #0
 8016108:	eba6 0807 	sub.w	r8, r6, r7
 801610c:	608b      	str	r3, [r1, #8]
 801610e:	f1b8 0f00 	cmp.w	r8, #0
 8016112:	dd9c      	ble.n	801604e <__sflush_r+0x1a>
 8016114:	6a21      	ldr	r1, [r4, #32]
 8016116:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8016118:	4643      	mov	r3, r8
 801611a:	463a      	mov	r2, r7
 801611c:	4628      	mov	r0, r5
 801611e:	47b0      	blx	r6
 8016120:	2800      	cmp	r0, #0
 8016122:	dc06      	bgt.n	8016132 <__sflush_r+0xfe>
 8016124:	89a3      	ldrh	r3, [r4, #12]
 8016126:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801612a:	81a3      	strh	r3, [r4, #12]
 801612c:	f04f 30ff 	mov.w	r0, #4294967295
 8016130:	e78e      	b.n	8016050 <__sflush_r+0x1c>
 8016132:	4407      	add	r7, r0
 8016134:	eba8 0800 	sub.w	r8, r8, r0
 8016138:	e7e9      	b.n	801610e <__sflush_r+0xda>
 801613a:	bf00      	nop
 801613c:	20400001 	.word	0x20400001

08016140 <_fflush_r>:
 8016140:	b538      	push	{r3, r4, r5, lr}
 8016142:	690b      	ldr	r3, [r1, #16]
 8016144:	4605      	mov	r5, r0
 8016146:	460c      	mov	r4, r1
 8016148:	b913      	cbnz	r3, 8016150 <_fflush_r+0x10>
 801614a:	2500      	movs	r5, #0
 801614c:	4628      	mov	r0, r5
 801614e:	bd38      	pop	{r3, r4, r5, pc}
 8016150:	b118      	cbz	r0, 801615a <_fflush_r+0x1a>
 8016152:	6983      	ldr	r3, [r0, #24]
 8016154:	b90b      	cbnz	r3, 801615a <_fflush_r+0x1a>
 8016156:	f000 f887 	bl	8016268 <__sinit>
 801615a:	4b14      	ldr	r3, [pc, #80]	; (80161ac <_fflush_r+0x6c>)
 801615c:	429c      	cmp	r4, r3
 801615e:	d11b      	bne.n	8016198 <_fflush_r+0x58>
 8016160:	686c      	ldr	r4, [r5, #4]
 8016162:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8016166:	2b00      	cmp	r3, #0
 8016168:	d0ef      	beq.n	801614a <_fflush_r+0xa>
 801616a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 801616c:	07d0      	lsls	r0, r2, #31
 801616e:	d404      	bmi.n	801617a <_fflush_r+0x3a>
 8016170:	0599      	lsls	r1, r3, #22
 8016172:	d402      	bmi.n	801617a <_fflush_r+0x3a>
 8016174:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8016176:	f000 f915 	bl	80163a4 <__retarget_lock_acquire_recursive>
 801617a:	4628      	mov	r0, r5
 801617c:	4621      	mov	r1, r4
 801617e:	f7ff ff59 	bl	8016034 <__sflush_r>
 8016182:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8016184:	07da      	lsls	r2, r3, #31
 8016186:	4605      	mov	r5, r0
 8016188:	d4e0      	bmi.n	801614c <_fflush_r+0xc>
 801618a:	89a3      	ldrh	r3, [r4, #12]
 801618c:	059b      	lsls	r3, r3, #22
 801618e:	d4dd      	bmi.n	801614c <_fflush_r+0xc>
 8016190:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8016192:	f000 f908 	bl	80163a6 <__retarget_lock_release_recursive>
 8016196:	e7d9      	b.n	801614c <_fflush_r+0xc>
 8016198:	4b05      	ldr	r3, [pc, #20]	; (80161b0 <_fflush_r+0x70>)
 801619a:	429c      	cmp	r4, r3
 801619c:	d101      	bne.n	80161a2 <_fflush_r+0x62>
 801619e:	68ac      	ldr	r4, [r5, #8]
 80161a0:	e7df      	b.n	8016162 <_fflush_r+0x22>
 80161a2:	4b04      	ldr	r3, [pc, #16]	; (80161b4 <_fflush_r+0x74>)
 80161a4:	429c      	cmp	r4, r3
 80161a6:	bf08      	it	eq
 80161a8:	68ec      	ldreq	r4, [r5, #12]
 80161aa:	e7da      	b.n	8016162 <_fflush_r+0x22>
 80161ac:	080173ac 	.word	0x080173ac
 80161b0:	080173cc 	.word	0x080173cc
 80161b4:	0801738c 	.word	0x0801738c

080161b8 <std>:
 80161b8:	2300      	movs	r3, #0
 80161ba:	b510      	push	{r4, lr}
 80161bc:	4604      	mov	r4, r0
 80161be:	e9c0 3300 	strd	r3, r3, [r0]
 80161c2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80161c6:	6083      	str	r3, [r0, #8]
 80161c8:	8181      	strh	r1, [r0, #12]
 80161ca:	6643      	str	r3, [r0, #100]	; 0x64
 80161cc:	81c2      	strh	r2, [r0, #14]
 80161ce:	6183      	str	r3, [r0, #24]
 80161d0:	4619      	mov	r1, r3
 80161d2:	2208      	movs	r2, #8
 80161d4:	305c      	adds	r0, #92	; 0x5c
 80161d6:	f7fd fbf7 	bl	80139c8 <memset>
 80161da:	4b05      	ldr	r3, [pc, #20]	; (80161f0 <std+0x38>)
 80161dc:	6263      	str	r3, [r4, #36]	; 0x24
 80161de:	4b05      	ldr	r3, [pc, #20]	; (80161f4 <std+0x3c>)
 80161e0:	62a3      	str	r3, [r4, #40]	; 0x28
 80161e2:	4b05      	ldr	r3, [pc, #20]	; (80161f8 <std+0x40>)
 80161e4:	62e3      	str	r3, [r4, #44]	; 0x2c
 80161e6:	4b05      	ldr	r3, [pc, #20]	; (80161fc <std+0x44>)
 80161e8:	6224      	str	r4, [r4, #32]
 80161ea:	6323      	str	r3, [r4, #48]	; 0x30
 80161ec:	bd10      	pop	{r4, pc}
 80161ee:	bf00      	nop
 80161f0:	0801650d 	.word	0x0801650d
 80161f4:	0801652f 	.word	0x0801652f
 80161f8:	08016567 	.word	0x08016567
 80161fc:	0801658b 	.word	0x0801658b

08016200 <_cleanup_r>:
 8016200:	4901      	ldr	r1, [pc, #4]	; (8016208 <_cleanup_r+0x8>)
 8016202:	f000 b8af 	b.w	8016364 <_fwalk_reent>
 8016206:	bf00      	nop
 8016208:	08016141 	.word	0x08016141

0801620c <__sfmoreglue>:
 801620c:	b570      	push	{r4, r5, r6, lr}
 801620e:	2268      	movs	r2, #104	; 0x68
 8016210:	1e4d      	subs	r5, r1, #1
 8016212:	4355      	muls	r5, r2
 8016214:	460e      	mov	r6, r1
 8016216:	f105 0174 	add.w	r1, r5, #116	; 0x74
 801621a:	f7ff fa65 	bl	80156e8 <_malloc_r>
 801621e:	4604      	mov	r4, r0
 8016220:	b140      	cbz	r0, 8016234 <__sfmoreglue+0x28>
 8016222:	2100      	movs	r1, #0
 8016224:	e9c0 1600 	strd	r1, r6, [r0]
 8016228:	300c      	adds	r0, #12
 801622a:	60a0      	str	r0, [r4, #8]
 801622c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8016230:	f7fd fbca 	bl	80139c8 <memset>
 8016234:	4620      	mov	r0, r4
 8016236:	bd70      	pop	{r4, r5, r6, pc}

08016238 <__sfp_lock_acquire>:
 8016238:	4801      	ldr	r0, [pc, #4]	; (8016240 <__sfp_lock_acquire+0x8>)
 801623a:	f000 b8b3 	b.w	80163a4 <__retarget_lock_acquire_recursive>
 801623e:	bf00      	nop
 8016240:	2400125d 	.word	0x2400125d

08016244 <__sfp_lock_release>:
 8016244:	4801      	ldr	r0, [pc, #4]	; (801624c <__sfp_lock_release+0x8>)
 8016246:	f000 b8ae 	b.w	80163a6 <__retarget_lock_release_recursive>
 801624a:	bf00      	nop
 801624c:	2400125d 	.word	0x2400125d

08016250 <__sinit_lock_acquire>:
 8016250:	4801      	ldr	r0, [pc, #4]	; (8016258 <__sinit_lock_acquire+0x8>)
 8016252:	f000 b8a7 	b.w	80163a4 <__retarget_lock_acquire_recursive>
 8016256:	bf00      	nop
 8016258:	2400125e 	.word	0x2400125e

0801625c <__sinit_lock_release>:
 801625c:	4801      	ldr	r0, [pc, #4]	; (8016264 <__sinit_lock_release+0x8>)
 801625e:	f000 b8a2 	b.w	80163a6 <__retarget_lock_release_recursive>
 8016262:	bf00      	nop
 8016264:	2400125e 	.word	0x2400125e

08016268 <__sinit>:
 8016268:	b510      	push	{r4, lr}
 801626a:	4604      	mov	r4, r0
 801626c:	f7ff fff0 	bl	8016250 <__sinit_lock_acquire>
 8016270:	69a3      	ldr	r3, [r4, #24]
 8016272:	b11b      	cbz	r3, 801627c <__sinit+0x14>
 8016274:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8016278:	f7ff bff0 	b.w	801625c <__sinit_lock_release>
 801627c:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8016280:	6523      	str	r3, [r4, #80]	; 0x50
 8016282:	4b13      	ldr	r3, [pc, #76]	; (80162d0 <__sinit+0x68>)
 8016284:	4a13      	ldr	r2, [pc, #76]	; (80162d4 <__sinit+0x6c>)
 8016286:	681b      	ldr	r3, [r3, #0]
 8016288:	62a2      	str	r2, [r4, #40]	; 0x28
 801628a:	42a3      	cmp	r3, r4
 801628c:	bf04      	itt	eq
 801628e:	2301      	moveq	r3, #1
 8016290:	61a3      	streq	r3, [r4, #24]
 8016292:	4620      	mov	r0, r4
 8016294:	f000 f820 	bl	80162d8 <__sfp>
 8016298:	6060      	str	r0, [r4, #4]
 801629a:	4620      	mov	r0, r4
 801629c:	f000 f81c 	bl	80162d8 <__sfp>
 80162a0:	60a0      	str	r0, [r4, #8]
 80162a2:	4620      	mov	r0, r4
 80162a4:	f000 f818 	bl	80162d8 <__sfp>
 80162a8:	2200      	movs	r2, #0
 80162aa:	60e0      	str	r0, [r4, #12]
 80162ac:	2104      	movs	r1, #4
 80162ae:	6860      	ldr	r0, [r4, #4]
 80162b0:	f7ff ff82 	bl	80161b8 <std>
 80162b4:	68a0      	ldr	r0, [r4, #8]
 80162b6:	2201      	movs	r2, #1
 80162b8:	2109      	movs	r1, #9
 80162ba:	f7ff ff7d 	bl	80161b8 <std>
 80162be:	68e0      	ldr	r0, [r4, #12]
 80162c0:	2202      	movs	r2, #2
 80162c2:	2112      	movs	r1, #18
 80162c4:	f7ff ff78 	bl	80161b8 <std>
 80162c8:	2301      	movs	r3, #1
 80162ca:	61a3      	str	r3, [r4, #24]
 80162cc:	e7d2      	b.n	8016274 <__sinit+0xc>
 80162ce:	bf00      	nop
 80162d0:	08017010 	.word	0x08017010
 80162d4:	08016201 	.word	0x08016201

080162d8 <__sfp>:
 80162d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80162da:	4607      	mov	r7, r0
 80162dc:	f7ff ffac 	bl	8016238 <__sfp_lock_acquire>
 80162e0:	4b1e      	ldr	r3, [pc, #120]	; (801635c <__sfp+0x84>)
 80162e2:	681e      	ldr	r6, [r3, #0]
 80162e4:	69b3      	ldr	r3, [r6, #24]
 80162e6:	b913      	cbnz	r3, 80162ee <__sfp+0x16>
 80162e8:	4630      	mov	r0, r6
 80162ea:	f7ff ffbd 	bl	8016268 <__sinit>
 80162ee:	3648      	adds	r6, #72	; 0x48
 80162f0:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80162f4:	3b01      	subs	r3, #1
 80162f6:	d503      	bpl.n	8016300 <__sfp+0x28>
 80162f8:	6833      	ldr	r3, [r6, #0]
 80162fa:	b30b      	cbz	r3, 8016340 <__sfp+0x68>
 80162fc:	6836      	ldr	r6, [r6, #0]
 80162fe:	e7f7      	b.n	80162f0 <__sfp+0x18>
 8016300:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8016304:	b9d5      	cbnz	r5, 801633c <__sfp+0x64>
 8016306:	4b16      	ldr	r3, [pc, #88]	; (8016360 <__sfp+0x88>)
 8016308:	60e3      	str	r3, [r4, #12]
 801630a:	f104 0058 	add.w	r0, r4, #88	; 0x58
 801630e:	6665      	str	r5, [r4, #100]	; 0x64
 8016310:	f000 f847 	bl	80163a2 <__retarget_lock_init_recursive>
 8016314:	f7ff ff96 	bl	8016244 <__sfp_lock_release>
 8016318:	e9c4 5501 	strd	r5, r5, [r4, #4]
 801631c:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8016320:	6025      	str	r5, [r4, #0]
 8016322:	61a5      	str	r5, [r4, #24]
 8016324:	2208      	movs	r2, #8
 8016326:	4629      	mov	r1, r5
 8016328:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 801632c:	f7fd fb4c 	bl	80139c8 <memset>
 8016330:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8016334:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8016338:	4620      	mov	r0, r4
 801633a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801633c:	3468      	adds	r4, #104	; 0x68
 801633e:	e7d9      	b.n	80162f4 <__sfp+0x1c>
 8016340:	2104      	movs	r1, #4
 8016342:	4638      	mov	r0, r7
 8016344:	f7ff ff62 	bl	801620c <__sfmoreglue>
 8016348:	4604      	mov	r4, r0
 801634a:	6030      	str	r0, [r6, #0]
 801634c:	2800      	cmp	r0, #0
 801634e:	d1d5      	bne.n	80162fc <__sfp+0x24>
 8016350:	f7ff ff78 	bl	8016244 <__sfp_lock_release>
 8016354:	230c      	movs	r3, #12
 8016356:	603b      	str	r3, [r7, #0]
 8016358:	e7ee      	b.n	8016338 <__sfp+0x60>
 801635a:	bf00      	nop
 801635c:	08017010 	.word	0x08017010
 8016360:	ffff0001 	.word	0xffff0001

08016364 <_fwalk_reent>:
 8016364:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8016368:	4606      	mov	r6, r0
 801636a:	4688      	mov	r8, r1
 801636c:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8016370:	2700      	movs	r7, #0
 8016372:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8016376:	f1b9 0901 	subs.w	r9, r9, #1
 801637a:	d505      	bpl.n	8016388 <_fwalk_reent+0x24>
 801637c:	6824      	ldr	r4, [r4, #0]
 801637e:	2c00      	cmp	r4, #0
 8016380:	d1f7      	bne.n	8016372 <_fwalk_reent+0xe>
 8016382:	4638      	mov	r0, r7
 8016384:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8016388:	89ab      	ldrh	r3, [r5, #12]
 801638a:	2b01      	cmp	r3, #1
 801638c:	d907      	bls.n	801639e <_fwalk_reent+0x3a>
 801638e:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8016392:	3301      	adds	r3, #1
 8016394:	d003      	beq.n	801639e <_fwalk_reent+0x3a>
 8016396:	4629      	mov	r1, r5
 8016398:	4630      	mov	r0, r6
 801639a:	47c0      	blx	r8
 801639c:	4307      	orrs	r7, r0
 801639e:	3568      	adds	r5, #104	; 0x68
 80163a0:	e7e9      	b.n	8016376 <_fwalk_reent+0x12>

080163a2 <__retarget_lock_init_recursive>:
 80163a2:	4770      	bx	lr

080163a4 <__retarget_lock_acquire_recursive>:
 80163a4:	4770      	bx	lr

080163a6 <__retarget_lock_release_recursive>:
 80163a6:	4770      	bx	lr

080163a8 <__swhatbuf_r>:
 80163a8:	b570      	push	{r4, r5, r6, lr}
 80163aa:	460e      	mov	r6, r1
 80163ac:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80163b0:	2900      	cmp	r1, #0
 80163b2:	b096      	sub	sp, #88	; 0x58
 80163b4:	4614      	mov	r4, r2
 80163b6:	461d      	mov	r5, r3
 80163b8:	da08      	bge.n	80163cc <__swhatbuf_r+0x24>
 80163ba:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 80163be:	2200      	movs	r2, #0
 80163c0:	602a      	str	r2, [r5, #0]
 80163c2:	061a      	lsls	r2, r3, #24
 80163c4:	d410      	bmi.n	80163e8 <__swhatbuf_r+0x40>
 80163c6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80163ca:	e00e      	b.n	80163ea <__swhatbuf_r+0x42>
 80163cc:	466a      	mov	r2, sp
 80163ce:	f000 f903 	bl	80165d8 <_fstat_r>
 80163d2:	2800      	cmp	r0, #0
 80163d4:	dbf1      	blt.n	80163ba <__swhatbuf_r+0x12>
 80163d6:	9a01      	ldr	r2, [sp, #4]
 80163d8:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80163dc:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80163e0:	425a      	negs	r2, r3
 80163e2:	415a      	adcs	r2, r3
 80163e4:	602a      	str	r2, [r5, #0]
 80163e6:	e7ee      	b.n	80163c6 <__swhatbuf_r+0x1e>
 80163e8:	2340      	movs	r3, #64	; 0x40
 80163ea:	2000      	movs	r0, #0
 80163ec:	6023      	str	r3, [r4, #0]
 80163ee:	b016      	add	sp, #88	; 0x58
 80163f0:	bd70      	pop	{r4, r5, r6, pc}
	...

080163f4 <__smakebuf_r>:
 80163f4:	898b      	ldrh	r3, [r1, #12]
 80163f6:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80163f8:	079d      	lsls	r5, r3, #30
 80163fa:	4606      	mov	r6, r0
 80163fc:	460c      	mov	r4, r1
 80163fe:	d507      	bpl.n	8016410 <__smakebuf_r+0x1c>
 8016400:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8016404:	6023      	str	r3, [r4, #0]
 8016406:	6123      	str	r3, [r4, #16]
 8016408:	2301      	movs	r3, #1
 801640a:	6163      	str	r3, [r4, #20]
 801640c:	b002      	add	sp, #8
 801640e:	bd70      	pop	{r4, r5, r6, pc}
 8016410:	ab01      	add	r3, sp, #4
 8016412:	466a      	mov	r2, sp
 8016414:	f7ff ffc8 	bl	80163a8 <__swhatbuf_r>
 8016418:	9900      	ldr	r1, [sp, #0]
 801641a:	4605      	mov	r5, r0
 801641c:	4630      	mov	r0, r6
 801641e:	f7ff f963 	bl	80156e8 <_malloc_r>
 8016422:	b948      	cbnz	r0, 8016438 <__smakebuf_r+0x44>
 8016424:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8016428:	059a      	lsls	r2, r3, #22
 801642a:	d4ef      	bmi.n	801640c <__smakebuf_r+0x18>
 801642c:	f023 0303 	bic.w	r3, r3, #3
 8016430:	f043 0302 	orr.w	r3, r3, #2
 8016434:	81a3      	strh	r3, [r4, #12]
 8016436:	e7e3      	b.n	8016400 <__smakebuf_r+0xc>
 8016438:	4b0d      	ldr	r3, [pc, #52]	; (8016470 <__smakebuf_r+0x7c>)
 801643a:	62b3      	str	r3, [r6, #40]	; 0x28
 801643c:	89a3      	ldrh	r3, [r4, #12]
 801643e:	6020      	str	r0, [r4, #0]
 8016440:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8016444:	81a3      	strh	r3, [r4, #12]
 8016446:	9b00      	ldr	r3, [sp, #0]
 8016448:	6163      	str	r3, [r4, #20]
 801644a:	9b01      	ldr	r3, [sp, #4]
 801644c:	6120      	str	r0, [r4, #16]
 801644e:	b15b      	cbz	r3, 8016468 <__smakebuf_r+0x74>
 8016450:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8016454:	4630      	mov	r0, r6
 8016456:	f000 f8d1 	bl	80165fc <_isatty_r>
 801645a:	b128      	cbz	r0, 8016468 <__smakebuf_r+0x74>
 801645c:	89a3      	ldrh	r3, [r4, #12]
 801645e:	f023 0303 	bic.w	r3, r3, #3
 8016462:	f043 0301 	orr.w	r3, r3, #1
 8016466:	81a3      	strh	r3, [r4, #12]
 8016468:	89a0      	ldrh	r0, [r4, #12]
 801646a:	4305      	orrs	r5, r0
 801646c:	81a5      	strh	r5, [r4, #12]
 801646e:	e7cd      	b.n	801640c <__smakebuf_r+0x18>
 8016470:	08016201 	.word	0x08016201

08016474 <_malloc_usable_size_r>:
 8016474:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8016478:	1f18      	subs	r0, r3, #4
 801647a:	2b00      	cmp	r3, #0
 801647c:	bfbc      	itt	lt
 801647e:	580b      	ldrlt	r3, [r1, r0]
 8016480:	18c0      	addlt	r0, r0, r3
 8016482:	4770      	bx	lr

08016484 <_raise_r>:
 8016484:	291f      	cmp	r1, #31
 8016486:	b538      	push	{r3, r4, r5, lr}
 8016488:	4604      	mov	r4, r0
 801648a:	460d      	mov	r5, r1
 801648c:	d904      	bls.n	8016498 <_raise_r+0x14>
 801648e:	2316      	movs	r3, #22
 8016490:	6003      	str	r3, [r0, #0]
 8016492:	f04f 30ff 	mov.w	r0, #4294967295
 8016496:	bd38      	pop	{r3, r4, r5, pc}
 8016498:	6c42      	ldr	r2, [r0, #68]	; 0x44
 801649a:	b112      	cbz	r2, 80164a2 <_raise_r+0x1e>
 801649c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80164a0:	b94b      	cbnz	r3, 80164b6 <_raise_r+0x32>
 80164a2:	4620      	mov	r0, r4
 80164a4:	f000 f830 	bl	8016508 <_getpid_r>
 80164a8:	462a      	mov	r2, r5
 80164aa:	4601      	mov	r1, r0
 80164ac:	4620      	mov	r0, r4
 80164ae:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80164b2:	f000 b817 	b.w	80164e4 <_kill_r>
 80164b6:	2b01      	cmp	r3, #1
 80164b8:	d00a      	beq.n	80164d0 <_raise_r+0x4c>
 80164ba:	1c59      	adds	r1, r3, #1
 80164bc:	d103      	bne.n	80164c6 <_raise_r+0x42>
 80164be:	2316      	movs	r3, #22
 80164c0:	6003      	str	r3, [r0, #0]
 80164c2:	2001      	movs	r0, #1
 80164c4:	e7e7      	b.n	8016496 <_raise_r+0x12>
 80164c6:	2400      	movs	r4, #0
 80164c8:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 80164cc:	4628      	mov	r0, r5
 80164ce:	4798      	blx	r3
 80164d0:	2000      	movs	r0, #0
 80164d2:	e7e0      	b.n	8016496 <_raise_r+0x12>

080164d4 <raise>:
 80164d4:	4b02      	ldr	r3, [pc, #8]	; (80164e0 <raise+0xc>)
 80164d6:	4601      	mov	r1, r0
 80164d8:	6818      	ldr	r0, [r3, #0]
 80164da:	f7ff bfd3 	b.w	8016484 <_raise_r>
 80164de:	bf00      	nop
 80164e0:	24000160 	.word	0x24000160

080164e4 <_kill_r>:
 80164e4:	b538      	push	{r3, r4, r5, lr}
 80164e6:	4d07      	ldr	r5, [pc, #28]	; (8016504 <_kill_r+0x20>)
 80164e8:	2300      	movs	r3, #0
 80164ea:	4604      	mov	r4, r0
 80164ec:	4608      	mov	r0, r1
 80164ee:	4611      	mov	r1, r2
 80164f0:	602b      	str	r3, [r5, #0]
 80164f2:	f7eb fcb1 	bl	8001e58 <_kill>
 80164f6:	1c43      	adds	r3, r0, #1
 80164f8:	d102      	bne.n	8016500 <_kill_r+0x1c>
 80164fa:	682b      	ldr	r3, [r5, #0]
 80164fc:	b103      	cbz	r3, 8016500 <_kill_r+0x1c>
 80164fe:	6023      	str	r3, [r4, #0]
 8016500:	bd38      	pop	{r3, r4, r5, pc}
 8016502:	bf00      	nop
 8016504:	24001258 	.word	0x24001258

08016508 <_getpid_r>:
 8016508:	f7eb bc9e 	b.w	8001e48 <_getpid>

0801650c <__sread>:
 801650c:	b510      	push	{r4, lr}
 801650e:	460c      	mov	r4, r1
 8016510:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8016514:	f000 f894 	bl	8016640 <_read_r>
 8016518:	2800      	cmp	r0, #0
 801651a:	bfab      	itete	ge
 801651c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 801651e:	89a3      	ldrhlt	r3, [r4, #12]
 8016520:	181b      	addge	r3, r3, r0
 8016522:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8016526:	bfac      	ite	ge
 8016528:	6563      	strge	r3, [r4, #84]	; 0x54
 801652a:	81a3      	strhlt	r3, [r4, #12]
 801652c:	bd10      	pop	{r4, pc}

0801652e <__swrite>:
 801652e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8016532:	461f      	mov	r7, r3
 8016534:	898b      	ldrh	r3, [r1, #12]
 8016536:	05db      	lsls	r3, r3, #23
 8016538:	4605      	mov	r5, r0
 801653a:	460c      	mov	r4, r1
 801653c:	4616      	mov	r6, r2
 801653e:	d505      	bpl.n	801654c <__swrite+0x1e>
 8016540:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8016544:	2302      	movs	r3, #2
 8016546:	2200      	movs	r2, #0
 8016548:	f000 f868 	bl	801661c <_lseek_r>
 801654c:	89a3      	ldrh	r3, [r4, #12]
 801654e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8016552:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8016556:	81a3      	strh	r3, [r4, #12]
 8016558:	4632      	mov	r2, r6
 801655a:	463b      	mov	r3, r7
 801655c:	4628      	mov	r0, r5
 801655e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8016562:	f000 b817 	b.w	8016594 <_write_r>

08016566 <__sseek>:
 8016566:	b510      	push	{r4, lr}
 8016568:	460c      	mov	r4, r1
 801656a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801656e:	f000 f855 	bl	801661c <_lseek_r>
 8016572:	1c43      	adds	r3, r0, #1
 8016574:	89a3      	ldrh	r3, [r4, #12]
 8016576:	bf15      	itete	ne
 8016578:	6560      	strne	r0, [r4, #84]	; 0x54
 801657a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 801657e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8016582:	81a3      	strheq	r3, [r4, #12]
 8016584:	bf18      	it	ne
 8016586:	81a3      	strhne	r3, [r4, #12]
 8016588:	bd10      	pop	{r4, pc}

0801658a <__sclose>:
 801658a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801658e:	f000 b813 	b.w	80165b8 <_close_r>
	...

08016594 <_write_r>:
 8016594:	b538      	push	{r3, r4, r5, lr}
 8016596:	4d07      	ldr	r5, [pc, #28]	; (80165b4 <_write_r+0x20>)
 8016598:	4604      	mov	r4, r0
 801659a:	4608      	mov	r0, r1
 801659c:	4611      	mov	r1, r2
 801659e:	2200      	movs	r2, #0
 80165a0:	602a      	str	r2, [r5, #0]
 80165a2:	461a      	mov	r2, r3
 80165a4:	f7eb fc8f 	bl	8001ec6 <_write>
 80165a8:	1c43      	adds	r3, r0, #1
 80165aa:	d102      	bne.n	80165b2 <_write_r+0x1e>
 80165ac:	682b      	ldr	r3, [r5, #0]
 80165ae:	b103      	cbz	r3, 80165b2 <_write_r+0x1e>
 80165b0:	6023      	str	r3, [r4, #0]
 80165b2:	bd38      	pop	{r3, r4, r5, pc}
 80165b4:	24001258 	.word	0x24001258

080165b8 <_close_r>:
 80165b8:	b538      	push	{r3, r4, r5, lr}
 80165ba:	4d06      	ldr	r5, [pc, #24]	; (80165d4 <_close_r+0x1c>)
 80165bc:	2300      	movs	r3, #0
 80165be:	4604      	mov	r4, r0
 80165c0:	4608      	mov	r0, r1
 80165c2:	602b      	str	r3, [r5, #0]
 80165c4:	f7eb fc9b 	bl	8001efe <_close>
 80165c8:	1c43      	adds	r3, r0, #1
 80165ca:	d102      	bne.n	80165d2 <_close_r+0x1a>
 80165cc:	682b      	ldr	r3, [r5, #0]
 80165ce:	b103      	cbz	r3, 80165d2 <_close_r+0x1a>
 80165d0:	6023      	str	r3, [r4, #0]
 80165d2:	bd38      	pop	{r3, r4, r5, pc}
 80165d4:	24001258 	.word	0x24001258

080165d8 <_fstat_r>:
 80165d8:	b538      	push	{r3, r4, r5, lr}
 80165da:	4d07      	ldr	r5, [pc, #28]	; (80165f8 <_fstat_r+0x20>)
 80165dc:	2300      	movs	r3, #0
 80165de:	4604      	mov	r4, r0
 80165e0:	4608      	mov	r0, r1
 80165e2:	4611      	mov	r1, r2
 80165e4:	602b      	str	r3, [r5, #0]
 80165e6:	f7eb fc96 	bl	8001f16 <_fstat>
 80165ea:	1c43      	adds	r3, r0, #1
 80165ec:	d102      	bne.n	80165f4 <_fstat_r+0x1c>
 80165ee:	682b      	ldr	r3, [r5, #0]
 80165f0:	b103      	cbz	r3, 80165f4 <_fstat_r+0x1c>
 80165f2:	6023      	str	r3, [r4, #0]
 80165f4:	bd38      	pop	{r3, r4, r5, pc}
 80165f6:	bf00      	nop
 80165f8:	24001258 	.word	0x24001258

080165fc <_isatty_r>:
 80165fc:	b538      	push	{r3, r4, r5, lr}
 80165fe:	4d06      	ldr	r5, [pc, #24]	; (8016618 <_isatty_r+0x1c>)
 8016600:	2300      	movs	r3, #0
 8016602:	4604      	mov	r4, r0
 8016604:	4608      	mov	r0, r1
 8016606:	602b      	str	r3, [r5, #0]
 8016608:	f7eb fc95 	bl	8001f36 <_isatty>
 801660c:	1c43      	adds	r3, r0, #1
 801660e:	d102      	bne.n	8016616 <_isatty_r+0x1a>
 8016610:	682b      	ldr	r3, [r5, #0]
 8016612:	b103      	cbz	r3, 8016616 <_isatty_r+0x1a>
 8016614:	6023      	str	r3, [r4, #0]
 8016616:	bd38      	pop	{r3, r4, r5, pc}
 8016618:	24001258 	.word	0x24001258

0801661c <_lseek_r>:
 801661c:	b538      	push	{r3, r4, r5, lr}
 801661e:	4d07      	ldr	r5, [pc, #28]	; (801663c <_lseek_r+0x20>)
 8016620:	4604      	mov	r4, r0
 8016622:	4608      	mov	r0, r1
 8016624:	4611      	mov	r1, r2
 8016626:	2200      	movs	r2, #0
 8016628:	602a      	str	r2, [r5, #0]
 801662a:	461a      	mov	r2, r3
 801662c:	f7eb fc8e 	bl	8001f4c <_lseek>
 8016630:	1c43      	adds	r3, r0, #1
 8016632:	d102      	bne.n	801663a <_lseek_r+0x1e>
 8016634:	682b      	ldr	r3, [r5, #0]
 8016636:	b103      	cbz	r3, 801663a <_lseek_r+0x1e>
 8016638:	6023      	str	r3, [r4, #0]
 801663a:	bd38      	pop	{r3, r4, r5, pc}
 801663c:	24001258 	.word	0x24001258

08016640 <_read_r>:
 8016640:	b538      	push	{r3, r4, r5, lr}
 8016642:	4d07      	ldr	r5, [pc, #28]	; (8016660 <_read_r+0x20>)
 8016644:	4604      	mov	r4, r0
 8016646:	4608      	mov	r0, r1
 8016648:	4611      	mov	r1, r2
 801664a:	2200      	movs	r2, #0
 801664c:	602a      	str	r2, [r5, #0]
 801664e:	461a      	mov	r2, r3
 8016650:	f7eb fc1c 	bl	8001e8c <_read>
 8016654:	1c43      	adds	r3, r0, #1
 8016656:	d102      	bne.n	801665e <_read_r+0x1e>
 8016658:	682b      	ldr	r3, [r5, #0]
 801665a:	b103      	cbz	r3, 801665e <_read_r+0x1e>
 801665c:	6023      	str	r3, [r4, #0]
 801665e:	bd38      	pop	{r3, r4, r5, pc}
 8016660:	24001258 	.word	0x24001258

08016664 <_init>:
 8016664:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8016666:	bf00      	nop
 8016668:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801666a:	bc08      	pop	{r3}
 801666c:	469e      	mov	lr, r3
 801666e:	4770      	bx	lr

08016670 <_fini>:
 8016670:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8016672:	bf00      	nop
 8016674:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8016676:	bc08      	pop	{r3}
 8016678:	469e      	mov	lr, r3
 801667a:	4770      	bx	lr
