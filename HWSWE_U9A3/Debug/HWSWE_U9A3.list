
HWSWE_U9A3.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000140  08000298  08000298  00010298  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  080003d8  080003d8  00020028  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .init_array   00000004  080003d8  080003d8  000103d8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  080003dc  080003dc  000103dc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         00000028  20000000  080003e0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          0000001c  20000028  08000408  00020028  2**2
                  ALLOC
  7 ._user_heap_stack 00000604  20000044  08000408  00020044  2**0
                  ALLOC
  8 .ARM.attributes 0000002e  00000000  00000000  00020028  2**0
                  CONTENTS, READONLY
  9 .debug_line   000000de  00000000  00000000  00020056  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 10 .debug_info   00000048  00000000  00000000  00020134  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 00000026  00000000  00000000  0002017c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00000048  00000000  00000000  000201a8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_str    0000007f  00000000  00000000  000201f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_ranges 00000020  00000000  00000000  00020270  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_frame  0000002c  00000000  00000000  00020290  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000298 <__do_global_dtors_aux>:
 8000298:	b510      	push	{r4, lr}
 800029a:	4c05      	ldr	r4, [pc, #20]	; (80002b0 <__do_global_dtors_aux+0x18>)
 800029c:	7823      	ldrb	r3, [r4, #0]
 800029e:	b933      	cbnz	r3, 80002ae <__do_global_dtors_aux+0x16>
 80002a0:	4b04      	ldr	r3, [pc, #16]	; (80002b4 <__do_global_dtors_aux+0x1c>)
 80002a2:	b113      	cbz	r3, 80002aa <__do_global_dtors_aux+0x12>
 80002a4:	4804      	ldr	r0, [pc, #16]	; (80002b8 <__do_global_dtors_aux+0x20>)
 80002a6:	f3af 8000 	nop.w
 80002aa:	2301      	movs	r3, #1
 80002ac:	7023      	strb	r3, [r4, #0]
 80002ae:	bd10      	pop	{r4, pc}
 80002b0:	20000028 	.word	0x20000028
 80002b4:	00000000 	.word	0x00000000
 80002b8:	080003c0 	.word	0x080003c0

080002bc <frame_dummy>:
 80002bc:	b508      	push	{r3, lr}
 80002be:	4b03      	ldr	r3, [pc, #12]	; (80002cc <frame_dummy+0x10>)
 80002c0:	b11b      	cbz	r3, 80002ca <frame_dummy+0xe>
 80002c2:	4903      	ldr	r1, [pc, #12]	; (80002d0 <frame_dummy+0x14>)
 80002c4:	4803      	ldr	r0, [pc, #12]	; (80002d4 <frame_dummy+0x18>)
 80002c6:	f3af 8000 	nop.w
 80002ca:	bd08      	pop	{r3, pc}
 80002cc:	00000000 	.word	0x00000000
 80002d0:	2000002c 	.word	0x2000002c
 80002d4:	080003c0 	.word	0x080003c0

080002d8 <sort_array>:
 *          r4: numbers[r3]
 *          r5: numbers[r3-1]
 *          r6: address offset in array
 */
sort_array:
    PUSH    {r4-r6,lr}
 80002d8:	b570      	push	{r4, r5, r6, lr}
    # loop 1: for (r2 = (array_size - 1); r2 >= 0; r2--)
    MOV     r2,r1                   @ r2 = array_size - 1
 80002da:	460a      	mov	r2, r1
    SUB     r2,r2,#1
 80002dc:	f1a2 0201 	sub.w	r2, r2, #1

080002e0 <sort_loop1>:
sort_loop1:
    CMP     r2,#0                   @ check loop 1, r2 >= 0 ?
 80002e0:	2a00      	cmp	r2, #0
    BLT     sort_end                @ no, loop 1 end --> branch sort_end
 80002e2:	db15      	blt.n	8000310 <sort_end>

    # loop 2: for (r3 = 1; r3 <= r2; r3++)
    MOV     r3,#1                   @ r3 = 1
 80002e4:	f04f 0301 	mov.w	r3, #1

080002e8 <sort_loop2>:
sort_loop2:
    CMP     r3,r2                   @ r3 <= r2?
 80002e8:	4293      	cmp	r3, r2
    BGT     sort_loop1_end          @ no, loop2 end --> branch sort_loop1_end
 80002ea:	dc0e      	bgt.n	800030a <sort_loop1_end>

080002ec <swap>:
swap:
    MOV     r6,r3,LSL #2            @ address offset for index r3: r6 = r3*4
 80002ec:	ea4f 0683 	mov.w	r6, r3, lsl #2
    LDR     r4,[r0,r6]              @ r4 = numbers[r3]
 80002f0:	5984      	ldr	r4, [r0, r6]
    SUB     r6,r6,#4                @ address offset for index (r3 - 1)
 80002f2:	f1a6 0604 	sub.w	r6, r6, #4
    LDR     r5,[r0,r6]              @ r5 = numbers[r3-1]
 80002f6:	5985      	ldr	r5, [r0, r6]
    CMP     r5,r4                   @ if (numbers[r3-1] > numbers[r3])
 80002f8:	42a5      	cmp	r5, r4
    BLS     sort_loop2_end          @ no --> don't swap
 80002fa:	d903      	bls.n	8000304 <sort_loop2_end>
    STR     r4,[r0,r6]              @ numbers[r3-1] = lower value
 80002fc:	5184      	str	r4, [r0, r6]
    ADD     r6,r6,#4                @ prepare next address offset
 80002fe:	f106 0604 	add.w	r6, r6, #4
    STR     r5,[r0,r6]              @ numbers[r3] = higher value
 8000302:	5185      	str	r5, [r0, r6]

08000304 <sort_loop2_end>:

sort_loop2_end:
    ADD     r3,r3,#1                @ loop 2 end, prepare next loop, r3++
 8000304:	f103 0301 	add.w	r3, r3, #1
    B       sort_loop2              @ next loop 2
 8000308:	e7ee      	b.n	80002e8 <sort_loop2>

0800030a <sort_loop1_end>:

sort_loop1_end:
    SUB     r2,r2,#1                @ loop 1 end, prepare next loop, r2--
 800030a:	f1a2 0201 	sub.w	r2, r2, #1
    B       sort_loop1              @ next loop 1
 800030e:	e7e7      	b.n	80002e0 <sort_loop1>

08000310 <sort_end>:
sort_end:
    POP {r4-r6,pc}
 8000310:	bd70      	pop	{r4, r5, r6, pc}

08000312 <main>:
main:
/**
 * endless loop
 */
loop:
    LDR     r0,=array               @ r0 points to array base address
 8000312:	4803      	ldr	r0, [pc, #12]	; (8000320 <main+0xe>)
    MOV     r1,#size                @ r1 holds number of values in array
 8000314:	f04f 010a 	mov.w	r1, #10
    BL      sort_array
 8000318:	f7ff ffde 	bl	80002d8 <sort_array>
    B       loop
 800031c:	e7f9      	b.n	8000312 <main>
 800031e:	0000      	.short	0x0000
    LDR     r0,=array               @ r0 points to array base address
 8000320:	20000000 	.word	0x20000000

08000324 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000324:	480d      	ldr	r0, [pc, #52]	; (800035c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000326:	4685      	mov	sp, r0
/* Call the clock system intitialization function.*/
  bl  SystemInit
 8000328:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800032c:	480c      	ldr	r0, [pc, #48]	; (8000360 <LoopForever+0x6>)
  ldr r1, =_edata
 800032e:	490d      	ldr	r1, [pc, #52]	; (8000364 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000330:	4a0d      	ldr	r2, [pc, #52]	; (8000368 <LoopForever+0xe>)
  movs r3, #0
 8000332:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000334:	e002      	b.n	800033c <LoopCopyDataInit>

08000336 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000336:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000338:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800033a:	3304      	adds	r3, #4

0800033c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800033c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800033e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000340:	d3f9      	bcc.n	8000336 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000342:	4a0a      	ldr	r2, [pc, #40]	; (800036c <LoopForever+0x12>)
  ldr r4, =_ebss
 8000344:	4c0a      	ldr	r4, [pc, #40]	; (8000370 <LoopForever+0x16>)
  movs r3, #0
 8000346:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000348:	e001      	b.n	800034e <LoopFillZerobss>

0800034a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800034a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800034c:	3204      	adds	r2, #4

0800034e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800034e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000350:	d3fb      	bcc.n	800034a <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000352:	f000 f811 	bl	8000378 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000356:	f7ff ffdc 	bl	8000312 <main>

0800035a <LoopForever>:

LoopForever:
    b LoopForever
 800035a:	e7fe      	b.n	800035a <LoopForever>
  ldr   r0, =_estack
 800035c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000360:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000364:	20000028 	.word	0x20000028
  ldr r2, =_sidata
 8000368:	080003e0 	.word	0x080003e0
  ldr r2, =_sbss
 800036c:	20000028 	.word	0x20000028
  ldr r4, =_ebss
 8000370:	20000044 	.word	0x20000044

08000374 <ADC1_2_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000374:	e7fe      	b.n	8000374 <ADC1_2_IRQHandler>
	...

08000378 <__libc_init_array>:
 8000378:	b570      	push	{r4, r5, r6, lr}
 800037a:	4d0d      	ldr	r5, [pc, #52]	; (80003b0 <__libc_init_array+0x38>)
 800037c:	4c0d      	ldr	r4, [pc, #52]	; (80003b4 <__libc_init_array+0x3c>)
 800037e:	1b64      	subs	r4, r4, r5
 8000380:	10a4      	asrs	r4, r4, #2
 8000382:	2600      	movs	r6, #0
 8000384:	42a6      	cmp	r6, r4
 8000386:	d109      	bne.n	800039c <__libc_init_array+0x24>
 8000388:	4d0b      	ldr	r5, [pc, #44]	; (80003b8 <__libc_init_array+0x40>)
 800038a:	4c0c      	ldr	r4, [pc, #48]	; (80003bc <__libc_init_array+0x44>)
 800038c:	f000 f818 	bl	80003c0 <_init>
 8000390:	1b64      	subs	r4, r4, r5
 8000392:	10a4      	asrs	r4, r4, #2
 8000394:	2600      	movs	r6, #0
 8000396:	42a6      	cmp	r6, r4
 8000398:	d105      	bne.n	80003a6 <__libc_init_array+0x2e>
 800039a:	bd70      	pop	{r4, r5, r6, pc}
 800039c:	f855 3b04 	ldr.w	r3, [r5], #4
 80003a0:	4798      	blx	r3
 80003a2:	3601      	adds	r6, #1
 80003a4:	e7ee      	b.n	8000384 <__libc_init_array+0xc>
 80003a6:	f855 3b04 	ldr.w	r3, [r5], #4
 80003aa:	4798      	blx	r3
 80003ac:	3601      	adds	r6, #1
 80003ae:	e7f2      	b.n	8000396 <__libc_init_array+0x1e>
 80003b0:	080003d8 	.word	0x080003d8
 80003b4:	080003d8 	.word	0x080003d8
 80003b8:	080003d8 	.word	0x080003d8
 80003bc:	080003dc 	.word	0x080003dc

080003c0 <_init>:
 80003c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80003c2:	bf00      	nop
 80003c4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80003c6:	bc08      	pop	{r3}
 80003c8:	469e      	mov	lr, r3
 80003ca:	4770      	bx	lr

080003cc <_fini>:
 80003cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80003ce:	bf00      	nop
 80003d0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80003d2:	bc08      	pop	{r3}
 80003d4:	469e      	mov	lr, r3
 80003d6:	4770      	bx	lr
