
HWSWE_U9A1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000124  08000298  08000298  00010298  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  080003bc  080003bc  00020018  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .init_array   00000004  080003bc  080003bc  000103bc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  080003c0  080003c0  000103c0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         00000018  20000000  080003c4  00020000  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          0000001c  20000018  080003dc  00020018  2**2
                  ALLOC
  7 ._user_heap_stack 00000604  20000034  080003dc  00020034  2**0
                  ALLOC
  8 .ARM.attributes 0000002e  00000000  00000000  00020018  2**0
                  CONTENTS, READONLY
  9 .debug_line   000000d3  00000000  00000000  00020046  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 10 .debug_info   00000048  00000000  00000000  00020119  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 00000026  00000000  00000000  00020161  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00000048  00000000  00000000  00020188  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_str    000000b3  00000000  00000000  000201d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_ranges 00000020  00000000  00000000  00020288  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_frame  0000002c  00000000  00000000  000202a8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000298 <__do_global_dtors_aux>:
 8000298:	b510      	push	{r4, lr}
 800029a:	4c05      	ldr	r4, [pc, #20]	; (80002b0 <__do_global_dtors_aux+0x18>)
 800029c:	7823      	ldrb	r3, [r4, #0]
 800029e:	b933      	cbnz	r3, 80002ae <__do_global_dtors_aux+0x16>
 80002a0:	4b04      	ldr	r3, [pc, #16]	; (80002b4 <__do_global_dtors_aux+0x1c>)
 80002a2:	b113      	cbz	r3, 80002aa <__do_global_dtors_aux+0x12>
 80002a4:	4804      	ldr	r0, [pc, #16]	; (80002b8 <__do_global_dtors_aux+0x20>)
 80002a6:	f3af 8000 	nop.w
 80002aa:	2301      	movs	r3, #1
 80002ac:	7023      	strb	r3, [r4, #0]
 80002ae:	bd10      	pop	{r4, pc}
 80002b0:	20000018 	.word	0x20000018
 80002b4:	00000000 	.word	0x00000000
 80002b8:	080003a4 	.word	0x080003a4

080002bc <frame_dummy>:
 80002bc:	b508      	push	{r3, lr}
 80002be:	4b03      	ldr	r3, [pc, #12]	; (80002cc <frame_dummy+0x10>)
 80002c0:	b11b      	cbz	r3, 80002ca <frame_dummy+0xe>
 80002c2:	4903      	ldr	r1, [pc, #12]	; (80002d0 <frame_dummy+0x14>)
 80002c4:	4803      	ldr	r0, [pc, #12]	; (80002d4 <frame_dummy+0x18>)
 80002c6:	f3af 8000 	nop.w
 80002ca:	bd08      	pop	{r3, pc}
 80002cc:	00000000 	.word	0x00000000
 80002d0:	2000001c 	.word	0x2000001c
 80002d4:	080003a4 	.word	0x080003a4

080002d8 <count_e>:
 * @return  r0: number of 'e' within the string
 * @remark  r1 used to point to actual char in string
 *          r2 holds actual char
 */
count_e:
    MOV     r1,r0                   @ r1 points to start character
 80002d8:	4601      	mov	r1, r0
    MOV     r0,#0                   @ r0 holds number of 'e'
 80002da:	f04f 0000 	mov.w	r0, #0

080002de <count_loop>:
count_loop:
    LDRB    r2,[r1],#1              @ load actual character, increment pointer r1
 80002de:	f811 2b01 	ldrb.w	r2, [r1], #1
    CMP     r2,#0                   @ end of string?
 80002e2:	2a00      	cmp	r2, #0
    BEQ     count_end               @ yes --> end
 80002e4:	d004      	beq.n	80002f0 <count_end>
    CMP     r2,#'e'                 @ check if character is 'e'
 80002e6:	2a65      	cmp	r2, #101	; 0x65
    BNE     count_loop              @ no --> next character
 80002e8:	d1f9      	bne.n	80002de <count_loop>
    ADD     r0,r0,#1                @ yes --> increment counter r0
 80002ea:	f100 0001 	add.w	r0, r0, #1
    B       count_loop              @ next character
 80002ee:	e7f6      	b.n	80002de <count_loop>

080002f0 <count_end>:
count_end:
    MOV     pc,lr                   @ return
 80002f0:	46f7      	mov	pc, lr

080002f2 <main>:
main:
/**
 * endless loop
 */
loop:
    LDR     r0,=str1                @ load r0 (parameter) with string base address
 80002f2:	4803      	ldr	r0, [pc, #12]	; (8000300 <main+0xe>)
    BL      count_e                 @ call subroutine
 80002f4:	f7ff fff0 	bl	80002d8 <count_e>
    LDR     r0,=str2                @ load r0 (parameter) with string base address
 80002f8:	4802      	ldr	r0, [pc, #8]	; (8000304 <main+0x12>)
    BL      count_e                 @ call subroutine
 80002fa:	f7ff ffed 	bl	80002d8 <count_e>
    B       loop
 80002fe:	e7f8      	b.n	80002f2 <main>
    LDR     r0,=str1                @ load r0 (parameter) with string base address
 8000300:	20000000 	.word	0x20000000
    LDR     r0,=str2                @ load r0 (parameter) with string base address
 8000304:	20000005 	.word	0x20000005

08000308 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000308:	480d      	ldr	r0, [pc, #52]	; (8000340 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800030a:	4685      	mov	sp, r0
/* Call the clock system intitialization function.*/
  bl  SystemInit
 800030c:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000310:	480c      	ldr	r0, [pc, #48]	; (8000344 <LoopForever+0x6>)
  ldr r1, =_edata
 8000312:	490d      	ldr	r1, [pc, #52]	; (8000348 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000314:	4a0d      	ldr	r2, [pc, #52]	; (800034c <LoopForever+0xe>)
  movs r3, #0
 8000316:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000318:	e002      	b.n	8000320 <LoopCopyDataInit>

0800031a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800031a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800031c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800031e:	3304      	adds	r3, #4

08000320 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000320:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000322:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000324:	d3f9      	bcc.n	800031a <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000326:	4a0a      	ldr	r2, [pc, #40]	; (8000350 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000328:	4c0a      	ldr	r4, [pc, #40]	; (8000354 <LoopForever+0x16>)
  movs r3, #0
 800032a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800032c:	e001      	b.n	8000332 <LoopFillZerobss>

0800032e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800032e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000330:	3204      	adds	r2, #4

08000332 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000332:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000334:	d3fb      	bcc.n	800032e <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000336:	f000 f811 	bl	800035c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800033a:	f7ff ffda 	bl	80002f2 <main>

0800033e <LoopForever>:

LoopForever:
    b LoopForever
 800033e:	e7fe      	b.n	800033e <LoopForever>
  ldr   r0, =_estack
 8000340:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000344:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000348:	20000018 	.word	0x20000018
  ldr r2, =_sidata
 800034c:	080003c4 	.word	0x080003c4
  ldr r2, =_sbss
 8000350:	20000018 	.word	0x20000018
  ldr r4, =_ebss
 8000354:	20000034 	.word	0x20000034

08000358 <ADC1_2_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000358:	e7fe      	b.n	8000358 <ADC1_2_IRQHandler>
	...

0800035c <__libc_init_array>:
 800035c:	b570      	push	{r4, r5, r6, lr}
 800035e:	4d0d      	ldr	r5, [pc, #52]	; (8000394 <__libc_init_array+0x38>)
 8000360:	4c0d      	ldr	r4, [pc, #52]	; (8000398 <__libc_init_array+0x3c>)
 8000362:	1b64      	subs	r4, r4, r5
 8000364:	10a4      	asrs	r4, r4, #2
 8000366:	2600      	movs	r6, #0
 8000368:	42a6      	cmp	r6, r4
 800036a:	d109      	bne.n	8000380 <__libc_init_array+0x24>
 800036c:	4d0b      	ldr	r5, [pc, #44]	; (800039c <__libc_init_array+0x40>)
 800036e:	4c0c      	ldr	r4, [pc, #48]	; (80003a0 <__libc_init_array+0x44>)
 8000370:	f000 f818 	bl	80003a4 <_init>
 8000374:	1b64      	subs	r4, r4, r5
 8000376:	10a4      	asrs	r4, r4, #2
 8000378:	2600      	movs	r6, #0
 800037a:	42a6      	cmp	r6, r4
 800037c:	d105      	bne.n	800038a <__libc_init_array+0x2e>
 800037e:	bd70      	pop	{r4, r5, r6, pc}
 8000380:	f855 3b04 	ldr.w	r3, [r5], #4
 8000384:	4798      	blx	r3
 8000386:	3601      	adds	r6, #1
 8000388:	e7ee      	b.n	8000368 <__libc_init_array+0xc>
 800038a:	f855 3b04 	ldr.w	r3, [r5], #4
 800038e:	4798      	blx	r3
 8000390:	3601      	adds	r6, #1
 8000392:	e7f2      	b.n	800037a <__libc_init_array+0x1e>
 8000394:	080003bc 	.word	0x080003bc
 8000398:	080003bc 	.word	0x080003bc
 800039c:	080003bc 	.word	0x080003bc
 80003a0:	080003c0 	.word	0x080003c0

080003a4 <_init>:
 80003a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80003a6:	bf00      	nop
 80003a8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80003aa:	bc08      	pop	{r3}
 80003ac:	469e      	mov	lr, r3
 80003ae:	4770      	bx	lr

080003b0 <_fini>:
 80003b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80003b2:	bf00      	nop
 80003b4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80003b6:	bc08      	pop	{r3}
 80003b8:	469e      	mov	lr, r3
 80003ba:	4770      	bx	lr
